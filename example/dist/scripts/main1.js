/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "example/dist/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _main = __webpack_require__(1);\n\nnew _main.Post({\n  $el_active: '#post-el',\n  convert_into_entities: true,\n  onComplete: function onComplete(props) {\n    console.log(props);\n\n    //this.clear();\n    //this.hide();\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9leGFtcGxlL3NyYy9tYWluMS5qcz9lOGYxIl0sIm5hbWVzIjpbIiRlbF9hY3RpdmUiLCJjb252ZXJ0X2ludG9fZW50aXRpZXMiLCJvbkNvbXBsZXRlIiwicHJvcHMiLCJjb25zb2xlIiwibG9nIl0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUVBLGVBQVM7QUFDUEEsY0FBVyxVQURKO0FBRU5DLHlCQUF3QixJQUZsQjtBQUdOQyxZQUhNLHNCQUdLQyxLQUhMLEVBR1c7QUFDaEJDLFlBQVFDLEdBQVIsQ0FBWUYsS0FBWjs7QUFFQTtBQUNBO0FBRUQ7QUFUTSxDQUFUIiwiZmlsZSI6IjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1Bvc3R9IGZyb20gJy4uLy4uL2Rpc3Qvc2NyaXB0cy9tYWluMS5qcyc7XHJcblxyXG5uZXcgUG9zdCh7XHJcbiAgJGVsX2FjdGl2ZTonI3Bvc3QtZWwnXHJcbiAgLGNvbnZlcnRfaW50b19lbnRpdGllcyA6IHRydWVcclxuICAsb25Db21wbGV0ZShwcm9wcyl7XHJcbiAgICBjb25zb2xlLmxvZyhwcm9wcyk7XHJcblxyXG4gICAgLy90aGlzLmNsZWFyKCk7XHJcbiAgICAvL3RoaXMuaGlkZSgpO1xyXG5cclxuICB9XHJcbn0pXHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2V4YW1wbGUvc3JjL21haW4xLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var _typeof=typeof Symbol===\"function\"&&typeof Symbol.iterator===\"symbol\"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol===\"function\"&&obj.constructor===Symbol&&obj!==Symbol.prototype?\"symbol\":typeof obj;};(function webpackUniversalModuleDefinition(root,factory){if(( false?'undefined':_typeof(exports))==='object'&&( false?'undefined':_typeof(module))==='object')module.exports=factory();else if(true)!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else if((typeof exports==='undefined'?'undefined':_typeof(exports))==='object')exports[\"EmojiOvO\"]=factory();else root[\"EmojiOvO\"]=factory();})(undefined,function(){return(/******/function(modules){// webpackBootstrap\n/******/// The module cache\n/******/var installedModules={};/******//******/// The require function\n/******/function __webpack_require__(moduleId){/******//******/// Check if module is in cache\n/******/if(installedModules[moduleId]){/******/return installedModules[moduleId].exports;/******/}/******/// Create a new module (and put it into the cache)\n/******/var module=installedModules[moduleId]={/******/i:moduleId,/******/l:false,/******/exports:{}/******/};/******//******/// Execute the module function\n/******/modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);/******//******/// Flag the module as loaded\n/******/module.l=true;/******//******/// Return the exports of the module\n/******/return module.exports;/******/}/******//******//******/// expose the modules object (__webpack_modules__)\n/******/__webpack_require__.m=modules;/******//******/// expose the module cache\n/******/__webpack_require__.c=installedModules;/******//******/// define getter function for harmony exports\n/******/__webpack_require__.d=function(exports,name,getter){/******/if(!__webpack_require__.o(exports,name)){/******/Object.defineProperty(exports,name,{/******/configurable:false,/******/enumerable:true,/******/get:getter/******/});/******/}/******/};/******//******/// getDefaultExport function for compatibility with non-harmony modules\n/******/__webpack_require__.n=function(module){/******/var getter=module&&module.__esModule?/******/function getDefault(){return module['default'];}:/******/function getModuleExports(){return module;};/******/__webpack_require__.d(getter,'a',getter);/******/return getter;/******/};/******//******/// Object.prototype.hasOwnProperty.call\n/******/__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property);};/******//******/// __webpack_public_path__\n/******/__webpack_require__.p=\"dist/\";/******//******/// Load entry module and return exports\n/******/return __webpack_require__(__webpack_require__.s=7);/******/}(/************************************************************************//******/[/* 0 *//***/function(module,exports){eval(\"/*\\r\\n\\tMIT License http://www.opensource.org/licenses/mit-license.php\\r\\n\\tAuthor Tobias Koppers @sokra\\r\\n*/\\r\\n// css base code, injected by the css-loader\\r\\nmodule.exports = function() {\\r\\n\\tvar list = [];\\r\\n\\r\\n\\t// return the list of modules as css string\\r\\n\\tlist.toString = function toString() {\\r\\n\\t\\tvar result = [];\\r\\n\\t\\tfor(var i = 0; i < this.length; i++) {\\r\\n\\t\\t\\tvar item = this[i];\\r\\n\\t\\t\\tif(item[2]) {\\r\\n\\t\\t\\t\\tresult.push(\\\"@media \\\" + item[2] + \\\"{\\\" + item[1] + \\\"}\\\");\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\tresult.push(item[1]);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\treturn result.join(\\\"\\\");\\r\\n\\t};\\r\\n\\r\\n\\t// import a list of modules into the list\\r\\n\\tlist.i = function(modules, mediaQuery) {\\r\\n\\t\\tif(typeof modules === \\\"string\\\")\\r\\n\\t\\t\\tmodules = [[null, modules, \\\"\\\"]];\\r\\n\\t\\tvar alreadyImportedModules = {};\\r\\n\\t\\tfor(var i = 0; i < this.length; i++) {\\r\\n\\t\\t\\tvar id = this[i][0];\\r\\n\\t\\t\\tif(typeof id === \\\"number\\\")\\r\\n\\t\\t\\t\\talreadyImportedModules[id] = true;\\r\\n\\t\\t}\\r\\n\\t\\tfor(i = 0; i < modules.length; i++) {\\r\\n\\t\\t\\tvar item = modules[i];\\r\\n\\t\\t\\t// skip already imported module\\r\\n\\t\\t\\t// this implementation is not 100% perfect for weird media query combinations\\r\\n\\t\\t\\t//  when a module is imported multiple times with different media queries.\\r\\n\\t\\t\\t//  I hope this will never occur (Hey this way we have smaller bundles)\\r\\n\\t\\t\\tif(typeof item[0] !== \\\"number\\\" || !alreadyImportedModules[item[0]]) {\\r\\n\\t\\t\\t\\tif(mediaQuery && !item[2]) {\\r\\n\\t\\t\\t\\t\\titem[2] = mediaQuery;\\r\\n\\t\\t\\t\\t} else if(mediaQuery) {\\r\\n\\t\\t\\t\\t\\titem[2] = \\\"(\\\" + item[2] + \\\") and (\\\" + mediaQuery + \\\")\\\";\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tlist.push(item);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t};\\r\\n\\treturn list;\\r\\n};\\r\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZDovd2ViL25vZGVfbW9kdWxlcy8uMC4yMy4xQGNzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzPzg5YTIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGlCQUFpQjtBQUNqQztBQUNBO0FBQ0Esd0NBQXdDLGdCQUFnQjtBQUN4RCxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGlCQUFpQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksb0JBQW9CO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcclxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxyXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcclxuKi9cclxuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcclxuXHR2YXIgbGlzdCA9IFtdO1xyXG5cclxuXHQvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXHJcblx0bGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xyXG5cdFx0dmFyIHJlc3VsdCA9IFtdO1xyXG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0dmFyIGl0ZW0gPSB0aGlzW2ldO1xyXG5cdFx0XHRpZihpdGVtWzJdKSB7XHJcblx0XHRcdFx0cmVzdWx0LnB1c2goXCJAbWVkaWEgXCIgKyBpdGVtWzJdICsgXCJ7XCIgKyBpdGVtWzFdICsgXCJ9XCIpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHJlc3VsdC5wdXNoKGl0ZW1bMV0pO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gcmVzdWx0LmpvaW4oXCJcIik7XHJcblx0fTtcclxuXHJcblx0Ly8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcclxuXHRsaXN0LmkgPSBmdW5jdGlvbihtb2R1bGVzLCBtZWRpYVF1ZXJ5KSB7XHJcblx0XHRpZih0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIilcclxuXHRcdFx0bW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgXCJcIl1dO1xyXG5cdFx0dmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcclxuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdHZhciBpZCA9IHRoaXNbaV1bMF07XHJcblx0XHRcdGlmKHR5cGVvZiBpZCA9PT0gXCJudW1iZXJcIilcclxuXHRcdFx0XHRhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XHJcblx0XHR9XHJcblx0XHRmb3IoaSA9IDA7IGkgPCBtb2R1bGVzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdHZhciBpdGVtID0gbW9kdWxlc1tpXTtcclxuXHRcdFx0Ly8gc2tpcCBhbHJlYWR5IGltcG9ydGVkIG1vZHVsZVxyXG5cdFx0XHQvLyB0aGlzIGltcGxlbWVudGF0aW9uIGlzIG5vdCAxMDAlIHBlcmZlY3QgZm9yIHdlaXJkIG1lZGlhIHF1ZXJ5IGNvbWJpbmF0aW9uc1xyXG5cdFx0XHQvLyAgd2hlbiBhIG1vZHVsZSBpcyBpbXBvcnRlZCBtdWx0aXBsZSB0aW1lcyB3aXRoIGRpZmZlcmVudCBtZWRpYSBxdWVyaWVzLlxyXG5cdFx0XHQvLyAgSSBob3BlIHRoaXMgd2lsbCBuZXZlciBvY2N1ciAoSGV5IHRoaXMgd2F5IHdlIGhhdmUgc21hbGxlciBidW5kbGVzKVxyXG5cdFx0XHRpZih0eXBlb2YgaXRlbVswXSAhPT0gXCJudW1iZXJcIiB8fCAhYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xyXG5cdFx0XHRcdGlmKG1lZGlhUXVlcnkgJiYgIWl0ZW1bMl0pIHtcclxuXHRcdFx0XHRcdGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xyXG5cdFx0XHRcdH0gZWxzZSBpZihtZWRpYVF1ZXJ5KSB7XHJcblx0XHRcdFx0XHRpdGVtWzJdID0gXCIoXCIgKyBpdGVtWzJdICsgXCIpIGFuZCAoXCIgKyBtZWRpYVF1ZXJ5ICsgXCIpXCI7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGxpc3QucHVzaChpdGVtKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH07XHJcblx0cmV0dXJuIGxpc3Q7XHJcbn07XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIGQ6L3dlYi9ub2RlX21vZHVsZXMvLjAuMjMuMUBjc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1xuLy8gbW9kdWxlIGlkID0gMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///0\\n\");/***/},/* 1 *//***/function(module,exports){eval(\"/*\\r\\n\\tMIT License http://www.opensource.org/licenses/mit-license.php\\r\\n\\tAuthor Tobias Koppers @sokra\\r\\n*/\\r\\nvar stylesInDom = {},\\r\\n\\tmemoize = function(fn) {\\r\\n\\t\\tvar memo;\\r\\n\\t\\treturn function () {\\r\\n\\t\\t\\tif (typeof memo === \\\"undefined\\\") memo = fn.apply(this, arguments);\\r\\n\\t\\t\\treturn memo;\\r\\n\\t\\t};\\r\\n\\t},\\r\\n\\tisOldIE = memoize(function() {\\r\\n\\t\\treturn /msie [6-9]\\\\b/.test(window.navigator.userAgent.toLowerCase());\\r\\n\\t}),\\r\\n\\tgetHeadElement = memoize(function () {\\r\\n\\t\\treturn document.head || document.getElementsByTagName(\\\"head\\\")[0];\\r\\n\\t}),\\r\\n\\tsingletonElement = null,\\r\\n\\tsingletonCounter = 0,\\r\\n\\tstyleElementsInsertedAtTop = [];\\r\\n\\r\\nmodule.exports = function(list, options) {\\r\\n\\tif(typeof DEBUG !== \\\"undefined\\\" && DEBUG) {\\r\\n\\t\\tif(typeof document !== \\\"object\\\") throw new Error(\\\"The style-loader cannot be used in a non-browser environment\\\");\\r\\n\\t}\\r\\n\\r\\n\\toptions = options || {};\\r\\n\\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\\r\\n\\t// tags it will allow on a page\\r\\n\\tif (typeof options.singleton === \\\"undefined\\\") options.singleton = isOldIE();\\r\\n\\r\\n\\t// By default, add <style> tags to the bottom of <head>.\\r\\n\\tif (typeof options.insertAt === \\\"undefined\\\") options.insertAt = \\\"bottom\\\";\\r\\n\\r\\n\\tvar styles = listToStyles(list);\\r\\n\\taddStylesToDom(styles, options);\\r\\n\\r\\n\\treturn function update(newList) {\\r\\n\\t\\tvar mayRemove = [];\\r\\n\\t\\tfor(var i = 0; i < styles.length; i++) {\\r\\n\\t\\t\\tvar item = styles[i];\\r\\n\\t\\t\\tvar domStyle = stylesInDom[item.id];\\r\\n\\t\\t\\tdomStyle.refs--;\\r\\n\\t\\t\\tmayRemove.push(domStyle);\\r\\n\\t\\t}\\r\\n\\t\\tif(newList) {\\r\\n\\t\\t\\tvar newStyles = listToStyles(newList);\\r\\n\\t\\t\\taddStylesToDom(newStyles, options);\\r\\n\\t\\t}\\r\\n\\t\\tfor(var i = 0; i < mayRemove.length; i++) {\\r\\n\\t\\t\\tvar domStyle = mayRemove[i];\\r\\n\\t\\t\\tif(domStyle.refs === 0) {\\r\\n\\t\\t\\t\\tfor(var j = 0; j < domStyle.parts.length; j++)\\r\\n\\t\\t\\t\\t\\tdomStyle.parts[j]();\\r\\n\\t\\t\\t\\tdelete stylesInDom[domStyle.id];\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t};\\r\\n}\\r\\n\\r\\nfunction addStylesToDom(styles, options) {\\r\\n\\tfor(var i = 0; i < styles.length; i++) {\\r\\n\\t\\tvar item = styles[i];\\r\\n\\t\\tvar domStyle = stylesInDom[item.id];\\r\\n\\t\\tif(domStyle) {\\r\\n\\t\\t\\tdomStyle.refs++;\\r\\n\\t\\t\\tfor(var j = 0; j < domStyle.parts.length; j++) {\\r\\n\\t\\t\\t\\tdomStyle.parts[j](item.parts[j]);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tfor(; j < item.parts.length; j++) {\\r\\n\\t\\t\\t\\tdomStyle.parts.push(addStyle(item.parts[j], options));\\r\\n\\t\\t\\t}\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tvar parts = [];\\r\\n\\t\\t\\tfor(var j = 0; j < item.parts.length; j++) {\\r\\n\\t\\t\\t\\tparts.push(addStyle(item.parts[j], options));\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\\r\\nfunction listToStyles(list) {\\r\\n\\tvar styles = [];\\r\\n\\tvar newStyles = {};\\r\\n\\tfor(var i = 0; i < list.length; i++) {\\r\\n\\t\\tvar item = list[i];\\r\\n\\t\\tvar id = item[0];\\r\\n\\t\\tvar css = item[1];\\r\\n\\t\\tvar media = item[2];\\r\\n\\t\\tvar sourceMap = item[3];\\r\\n\\t\\tvar part = {css: css, media: media, sourceMap: sourceMap};\\r\\n\\t\\tif(!newStyles[id])\\r\\n\\t\\t\\tstyles.push(newStyles[id] = {id: id, parts: [part]});\\r\\n\\t\\telse\\r\\n\\t\\t\\tnewStyles[id].parts.push(part);\\r\\n\\t}\\r\\n\\treturn styles;\\r\\n}\\r\\n\\r\\nfunction insertStyleElement(options, styleElement) {\\r\\n\\tvar head = getHeadElement();\\r\\n\\tvar lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];\\r\\n\\tif (options.insertAt === \\\"top\\\") {\\r\\n\\t\\tif(!lastStyleElementInsertedAtTop) {\\r\\n\\t\\t\\thead.insertBefore(styleElement, head.firstChild);\\r\\n\\t\\t} else if(lastStyleElementInsertedAtTop.nextSibling) {\\r\\n\\t\\t\\thead.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\thead.appendChild(styleElement);\\r\\n\\t\\t}\\r\\n\\t\\tstyleElementsInsertedAtTop.push(styleElement);\\r\\n\\t} else if (options.insertAt === \\\"bottom\\\") {\\r\\n\\t\\thead.appendChild(styleElement);\\r\\n\\t} else {\\r\\n\\t\\tthrow new Error(\\\"Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.\\\");\\r\\n\\t}\\r\\n}\\r\\n\\r\\nfunction removeStyleElement(styleElement) {\\r\\n\\tstyleElement.parentNode.removeChild(styleElement);\\r\\n\\tvar idx = styleElementsInsertedAtTop.indexOf(styleElement);\\r\\n\\tif(idx >= 0) {\\r\\n\\t\\tstyleElementsInsertedAtTop.splice(idx, 1);\\r\\n\\t}\\r\\n}\\r\\n\\r\\nfunction createStyleElement(options) {\\r\\n\\tvar styleElement = document.createElement(\\\"style\\\");\\r\\n\\tstyleElement.type = \\\"text/css\\\";\\r\\n\\tinsertStyleElement(options, styleElement);\\r\\n\\treturn styleElement;\\r\\n}\\r\\n\\r\\nfunction createLinkElement(options) {\\r\\n\\tvar linkElement = document.createElement(\\\"link\\\");\\r\\n\\tlinkElement.rel = \\\"stylesheet\\\";\\r\\n\\tinsertStyleElement(options, linkElement);\\r\\n\\treturn linkElement;\\r\\n}\\r\\n\\r\\nfunction addStyle(obj, options) {\\r\\n\\tvar styleElement, update, remove;\\r\\n\\r\\n\\tif (options.singleton) {\\r\\n\\t\\tvar styleIndex = singletonCounter++;\\r\\n\\t\\tstyleElement = singletonElement || (singletonElement = createStyleElement(options));\\r\\n\\t\\tupdate = applyToSingletonTag.bind(null, styleElement, styleIndex, false);\\r\\n\\t\\tremove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);\\r\\n\\t} else if(obj.sourceMap &&\\r\\n\\t\\ttypeof URL === \\\"function\\\" &&\\r\\n\\t\\ttypeof URL.createObjectURL === \\\"function\\\" &&\\r\\n\\t\\ttypeof URL.revokeObjectURL === \\\"function\\\" &&\\r\\n\\t\\ttypeof Blob === \\\"function\\\" &&\\r\\n\\t\\ttypeof btoa === \\\"function\\\") {\\r\\n\\t\\tstyleElement = createLinkElement(options);\\r\\n\\t\\tupdate = updateLink.bind(null, styleElement);\\r\\n\\t\\tremove = function() {\\r\\n\\t\\t\\tremoveStyleElement(styleElement);\\r\\n\\t\\t\\tif(styleElement.href)\\r\\n\\t\\t\\t\\tURL.revokeObjectURL(styleElement.href);\\r\\n\\t\\t};\\r\\n\\t} else {\\r\\n\\t\\tstyleElement = createStyleElement(options);\\r\\n\\t\\tupdate = applyToTag.bind(null, styleElement);\\r\\n\\t\\tremove = function() {\\r\\n\\t\\t\\tremoveStyleElement(styleElement);\\r\\n\\t\\t};\\r\\n\\t}\\r\\n\\r\\n\\tupdate(obj);\\r\\n\\r\\n\\treturn function updateStyle(newObj) {\\r\\n\\t\\tif(newObj) {\\r\\n\\t\\t\\tif(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)\\r\\n\\t\\t\\t\\treturn;\\r\\n\\t\\t\\tupdate(obj = newObj);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tremove();\\r\\n\\t\\t}\\r\\n\\t};\\r\\n}\\r\\n\\r\\nvar replaceText = (function () {\\r\\n\\tvar textStore = [];\\r\\n\\r\\n\\treturn function (index, replacement) {\\r\\n\\t\\ttextStore[index] = replacement;\\r\\n\\t\\treturn textStore.filter(Boolean).join('\\\\n');\\r\\n\\t};\\r\\n})();\\r\\n\\r\\nfunction applyToSingletonTag(styleElement, index, remove, obj) {\\r\\n\\tvar css = remove ? \\\"\\\" : obj.css;\\r\\n\\r\\n\\tif (styleElement.styleSheet) {\\r\\n\\t\\tstyleElement.styleSheet.cssText = replaceText(index, css);\\r\\n\\t} else {\\r\\n\\t\\tvar cssNode = document.createTextNode(css);\\r\\n\\t\\tvar childNodes = styleElement.childNodes;\\r\\n\\t\\tif (childNodes[index]) styleElement.removeChild(childNodes[index]);\\r\\n\\t\\tif (childNodes.length) {\\r\\n\\t\\t\\tstyleElement.insertBefore(cssNode, childNodes[index]);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tstyleElement.appendChild(cssNode);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\\r\\nfunction applyToTag(styleElement, obj) {\\r\\n\\tvar css = obj.css;\\r\\n\\tvar media = obj.media;\\r\\n\\r\\n\\tif(media) {\\r\\n\\t\\tstyleElement.setAttribute(\\\"media\\\", media)\\r\\n\\t}\\r\\n\\r\\n\\tif(styleElement.styleSheet) {\\r\\n\\t\\tstyleElement.styleSheet.cssText = css;\\r\\n\\t} else {\\r\\n\\t\\twhile(styleElement.firstChild) {\\r\\n\\t\\t\\tstyleElement.removeChild(styleElement.firstChild);\\r\\n\\t\\t}\\r\\n\\t\\tstyleElement.appendChild(document.createTextNode(css));\\r\\n\\t}\\r\\n}\\r\\n\\r\\nfunction updateLink(linkElement, obj) {\\r\\n\\tvar css = obj.css;\\r\\n\\tvar sourceMap = obj.sourceMap;\\r\\n\\r\\n\\tif(sourceMap) {\\r\\n\\t\\t// http://stackoverflow.com/a/26603875\\r\\n\\t\\tcss += \\\"\\\\n/*# sourceMappingURL=data:application/json;base64,\\\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \\\" */\\\";\\r\\n\\t}\\r\\n\\r\\n\\tvar blob = new Blob([css], { type: \\\"text/css\\\" });\\r\\n\\r\\n\\tvar oldSrc = linkElement.href;\\r\\n\\r\\n\\tlinkElement.href = URL.createObjectURL(blob);\\r\\n\\r\\n\\tif(oldSrc)\\r\\n\\t\\tURL.revokeObjectURL(oldSrc);\\r\\n}\\r\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///1\\n\");/***/},,/* 2 *//* 3 *//***/function(module,exports,__webpack_require__){\"use strict\";eval('\\n\\nObject.defineProperty(exports, \"__esModule\", {\\n  value: true\\n});\\n\\nvar _Event$extend;\\n\\nvar _core = __webpack_require__(4);\\n\\nvar _smile = __webpack_require__(62);\\n\\nvar _smile2 = _interopRequireDefault(_smile);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\nfunction _objectDestructuringEmpty(obj) { if (obj == null) throw new TypeError(\"Cannot destructure undefined\"); }\\n\\nexports.default = _core.Event.extend((_Event$extend = {\\n  init: function init(props) {\\n    this._super(true);\\n\\n    this.default_options = {\\n      $container: $(document.body),\\n      $el_active: \\'#=w=\\',\\n      tag_name: \\'editor-ovo\\',\\n      z_index: 100,\\n      config: {},\\n      convert_into_entities: false\\n    };\\n\\n    props = Object.assign({}, this.default_options, props);\\n\\n    this.options = props;\\n\\n    this.el;\\n    this.$container = props.$container;\\n    this.$content;\\n    this.$emoji_holder;\\n    this.$el_target;\\n    this.tag_name = props.tag_name;\\n    this._handle_complete = props.onComplete;\\n\\n    this._selection = getSelection();\\n    this._last_edit_range;\\n    this._last_edit_startContainer;\\n    this._last_edit_startOffset;\\n\\n    this._itv_msg;\\n\\n    this.$el_active = $(props.$el_active);\\n\\n    this._createChild();\\n\\n    this._setLastEditEl(this.$content);\\n\\n    //console.log(this.constructor.EL_SMILE,this.el);\\n    //console.log($(this.constructor.EL_SMILE,this.el)[0]);\\n\\n    this.emoji_panel = new _smile2.default({\\n      container: $(this.constructor.EL_SMILE, this.el)\\n    });\\n\\n    this._run();\\n    //console.log(\\'editor constructor\\');\\n  },\\n  clear: function clear() {\\n\\n    this.$content.html(this.$content.attr(\\'defaultValue\\'));\\n    this.$content[0].classList.add(\\'default_value-ovo\\');\\n\\n    clearTimeout(this._itv_pub);\\n\\n    this.$msg_holder.css({\\n      transition: \\'none\\',\\n      transform: \\'translate3d(0,-90%,0)\\'\\n    });\\n  },\\n  show: function show() {\\n    // console.log(\\'shiw\\');\\n    $(this.el).show();\\n  },\\n  hide: function hide() {\\n    //debugger;\\n\\n    //console.log(\\'hide\\');\\n    $(this.el).hide();\\n  },\\n  _createChild: function _createChild() {\\n    this.el = document.createElement(this.tag_name);\\n    this.$container.append(this.el);\\n    this.el.classList.add(this.constructor.CLS);\\n    // this.el.innerHTML = `\\n    //   <div content-ovo></div>\\n    // `;\\n\\n    // this.$content = $(\\'div[content-ovo]\\',this.el);\\n    //debugger;\\n  },\\n  _focus: function _focus() {\\n    var diff_offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\\n\\n    this.$content[0].focus();\\n\\n    if (!this._last_edit_range) return;\\n\\n    var range = this._last_edit_range;\\n    var startContainer = range.startContainer,\\n        startOffset = range.startOffset;\\n\\n\\n    range.setStart(startContainer, startOffset + diff_offset);\\n    range.collapse(true);\\n\\n    this._selection.removeAllRanges();\\n    this._selection.addRange(range);\\n  },\\n  _resAdapter: function _resAdapter(s) {\\n    return this.options.convert_into_entities ? this._convertEmojiInToEntities(s) : s;\\n  }\\n  /** \\r\\n   * \\u7528\\u4E8E\\u628A\\u7528utf16\\u7F16\\u7801\\u7684\\u5B57\\u7B26\\u8F6C\\u6362\\u6210\\u5B9E\\u4F53\\u5B57\\u7B26\\uFF0C\\u4EE5\\u4F9B\\u540E\\u53F0\\u5B58\\u50A8 \\r\\n   * @param  {string} str \\u5C06\\u8981\\u8F6C\\u6362\\u7684\\u5B57\\u7B26\\u4E32\\uFF0C\\u5176\\u4E2D\\u542B\\u6709utf16\\u5B57\\u7B26\\u5C06\\u88AB\\u81EA\\u52A8\\u68C0\\u51FA \\r\\n   * @return {string}     \\u8F6C\\u6362\\u540E\\u7684\\u5B57\\u7B26\\u4E32\\uFF0Cutf16\\u5B57\\u7B26\\u5C06\\u88AB\\u8F6C\\u6362\\u6210&#xxxx;\\u5F62\\u5F0F\\u7684\\u5B9E\\u4F53\\u5B57\\u7B26 \\r\\n   */\\n  ,\\n  _convertEmojiInToEntities: function _convertEmojiInToEntities(s) {\\n    s = s.replace(/[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]/g, function (char) {\\n      var H, L, code;\\n      if (char.length === 2) {\\n        H = char.charCodeAt(0); // \\u53D6\\u51FA\\u9AD8\\u4F4D  \\n        L = char.charCodeAt(1); // \\u53D6\\u51FA\\u4F4E\\u4F4D  \\n        code = (H - 0xD800) * 0x400 + 0x10000 + L - 0xDC00; // \\u8F6C\\u6362\\u7B97\\u6CD5  \\n        return \"&#\" + code + \";\";\\n      } else {\\n        return char;\\n      }\\n    });\\n    return s;\\n  },\\n  _editLastChild: function _editLastChild() {\\n    var _this = this;\\n\\n    var child = this.$content[0].children;\\n    if (!child) return this.$content;\\n\\n    var i = 0;\\n\\n    //\\u5982\\u662F\\u56FE\\u7247,\\u4F46\\u662F\\u662F\\u6700\\u540E\\u4E00\\u4E2Achild\\u90A3\\u4E48\\u4E5F\\u662F\\u63D2\\u5165\\u5230$content\\u4E2D\\uFF01\\n    var f = function f(child, idx) {\\n      if (++i > 100000) return alert(\\'\\u67E5\\u627E\\u6B21\\u6570\\u8FC7\\u591Aqwq\\');\\n\\n      if (idx < 0 || !child) return _this.$content;\\n\\n      var node_name = child[idx].nodeName.toLowerCase();\\n\\n      //ios\\u8F93\\u5165\\u7684\\u5185\\u5BB9\\u7A7A\\u4E5F\\u5B58\\u5728\\u4E2Abr\\n      if (node_name === \\'br\\' && idx === child.length - 1) return _this.$content;\\n      //\\n      if (node_name === \\'img\\' && idx === child.length - 1) return _this.$content;\\n      //if(node_name ===\\'img\\'&& child[idx].classList.contains(\\'smile-ovo\\')) return this.$content;\\n      if (node_name != \\'img\\') return $(child[idx]);\\n\\n      return f(child, --idx);\\n    };\\n\\n    return f(child, child.length - 1);\\n  },\\n  _bindDefaultValue: function _bindDefaultValue() {\\n    var CLS_DEFAULT_VALUE = this.constructor.CLS_DEFAULT_VALUE;\\n\\n\\n    this.clear();\\n\\n    //console.log(this.$content);\\n    this.$content.html(this.$content.attr(\\'defaultValue\\'));\\n    this.$content[0].classList.add(CLS_DEFAULT_VALUE);\\n\\n    this.$content[0].addEventListener(\\'blur\\', function (e) {\\n      //console.log(\\'blur\\');\\n      var html_ = this.innerHTML.trim();\\n\\n      var default_value = this.getAttribute(\\'defaultValue\\').trim();\\n\\n      if (html_ === \\'\\' || html_ === \\'<br>\\') {\\n        this.innerHTML = default_value;\\n        this.classList.add(CLS_DEFAULT_VALUE);\\n      }\\n    });\\n\\n    this.$content[0].addEventListener(\\'focus\\', function () {\\n\\n      this.classList.remove(CLS_DEFAULT_VALUE);\\n\\n      var html_ = this.innerHTML.trim();\\n\\n      var default_value = this.getAttribute(\\'defaultValue\\').trim();\\n\\n      if (html_ === default_value) this.innerHTML = \\'\\';\\n    });\\n  },\\n  _pickEmoji: function _pickEmoji() {\\n    var _this2 = this;\\n\\n    this.emoji_panel.on(\\'pick\\', function (props) {\\n\\n      _this2.$content.append(props.el);\\n    });\\n  },\\n  _displayMsg: function _displayMsg(msg) {\\n    var _this3 = this;\\n\\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\\n\\n    _objectDestructuringEmpty(_ref);\\n\\n    this.$msg_text.text(msg + \\'\\');\\n\\n    clearTimeout(this._itv_msg);\\n\\n    this.$msg_holder.css({\\n      transition: \\'none\\',\\n      transform: \\'translate3d(0,0%,0)\\'\\n    });\\n\\n    this._itv_msg = setTimeout(function () {\\n\\n      _this3.$msg_holder.css({\\n        transition: \\'none\\',\\n        transform: \\'translate3d(0,-90%,0)\\'\\n      });\\n    }, 2333);\\n  },\\n  _appendToLastModifiyEl: function _appendToLastModifiyEl(el) {\\n    if (!this._last_edit_range) return this._last_el.append(el);\\n\\n    var _ref2 = [this._last_edit_range.startContainer.nodeType, this._last_edit_range.startContainer.nodeName.toLowerCase()],\\n        node_type = _ref2[0],\\n        node_name = _ref2[1];\\n\\n\\n    if (node_type === 1 && node_name === \\'li\\') return console.log(\\'qwq\\');\\n\\n    this._last_edit_range.insertNode(el);\\n    //false,true  \\u951A\\u70B9before|after\\n    this._last_edit_range.collapse(false);\\n    this._selection.removeAllRanges();\\n    this._selection.addRange(this._last_edit_range);\\n  }\\n}, _defineProperty(_Event$extend, \\'_focus\\', function _focus() {\\n  //console.log(this.$content);\\n  this.$content[0].focus();\\n\\n  //console.log(\\'focus!!!!\\');\\n  if (!this._last_edit_range) return;\\n\\n  var range = this._last_edit_range;\\n  var startContainer = range.startContainer,\\n      startOffset = range.startOffset;\\n\\n\\n  range.setStart(startContainer, startOffset);\\n  range.collapse(true);\\n\\n  this._selection.removeAllRanges();\\n  this._selection.addRange(range);\\n}), _defineProperty(_Event$extend, \\'_recordLastRange\\', function _recordLastRange() {\\n  var _this4 = this;\\n\\n  var ms = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\\n\\n\\n  clearTimeout(this._itv_range);\\n  this._itv_range = setTimeout(function () {\\n    if (!_this4._selection.rangeCount) return;\\n\\n    var range = _this4._selection.getRangeAt(0);\\n\\n    _this4._selection.removeAllRanges();\\n    _this4._selection.addRange(range);\\n\\n    _this4._last_edit_range = range;\\n\\n    /////////\\n    _this4._last_edit_startContainer = range.startContainer;\\n    _this4._last_edit_startOffset = range.startOffset;\\n    ////////\\n\\n    //console.log(this._last_edit_range.startContainer,this._last_edit_range.startOffset);\\n    //console.log(this._last_edit_startContainer,this._last_edit_startOffset);\\n  }, ms);\\n}), _defineProperty(_Event$extend, \\'_setLastEditEl\\', function _setLastEditEl($last_el) {\\n  this._last_el = $last_el;\\n}), _defineProperty(_Event$extend, \\'_pickSmile\\', function _pickSmile() {\\n  var _this5 = this;\\n\\n  //debugger;\\n  this.emoji_panel.on(\\'pick\\', function (props) {\\n\\n    var html_ = _this5.$content.html().trim();\\n\\n    var default_value = _this5.$content.attr(\\'defaultValue\\').trim();\\n\\n    if (html_ === default_value) _this5.$content.html(\\'\\');\\n\\n    _this5._appendToLastModifiyEl(props.el);\\n  });\\n}), _defineProperty(_Event$extend, \\'_handleConfirm\\', function _handleConfirm() {\\n  throw \\'rewrite !\\';\\n}), _defineProperty(_Event$extend, \\'_editSuccess\\', function _editSuccess() {\\n  throw \\'rewrite !\\';\\n}), _defineProperty(_Event$extend, \\'_handleForThose\\', function _handleForThose() {\\n  var _this6 = this;\\n\\n  this.$el_active.on(\\'click\\', function (e) {\\n\\n    _this6.show();\\n  });\\n\\n  $(this.constructor.EL_CANCEL, this.el).on(\\'click\\', function (e) {\\n\\n    _this6.hide();\\n  });\\n\\n  this.$content.on(\\'blur\\', function (e) {});\\n\\n  $(this.$el_active).on(\\'click\\', function (e) {\\n    _this6.el_target = e.target;\\n    _this6.show();\\n    _this6._focus();\\n  });\\n\\n  this.$content.on(\\'focus\\', this._handle_bug_focus.bind(this));\\n  this.$content.on(\\'blur\\', this._handle_bug_blur.bind(this));\\n}), _defineProperty(_Event$extend, \\'_handle_bug_focus\\', function _handle_bug_focus(e) {\\n\\n  //debugger;\\n\\n  var z_index = this.options.z_index;\\n\\n\\n  if (_core.Brower.version.ios) {\\n\\n    $(this.el).css({\\n      width: document.body.offsetWidth + \\'px\\',\\n      height: document.body.offsetHeight + \\'px\\',\\n      position: \\'absolute\\',\\n      left: \\'0\\', top: \\'0\\', \\'z-index\\': z_index\\n    });\\n\\n    //console.log(z_index);\\n  } else {\\n    $(this.el).css({\\n      position: \\'fixed\\',\\n      left: \\'0\\', top: \\'0\\', \\'z-index\\': z_index\\n    });\\n  }\\n  document.body.scrollTop = 0;\\n  document.documentElement.scrollTop = 0;\\n}), _defineProperty(_Event$extend, \\'_handle_bug_blur\\', function _handle_bug_blur() {\\n  var z_index = this.options.z_index;\\n\\n  if (_core.Brower.version.ios) {\\n    $(this.el).css({ position: \\'fixed\\', left: \\'0\\', top: \\'0\\', \\'z-index\\': z_index });\\n  }\\n}), _defineProperty(_Event$extend, \\'_run\\', function _run() {\\n  var _this7 = this;\\n\\n  this._bindDefaultValue();\\n\\n  this._pickSmile();\\n\\n  this._handleForThose();\\n  this._focus();\\n\\n  this._handleConfirm();\\n\\n  this.on(\\'complete\\', function (props) {\\n\\n    _this7._handle_complete && _this7._handle_complete.call(_this7, props);\\n  });\\n\\n  this.hide();\\n}), _Event$extend), {\\n  CLS: \\'\\',\\n  CLS_DEFAULT_VALUE: \\'default_value-ovo\\',\\n  EL_CONTENT: \\'div[content-ovo]\\',\\n  EL_CANCEL: \\'button[cancel-ovo]\\',\\n  EL_CONFIRM: \\'button[confirm-ovo]\\',\\n  EL_SMILE: \\'div[smile-holder-ovo]\\',\\n  EL_SMILE_ICON: \\'li[smile-icon-ovo]\\',\\n  EL_DISPLAY_MSG: \\'div[message-ovo]\\'\\n});//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///3\\n');/***/},/* 4 *//***/function(module,exports,__webpack_require__){\"use strict\";eval(\"\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\n\\n{\\n  var Class = {};\\n\\n  Class.create = function (prop, st_prop) {\\n\\n    var F = function F() {\\n      if (typeof this.init === 'function' && this.init) {\\n        this.init.apply(this, arguments);\\n      }\\n    };\\n\\n    prop = prop || {};\\n\\n    st_prop && Object.keys(st_prop).forEach(function (s) {\\n      F[s] = st_prop[s];\\n    });\\n\\n    F.extend = Class.create;\\n\\n    //不是Class extend 要从上个F继承了\\n    if (this != Class) {\\n      F.prototype = Object.create(this.prototype);\\n      F.prototype.__super__ = this.prototype;\\n      F.prototype.constructor = F;\\n\\n      var parent_prop = this.prototype;\\n      Object.keys(prop).forEach(function (s) {\\n        //需要扩展的和继承过后的存在重复！\\n        if (parent_prop[s] && typeof parent_prop[s] == 'function') {\\n\\n          F.prototype[s] = function () {\\n            this._super = parent_prop[s];\\n            return prop[s].apply(this, arguments);\\n          };\\n        } else {\\n          F.prototype[s] = prop[s];\\n        };\\n      });\\n\\n      Object.keys(this).filter(function (s) {\\n        return !/extend|create/.test(s);\\n      }).forEach(function (s) {\\n        F[s] = this.__super__.constructor[s];\\n      }, F.prototype);\\n\\n      st_prop && Object.keys(st_prop).forEach(function (s) {\\n        F[s] = st_prop[s];\\n      });\\n\\n      return F;\\n    };\\n\\n    Object.keys(prop).forEach(function (s) {\\n      F.prototype[s] = prop[s];\\n    });\\n    F.prototype.constructor = F;\\n\\n    return F;\\n  };\\n}\\n\\n//debugger;\\n\\nFunction.prototype.after = function (fn) {\\n  var that = this;\\n  return function () {\\n    var fnn = that.apply(that, arguments);\\n    if (fnn != void 0) return fn.apply(this, arguments);\\n    return fnn;\\n  };\\n};\\n\\n{\\n  var u = navigator.userAgent;\\n  var Brower = {\\n    version: {\\n      mobile: /AppleWebKit.*Mobile.*/i.test(u),\\n      //是否为移动终端\\n      ios: /\\\\(i[^;]+;( U;)? CPU.+Mac OS X/i.test(u),\\n      //ios终端\\n      android: /Android/i.test(u) || /Linux/i.test(u),\\n      //android终端或者uc浏览器\\n      windowsphone: /Windows Phone/i.test(u),\\n      //Windows Phone\\n      iPhone: /iPhone/i.test(u),\\n      //是否为iPhone或者QQHD浏览器\\n      iPad: /iPad/i.test(u),\\n      //是否iPad\\n      webApp: !/Safari/i.test(u),\\n      //是否web应该程序，没有头部与底部\\n      MicroMessenger: /MicroMessenger/i.test(u),\\n      //是否为微信\\n      weibo: /Weibo/i.test(u),\\n      //是否为微博\\n      uc: /ucweb|UCBrowser/i.test(u),\\n      //是否为UC\\n      qq: /MQQBrowser/i.test(u),\\n      //是否为QQ浏览器\\n      baidu: /Baidu/i.test(u), //是否为百度浏览器\\n\\n      weixin: /MicroMessenger/i.test(u)\\n    },\\n    language: (navigator.browserLanguage || navigator.language).toLowerCase()\\n  };\\n}\\n\\n{\\n  var Cache = {};\\n  var importAll = function importAll(r) {\\n    //r.keys().forEach(key => cache[key] = r(key));\\n    r.keys().forEach(function (key) {\\n      //console.log(key);\\n      Cache[key] = r(key);\\n    });\\n  };\\n  //importAll(require.context('./common/img/popo_2adefed/', true, /\\\\.png$/));\\n  importAll(__webpack_require__(11));\\n}\\n\\nvar Cache = exports.Cache = Cache;\\n\\nvar Brower = exports.Brower = Brower;\\n\\nvar Class = exports.Class = Class;\\n\\nvar Event = exports.Event = Class.create({\\n  init: function init() {\\n    this.evs = {};\\n  },\\n  on: function on(s, fn, once) {\\n    s = s.trim();\\n    if (once && once.trim() == 'once') {\\n      this.evs[s] = [fn];\\n\\n      return this;\\n    };\\n\\n    if (!this.evs[s]) {\\n      this.evs[s] = [fn];\\n      return this;\\n    };\\n    this.evs[s].push(fn);\\n    return this;\\n  },\\n  trigger: function trigger(s) {\\n    var that = this,\\n        args = arguments,\\n        ar = this.evs[s = s.trim()];\\n\\n    //tirgger('aaa' , a,b,c)\\n    ar && ar.forEach(function (fn) {\\n      fn.apply(that, [].slice.call(args, 1));\\n    });\\n\\n    return this;\\n  },\\n  off: function off(s) {\\n    delete this.evs[s.trim()];\\n    return this;\\n  }\\n});//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///4\\n\");/***/},/* 5 *//***/function(module,exports,__webpack_require__){eval(\"module.exports = __webpack_require__.p + \\\"img/icon.png?2f2c51\\\";//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2ltZy9pY29uLnBuZz8xMzk5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvaWNvbi5wbmc/MmYyYzUxXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvY29tbW9uL2ltZy9pY29uLnBuZ1xuLy8gbW9kdWxlIGlkID0gNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///5\\n\");/***/},/* 6 *//***/function(module,exports,__webpack_require__){eval(\"module.exports = __webpack_require__.p + \\\"img/icon.webp?82aebb\\\";//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2ltZy93ZWJwL2ljb24ud2VicD9lODgxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvaWNvbi53ZWJwPzgyYWViYlwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2NvbW1vbi9pbWcvd2VicC9pY29uLndlYnBcbi8vIG1vZHVsZSBpZCA9IDZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///6\\n\");/***/},/* 7 *//***/function(module,exports,__webpack_require__){\"use strict\";eval(\"\\n\\n__webpack_require__(8);\\n\\nvar _reply = __webpack_require__(10);\\n\\nvar _reply2 = _interopRequireDefault(_reply);\\n\\nvar _post = __webpack_require__(72);\\n\\nvar _post2 = _interopRequireDefault(_post);\\n\\nvar _editor = __webpack_require__(3);\\n\\nvar _editor2 = _interopRequireDefault(_editor);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nmodule.exports = { Reply: _reply2.default, Post: _post2.default, Editor: _editor2.default };//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbjEuanM/OWYxNiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiUmVwbHkiLCJQb3N0IiwiRWRpdG9yIl0sIm1hcHBpbmdzIjoiOztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7O0FBSUFBLE9BQU9DLE9BQVAsR0FBaUIsRUFBQ0Msc0JBQUQsRUFBT0Msb0JBQVAsRUFBWUMsd0JBQVosRUFBakIiLCJmaWxlIjoiNy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5pbXBvcnQgJy4vbWFpbjEubGVzcyc7XHJcbmltcG9ydCBSZXBseSBmcm9tICcuL3JlcGx5JztcclxuaW1wb3J0IFBvc3QgZnJvbSAnLi9wb3N0JztcclxuaW1wb3J0IEVkaXRvciBmcm9tICcuL2VkaXRvcic7XHJcblxyXG5cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1JlcGx5LFBvc3QsRWRpdG9yfTtcclxuXHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9tYWluMS5qcyJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///7\\n\");/***/},/* 8 *//***/function(module,exports,__webpack_require__){eval(\"// style-loader: Adds some css to the DOM by adding a <style> tag\\n\\n// load the styles\\nvar content = __webpack_require__(9);\\nif(typeof content === 'string') content = [[module.i, content, '']];\\n// add the styles to the DOM\\nvar update = __webpack_require__(1)(content, {});\\nif(content.locals) module.exports = content.locals;\\n// Hot Module Replacement\\nif(false) {\\n\\t// When the styles change, update the <style> tags\\n\\tif(!content.locals) {\\n\\t\\tmodule.hot.accept(\\\"!!./../../../node_modules/.0.23.1@css-loader/index.js!./../../../node_modules/postcss-loader/lib/index.js??ref--0-2!./../../../node_modules/.2.2.3@less-loader/index.js!./main1.less\\\", function() {\\n\\t\\t\\tvar newContent = require(\\\"!!./../../../node_modules/.0.23.1@css-loader/index.js!./../../../node_modules/postcss-loader/lib/index.js??ref--0-2!./../../../node_modules/.2.2.3@less-loader/index.js!./main1.less\\\");\\n\\t\\t\\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\\n\\t\\t\\tupdate(newContent);\\n\\t\\t});\\n\\t}\\n\\t// When the module is disposed, remove the <style> tags\\n\\tmodule.hot.dispose(function() { update(); });\\n}//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbjEubGVzcz81MTJkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQThGO0FBQzlGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsZ0NBQWdDLFVBQVUsRUFBRTtBQUM1QyIsImZpbGUiOiI4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy4wLjIzLjFAY3NzLWxvYWRlci9pbmRleC5qcyEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9saWIvaW5kZXguanM/P3JlZi0tMC0yIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy4yLjIuM0BsZXNzLWxvYWRlci9pbmRleC5qcyEuL21haW4xLmxlc3NcIik7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy4wLjEzLjFAc3R5bGUtbG9hZGVyL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCB7fSk7XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcbmlmKG1vZHVsZS5ob3QpIHtcblx0Ly8gV2hlbiB0aGUgc3R5bGVzIGNoYW5nZSwgdXBkYXRlIHRoZSA8c3R5bGU+IHRhZ3Ncblx0aWYoIWNvbnRlbnQubG9jYWxzKSB7XG5cdFx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy4wLjIzLjFAY3NzLWxvYWRlci9pbmRleC5qcyEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9saWIvaW5kZXguanM/P3JlZi0tMC0yIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy4yLjIuM0BsZXNzLWxvYWRlci9pbmRleC5qcyEuL21haW4xLmxlc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy4wLjIzLjFAY3NzLWxvYWRlci9pbmRleC5qcyEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9saWIvaW5kZXguanM/P3JlZi0tMC0yIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy4yLjIuM0BsZXNzLWxvYWRlci9pbmRleC5qcyEuL21haW4xLmxlc3NcIik7XG5cdFx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblx0XHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0XHR9KTtcblx0fVxuXHQvLyBXaGVuIHRoZSBtb2R1bGUgaXMgZGlzcG9zZWQsIHJlbW92ZSB0aGUgPHN0eWxlPiB0YWdzXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL21haW4xLmxlc3Ncbi8vIG1vZHVsZSBpZCA9IDhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///8\\n\");/***/},/* 9 *//***/function(module,exports,__webpack_require__){eval(\"exports = module.exports = __webpack_require__(0)();\\n// imports\\n\\n\\n// module\\nexports.push([module.i, \\\"* {\\\\n  margin: 0;\\\\n  padding: 0;\\\\n  border: none;\\\\n}\\\\nul li {\\\\n  list-style: none;\\\\n}\\\\n.default_value-ovo {\\\\n  color: #cacaca;\\\\n}\\\\n.default_value-ovo-2 {\\\\n  color: #adadad;\\\\n}\\\\nhtml {\\\\n  width: 100%;\\\\n  height: 100%;\\\\n  font-family: Helvetica;\\\\n}\\\\nbody {\\\\n  max-width: 720px;\\\\n  margin: 0 auto;\\\\n  position: relative;\\\\n  width: 100%;\\\\n  min-height: 100%;\\\\n}\\\\nbody .rel {\\\\n  position: relative;\\\\n  left: 0;\\\\n  top: 0;\\\\n}\\\\nbody .rel_ {\\\\n  position: relative;\\\\n}\\\\nbody .abs {\\\\n  position: absolute;\\\\n  left: 0;\\\\n  top: 0;\\\\n}\\\\nbody .abs_ {\\\\n  position: absolute;\\\\n}\\\\nbody .clear-both {\\\\n  clear: both;\\\\n}\\\\nbody .w {\\\\n  width: 100%;\\\\n}\\\\nbody .wh {\\\\n  width: 100%;\\\\n  height: 100%;\\\\n}\\\\nbody .show {\\\\n  display: block;\\\\n}\\\\nbody .hide {\\\\n  display: none;\\\\n}\\\\nbody .visible {\\\\n  visibility: visible;\\\\n}\\\\nbody .hidden {\\\\n  visibility: hidden;\\\\n}\\\\nbody .css2-z1 {\\\\n  z-index: 1;\\\\n}\\\\nbody .css2-z2 {\\\\n  z-index: 2;\\\\n}\\\\nbody .css2-z3 {\\\\n  z-index: 3;\\\\n}\\\\nbody .css2-z4 {\\\\n  z-index: 4;\\\\n}\\\\nbody .css2-z5 {\\\\n  z-index: 5;\\\\n}\\\\nbody .css2-z6 {\\\\n  z-index: 6;\\\\n}\\\\nbody .css2-z7 {\\\\n  z-index: 7;\\\\n}\\\\nbody .css2-z8 {\\\\n  z-index: 8;\\\\n}\\\\nbody .css2-z9 {\\\\n  z-index: 9;\\\\n}\\\\nbody .css2-z10 {\\\\n  z-index: 10;\\\\n}\\\\nbody .css2-z11 {\\\\n  z-index: 11;\\\\n}\\\\nbody .css2-z12 {\\\\n  z-index: 12;\\\\n}\\\\nbody .css2-z13 {\\\\n  z-index: 13;\\\\n}\\\\nbody .css2-z14 {\\\\n  z-index: 14;\\\\n}\\\\nbody .css2-z15 {\\\\n  z-index: 15;\\\\n}\\\\nbody .css2-z16 {\\\\n  z-index: 16;\\\\n}\\\\nbody .css2-z17 {\\\\n  z-index: 17;\\\\n}\\\\nbody .css2-z18 {\\\\n  z-index: 18;\\\\n}\\\\nbody .css2-z19 {\\\\n  z-index: 19;\\\\n}\\\\nbody .css2-z20 {\\\\n  z-index: 20;\\\\n}\\\\nbody .css3-z1 {\\\\n  -webkit-transform: translate3d(\\\\\\\"0.01px\\\\\\\", 0, 0);\\\\n}\\\\nbody .css3-z2 {\\\\n  -webkit-transform: translate3d(\\\\\\\"0.02px\\\\\\\", 0, 0);\\\\n}\\\\nbody .css3-z3 {\\\\n  -webkit-transform: translate3d(\\\\\\\"0.03px\\\\\\\", 0, 0);\\\\n}\\\\nbody .css3-z4 {\\\\n  -webkit-transform: translate3d(\\\\\\\"0.04px\\\\\\\", 0, 0);\\\\n}\\\\nbody .css3-z5 {\\\\n  -webkit-transform: translate3d(\\\\\\\"0.05px\\\\\\\", 0, 0);\\\\n}\\\\nbody .css3-z6 {\\\\n  -webkit-transform: translate3d(\\\\\\\"0.06px\\\\\\\", 0, 0);\\\\n}\\\\nbody .css3-z7 {\\\\n  -webkit-transform: translate3d(\\\\\\\"0.07px\\\\\\\", 0, 0);\\\\n}\\\\nbody .css3-z8 {\\\\n  -webkit-transform: translate3d(\\\\\\\"0.08px\\\\\\\", 0, 0);\\\\n}\\\\nbody .css3-z9 {\\\\n  -webkit-transform: translate3d(\\\\\\\"0.09px\\\\\\\", 0, 0);\\\\n}\\\\nbody .css3-z10 {\\\\n  -webkit-transform: translate3d(\\\\\\\"0.1px\\\\\\\", 0, 0);\\\\n}\\\\nbody .css3-z11 {\\\\n  -webkit-transform: translate3d(\\\\\\\"0.11px\\\\\\\", 0, 0);\\\\n}\\\\nbody .css3-z12 {\\\\n  -webkit-transform: translate3d(\\\\\\\"0.12px\\\\\\\", 0, 0);\\\\n}\\\\nbody .css3-z13 {\\\\n  -webkit-transform: translate3d(\\\\\\\"0.13px\\\\\\\", 0, 0);\\\\n}\\\\nbody .css3-z14 {\\\\n  -webkit-transform: translate3d(\\\\\\\"0.14px\\\\\\\", 0, 0);\\\\n}\\\\nbody .css3-z15 {\\\\n  -webkit-transform: translate3d(\\\\\\\"0.15px\\\\\\\", 0, 0);\\\\n}\\\\nbody .css3-z16 {\\\\n  -webkit-transform: translate3d(\\\\\\\"0.16px\\\\\\\", 0, 0);\\\\n}\\\\nbody .css3-z17 {\\\\n  -webkit-transform: translate3d(\\\\\\\"0.17px\\\\\\\", 0, 0);\\\\n}\\\\nbody .css3-z18 {\\\\n  -webkit-transform: translate3d(\\\\\\\"0.18px\\\\\\\", 0, 0);\\\\n}\\\\nbody .css3-z19 {\\\\n  -webkit-transform: translate3d(\\\\\\\"0.19px\\\\\\\", 0, 0);\\\\n}\\\\nbody .css3-z20 {\\\\n  -webkit-transform: translate3d(\\\\\\\"0.2px\\\\\\\", 0, 0);\\\\n}\\\\nbutton {\\\\n  background: transparent;\\\\n  border: none;\\\\n  -webkit-touch-callout: none;\\\\n  -webkit-user-select: none;\\\\n  -webkit-tap-highlight-color: transparent;\\\\n  display: block;\\\\n  outline: none;\\\\n  cursor: auto;\\\\n}\\\\nli {\\\\n  list-style: none;\\\\n}\\\\ncanvas {\\\\n  -webkit-touch-callout: none;\\\\n  -webkit-user-select: none;\\\\n}\\\\n@media screen and (max-width: 321px) {\\\\n}\\\\n@media screen and (min-width: 321px) and (max-width: 400px) {\\\\n}\\\\n@media screen and (min-width: 400px) {\\\\n}\\\\n@-webkit-keyframes light-mask {\\\\n  0%,\\\\n  100% {\\\\n    visibility: hidden;\\\\n    opacity: 0;\\\\n  }\\\\n  30%,\\\\n  60% {\\\\n    visibility: visible;\\\\n    opacity: 1;\\\\n  }\\\\n}\\\\n.light-mask {\\\\n  -webkit-animation: 0.5s light-mask;\\\\n}\\\\n.shake-vertical {\\\\n  -webkit-animation: 0.5s shake-vertical;\\\\n}\\\\n@-webkit-keyframes shake-vertical {\\\\n  0% {\\\\n    -webkit-transform: translate(0px, 0px) rotate(0deg) scale(1.2);\\\\n  }\\\\n  2% {\\\\n    -webkit-transform: translate(0px, 1px) rotate(0deg) scale(1.2);\\\\n  }\\\\n  4% {\\\\n    -webkit-transform: translate(0px, 5px) rotate(0deg) scale(1.2);\\\\n  }\\\\n  6% {\\\\n    -webkit-transform: translate(0px, -2px) rotate(0deg) scale(1.2);\\\\n  }\\\\n  8% {\\\\n    -webkit-transform: translate(0px, 6px) rotate(0deg) scale(1.2);\\\\n  }\\\\n  10% {\\\\n    -webkit-transform: translate(0px, 4px) rotate(0deg) scale(1.2);\\\\n  }\\\\n  12% {\\\\n    -webkit-transform: translate(0px, 6px) rotate(0deg) scale(1.2);\\\\n  }\\\\n  14% {\\\\n    -webkit-transform: translate(0px, 5px) rotate(0deg) scale(1.2);\\\\n  }\\\\n  16% {\\\\n    -webkit-transform: translate(0px, -7px) rotate(0deg) scale(1.2);\\\\n  }\\\\n  18% {\\\\n    -webkit-transform: translate(0px, 3px) rotate(0deg) scale(1.2);\\\\n  }\\\\n  20% {\\\\n    -webkit-transform: translate(0px, 10px) rotate(0deg) scale(1.2);\\\\n  }\\\\n  22% {\\\\n    -webkit-transform: translate(0px, 8px) rotate(0deg) scale(1.2);\\\\n  }\\\\n  24% {\\\\n    -webkit-transform: translate(0px, -5px) rotate(0deg) scale(1.2);\\\\n  }\\\\n  26% {\\\\n    -webkit-transform: translate(0px, 9px) rotate(0deg) scale(1.2);\\\\n  }\\\\n  28% {\\\\n    -webkit-transform: translate(0px, 5px) rotate(0deg) scale(1.2);\\\\n  }\\\\n  30% {\\\\n    -webkit-transform: translate(0px, -7px) rotate(0deg) scale(1.2);\\\\n  }\\\\n  32% {\\\\n    -webkit-transform: translate(0px, -1px) rotate(0deg) scale(1.2);\\\\n  }\\\\n  34% {\\\\n    -webkit-transform: translate(0px, 4px) rotate(0deg) scale(1.2);\\\\n  }\\\\n  36% {\\\\n    -webkit-transform: translate(0px, -4px) rotate(0deg) scale(1.2);\\\\n  }\\\\n  38% {\\\\n    -webkit-transform: translate(0px, 2px) rotate(0deg) scale(1.2);\\\\n  }\\\\n  40% {\\\\n    -webkit-transform: translate(0px, 10px) rotate(0deg) scale(1.2);\\\\n  }\\\\n  42% {\\\\n    -webkit-transform: translate(0px, 1px) rotate(0deg) scale(1.2);\\\\n  }\\\\n  44% {\\\\n    -webkit-transform: translate(0px, 6px) rotate(0deg) scale(1.2);\\\\n  }\\\\n  46% {\\\\n    -webkit-transform: translate(0px, 5px) rotate(0deg) scale(1.2);\\\\n  }\\\\n  48% {\\\\n    -webkit-transform: translate(0px, 7px) rotate(0deg) scale(1.2);\\\\n  }\\\\n  50% {\\\\n    -webkit-transform: translate(0px, -7px) rotate(0deg) scale(1.2);\\\\n  }\\\\n  52% {\\\\n    -webkit-transform: translate(0px, -2px) rotate(0deg) scale(1.2);\\\\n  }\\\\n  54% {\\\\n    -webkit-transform: translate(0px, 2px) rotate(0deg) scale(1.2);\\\\n  }\\\\n  56% {\\\\n    -webkit-transform: translate(0px, 3px) rotate(0deg) scale(1.2);\\\\n  }\\\\n  58% {\\\\n    -webkit-transform: translate(0px, -5px) rotate(0deg) scale(1.2);\\\\n  }\\\\n  60% {\\\\n    -webkit-transform: translate(0px, -3px) rotate(0deg) scale(1.2);\\\\n  }\\\\n  62% {\\\\n    -webkit-transform: translate(0px, 10px) rotate(0deg) scale(1.2);\\\\n  }\\\\n  64% {\\\\n    -webkit-transform: translate(0px, -5px) rotate(0deg) scale(1.2);\\\\n  }\\\\n  66% {\\\\n    -webkit-transform: translate(0px, 8px) rotate(0deg) scale(1.2);\\\\n  }\\\\n  68% {\\\\n    -webkit-transform: translate(0px, 0px) rotate(0deg) scale(1.2);\\\\n  }\\\\n  70% {\\\\n    -webkit-transform: translate(0px, 6px) rotate(0deg) scale(1.2);\\\\n  }\\\\n  72% {\\\\n    -webkit-transform: translate(0px, -1px) rotate(0deg) scale(1.2);\\\\n  }\\\\n  74% {\\\\n    -webkit-transform: translate(0px, 6px) rotate(0deg) scale(1.2);\\\\n  }\\\\n  76% {\\\\n    -webkit-transform: translate(0px, 8px) rotate(0deg) scale(1.2);\\\\n  }\\\\n  78% {\\\\n    -webkit-transform: translate(0px, 10px) rotate(0deg) scale(1.2);\\\\n  }\\\\n  80% {\\\\n    -webkit-transform: translate(0px, 4px) rotate(0deg) scale(1.2);\\\\n  }\\\\n  82% {\\\\n    -webkit-transform: translate(0px, 9px) rotate(0deg) scale(1.2);\\\\n  }\\\\n  84% {\\\\n    -webkit-transform: translate(0px, -1px) rotate(0deg) scale(1.2);\\\\n  }\\\\n  86% {\\\\n    -webkit-transform: translate(0px, 8px) rotate(0deg) scale(1.2);\\\\n  }\\\\n  88% {\\\\n    -webkit-transform: translate(0px, 1px) rotate(0deg) scale(1.2);\\\\n  }\\\\n  90% {\\\\n    -webkit-transform: translate(0px, -6px) rotate(0deg) scale(1.2);\\\\n  }\\\\n  92% {\\\\n    -webkit-transform: translate(0px, 2px) rotate(0deg) scale(1.2);\\\\n  }\\\\n  94% {\\\\n    -webkit-transform: translate(0px, -5px) rotate(0deg) scale(1.2);\\\\n  }\\\\n  96% {\\\\n    -webkit-transform: translate(0px, -4px) rotate(0deg) scale(1.2);\\\\n  }\\\\n  98% {\\\\n    -webkit-transform: translate(0px, -4px) rotate(0deg) scale(1.2);\\\\n  }\\\\n}\\\\n#xxzoom {\\\\n  width: 1000%;\\\\n  height: 100%;\\\\n  background: -webkit-linear-gradient(left, rgba(0, 0, 0, 0.001) 0%, #000000 30%, #000000 70%, rgba(0, 0, 0, 0.001) 100%);\\\\n  -webkit-transform: translate3d(-100%, 0, 0);\\\\n}\\\\n#xzoom {\\\\n  background: #000000;\\\\n}\\\\n.xfade {\\\\n  -webkit-animation: 1s xfade1 forwards\\\\n\\\\t\\\\t,1s 1.5s xfade2 forwards;\\\\n}\\\\n@-webkit-keyframes xfade1 {\\\\n  0% {\\\\n    visibility: hidden;\\\\n    opacity: 0;\\\\n  }\\\\n  100% {\\\\n    visibility: visible;\\\\n    opacity: 1;\\\\n  }\\\\n}\\\\n@-webkit-keyframes xfade2 {\\\\n  0% {\\\\n    visibility: visible;\\\\n    opacity: 1;\\\\n  }\\\\n  100% {\\\\n    visibility: hidden;\\\\n    opacity: 0;\\\\n  }\\\\n}\\\\ns-word {\\\\n  display: none;\\\\n}\\\\n.animated1 {\\\\n  -webkit-animation: 0.5s ease-in-out forwards;\\\\n}\\\\n\\\", \\\"\\\"]);\\n\\n// exports\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///9\\n\");/***/},/* 10 *//***/function(module,exports,__webpack_require__){\"use strict\";eval('\\n\\nObject.defineProperty(exports, \"__esModule\", {\\n  value: true\\n});\\n\\nvar _editor = __webpack_require__(3);\\n\\nvar _editor2 = _interopRequireDefault(_editor);\\n\\n__webpack_require__(70);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nvar Reply = _editor2.default.extend({\\n  init: function init(props) {\\n    //debugger;\\n    props = Object.assign({}, {\\n      tag_name: \\'editor-reply-ovo\\',\\n      config: {\\n        TITLE_EMPTY: \\'\\u56DE\\u590D\\u5185\\u5BB9\\u4E0D\\u80FD\\u4E3A\\u7A7A\\',\\n        SUCCESS: \\'\\u56DE\\u590D\\u6210\\u529F\\',\\n        WORD_TOO_MANY: \\'\\u4F60\\u5199\\u7684\\u5B57\\u6570\\u592A\\u591A\\u4E86\\u5427...\\',\\n        SMILE_TOO_MANY: \\'\\u4F60\\u53D1\\u7684\\u8868\\u60C5\\u592A\\u591A\\u4E86\\u5427...\\',\\n        MAX_WORDS: 500,\\n        MAX_SMILES: 20\\n      }\\n    }, props);\\n\\n    this._super(props);\\n\\n    //console.log(\\'reply constructor\\');\\n  },\\n  _handleForThose: function _handleForThose() {\\n    var _this = this;\\n\\n    this._super();\\n\\n    this.$content.on(\\'input\\', function (e) {\\n      _this._recordLastRange(0);\\n    });\\n    this.$content.on(\\'touchend\\', function (e) {\\n      _this._recordLastRange(566);\\n    });\\n\\n    {\\n      var i = 0;\\n      var $holder = $(\\'.ej-reply__smile-holder\\', this.el);\\n      $holder.hide();\\n      $(this.constructor.EL_SMILE_ICON).on(\\'click\\', function (e) {\\n        ++i % 2 === 0 ? $holder.hide() : $holder.show();\\n      });\\n    }\\n  }\\n  // send\\n  ,\\n  _editSuccess: function _editSuccess() {\\n    var _this2 = this;\\n\\n    var config = this.options.config;\\n\\n\\n    return new Promise(function (r) {\\n      var that = _this2;\\n\\n      var handle = function () {\\n        var v = that.$content[0].innerHTML.trim();\\n\\n        if (!v.length || v === that.$content[0].getAttribute(\\'defaultValue\\')) {\\n\\n          return that._displayMsg(config.TITLE_EMPTY);\\n        }\\n\\n        return \\'nextSuccessor\\';\\n      }.after(function () {\\n        var smile_len = $(\\'.smile-ovo\\', that.$content).length;\\n\\n        if (smile_len > config.MAX_SMILES) return that._displayMsg(config.SMILE_TOO_MANY);\\n\\n        return \\'nextSuccessor\\';\\n      }).after(function () {\\n        var v = that.$content[0].textContent.trim();\\n        if (v.length > config.MAX_WORDS) {\\n          return that._displayMsg(config.WORD_TOO_MANY);\\n        }\\n\\n        return \\'nextSuccessor\\';\\n      }).after(function () {\\n\\n        r({\\n          html_content: that._resAdapter(that.$content[0].innerHTML.trim()),\\n          text_content: that._resAdapter(that.$content[0].textContent.trim())\\n\\n        });\\n      });\\n\\n      handle();\\n    });\\n  },\\n  _handleConfirm: function _handleConfirm() {\\n    var _this3 = this;\\n\\n    $(this.constructor.EL_CONFIRM).on(\\'click\\', function (e) {\\n\\n      _this3._editSuccess().then(function (res) {\\n        var text_content = res.text_content,\\n            html_content = res.html_content;\\n\\n\\n        _this3.trigger(\\'complete\\', {\\n          html_content: html_content, text_content: text_content,\\n          el_target: _this3.el_target,\\n          edit_time: Date.now()\\n        });\\n      });\\n    });\\n  },\\n  _createChild: function _createChild() {\\n    this._super();\\n    //editor-reply-ovo\\n    this.el.classList.add(this.constructor.CLS);\\n\\n    this.el.innerHTML = \\'\\\\n      <div class=\"ej_replay__wrap\">\\\\n        <div class=\"ej_reply__content-wrap rel\">\\\\n          <div class=\"ej_reply__content abs wh\" content-ovo contenteditable=\"true\" defaultValue=\"\\\\u56DE\\\\u590D\\\\u4F60\\\\u7684\\\\u5185\\\\u5BB9\\\\u5427...\" ></div>\\\\n        </div>\\\\n        <div class=\"ej-reply__bot rel\">\\\\n          <div class=\"abs wh\">\\\\n\\\\n            <ul>\\\\n              <li smile-icon-ovo></li>\\\\n            </ul>\\\\n\\\\n            <div>\\\\n              <button cancel-ovo class=\"rel ej-reply__cancel\"><span class=\"abs wh\">\\\\u53D6\\\\u6D88</span></button>\\\\n              <button confirm-ovo class=\"rel ej-reply__pub\"><span class=\"abs wh\">\\\\u53D1\\\\u8868</span></button>\\\\n            </div>\\\\n          </div>\\\\n        </div>\\\\n        <div class=\"ej-reply__smile-holder rel\">\\\\n          <div smile-holder-ovo xxxxxx class=\"ej-reply__smile-inner abs\">\\\\n\\\\n          </div>\\\\n        </div>\\\\n\\\\n        <div message-ovo class=\"ej-reply__msg abs\">\\\\n          <div class=\"abs wh\">\\\\n            <span>\\\\u8F93\\\\u5165\\\\u51E0\\\\u4E2A\\\\u5B57\\\\uFF1F</span>\\\\n          </div>\\\\n        </div>\\\\n      </div>\\\\n    \\';\\n\\n    this.$content = $(this.constructor.EL_CONTENT, this.el);\\n    this.$msg_holder = $(this.constructor.EL_DISPLAY_MSG, this.el);\\n    this.$msg_text = $(\\'span\\', this.$msg_holder);\\n  }\\n}, {\\n  CLS: \\'editor-reply-ovo\\'\\n});\\n\\nexports.default = Reply;\\n\\n// export default function(props){\\n\\n//   return new Reply(props);\\n// }//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///10\\n');/***/},/* 11 *//***/function(module,exports,__webpack_require__){eval(\"var map = {\\n\\t\\\"./popo_2adefed_01.png\\\": 12,\\n\\t\\\"./popo_2adefed_02.png\\\": 13,\\n\\t\\\"./popo_2adefed_03.png\\\": 14,\\n\\t\\\"./popo_2adefed_04.png\\\": 15,\\n\\t\\\"./popo_2adefed_05.png\\\": 16,\\n\\t\\\"./popo_2adefed_06.png\\\": 17,\\n\\t\\\"./popo_2adefed_07.png\\\": 18,\\n\\t\\\"./popo_2adefed_08.png\\\": 19,\\n\\t\\\"./popo_2adefed_09.png\\\": 20,\\n\\t\\\"./popo_2adefed_10.png\\\": 21,\\n\\t\\\"./popo_2adefed_11.png\\\": 22,\\n\\t\\\"./popo_2adefed_12.png\\\": 23,\\n\\t\\\"./popo_2adefed_13.png\\\": 24,\\n\\t\\\"./popo_2adefed_14.png\\\": 25,\\n\\t\\\"./popo_2adefed_15.png\\\": 26,\\n\\t\\\"./popo_2adefed_16.png\\\": 27,\\n\\t\\\"./popo_2adefed_17.png\\\": 28,\\n\\t\\\"./popo_2adefed_18.png\\\": 29,\\n\\t\\\"./popo_2adefed_19.png\\\": 30,\\n\\t\\\"./popo_2adefed_20.png\\\": 31,\\n\\t\\\"./popo_2adefed_21.png\\\": 32,\\n\\t\\\"./popo_2adefed_22.png\\\": 33,\\n\\t\\\"./popo_2adefed_23.png\\\": 34,\\n\\t\\\"./popo_2adefed_24.png\\\": 35,\\n\\t\\\"./popo_2adefed_25.png\\\": 36,\\n\\t\\\"./popo_2adefed_26.png\\\": 37,\\n\\t\\\"./popo_2adefed_27.png\\\": 38,\\n\\t\\\"./popo_2adefed_28.png\\\": 39,\\n\\t\\\"./popo_2adefed_29.png\\\": 40,\\n\\t\\\"./popo_2adefed_30.png\\\": 41,\\n\\t\\\"./popo_2adefed_31.png\\\": 42,\\n\\t\\\"./popo_2adefed_32.png\\\": 43,\\n\\t\\\"./popo_2adefed_33.png\\\": 44,\\n\\t\\\"./popo_2adefed_34.png\\\": 45,\\n\\t\\\"./popo_2adefed_35.png\\\": 46,\\n\\t\\\"./popo_2adefed_36.png\\\": 47,\\n\\t\\\"./popo_2adefed_37.png\\\": 48,\\n\\t\\\"./popo_2adefed_38.png\\\": 49,\\n\\t\\\"./popo_2adefed_39.png\\\": 50,\\n\\t\\\"./popo_2adefed_40.png\\\": 51,\\n\\t\\\"./popo_2adefed_41.png\\\": 52,\\n\\t\\\"./popo_2adefed_42.png\\\": 53,\\n\\t\\\"./popo_2adefed_43.png\\\": 54,\\n\\t\\\"./popo_2adefed_44.png\\\": 55,\\n\\t\\\"./popo_2adefed_45.png\\\": 56,\\n\\t\\\"./popo_2adefed_46.png\\\": 57,\\n\\t\\\"./popo_2adefed_47.png\\\": 58,\\n\\t\\\"./popo_2adefed_48.png\\\": 59,\\n\\t\\\"./popo_2adefed_49.png\\\": 60,\\n\\t\\\"./popo_2adefed_50.png\\\": 61\\n};\\nfunction webpackContext(req) {\\n\\treturn __webpack_require__(webpackContextResolve(req));\\n};\\nfunction webpackContextResolve(req) {\\n\\tvar id = map[req];\\n\\tif(!(id + 1)) // check for number or string\\n\\t\\tthrow new Error(\\\"Cannot find module '\\\" + req + \\\"'.\\\");\\n\\treturn id;\\n};\\nwebpackContext.keys = function webpackContextKeys() {\\n\\treturn Object.keys(map);\\n};\\nwebpackContext.resolve = webpackContextResolve;\\nmodule.exports = webpackContext;\\nwebpackContext.id = 11;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2ltZy9zbWlsZSBcXC5wbmckP2YzNGEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMTEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbWFwID0ge1xuXHRcIi4vcG9wb18yYWRlZmVkXzAxLnBuZ1wiOiAxMixcblx0XCIuL3BvcG9fMmFkZWZlZF8wMi5wbmdcIjogMTMsXG5cdFwiLi9wb3BvXzJhZGVmZWRfMDMucG5nXCI6IDE0LFxuXHRcIi4vcG9wb18yYWRlZmVkXzA0LnBuZ1wiOiAxNSxcblx0XCIuL3BvcG9fMmFkZWZlZF8wNS5wbmdcIjogMTYsXG5cdFwiLi9wb3BvXzJhZGVmZWRfMDYucG5nXCI6IDE3LFxuXHRcIi4vcG9wb18yYWRlZmVkXzA3LnBuZ1wiOiAxOCxcblx0XCIuL3BvcG9fMmFkZWZlZF8wOC5wbmdcIjogMTksXG5cdFwiLi9wb3BvXzJhZGVmZWRfMDkucG5nXCI6IDIwLFxuXHRcIi4vcG9wb18yYWRlZmVkXzEwLnBuZ1wiOiAyMSxcblx0XCIuL3BvcG9fMmFkZWZlZF8xMS5wbmdcIjogMjIsXG5cdFwiLi9wb3BvXzJhZGVmZWRfMTIucG5nXCI6IDIzLFxuXHRcIi4vcG9wb18yYWRlZmVkXzEzLnBuZ1wiOiAyNCxcblx0XCIuL3BvcG9fMmFkZWZlZF8xNC5wbmdcIjogMjUsXG5cdFwiLi9wb3BvXzJhZGVmZWRfMTUucG5nXCI6IDI2LFxuXHRcIi4vcG9wb18yYWRlZmVkXzE2LnBuZ1wiOiAyNyxcblx0XCIuL3BvcG9fMmFkZWZlZF8xNy5wbmdcIjogMjgsXG5cdFwiLi9wb3BvXzJhZGVmZWRfMTgucG5nXCI6IDI5LFxuXHRcIi4vcG9wb18yYWRlZmVkXzE5LnBuZ1wiOiAzMCxcblx0XCIuL3BvcG9fMmFkZWZlZF8yMC5wbmdcIjogMzEsXG5cdFwiLi9wb3BvXzJhZGVmZWRfMjEucG5nXCI6IDMyLFxuXHRcIi4vcG9wb18yYWRlZmVkXzIyLnBuZ1wiOiAzMyxcblx0XCIuL3BvcG9fMmFkZWZlZF8yMy5wbmdcIjogMzQsXG5cdFwiLi9wb3BvXzJhZGVmZWRfMjQucG5nXCI6IDM1LFxuXHRcIi4vcG9wb18yYWRlZmVkXzI1LnBuZ1wiOiAzNixcblx0XCIuL3BvcG9fMmFkZWZlZF8yNi5wbmdcIjogMzcsXG5cdFwiLi9wb3BvXzJhZGVmZWRfMjcucG5nXCI6IDM4LFxuXHRcIi4vcG9wb18yYWRlZmVkXzI4LnBuZ1wiOiAzOSxcblx0XCIuL3BvcG9fMmFkZWZlZF8yOS5wbmdcIjogNDAsXG5cdFwiLi9wb3BvXzJhZGVmZWRfMzAucG5nXCI6IDQxLFxuXHRcIi4vcG9wb18yYWRlZmVkXzMxLnBuZ1wiOiA0Mixcblx0XCIuL3BvcG9fMmFkZWZlZF8zMi5wbmdcIjogNDMsXG5cdFwiLi9wb3BvXzJhZGVmZWRfMzMucG5nXCI6IDQ0LFxuXHRcIi4vcG9wb18yYWRlZmVkXzM0LnBuZ1wiOiA0NSxcblx0XCIuL3BvcG9fMmFkZWZlZF8zNS5wbmdcIjogNDYsXG5cdFwiLi9wb3BvXzJhZGVmZWRfMzYucG5nXCI6IDQ3LFxuXHRcIi4vcG9wb18yYWRlZmVkXzM3LnBuZ1wiOiA0OCxcblx0XCIuL3BvcG9fMmFkZWZlZF8zOC5wbmdcIjogNDksXG5cdFwiLi9wb3BvXzJhZGVmZWRfMzkucG5nXCI6IDUwLFxuXHRcIi4vcG9wb18yYWRlZmVkXzQwLnBuZ1wiOiA1MSxcblx0XCIuL3BvcG9fMmFkZWZlZF80MS5wbmdcIjogNTIsXG5cdFwiLi9wb3BvXzJhZGVmZWRfNDIucG5nXCI6IDUzLFxuXHRcIi4vcG9wb18yYWRlZmVkXzQzLnBuZ1wiOiA1NCxcblx0XCIuL3BvcG9fMmFkZWZlZF80NC5wbmdcIjogNTUsXG5cdFwiLi9wb3BvXzJhZGVmZWRfNDUucG5nXCI6IDU2LFxuXHRcIi4vcG9wb18yYWRlZmVkXzQ2LnBuZ1wiOiA1Nyxcblx0XCIuL3BvcG9fMmFkZWZlZF80Ny5wbmdcIjogNTgsXG5cdFwiLi9wb3BvXzJhZGVmZWRfNDgucG5nXCI6IDU5LFxuXHRcIi4vcG9wb18yYWRlZmVkXzQ5LnBuZ1wiOiA2MCxcblx0XCIuL3BvcG9fMmFkZWZlZF81MC5wbmdcIjogNjFcbn07XG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dChyZXEpIHtcblx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18od2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSkpO1xufTtcbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpIHtcblx0dmFyIGlkID0gbWFwW3JlcV07XG5cdGlmKCEoaWQgKyAxKSkgLy8gY2hlY2sgZm9yIG51bWJlciBvciBzdHJpbmdcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiICsgcmVxICsgXCInLlwiKTtcblx0cmV0dXJuIGlkO1xufTtcbndlYnBhY2tDb250ZXh0LmtleXMgPSBmdW5jdGlvbiB3ZWJwYWNrQ29udGV4dEtleXMoKSB7XG5cdHJldHVybiBPYmplY3Qua2V5cyhtYXApO1xufTtcbndlYnBhY2tDb250ZXh0LnJlc29sdmUgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmU7XG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tDb250ZXh0O1xud2VicGFja0NvbnRleHQuaWQgPSAxMTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21tb24vaW1nL3NtaWxlIFxcLnBuZyRcbi8vIG1vZHVsZSBpZCA9IDExXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///11\\n\");/***/},/* 12 *//***/function(module,exports,__webpack_require__){eval(\"module.exports = __webpack_require__.p + \\\"img/popo_2adefed_01.png?55f3fa\\\";//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2ltZy9zbWlsZS9wb3BvXzJhZGVmZWRfMDEucG5nPzVjOGQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMTIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvcG9wb18yYWRlZmVkXzAxLnBuZz81NWYzZmFcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21tb24vaW1nL3NtaWxlL3BvcG9fMmFkZWZlZF8wMS5wbmdcbi8vIG1vZHVsZSBpZCA9IDEyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///12\\n\");/***/},/* 13 *//***/function(module,exports,__webpack_require__){eval(\"module.exports = __webpack_require__.p + \\\"img/popo_2adefed_02.png?439e32\\\";//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2ltZy9zbWlsZS9wb3BvXzJhZGVmZWRfMDIucG5nPzEyYmEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMTMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvcG9wb18yYWRlZmVkXzAyLnBuZz80MzllMzJcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21tb24vaW1nL3NtaWxlL3BvcG9fMmFkZWZlZF8wMi5wbmdcbi8vIG1vZHVsZSBpZCA9IDEzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///13\\n\");/***/},/* 14 *//***/function(module,exports,__webpack_require__){eval(\"module.exports = __webpack_require__.p + \\\"img/popo_2adefed_03.png?3c989a\\\";//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2ltZy9zbWlsZS9wb3BvXzJhZGVmZWRfMDMucG5nPzI3ZDgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMTQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvcG9wb18yYWRlZmVkXzAzLnBuZz8zYzk4OWFcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21tb24vaW1nL3NtaWxlL3BvcG9fMmFkZWZlZF8wMy5wbmdcbi8vIG1vZHVsZSBpZCA9IDE0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///14\\n\");/***/},/* 15 *//***/function(module,exports,__webpack_require__){eval(\"module.exports = __webpack_require__.p + \\\"img/popo_2adefed_04.png?17ebd5\\\";//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2ltZy9zbWlsZS9wb3BvXzJhZGVmZWRfMDQucG5nPzk1NDgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMTUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvcG9wb18yYWRlZmVkXzA0LnBuZz8xN2ViZDVcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21tb24vaW1nL3NtaWxlL3BvcG9fMmFkZWZlZF8wNC5wbmdcbi8vIG1vZHVsZSBpZCA9IDE1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///15\\n\");/***/},/* 16 *//***/function(module,exports,__webpack_require__){eval(\"module.exports = __webpack_require__.p + \\\"img/popo_2adefed_05.png?919639\\\";//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2ltZy9zbWlsZS9wb3BvXzJhZGVmZWRfMDUucG5nP2ZhZjYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMTYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvcG9wb18yYWRlZmVkXzA1LnBuZz85MTk2MzlcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21tb24vaW1nL3NtaWxlL3BvcG9fMmFkZWZlZF8wNS5wbmdcbi8vIG1vZHVsZSBpZCA9IDE2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///16\\n\");/***/},/* 17 *//***/function(module,exports,__webpack_require__){eval(\"module.exports = __webpack_require__.p + \\\"img/popo_2adefed_06.png?3126f5\\\";//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2ltZy9zbWlsZS9wb3BvXzJhZGVmZWRfMDYucG5nPzU3YWIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMTcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvcG9wb18yYWRlZmVkXzA2LnBuZz8zMTI2ZjVcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21tb24vaW1nL3NtaWxlL3BvcG9fMmFkZWZlZF8wNi5wbmdcbi8vIG1vZHVsZSBpZCA9IDE3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///17\\n\");/***/},/* 18 *//***/function(module,exports,__webpack_require__){eval(\"module.exports = __webpack_require__.p + \\\"img/popo_2adefed_07.png?a00e90\\\";//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2ltZy9zbWlsZS9wb3BvXzJhZGVmZWRfMDcucG5nPzlmNWQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMTguanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvcG9wb18yYWRlZmVkXzA3LnBuZz9hMDBlOTBcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21tb24vaW1nL3NtaWxlL3BvcG9fMmFkZWZlZF8wNy5wbmdcbi8vIG1vZHVsZSBpZCA9IDE4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///18\\n\");/***/},/* 19 *//***/function(module,exports,__webpack_require__){eval(\"module.exports = __webpack_require__.p + \\\"img/popo_2adefed_08.png?d8e891\\\";//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2ltZy9zbWlsZS9wb3BvXzJhZGVmZWRfMDgucG5nPzg4NDkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMTkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvcG9wb18yYWRlZmVkXzA4LnBuZz9kOGU4OTFcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21tb24vaW1nL3NtaWxlL3BvcG9fMmFkZWZlZF8wOC5wbmdcbi8vIG1vZHVsZSBpZCA9IDE5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///19\\n\");/***/},/* 20 *//***/function(module,exports,__webpack_require__){eval(\"module.exports = __webpack_require__.p + \\\"img/popo_2adefed_09.png?982cc9\\\";//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2ltZy9zbWlsZS9wb3BvXzJhZGVmZWRfMDkucG5nPzM0NDgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvcG9wb18yYWRlZmVkXzA5LnBuZz85ODJjYzlcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21tb24vaW1nL3NtaWxlL3BvcG9fMmFkZWZlZF8wOS5wbmdcbi8vIG1vZHVsZSBpZCA9IDIwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///20\\n\");/***/},/* 21 *//***/function(module,exports,__webpack_require__){eval(\"module.exports = __webpack_require__.p + \\\"img/popo_2adefed_10.png?9a8e1a\\\";//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2ltZy9zbWlsZS9wb3BvXzJhZGVmZWRfMTAucG5nPzZiNGYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvcG9wb18yYWRlZmVkXzEwLnBuZz85YThlMWFcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21tb24vaW1nL3NtaWxlL3BvcG9fMmFkZWZlZF8xMC5wbmdcbi8vIG1vZHVsZSBpZCA9IDIxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///21\\n\");/***/},/* 22 *//***/function(module,exports,__webpack_require__){eval(\"module.exports = __webpack_require__.p + \\\"img/popo_2adefed_11.png?d0bd51\\\";//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2ltZy9zbWlsZS9wb3BvXzJhZGVmZWRfMTEucG5nP2Y0NDEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvcG9wb18yYWRlZmVkXzExLnBuZz9kMGJkNTFcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21tb24vaW1nL3NtaWxlL3BvcG9fMmFkZWZlZF8xMS5wbmdcbi8vIG1vZHVsZSBpZCA9IDIyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///22\\n\");/***/},/* 23 *//***/function(module,exports,__webpack_require__){eval(\"module.exports = __webpack_require__.p + \\\"img/popo_2adefed_12.png?c59383\\\";//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2ltZy9zbWlsZS9wb3BvXzJhZGVmZWRfMTIucG5nPzY1YTIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvcG9wb18yYWRlZmVkXzEyLnBuZz9jNTkzODNcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21tb24vaW1nL3NtaWxlL3BvcG9fMmFkZWZlZF8xMi5wbmdcbi8vIG1vZHVsZSBpZCA9IDIzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///23\\n\");/***/},/* 24 *//***/function(module,exports,__webpack_require__){eval(\"module.exports = __webpack_require__.p + \\\"img/popo_2adefed_13.png?6b79d7\\\";//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2ltZy9zbWlsZS9wb3BvXzJhZGVmZWRfMTMucG5nPzVhMjkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvcG9wb18yYWRlZmVkXzEzLnBuZz82Yjc5ZDdcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21tb24vaW1nL3NtaWxlL3BvcG9fMmFkZWZlZF8xMy5wbmdcbi8vIG1vZHVsZSBpZCA9IDI0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///24\\n\");/***/},/* 25 *//***/function(module,exports,__webpack_require__){eval(\"module.exports = __webpack_require__.p + \\\"img/popo_2adefed_14.png?c1dbde\\\";//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2ltZy9zbWlsZS9wb3BvXzJhZGVmZWRfMTQucG5nPzE0MjgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMjUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvcG9wb18yYWRlZmVkXzE0LnBuZz9jMWRiZGVcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21tb24vaW1nL3NtaWxlL3BvcG9fMmFkZWZlZF8xNC5wbmdcbi8vIG1vZHVsZSBpZCA9IDI1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///25\\n\");/***/},/* 26 *//***/function(module,exports,__webpack_require__){eval(\"module.exports = __webpack_require__.p + \\\"img/popo_2adefed_15.png?a740b8\\\";//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2ltZy9zbWlsZS9wb3BvXzJhZGVmZWRfMTUucG5nPzU0MTciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMjYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvcG9wb18yYWRlZmVkXzE1LnBuZz9hNzQwYjhcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21tb24vaW1nL3NtaWxlL3BvcG9fMmFkZWZlZF8xNS5wbmdcbi8vIG1vZHVsZSBpZCA9IDI2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///26\\n\");/***/},/* 27 *//***/function(module,exports,__webpack_require__){eval(\"module.exports = __webpack_require__.p + \\\"img/popo_2adefed_16.png?cd9486\\\";//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2ltZy9zbWlsZS9wb3BvXzJhZGVmZWRfMTYucG5nP2Q4Y2EiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMjcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvcG9wb18yYWRlZmVkXzE2LnBuZz9jZDk0ODZcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21tb24vaW1nL3NtaWxlL3BvcG9fMmFkZWZlZF8xNi5wbmdcbi8vIG1vZHVsZSBpZCA9IDI3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///27\\n\");/***/},/* 28 *//***/function(module,exports,__webpack_require__){eval(\"module.exports = __webpack_require__.p + \\\"img/popo_2adefed_17.png?108d28\\\";//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2ltZy9zbWlsZS9wb3BvXzJhZGVmZWRfMTcucG5nPzExYmIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMjguanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvcG9wb18yYWRlZmVkXzE3LnBuZz8xMDhkMjhcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21tb24vaW1nL3NtaWxlL3BvcG9fMmFkZWZlZF8xNy5wbmdcbi8vIG1vZHVsZSBpZCA9IDI4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///28\\n\");/***/},/* 29 *//***/function(module,exports,__webpack_require__){eval(\"module.exports = __webpack_require__.p + \\\"img/popo_2adefed_18.png?91cecf\\\";//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2ltZy9zbWlsZS9wb3BvXzJhZGVmZWRfMTgucG5nP2EwM2EiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMjkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvcG9wb18yYWRlZmVkXzE4LnBuZz85MWNlY2ZcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21tb24vaW1nL3NtaWxlL3BvcG9fMmFkZWZlZF8xOC5wbmdcbi8vIG1vZHVsZSBpZCA9IDI5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///29\\n\");/***/},/* 30 *//***/function(module,exports,__webpack_require__){eval(\"module.exports = __webpack_require__.p + \\\"img/popo_2adefed_19.png?1c07a6\\\";//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2ltZy9zbWlsZS9wb3BvXzJhZGVmZWRfMTkucG5nPzJiZjEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMzAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvcG9wb18yYWRlZmVkXzE5LnBuZz8xYzA3YTZcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21tb24vaW1nL3NtaWxlL3BvcG9fMmFkZWZlZF8xOS5wbmdcbi8vIG1vZHVsZSBpZCA9IDMwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///30\\n\");/***/},/* 31 *//***/function(module,exports,__webpack_require__){eval(\"module.exports = __webpack_require__.p + \\\"img/popo_2adefed_20.png?8df1b4\\\";//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2ltZy9zbWlsZS9wb3BvXzJhZGVmZWRfMjAucG5nPzcyMGQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMzEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvcG9wb18yYWRlZmVkXzIwLnBuZz84ZGYxYjRcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21tb24vaW1nL3NtaWxlL3BvcG9fMmFkZWZlZF8yMC5wbmdcbi8vIG1vZHVsZSBpZCA9IDMxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///31\\n\");/***/},/* 32 *//***/function(module,exports,__webpack_require__){eval(\"module.exports = __webpack_require__.p + \\\"img/popo_2adefed_21.png?623d7d\\\";//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2ltZy9zbWlsZS9wb3BvXzJhZGVmZWRfMjEucG5nPzYwNTIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMzIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvcG9wb18yYWRlZmVkXzIxLnBuZz82MjNkN2RcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21tb24vaW1nL3NtaWxlL3BvcG9fMmFkZWZlZF8yMS5wbmdcbi8vIG1vZHVsZSBpZCA9IDMyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///32\\n\");/***/},/* 33 *//***/function(module,exports,__webpack_require__){eval(\"module.exports = __webpack_require__.p + \\\"img/popo_2adefed_22.png?3e302e\\\";//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2ltZy9zbWlsZS9wb3BvXzJhZGVmZWRfMjIucG5nPzc3NTUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMzMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvcG9wb18yYWRlZmVkXzIyLnBuZz8zZTMwMmVcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21tb24vaW1nL3NtaWxlL3BvcG9fMmFkZWZlZF8yMi5wbmdcbi8vIG1vZHVsZSBpZCA9IDMzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///33\\n\");/***/},/* 34 *//***/function(module,exports,__webpack_require__){eval(\"module.exports = __webpack_require__.p + \\\"img/popo_2adefed_23.png?5f3f99\\\";//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2ltZy9zbWlsZS9wb3BvXzJhZGVmZWRfMjMucG5nPzQ4MjQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMzQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvcG9wb18yYWRlZmVkXzIzLnBuZz81ZjNmOTlcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21tb24vaW1nL3NtaWxlL3BvcG9fMmFkZWZlZF8yMy5wbmdcbi8vIG1vZHVsZSBpZCA9IDM0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///34\\n\");/***/},/* 35 *//***/function(module,exports,__webpack_require__){eval(\"module.exports = __webpack_require__.p + \\\"img/popo_2adefed_24.png?8205df\\\";//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2ltZy9zbWlsZS9wb3BvXzJhZGVmZWRfMjQucG5nPzU4YjEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMzUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvcG9wb18yYWRlZmVkXzI0LnBuZz84MjA1ZGZcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21tb24vaW1nL3NtaWxlL3BvcG9fMmFkZWZlZF8yNC5wbmdcbi8vIG1vZHVsZSBpZCA9IDM1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///35\\n\");/***/},/* 36 *//***/function(module,exports,__webpack_require__){eval(\"module.exports = __webpack_require__.p + \\\"img/popo_2adefed_25.png?ecc25f\\\";//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2ltZy9zbWlsZS9wb3BvXzJhZGVmZWRfMjUucG5nP2I1MWEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMzYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvcG9wb18yYWRlZmVkXzI1LnBuZz9lY2MyNWZcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21tb24vaW1nL3NtaWxlL3BvcG9fMmFkZWZlZF8yNS5wbmdcbi8vIG1vZHVsZSBpZCA9IDM2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///36\\n\");/***/},/* 37 *//***/function(module,exports,__webpack_require__){eval(\"module.exports = __webpack_require__.p + \\\"img/popo_2adefed_26.png?b5c25b\\\";//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2ltZy9zbWlsZS9wb3BvXzJhZGVmZWRfMjYucG5nPzMyYzEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMzcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvcG9wb18yYWRlZmVkXzI2LnBuZz9iNWMyNWJcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21tb24vaW1nL3NtaWxlL3BvcG9fMmFkZWZlZF8yNi5wbmdcbi8vIG1vZHVsZSBpZCA9IDM3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///37\\n\");/***/},/* 38 *//***/function(module,exports,__webpack_require__){eval(\"module.exports = __webpack_require__.p + \\\"img/popo_2adefed_27.png?ff0513\\\";//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2ltZy9zbWlsZS9wb3BvXzJhZGVmZWRfMjcucG5nPzI2ZjYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMzguanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvcG9wb18yYWRlZmVkXzI3LnBuZz9mZjA1MTNcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21tb24vaW1nL3NtaWxlL3BvcG9fMmFkZWZlZF8yNy5wbmdcbi8vIG1vZHVsZSBpZCA9IDM4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///38\\n\");/***/},/* 39 *//***/function(module,exports,__webpack_require__){eval(\"module.exports = __webpack_require__.p + \\\"img/popo_2adefed_28.png?861e1a\\\";//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2ltZy9zbWlsZS9wb3BvXzJhZGVmZWRfMjgucG5nP2ExYzgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMzkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvcG9wb18yYWRlZmVkXzI4LnBuZz84NjFlMWFcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21tb24vaW1nL3NtaWxlL3BvcG9fMmFkZWZlZF8yOC5wbmdcbi8vIG1vZHVsZSBpZCA9IDM5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///39\\n\");/***/},/* 40 *//***/function(module,exports,__webpack_require__){eval(\"module.exports = __webpack_require__.p + \\\"img/popo_2adefed_29.png?7bb30c\\\";//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2ltZy9zbWlsZS9wb3BvXzJhZGVmZWRfMjkucG5nPzRjMTQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNDAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvcG9wb18yYWRlZmVkXzI5LnBuZz83YmIzMGNcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21tb24vaW1nL3NtaWxlL3BvcG9fMmFkZWZlZF8yOS5wbmdcbi8vIG1vZHVsZSBpZCA9IDQwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///40\\n\");/***/},/* 41 *//***/function(module,exports,__webpack_require__){eval(\"module.exports = __webpack_require__.p + \\\"img/popo_2adefed_30.png?8435cc\\\";//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2ltZy9zbWlsZS9wb3BvXzJhZGVmZWRfMzAucG5nPzU5NDEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNDEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvcG9wb18yYWRlZmVkXzMwLnBuZz84NDM1Y2NcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21tb24vaW1nL3NtaWxlL3BvcG9fMmFkZWZlZF8zMC5wbmdcbi8vIG1vZHVsZSBpZCA9IDQxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///41\\n\");/***/},/* 42 *//***/function(module,exports,__webpack_require__){eval(\"module.exports = __webpack_require__.p + \\\"img/popo_2adefed_31.png?67f173\\\";//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2ltZy9zbWlsZS9wb3BvXzJhZGVmZWRfMzEucG5nPzI5MjIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNDIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvcG9wb18yYWRlZmVkXzMxLnBuZz82N2YxNzNcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21tb24vaW1nL3NtaWxlL3BvcG9fMmFkZWZlZF8zMS5wbmdcbi8vIG1vZHVsZSBpZCA9IDQyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///42\\n\");/***/},/* 43 *//***/function(module,exports,__webpack_require__){eval(\"module.exports = __webpack_require__.p + \\\"img/popo_2adefed_32.png?4f8a1b\\\";//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2ltZy9zbWlsZS9wb3BvXzJhZGVmZWRfMzIucG5nPzliNDYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNDMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvcG9wb18yYWRlZmVkXzMyLnBuZz80ZjhhMWJcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21tb24vaW1nL3NtaWxlL3BvcG9fMmFkZWZlZF8zMi5wbmdcbi8vIG1vZHVsZSBpZCA9IDQzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///43\\n\");/***/},/* 44 *//***/function(module,exports,__webpack_require__){eval(\"module.exports = __webpack_require__.p + \\\"img/popo_2adefed_33.png?ea7316\\\";//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2ltZy9zbWlsZS9wb3BvXzJhZGVmZWRfMzMucG5nPzE5MzIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNDQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvcG9wb18yYWRlZmVkXzMzLnBuZz9lYTczMTZcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21tb24vaW1nL3NtaWxlL3BvcG9fMmFkZWZlZF8zMy5wbmdcbi8vIG1vZHVsZSBpZCA9IDQ0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///44\\n\");/***/},/* 45 *//***/function(module,exports,__webpack_require__){eval(\"module.exports = __webpack_require__.p + \\\"img/popo_2adefed_34.png?14d8b1\\\";//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2ltZy9zbWlsZS9wb3BvXzJhZGVmZWRfMzQucG5nP2ZmNDAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNDUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvcG9wb18yYWRlZmVkXzM0LnBuZz8xNGQ4YjFcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21tb24vaW1nL3NtaWxlL3BvcG9fMmFkZWZlZF8zNC5wbmdcbi8vIG1vZHVsZSBpZCA9IDQ1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///45\\n\");/***/},/* 46 *//***/function(module,exports,__webpack_require__){eval(\"module.exports = __webpack_require__.p + \\\"img/popo_2adefed_35.png?bdbca7\\\";//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2ltZy9zbWlsZS9wb3BvXzJhZGVmZWRfMzUucG5nP2UxNjUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNDYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvcG9wb18yYWRlZmVkXzM1LnBuZz9iZGJjYTdcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21tb24vaW1nL3NtaWxlL3BvcG9fMmFkZWZlZF8zNS5wbmdcbi8vIG1vZHVsZSBpZCA9IDQ2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///46\\n\");/***/},/* 47 *//***/function(module,exports,__webpack_require__){eval(\"module.exports = __webpack_require__.p + \\\"img/popo_2adefed_36.png?78c44c\\\";//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2ltZy9zbWlsZS9wb3BvXzJhZGVmZWRfMzYucG5nPzMyYjIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNDcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvcG9wb18yYWRlZmVkXzM2LnBuZz83OGM0NGNcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21tb24vaW1nL3NtaWxlL3BvcG9fMmFkZWZlZF8zNi5wbmdcbi8vIG1vZHVsZSBpZCA9IDQ3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///47\\n\");/***/},/* 48 *//***/function(module,exports,__webpack_require__){eval(\"module.exports = __webpack_require__.p + \\\"img/popo_2adefed_37.png?ba226f\\\";//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2ltZy9zbWlsZS9wb3BvXzJhZGVmZWRfMzcucG5nPzQ2ZGUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNDguanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvcG9wb18yYWRlZmVkXzM3LnBuZz9iYTIyNmZcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21tb24vaW1nL3NtaWxlL3BvcG9fMmFkZWZlZF8zNy5wbmdcbi8vIG1vZHVsZSBpZCA9IDQ4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///48\\n\");/***/},/* 49 *//***/function(module,exports,__webpack_require__){eval(\"module.exports = __webpack_require__.p + \\\"img/popo_2adefed_38.png?4a999c\\\";//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2ltZy9zbWlsZS9wb3BvXzJhZGVmZWRfMzgucG5nPzU5NjciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNDkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvcG9wb18yYWRlZmVkXzM4LnBuZz80YTk5OWNcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21tb24vaW1nL3NtaWxlL3BvcG9fMmFkZWZlZF8zOC5wbmdcbi8vIG1vZHVsZSBpZCA9IDQ5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///49\\n\");/***/},/* 50 *//***/function(module,exports,__webpack_require__){eval(\"module.exports = __webpack_require__.p + \\\"img/popo_2adefed_39.png?2ceb4c\\\";//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2ltZy9zbWlsZS9wb3BvXzJhZGVmZWRfMzkucG5nPzJkZmEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNTAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvcG9wb18yYWRlZmVkXzM5LnBuZz8yY2ViNGNcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21tb24vaW1nL3NtaWxlL3BvcG9fMmFkZWZlZF8zOS5wbmdcbi8vIG1vZHVsZSBpZCA9IDUwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///50\\n\");/***/},/* 51 *//***/function(module,exports,__webpack_require__){eval(\"module.exports = __webpack_require__.p + \\\"img/popo_2adefed_40.png?8443df\\\";//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2ltZy9zbWlsZS9wb3BvXzJhZGVmZWRfNDAucG5nP2NjZGUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNTEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvcG9wb18yYWRlZmVkXzQwLnBuZz84NDQzZGZcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21tb24vaW1nL3NtaWxlL3BvcG9fMmFkZWZlZF80MC5wbmdcbi8vIG1vZHVsZSBpZCA9IDUxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///51\\n\");/***/},/* 52 *//***/function(module,exports,__webpack_require__){eval(\"module.exports = __webpack_require__.p + \\\"img/popo_2adefed_41.png?b72f9d\\\";//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2ltZy9zbWlsZS9wb3BvXzJhZGVmZWRfNDEucG5nPzBiNzQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNTIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvcG9wb18yYWRlZmVkXzQxLnBuZz9iNzJmOWRcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21tb24vaW1nL3NtaWxlL3BvcG9fMmFkZWZlZF80MS5wbmdcbi8vIG1vZHVsZSBpZCA9IDUyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///52\\n\");/***/},/* 53 *//***/function(module,exports,__webpack_require__){eval(\"module.exports = __webpack_require__.p + \\\"img/popo_2adefed_42.png?c71b17\\\";//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2ltZy9zbWlsZS9wb3BvXzJhZGVmZWRfNDIucG5nPzcyZTgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNTMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvcG9wb18yYWRlZmVkXzQyLnBuZz9jNzFiMTdcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21tb24vaW1nL3NtaWxlL3BvcG9fMmFkZWZlZF80Mi5wbmdcbi8vIG1vZHVsZSBpZCA9IDUzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///53\\n\");/***/},/* 54 *//***/function(module,exports,__webpack_require__){eval(\"module.exports = __webpack_require__.p + \\\"img/popo_2adefed_43.png?4dd030\\\";//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2ltZy9zbWlsZS9wb3BvXzJhZGVmZWRfNDMucG5nP2NiODQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNTQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvcG9wb18yYWRlZmVkXzQzLnBuZz80ZGQwMzBcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21tb24vaW1nL3NtaWxlL3BvcG9fMmFkZWZlZF80My5wbmdcbi8vIG1vZHVsZSBpZCA9IDU0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///54\\n\");/***/},/* 55 *//***/function(module,exports,__webpack_require__){eval(\"module.exports = __webpack_require__.p + \\\"img/popo_2adefed_44.png?303458\\\";//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2ltZy9zbWlsZS9wb3BvXzJhZGVmZWRfNDQucG5nPzJhYTEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNTUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvcG9wb18yYWRlZmVkXzQ0LnBuZz8zMDM0NThcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21tb24vaW1nL3NtaWxlL3BvcG9fMmFkZWZlZF80NC5wbmdcbi8vIG1vZHVsZSBpZCA9IDU1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///55\\n\");/***/},/* 56 *//***/function(module,exports,__webpack_require__){eval(\"module.exports = __webpack_require__.p + \\\"img/popo_2adefed_45.png?2d3e0d\\\";//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2ltZy9zbWlsZS9wb3BvXzJhZGVmZWRfNDUucG5nP2I1YWMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNTYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvcG9wb18yYWRlZmVkXzQ1LnBuZz8yZDNlMGRcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21tb24vaW1nL3NtaWxlL3BvcG9fMmFkZWZlZF80NS5wbmdcbi8vIG1vZHVsZSBpZCA9IDU2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///56\\n\");/***/},/* 57 *//***/function(module,exports,__webpack_require__){eval(\"module.exports = __webpack_require__.p + \\\"img/popo_2adefed_46.png?4bc6c4\\\";//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2ltZy9zbWlsZS9wb3BvXzJhZGVmZWRfNDYucG5nPzBjYjEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNTcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvcG9wb18yYWRlZmVkXzQ2LnBuZz80YmM2YzRcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21tb24vaW1nL3NtaWxlL3BvcG9fMmFkZWZlZF80Ni5wbmdcbi8vIG1vZHVsZSBpZCA9IDU3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///57\\n\");/***/},/* 58 *//***/function(module,exports,__webpack_require__){eval(\"module.exports = __webpack_require__.p + \\\"img/popo_2adefed_47.png?df2963\\\";//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2ltZy9zbWlsZS9wb3BvXzJhZGVmZWRfNDcucG5nP2U2NTciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNTguanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvcG9wb18yYWRlZmVkXzQ3LnBuZz9kZjI5NjNcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21tb24vaW1nL3NtaWxlL3BvcG9fMmFkZWZlZF80Ny5wbmdcbi8vIG1vZHVsZSBpZCA9IDU4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///58\\n\");/***/},/* 59 *//***/function(module,exports,__webpack_require__){eval(\"module.exports = __webpack_require__.p + \\\"img/popo_2adefed_48.png?d1c46e\\\";//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2ltZy9zbWlsZS9wb3BvXzJhZGVmZWRfNDgucG5nPzU5YTQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNTkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvcG9wb18yYWRlZmVkXzQ4LnBuZz9kMWM0NmVcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21tb24vaW1nL3NtaWxlL3BvcG9fMmFkZWZlZF80OC5wbmdcbi8vIG1vZHVsZSBpZCA9IDU5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///59\\n\");/***/},/* 60 *//***/function(module,exports,__webpack_require__){eval(\"module.exports = __webpack_require__.p + \\\"img/popo_2adefed_49.png?871e18\\\";//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2ltZy9zbWlsZS9wb3BvXzJhZGVmZWRfNDkucG5nPzkxYWEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvcG9wb18yYWRlZmVkXzQ5LnBuZz84NzFlMThcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21tb24vaW1nL3NtaWxlL3BvcG9fMmFkZWZlZF80OS5wbmdcbi8vIG1vZHVsZSBpZCA9IDYwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///60\\n\");/***/},/* 61 *//***/function(module,exports,__webpack_require__){eval(\"module.exports = __webpack_require__.p + \\\"img/popo_2adefed_50.png?489c93\\\";//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2ltZy9zbWlsZS9wb3BvXzJhZGVmZWRfNTAucG5nPzUwNDEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvcG9wb18yYWRlZmVkXzUwLnBuZz80ODljOTNcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21tb24vaW1nL3NtaWxlL3BvcG9fMmFkZWZlZF81MC5wbmdcbi8vIG1vZHVsZSBpZCA9IDYxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///61\\n\");/***/},/* 62 *//***/function(module,exports,__webpack_require__){\"use strict\";eval(\"\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\n\\nvar _core = __webpack_require__(4);\\n\\nvar _swiper = __webpack_require__(63);\\n\\nvar _swiper2 = _interopRequireDefault(_swiper);\\n\\n__webpack_require__(64);\\n\\n__webpack_require__(66);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\\n\\nexports.default = _core.Event.extend({\\n  init: function init(props) {\\n    this._super();\\n\\n    props = Object.assign({}, { container: '', padding: '0%', bottom: '-23%' }, props);\\n\\n    this.options = props;\\n    //debugger;\\n\\n    this.el = document.createElement('smile-panel');\\n    this._delay_handles = [];\\n    this._itv_check;\\n    this.uid = (Math.random() + '').slice(2);\\n\\n    this.swiper_cls = 'swiper-uid' + this.uid;\\n    this.swiper_pagination_cls = 'swiper-pagination-uid' + this.uid;\\n\\n    this._createChild();\\n\\n    $(props.container).append(this.el);\\n\\n    this._createSmile();\\n\\n    this._applySwiper();\\n\\n    //this.hide();\\n\\n    this._checkDelayHandle();\\n\\n    return this;\\n  },\\n  hide: function hide() {\\n    this.el.style.display = 'none';\\n    //console.log(this.el);\\n  },\\n  show: function show() {\\n    this.el.style.display = 'block';\\n    //console.log(this.el);\\n  },\\n  _applySwiper: function _applySwiper() {\\n    var bottom = this.options.bottom;\\n\\n    try {\\n      new _swiper2.default('.' + this.swiper_cls, {\\n        pagination: '.' + this.swiper_pagination_cls,\\n        onSlideChangeEnd: function onSlideChangeEnd(swiper) {\\n\\n          //console.log(swiper.activeIndex);\\n        },\\n        onPaginationRendered: function onPaginationRendered(swiper, paginationContainer) {\\n          var $pagination = $(swiper.originalParams.pagination);\\n          $pagination.css({ 'transition': 'none', bottom: bottom });\\n        },\\n        onInit: function onInit(swiper) {\\n\\n          //var el = document.querySelector(swiper.originalParams.pagination);\\n          var $container = $(swiper.container);\\n\\n          $container.css({\\n            overflow: 'visible'\\n            //overflow:'hidden'\\n            //,overflowY:'auto'\\n          });\\n        }\\n      });\\n    } catch (e) {\\n      alert(e);\\n    }\\n  },\\n  _addDelayHandle: function _addDelayHandle() {\\n    var ms = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 333;\\n    var handle = arguments[1];\\n\\n    this._delay_handles.push({ ms: ms, handle: handle });\\n  },\\n  _checkDelayHandle: function _checkDelayHandle() {\\n    var ms = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 566;\\n\\n    var that = this;\\n    ;(function check() {\\n      that._itv_check = setTimeout(check, ms);\\n      if (!that._delay_handles.length) return;\\n      var o = that._delay_handles.shift();\\n      //console.log('delay#',handle);\\n      o.handle.call(that);\\n    })();\\n  },\\n  _createSmile: function _createSmile() {\\n    var _this = this;\\n\\n    var $wrapper = this.el.querySelector('.swiper-wrapper');\\n\\n    //debugger;\\n    // const CONFIG = {\\n    // \\tW:30,H:1500,CEIL:7,ROW:3\\n    // \\t,CLS_SMILE:'smile-ovo'\\n    // \\t,CLS_GROUPS:'smile-panel__groups swiper-slide'\\n    // }\\n    var CONFIG = {\\n      W: 30, H: 1500, CEIL: 6, ROW: 3,\\n      CLS_SMILE: 'smile-ovo',\\n      CLS_GROUPS: 'smile-panel__groups swiper-slide'\\n    };\\n    CONFIG.GROUPS = CONFIG.CEIL * CONFIG.ROW;\\n\\n    var TOTAL = CONFIG.H / CONFIG.W;\\n    var GROUP_NUM = Math.ceil(TOTAL / CONFIG.GROUPS);\\n\\n    [].concat(_toConsumableArray(Array(GROUP_NUM))).map(function (v, i) {\\n\\n      var ul = document.createElement('ul');\\n      $wrapper.appendChild(ul);\\n      //console.log($wrapper);\\n      //debugger;\\n      ul.className = CONFIG.CLS_GROUPS;\\n      //\\tul.style.padding = padding;\\n\\n      var start_i = i * CONFIG.GROUPS;\\n      //console.log(start_i);\\n      for (var _i = 0; _i < CONFIG.ROW; _i++) {\\n        var _loop = function _loop(j) {\\n\\n          var li = document.createElement('li');\\n          var count = start_i + _i * CONFIG.CEIL + j;\\n          if (count >= TOTAL) return 'continue';\\n\\n          //49\\n          //console.log(TOTAL,  count);\\n          li.setAttribute('data-smile-idx', _i + ',' + j + ',' + count);\\n          //li.setAttribute('unselectable','on'); \\n          ul.appendChild(li);\\n          //li.className = 'smile-ovo';\\n          li.style.backgroundPosition = '0 ' + count * CONFIG.W * -1 + 'px';\\n          Object.assign(li, { smile_idx: count });\\n\\n          li.itv_;\\n\\n          li.addEventListener('click', function (e) {\\n\\n            _this._addDelayHandle(333, function () {\\n              var _this2 = this;\\n\\n              var num_of_pic = count + 1;\\n              num_of_pic < 10 && (num_of_pic = '0' + num_of_pic);\\n              //\\tconsole.log(li,num_of_pic);\\n              var img = document.createElement('img');\\n              img.className = CONFIG.CLS_SMILE;\\n              img.onload = function () {\\n                return _this2.trigger('pick', { el: img, smile_idx: count });\\n              };\\n\\n              //Cache[`popo_2adefed_${num_of_pic}.png`]\\n              //img.src = `./src/common/img/popo_2adefed/popo_2adefed_${num_of_pic}.png`;\\n              //console.log(Cache),Cache[`./popo_2adefed_${num_of_pic}.png`];\\n              img.src = _core.Cache['./popo_2adefed_' + num_of_pic + '.png'];\\n              e.preventDefault();\\n            });\\n          });\\n        };\\n\\n        for (var j = 0; j < CONFIG.CEIL; j++) {\\n          var _ret = _loop(j);\\n\\n          if (_ret === 'continue') continue;\\n        }\\n      }\\n    });\\n\\n    //7,3,21\\n  },\\n  _createChild: function _createChild() {\\n\\n    this.el.innerHTML = '\\\\n      <div class=\\\"swiper-container ' + this.swiper_cls + '\\\">\\\\n        <div class=\\\"swiper-wrapper\\\">\\\\n        \\\\n        </div>\\\\n        <div class=\\\"swiper-pagination ' + this.swiper_pagination_cls + '\\\"></div>\\\\n      </div>\\\\n    ';\\n  },\\n  el: null\\n});//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvc21pbGUuanM/ZDU2ZSJdLCJuYW1lcyI6WyJleHRlbmQiLCJpbml0IiwicHJvcHMiLCJfc3VwZXIiLCJPYmplY3QiLCJhc3NpZ24iLCJjb250YWluZXIiLCJwYWRkaW5nIiwiYm90dG9tIiwib3B0aW9ucyIsImVsIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiX2RlbGF5X2hhbmRsZXMiLCJfaXR2X2NoZWNrIiwidWlkIiwiTWF0aCIsInJhbmRvbSIsInNsaWNlIiwic3dpcGVyX2NscyIsInN3aXBlcl9wYWdpbmF0aW9uX2NscyIsIl9jcmVhdGVDaGlsZCIsIiQiLCJhcHBlbmQiLCJfY3JlYXRlU21pbGUiLCJfYXBwbHlTd2lwZXIiLCJfY2hlY2tEZWxheUhhbmRsZSIsImhpZGUiLCJzdHlsZSIsImRpc3BsYXkiLCJzaG93IiwicGFnaW5hdGlvbiIsIm9uU2xpZGVDaGFuZ2VFbmQiLCJzd2lwZXIiLCJvblBhZ2luYXRpb25SZW5kZXJlZCIsInBhZ2luYXRpb25Db250YWluZXIiLCIkcGFnaW5hdGlvbiIsIm9yaWdpbmFsUGFyYW1zIiwiY3NzIiwib25Jbml0IiwiJGNvbnRhaW5lciIsIm92ZXJmbG93IiwiZSIsImFsZXJ0IiwiX2FkZERlbGF5SGFuZGxlIiwibXMiLCJoYW5kbGUiLCJwdXNoIiwidGhhdCIsImNoZWNrIiwic2V0VGltZW91dCIsImxlbmd0aCIsIm8iLCJzaGlmdCIsImNhbGwiLCIkd3JhcHBlciIsInF1ZXJ5U2VsZWN0b3IiLCJDT05GSUciLCJXIiwiSCIsIkNFSUwiLCJST1ciLCJDTFNfU01JTEUiLCJDTFNfR1JPVVBTIiwiR1JPVVBTIiwiVE9UQUwiLCJHUk9VUF9OVU0iLCJjZWlsIiwiQXJyYXkiLCJtYXAiLCJ2IiwiaSIsInVsIiwiYXBwZW5kQ2hpbGQiLCJjbGFzc05hbWUiLCJzdGFydF9pIiwiaiIsImxpIiwiY291bnQiLCJzZXRBdHRyaWJ1dGUiLCJiYWNrZ3JvdW5kUG9zaXRpb24iLCJzbWlsZV9pZHgiLCJpdHZfIiwiYWRkRXZlbnRMaXN0ZW5lciIsIm51bV9vZl9waWMiLCJpbWciLCJvbmxvYWQiLCJ0cmlnZ2VyIiwic3JjIiwicHJldmVudERlZmF1bHQiLCJpbm5lckhUTUwiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOztBQUVBOzs7O0FBQ0E7O0FBQ0E7Ozs7OztrQkFHZSxZQUFNQSxNQUFOLENBQWE7QUFDMUJDLE1BRDBCLGdCQUNyQkMsS0FEcUIsRUFDZjtBQUNULFNBQUtDLE1BQUw7O0FBRUFELFlBQVFFLE9BQU9DLE1BQVAsQ0FBYyxFQUFkLEVBQWlCLEVBQUNDLFdBQVUsRUFBWCxFQUFjQyxTQUFRLElBQXRCLEVBQTJCQyxRQUFPLE1BQWxDLEVBQWpCLEVBQTJETixLQUEzRCxDQUFSOztBQUVBLFNBQUtPLE9BQUwsR0FBZVAsS0FBZjtBQUNBOztBQUVBLFNBQUtRLEVBQUwsR0FBVUMsU0FBU0MsYUFBVCxDQUF1QixhQUF2QixDQUFWO0FBQ0EsU0FBS0MsY0FBTCxHQUFzQixFQUF0QjtBQUNBLFNBQUtDLFVBQUw7QUFDQSxTQUFLQyxHQUFMLEdBQVcsQ0FBQ0MsS0FBS0MsTUFBTCxLQUFjLEVBQWYsRUFBbUJDLEtBQW5CLENBQXlCLENBQXpCLENBQVg7O0FBRUEsU0FBS0MsVUFBTCxrQkFBK0IsS0FBS0osR0FBcEM7QUFDQSxTQUFLSyxxQkFBTCw2QkFBcUQsS0FBS0wsR0FBMUQ7O0FBRUEsU0FBS00sWUFBTDs7QUFFQUMsTUFBRXBCLE1BQU1JLFNBQVIsRUFBbUJpQixNQUFuQixDQUEwQixLQUFLYixFQUEvQjs7QUFFQSxTQUFLYyxZQUFMOztBQUVBLFNBQUtDLFlBQUw7O0FBRUE7O0FBRUEsU0FBS0MsaUJBQUw7O0FBRUEsV0FBTyxJQUFQO0FBRUQsR0EvQnlCO0FBZ0N6QkMsTUFoQ3lCLGtCQWdDbkI7QUFDTCxTQUFLakIsRUFBTCxDQUFRa0IsS0FBUixDQUFjQyxPQUFkLEdBQXdCLE1BQXhCO0FBQ0E7QUFDRCxHQW5DeUI7QUFvQ3pCQyxNQXBDeUIsa0JBb0NuQjtBQUNMLFNBQUtwQixFQUFMLENBQVFrQixLQUFSLENBQWNDLE9BQWQsR0FBd0IsT0FBeEI7QUFDQTtBQUNELEdBdkN5QjtBQXdDekJKLGNBeEN5QiwwQkF3Q1g7QUFBQSxRQUNSakIsTUFEUSxHQUNFLEtBQUtDLE9BRFAsQ0FDUkQsTUFEUTs7QUFFYixRQUFHO0FBQ0QsMkJBQVcsTUFBSSxLQUFLVyxVQUFwQixFQUFnQztBQUM5Qlksb0JBQWEsTUFBSSxLQUFLWCxxQkFEUTtBQUU3QlksMEJBQWtCLDBCQUFTQyxNQUFULEVBQWdCOztBQUVqQztBQUNELFNBTDZCO0FBTTdCQyw4QkFBcUIsOEJBQVNELE1BQVQsRUFBaUJFLG1CQUFqQixFQUFxQztBQUN6RCxjQUFJQyxjQUFjZCxFQUFFVyxPQUFPSSxjQUFQLENBQXNCTixVQUF4QixDQUFsQjtBQUNBSyxzQkFBWUUsR0FBWixDQUFnQixFQUFDLGNBQWEsTUFBZCxFQUFzQjlCLGNBQXRCLEVBQWhCO0FBRUQsU0FWNkI7QUFXN0IrQixnQkFBUSxnQkFBU04sTUFBVCxFQUFnQjs7QUFHdkI7QUFDQSxjQUFJTyxhQUFhbEIsRUFBRVcsT0FBTzNCLFNBQVQsQ0FBakI7O0FBRUFrQyxxQkFBV0YsR0FBWCxDQUFlO0FBQ2JHLHNCQUFTO0FBQ1Q7QUFDQTtBQUhhLFdBQWY7QUFNRDtBQXZCNkIsT0FBaEM7QUF5QkQsS0ExQkQsQ0EwQkMsT0FBTUMsQ0FBTixFQUFRO0FBQ1BDLFlBQU1ELENBQU47QUFDRDtBQUVGLEdBeEV5QjtBQXlFekJFLGlCQXpFeUIsNkJBeUVLO0FBQUEsUUFBZEMsRUFBYyx1RUFBWCxHQUFXO0FBQUEsUUFBUEMsTUFBTzs7QUFDN0IsU0FBS2pDLGNBQUwsQ0FBb0JrQyxJQUFwQixDQUF5QixFQUFDRixNQUFELEVBQUlDLGNBQUosRUFBekI7QUFFRCxHQTVFeUI7QUE2RXpCcEIsbUJBN0V5QiwrQkE2RUE7QUFBQSxRQUFQbUIsRUFBTyx1RUFBSixHQUFJOztBQUN4QixRQUFJRyxPQUFPLElBQVg7QUFDQSxLQUFDLENBQUMsU0FBU0MsS0FBVCxHQUFnQjtBQUNoQkQsV0FBS2xDLFVBQUwsR0FBa0JvQyxXQUFXRCxLQUFYLEVBQWlCSixFQUFqQixDQUFsQjtBQUNBLFVBQUcsQ0FBQ0csS0FBS25DLGNBQUwsQ0FBb0JzQyxNQUF4QixFQUFnQztBQUNoQyxVQUFJQyxJQUFJSixLQUFLbkMsY0FBTCxDQUFvQndDLEtBQXBCLEVBQVI7QUFDQTtBQUNBRCxRQUFFTixNQUFGLENBQVNRLElBQVQsQ0FBY04sSUFBZDtBQUVELEtBUEE7QUFTRixHQXhGeUI7QUF5RnpCeEIsY0F6RnlCLDBCQXlGWDtBQUFBOztBQUNiLFFBQUkrQixXQUFXLEtBQUs3QyxFQUFMLENBQVE4QyxhQUFSLENBQXNCLGlCQUF0QixDQUFmOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQU1DLFNBQVM7QUFDYkMsU0FBRSxFQURXLEVBQ1JDLEdBQUUsSUFETSxFQUNEQyxNQUFLLENBREosRUFDTUMsS0FBSSxDQURWO0FBRVpDLGlCQUFVLFdBRkU7QUFHWkMsa0JBQVc7QUFIQyxLQUFmO0FBS0FOLFdBQU9PLE1BQVAsR0FBZ0JQLE9BQU9HLElBQVAsR0FBWUgsT0FBT0ksR0FBbkM7O0FBRUEsUUFBTUksUUFBUVIsT0FBT0UsQ0FBUCxHQUFTRixPQUFPQyxDQUE5QjtBQUNBLFFBQU1RLFlBQVlsRCxLQUFLbUQsSUFBTCxDQUFVRixRQUFRUixPQUFPTyxNQUF6QixDQUFsQjs7QUFFQSxpQ0FBSUksTUFBTUYsU0FBTixDQUFKLEdBQXNCRyxHQUF0QixDQUEwQixVQUFDQyxDQUFELEVBQUdDLENBQUgsRUFBTzs7QUFFL0IsVUFBSUMsS0FBSzdELFNBQVNDLGFBQVQsQ0FBdUIsSUFBdkIsQ0FBVDtBQUNBMkMsZUFBU2tCLFdBQVQsQ0FBcUJELEVBQXJCO0FBQ0E7QUFDQTtBQUNBQSxTQUFHRSxTQUFILEdBQWVqQixPQUFPTSxVQUF0QjtBQUNGOztBQUVFLFVBQUlZLFVBQVVKLElBQUVkLE9BQU9PLE1BQXZCO0FBQ0E7QUFDQSxXQUFJLElBQUlPLEtBQUksQ0FBWixFQUFjQSxLQUFFZCxPQUFPSSxHQUF2QixFQUEyQlUsSUFBM0IsRUFBK0I7QUFBQSxtQ0FDckJLLENBRHFCOztBQUczQixjQUFJQyxLQUFLbEUsU0FBU0MsYUFBVCxDQUF1QixJQUF2QixDQUFUO0FBQ0EsY0FBSWtFLFFBQVFILFVBQVVKLEtBQUVkLE9BQU9HLElBQW5CLEdBQXdCZ0IsQ0FBcEM7QUFDQSxjQUFHRSxTQUFTYixLQUFaLEVBQW1COztBQUVuQjtBQUNBO0FBQ0FZLGFBQUdFLFlBQUgsQ0FBZ0IsZ0JBQWhCLEVBQW9DUixFQUFwQyxTQUF5Q0ssQ0FBekMsU0FBOENFLEtBQTlDO0FBQ0E7QUFDQU4sYUFBR0MsV0FBSCxDQUFlSSxFQUFmO0FBQ0E7QUFDQUEsYUFBR2pELEtBQUgsQ0FBU29ELGtCQUFULFVBQW1DRixRQUFNckIsT0FBT0MsQ0FBYixHQUFlLENBQUMsQ0FBbkQ7QUFDQXRELGlCQUFPQyxNQUFQLENBQWN3RSxFQUFkLEVBQWlCLEVBQUNJLFdBQVVILEtBQVgsRUFBakI7O0FBR0FELGFBQUdLLElBQUg7O0FBRUFMLGFBQUdNLGdCQUFILENBQW9CLE9BQXBCLEVBQTRCLFVBQUN6QyxDQUFELEVBQUs7O0FBRS9CLGtCQUFLRSxlQUFMLENBQXFCLEdBQXJCLEVBQXlCLFlBQVU7QUFBQTs7QUFDakMsa0JBQUl3QyxhQUFhTixRQUFNLENBQXZCO0FBQ0FNLDJCQUFXLEVBQVgsS0FBZ0JBLGFBQVcsTUFBSUEsVUFBL0I7QUFDRjtBQUNFLGtCQUFJQyxNQUFNMUUsU0FBU0MsYUFBVCxDQUF1QixLQUF2QixDQUFWO0FBQ0F5RSxrQkFBSVgsU0FBSixHQUFpQmpCLE9BQU9LLFNBQXhCO0FBQ0F1QixrQkFBSUMsTUFBSixHQUFhO0FBQUEsdUJBQUssT0FBS0MsT0FBTCxDQUFhLE1BQWIsRUFBb0IsRUFBQzdFLElBQUcyRSxHQUFKLEVBQVFKLFdBQVVILEtBQWxCLEVBQXBCLENBQUw7QUFBQSxlQUFiOztBQUVBO0FBQ0E7QUFDQTtBQUNBTyxrQkFBSUcsR0FBSixHQUFVLGdDQUF3QkosVUFBeEIsVUFBVjtBQUNBMUMsZ0JBQUUrQyxjQUFGO0FBRUQsYUFkRDtBQWlCRCxXQW5CRDtBQW5CMkI7O0FBQzdCLGFBQUksSUFBSWIsSUFBSSxDQUFaLEVBQWNBLElBQUVuQixPQUFPRyxJQUF2QixFQUE0QmdCLEdBQTVCLEVBQWdDO0FBQUEsMkJBQXhCQSxDQUF3Qjs7QUFBQSxtQ0FJWDtBQW1DcEI7QUFDRjtBQUVGLEtBdEREOztBQXdEQTtBQUNELEdBckt5QjtBQXNLekJ2RCxjQXRLeUIsMEJBc0tYOztBQUViLFNBQUtYLEVBQUwsQ0FBUWdGLFNBQVIsNkNBQ2lDLEtBQUt2RSxVQUR0QyxrSEFLb0MsS0FBS0MscUJBTHpDO0FBUUQsR0FoTHlCO0FBaUx6QlYsTUFBRztBQWpMc0IsQ0FBYixDIiwiZmlsZSI6IjYyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtFdmVudCxDYWNoZX0gZnJvbSAnLi9jb3JlJztcclxuXHJcbmltcG9ydCBTd2lwZXIgZnJvbSAnLi9zd2lwZXIubWluJztcclxuaW1wb3J0ICcuL3N3aXBlci5taW4uY3NzJztcclxuaW1wb3J0ICcuL3NtaWxlLmxlc3MnO1xyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEV2ZW50LmV4dGVuZCh7XHJcbiAgaW5pdChwcm9wcyl7XHJcbiAgICB0aGlzLl9zdXBlcigpO1xyXG5cclxuICAgIHByb3BzID0gT2JqZWN0LmFzc2lnbih7fSx7Y29udGFpbmVyOicnLHBhZGRpbmc6JzAlJyxib3R0b206Jy0yMyUnfSxwcm9wcyk7XHJcblxyXG4gICAgdGhpcy5vcHRpb25zID0gcHJvcHM7XHJcbiAgICAvL2RlYnVnZ2VyO1xyXG5cclxuICAgIHRoaXMuZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzbWlsZS1wYW5lbCcpO1xyXG4gICAgdGhpcy5fZGVsYXlfaGFuZGxlcyA9IFtdO1xyXG4gICAgdGhpcy5faXR2X2NoZWNrO1xyXG4gICAgdGhpcy51aWQgPSAoTWF0aC5yYW5kb20oKSsnJykuc2xpY2UoMik7XHJcbiAgICBcclxuICAgIHRoaXMuc3dpcGVyX2NscyA9IGBzd2lwZXItdWlkJHt0aGlzLnVpZH1gO1xyXG4gICAgdGhpcy5zd2lwZXJfcGFnaW5hdGlvbl9jbHMgPSBgc3dpcGVyLXBhZ2luYXRpb24tdWlkJHt0aGlzLnVpZH1gO1xyXG5cclxuICAgIHRoaXMuX2NyZWF0ZUNoaWxkKCk7XHJcblxyXG4gICAgJChwcm9wcy5jb250YWluZXIpLmFwcGVuZCh0aGlzLmVsKVxyXG5cclxuICAgIHRoaXMuX2NyZWF0ZVNtaWxlKCk7XHJcblxyXG4gICAgdGhpcy5fYXBwbHlTd2lwZXIoKTtcclxuICAgIFxyXG4gICAgLy90aGlzLmhpZGUoKTtcclxuXHJcbiAgICB0aGlzLl9jaGVja0RlbGF5SGFuZGxlKCk7XHJcblxyXG4gICAgcmV0dXJuIHRoaXM7XHJcblxyXG4gIH1cclxuICAsaGlkZSgpe1xyXG4gICAgdGhpcy5lbC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgLy9jb25zb2xlLmxvZyh0aGlzLmVsKTtcclxuICB9XHJcbiAgLHNob3coKXtcclxuICAgIHRoaXMuZWwuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbiAgICAvL2NvbnNvbGUubG9nKHRoaXMuZWwpO1xyXG4gIH1cclxuICAsX2FwcGx5U3dpcGVyKCl7XHJcbiAgICB2YXIge2JvdHRvbX0gPSB0aGlzLm9wdGlvbnM7XHJcbiAgICB0cnl7XHJcbiAgICAgIG5ldyBTd2lwZXIoJy4nK3RoaXMuc3dpcGVyX2Nscywge1xyXG4gICAgICAgIHBhZ2luYXRpb24gOiAnLicrdGhpcy5zd2lwZXJfcGFnaW5hdGlvbl9jbHNcclxuICAgICAgICAsb25TbGlkZUNoYW5nZUVuZDogZnVuY3Rpb24oc3dpcGVyKXtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgLy9jb25zb2xlLmxvZyhzd2lwZXIuYWN0aXZlSW5kZXgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAsb25QYWdpbmF0aW9uUmVuZGVyZWQ6ZnVuY3Rpb24oc3dpcGVyLCBwYWdpbmF0aW9uQ29udGFpbmVyKXtcclxuICAgICAgICAgIHZhciAkcGFnaW5hdGlvbiA9ICQoc3dpcGVyLm9yaWdpbmFsUGFyYW1zLnBhZ2luYXRpb24pO1xyXG4gICAgICAgICAgJHBhZ2luYXRpb24uY3NzKHsndHJhbnNpdGlvbic6J25vbmUnLCBib3R0b219KTtcclxuXHJcbiAgICAgICAgfVxyXG4gICAgICAgICxvbkluaXQ6IGZ1bmN0aW9uKHN3aXBlcil7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgLy92YXIgZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHN3aXBlci5vcmlnaW5hbFBhcmFtcy5wYWdpbmF0aW9uKTtcclxuICAgICAgICAgIHZhciAkY29udGFpbmVyID0gJChzd2lwZXIuY29udGFpbmVyKTtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgJGNvbnRhaW5lci5jc3Moe1xyXG4gICAgICAgICAgICBvdmVyZmxvdzondmlzaWJsZSdcclxuICAgICAgICAgICAgLy9vdmVyZmxvdzonaGlkZGVuJ1xyXG4gICAgICAgICAgICAvLyxvdmVyZmxvd1k6J2F1dG8nXHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG4gICAgfWNhdGNoKGUpe1xyXG4gICAgICBhbGVydChlKTtcclxuICAgIH1cclxuICAgICBcclxuICB9XHJcbiAgLF9hZGREZWxheUhhbmRsZShtcz0zMzMsaGFuZGxlKXtcclxuICAgIHRoaXMuX2RlbGF5X2hhbmRsZXMucHVzaCh7bXMsaGFuZGxlfSk7XHJcblxyXG4gIH1cclxuICAsX2NoZWNrRGVsYXlIYW5kbGUobXM9NTY2KXtcclxuICAgIHZhciB0aGF0ID0gdGhpcztcclxuICAgIDsoZnVuY3Rpb24gY2hlY2soKXtcclxuICAgICAgdGhhdC5faXR2X2NoZWNrID0gc2V0VGltZW91dChjaGVjayxtcyk7XHJcbiAgICAgIGlmKCF0aGF0Ll9kZWxheV9oYW5kbGVzLmxlbmd0aCkgcmV0dXJuO1xyXG4gICAgICB2YXIgbyA9IHRoYXQuX2RlbGF5X2hhbmRsZXMuc2hpZnQoKTtcclxuICAgICAgLy9jb25zb2xlLmxvZygnZGVsYXkjJyxoYW5kbGUpO1xyXG4gICAgICBvLmhhbmRsZS5jYWxsKHRoYXQpO1xyXG5cclxuICAgIH0pKCk7XHJcblxyXG4gIH1cclxuICAsX2NyZWF0ZVNtaWxlKCl7XHJcbiAgICB2YXIgJHdyYXBwZXIgPSB0aGlzLmVsLnF1ZXJ5U2VsZWN0b3IoJy5zd2lwZXItd3JhcHBlcicpO1xyXG5cclxuICAgIC8vZGVidWdnZXI7XHJcbiAgICAvLyBjb25zdCBDT05GSUcgPSB7XHJcbiAgICAvLyBcdFc6MzAsSDoxNTAwLENFSUw6NyxST1c6M1xyXG4gICAgLy8gXHQsQ0xTX1NNSUxFOidzbWlsZS1vdm8nXHJcbiAgICAvLyBcdCxDTFNfR1JPVVBTOidzbWlsZS1wYW5lbF9fZ3JvdXBzIHN3aXBlci1zbGlkZSdcclxuICAgIC8vIH1cclxuICAgIGNvbnN0IENPTkZJRyA9IHtcclxuICAgICAgVzozMCxIOjE1MDAsQ0VJTDo2LFJPVzozXHJcbiAgICAgICxDTFNfU01JTEU6J3NtaWxlLW92bydcclxuICAgICAgLENMU19HUk9VUFM6J3NtaWxlLXBhbmVsX19ncm91cHMgc3dpcGVyLXNsaWRlJ1xyXG4gICAgfVxyXG4gICAgQ09ORklHLkdST1VQUyA9IENPTkZJRy5DRUlMKkNPTkZJRy5ST1c7XHJcblxyXG4gICAgY29uc3QgVE9UQUwgPSBDT05GSUcuSC9DT05GSUcuVztcclxuICAgIGNvbnN0IEdST1VQX05VTSA9IE1hdGguY2VpbChUT1RBTC8gKENPTkZJRy5HUk9VUFMpICk7XHJcblxyXG4gICAgWy4uLkFycmF5KEdST1VQX05VTSldLm1hcCgodixpKT0+e1xyXG4gICAgICBcclxuICAgICAgdmFyIHVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndWwnKTtcclxuICAgICAgJHdyYXBwZXIuYXBwZW5kQ2hpbGQodWwpO1xyXG4gICAgICAvL2NvbnNvbGUubG9nKCR3cmFwcGVyKTtcclxuICAgICAgLy9kZWJ1Z2dlcjtcclxuICAgICAgdWwuY2xhc3NOYW1lID0gQ09ORklHLkNMU19HUk9VUFM7XHJcbiAgICAvL1x0dWwuc3R5bGUucGFkZGluZyA9IHBhZGRpbmc7XHJcblxyXG4gICAgICBsZXQgc3RhcnRfaSA9IGkqQ09ORklHLkdST1VQUztcclxuICAgICAgLy9jb25zb2xlLmxvZyhzdGFydF9pKTtcclxuICAgICAgZm9yKGxldCBpID0gMDtpPENPTkZJRy5ST1c7aSsrKXtcclxuICAgICAgICBmb3IobGV0IGogPSAwO2o8Q09ORklHLkNFSUw7aisrKXtcclxuXHJcbiAgICAgICAgICBsZXQgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpO1x0XHJcbiAgICAgICAgICBsZXQgY291bnQgPSBzdGFydF9pICsgaSpDT05GSUcuQ0VJTCtqO1xyXG4gICAgICAgICAgaWYoY291bnQgPj0gVE9UQUwpIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICAgIC8vNDlcclxuICAgICAgICAgIC8vY29uc29sZS5sb2coVE9UQUwsICBjb3VudCk7XHJcbiAgICAgICAgICBsaS5zZXRBdHRyaWJ1dGUoJ2RhdGEtc21pbGUtaWR4JyxgJHtpfSwke2p9LCR7Y291bnR9YCk7IFxyXG4gICAgICAgICAgLy9saS5zZXRBdHRyaWJ1dGUoJ3Vuc2VsZWN0YWJsZScsJ29uJyk7IFxyXG4gICAgICAgICAgdWwuYXBwZW5kQ2hpbGQobGkpOyBcclxuICAgICAgICAgIC8vbGkuY2xhc3NOYW1lID0gJ3NtaWxlLW92byc7XHJcbiAgICAgICAgICBsaS5zdHlsZS5iYWNrZ3JvdW5kUG9zaXRpb24gPSBgMCAke2NvdW50KkNPTkZJRy5XKi0xfXB4YDtcclxuICAgICAgICAgIE9iamVjdC5hc3NpZ24obGkse3NtaWxlX2lkeDpjb3VudH0pO1x0XHJcblxyXG5cclxuICAgICAgICAgIGxpLml0dl87XHRcclxuXHJcbiAgICAgICAgICBsaS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsKGUpPT57XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9hZGREZWxheUhhbmRsZSgzMzMsZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICB2YXIgbnVtX29mX3BpYz0gIGNvdW50KzE7XHJcbiAgICAgICAgICAgICAgbnVtX29mX3BpYzwxMCYmKG51bV9vZl9waWM9JzAnK251bV9vZl9waWMpO1xyXG4gICAgICAgICAgICAvL1x0Y29uc29sZS5sb2cobGksbnVtX29mX3BpYyk7XHJcbiAgICAgICAgICAgICAgdmFyIGltZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xyXG4gICAgICAgICAgICAgIGltZy5jbGFzc05hbWUgPSAgQ09ORklHLkNMU19TTUlMRTtcclxuICAgICAgICAgICAgICBpbWcub25sb2FkID0gKCk9PiB0aGlzLnRyaWdnZXIoJ3BpY2snLHtlbDppbWcsc21pbGVfaWR4OmNvdW50fSk7XHJcblxyXG4gICAgICAgICAgICAgIC8vQ2FjaGVbYHBvcG9fMmFkZWZlZF8ke251bV9vZl9waWN9LnBuZ2BdXHJcbiAgICAgICAgICAgICAgLy9pbWcuc3JjID0gYC4vc3JjL2NvbW1vbi9pbWcvcG9wb18yYWRlZmVkL3BvcG9fMmFkZWZlZF8ke251bV9vZl9waWN9LnBuZ2A7XHJcbiAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhDYWNoZSksQ2FjaGVbYC4vcG9wb18yYWRlZmVkXyR7bnVtX29mX3BpY30ucG5nYF07XHJcbiAgICAgICAgICAgICAgaW1nLnNyYyA9IENhY2hlW2AuL3BvcG9fMmFkZWZlZF8ke251bV9vZl9waWN9LnBuZ2BdO1xyXG4gICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuXHJcbiAgICAgICAgICB9KVxyXG5cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICB9KVxyXG5cclxuICAgIC8vNywzLDIxXHJcbiAgfVxyXG4gICxfY3JlYXRlQ2hpbGQoKXtcclxuXHJcbiAgICB0aGlzLmVsLmlubmVySFRNTCA9IGBcclxuICAgICAgPGRpdiBjbGFzcz1cInN3aXBlci1jb250YWluZXIgJHt0aGlzLnN3aXBlcl9jbHN9XCI+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cInN3aXBlci13cmFwcGVyXCI+XHJcbiAgICAgICAgXHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cInN3aXBlci1wYWdpbmF0aW9uICR7dGhpcy5zd2lwZXJfcGFnaW5hdGlvbl9jbHN9XCI+PC9kaXY+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgYDtcclxuICB9XHJcbiAgLGVsOm51bGxcclxufSk7XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9zbWlsZS5qcyJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///62\\n\");/***/},/* 63 *//***/function(module,exports,__webpack_require__){\"use strict\";eval(\"\\n\\nvar _typeof = typeof Symbol === \\\"function\\\" && typeof Symbol.iterator === \\\"symbol\\\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; };\\n\\n/**\\r\\n * Swiper 3.4.2\\r\\n * Most modern mobile touch slider and framework with hardware accelerated transitions\\r\\n * \\r\\n * http://www.idangero.us/swiper/\\r\\n * \\r\\n * Copyright 2017, Vladimir Kharlampidi\\r\\n * The iDangero.us\\r\\n * http://www.idangero.us/\\r\\n * \\r\\n * Licensed under MIT\\r\\n * \\r\\n * Released on: March 10, 2017\\r\\n */\\n!function () {\\n  \\\"use strict\\\";\\n  var e,\\n      a = function a(s, i) {\\n    function r(e) {\\n      return Math.floor(e);\\n    }function n() {\\n      var e = T.params.autoplay,\\n          a = T.slides.eq(T.activeIndex);a.attr(\\\"data-swiper-autoplay\\\") && (e = a.attr(\\\"data-swiper-autoplay\\\") || T.params.autoplay), T.autoplayTimeoutId = setTimeout(function () {\\n        T.params.loop ? (T.fixLoop(), T._slideNext(), T.emit(\\\"onAutoplay\\\", T)) : T.isEnd ? i.autoplayStopOnLast ? T.stopAutoplay() : (T._slideTo(0), T.emit(\\\"onAutoplay\\\", T)) : (T._slideNext(), T.emit(\\\"onAutoplay\\\", T));\\n      }, e);\\n    }function o(a, t) {\\n      var s = e(a.target);if (!s.is(t)) if (\\\"string\\\" == typeof t) s = s.parents(t);else if (t.nodeType) {\\n        var i;return s.parents().each(function (e, a) {\\n          a === t && (i = t);\\n        }), i ? t : void 0;\\n      }if (0 !== s.length) return s[0];\\n    }function l(e, a) {\\n      a = a || {};var t = window.MutationObserver || window.WebkitMutationObserver,\\n          s = new t(function (e) {\\n        e.forEach(function (e) {\\n          T.onResize(!0), T.emit(\\\"onObserverUpdate\\\", T, e);\\n        });\\n      });s.observe(e, { attributes: void 0 === a.attributes || a.attributes, childList: void 0 === a.childList || a.childList, characterData: void 0 === a.characterData || a.characterData }), T.observers.push(s);\\n    }function p(e) {\\n      e.originalEvent && (e = e.originalEvent);var a = e.keyCode || e.charCode;if (!T.params.allowSwipeToNext && (T.isHorizontal() && 39 === a || !T.isHorizontal() && 40 === a)) return !1;if (!T.params.allowSwipeToPrev && (T.isHorizontal() && 37 === a || !T.isHorizontal() && 38 === a)) return !1;if (!(e.shiftKey || e.altKey || e.ctrlKey || e.metaKey || document.activeElement && document.activeElement.nodeName && (\\\"input\\\" === document.activeElement.nodeName.toLowerCase() || \\\"textarea\\\" === document.activeElement.nodeName.toLowerCase()))) {\\n        if (37 === a || 39 === a || 38 === a || 40 === a) {\\n          var t = !1;if (T.container.parents(\\\".\\\" + T.params.slideClass).length > 0 && 0 === T.container.parents(\\\".\\\" + T.params.slideActiveClass).length) return;var s = { left: window.pageXOffset, top: window.pageYOffset },\\n              i = window.innerWidth,\\n              r = window.innerHeight,\\n              n = T.container.offset();T.rtl && (n.left = n.left - T.container[0].scrollLeft);for (var o = [[n.left, n.top], [n.left + T.width, n.top], [n.left, n.top + T.height], [n.left + T.width, n.top + T.height]], l = 0; l < o.length; l++) {\\n            var p = o[l];p[0] >= s.left && p[0] <= s.left + i && p[1] >= s.top && p[1] <= s.top + r && (t = !0);\\n          }if (!t) return;\\n        }T.isHorizontal() ? (37 !== a && 39 !== a || (e.preventDefault ? e.preventDefault() : e.returnValue = !1), (39 === a && !T.rtl || 37 === a && T.rtl) && T.slideNext(), (37 === a && !T.rtl || 39 === a && T.rtl) && T.slidePrev()) : (38 !== a && 40 !== a || (e.preventDefault ? e.preventDefault() : e.returnValue = !1), 40 === a && T.slideNext(), 38 === a && T.slidePrev()), T.emit(\\\"onKeyPress\\\", T, a);\\n      }\\n    }function d(e) {\\n      var a = 0,\\n          t = 0,\\n          s = 0,\\n          i = 0;return \\\"detail\\\" in e && (t = e.detail), \\\"wheelDelta\\\" in e && (t = -e.wheelDelta / 120), \\\"wheelDeltaY\\\" in e && (t = -e.wheelDeltaY / 120), \\\"wheelDeltaX\\\" in e && (a = -e.wheelDeltaX / 120), \\\"axis\\\" in e && e.axis === e.HORIZONTAL_AXIS && (a = t, t = 0), s = 10 * a, i = 10 * t, \\\"deltaY\\\" in e && (i = e.deltaY), \\\"deltaX\\\" in e && (s = e.deltaX), (s || i) && e.deltaMode && (1 === e.deltaMode ? (s *= 40, i *= 40) : (s *= 800, i *= 800)), s && !a && (a = s < 1 ? -1 : 1), i && !t && (t = i < 1 ? -1 : 1), { spinX: a, spinY: t, pixelX: s, pixelY: i };\\n    }function u(e) {\\n      e.originalEvent && (e = e.originalEvent);var a = 0,\\n          t = T.rtl ? -1 : 1,\\n          s = d(e);if (T.params.mousewheelForceToAxis) {\\n        if (T.isHorizontal()) {\\n          if (!(Math.abs(s.pixelX) > Math.abs(s.pixelY))) return;a = s.pixelX * t;\\n        } else {\\n          if (!(Math.abs(s.pixelY) > Math.abs(s.pixelX))) return;a = s.pixelY;\\n        }\\n      } else a = Math.abs(s.pixelX) > Math.abs(s.pixelY) ? -s.pixelX * t : -s.pixelY;if (0 !== a) {\\n        if (T.params.mousewheelInvert && (a = -a), T.params.freeMode) {\\n          var i = T.getWrapperTranslate() + a * T.params.mousewheelSensitivity,\\n              r = T.isBeginning,\\n              n = T.isEnd;if (i >= T.minTranslate() && (i = T.minTranslate()), i <= T.maxTranslate() && (i = T.maxTranslate()), T.setWrapperTransition(0), T.setWrapperTranslate(i), T.updateProgress(), T.updateActiveIndex(), (!r && T.isBeginning || !n && T.isEnd) && T.updateClasses(), T.params.freeModeSticky ? (clearTimeout(T.mousewheel.timeout), T.mousewheel.timeout = setTimeout(function () {\\n            T.slideReset();\\n          }, 300)) : T.params.lazyLoading && T.lazy && T.lazy.load(), T.emit(\\\"onScroll\\\", T, e), T.params.autoplay && T.params.autoplayDisableOnInteraction && T.stopAutoplay(), 0 === i || i === T.maxTranslate()) return;\\n        } else {\\n          if (new window.Date().getTime() - T.mousewheel.lastScrollTime > 60) if (a < 0) {\\n            if (T.isEnd && !T.params.loop || T.animating) {\\n              if (T.params.mousewheelReleaseOnEdges) return !0;\\n            } else T.slideNext(), T.emit(\\\"onScroll\\\", T, e);\\n          } else if (T.isBeginning && !T.params.loop || T.animating) {\\n            if (T.params.mousewheelReleaseOnEdges) return !0;\\n          } else T.slidePrev(), T.emit(\\\"onScroll\\\", T, e);T.mousewheel.lastScrollTime = new window.Date().getTime();\\n        }return e.preventDefault ? e.preventDefault() : e.returnValue = !1, !1;\\n      }\\n    }function c(a, t) {\\n      a = e(a);var s,\\n          i,\\n          r,\\n          n = T.rtl ? -1 : 1;s = a.attr(\\\"data-swiper-parallax\\\") || \\\"0\\\", i = a.attr(\\\"data-swiper-parallax-x\\\"), r = a.attr(\\\"data-swiper-parallax-y\\\"), i || r ? (i = i || \\\"0\\\", r = r || \\\"0\\\") : T.isHorizontal() ? (i = s, r = \\\"0\\\") : (r = s, i = \\\"0\\\"), i = i.indexOf(\\\"%\\\") >= 0 ? parseInt(i, 10) * t * n + \\\"%\\\" : i * t * n + \\\"px\\\", r = r.indexOf(\\\"%\\\") >= 0 ? parseInt(r, 10) * t + \\\"%\\\" : r * t + \\\"px\\\", a.transform(\\\"translate3d(\\\" + i + \\\", \\\" + r + \\\",0px)\\\");\\n    }function m(e) {\\n      return 0 !== e.indexOf(\\\"on\\\") && (e = e[0] !== e[0].toUpperCase() ? \\\"on\\\" + e[0].toUpperCase() + e.substring(1) : \\\"on\\\" + e), e;\\n    }if (!(this instanceof a)) return new a(s, i);var h = { direction: \\\"horizontal\\\", touchEventsTarget: \\\"container\\\", initialSlide: 0, speed: 300, autoplay: !1, autoplayDisableOnInteraction: !0, autoplayStopOnLast: !1, iOSEdgeSwipeDetection: !1, iOSEdgeSwipeThreshold: 20, freeMode: !1, freeModeMomentum: !0, freeModeMomentumRatio: 1, freeModeMomentumBounce: !0, freeModeMomentumBounceRatio: 1, freeModeMomentumVelocityRatio: 1, freeModeSticky: !1, freeModeMinimumVelocity: .02, autoHeight: !1, setWrapperSize: !1, virtualTranslate: !1, effect: \\\"slide\\\", coverflow: { rotate: 50, stretch: 0, depth: 100, modifier: 1, slideShadows: !0 }, flip: { slideShadows: !0, limitRotation: !0 }, cube: { slideShadows: !0, shadow: !0, shadowOffset: 20, shadowScale: .94 }, fade: { crossFade: !1 }, parallax: !1, zoom: !1, zoomMax: 3, zoomMin: 1, zoomToggle: !0, scrollbar: null, scrollbarHide: !0, scrollbarDraggable: !1, scrollbarSnapOnRelease: !1, keyboardControl: !1, mousewheelControl: !1, mousewheelReleaseOnEdges: !1, mousewheelInvert: !1, mousewheelForceToAxis: !1, mousewheelSensitivity: 1, mousewheelEventsTarged: \\\"container\\\", hashnav: !1, hashnavWatchState: !1, history: !1, replaceState: !1, breakpoints: void 0, spaceBetween: 0, slidesPerView: 1, slidesPerColumn: 1, slidesPerColumnFill: \\\"column\\\", slidesPerGroup: 1, centeredSlides: !1, slidesOffsetBefore: 0, slidesOffsetAfter: 0, roundLengths: !1, touchRatio: 1, touchAngle: 45, simulateTouch: !0, shortSwipes: !0, longSwipes: !0, longSwipesRatio: .5, longSwipesMs: 300, followFinger: !0, onlyExternal: !1, threshold: 0, touchMoveStopPropagation: !0, touchReleaseOnEdges: !1, uniqueNavElements: !0, pagination: null, paginationElement: \\\"span\\\", paginationClickable: !1, paginationHide: !1, paginationBulletRender: null, paginationProgressRender: null, paginationFractionRender: null, paginationCustomRender: null, paginationType: \\\"bullets\\\", resistance: !0, resistanceRatio: .85, nextButton: null, prevButton: null, watchSlidesProgress: !1, watchSlidesVisibility: !1, grabCursor: !1, preventClicks: !0, preventClicksPropagation: !0, slideToClickedSlide: !1, lazyLoading: !1, lazyLoadingInPrevNext: !1, lazyLoadingInPrevNextAmount: 1, lazyLoadingOnTransitionStart: !1, preloadImages: !0, updateOnImagesReady: !0, loop: !1, loopAdditionalSlides: 0, loopedSlides: null, control: void 0, controlInverse: !1, controlBy: \\\"slide\\\", normalizeSlideIndex: !0, allowSwipeToPrev: !0, allowSwipeToNext: !0, swipeHandler: null, noSwiping: !0, noSwipingClass: \\\"swiper-no-swiping\\\", passiveListeners: !0, containerModifierClass: \\\"swiper-container-\\\", slideClass: \\\"swiper-slide\\\", slideActiveClass: \\\"swiper-slide-active\\\", slideDuplicateActiveClass: \\\"swiper-slide-duplicate-active\\\", slideVisibleClass: \\\"swiper-slide-visible\\\", slideDuplicateClass: \\\"swiper-slide-duplicate\\\", slideNextClass: \\\"swiper-slide-next\\\", slideDuplicateNextClass: \\\"swiper-slide-duplicate-next\\\", slidePrevClass: \\\"swiper-slide-prev\\\", slideDuplicatePrevClass: \\\"swiper-slide-duplicate-prev\\\", wrapperClass: \\\"swiper-wrapper\\\", bulletClass: \\\"swiper-pagination-bullet\\\", bulletActiveClass: \\\"swiper-pagination-bullet-active\\\", buttonDisabledClass: \\\"swiper-button-disabled\\\", paginationCurrentClass: \\\"swiper-pagination-current\\\", paginationTotalClass: \\\"swiper-pagination-total\\\", paginationHiddenClass: \\\"swiper-pagination-hidden\\\", paginationProgressbarClass: \\\"swiper-pagination-progressbar\\\", paginationClickableClass: \\\"swiper-pagination-clickable\\\", paginationModifierClass: \\\"swiper-pagination-\\\", lazyLoadingClass: \\\"swiper-lazy\\\", lazyStatusLoadingClass: \\\"swiper-lazy-loading\\\", lazyStatusLoadedClass: \\\"swiper-lazy-loaded\\\", lazyPreloaderClass: \\\"swiper-lazy-preloader\\\", notificationClass: \\\"swiper-notification\\\", preloaderClass: \\\"preloader\\\", zoomContainerClass: \\\"swiper-zoom-container\\\", observer: !1, observeParents: !1, a11y: !1, prevSlideMessage: \\\"Previous slide\\\", nextSlideMessage: \\\"Next slide\\\", firstSlideMessage: \\\"This is the first slide\\\", lastSlideMessage: \\\"This is the last slide\\\", paginationBulletMessage: \\\"Go to slide {{index}}\\\", runCallbacksOnInit: !0 },\\n        g = i && i.virtualTranslate;i = i || {};var f = {};for (var v in i) {\\n      if (\\\"object\\\" != _typeof(i[v]) || null === i[v] || i[v].nodeType || i[v] === window || i[v] === document || void 0 !== t && i[v] instanceof t || \\\"undefined\\\" != typeof jQuery && i[v] instanceof jQuery) f[v] = i[v];else {\\n        f[v] = {};for (var w in i[v]) {\\n          f[v][w] = i[v][w];\\n        }\\n      }\\n    }for (var y in h) {\\n      if (void 0 === i[y]) i[y] = h[y];else if (\\\"object\\\" == _typeof(i[y])) for (var x in h[y]) {\\n        void 0 === i[y][x] && (i[y][x] = h[y][x]);\\n      }\\n    }var T = this;if (T.params = i, T.originalParams = f, T.classNames = [], void 0 !== e && void 0 !== t && (e = t), (void 0 !== e || (e = void 0 === t ? window.Dom7 || window.Zepto || window.jQuery : t)) && (T.$ = e, T.currentBreakpoint = void 0, T.getActiveBreakpoint = function () {\\n      if (!T.params.breakpoints) return !1;var e,\\n          a = !1,\\n          t = [];for (e in T.params.breakpoints) {\\n        T.params.breakpoints.hasOwnProperty(e) && t.push(e);\\n      }t.sort(function (e, a) {\\n        return parseInt(e, 10) > parseInt(a, 10);\\n      });for (var s = 0; s < t.length; s++) {\\n        (e = t[s]) >= window.innerWidth && !a && (a = e);\\n      }return a || \\\"max\\\";\\n    }, T.setBreakpoint = function () {\\n      var e = T.getActiveBreakpoint();if (e && T.currentBreakpoint !== e) {\\n        var a = e in T.params.breakpoints ? T.params.breakpoints[e] : T.originalParams,\\n            t = T.params.loop && a.slidesPerView !== T.params.slidesPerView;for (var s in a) {\\n          T.params[s] = a[s];\\n        }T.currentBreakpoint = e, t && T.destroyLoop && T.reLoop(!0);\\n      }\\n    }, T.params.breakpoints && T.setBreakpoint(), T.container = e(s), 0 !== T.container.length)) {\\n      if (T.container.length > 1) {\\n        var b = [];return T.container.each(function () {\\n          b.push(new a(this, i));\\n        }), b;\\n      }T.container[0].swiper = T, T.container.data(\\\"swiper\\\", T), T.classNames.push(T.params.containerModifierClass + T.params.direction), T.params.freeMode && T.classNames.push(T.params.containerModifierClass + \\\"free-mode\\\"), T.support.flexbox || (T.classNames.push(T.params.containerModifierClass + \\\"no-flexbox\\\"), T.params.slidesPerColumn = 1), T.params.autoHeight && T.classNames.push(T.params.containerModifierClass + \\\"autoheight\\\"), (T.params.parallax || T.params.watchSlidesVisibility) && (T.params.watchSlidesProgress = !0), T.params.touchReleaseOnEdges && (T.params.resistanceRatio = 0), [\\\"cube\\\", \\\"coverflow\\\", \\\"flip\\\"].indexOf(T.params.effect) >= 0 && (T.support.transforms3d ? (T.params.watchSlidesProgress = !0, T.classNames.push(T.params.containerModifierClass + \\\"3d\\\")) : T.params.effect = \\\"slide\\\"), \\\"slide\\\" !== T.params.effect && T.classNames.push(T.params.containerModifierClass + T.params.effect), \\\"cube\\\" === T.params.effect && (T.params.resistanceRatio = 0, T.params.slidesPerView = 1, T.params.slidesPerColumn = 1, T.params.slidesPerGroup = 1, T.params.centeredSlides = !1, T.params.spaceBetween = 0, T.params.virtualTranslate = !0), \\\"fade\\\" !== T.params.effect && \\\"flip\\\" !== T.params.effect || (T.params.slidesPerView = 1, T.params.slidesPerColumn = 1, T.params.slidesPerGroup = 1, T.params.watchSlidesProgress = !0, T.params.spaceBetween = 0, void 0 === g && (T.params.virtualTranslate = !0)), T.params.grabCursor && T.support.touch && (T.params.grabCursor = !1), T.wrapper = T.container.children(\\\".\\\" + T.params.wrapperClass), T.params.pagination && (T.paginationContainer = e(T.params.pagination), T.params.uniqueNavElements && \\\"string\\\" == typeof T.params.pagination && T.paginationContainer.length > 1 && 1 === T.container.find(T.params.pagination).length && (T.paginationContainer = T.container.find(T.params.pagination)), \\\"bullets\\\" === T.params.paginationType && T.params.paginationClickable ? T.paginationContainer.addClass(T.params.paginationModifierClass + \\\"clickable\\\") : T.params.paginationClickable = !1, T.paginationContainer.addClass(T.params.paginationModifierClass + T.params.paginationType)), (T.params.nextButton || T.params.prevButton) && (T.params.nextButton && (T.nextButton = e(T.params.nextButton), T.params.uniqueNavElements && \\\"string\\\" == typeof T.params.nextButton && T.nextButton.length > 1 && 1 === T.container.find(T.params.nextButton).length && (T.nextButton = T.container.find(T.params.nextButton))), T.params.prevButton && (T.prevButton = e(T.params.prevButton), T.params.uniqueNavElements && \\\"string\\\" == typeof T.params.prevButton && T.prevButton.length > 1 && 1 === T.container.find(T.params.prevButton).length && (T.prevButton = T.container.find(T.params.prevButton)))), T.isHorizontal = function () {\\n        return \\\"horizontal\\\" === T.params.direction;\\n      }, T.rtl = T.isHorizontal() && (\\\"rtl\\\" === T.container[0].dir.toLowerCase() || \\\"rtl\\\" === T.container.css(\\\"direction\\\")), T.rtl && T.classNames.push(T.params.containerModifierClass + \\\"rtl\\\"), T.rtl && (T.wrongRTL = \\\"-webkit-box\\\" === T.wrapper.css(\\\"display\\\")), T.params.slidesPerColumn > 1 && T.classNames.push(T.params.containerModifierClass + \\\"multirow\\\"), T.device.android && T.classNames.push(T.params.containerModifierClass + \\\"android\\\"), T.container.addClass(T.classNames.join(\\\" \\\")), T.translate = 0, T.progress = 0, T.velocity = 0, T.lockSwipeToNext = function () {\\n        T.params.allowSwipeToNext = !1, T.params.allowSwipeToPrev === !1 && T.params.grabCursor && T.unsetGrabCursor();\\n      }, T.lockSwipeToPrev = function () {\\n        T.params.allowSwipeToPrev = !1, T.params.allowSwipeToNext === !1 && T.params.grabCursor && T.unsetGrabCursor();\\n      }, T.lockSwipes = function () {\\n        T.params.allowSwipeToNext = T.params.allowSwipeToPrev = !1, T.params.grabCursor && T.unsetGrabCursor();\\n      }, T.unlockSwipeToNext = function () {\\n        T.params.allowSwipeToNext = !0, T.params.allowSwipeToPrev === !0 && T.params.grabCursor && T.setGrabCursor();\\n      }, T.unlockSwipeToPrev = function () {\\n        T.params.allowSwipeToPrev = !0, T.params.allowSwipeToNext === !0 && T.params.grabCursor && T.setGrabCursor();\\n      }, T.unlockSwipes = function () {\\n        T.params.allowSwipeToNext = T.params.allowSwipeToPrev = !0, T.params.grabCursor && T.setGrabCursor();\\n      }, T.setGrabCursor = function (e) {\\n        T.container[0].style.cursor = \\\"move\\\", T.container[0].style.cursor = e ? \\\"-webkit-grabbing\\\" : \\\"-webkit-grab\\\", T.container[0].style.cursor = e ? \\\"-moz-grabbin\\\" : \\\"-moz-grab\\\", T.container[0].style.cursor = e ? \\\"grabbing\\\" : \\\"grab\\\";\\n      }, T.unsetGrabCursor = function () {\\n        T.container[0].style.cursor = \\\"\\\";\\n      }, T.params.grabCursor && T.setGrabCursor(), T.imagesToLoad = [], T.imagesLoaded = 0, T.loadImage = function (e, a, t, s, i, r) {\\n        function n() {\\n          r && r();\\n        }var o;e.complete && i ? n() : a ? (o = new window.Image(), o.onload = n, o.onerror = n, s && (o.sizes = s), t && (o.srcset = t), a && (o.src = a)) : n();\\n      }, T.preloadImages = function () {\\n        function e() {\\n          void 0 !== T && null !== T && T && (void 0 !== T.imagesLoaded && T.imagesLoaded++, T.imagesLoaded === T.imagesToLoad.length && (T.params.updateOnImagesReady && T.update(), T.emit(\\\"onImagesReady\\\", T)));\\n        }T.imagesToLoad = T.container.find(\\\"img\\\");for (var a = 0; a < T.imagesToLoad.length; a++) {\\n          T.loadImage(T.imagesToLoad[a], T.imagesToLoad[a].currentSrc || T.imagesToLoad[a].getAttribute(\\\"src\\\"), T.imagesToLoad[a].srcset || T.imagesToLoad[a].getAttribute(\\\"srcset\\\"), T.imagesToLoad[a].sizes || T.imagesToLoad[a].getAttribute(\\\"sizes\\\"), !0, e);\\n        }\\n      }, T.autoplayTimeoutId = void 0, T.autoplaying = !1, T.autoplayPaused = !1, T.startAutoplay = function () {\\n        return void 0 === T.autoplayTimeoutId && !!T.params.autoplay && !T.autoplaying && (T.autoplaying = !0, T.emit(\\\"onAutoplayStart\\\", T), void n());\\n      }, T.stopAutoplay = function (e) {\\n        T.autoplayTimeoutId && (T.autoplayTimeoutId && clearTimeout(T.autoplayTimeoutId), T.autoplaying = !1, T.autoplayTimeoutId = void 0, T.emit(\\\"onAutoplayStop\\\", T));\\n      }, T.pauseAutoplay = function (e) {\\n        T.autoplayPaused || (T.autoplayTimeoutId && clearTimeout(T.autoplayTimeoutId), T.autoplayPaused = !0, 0 === e ? (T.autoplayPaused = !1, n()) : T.wrapper.transitionEnd(function () {\\n          T && (T.autoplayPaused = !1, T.autoplaying ? n() : T.stopAutoplay());\\n        }));\\n      }, T.minTranslate = function () {\\n        return -T.snapGrid[0];\\n      }, T.maxTranslate = function () {\\n        return -T.snapGrid[T.snapGrid.length - 1];\\n      }, T.updateAutoHeight = function () {\\n        var e,\\n            a = [],\\n            t = 0;if (\\\"auto\\\" !== T.params.slidesPerView && T.params.slidesPerView > 1) for (e = 0; e < Math.ceil(T.params.slidesPerView); e++) {\\n          var s = T.activeIndex + e;if (s > T.slides.length) break;a.push(T.slides.eq(s)[0]);\\n        } else a.push(T.slides.eq(T.activeIndex)[0]);for (e = 0; e < a.length; e++) {\\n          if (void 0 !== a[e]) {\\n            var i = a[e].offsetHeight;t = i > t ? i : t;\\n          }\\n        }t && T.wrapper.css(\\\"height\\\", t + \\\"px\\\");\\n      }, T.updateContainerSize = function () {\\n        var e, a;e = void 0 !== T.params.width ? T.params.width : T.container[0].clientWidth, a = void 0 !== T.params.height ? T.params.height : T.container[0].clientHeight, 0 === e && T.isHorizontal() || 0 === a && !T.isHorizontal() || (e = e - parseInt(T.container.css(\\\"padding-left\\\"), 10) - parseInt(T.container.css(\\\"padding-right\\\"), 10), a = a - parseInt(T.container.css(\\\"padding-top\\\"), 10) - parseInt(T.container.css(\\\"padding-bottom\\\"), 10), T.width = e, T.height = a, T.size = T.isHorizontal() ? T.width : T.height);\\n      }, T.updateSlidesSize = function () {\\n        T.slides = T.wrapper.children(\\\".\\\" + T.params.slideClass), T.snapGrid = [], T.slidesGrid = [], T.slidesSizesGrid = [];var e,\\n            a = T.params.spaceBetween,\\n            t = -T.params.slidesOffsetBefore,\\n            s = 0,\\n            i = 0;if (void 0 !== T.size) {\\n          \\\"string\\\" == typeof a && a.indexOf(\\\"%\\\") >= 0 && (a = parseFloat(a.replace(\\\"%\\\", \\\"\\\")) / 100 * T.size), T.virtualSize = -a, T.rtl ? T.slides.css({ marginLeft: \\\"\\\", marginTop: \\\"\\\" }) : T.slides.css({ marginRight: \\\"\\\", marginBottom: \\\"\\\" });var n;T.params.slidesPerColumn > 1 && (n = Math.floor(T.slides.length / T.params.slidesPerColumn) === T.slides.length / T.params.slidesPerColumn ? T.slides.length : Math.ceil(T.slides.length / T.params.slidesPerColumn) * T.params.slidesPerColumn, \\\"auto\\\" !== T.params.slidesPerView && \\\"row\\\" === T.params.slidesPerColumnFill && (n = Math.max(n, T.params.slidesPerView * T.params.slidesPerColumn)));var o,\\n              l = T.params.slidesPerColumn,\\n              p = n / l,\\n              d = p - (T.params.slidesPerColumn * p - T.slides.length);for (e = 0; e < T.slides.length; e++) {\\n            o = 0;var u = T.slides.eq(e);if (T.params.slidesPerColumn > 1) {\\n              var c, m, h;\\\"column\\\" === T.params.slidesPerColumnFill ? (m = Math.floor(e / l), h = e - m * l, (m > d || m === d && h === l - 1) && ++h >= l && (h = 0, m++), c = m + h * n / l, u.css({ \\\"-webkit-box-ordinal-group\\\": c, \\\"-moz-box-ordinal-group\\\": c, \\\"-ms-flex-order\\\": c, \\\"-webkit-order\\\": c, order: c })) : (h = Math.floor(e / p), m = e - h * p), u.css(\\\"margin-\\\" + (T.isHorizontal() ? \\\"top\\\" : \\\"left\\\"), 0 !== h && T.params.spaceBetween && T.params.spaceBetween + \\\"px\\\").attr(\\\"data-swiper-column\\\", m).attr(\\\"data-swiper-row\\\", h);\\n            }\\\"none\\\" !== u.css(\\\"display\\\") && (\\\"auto\\\" === T.params.slidesPerView ? (o = T.isHorizontal() ? u.outerWidth(!0) : u.outerHeight(!0), T.params.roundLengths && (o = r(o))) : (o = (T.size - (T.params.slidesPerView - 1) * a) / T.params.slidesPerView, T.params.roundLengths && (o = r(o)), T.isHorizontal() ? T.slides[e].style.width = o + \\\"px\\\" : T.slides[e].style.height = o + \\\"px\\\"), T.slides[e].swiperSlideSize = o, T.slidesSizesGrid.push(o), T.params.centeredSlides ? (t = t + o / 2 + s / 2 + a, 0 === s && 0 !== e && (t = t - T.size / 2 - a), 0 === e && (t = t - T.size / 2 - a), Math.abs(t) < .001 && (t = 0), i % T.params.slidesPerGroup == 0 && T.snapGrid.push(t), T.slidesGrid.push(t)) : (i % T.params.slidesPerGroup == 0 && T.snapGrid.push(t), T.slidesGrid.push(t), t = t + o + a), T.virtualSize += o + a, s = o, i++);\\n          }T.virtualSize = Math.max(T.virtualSize, T.size) + T.params.slidesOffsetAfter;var g;if (T.rtl && T.wrongRTL && (\\\"slide\\\" === T.params.effect || \\\"coverflow\\\" === T.params.effect) && T.wrapper.css({ width: T.virtualSize + T.params.spaceBetween + \\\"px\\\" }), T.support.flexbox && !T.params.setWrapperSize || (T.isHorizontal() ? T.wrapper.css({ width: T.virtualSize + T.params.spaceBetween + \\\"px\\\" }) : T.wrapper.css({ height: T.virtualSize + T.params.spaceBetween + \\\"px\\\" })), T.params.slidesPerColumn > 1 && (T.virtualSize = (o + T.params.spaceBetween) * n, T.virtualSize = Math.ceil(T.virtualSize / T.params.slidesPerColumn) - T.params.spaceBetween, T.isHorizontal() ? T.wrapper.css({ width: T.virtualSize + T.params.spaceBetween + \\\"px\\\" }) : T.wrapper.css({ height: T.virtualSize + T.params.spaceBetween + \\\"px\\\" }), T.params.centeredSlides)) {\\n            for (g = [], e = 0; e < T.snapGrid.length; e++) {\\n              T.snapGrid[e] < T.virtualSize + T.snapGrid[0] && g.push(T.snapGrid[e]);\\n            }T.snapGrid = g;\\n          }if (!T.params.centeredSlides) {\\n            for (g = [], e = 0; e < T.snapGrid.length; e++) {\\n              T.snapGrid[e] <= T.virtualSize - T.size && g.push(T.snapGrid[e]);\\n            }T.snapGrid = g, Math.floor(T.virtualSize - T.size) - Math.floor(T.snapGrid[T.snapGrid.length - 1]) > 1 && T.snapGrid.push(T.virtualSize - T.size);\\n          }0 === T.snapGrid.length && (T.snapGrid = [0]), 0 !== T.params.spaceBetween && (T.isHorizontal() ? T.rtl ? T.slides.css({ marginLeft: a + \\\"px\\\" }) : T.slides.css({ marginRight: a + \\\"px\\\" }) : T.slides.css({ marginBottom: a + \\\"px\\\" })), T.params.watchSlidesProgress && T.updateSlidesOffset();\\n        }\\n      }, T.updateSlidesOffset = function () {\\n        for (var e = 0; e < T.slides.length; e++) {\\n          T.slides[e].swiperSlideOffset = T.isHorizontal() ? T.slides[e].offsetLeft : T.slides[e].offsetTop;\\n        }\\n      }, T.currentSlidesPerView = function () {\\n        var e,\\n            a,\\n            t = 1;if (T.params.centeredSlides) {\\n          var s,\\n              i = T.slides[T.activeIndex].swiperSlideSize;for (e = T.activeIndex + 1; e < T.slides.length; e++) {\\n            T.slides[e] && !s && (i += T.slides[e].swiperSlideSize, t++, i > T.size && (s = !0));\\n          }for (a = T.activeIndex - 1; a >= 0; a--) {\\n            T.slides[a] && !s && (i += T.slides[a].swiperSlideSize, t++, i > T.size && (s = !0));\\n          }\\n        } else for (e = T.activeIndex + 1; e < T.slides.length; e++) {\\n          T.slidesGrid[e] - T.slidesGrid[T.activeIndex] < T.size && t++;\\n        }return t;\\n      }, T.updateSlidesProgress = function (e) {\\n        if (void 0 === e && (e = T.translate || 0), 0 !== T.slides.length) {\\n          void 0 === T.slides[0].swiperSlideOffset && T.updateSlidesOffset();var a = -e;T.rtl && (a = e), T.slides.removeClass(T.params.slideVisibleClass);for (var t = 0; t < T.slides.length; t++) {\\n            var s = T.slides[t],\\n                i = (a + (T.params.centeredSlides ? T.minTranslate() : 0) - s.swiperSlideOffset) / (s.swiperSlideSize + T.params.spaceBetween);if (T.params.watchSlidesVisibility) {\\n              var r = -(a - s.swiperSlideOffset),\\n                  n = r + T.slidesSizesGrid[t];(r >= 0 && r < T.size || n > 0 && n <= T.size || r <= 0 && n >= T.size) && T.slides.eq(t).addClass(T.params.slideVisibleClass);\\n            }s.progress = T.rtl ? -i : i;\\n          }\\n        }\\n      }, T.updateProgress = function (e) {\\n        void 0 === e && (e = T.translate || 0);var a = T.maxTranslate() - T.minTranslate(),\\n            t = T.isBeginning,\\n            s = T.isEnd;0 === a ? (T.progress = 0, T.isBeginning = T.isEnd = !0) : (T.progress = (e - T.minTranslate()) / a, T.isBeginning = T.progress <= 0, T.isEnd = T.progress >= 1), T.isBeginning && !t && T.emit(\\\"onReachBeginning\\\", T), T.isEnd && !s && T.emit(\\\"onReachEnd\\\", T), T.params.watchSlidesProgress && T.updateSlidesProgress(e), T.emit(\\\"onProgress\\\", T, T.progress);\\n      }, T.updateActiveIndex = function () {\\n        var e,\\n            a,\\n            t,\\n            s = T.rtl ? T.translate : -T.translate;for (a = 0; a < T.slidesGrid.length; a++) {\\n          void 0 !== T.slidesGrid[a + 1] ? s >= T.slidesGrid[a] && s < T.slidesGrid[a + 1] - (T.slidesGrid[a + 1] - T.slidesGrid[a]) / 2 ? e = a : s >= T.slidesGrid[a] && s < T.slidesGrid[a + 1] && (e = a + 1) : s >= T.slidesGrid[a] && (e = a);\\n        }T.params.normalizeSlideIndex && (e < 0 || void 0 === e) && (e = 0), t = Math.floor(e / T.params.slidesPerGroup), t >= T.snapGrid.length && (t = T.snapGrid.length - 1), e !== T.activeIndex && (T.snapIndex = t, T.previousIndex = T.activeIndex, T.activeIndex = e, T.updateClasses(), T.updateRealIndex());\\n      }, T.updateRealIndex = function () {\\n        T.realIndex = parseInt(T.slides.eq(T.activeIndex).attr(\\\"data-swiper-slide-index\\\") || T.activeIndex, 10);\\n      }, T.updateClasses = function () {\\n        T.slides.removeClass(T.params.slideActiveClass + \\\" \\\" + T.params.slideNextClass + \\\" \\\" + T.params.slidePrevClass + \\\" \\\" + T.params.slideDuplicateActiveClass + \\\" \\\" + T.params.slideDuplicateNextClass + \\\" \\\" + T.params.slideDuplicatePrevClass);var a = T.slides.eq(T.activeIndex);a.addClass(T.params.slideActiveClass), i.loop && (a.hasClass(T.params.slideDuplicateClass) ? T.wrapper.children(\\\".\\\" + T.params.slideClass + \\\":not(.\\\" + T.params.slideDuplicateClass + ')[data-swiper-slide-index=\\\"' + T.realIndex + '\\\"]').addClass(T.params.slideDuplicateActiveClass) : T.wrapper.children(\\\".\\\" + T.params.slideClass + \\\".\\\" + T.params.slideDuplicateClass + '[data-swiper-slide-index=\\\"' + T.realIndex + '\\\"]').addClass(T.params.slideDuplicateActiveClass));var t = a.next(\\\".\\\" + T.params.slideClass).addClass(T.params.slideNextClass);T.params.loop && 0 === t.length && (t = T.slides.eq(0), t.addClass(T.params.slideNextClass));var s = a.prev(\\\".\\\" + T.params.slideClass).addClass(T.params.slidePrevClass);if (T.params.loop && 0 === s.length && (s = T.slides.eq(-1), s.addClass(T.params.slidePrevClass)), i.loop && (t.hasClass(T.params.slideDuplicateClass) ? T.wrapper.children(\\\".\\\" + T.params.slideClass + \\\":not(.\\\" + T.params.slideDuplicateClass + ')[data-swiper-slide-index=\\\"' + t.attr(\\\"data-swiper-slide-index\\\") + '\\\"]').addClass(T.params.slideDuplicateNextClass) : T.wrapper.children(\\\".\\\" + T.params.slideClass + \\\".\\\" + T.params.slideDuplicateClass + '[data-swiper-slide-index=\\\"' + t.attr(\\\"data-swiper-slide-index\\\") + '\\\"]').addClass(T.params.slideDuplicateNextClass), s.hasClass(T.params.slideDuplicateClass) ? T.wrapper.children(\\\".\\\" + T.params.slideClass + \\\":not(.\\\" + T.params.slideDuplicateClass + ')[data-swiper-slide-index=\\\"' + s.attr(\\\"data-swiper-slide-index\\\") + '\\\"]').addClass(T.params.slideDuplicatePrevClass) : T.wrapper.children(\\\".\\\" + T.params.slideClass + \\\".\\\" + T.params.slideDuplicateClass + '[data-swiper-slide-index=\\\"' + s.attr(\\\"data-swiper-slide-index\\\") + '\\\"]').addClass(T.params.slideDuplicatePrevClass)), T.paginationContainer && T.paginationContainer.length > 0) {\\n          var r,\\n              n = T.params.loop ? Math.ceil((T.slides.length - 2 * T.loopedSlides) / T.params.slidesPerGroup) : T.snapGrid.length;if (T.params.loop ? (r = Math.ceil((T.activeIndex - T.loopedSlides) / T.params.slidesPerGroup), r > T.slides.length - 1 - 2 * T.loopedSlides && (r -= T.slides.length - 2 * T.loopedSlides), r > n - 1 && (r -= n), r < 0 && \\\"bullets\\\" !== T.params.paginationType && (r = n + r)) : r = void 0 !== T.snapIndex ? T.snapIndex : T.activeIndex || 0, \\\"bullets\\\" === T.params.paginationType && T.bullets && T.bullets.length > 0 && (T.bullets.removeClass(T.params.bulletActiveClass), T.paginationContainer.length > 1 ? T.bullets.each(function () {\\n            e(this).index() === r && e(this).addClass(T.params.bulletActiveClass);\\n          }) : T.bullets.eq(r).addClass(T.params.bulletActiveClass)), \\\"fraction\\\" === T.params.paginationType && (T.paginationContainer.find(\\\".\\\" + T.params.paginationCurrentClass).text(r + 1), T.paginationContainer.find(\\\".\\\" + T.params.paginationTotalClass).text(n)), \\\"progress\\\" === T.params.paginationType) {\\n            var o = (r + 1) / n,\\n                l = o,\\n                p = 1;T.isHorizontal() || (p = o, l = 1), T.paginationContainer.find(\\\".\\\" + T.params.paginationProgressbarClass).transform(\\\"translate3d(0,0,0) scaleX(\\\" + l + \\\") scaleY(\\\" + p + \\\")\\\").transition(T.params.speed);\\n          }\\\"custom\\\" === T.params.paginationType && T.params.paginationCustomRender && (T.paginationContainer.html(T.params.paginationCustomRender(T, r + 1, n)), T.emit(\\\"onPaginationRendered\\\", T, T.paginationContainer[0]));\\n        }T.params.loop || (T.params.prevButton && T.prevButton && T.prevButton.length > 0 && (T.isBeginning ? (T.prevButton.addClass(T.params.buttonDisabledClass), T.params.a11y && T.a11y && T.a11y.disable(T.prevButton)) : (T.prevButton.removeClass(T.params.buttonDisabledClass), T.params.a11y && T.a11y && T.a11y.enable(T.prevButton))), T.params.nextButton && T.nextButton && T.nextButton.length > 0 && (T.isEnd ? (T.nextButton.addClass(T.params.buttonDisabledClass), T.params.a11y && T.a11y && T.a11y.disable(T.nextButton)) : (T.nextButton.removeClass(T.params.buttonDisabledClass), T.params.a11y && T.a11y && T.a11y.enable(T.nextButton))));\\n      }, T.updatePagination = function () {\\n        if (T.params.pagination && T.paginationContainer && T.paginationContainer.length > 0) {\\n          var e = \\\"\\\";if (\\\"bullets\\\" === T.params.paginationType) {\\n            for (var a = T.params.loop ? Math.ceil((T.slides.length - 2 * T.loopedSlides) / T.params.slidesPerGroup) : T.snapGrid.length, t = 0; t < a; t++) {\\n              e += T.params.paginationBulletRender ? T.params.paginationBulletRender(T, t, T.params.bulletClass) : \\\"<\\\" + T.params.paginationElement + ' class=\\\"' + T.params.bulletClass + '\\\"></' + T.params.paginationElement + \\\">\\\";\\n            }T.paginationContainer.html(e), T.bullets = T.paginationContainer.find(\\\".\\\" + T.params.bulletClass), T.params.paginationClickable && T.params.a11y && T.a11y && T.a11y.initPagination();\\n          }\\\"fraction\\\" === T.params.paginationType && (e = T.params.paginationFractionRender ? T.params.paginationFractionRender(T, T.params.paginationCurrentClass, T.params.paginationTotalClass) : '<span class=\\\"' + T.params.paginationCurrentClass + '\\\"></span> / <span class=\\\"' + T.params.paginationTotalClass + '\\\"></span>', T.paginationContainer.html(e)), \\\"progress\\\" === T.params.paginationType && (e = T.params.paginationProgressRender ? T.params.paginationProgressRender(T, T.params.paginationProgressbarClass) : '<span class=\\\"' + T.params.paginationProgressbarClass + '\\\"></span>', T.paginationContainer.html(e)), \\\"custom\\\" !== T.params.paginationType && T.emit(\\\"onPaginationRendered\\\", T, T.paginationContainer[0]);\\n        }\\n      }, T.update = function (e) {\\n        function a() {\\n          T.rtl, T.translate;t = Math.min(Math.max(T.translate, T.maxTranslate()), T.minTranslate()), T.setWrapperTranslate(t), T.updateActiveIndex(), T.updateClasses();\\n        }if (T) {\\n          T.updateContainerSize(), T.updateSlidesSize(), T.updateProgress(), T.updatePagination(), T.updateClasses(), T.params.scrollbar && T.scrollbar && T.scrollbar.set();var t;if (e) {\\n            T.controller && T.controller.spline && (T.controller.spline = void 0), T.params.freeMode ? (a(), T.params.autoHeight && T.updateAutoHeight()) : ((\\\"auto\\\" === T.params.slidesPerView || T.params.slidesPerView > 1) && T.isEnd && !T.params.centeredSlides ? T.slideTo(T.slides.length - 1, 0, !1, !0) : T.slideTo(T.activeIndex, 0, !1, !0)) || a();\\n          } else T.params.autoHeight && T.updateAutoHeight();\\n        }\\n      }, T.onResize = function (e) {\\n        T.params.onBeforeResize && T.params.onBeforeResize(T), T.params.breakpoints && T.setBreakpoint();var a = T.params.allowSwipeToPrev,\\n            t = T.params.allowSwipeToNext;T.params.allowSwipeToPrev = T.params.allowSwipeToNext = !0, T.updateContainerSize(), T.updateSlidesSize(), (\\\"auto\\\" === T.params.slidesPerView || T.params.freeMode || e) && T.updatePagination(), T.params.scrollbar && T.scrollbar && T.scrollbar.set(), T.controller && T.controller.spline && (T.controller.spline = void 0);var s = !1;if (T.params.freeMode) {\\n          var i = Math.min(Math.max(T.translate, T.maxTranslate()), T.minTranslate());T.setWrapperTranslate(i), T.updateActiveIndex(), T.updateClasses(), T.params.autoHeight && T.updateAutoHeight();\\n        } else T.updateClasses(), s = (\\\"auto\\\" === T.params.slidesPerView || T.params.slidesPerView > 1) && T.isEnd && !T.params.centeredSlides ? T.slideTo(T.slides.length - 1, 0, !1, !0) : T.slideTo(T.activeIndex, 0, !1, !0);T.params.lazyLoading && !s && T.lazy && T.lazy.load(), T.params.allowSwipeToPrev = a, T.params.allowSwipeToNext = t, T.params.onAfterResize && T.params.onAfterResize(T);\\n      }, T.touchEventsDesktop = { start: \\\"mousedown\\\", move: \\\"mousemove\\\", end: \\\"mouseup\\\" }, window.navigator.pointerEnabled ? T.touchEventsDesktop = { start: \\\"pointerdown\\\", move: \\\"pointermove\\\", end: \\\"pointerup\\\" } : window.navigator.msPointerEnabled && (T.touchEventsDesktop = { start: \\\"MSPointerDown\\\", move: \\\"MSPointerMove\\\", end: \\\"MSPointerUp\\\" }), T.touchEvents = { start: T.support.touch || !T.params.simulateTouch ? \\\"touchstart\\\" : T.touchEventsDesktop.start, move: T.support.touch || !T.params.simulateTouch ? \\\"touchmove\\\" : T.touchEventsDesktop.move, end: T.support.touch || !T.params.simulateTouch ? \\\"touchend\\\" : T.touchEventsDesktop.end }, (window.navigator.pointerEnabled || window.navigator.msPointerEnabled) && (\\\"container\\\" === T.params.touchEventsTarget ? T.container : T.wrapper).addClass(\\\"swiper-wp8-\\\" + T.params.direction), T.initEvents = function (e) {\\n        var a = e ? \\\"off\\\" : \\\"on\\\",\\n            t = e ? \\\"removeEventListener\\\" : \\\"addEventListener\\\",\\n            s = \\\"container\\\" === T.params.touchEventsTarget ? T.container[0] : T.wrapper[0],\\n            r = T.support.touch ? s : document,\\n            n = !!T.params.nested;if (T.browser.ie) s[t](T.touchEvents.start, T.onTouchStart, !1), r[t](T.touchEvents.move, T.onTouchMove, n), r[t](T.touchEvents.end, T.onTouchEnd, !1);else {\\n          if (T.support.touch) {\\n            var o = !(\\\"touchstart\\\" !== T.touchEvents.start || !T.support.passiveListener || !T.params.passiveListeners) && { passive: !0, capture: !1 };s[t](T.touchEvents.start, T.onTouchStart, o), s[t](T.touchEvents.move, T.onTouchMove, n), s[t](T.touchEvents.end, T.onTouchEnd, o);\\n          }(i.simulateTouch && !T.device.ios && !T.device.android || i.simulateTouch && !T.support.touch && T.device.ios) && (s[t](\\\"mousedown\\\", T.onTouchStart, !1), document[t](\\\"mousemove\\\", T.onTouchMove, n), document[t](\\\"mouseup\\\", T.onTouchEnd, !1));\\n        }window[t](\\\"resize\\\", T.onResize), T.params.nextButton && T.nextButton && T.nextButton.length > 0 && (T.nextButton[a](\\\"click\\\", T.onClickNext), T.params.a11y && T.a11y && T.nextButton[a](\\\"keydown\\\", T.a11y.onEnterKey)), T.params.prevButton && T.prevButton && T.prevButton.length > 0 && (T.prevButton[a](\\\"click\\\", T.onClickPrev), T.params.a11y && T.a11y && T.prevButton[a](\\\"keydown\\\", T.a11y.onEnterKey)), T.params.pagination && T.params.paginationClickable && (T.paginationContainer[a](\\\"click\\\", \\\".\\\" + T.params.bulletClass, T.onClickIndex), T.params.a11y && T.a11y && T.paginationContainer[a](\\\"keydown\\\", \\\".\\\" + T.params.bulletClass, T.a11y.onEnterKey)), (T.params.preventClicks || T.params.preventClicksPropagation) && s[t](\\\"click\\\", T.preventClicks, !0);\\n      }, T.attachEvents = function () {\\n        T.initEvents();\\n      }, T.detachEvents = function () {\\n        T.initEvents(!0);\\n      }, T.allowClick = !0, T.preventClicks = function (e) {\\n        T.allowClick || (T.params.preventClicks && e.preventDefault(), T.params.preventClicksPropagation && T.animating && (e.stopPropagation(), e.stopImmediatePropagation()));\\n      }, T.onClickNext = function (e) {\\n        e.preventDefault(), T.isEnd && !T.params.loop || T.slideNext();\\n      }, T.onClickPrev = function (e) {\\n        e.preventDefault(), T.isBeginning && !T.params.loop || T.slidePrev();\\n      }, T.onClickIndex = function (a) {\\n        a.preventDefault();var t = e(this).index() * T.params.slidesPerGroup;T.params.loop && (t += T.loopedSlides), T.slideTo(t);\\n      }, T.updateClickedSlide = function (a) {\\n        var t = o(a, \\\".\\\" + T.params.slideClass),\\n            s = !1;if (t) for (var i = 0; i < T.slides.length; i++) {\\n          T.slides[i] === t && (s = !0);\\n        }if (!t || !s) return T.clickedSlide = void 0, void (T.clickedIndex = void 0);if (T.clickedSlide = t, T.clickedIndex = e(t).index(), T.params.slideToClickedSlide && void 0 !== T.clickedIndex && T.clickedIndex !== T.activeIndex) {\\n          var r,\\n              n = T.clickedIndex,\\n              l = \\\"auto\\\" === T.params.slidesPerView ? T.currentSlidesPerView() : T.params.slidesPerView;if (T.params.loop) {\\n            if (T.animating) return;r = parseInt(e(T.clickedSlide).attr(\\\"data-swiper-slide-index\\\"), 10), T.params.centeredSlides ? n < T.loopedSlides - l / 2 || n > T.slides.length - T.loopedSlides + l / 2 ? (T.fixLoop(), n = T.wrapper.children(\\\".\\\" + T.params.slideClass + '[data-swiper-slide-index=\\\"' + r + '\\\"]:not(.' + T.params.slideDuplicateClass + \\\")\\\").eq(0).index(), setTimeout(function () {\\n              T.slideTo(n);\\n            }, 0)) : T.slideTo(n) : n > T.slides.length - l ? (T.fixLoop(), n = T.wrapper.children(\\\".\\\" + T.params.slideClass + '[data-swiper-slide-index=\\\"' + r + '\\\"]:not(.' + T.params.slideDuplicateClass + \\\")\\\").eq(0).index(), setTimeout(function () {\\n              T.slideTo(n);\\n            }, 0)) : T.slideTo(n);\\n          } else T.slideTo(n);\\n        }\\n      };var S,\\n          C,\\n          z,\\n          M,\\n          E,\\n          P,\\n          I,\\n          k,\\n          L,\\n          D,\\n          B = \\\"input, select, textarea, button, video\\\",\\n          H = Date.now(),\\n          G = [];T.animating = !1, T.touches = { startX: 0, startY: 0, currentX: 0, currentY: 0, diff: 0 };var X, A;T.onTouchStart = function (a) {\\n        if (a.originalEvent && (a = a.originalEvent), (X = \\\"touchstart\\\" === a.type) || !(\\\"which\\\" in a) || 3 !== a.which) {\\n          if (T.params.noSwiping && o(a, \\\".\\\" + T.params.noSwipingClass)) return void (T.allowClick = !0);if (!T.params.swipeHandler || o(a, T.params.swipeHandler)) {\\n            var t = T.touches.currentX = \\\"touchstart\\\" === a.type ? a.targetTouches[0].pageX : a.pageX,\\n                s = T.touches.currentY = \\\"touchstart\\\" === a.type ? a.targetTouches[0].pageY : a.pageY;if (!(T.device.ios && T.params.iOSEdgeSwipeDetection && t <= T.params.iOSEdgeSwipeThreshold)) {\\n              if (S = !0, C = !1, z = !0, E = void 0, A = void 0, T.touches.startX = t, T.touches.startY = s, M = Date.now(), T.allowClick = !0, T.updateContainerSize(), T.swipeDirection = void 0, T.params.threshold > 0 && (k = !1), \\\"touchstart\\\" !== a.type) {\\n                var i = !0;e(a.target).is(B) && (i = !1), document.activeElement && e(document.activeElement).is(B) && document.activeElement.blur(), i && a.preventDefault();\\n              }T.emit(\\\"onTouchStart\\\", T, a);\\n            }\\n          }\\n        }\\n      }, T.onTouchMove = function (a) {\\n        if (a.originalEvent && (a = a.originalEvent), !X || \\\"mousemove\\\" !== a.type) {\\n          if (a.preventedByNestedSwiper) return T.touches.startX = \\\"touchmove\\\" === a.type ? a.targetTouches[0].pageX : a.pageX, void (T.touches.startY = \\\"touchmove\\\" === a.type ? a.targetTouches[0].pageY : a.pageY);if (T.params.onlyExternal) return T.allowClick = !1, void (S && (T.touches.startX = T.touches.currentX = \\\"touchmove\\\" === a.type ? a.targetTouches[0].pageX : a.pageX, T.touches.startY = T.touches.currentY = \\\"touchmove\\\" === a.type ? a.targetTouches[0].pageY : a.pageY, M = Date.now()));if (X && T.params.touchReleaseOnEdges && !T.params.loop) if (T.isHorizontal()) {\\n            if (T.touches.currentX < T.touches.startX && T.translate <= T.maxTranslate() || T.touches.currentX > T.touches.startX && T.translate >= T.minTranslate()) return;\\n          } else if (T.touches.currentY < T.touches.startY && T.translate <= T.maxTranslate() || T.touches.currentY > T.touches.startY && T.translate >= T.minTranslate()) return;if (X && document.activeElement && a.target === document.activeElement && e(a.target).is(B)) return C = !0, void (T.allowClick = !1);if (z && T.emit(\\\"onTouchMove\\\", T, a), !(a.targetTouches && a.targetTouches.length > 1)) {\\n            if (T.touches.currentX = \\\"touchmove\\\" === a.type ? a.targetTouches[0].pageX : a.pageX, T.touches.currentY = \\\"touchmove\\\" === a.type ? a.targetTouches[0].pageY : a.pageY, void 0 === E) {\\n              var t;T.isHorizontal() && T.touches.currentY === T.touches.startY || !T.isHorizontal() && T.touches.currentX === T.touches.startX ? E = !1 : (t = 180 * Math.atan2(Math.abs(T.touches.currentY - T.touches.startY), Math.abs(T.touches.currentX - T.touches.startX)) / Math.PI, E = T.isHorizontal() ? t > T.params.touchAngle : 90 - t > T.params.touchAngle);\\n            }if (E && T.emit(\\\"onTouchMoveOpposite\\\", T, a), void 0 === A && (T.touches.currentX === T.touches.startX && T.touches.currentY === T.touches.startY || (A = !0)), S) {\\n              if (E) return void (S = !1);if (A) {\\n                T.allowClick = !1, T.emit(\\\"onSliderMove\\\", T, a), a.preventDefault(), T.params.touchMoveStopPropagation && !T.params.nested && a.stopPropagation(), C || (i.loop && T.fixLoop(), I = T.getWrapperTranslate(), T.setWrapperTransition(0), T.animating && T.wrapper.trigger(\\\"webkitTransitionEnd transitionend oTransitionEnd MSTransitionEnd msTransitionEnd\\\"), T.params.autoplay && T.autoplaying && (T.params.autoplayDisableOnInteraction ? T.stopAutoplay() : T.pauseAutoplay()), D = !1, !T.params.grabCursor || T.params.allowSwipeToNext !== !0 && T.params.allowSwipeToPrev !== !0 || T.setGrabCursor(!0)), C = !0;var s = T.touches.diff = T.isHorizontal() ? T.touches.currentX - T.touches.startX : T.touches.currentY - T.touches.startY;s *= T.params.touchRatio, T.rtl && (s = -s), T.swipeDirection = s > 0 ? \\\"prev\\\" : \\\"next\\\", P = s + I;var r = !0;if (s > 0 && P > T.minTranslate() ? (r = !1, T.params.resistance && (P = T.minTranslate() - 1 + Math.pow(-T.minTranslate() + I + s, T.params.resistanceRatio))) : s < 0 && P < T.maxTranslate() && (r = !1, T.params.resistance && (P = T.maxTranslate() + 1 - Math.pow(T.maxTranslate() - I - s, T.params.resistanceRatio))), r && (a.preventedByNestedSwiper = !0), !T.params.allowSwipeToNext && \\\"next\\\" === T.swipeDirection && P < I && (P = I), !T.params.allowSwipeToPrev && \\\"prev\\\" === T.swipeDirection && P > I && (P = I), T.params.threshold > 0) {\\n                  if (!(Math.abs(s) > T.params.threshold || k)) return void (P = I);if (!k) return k = !0, T.touches.startX = T.touches.currentX, T.touches.startY = T.touches.currentY, P = I, void (T.touches.diff = T.isHorizontal() ? T.touches.currentX - T.touches.startX : T.touches.currentY - T.touches.startY);\\n                }T.params.followFinger && ((T.params.freeMode || T.params.watchSlidesProgress) && T.updateActiveIndex(), T.params.freeMode && (0 === G.length && G.push({ position: T.touches[T.isHorizontal() ? \\\"startX\\\" : \\\"startY\\\"], time: M }), G.push({ position: T.touches[T.isHorizontal() ? \\\"currentX\\\" : \\\"currentY\\\"], time: new window.Date().getTime() })), T.updateProgress(P), T.setWrapperTranslate(P));\\n              }\\n            }\\n          }\\n        }\\n      }, T.onTouchEnd = function (a) {\\n        if (a.originalEvent && (a = a.originalEvent), z && T.emit(\\\"onTouchEnd\\\", T, a), z = !1, S) {\\n          T.params.grabCursor && C && S && (T.params.allowSwipeToNext === !0 || T.params.allowSwipeToPrev === !0) && T.setGrabCursor(!1);var t = Date.now(),\\n              s = t - M;if (T.allowClick && (T.updateClickedSlide(a), T.emit(\\\"onTap\\\", T, a), s < 300 && t - H > 300 && (L && clearTimeout(L), L = setTimeout(function () {\\n            T && (T.params.paginationHide && T.paginationContainer.length > 0 && !e(a.target).hasClass(T.params.bulletClass) && T.paginationContainer.toggleClass(T.params.paginationHiddenClass), T.emit(\\\"onClick\\\", T, a));\\n          }, 300)), s < 300 && t - H < 300 && (L && clearTimeout(L), T.emit(\\\"onDoubleTap\\\", T, a))), H = Date.now(), setTimeout(function () {\\n            T && (T.allowClick = !0);\\n          }, 0), !S || !C || !T.swipeDirection || 0 === T.touches.diff || P === I) return void (S = C = !1);S = C = !1;var i;if (i = T.params.followFinger ? T.rtl ? T.translate : -T.translate : -P, T.params.freeMode) {\\n            if (i < -T.minTranslate()) return void T.slideTo(T.activeIndex);if (i > -T.maxTranslate()) return void (T.slides.length < T.snapGrid.length ? T.slideTo(T.snapGrid.length - 1) : T.slideTo(T.slides.length - 1));if (T.params.freeModeMomentum) {\\n              if (G.length > 1) {\\n                var r = G.pop(),\\n                    n = G.pop(),\\n                    o = r.position - n.position,\\n                    l = r.time - n.time;T.velocity = o / l, T.velocity = T.velocity / 2, Math.abs(T.velocity) < T.params.freeModeMinimumVelocity && (T.velocity = 0), (l > 150 || new window.Date().getTime() - r.time > 300) && (T.velocity = 0);\\n              } else T.velocity = 0;T.velocity = T.velocity * T.params.freeModeMomentumVelocityRatio, G.length = 0;var p = 1e3 * T.params.freeModeMomentumRatio,\\n                  d = T.velocity * p,\\n                  u = T.translate + d;T.rtl && (u = -u);var c,\\n                  m = !1,\\n                  h = 20 * Math.abs(T.velocity) * T.params.freeModeMomentumBounceRatio;if (u < T.maxTranslate()) T.params.freeModeMomentumBounce ? (u + T.maxTranslate() < -h && (u = T.maxTranslate() - h), c = T.maxTranslate(), m = !0, D = !0) : u = T.maxTranslate();else if (u > T.minTranslate()) T.params.freeModeMomentumBounce ? (u - T.minTranslate() > h && (u = T.minTranslate() + h), c = T.minTranslate(), m = !0, D = !0) : u = T.minTranslate();else if (T.params.freeModeSticky) {\\n                var g,\\n                    f = 0;for (f = 0; f < T.snapGrid.length; f += 1) {\\n                  if (T.snapGrid[f] > -u) {\\n                    g = f;break;\\n                  }\\n                }u = Math.abs(T.snapGrid[g] - u) < Math.abs(T.snapGrid[g - 1] - u) || \\\"next\\\" === T.swipeDirection ? T.snapGrid[g] : T.snapGrid[g - 1], T.rtl || (u = -u);\\n              }if (0 !== T.velocity) p = T.rtl ? Math.abs((-u - T.translate) / T.velocity) : Math.abs((u - T.translate) / T.velocity);else if (T.params.freeModeSticky) return void T.slideReset();T.params.freeModeMomentumBounce && m ? (T.updateProgress(c), T.setWrapperTransition(p), T.setWrapperTranslate(u), T.onTransitionStart(), T.animating = !0, T.wrapper.transitionEnd(function () {\\n                T && D && (T.emit(\\\"onMomentumBounce\\\", T), T.setWrapperTransition(T.params.speed), T.setWrapperTranslate(c), T.wrapper.transitionEnd(function () {\\n                  T && T.onTransitionEnd();\\n                }));\\n              })) : T.velocity ? (T.updateProgress(u), T.setWrapperTransition(p), T.setWrapperTranslate(u), T.onTransitionStart(), T.animating || (T.animating = !0, T.wrapper.transitionEnd(function () {\\n                T && T.onTransitionEnd();\\n              }))) : T.updateProgress(u), T.updateActiveIndex();\\n            }return void ((!T.params.freeModeMomentum || s >= T.params.longSwipesMs) && (T.updateProgress(), T.updateActiveIndex()));\\n          }var v,\\n              w = 0,\\n              y = T.slidesSizesGrid[0];for (v = 0; v < T.slidesGrid.length; v += T.params.slidesPerGroup) {\\n            void 0 !== T.slidesGrid[v + T.params.slidesPerGroup] ? i >= T.slidesGrid[v] && i < T.slidesGrid[v + T.params.slidesPerGroup] && (w = v, y = T.slidesGrid[v + T.params.slidesPerGroup] - T.slidesGrid[v]) : i >= T.slidesGrid[v] && (w = v, y = T.slidesGrid[T.slidesGrid.length - 1] - T.slidesGrid[T.slidesGrid.length - 2]);\\n          }var x = (i - T.slidesGrid[w]) / y;if (s > T.params.longSwipesMs) {\\n            if (!T.params.longSwipes) return void T.slideTo(T.activeIndex);\\\"next\\\" === T.swipeDirection && (x >= T.params.longSwipesRatio ? T.slideTo(w + T.params.slidesPerGroup) : T.slideTo(w)), \\\"prev\\\" === T.swipeDirection && (x > 1 - T.params.longSwipesRatio ? T.slideTo(w + T.params.slidesPerGroup) : T.slideTo(w));\\n          } else {\\n            if (!T.params.shortSwipes) return void T.slideTo(T.activeIndex);\\\"next\\\" === T.swipeDirection && T.slideTo(w + T.params.slidesPerGroup), \\\"prev\\\" === T.swipeDirection && T.slideTo(w);\\n          }\\n        }\\n      }, T._slideTo = function (e, a) {\\n        return T.slideTo(e, a, !0, !0);\\n      }, T.slideTo = function (e, a, t, s) {\\n        void 0 === t && (t = !0), void 0 === e && (e = 0), e < 0 && (e = 0), T.snapIndex = Math.floor(e / T.params.slidesPerGroup), T.snapIndex >= T.snapGrid.length && (T.snapIndex = T.snapGrid.length - 1);var i = -T.snapGrid[T.snapIndex];if (T.params.autoplay && T.autoplaying && (s || !T.params.autoplayDisableOnInteraction ? T.pauseAutoplay(a) : T.stopAutoplay()), T.updateProgress(i), T.params.normalizeSlideIndex) for (var r = 0; r < T.slidesGrid.length; r++) {\\n          -Math.floor(100 * i) >= Math.floor(100 * T.slidesGrid[r]) && (e = r);\\n        }return !(!T.params.allowSwipeToNext && i < T.translate && i < T.minTranslate()) && !(!T.params.allowSwipeToPrev && i > T.translate && i > T.maxTranslate() && (T.activeIndex || 0) !== e) && (void 0 === a && (a = T.params.speed), T.previousIndex = T.activeIndex || 0, T.activeIndex = e, T.updateRealIndex(), T.rtl && -i === T.translate || !T.rtl && i === T.translate ? (T.params.autoHeight && T.updateAutoHeight(), T.updateClasses(), \\\"slide\\\" !== T.params.effect && T.setWrapperTranslate(i), !1) : (T.updateClasses(), T.onTransitionStart(t), 0 === a || T.browser.lteIE9 ? (T.setWrapperTranslate(i), T.setWrapperTransition(0), T.onTransitionEnd(t)) : (T.setWrapperTranslate(i), T.setWrapperTransition(a), T.animating || (T.animating = !0, T.wrapper.transitionEnd(function () {\\n          T && T.onTransitionEnd(t);\\n        }))), !0));\\n      }, T.onTransitionStart = function (e) {\\n        void 0 === e && (e = !0), T.params.autoHeight && T.updateAutoHeight(), T.lazy && T.lazy.onTransitionStart(), e && (T.emit(\\\"onTransitionStart\\\", T), T.activeIndex !== T.previousIndex && (T.emit(\\\"onSlideChangeStart\\\", T), T.activeIndex > T.previousIndex ? T.emit(\\\"onSlideNextStart\\\", T) : T.emit(\\\"onSlidePrevStart\\\", T)));\\n      }, T.onTransitionEnd = function (e) {\\n        T.animating = !1, T.setWrapperTransition(0), void 0 === e && (e = !0), T.lazy && T.lazy.onTransitionEnd(), e && (T.emit(\\\"onTransitionEnd\\\", T), T.activeIndex !== T.previousIndex && (T.emit(\\\"onSlideChangeEnd\\\", T), T.activeIndex > T.previousIndex ? T.emit(\\\"onSlideNextEnd\\\", T) : T.emit(\\\"onSlidePrevEnd\\\", T))), T.params.history && T.history && T.history.setHistory(T.params.history, T.activeIndex), T.params.hashnav && T.hashnav && T.hashnav.setHash();\\n      }, T.slideNext = function (e, a, t) {\\n        if (T.params.loop) {\\n          if (T.animating) return !1;T.fixLoop();T.container[0].clientLeft;return T.slideTo(T.activeIndex + T.params.slidesPerGroup, a, e, t);\\n        }return T.slideTo(T.activeIndex + T.params.slidesPerGroup, a, e, t);\\n      }, T._slideNext = function (e) {\\n        return T.slideNext(!0, e, !0);\\n      }, T.slidePrev = function (e, a, t) {\\n        if (T.params.loop) {\\n          if (T.animating) return !1;T.fixLoop();T.container[0].clientLeft;return T.slideTo(T.activeIndex - 1, a, e, t);\\n        }return T.slideTo(T.activeIndex - 1, a, e, t);\\n      }, T._slidePrev = function (e) {\\n        return T.slidePrev(!0, e, !0);\\n      }, T.slideReset = function (e, a, t) {\\n        return T.slideTo(T.activeIndex, a, e);\\n      }, T.disableTouchControl = function () {\\n        return T.params.onlyExternal = !0, !0;\\n      }, T.enableTouchControl = function () {\\n        return T.params.onlyExternal = !1, !0;\\n      }, T.setWrapperTransition = function (e, a) {\\n        T.wrapper.transition(e), \\\"slide\\\" !== T.params.effect && T.effects[T.params.effect] && T.effects[T.params.effect].setTransition(e), T.params.parallax && T.parallax && T.parallax.setTransition(e), T.params.scrollbar && T.scrollbar && T.scrollbar.setTransition(e), T.params.control && T.controller && T.controller.setTransition(e, a), T.emit(\\\"onSetTransition\\\", T, e);\\n      }, T.setWrapperTranslate = function (e, a, t) {\\n        var s = 0,\\n            i = 0;T.isHorizontal() ? s = T.rtl ? -e : e : i = e, T.params.roundLengths && (s = r(s), i = r(i)), T.params.virtualTranslate || (T.support.transforms3d ? T.wrapper.transform(\\\"translate3d(\\\" + s + \\\"px, \\\" + i + \\\"px, 0px)\\\") : T.wrapper.transform(\\\"translate(\\\" + s + \\\"px, \\\" + i + \\\"px)\\\")), T.translate = T.isHorizontal() ? s : i;var n,\\n            o = T.maxTranslate() - T.minTranslate();n = 0 === o ? 0 : (e - T.minTranslate()) / o, n !== T.progress && T.updateProgress(e), a && T.updateActiveIndex(), \\\"slide\\\" !== T.params.effect && T.effects[T.params.effect] && T.effects[T.params.effect].setTranslate(T.translate), T.params.parallax && T.parallax && T.parallax.setTranslate(T.translate), T.params.scrollbar && T.scrollbar && T.scrollbar.setTranslate(T.translate), T.params.control && T.controller && T.controller.setTranslate(T.translate, t), T.emit(\\\"onSetTranslate\\\", T, T.translate);\\n      }, T.getTranslate = function (e, a) {\\n        var t, s, i, r;return void 0 === a && (a = \\\"x\\\"), T.params.virtualTranslate ? T.rtl ? -T.translate : T.translate : (i = window.getComputedStyle(e, null), window.WebKitCSSMatrix ? (s = i.transform || i.webkitTransform, s.split(\\\",\\\").length > 6 && (s = s.split(\\\", \\\").map(function (e) {\\n          return e.replace(\\\",\\\", \\\".\\\");\\n        }).join(\\\", \\\")), r = new window.WebKitCSSMatrix(\\\"none\\\" === s ? \\\"\\\" : s)) : (r = i.MozTransform || i.OTransform || i.MsTransform || i.msTransform || i.transform || i.getPropertyValue(\\\"transform\\\").replace(\\\"translate(\\\", \\\"matrix(1, 0, 0, 1,\\\"), t = r.toString().split(\\\",\\\")), \\\"x\\\" === a && (s = window.WebKitCSSMatrix ? r.m41 : 16 === t.length ? parseFloat(t[12]) : parseFloat(t[4])), \\\"y\\\" === a && (s = window.WebKitCSSMatrix ? r.m42 : 16 === t.length ? parseFloat(t[13]) : parseFloat(t[5])), T.rtl && s && (s = -s), s || 0);\\n      }, T.getWrapperTranslate = function (e) {\\n        return void 0 === e && (e = T.isHorizontal() ? \\\"x\\\" : \\\"y\\\"), T.getTranslate(T.wrapper[0], e);\\n      }, T.observers = [], T.initObservers = function () {\\n        if (T.params.observeParents) for (var e = T.container.parents(), a = 0; a < e.length; a++) {\\n          l(e[a]);\\n        }l(T.container[0], { childList: !1 }), l(T.wrapper[0], { attributes: !1 });\\n      }, T.disconnectObservers = function () {\\n        for (var e = 0; e < T.observers.length; e++) {\\n          T.observers[e].disconnect();\\n        }T.observers = [];\\n      }, T.createLoop = function () {\\n        T.wrapper.children(\\\".\\\" + T.params.slideClass + \\\".\\\" + T.params.slideDuplicateClass).remove();var a = T.wrapper.children(\\\".\\\" + T.params.slideClass);\\\"auto\\\" !== T.params.slidesPerView || T.params.loopedSlides || (T.params.loopedSlides = a.length), T.loopedSlides = parseInt(T.params.loopedSlides || T.params.slidesPerView, 10), T.loopedSlides = T.loopedSlides + T.params.loopAdditionalSlides, T.loopedSlides > a.length && (T.loopedSlides = a.length);var t,\\n            s = [],\\n            i = [];for (a.each(function (t, r) {\\n          var n = e(this);t < T.loopedSlides && i.push(r), t < a.length && t >= a.length - T.loopedSlides && s.push(r), n.attr(\\\"data-swiper-slide-index\\\", t);\\n        }), t = 0; t < i.length; t++) {\\n          T.wrapper.append(e(i[t].cloneNode(!0)).addClass(T.params.slideDuplicateClass));\\n        }for (t = s.length - 1; t >= 0; t--) {\\n          T.wrapper.prepend(e(s[t].cloneNode(!0)).addClass(T.params.slideDuplicateClass));\\n        }\\n      }, T.destroyLoop = function () {\\n        T.wrapper.children(\\\".\\\" + T.params.slideClass + \\\".\\\" + T.params.slideDuplicateClass).remove(), T.slides.removeAttr(\\\"data-swiper-slide-index\\\");\\n      }, T.reLoop = function (e) {\\n        var a = T.activeIndex - T.loopedSlides;T.destroyLoop(), T.createLoop(), T.updateSlidesSize(), e && T.slideTo(a + T.loopedSlides, 0, !1);\\n      }, T.fixLoop = function () {\\n        var e;T.activeIndex < T.loopedSlides ? (e = T.slides.length - 3 * T.loopedSlides + T.activeIndex, e += T.loopedSlides, T.slideTo(e, 0, !1, !0)) : (\\\"auto\\\" === T.params.slidesPerView && T.activeIndex >= 2 * T.loopedSlides || T.activeIndex > T.slides.length - 2 * T.params.slidesPerView) && (e = -T.slides.length + T.activeIndex + T.loopedSlides, e += T.loopedSlides, T.slideTo(e, 0, !1, !0));\\n      }, T.appendSlide = function (e) {\\n        if (T.params.loop && T.destroyLoop(), \\\"object\\\" == (typeof e === \\\"undefined\\\" ? \\\"undefined\\\" : _typeof(e)) && e.length) for (var a = 0; a < e.length; a++) {\\n          e[a] && T.wrapper.append(e[a]);\\n        } else T.wrapper.append(e);T.params.loop && T.createLoop(), T.params.observer && T.support.observer || T.update(!0);\\n      }, T.prependSlide = function (e) {\\n        T.params.loop && T.destroyLoop();var a = T.activeIndex + 1;if (\\\"object\\\" == (typeof e === \\\"undefined\\\" ? \\\"undefined\\\" : _typeof(e)) && e.length) {\\n          for (var t = 0; t < e.length; t++) {\\n            e[t] && T.wrapper.prepend(e[t]);\\n          }a = T.activeIndex + e.length;\\n        } else T.wrapper.prepend(e);T.params.loop && T.createLoop(), T.params.observer && T.support.observer || T.update(!0), T.slideTo(a, 0, !1);\\n      }, T.removeSlide = function (e) {\\n        T.params.loop && (T.destroyLoop(), T.slides = T.wrapper.children(\\\".\\\" + T.params.slideClass));var a,\\n            t = T.activeIndex;if (\\\"object\\\" == (typeof e === \\\"undefined\\\" ? \\\"undefined\\\" : _typeof(e)) && e.length) {\\n          for (var s = 0; s < e.length; s++) {\\n            a = e[s], T.slides[a] && T.slides.eq(a).remove(), a < t && t--;\\n          }t = Math.max(t, 0);\\n        } else a = e, T.slides[a] && T.slides.eq(a).remove(), a < t && t--, t = Math.max(t, 0);T.params.loop && T.createLoop(), T.params.observer && T.support.observer || T.update(!0), T.params.loop ? T.slideTo(t + T.loopedSlides, 0, !1) : T.slideTo(t, 0, !1);\\n      }, T.removeAllSlides = function () {\\n        for (var e = [], a = 0; a < T.slides.length; a++) {\\n          e.push(a);\\n        }T.removeSlide(e);\\n      }, T.effects = { fade: { setTranslate: function setTranslate() {\\n            for (var e = 0; e < T.slides.length; e++) {\\n              var a = T.slides.eq(e),\\n                  t = a[0].swiperSlideOffset,\\n                  s = -t;T.params.virtualTranslate || (s -= T.translate);var i = 0;T.isHorizontal() || (i = s, s = 0);var r = T.params.fade.crossFade ? Math.max(1 - Math.abs(a[0].progress), 0) : 1 + Math.min(Math.max(a[0].progress, -1), 0);a.css({ opacity: r }).transform(\\\"translate3d(\\\" + s + \\\"px, \\\" + i + \\\"px, 0px)\\\");\\n            }\\n          }, setTransition: function setTransition(e) {\\n            if (T.slides.transition(e), T.params.virtualTranslate && 0 !== e) {\\n              var a = !1;T.slides.transitionEnd(function () {\\n                if (!a && T) {\\n                  a = !0, T.animating = !1;for (var e = [\\\"webkitTransitionEnd\\\", \\\"transitionend\\\", \\\"oTransitionEnd\\\", \\\"MSTransitionEnd\\\", \\\"msTransitionEnd\\\"], t = 0; t < e.length; t++) {\\n                    T.wrapper.trigger(e[t]);\\n                  }\\n                }\\n              });\\n            }\\n          } }, flip: { setTranslate: function setTranslate() {\\n            for (var a = 0; a < T.slides.length; a++) {\\n              var t = T.slides.eq(a),\\n                  s = t[0].progress;T.params.flip.limitRotation && (s = Math.max(Math.min(t[0].progress, 1), -1));var i = t[0].swiperSlideOffset,\\n                  r = -180 * s,\\n                  n = r,\\n                  o = 0,\\n                  l = -i,\\n                  p = 0;if (T.isHorizontal() ? T.rtl && (n = -n) : (p = l, l = 0, o = -n, n = 0), t[0].style.zIndex = -Math.abs(Math.round(s)) + T.slides.length, T.params.flip.slideShadows) {\\n                var d = T.isHorizontal() ? t.find(\\\".swiper-slide-shadow-left\\\") : t.find(\\\".swiper-slide-shadow-top\\\"),\\n                    u = T.isHorizontal() ? t.find(\\\".swiper-slide-shadow-right\\\") : t.find(\\\".swiper-slide-shadow-bottom\\\");0 === d.length && (d = e('<div class=\\\"swiper-slide-shadow-' + (T.isHorizontal() ? \\\"left\\\" : \\\"top\\\") + '\\\"></div>'), t.append(d)), 0 === u.length && (u = e('<div class=\\\"swiper-slide-shadow-' + (T.isHorizontal() ? \\\"right\\\" : \\\"bottom\\\") + '\\\"></div>'), t.append(u)), d.length && (d[0].style.opacity = Math.max(-s, 0)), u.length && (u[0].style.opacity = Math.max(s, 0));\\n              }t.transform(\\\"translate3d(\\\" + l + \\\"px, \\\" + p + \\\"px, 0px) rotateX(\\\" + o + \\\"deg) rotateY(\\\" + n + \\\"deg)\\\");\\n            }\\n          }, setTransition: function setTransition(a) {\\n            if (T.slides.transition(a).find(\\\".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left\\\").transition(a), T.params.virtualTranslate && 0 !== a) {\\n              var t = !1;T.slides.eq(T.activeIndex).transitionEnd(function () {\\n                if (!t && T && e(this).hasClass(T.params.slideActiveClass)) {\\n                  t = !0, T.animating = !1;for (var a = [\\\"webkitTransitionEnd\\\", \\\"transitionend\\\", \\\"oTransitionEnd\\\", \\\"MSTransitionEnd\\\", \\\"msTransitionEnd\\\"], s = 0; s < a.length; s++) {\\n                    T.wrapper.trigger(a[s]);\\n                  }\\n                }\\n              });\\n            }\\n          } }, cube: { setTranslate: function setTranslate() {\\n            var a,\\n                t = 0;T.params.cube.shadow && (T.isHorizontal() ? (a = T.wrapper.find(\\\".swiper-cube-shadow\\\"), 0 === a.length && (a = e('<div class=\\\"swiper-cube-shadow\\\"></div>'), T.wrapper.append(a)), a.css({ height: T.width + \\\"px\\\" })) : (a = T.container.find(\\\".swiper-cube-shadow\\\"), 0 === a.length && (a = e('<div class=\\\"swiper-cube-shadow\\\"></div>'), T.container.append(a))));for (var s = 0; s < T.slides.length; s++) {\\n              var i = T.slides.eq(s),\\n                  r = 90 * s,\\n                  n = Math.floor(r / 360);T.rtl && (r = -r, n = Math.floor(-r / 360));var o = Math.max(Math.min(i[0].progress, 1), -1),\\n                  l = 0,\\n                  p = 0,\\n                  d = 0;s % 4 == 0 ? (l = 4 * -n * T.size, d = 0) : (s - 1) % 4 == 0 ? (l = 0, d = 4 * -n * T.size) : (s - 2) % 4 == 0 ? (l = T.size + 4 * n * T.size, d = T.size) : (s - 3) % 4 == 0 && (l = -T.size, d = 3 * T.size + 4 * T.size * n), T.rtl && (l = -l), T.isHorizontal() || (p = l, l = 0);var u = \\\"rotateX(\\\" + (T.isHorizontal() ? 0 : -r) + \\\"deg) rotateY(\\\" + (T.isHorizontal() ? r : 0) + \\\"deg) translate3d(\\\" + l + \\\"px, \\\" + p + \\\"px, \\\" + d + \\\"px)\\\";if (o <= 1 && o > -1 && (t = 90 * s + 90 * o, T.rtl && (t = 90 * -s - 90 * o)), i.transform(u), T.params.cube.slideShadows) {\\n                var c = T.isHorizontal() ? i.find(\\\".swiper-slide-shadow-left\\\") : i.find(\\\".swiper-slide-shadow-top\\\"),\\n                    m = T.isHorizontal() ? i.find(\\\".swiper-slide-shadow-right\\\") : i.find(\\\".swiper-slide-shadow-bottom\\\");0 === c.length && (c = e('<div class=\\\"swiper-slide-shadow-' + (T.isHorizontal() ? \\\"left\\\" : \\\"top\\\") + '\\\"></div>'), i.append(c)), 0 === m.length && (m = e('<div class=\\\"swiper-slide-shadow-' + (T.isHorizontal() ? \\\"right\\\" : \\\"bottom\\\") + '\\\"></div>'), i.append(m)), c.length && (c[0].style.opacity = Math.max(-o, 0)), m.length && (m[0].style.opacity = Math.max(o, 0));\\n              }\\n            }if (T.wrapper.css({ \\\"-webkit-transform-origin\\\": \\\"50% 50% -\\\" + T.size / 2 + \\\"px\\\", \\\"-moz-transform-origin\\\": \\\"50% 50% -\\\" + T.size / 2 + \\\"px\\\", \\\"-ms-transform-origin\\\": \\\"50% 50% -\\\" + T.size / 2 + \\\"px\\\", \\\"transform-origin\\\": \\\"50% 50% -\\\" + T.size / 2 + \\\"px\\\" }), T.params.cube.shadow) if (T.isHorizontal()) a.transform(\\\"translate3d(0px, \\\" + (T.width / 2 + T.params.cube.shadowOffset) + \\\"px, \\\" + -T.width / 2 + \\\"px) rotateX(90deg) rotateZ(0deg) scale(\\\" + T.params.cube.shadowScale + \\\")\\\");else {\\n              var h = Math.abs(t) - 90 * Math.floor(Math.abs(t) / 90),\\n                  g = 1.5 - (Math.sin(2 * h * Math.PI / 360) / 2 + Math.cos(2 * h * Math.PI / 360) / 2),\\n                  f = T.params.cube.shadowScale,\\n                  v = T.params.cube.shadowScale / g,\\n                  w = T.params.cube.shadowOffset;a.transform(\\\"scale3d(\\\" + f + \\\", 1, \\\" + v + \\\") translate3d(0px, \\\" + (T.height / 2 + w) + \\\"px, \\\" + -T.height / 2 / v + \\\"px) rotateX(-90deg)\\\");\\n            }var y = T.isSafari || T.isUiWebView ? -T.size / 2 : 0;T.wrapper.transform(\\\"translate3d(0px,0,\\\" + y + \\\"px) rotateX(\\\" + (T.isHorizontal() ? 0 : t) + \\\"deg) rotateY(\\\" + (T.isHorizontal() ? -t : 0) + \\\"deg)\\\");\\n          }, setTransition: function setTransition(e) {\\n            T.slides.transition(e).find(\\\".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left\\\").transition(e), T.params.cube.shadow && !T.isHorizontal() && T.container.find(\\\".swiper-cube-shadow\\\").transition(e);\\n          } }, coverflow: { setTranslate: function setTranslate() {\\n            for (var a = T.translate, t = T.isHorizontal() ? -a + T.width / 2 : -a + T.height / 2, s = T.isHorizontal() ? T.params.coverflow.rotate : -T.params.coverflow.rotate, i = T.params.coverflow.depth, r = 0, n = T.slides.length; r < n; r++) {\\n              var o = T.slides.eq(r),\\n                  l = T.slidesSizesGrid[r],\\n                  p = o[0].swiperSlideOffset,\\n                  d = (t - p - l / 2) / l * T.params.coverflow.modifier,\\n                  u = T.isHorizontal() ? s * d : 0,\\n                  c = T.isHorizontal() ? 0 : s * d,\\n                  m = -i * Math.abs(d),\\n                  h = T.isHorizontal() ? 0 : T.params.coverflow.stretch * d,\\n                  g = T.isHorizontal() ? T.params.coverflow.stretch * d : 0;Math.abs(g) < .001 && (g = 0), Math.abs(h) < .001 && (h = 0), Math.abs(m) < .001 && (m = 0), Math.abs(u) < .001 && (u = 0), Math.abs(c) < .001 && (c = 0);var f = \\\"translate3d(\\\" + g + \\\"px,\\\" + h + \\\"px,\\\" + m + \\\"px)  rotateX(\\\" + c + \\\"deg) rotateY(\\\" + u + \\\"deg)\\\";if (o.transform(f), o[0].style.zIndex = 1 - Math.abs(Math.round(d)), T.params.coverflow.slideShadows) {\\n                var v = T.isHorizontal() ? o.find(\\\".swiper-slide-shadow-left\\\") : o.find(\\\".swiper-slide-shadow-top\\\"),\\n                    w = T.isHorizontal() ? o.find(\\\".swiper-slide-shadow-right\\\") : o.find(\\\".swiper-slide-shadow-bottom\\\");0 === v.length && (v = e('<div class=\\\"swiper-slide-shadow-' + (T.isHorizontal() ? \\\"left\\\" : \\\"top\\\") + '\\\"></div>'), o.append(v)), 0 === w.length && (w = e('<div class=\\\"swiper-slide-shadow-' + (T.isHorizontal() ? \\\"right\\\" : \\\"bottom\\\") + '\\\"></div>'), o.append(w)), v.length && (v[0].style.opacity = d > 0 ? d : 0), w.length && (w[0].style.opacity = -d > 0 ? -d : 0);\\n              }\\n            }if (T.browser.ie) {\\n              T.wrapper[0].style.perspectiveOrigin = t + \\\"px 50%\\\";\\n            }\\n          }, setTransition: function setTransition(e) {\\n            T.slides.transition(e).find(\\\".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left\\\").transition(e);\\n          } } }, T.lazy = { initialImageLoaded: !1, loadImageInSlide: function loadImageInSlide(a, t) {\\n          if (void 0 !== a && (void 0 === t && (t = !0), 0 !== T.slides.length)) {\\n            var s = T.slides.eq(a),\\n                i = s.find(\\\".\\\" + T.params.lazyLoadingClass + \\\":not(.\\\" + T.params.lazyStatusLoadedClass + \\\"):not(.\\\" + T.params.lazyStatusLoadingClass + \\\")\\\");!s.hasClass(T.params.lazyLoadingClass) || s.hasClass(T.params.lazyStatusLoadedClass) || s.hasClass(T.params.lazyStatusLoadingClass) || (i = i.add(s[0])), 0 !== i.length && i.each(function () {\\n              var a = e(this);a.addClass(T.params.lazyStatusLoadingClass);var i = a.attr(\\\"data-background\\\"),\\n                  r = a.attr(\\\"data-src\\\"),\\n                  n = a.attr(\\\"data-srcset\\\"),\\n                  o = a.attr(\\\"data-sizes\\\");T.loadImage(a[0], r || i, n, o, !1, function () {\\n                if (void 0 !== T && null !== T && T) {\\n                  if (i ? (a.css(\\\"background-image\\\", 'url(\\\"' + i + '\\\")'), a.removeAttr(\\\"data-background\\\")) : (n && (a.attr(\\\"srcset\\\", n), a.removeAttr(\\\"data-srcset\\\")), o && (a.attr(\\\"sizes\\\", o), a.removeAttr(\\\"data-sizes\\\")), r && (a.attr(\\\"src\\\", r), a.removeAttr(\\\"data-src\\\"))), a.addClass(T.params.lazyStatusLoadedClass).removeClass(T.params.lazyStatusLoadingClass), s.find(\\\".\\\" + T.params.lazyPreloaderClass + \\\", .\\\" + T.params.preloaderClass).remove(), T.params.loop && t) {\\n                    var e = s.attr(\\\"data-swiper-slide-index\\\");if (s.hasClass(T.params.slideDuplicateClass)) {\\n                      var l = T.wrapper.children('[data-swiper-slide-index=\\\"' + e + '\\\"]:not(.' + T.params.slideDuplicateClass + \\\")\\\");T.lazy.loadImageInSlide(l.index(), !1);\\n                    } else {\\n                      var p = T.wrapper.children(\\\".\\\" + T.params.slideDuplicateClass + '[data-swiper-slide-index=\\\"' + e + '\\\"]');T.lazy.loadImageInSlide(p.index(), !1);\\n                    }\\n                  }T.emit(\\\"onLazyImageReady\\\", T, s[0], a[0]);\\n                }\\n              }), T.emit(\\\"onLazyImageLoad\\\", T, s[0], a[0]);\\n            });\\n          }\\n        }, load: function load() {\\n          var a,\\n              t = T.params.slidesPerView;if (\\\"auto\\\" === t && (t = 0), T.lazy.initialImageLoaded || (T.lazy.initialImageLoaded = !0), T.params.watchSlidesVisibility) T.wrapper.children(\\\".\\\" + T.params.slideVisibleClass).each(function () {\\n            T.lazy.loadImageInSlide(e(this).index());\\n          });else if (t > 1) for (a = T.activeIndex; a < T.activeIndex + t; a++) {\\n            T.slides[a] && T.lazy.loadImageInSlide(a);\\n          } else T.lazy.loadImageInSlide(T.activeIndex);if (T.params.lazyLoadingInPrevNext) if (t > 1 || T.params.lazyLoadingInPrevNextAmount && T.params.lazyLoadingInPrevNextAmount > 1) {\\n            var s = T.params.lazyLoadingInPrevNextAmount,\\n                i = t,\\n                r = Math.min(T.activeIndex + i + Math.max(s, i), T.slides.length),\\n                n = Math.max(T.activeIndex - Math.max(i, s), 0);for (a = T.activeIndex + t; a < r; a++) {\\n              T.slides[a] && T.lazy.loadImageInSlide(a);\\n            }for (a = n; a < T.activeIndex; a++) {\\n              T.slides[a] && T.lazy.loadImageInSlide(a);\\n            }\\n          } else {\\n            var o = T.wrapper.children(\\\".\\\" + T.params.slideNextClass);o.length > 0 && T.lazy.loadImageInSlide(o.index());var l = T.wrapper.children(\\\".\\\" + T.params.slidePrevClass);l.length > 0 && T.lazy.loadImageInSlide(l.index());\\n          }\\n        }, onTransitionStart: function onTransitionStart() {\\n          T.params.lazyLoading && (T.params.lazyLoadingOnTransitionStart || !T.params.lazyLoadingOnTransitionStart && !T.lazy.initialImageLoaded) && T.lazy.load();\\n        }, onTransitionEnd: function onTransitionEnd() {\\n          T.params.lazyLoading && !T.params.lazyLoadingOnTransitionStart && T.lazy.load();\\n        } }, T.scrollbar = { isTouched: !1, setDragPosition: function setDragPosition(e) {\\n          var a = T.scrollbar,\\n              t = T.isHorizontal() ? \\\"touchstart\\\" === e.type || \\\"touchmove\\\" === e.type ? e.targetTouches[0].pageX : e.pageX || e.clientX : \\\"touchstart\\\" === e.type || \\\"touchmove\\\" === e.type ? e.targetTouches[0].pageY : e.pageY || e.clientY,\\n              s = t - a.track.offset()[T.isHorizontal() ? \\\"left\\\" : \\\"top\\\"] - a.dragSize / 2,\\n              i = -T.minTranslate() * a.moveDivider,\\n              r = -T.maxTranslate() * a.moveDivider;s < i ? s = i : s > r && (s = r), s = -s / a.moveDivider, T.updateProgress(s), T.setWrapperTranslate(s, !0);\\n        }, dragStart: function dragStart(e) {\\n          var a = T.scrollbar;a.isTouched = !0, e.preventDefault(), e.stopPropagation(), a.setDragPosition(e), clearTimeout(a.dragTimeout), a.track.transition(0), T.params.scrollbarHide && a.track.css(\\\"opacity\\\", 1), T.wrapper.transition(100), a.drag.transition(100), T.emit(\\\"onScrollbarDragStart\\\", T);\\n        }, dragMove: function dragMove(e) {\\n          var a = T.scrollbar;a.isTouched && (e.preventDefault ? e.preventDefault() : e.returnValue = !1, a.setDragPosition(e), T.wrapper.transition(0), a.track.transition(0), a.drag.transition(0), T.emit(\\\"onScrollbarDragMove\\\", T));\\n        }, dragEnd: function dragEnd(e) {\\n          var a = T.scrollbar;a.isTouched && (a.isTouched = !1, T.params.scrollbarHide && (clearTimeout(a.dragTimeout), a.dragTimeout = setTimeout(function () {\\n            a.track.css(\\\"opacity\\\", 0), a.track.transition(400);\\n          }, 1e3)), T.emit(\\\"onScrollbarDragEnd\\\", T), T.params.scrollbarSnapOnRelease && T.slideReset());\\n        }, draggableEvents: function () {\\n          return T.params.simulateTouch !== !1 || T.support.touch ? T.touchEvents : T.touchEventsDesktop;\\n        }(), enableDraggable: function enableDraggable() {\\n          var a = T.scrollbar,\\n              t = T.support.touch ? a.track : document;e(a.track).on(a.draggableEvents.start, a.dragStart), e(t).on(a.draggableEvents.move, a.dragMove), e(t).on(a.draggableEvents.end, a.dragEnd);\\n        }, disableDraggable: function disableDraggable() {\\n          var a = T.scrollbar,\\n              t = T.support.touch ? a.track : document;e(a.track).off(a.draggableEvents.start, a.dragStart), e(t).off(a.draggableEvents.move, a.dragMove), e(t).off(a.draggableEvents.end, a.dragEnd);\\n        }, set: function set() {\\n          if (T.params.scrollbar) {\\n            var a = T.scrollbar;a.track = e(T.params.scrollbar), T.params.uniqueNavElements && \\\"string\\\" == typeof T.params.scrollbar && a.track.length > 1 && 1 === T.container.find(T.params.scrollbar).length && (a.track = T.container.find(T.params.scrollbar)), a.drag = a.track.find(\\\".swiper-scrollbar-drag\\\"), 0 === a.drag.length && (a.drag = e('<div class=\\\"swiper-scrollbar-drag\\\"></div>'), a.track.append(a.drag)), a.drag[0].style.width = \\\"\\\", a.drag[0].style.height = \\\"\\\", a.trackSize = T.isHorizontal() ? a.track[0].offsetWidth : a.track[0].offsetHeight, a.divider = T.size / T.virtualSize, a.moveDivider = a.divider * (a.trackSize / T.size), a.dragSize = a.trackSize * a.divider, T.isHorizontal() ? a.drag[0].style.width = a.dragSize + \\\"px\\\" : a.drag[0].style.height = a.dragSize + \\\"px\\\", a.divider >= 1 ? a.track[0].style.display = \\\"none\\\" : a.track[0].style.display = \\\"\\\", T.params.scrollbarHide && (a.track[0].style.opacity = 0);\\n          }\\n        }, setTranslate: function setTranslate() {\\n          if (T.params.scrollbar) {\\n            var e,\\n                a = T.scrollbar,\\n                t = (T.translate, a.dragSize);e = (a.trackSize - a.dragSize) * T.progress, T.rtl && T.isHorizontal() ? (e = -e, e > 0 ? (t = a.dragSize - e, e = 0) : -e + a.dragSize > a.trackSize && (t = a.trackSize + e)) : e < 0 ? (t = a.dragSize + e, e = 0) : e + a.dragSize > a.trackSize && (t = a.trackSize - e), T.isHorizontal() ? (T.support.transforms3d ? a.drag.transform(\\\"translate3d(\\\" + e + \\\"px, 0, 0)\\\") : a.drag.transform(\\\"translateX(\\\" + e + \\\"px)\\\"), a.drag[0].style.width = t + \\\"px\\\") : (T.support.transforms3d ? a.drag.transform(\\\"translate3d(0px, \\\" + e + \\\"px, 0)\\\") : a.drag.transform(\\\"translateY(\\\" + e + \\\"px)\\\"), a.drag[0].style.height = t + \\\"px\\\"), T.params.scrollbarHide && (clearTimeout(a.timeout), a.track[0].style.opacity = 1, a.timeout = setTimeout(function () {\\n              a.track[0].style.opacity = 0, a.track.transition(400);\\n            }, 1e3));\\n          }\\n        }, setTransition: function setTransition(e) {\\n          T.params.scrollbar && T.scrollbar.drag.transition(e);\\n        } }, T.controller = { LinearSpline: function LinearSpline(e, a) {\\n          var t = function () {\\n            var e, a, t;return function (s, i) {\\n              for (a = -1, e = s.length; e - a > 1;) {\\n                s[t = e + a >> 1] <= i ? a = t : e = t;\\n              }return e;\\n            };\\n          }();this.x = e, this.y = a, this.lastIndex = e.length - 1;var s, i;this.x.length;this.interpolate = function (e) {\\n            return e ? (i = t(this.x, e), s = i - 1, (e - this.x[s]) * (this.y[i] - this.y[s]) / (this.x[i] - this.x[s]) + this.y[s]) : 0;\\n          };\\n        }, getInterpolateFunction: function getInterpolateFunction(e) {\\n          T.controller.spline || (T.controller.spline = T.params.loop ? new T.controller.LinearSpline(T.slidesGrid, e.slidesGrid) : new T.controller.LinearSpline(T.snapGrid, e.snapGrid));\\n        }, setTranslate: function setTranslate(e, t) {\\n          function s(a) {\\n            e = a.rtl && \\\"horizontal\\\" === a.params.direction ? -T.translate : T.translate, \\\"slide\\\" === T.params.controlBy && (T.controller.getInterpolateFunction(a), r = -T.controller.spline.interpolate(-e)), r && \\\"container\\\" !== T.params.controlBy || (i = (a.maxTranslate() - a.minTranslate()) / (T.maxTranslate() - T.minTranslate()), r = (e - T.minTranslate()) * i + a.minTranslate()), T.params.controlInverse && (r = a.maxTranslate() - r), a.updateProgress(r), a.setWrapperTranslate(r, !1, T), a.updateActiveIndex();\\n          }var i,\\n              r,\\n              n = T.params.control;if (Array.isArray(n)) for (var o = 0; o < n.length; o++) {\\n            n[o] !== t && n[o] instanceof a && s(n[o]);\\n          } else n instanceof a && t !== n && s(n);\\n        }, setTransition: function setTransition(e, t) {\\n          function s(a) {\\n            a.setWrapperTransition(e, T), 0 !== e && (a.onTransitionStart(), a.wrapper.transitionEnd(function () {\\n              r && (a.params.loop && \\\"slide\\\" === T.params.controlBy && a.fixLoop(), a.onTransitionEnd());\\n            }));\\n          }var i,\\n              r = T.params.control;if (Array.isArray(r)) for (i = 0; i < r.length; i++) {\\n            r[i] !== t && r[i] instanceof a && s(r[i]);\\n          } else r instanceof a && t !== r && s(r);\\n        } }, T.hashnav = { onHashCange: function onHashCange(e, a) {\\n          var t = document.location.hash.replace(\\\"#\\\", \\\"\\\");t !== T.slides.eq(T.activeIndex).attr(\\\"data-hash\\\") && T.slideTo(T.wrapper.children(\\\".\\\" + T.params.slideClass + '[data-hash=\\\"' + t + '\\\"]').index());\\n        }, attachEvents: function attachEvents(a) {\\n          var t = a ? \\\"off\\\" : \\\"on\\\";e(window)[t](\\\"hashchange\\\", T.hashnav.onHashCange);\\n        }, setHash: function setHash() {\\n          if (T.hashnav.initialized && T.params.hashnav) if (T.params.replaceState && window.history && window.history.replaceState) window.history.replaceState(null, null, \\\"#\\\" + T.slides.eq(T.activeIndex).attr(\\\"data-hash\\\") || \\\"\\\");else {\\n            var e = T.slides.eq(T.activeIndex),\\n                a = e.attr(\\\"data-hash\\\") || e.attr(\\\"data-history\\\");document.location.hash = a || \\\"\\\";\\n          }\\n        }, init: function init() {\\n          if (T.params.hashnav && !T.params.history) {\\n            T.hashnav.initialized = !0;var e = document.location.hash.replace(\\\"#\\\", \\\"\\\");if (e) for (var a = 0, t = T.slides.length; a < t; a++) {\\n              var s = T.slides.eq(a),\\n                  i = s.attr(\\\"data-hash\\\") || s.attr(\\\"data-history\\\");if (i === e && !s.hasClass(T.params.slideDuplicateClass)) {\\n                var r = s.index();T.slideTo(r, 0, T.params.runCallbacksOnInit, !0);\\n              }\\n            }T.params.hashnavWatchState && T.hashnav.attachEvents();\\n          }\\n        }, destroy: function destroy() {\\n          T.params.hashnavWatchState && T.hashnav.attachEvents(!0);\\n        } }, T.history = { init: function init() {\\n          if (T.params.history) {\\n            if (!window.history || !window.history.pushState) return T.params.history = !1, void (T.params.hashnav = !0);T.history.initialized = !0, this.paths = this.getPathValues(), (this.paths.key || this.paths.value) && (this.scrollToSlide(0, this.paths.value, T.params.runCallbacksOnInit), T.params.replaceState || window.addEventListener(\\\"popstate\\\", this.setHistoryPopState));\\n          }\\n        }, setHistoryPopState: function setHistoryPopState() {\\n          T.history.paths = T.history.getPathValues(), T.history.scrollToSlide(T.params.speed, T.history.paths.value, !1);\\n        }, getPathValues: function getPathValues() {\\n          var e = window.location.pathname.slice(1).split(\\\"/\\\"),\\n              a = e.length;return { key: e[a - 2], value: e[a - 1] };\\n        }, setHistory: function setHistory(e, a) {\\n          if (T.history.initialized && T.params.history) {\\n            var t = T.slides.eq(a),\\n                s = this.slugify(t.attr(\\\"data-history\\\"));window.location.pathname.includes(e) || (s = e + \\\"/\\\" + s), T.params.replaceState ? window.history.replaceState(null, null, s) : window.history.pushState(null, null, s);\\n          }\\n        }, slugify: function slugify(e) {\\n          return e.toString().toLowerCase().replace(/\\\\s+/g, \\\"-\\\").replace(/[^\\\\w\\\\-]+/g, \\\"\\\").replace(/\\\\-\\\\-+/g, \\\"-\\\").replace(/^-+/, \\\"\\\").replace(/-+$/, \\\"\\\");\\n        }, scrollToSlide: function scrollToSlide(e, a, t) {\\n          if (a) for (var s = 0, i = T.slides.length; s < i; s++) {\\n            var r = T.slides.eq(s),\\n                n = this.slugify(r.attr(\\\"data-history\\\"));if (n === a && !r.hasClass(T.params.slideDuplicateClass)) {\\n              var o = r.index();T.slideTo(o, e, t);\\n            }\\n          } else T.slideTo(0, e, t);\\n        } }, T.disableKeyboardControl = function () {\\n        T.params.keyboardControl = !1, e(document).off(\\\"keydown\\\", p);\\n      }, T.enableKeyboardControl = function () {\\n        T.params.keyboardControl = !0, e(document).on(\\\"keydown\\\", p);\\n      }, T.mousewheel = { event: !1, lastScrollTime: new window.Date().getTime() }, T.params.mousewheelControl && (T.mousewheel.event = navigator.userAgent.indexOf(\\\"firefox\\\") > -1 ? \\\"DOMMouseScroll\\\" : function () {\\n        var e = \\\"onwheel\\\" in document;if (!e) {\\n          var a = document.createElement(\\\"div\\\");a.setAttribute(\\\"onwheel\\\", \\\"return;\\\"), e = \\\"function\\\" == typeof a.onwheel;\\n        }return !e && document.implementation && document.implementation.hasFeature && document.implementation.hasFeature(\\\"\\\", \\\"\\\") !== !0 && (e = document.implementation.hasFeature(\\\"Events.wheel\\\", \\\"3.0\\\")), e;\\n      }() ? \\\"wheel\\\" : \\\"mousewheel\\\"), T.disableMousewheelControl = function () {\\n        if (!T.mousewheel.event) return !1;var a = T.container;return \\\"container\\\" !== T.params.mousewheelEventsTarged && (a = e(T.params.mousewheelEventsTarged)), a.off(T.mousewheel.event, u), T.params.mousewheelControl = !1, !0;\\n      }, T.enableMousewheelControl = function () {\\n        if (!T.mousewheel.event) return !1;var a = T.container;return \\\"container\\\" !== T.params.mousewheelEventsTarged && (a = e(T.params.mousewheelEventsTarged)), a.on(T.mousewheel.event, u), T.params.mousewheelControl = !0, !0;\\n      }, T.parallax = { setTranslate: function setTranslate() {\\n          T.container.children(\\\"[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]\\\").each(function () {\\n            c(this, T.progress);\\n          }), T.slides.each(function () {\\n            var a = e(this);a.find(\\\"[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]\\\").each(function () {\\n              c(this, Math.min(Math.max(a[0].progress, -1), 1));\\n            });\\n          });\\n        }, setTransition: function setTransition(a) {\\n          void 0 === a && (a = T.params.speed), T.container.find(\\\"[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]\\\").each(function () {\\n            var t = e(this),\\n                s = parseInt(t.attr(\\\"data-swiper-parallax-duration\\\"), 10) || a;0 === a && (s = 0), t.transition(s);\\n          });\\n        } }, T.zoom = { scale: 1, currentScale: 1, isScaling: !1, gesture: { slide: void 0, slideWidth: void 0, slideHeight: void 0, image: void 0, imageWrap: void 0, zoomMax: T.params.zoomMax }, image: { isTouched: void 0, isMoved: void 0, currentX: void 0, currentY: void 0, minX: void 0, minY: void 0, maxX: void 0, maxY: void 0, width: void 0, height: void 0, startX: void 0, startY: void 0, touchesStart: {}, touchesCurrent: {} }, velocity: { x: void 0, y: void 0, prevPositionX: void 0, prevPositionY: void 0, prevTime: void 0 }, getDistanceBetweenTouches: function getDistanceBetweenTouches(e) {\\n          if (e.targetTouches.length < 2) return 1;var a = e.targetTouches[0].pageX,\\n              t = e.targetTouches[0].pageY,\\n              s = e.targetTouches[1].pageX,\\n              i = e.targetTouches[1].pageY;return Math.sqrt(Math.pow(s - a, 2) + Math.pow(i - t, 2));\\n        }, onGestureStart: function onGestureStart(a) {\\n          var t = T.zoom;if (!T.support.gestures) {\\n            if (\\\"touchstart\\\" !== a.type || \\\"touchstart\\\" === a.type && a.targetTouches.length < 2) return;t.gesture.scaleStart = t.getDistanceBetweenTouches(a);\\n          }if (!(t.gesture.slide && t.gesture.slide.length || (t.gesture.slide = e(this), 0 === t.gesture.slide.length && (t.gesture.slide = T.slides.eq(T.activeIndex)), t.gesture.image = t.gesture.slide.find(\\\"img, svg, canvas\\\"), t.gesture.imageWrap = t.gesture.image.parent(\\\".\\\" + T.params.zoomContainerClass), t.gesture.zoomMax = t.gesture.imageWrap.attr(\\\"data-swiper-zoom\\\") || T.params.zoomMax, 0 !== t.gesture.imageWrap.length))) return void (t.gesture.image = void 0);t.gesture.image.transition(0), t.isScaling = !0;\\n        }, onGestureChange: function onGestureChange(e) {\\n          var a = T.zoom;if (!T.support.gestures) {\\n            if (\\\"touchmove\\\" !== e.type || \\\"touchmove\\\" === e.type && e.targetTouches.length < 2) return;a.gesture.scaleMove = a.getDistanceBetweenTouches(e);\\n          }a.gesture.image && 0 !== a.gesture.image.length && (T.support.gestures ? a.scale = e.scale * a.currentScale : a.scale = a.gesture.scaleMove / a.gesture.scaleStart * a.currentScale, a.scale > a.gesture.zoomMax && (a.scale = a.gesture.zoomMax - 1 + Math.pow(a.scale - a.gesture.zoomMax + 1, .5)), a.scale < T.params.zoomMin && (a.scale = T.params.zoomMin + 1 - Math.pow(T.params.zoomMin - a.scale + 1, .5)), a.gesture.image.transform(\\\"translate3d(0,0,0) scale(\\\" + a.scale + \\\")\\\"));\\n        }, onGestureEnd: function onGestureEnd(e) {\\n          var a = T.zoom;!T.support.gestures && (\\\"touchend\\\" !== e.type || \\\"touchend\\\" === e.type && e.changedTouches.length < 2) || a.gesture.image && 0 !== a.gesture.image.length && (a.scale = Math.max(Math.min(a.scale, a.gesture.zoomMax), T.params.zoomMin), a.gesture.image.transition(T.params.speed).transform(\\\"translate3d(0,0,0) scale(\\\" + a.scale + \\\")\\\"), a.currentScale = a.scale, a.isScaling = !1, 1 === a.scale && (a.gesture.slide = void 0));\\n        }, onTouchStart: function onTouchStart(e, a) {\\n          var t = e.zoom;t.gesture.image && 0 !== t.gesture.image.length && (t.image.isTouched || (\\\"android\\\" === e.device.os && a.preventDefault(), t.image.isTouched = !0, t.image.touchesStart.x = \\\"touchstart\\\" === a.type ? a.targetTouches[0].pageX : a.pageX, t.image.touchesStart.y = \\\"touchstart\\\" === a.type ? a.targetTouches[0].pageY : a.pageY));\\n        }, onTouchMove: function onTouchMove(e) {\\n          var a = T.zoom;if (a.gesture.image && 0 !== a.gesture.image.length && (T.allowClick = !1, a.image.isTouched && a.gesture.slide)) {\\n            a.image.isMoved || (a.image.width = a.gesture.image[0].offsetWidth, a.image.height = a.gesture.image[0].offsetHeight, a.image.startX = T.getTranslate(a.gesture.imageWrap[0], \\\"x\\\") || 0, a.image.startY = T.getTranslate(a.gesture.imageWrap[0], \\\"y\\\") || 0, a.gesture.slideWidth = a.gesture.slide[0].offsetWidth, a.gesture.slideHeight = a.gesture.slide[0].offsetHeight, a.gesture.imageWrap.transition(0), T.rtl && (a.image.startX = -a.image.startX), T.rtl && (a.image.startY = -a.image.startY));var t = a.image.width * a.scale,\\n                s = a.image.height * a.scale;if (!(t < a.gesture.slideWidth && s < a.gesture.slideHeight)) {\\n              if (a.image.minX = Math.min(a.gesture.slideWidth / 2 - t / 2, 0), a.image.maxX = -a.image.minX, a.image.minY = Math.min(a.gesture.slideHeight / 2 - s / 2, 0), a.image.maxY = -a.image.minY, a.image.touchesCurrent.x = \\\"touchmove\\\" === e.type ? e.targetTouches[0].pageX : e.pageX, a.image.touchesCurrent.y = \\\"touchmove\\\" === e.type ? e.targetTouches[0].pageY : e.pageY, !a.image.isMoved && !a.isScaling) {\\n                if (T.isHorizontal() && Math.floor(a.image.minX) === Math.floor(a.image.startX) && a.image.touchesCurrent.x < a.image.touchesStart.x || Math.floor(a.image.maxX) === Math.floor(a.image.startX) && a.image.touchesCurrent.x > a.image.touchesStart.x) return void (a.image.isTouched = !1);if (!T.isHorizontal() && Math.floor(a.image.minY) === Math.floor(a.image.startY) && a.image.touchesCurrent.y < a.image.touchesStart.y || Math.floor(a.image.maxY) === Math.floor(a.image.startY) && a.image.touchesCurrent.y > a.image.touchesStart.y) return void (a.image.isTouched = !1);\\n              }e.preventDefault(), e.stopPropagation(), a.image.isMoved = !0, a.image.currentX = a.image.touchesCurrent.x - a.image.touchesStart.x + a.image.startX, a.image.currentY = a.image.touchesCurrent.y - a.image.touchesStart.y + a.image.startY, a.image.currentX < a.image.minX && (a.image.currentX = a.image.minX + 1 - Math.pow(a.image.minX - a.image.currentX + 1, .8)), a.image.currentX > a.image.maxX && (a.image.currentX = a.image.maxX - 1 + Math.pow(a.image.currentX - a.image.maxX + 1, .8)), a.image.currentY < a.image.minY && (a.image.currentY = a.image.minY + 1 - Math.pow(a.image.minY - a.image.currentY + 1, .8)), a.image.currentY > a.image.maxY && (a.image.currentY = a.image.maxY - 1 + Math.pow(a.image.currentY - a.image.maxY + 1, .8)), a.velocity.prevPositionX || (a.velocity.prevPositionX = a.image.touchesCurrent.x), a.velocity.prevPositionY || (a.velocity.prevPositionY = a.image.touchesCurrent.y), a.velocity.prevTime || (a.velocity.prevTime = Date.now()), a.velocity.x = (a.image.touchesCurrent.x - a.velocity.prevPositionX) / (Date.now() - a.velocity.prevTime) / 2, a.velocity.y = (a.image.touchesCurrent.y - a.velocity.prevPositionY) / (Date.now() - a.velocity.prevTime) / 2, Math.abs(a.image.touchesCurrent.x - a.velocity.prevPositionX) < 2 && (a.velocity.x = 0), Math.abs(a.image.touchesCurrent.y - a.velocity.prevPositionY) < 2 && (a.velocity.y = 0), a.velocity.prevPositionX = a.image.touchesCurrent.x, a.velocity.prevPositionY = a.image.touchesCurrent.y, a.velocity.prevTime = Date.now(), a.gesture.imageWrap.transform(\\\"translate3d(\\\" + a.image.currentX + \\\"px, \\\" + a.image.currentY + \\\"px,0)\\\");\\n            }\\n          }\\n        }, onTouchEnd: function onTouchEnd(e, a) {\\n          var t = e.zoom;if (t.gesture.image && 0 !== t.gesture.image.length) {\\n            if (!t.image.isTouched || !t.image.isMoved) return t.image.isTouched = !1, void (t.image.isMoved = !1);t.image.isTouched = !1, t.image.isMoved = !1;var s = 300,\\n                i = 300,\\n                r = t.velocity.x * s,\\n                n = t.image.currentX + r,\\n                o = t.velocity.y * i,\\n                l = t.image.currentY + o;0 !== t.velocity.x && (s = Math.abs((n - t.image.currentX) / t.velocity.x)), 0 !== t.velocity.y && (i = Math.abs((l - t.image.currentY) / t.velocity.y));var p = Math.max(s, i);t.image.currentX = n, t.image.currentY = l;var d = t.image.width * t.scale,\\n                u = t.image.height * t.scale;t.image.minX = Math.min(t.gesture.slideWidth / 2 - d / 2, 0), t.image.maxX = -t.image.minX, t.image.minY = Math.min(t.gesture.slideHeight / 2 - u / 2, 0), t.image.maxY = -t.image.minY, t.image.currentX = Math.max(Math.min(t.image.currentX, t.image.maxX), t.image.minX), t.image.currentY = Math.max(Math.min(t.image.currentY, t.image.maxY), t.image.minY), t.gesture.imageWrap.transition(p).transform(\\\"translate3d(\\\" + t.image.currentX + \\\"px, \\\" + t.image.currentY + \\\"px,0)\\\");\\n          }\\n        }, onTransitionEnd: function onTransitionEnd(e) {\\n          var a = e.zoom;a.gesture.slide && e.previousIndex !== e.activeIndex && (a.gesture.image.transform(\\\"translate3d(0,0,0) scale(1)\\\"), a.gesture.imageWrap.transform(\\\"translate3d(0,0,0)\\\"), a.gesture.slide = a.gesture.image = a.gesture.imageWrap = void 0, a.scale = a.currentScale = 1);\\n        }, toggleZoom: function toggleZoom(a, t) {\\n          var s = a.zoom;if (s.gesture.slide || (s.gesture.slide = a.clickedSlide ? e(a.clickedSlide) : a.slides.eq(a.activeIndex), s.gesture.image = s.gesture.slide.find(\\\"img, svg, canvas\\\"), s.gesture.imageWrap = s.gesture.image.parent(\\\".\\\" + a.params.zoomContainerClass)), s.gesture.image && 0 !== s.gesture.image.length) {\\n            var i, r, n, o, l, p, d, u, c, m, h, g, f, v, w, y, x, T;void 0 === s.image.touchesStart.x && t ? (i = \\\"touchend\\\" === t.type ? t.changedTouches[0].pageX : t.pageX, r = \\\"touchend\\\" === t.type ? t.changedTouches[0].pageY : t.pageY) : (i = s.image.touchesStart.x, r = s.image.touchesStart.y), s.scale && 1 !== s.scale ? (s.scale = s.currentScale = 1, s.gesture.imageWrap.transition(300).transform(\\\"translate3d(0,0,0)\\\"), s.gesture.image.transition(300).transform(\\\"translate3d(0,0,0) scale(1)\\\"), s.gesture.slide = void 0) : (s.scale = s.currentScale = s.gesture.imageWrap.attr(\\\"data-swiper-zoom\\\") || a.params.zoomMax, t ? (x = s.gesture.slide[0].offsetWidth, T = s.gesture.slide[0].offsetHeight, n = s.gesture.slide.offset().left, o = s.gesture.slide.offset().top, l = n + x / 2 - i, p = o + T / 2 - r, c = s.gesture.image[0].offsetWidth, m = s.gesture.image[0].offsetHeight, h = c * s.scale, g = m * s.scale, f = Math.min(x / 2 - h / 2, 0), v = Math.min(T / 2 - g / 2, 0), w = -f, y = -v, d = l * s.scale, u = p * s.scale, d < f && (d = f), d > w && (d = w), u < v && (u = v), u > y && (u = y)) : (d = 0, u = 0), s.gesture.imageWrap.transition(300).transform(\\\"translate3d(\\\" + d + \\\"px, \\\" + u + \\\"px,0)\\\"), s.gesture.image.transition(300).transform(\\\"translate3d(0,0,0) scale(\\\" + s.scale + \\\")\\\"));\\n          }\\n        }, attachEvents: function attachEvents(a) {\\n          var t = a ? \\\"off\\\" : \\\"on\\\";if (T.params.zoom) {\\n            var s = (T.slides, !(\\\"touchstart\\\" !== T.touchEvents.start || !T.support.passiveListener || !T.params.passiveListeners) && { passive: !0, capture: !1 });T.support.gestures ? (T.slides[t](\\\"gesturestart\\\", T.zoom.onGestureStart, s), T.slides[t](\\\"gesturechange\\\", T.zoom.onGestureChange, s), T.slides[t](\\\"gestureend\\\", T.zoom.onGestureEnd, s)) : \\\"touchstart\\\" === T.touchEvents.start && (T.slides[t](T.touchEvents.start, T.zoom.onGestureStart, s), T.slides[t](T.touchEvents.move, T.zoom.onGestureChange, s), T.slides[t](T.touchEvents.end, T.zoom.onGestureEnd, s)), T[t](\\\"touchStart\\\", T.zoom.onTouchStart), T.slides.each(function (a, s) {\\n              e(s).find(\\\".\\\" + T.params.zoomContainerClass).length > 0 && e(s)[t](T.touchEvents.move, T.zoom.onTouchMove);\\n            }), T[t](\\\"touchEnd\\\", T.zoom.onTouchEnd), T[t](\\\"transitionEnd\\\", T.zoom.onTransitionEnd), T.params.zoomToggle && T.on(\\\"doubleTap\\\", T.zoom.toggleZoom);\\n          }\\n        }, init: function init() {\\n          T.zoom.attachEvents();\\n        }, destroy: function destroy() {\\n          T.zoom.attachEvents(!0);\\n        } }, T._plugins = [];for (var Y in T.plugins) {\\n        var O = T.plugins[Y](T, T.params[Y]);O && T._plugins.push(O);\\n      }return T.callPlugins = function (e) {\\n        for (var a = 0; a < T._plugins.length; a++) {\\n          e in T._plugins[a] && T._plugins[a][e](arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);\\n        }\\n      }, T.emitterEventListeners = {}, T.emit = function (e) {\\n        T.params[e] && T.params[e](arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);var a;if (T.emitterEventListeners[e]) for (a = 0; a < T.emitterEventListeners[e].length; a++) {\\n          T.emitterEventListeners[e][a](arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);\\n        }T.callPlugins && T.callPlugins(e, arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);\\n      }, T.on = function (e, a) {\\n        return e = m(e), T.emitterEventListeners[e] || (T.emitterEventListeners[e] = []), T.emitterEventListeners[e].push(a), T;\\n      }, T.off = function (e, a) {\\n        var t;if (e = m(e), void 0 === a) return T.emitterEventListeners[e] = [], T;if (T.emitterEventListeners[e] && 0 !== T.emitterEventListeners[e].length) {\\n          for (t = 0; t < T.emitterEventListeners[e].length; t++) {\\n            T.emitterEventListeners[e][t] === a && T.emitterEventListeners[e].splice(t, 1);\\n          }return T;\\n        }\\n      }, T.once = function (e, a) {\\n        e = m(e);var t = function t() {\\n          a(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]), T.off(e, t);\\n        };return T.on(e, t), T;\\n      }, T.a11y = { makeFocusable: function makeFocusable(e) {\\n          return e.attr(\\\"tabIndex\\\", \\\"0\\\"), e;\\n        }, addRole: function addRole(e, a) {\\n          return e.attr(\\\"role\\\", a), e;\\n        }, addLabel: function addLabel(e, a) {\\n          return e.attr(\\\"aria-label\\\", a), e;\\n        }, disable: function disable(e) {\\n          return e.attr(\\\"aria-disabled\\\", !0), e;\\n        }, enable: function enable(e) {\\n          return e.attr(\\\"aria-disabled\\\", !1), e;\\n        }, onEnterKey: function onEnterKey(a) {\\n          13 === a.keyCode && (e(a.target).is(T.params.nextButton) ? (T.onClickNext(a), T.isEnd ? T.a11y.notify(T.params.lastSlideMessage) : T.a11y.notify(T.params.nextSlideMessage)) : e(a.target).is(T.params.prevButton) && (T.onClickPrev(a), T.isBeginning ? T.a11y.notify(T.params.firstSlideMessage) : T.a11y.notify(T.params.prevSlideMessage)), e(a.target).is(\\\".\\\" + T.params.bulletClass) && e(a.target)[0].click());\\n        }, liveRegion: e('<span class=\\\"' + T.params.notificationClass + '\\\" aria-live=\\\"assertive\\\" aria-atomic=\\\"true\\\"></span>'), notify: function notify(e) {\\n          var a = T.a11y.liveRegion;0 !== a.length && (a.html(\\\"\\\"), a.html(e));\\n        }, init: function init() {\\n          T.params.nextButton && T.nextButton && T.nextButton.length > 0 && (T.a11y.makeFocusable(T.nextButton), T.a11y.addRole(T.nextButton, \\\"button\\\"), T.a11y.addLabel(T.nextButton, T.params.nextSlideMessage)), T.params.prevButton && T.prevButton && T.prevButton.length > 0 && (T.a11y.makeFocusable(T.prevButton), T.a11y.addRole(T.prevButton, \\\"button\\\"), T.a11y.addLabel(T.prevButton, T.params.prevSlideMessage)), e(T.container).append(T.a11y.liveRegion);\\n        }, initPagination: function initPagination() {\\n          T.params.pagination && T.params.paginationClickable && T.bullets && T.bullets.length && T.bullets.each(function () {\\n            var a = e(this);T.a11y.makeFocusable(a), T.a11y.addRole(a, \\\"button\\\"), T.a11y.addLabel(a, T.params.paginationBulletMessage.replace(/{{index}}/, a.index() + 1));\\n          });\\n        }, destroy: function destroy() {\\n          T.a11y.liveRegion && T.a11y.liveRegion.length > 0 && T.a11y.liveRegion.remove();\\n        } }, T.init = function () {\\n        T.params.loop && T.createLoop(), T.updateContainerSize(), T.updateSlidesSize(), T.updatePagination(), T.params.scrollbar && T.scrollbar && (T.scrollbar.set(), T.params.scrollbarDraggable && T.scrollbar.enableDraggable()), \\\"slide\\\" !== T.params.effect && T.effects[T.params.effect] && (T.params.loop || T.updateProgress(), T.effects[T.params.effect].setTranslate()), T.params.loop ? T.slideTo(T.params.initialSlide + T.loopedSlides, 0, T.params.runCallbacksOnInit) : (T.slideTo(T.params.initialSlide, 0, T.params.runCallbacksOnInit), 0 === T.params.initialSlide && (T.parallax && T.params.parallax && T.parallax.setTranslate(), T.lazy && T.params.lazyLoading && (T.lazy.load(), T.lazy.initialImageLoaded = !0))), T.attachEvents(), T.params.observer && T.support.observer && T.initObservers(), T.params.preloadImages && !T.params.lazyLoading && T.preloadImages(), T.params.zoom && T.zoom && T.zoom.init(), T.params.autoplay && T.startAutoplay(), T.params.keyboardControl && T.enableKeyboardControl && T.enableKeyboardControl(), T.params.mousewheelControl && T.enableMousewheelControl && T.enableMousewheelControl(), T.params.hashnavReplaceState && (T.params.replaceState = T.params.hashnavReplaceState), T.params.history && T.history && T.history.init(), T.params.hashnav && T.hashnav && T.hashnav.init(), T.params.a11y && T.a11y && T.a11y.init(), T.emit(\\\"onInit\\\", T);\\n      }, T.cleanupStyles = function () {\\n        T.container.removeClass(T.classNames.join(\\\" \\\")).removeAttr(\\\"style\\\"), T.wrapper.removeAttr(\\\"style\\\"), T.slides && T.slides.length && T.slides.removeClass([T.params.slideVisibleClass, T.params.slideActiveClass, T.params.slideNextClass, T.params.slidePrevClass].join(\\\" \\\")).removeAttr(\\\"style\\\").removeAttr(\\\"data-swiper-column\\\").removeAttr(\\\"data-swiper-row\\\"), T.paginationContainer && T.paginationContainer.length && T.paginationContainer.removeClass(T.params.paginationHiddenClass), T.bullets && T.bullets.length && T.bullets.removeClass(T.params.bulletActiveClass), T.params.prevButton && e(T.params.prevButton).removeClass(T.params.buttonDisabledClass), T.params.nextButton && e(T.params.nextButton).removeClass(T.params.buttonDisabledClass), T.params.scrollbar && T.scrollbar && (T.scrollbar.track && T.scrollbar.track.length && T.scrollbar.track.removeAttr(\\\"style\\\"), T.scrollbar.drag && T.scrollbar.drag.length && T.scrollbar.drag.removeAttr(\\\"style\\\"));\\n      }, T.destroy = function (e, a) {\\n        T.detachEvents(), T.stopAutoplay(), T.params.scrollbar && T.scrollbar && T.params.scrollbarDraggable && T.scrollbar.disableDraggable(), T.params.loop && T.destroyLoop(), a && T.cleanupStyles(), T.disconnectObservers(), T.params.zoom && T.zoom && T.zoom.destroy(), T.params.keyboardControl && T.disableKeyboardControl && T.disableKeyboardControl(), T.params.mousewheelControl && T.disableMousewheelControl && T.disableMousewheelControl(), T.params.a11y && T.a11y && T.a11y.destroy(), T.params.history && !T.params.replaceState && window.removeEventListener(\\\"popstate\\\", T.history.setHistoryPopState), T.params.hashnav && T.hashnav && T.hashnav.destroy(), T.emit(\\\"onDestroy\\\"), e !== !1 && (T = null);\\n      }, T.init(), T;\\n    }\\n  };a.prototype = { isSafari: function () {\\n      var e = window.navigator.userAgent.toLowerCase();return e.indexOf(\\\"safari\\\") >= 0 && e.indexOf(\\\"chrome\\\") < 0 && e.indexOf(\\\"android\\\") < 0;\\n    }(), isUiWebView: /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(window.navigator.userAgent), isArray: function isArray(e) {\\n      return \\\"[object Array]\\\" === Object.prototype.toString.apply(e);\\n    }, browser: { ie: window.navigator.pointerEnabled || window.navigator.msPointerEnabled, ieTouch: window.navigator.msPointerEnabled && window.navigator.msMaxTouchPoints > 1 || window.navigator.pointerEnabled && window.navigator.maxTouchPoints > 1, lteIE9: function () {\\n        var e = document.createElement(\\\"div\\\");return e.innerHTML = \\\"<!--[if lte IE 9]><i></i><![endif]-->\\\", 1 === e.getElementsByTagName(\\\"i\\\").length;\\n      }() }, device: function () {\\n      var e = window.navigator.userAgent,\\n          a = e.match(/(Android);?[\\\\s\\\\/]+([\\\\d.]+)?/),\\n          t = e.match(/(iPad).*OS\\\\s([\\\\d_]+)/),\\n          s = e.match(/(iPod)(.*OS\\\\s([\\\\d_]+))?/),\\n          i = !t && e.match(/(iPhone\\\\sOS|iOS)\\\\s([\\\\d_]+)/);return { ios: t || i || s, android: a };\\n    }(), support: { touch: window.Modernizr && Modernizr.touch === !0 || function () {\\n        return !!(\\\"ontouchstart\\\" in window || window.DocumentTouch && document instanceof DocumentTouch);\\n      }(), transforms3d: window.Modernizr && Modernizr.csstransforms3d === !0 || function () {\\n        var e = document.createElement(\\\"div\\\").style;return \\\"webkitPerspective\\\" in e || \\\"MozPerspective\\\" in e || \\\"OPerspective\\\" in e || \\\"MsPerspective\\\" in e || \\\"perspective\\\" in e;\\n      }(), flexbox: function () {\\n        for (var e = document.createElement(\\\"div\\\").style, a = \\\"alignItems webkitAlignItems webkitBoxAlign msFlexAlign mozBoxAlign webkitFlexDirection msFlexDirection mozBoxDirection mozBoxOrient webkitBoxDirection webkitBoxOrient\\\".split(\\\" \\\"), t = 0; t < a.length; t++) {\\n          if (a[t] in e) return !0;\\n        }\\n      }(), observer: function () {\\n        return \\\"MutationObserver\\\" in window || \\\"WebkitMutationObserver\\\" in window;\\n      }(), passiveListener: function () {\\n        var e = !1;try {\\n          var a = Object.defineProperty({}, \\\"passive\\\", { get: function get() {\\n              e = !0;\\n            } });window.addEventListener(\\\"testPassiveListener\\\", null, a);\\n        } catch (e) {}return e;\\n      }(), gestures: function () {\\n        return \\\"ongesturestart\\\" in window;\\n      }() }, plugins: {} };for (var t = function () {\\n    var e = function e(_e) {\\n      var a = this,\\n          t = 0;for (t = 0; t < _e.length; t++) {\\n        a[t] = _e[t];\\n      }return a.length = _e.length, this;\\n    },\\n        a = function a(_a, t) {\\n      var s = [],\\n          i = 0;if (_a && !t && _a instanceof e) return _a;if (_a) if (\\\"string\\\" == typeof _a) {\\n        var r,\\n            n,\\n            o = _a.trim();if (o.indexOf(\\\"<\\\") >= 0 && o.indexOf(\\\">\\\") >= 0) {\\n          var l = \\\"div\\\";for (0 === o.indexOf(\\\"<li\\\") && (l = \\\"ul\\\"), 0 === o.indexOf(\\\"<tr\\\") && (l = \\\"tbody\\\"), 0 !== o.indexOf(\\\"<td\\\") && 0 !== o.indexOf(\\\"<th\\\") || (l = \\\"tr\\\"), 0 === o.indexOf(\\\"<tbody\\\") && (l = \\\"table\\\"), 0 === o.indexOf(\\\"<option\\\") && (l = \\\"select\\\"), n = document.createElement(l), n.innerHTML = _a, i = 0; i < n.childNodes.length; i++) {\\n            s.push(n.childNodes[i]);\\n          }\\n        } else for (r = t || \\\"#\\\" !== _a[0] || _a.match(/[ .<>:~]/) ? (t || document).querySelectorAll(_a) : [document.getElementById(_a.split(\\\"#\\\")[1])], i = 0; i < r.length; i++) {\\n          r[i] && s.push(r[i]);\\n        }\\n      } else if (_a.nodeType || _a === window || _a === document) s.push(_a);else if (_a.length > 0 && _a[0].nodeType) for (i = 0; i < _a.length; i++) {\\n        s.push(_a[i]);\\n      }return new e(s);\\n    };return e.prototype = { addClass: function addClass(e) {\\n        if (void 0 === e) return this;for (var a = e.split(\\\" \\\"), t = 0; t < a.length; t++) {\\n          for (var s = 0; s < this.length; s++) {\\n            this[s].classList.add(a[t]);\\n          }\\n        }return this;\\n      }, removeClass: function removeClass(e) {\\n        for (var a = e.split(\\\" \\\"), t = 0; t < a.length; t++) {\\n          for (var s = 0; s < this.length; s++) {\\n            this[s].classList.remove(a[t]);\\n          }\\n        }return this;\\n      }, hasClass: function hasClass(e) {\\n        return !!this[0] && this[0].classList.contains(e);\\n      }, toggleClass: function toggleClass(e) {\\n        for (var a = e.split(\\\" \\\"), t = 0; t < a.length; t++) {\\n          for (var s = 0; s < this.length; s++) {\\n            this[s].classList.toggle(a[t]);\\n          }\\n        }return this;\\n      }, attr: function attr(e, a) {\\n        if (1 === arguments.length && \\\"string\\\" == typeof e) return this[0] ? this[0].getAttribute(e) : void 0;for (var t = 0; t < this.length; t++) {\\n          if (2 === arguments.length) this[t].setAttribute(e, a);else for (var s in e) {\\n            this[t][s] = e[s], this[t].setAttribute(s, e[s]);\\n          }\\n        }return this;\\n      }, removeAttr: function removeAttr(e) {\\n        for (var a = 0; a < this.length; a++) {\\n          this[a].removeAttribute(e);\\n        }return this;\\n      }, data: function data(e, a) {\\n        if (void 0 !== a) {\\n          for (var t = 0; t < this.length; t++) {\\n            var s = this[t];s.dom7ElementDataStorage || (s.dom7ElementDataStorage = {}), s.dom7ElementDataStorage[e] = a;\\n          }return this;\\n        }if (this[0]) {\\n          var i = this[0].getAttribute(\\\"data-\\\" + e);return i ? i : this[0].dom7ElementDataStorage && (e in this[0].dom7ElementDataStorage) ? this[0].dom7ElementDataStorage[e] : void 0;\\n        }\\n      }, transform: function transform(e) {\\n        for (var a = 0; a < this.length; a++) {\\n          var t = this[a].style;t.webkitTransform = t.MsTransform = t.msTransform = t.MozTransform = t.OTransform = t.transform = e;\\n        }return this;\\n      }, transition: function transition(e) {\\n        \\\"string\\\" != typeof e && (e += \\\"ms\\\");for (var a = 0; a < this.length; a++) {\\n          var t = this[a].style;t.webkitTransitionDuration = t.MsTransitionDuration = t.msTransitionDuration = t.MozTransitionDuration = t.OTransitionDuration = t.transitionDuration = e;\\n        }return this;\\n      }, on: function on(e, t, s, i) {\\n        function r(e) {\\n          var i = e.target;if (a(i).is(t)) s.call(i, e);else for (var r = a(i).parents(), n = 0; n < r.length; n++) {\\n            a(r[n]).is(t) && s.call(r[n], e);\\n          }\\n        }var n,\\n            o,\\n            l = e.split(\\\" \\\");for (n = 0; n < this.length; n++) {\\n          if (\\\"function\\\" == typeof t || t === !1) for (\\\"function\\\" == typeof t && (s = arguments[1], i = arguments[2] || !1), o = 0; o < l.length; o++) {\\n            this[n].addEventListener(l[o], s, i);\\n          } else for (o = 0; o < l.length; o++) {\\n            this[n].dom7LiveListeners || (this[n].dom7LiveListeners = []), this[n].dom7LiveListeners.push({ listener: s, liveListener: r }), this[n].addEventListener(l[o], r, i);\\n          }\\n        }return this;\\n      }, off: function off(e, a, t, s) {\\n        for (var i = e.split(\\\" \\\"), r = 0; r < i.length; r++) {\\n          for (var n = 0; n < this.length; n++) {\\n            if (\\\"function\\\" == typeof a || a === !1) \\\"function\\\" == typeof a && (t = arguments[1], s = arguments[2] || !1), this[n].removeEventListener(i[r], t, s);else if (this[n].dom7LiveListeners) for (var o = 0; o < this[n].dom7LiveListeners.length; o++) {\\n              this[n].dom7LiveListeners[o].listener === t && this[n].removeEventListener(i[r], this[n].dom7LiveListeners[o].liveListener, s);\\n            }\\n          }\\n        }return this;\\n      }, once: function once(e, a, t, s) {\\n        function i(n) {\\n          t(n), r.off(e, a, i, s);\\n        }var r = this;\\\"function\\\" == typeof a && (a = !1, t = arguments[1], s = arguments[2]), r.on(e, a, i, s);\\n      }, trigger: function trigger(e, a) {\\n        for (var t = 0; t < this.length; t++) {\\n          var s;try {\\n            s = new window.CustomEvent(e, { detail: a, bubbles: !0, cancelable: !0 });\\n          } catch (t) {\\n            s = document.createEvent(\\\"Event\\\"), s.initEvent(e, !0, !0), s.detail = a;\\n          }this[t].dispatchEvent(s);\\n        }return this;\\n      }, transitionEnd: function transitionEnd(e) {\\n        function a(r) {\\n          if (r.target === this) for (e.call(this, r), t = 0; t < s.length; t++) {\\n            i.off(s[t], a);\\n          }\\n        }var t,\\n            s = [\\\"webkitTransitionEnd\\\", \\\"transitionend\\\", \\\"oTransitionEnd\\\", \\\"MSTransitionEnd\\\", \\\"msTransitionEnd\\\"],\\n            i = this;if (e) for (t = 0; t < s.length; t++) {\\n          i.on(s[t], a);\\n        }return this;\\n      }, width: function width() {\\n        return this[0] === window ? window.innerWidth : this.length > 0 ? parseFloat(this.css(\\\"width\\\")) : null;\\n      }, outerWidth: function outerWidth(e) {\\n        return this.length > 0 ? e ? this[0].offsetWidth + parseFloat(this.css(\\\"margin-right\\\")) + parseFloat(this.css(\\\"margin-left\\\")) : this[0].offsetWidth : null;\\n      }, height: function height() {\\n        return this[0] === window ? window.innerHeight : this.length > 0 ? parseFloat(this.css(\\\"height\\\")) : null;\\n      }, outerHeight: function outerHeight(e) {\\n        return this.length > 0 ? e ? this[0].offsetHeight + parseFloat(this.css(\\\"margin-top\\\")) + parseFloat(this.css(\\\"margin-bottom\\\")) : this[0].offsetHeight : null;\\n      }, offset: function offset() {\\n        if (this.length > 0) {\\n          var e = this[0],\\n              a = e.getBoundingClientRect(),\\n              t = document.body,\\n              s = e.clientTop || t.clientTop || 0,\\n              i = e.clientLeft || t.clientLeft || 0,\\n              r = window.pageYOffset || e.scrollTop,\\n              n = window.pageXOffset || e.scrollLeft;return { top: a.top + r - s, left: a.left + n - i };\\n        }return null;\\n      }, css: function css(e, a) {\\n        var t;if (1 === arguments.length) {\\n          if (\\\"string\\\" != typeof e) {\\n            for (t = 0; t < this.length; t++) {\\n              for (var s in e) {\\n                this[t].style[s] = e[s];\\n              }\\n            }return this;\\n          }if (this[0]) return window.getComputedStyle(this[0], null).getPropertyValue(e);\\n        }if (2 === arguments.length && \\\"string\\\" == typeof e) {\\n          for (t = 0; t < this.length; t++) {\\n            this[t].style[e] = a;\\n          }return this;\\n        }return this;\\n      }, each: function each(e) {\\n        for (var a = 0; a < this.length; a++) {\\n          e.call(this[a], a, this[a]);\\n        }return this;\\n      }, html: function html(e) {\\n        if (void 0 === e) return this[0] ? this[0].innerHTML : void 0;for (var a = 0; a < this.length; a++) {\\n          this[a].innerHTML = e;\\n        }return this;\\n      }, text: function text(e) {\\n        if (void 0 === e) return this[0] ? this[0].textContent.trim() : null;for (var a = 0; a < this.length; a++) {\\n          this[a].textContent = e;\\n        }return this;\\n      }, is: function is(t) {\\n        if (!this[0]) return !1;var s, i;if (\\\"string\\\" == typeof t) {\\n          var r = this[0];if (r === document) return t === document;if (r === window) return t === window;if (r.matches) return r.matches(t);if (r.webkitMatchesSelector) return r.webkitMatchesSelector(t);if (r.mozMatchesSelector) return r.mozMatchesSelector(t);if (r.msMatchesSelector) return r.msMatchesSelector(t);for (s = a(t), i = 0; i < s.length; i++) {\\n            if (s[i] === this[0]) return !0;\\n          }return !1;\\n        }if (t === document) return this[0] === document;if (t === window) return this[0] === window;if (t.nodeType || t instanceof e) {\\n          for (s = t.nodeType ? [t] : t, i = 0; i < s.length; i++) {\\n            if (s[i] === this[0]) return !0;\\n          }return !1;\\n        }return !1;\\n      }, index: function index() {\\n        if (this[0]) {\\n          for (var e = this[0], a = 0; null !== (e = e.previousSibling);) {\\n            1 === e.nodeType && a++;\\n          }return a;\\n        }\\n      }, eq: function eq(a) {\\n        if (void 0 === a) return this;var t,\\n            s = this.length;return a > s - 1 ? new e([]) : a < 0 ? (t = s + a, new e(t < 0 ? [] : [this[t]])) : new e([this[a]]);\\n      }, append: function append(a) {\\n        var t, s;for (t = 0; t < this.length; t++) {\\n          if (\\\"string\\\" == typeof a) {\\n            var i = document.createElement(\\\"div\\\");for (i.innerHTML = a; i.firstChild;) {\\n              this[t].appendChild(i.firstChild);\\n            }\\n          } else if (a instanceof e) for (s = 0; s < a.length; s++) {\\n            this[t].appendChild(a[s]);\\n          } else this[t].appendChild(a);\\n        }return this;\\n      }, prepend: function prepend(a) {\\n        var t, s;for (t = 0; t < this.length; t++) {\\n          if (\\\"string\\\" == typeof a) {\\n            var i = document.createElement(\\\"div\\\");for (i.innerHTML = a, s = i.childNodes.length - 1; s >= 0; s--) {\\n              this[t].insertBefore(i.childNodes[s], this[t].childNodes[0]);\\n            }\\n          } else if (a instanceof e) for (s = 0; s < a.length; s++) {\\n            this[t].insertBefore(a[s], this[t].childNodes[0]);\\n          } else this[t].insertBefore(a, this[t].childNodes[0]);\\n        }return this;\\n      }, insertBefore: function insertBefore(e) {\\n        for (var t = a(e), s = 0; s < this.length; s++) {\\n          if (1 === t.length) t[0].parentNode.insertBefore(this[s], t[0]);else if (t.length > 1) for (var i = 0; i < t.length; i++) {\\n            t[i].parentNode.insertBefore(this[s].cloneNode(!0), t[i]);\\n          }\\n        }\\n      }, insertAfter: function insertAfter(e) {\\n        for (var t = a(e), s = 0; s < this.length; s++) {\\n          if (1 === t.length) t[0].parentNode.insertBefore(this[s], t[0].nextSibling);else if (t.length > 1) for (var i = 0; i < t.length; i++) {\\n            t[i].parentNode.insertBefore(this[s].cloneNode(!0), t[i].nextSibling);\\n          }\\n        }\\n      }, next: function next(t) {\\n        return new e(this.length > 0 ? t ? this[0].nextElementSibling && a(this[0].nextElementSibling).is(t) ? [this[0].nextElementSibling] : [] : this[0].nextElementSibling ? [this[0].nextElementSibling] : [] : []);\\n      }, nextAll: function nextAll(t) {\\n        var s = [],\\n            i = this[0];if (!i) return new e([]);for (; i.nextElementSibling;) {\\n          var r = i.nextElementSibling;t ? a(r).is(t) && s.push(r) : s.push(r), i = r;\\n        }return new e(s);\\n      }, prev: function prev(t) {\\n        return new e(this.length > 0 ? t ? this[0].previousElementSibling && a(this[0].previousElementSibling).is(t) ? [this[0].previousElementSibling] : [] : this[0].previousElementSibling ? [this[0].previousElementSibling] : [] : []);\\n      }, prevAll: function prevAll(t) {\\n        var s = [],\\n            i = this[0];if (!i) return new e([]);for (; i.previousElementSibling;) {\\n          var r = i.previousElementSibling;t ? a(r).is(t) && s.push(r) : s.push(r), i = r;\\n        }return new e(s);\\n      }, parent: function parent(e) {\\n        for (var t = [], s = 0; s < this.length; s++) {\\n          e ? a(this[s].parentNode).is(e) && t.push(this[s].parentNode) : t.push(this[s].parentNode);\\n        }return a(a.unique(t));\\n      }, parents: function parents(e) {\\n        for (var t = [], s = 0; s < this.length; s++) {\\n          for (var i = this[s].parentNode; i;) {\\n            e ? a(i).is(e) && t.push(i) : t.push(i), i = i.parentNode;\\n          }\\n        }return a(a.unique(t));\\n      }, find: function find(a) {\\n        for (var t = [], s = 0; s < this.length; s++) {\\n          for (var i = this[s].querySelectorAll(a), r = 0; r < i.length; r++) {\\n            t.push(i[r]);\\n          }\\n        }return new e(t);\\n      }, children: function children(t) {\\n        for (var s = [], i = 0; i < this.length; i++) {\\n          for (var r = this[i].childNodes, n = 0; n < r.length; n++) {\\n            t ? 1 === r[n].nodeType && a(r[n]).is(t) && s.push(r[n]) : 1 === r[n].nodeType && s.push(r[n]);\\n          }\\n        }return new e(a.unique(s));\\n      }, remove: function remove() {\\n        for (var e = 0; e < this.length; e++) {\\n          this[e].parentNode && this[e].parentNode.removeChild(this[e]);\\n        }return this;\\n      }, add: function add() {\\n        var e,\\n            t,\\n            s = this;for (e = 0; e < arguments.length; e++) {\\n          var i = a(arguments[e]);for (t = 0; t < i.length; t++) {\\n            s[s.length] = i[t], s.length++;\\n          }\\n        }return s;\\n      } }, a.fn = e.prototype, a.unique = function (e) {\\n      for (var a = [], t = 0; t < e.length; t++) {\\n        a.indexOf(e[t]) === -1 && a.push(e[t]);\\n      }return a;\\n    }, a;\\n  }(), s = [\\\"jQuery\\\", \\\"Zepto\\\", \\\"Dom7\\\"], i = 0; i < s.length; i++) {\\n    window[s[i]] && function (e) {\\n      e.fn.swiper = function (t) {\\n        var s;return e(this).each(function () {\\n          var e = new a(this, t);s || (s = e);\\n        }), s;\\n      };\\n    }(window[s[i]]);\\n  }var r;r = void 0 === t ? window.Dom7 || window.Zepto || window.jQuery : t, r && (\\\"transitionEnd\\\" in r.fn || (r.fn.transitionEnd = function (e) {\\n    function a(r) {\\n      if (r.target === this) for (e.call(this, r), t = 0; t < s.length; t++) {\\n        i.off(s[t], a);\\n      }\\n    }var t,\\n        s = [\\\"webkitTransitionEnd\\\", \\\"transitionend\\\", \\\"oTransitionEnd\\\", \\\"MSTransitionEnd\\\", \\\"msTransitionEnd\\\"],\\n        i = this;if (e) for (t = 0; t < s.length; t++) {\\n      i.on(s[t], a);\\n    }return this;\\n  }), \\\"transform\\\" in r.fn || (r.fn.transform = function (e) {\\n    for (var a = 0; a < this.length; a++) {\\n      var t = this[a].style;t.webkitTransform = t.MsTransform = t.msTransform = t.MozTransform = t.OTransform = t.transform = e;\\n    }return this;\\n  }), \\\"transition\\\" in r.fn || (r.fn.transition = function (e) {\\n    \\\"string\\\" != typeof e && (e += \\\"ms\\\");for (var a = 0; a < this.length; a++) {\\n      var t = this[a].style;t.webkitTransitionDuration = t.MsTransitionDuration = t.msTransitionDuration = t.MozTransitionDuration = t.OTransitionDuration = t.transitionDuration = e;\\n    }return this;\\n  }), \\\"outerWidth\\\" in r.fn || (r.fn.outerWidth = function (e) {\\n    return this.length > 0 ? e ? this[0].offsetWidth + parseFloat(this.css(\\\"margin-right\\\")) + parseFloat(this.css(\\\"margin-left\\\")) : this[0].offsetWidth : null;\\n  })), window.Swiper = a;\\n}(),  true ? module.exports = window.Swiper : \\\"function\\\" == typeof define && define.amd && define([], function () {\\n  \\\"use strict\\\";\\n  return window.Swiper;\\n});\\n//# sourceMappingURL=maps/swiper.min.js.map//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///63\\n\");/***/},/* 64 *//***/function(module,exports,__webpack_require__){eval(\"// style-loader: Adds some css to the DOM by adding a <style> tag\\n\\n// load the styles\\nvar content = __webpack_require__(65);\\nif(typeof content === 'string') content = [[module.i, content, '']];\\n// add the styles to the DOM\\nvar update = __webpack_require__(1)(content, {});\\nif(content.locals) module.exports = content.locals;\\n// Hot Module Replacement\\nif(false) {\\n\\t// When the styles change, update the <style> tags\\n\\tif(!content.locals) {\\n\\t\\tmodule.hot.accept(\\\"!!./../../../node_modules/.0.23.1@css-loader/index.js!./../../../node_modules/postcss-loader/lib/index.js??ref--0-2!./../../../node_modules/.2.2.3@less-loader/index.js!./swiper.min.css\\\", function() {\\n\\t\\t\\tvar newContent = require(\\\"!!./../../../node_modules/.0.23.1@css-loader/index.js!./../../../node_modules/postcss-loader/lib/index.js??ref--0-2!./../../../node_modules/.2.2.3@less-loader/index.js!./swiper.min.css\\\");\\n\\t\\t\\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\\n\\t\\t\\tupdate(newContent);\\n\\t\\t});\\n\\t}\\n\\t// When the module is disposed, remove the <style> tags\\n\\tmodule.hot.dispose(function() { update(); });\\n}//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvc3dpcGVyLm1pbi5jc3M/OGQwMiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUE4RjtBQUM5RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLGdDQUFnQyxVQUFVLEVBQUU7QUFDNUMiLCJmaWxlIjoiNjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXG4vLyBsb2FkIHRoZSBzdHlsZXNcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvLjAuMjMuMUBjc3MtbG9hZGVyL2luZGV4LmpzIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS0wLTIhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvLjIuMi4zQGxlc3MtbG9hZGVyL2luZGV4LmpzIS4vc3dpcGVyLm1pbi5jc3NcIik7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy4wLjEzLjFAc3R5bGUtbG9hZGVyL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCB7fSk7XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcbmlmKG1vZHVsZS5ob3QpIHtcblx0Ly8gV2hlbiB0aGUgc3R5bGVzIGNoYW5nZSwgdXBkYXRlIHRoZSA8c3R5bGU+IHRhZ3Ncblx0aWYoIWNvbnRlbnQubG9jYWxzKSB7XG5cdFx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy4wLjIzLjFAY3NzLWxvYWRlci9pbmRleC5qcyEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9saWIvaW5kZXguanM/P3JlZi0tMC0yIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy4yLjIuM0BsZXNzLWxvYWRlci9pbmRleC5qcyEuL3N3aXBlci5taW4uY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8uMC4yMy4xQGNzcy1sb2FkZXIvaW5kZXguanMhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTAtMiEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8uMi4yLjNAbGVzcy1sb2FkZXIvaW5kZXguanMhLi9zd2lwZXIubWluLmNzc1wiKTtcblx0XHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXHRcdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHRcdH0pO1xuXHR9XG5cdC8vIFdoZW4gdGhlIG1vZHVsZSBpcyBkaXNwb3NlZCwgcmVtb3ZlIHRoZSA8c3R5bGU+IHRhZ3Ncblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvc3dpcGVyLm1pbi5jc3Ncbi8vIG1vZHVsZSBpZCA9IDY0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///64\\n\");/***/},/* 65 *//***/function(module,exports,__webpack_require__){eval(\"exports = module.exports = __webpack_require__(0)();\\n// imports\\n\\n\\n// module\\nexports.push([module.i, \\\"/**\\\\n * Swiper 3.4.2\\\\n * Most modern mobile touch slider and framework with hardware accelerated transitions\\\\n * \\\\n * http://www.idangero.us/swiper/\\\\n * \\\\n * Copyright 2017, Vladimir Kharlampidi\\\\n * The iDangero.us\\\\n * http://www.idangero.us/\\\\n * \\\\n * Licensed under MIT\\\\n * \\\\n * Released on: March 10, 2017\\\\n */\\\\n.swiper-container {\\\\n  margin-left: auto;\\\\n  margin-right: auto;\\\\n  position: relative;\\\\n  overflow: hidden;\\\\n  z-index: 1;\\\\n}\\\\n.swiper-container-no-flexbox .swiper-slide {\\\\n  float: left;\\\\n}\\\\n.swiper-container-vertical > .swiper-wrapper {\\\\n  -webkit-box-orient: vertical;\\\\n  -ms-flex-direction: column;\\\\n  flex-direction: column;\\\\n}\\\\n.swiper-wrapper {\\\\n  position: relative;\\\\n  width: 100%;\\\\n  height: 100%;\\\\n  z-index: 1;\\\\n  display: -webkit-box;\\\\n  display: -ms-flexbox;\\\\n  display: flex;\\\\n  -webkit-transition-property: -webkit-transform;\\\\n  transition-property: -webkit-transform;\\\\n  transition-property: transform;\\\\n  transition-property: transform, -webkit-transform;\\\\n  -webkit-box-sizing: content-box;\\\\n  box-sizing: content-box;\\\\n}\\\\n.swiper-container-android .swiper-slide,\\\\n.swiper-wrapper {\\\\n  -webkit-transform: translate3d(0, 0, 0);\\\\n  transform: translate3d(0, 0, 0);\\\\n}\\\\n.swiper-container-multirow > .swiper-wrapper {\\\\n  -webkit-box-lines: multiple;\\\\n  -moz-box-lines: multiple;\\\\n  -ms-flex-wrap: wrap;\\\\n  flex-wrap: wrap;\\\\n}\\\\n.swiper-container-free-mode > .swiper-wrapper {\\\\n  -webkit-transition-timing-function: ease-out;\\\\n  transition-timing-function: ease-out;\\\\n  margin: 0 auto;\\\\n}\\\\n.swiper-slide {\\\\n  -webkit-flex-shrink: 0;\\\\n  -ms-flex: 0 0 auto;\\\\n  -ms-flex-negative: 0;\\\\n      flex-shrink: 0;\\\\n  width: 100%;\\\\n  height: 100%;\\\\n  position: relative;\\\\n}\\\\n.swiper-container-autoheight,\\\\n.swiper-container-autoheight .swiper-slide {\\\\n  height: auto;\\\\n}\\\\n.swiper-container-autoheight .swiper-wrapper {\\\\n  -webkit-box-align: start;\\\\n  -ms-flex-align: start;\\\\n  align-items: flex-start;\\\\n  -webkit-transition-property: -webkit-transform, height;\\\\n  -webkit-transition-property: height, -webkit-transform;\\\\n  transition-property: height, -webkit-transform;\\\\n  transition-property: transform, height;\\\\n  transition-property: transform, height, -webkit-transform;\\\\n}\\\\n.swiper-container .swiper-notification {\\\\n  position: absolute;\\\\n  left: 0;\\\\n  top: 0;\\\\n  pointer-events: none;\\\\n  opacity: 0;\\\\n  z-index: -1000;\\\\n}\\\\n.swiper-wp8-horizontal {\\\\n  -ms-touch-action: pan-y;\\\\n  touch-action: pan-y;\\\\n}\\\\n.swiper-wp8-vertical {\\\\n  -ms-touch-action: pan-x;\\\\n  touch-action: pan-x;\\\\n}\\\\n.swiper-button-next,\\\\n.swiper-button-prev {\\\\n  position: absolute;\\\\n  top: 50%;\\\\n  width: 27px;\\\\n  height: 44px;\\\\n  margin-top: -22px;\\\\n  z-index: 10;\\\\n  cursor: pointer;\\\\n  background-size: 27px 44px;\\\\n  background-position: center;\\\\n  background-repeat: no-repeat;\\\\n}\\\\n.swiper-button-next.swiper-button-disabled,\\\\n.swiper-button-prev.swiper-button-disabled {\\\\n  opacity: .35;\\\\n  cursor: auto;\\\\n  pointer-events: none;\\\\n}\\\\n.swiper-button-prev,\\\\n.swiper-container-rtl .swiper-button-next {\\\\n  background-image: url(\\\\\\\"data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns%3D'http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg'%20viewBox%3D'0%200%2027%2044'%3E%3Cpath%20d%3D'M0%2C22L22%2C0l2.1%2C2.1L4.2%2C22l19.9%2C19.9L22%2C44L0%2C22L0%2C22L0%2C22z'%20fill%3D'%23007aff'%2F%3E%3C%2Fsvg%3E\\\\\\\");\\\\n  left: 10px;\\\\n  right: auto;\\\\n}\\\\n.swiper-button-prev.swiper-button-black,\\\\n.swiper-container-rtl .swiper-button-next.swiper-button-black {\\\\n  background-image: url(\\\\\\\"data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns%3D'http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg'%20viewBox%3D'0%200%2027%2044'%3E%3Cpath%20d%3D'M0%2C22L22%2C0l2.1%2C2.1L4.2%2C22l19.9%2C19.9L22%2C44L0%2C22L0%2C22L0%2C22z'%20fill%3D'%23000000'%2F%3E%3C%2Fsvg%3E\\\\\\\");\\\\n}\\\\n.swiper-button-prev.swiper-button-white,\\\\n.swiper-container-rtl .swiper-button-next.swiper-button-white {\\\\n  background-image: url(\\\\\\\"data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns%3D'http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg'%20viewBox%3D'0%200%2027%2044'%3E%3Cpath%20d%3D'M0%2C22L22%2C0l2.1%2C2.1L4.2%2C22l19.9%2C19.9L22%2C44L0%2C22L0%2C22L0%2C22z'%20fill%3D'%23ffffff'%2F%3E%3C%2Fsvg%3E\\\\\\\");\\\\n}\\\\n.swiper-button-next,\\\\n.swiper-container-rtl .swiper-button-prev {\\\\n  background-image: url(\\\\\\\"data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns%3D'http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg'%20viewBox%3D'0%200%2027%2044'%3E%3Cpath%20d%3D'M27%2C22L27%2C22L5%2C44l-2.1-2.1L22.8%2C22L2.9%2C2.1L5%2C0L27%2C22L27%2C22z'%20fill%3D'%23007aff'%2F%3E%3C%2Fsvg%3E\\\\\\\");\\\\n  right: 10px;\\\\n  left: auto;\\\\n}\\\\n.swiper-button-next.swiper-button-black,\\\\n.swiper-container-rtl .swiper-button-prev.swiper-button-black {\\\\n  background-image: url(\\\\\\\"data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns%3D'http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg'%20viewBox%3D'0%200%2027%2044'%3E%3Cpath%20d%3D'M27%2C22L27%2C22L5%2C44l-2.1-2.1L22.8%2C22L2.9%2C2.1L5%2C0L27%2C22L27%2C22z'%20fill%3D'%23000000'%2F%3E%3C%2Fsvg%3E\\\\\\\");\\\\n}\\\\n.swiper-button-next.swiper-button-white,\\\\n.swiper-container-rtl .swiper-button-prev.swiper-button-white {\\\\n  background-image: url(\\\\\\\"data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns%3D'http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg'%20viewBox%3D'0%200%2027%2044'%3E%3Cpath%20d%3D'M27%2C22L27%2C22L5%2C44l-2.1-2.1L22.8%2C22L2.9%2C2.1L5%2C0L27%2C22L27%2C22z'%20fill%3D'%23ffffff'%2F%3E%3C%2Fsvg%3E\\\\\\\");\\\\n}\\\\n.swiper-pagination {\\\\n  position: absolute;\\\\n  text-align: center;\\\\n  -webkit-transition: .3s;\\\\n  transition: .3s;\\\\n  -webkit-transform: translate3d(0, 0, 0);\\\\n  transform: translate3d(0, 0, 0);\\\\n  z-index: 10;\\\\n}\\\\n.swiper-pagination.swiper-pagination-hidden {\\\\n  opacity: 0;\\\\n}\\\\n.swiper-container-horizontal > .swiper-pagination-bullets,\\\\n.swiper-pagination-custom,\\\\n.swiper-pagination-fraction {\\\\n  bottom: 10px;\\\\n  left: 0;\\\\n  width: 100%;\\\\n}\\\\n.swiper-pagination-bullet {\\\\n  width: 8px;\\\\n  height: 8px;\\\\n  display: inline-block;\\\\n  border-radius: 100%;\\\\n  background: #000;\\\\n  opacity: 0.2;\\\\n}\\\\nbutton.swiper-pagination-bullet {\\\\n  border: none;\\\\n  margin: 0;\\\\n  padding: 0;\\\\n  -webkit-box-shadow: none;\\\\n          box-shadow: none;\\\\n  -moz-appearance: none;\\\\n  -ms-appearance: none;\\\\n  -webkit-appearance: none;\\\\n  appearance: none;\\\\n}\\\\n.swiper-pagination-clickable .swiper-pagination-bullet {\\\\n  cursor: pointer;\\\\n}\\\\n.swiper-pagination-white .swiper-pagination-bullet {\\\\n  background: #fff;\\\\n}\\\\n.swiper-pagination-bullet-active {\\\\n  opacity: 1;\\\\n  background: #007aff;\\\\n}\\\\n.swiper-pagination-white .swiper-pagination-bullet-active {\\\\n  background: #fff;\\\\n}\\\\n.swiper-pagination-black .swiper-pagination-bullet-active {\\\\n  background: #000;\\\\n}\\\\n.swiper-container-vertical > .swiper-pagination-bullets {\\\\n  right: 10px;\\\\n  top: 50%;\\\\n  -webkit-transform: translate3d(0, -50%, 0);\\\\n  transform: translate3d(0, -50%, 0);\\\\n}\\\\n.swiper-container-vertical > .swiper-pagination-bullets .swiper-pagination-bullet {\\\\n  margin: 5px 0;\\\\n  display: block;\\\\n}\\\\n.swiper-container-horizontal > .swiper-pagination-bullets .swiper-pagination-bullet {\\\\n  margin: 0 5px;\\\\n}\\\\n.swiper-pagination-progress {\\\\n  background: rgba(0, 0, 0, 0.25);\\\\n  position: absolute;\\\\n}\\\\n.swiper-pagination-progress .swiper-pagination-progressbar {\\\\n  background: #007aff;\\\\n  position: absolute;\\\\n  left: 0;\\\\n  top: 0;\\\\n  width: 100%;\\\\n  height: 100%;\\\\n  -webkit-transform: scale(0);\\\\n  transform: scale(0);\\\\n  -webkit-transform-origin: left top;\\\\n  transform-origin: left top;\\\\n}\\\\n.swiper-container-rtl .swiper-pagination-progress .swiper-pagination-progressbar {\\\\n  -webkit-transform-origin: right top;\\\\n  transform-origin: right top;\\\\n}\\\\n.swiper-container-horizontal > .swiper-pagination-progress {\\\\n  width: 100%;\\\\n  height: 4px;\\\\n  left: 0;\\\\n  top: 0;\\\\n}\\\\n.swiper-container-vertical > .swiper-pagination-progress {\\\\n  width: 4px;\\\\n  height: 100%;\\\\n  left: 0;\\\\n  top: 0;\\\\n}\\\\n.swiper-pagination-progress.swiper-pagination-white {\\\\n  background: rgba(255, 255, 255, 0.5);\\\\n}\\\\n.swiper-pagination-progress.swiper-pagination-white .swiper-pagination-progressbar {\\\\n  background: #fff;\\\\n}\\\\n.swiper-pagination-progress.swiper-pagination-black .swiper-pagination-progressbar {\\\\n  background: #000;\\\\n}\\\\n.swiper-container-3d {\\\\n  -webkit-perspective: 1200px;\\\\n  -o-perspective: 1200px;\\\\n  perspective: 1200px;\\\\n}\\\\n.swiper-container-3d .swiper-cube-shadow,\\\\n.swiper-container-3d .swiper-slide,\\\\n.swiper-container-3d .swiper-slide-shadow-bottom,\\\\n.swiper-container-3d .swiper-slide-shadow-left,\\\\n.swiper-container-3d .swiper-slide-shadow-right,\\\\n.swiper-container-3d .swiper-slide-shadow-top,\\\\n.swiper-container-3d .swiper-wrapper {\\\\n  -webkit-transform-style: preserve-3d;\\\\n  transform-style: preserve-3d;\\\\n}\\\\n.swiper-container-3d .swiper-slide-shadow-bottom,\\\\n.swiper-container-3d .swiper-slide-shadow-left,\\\\n.swiper-container-3d .swiper-slide-shadow-right,\\\\n.swiper-container-3d .swiper-slide-shadow-top {\\\\n  position: absolute;\\\\n  left: 0;\\\\n  top: 0;\\\\n  width: 100%;\\\\n  height: 100%;\\\\n  pointer-events: none;\\\\n  z-index: 10;\\\\n}\\\\n.swiper-container-3d .swiper-slide-shadow-left {\\\\n  background-image: -webkit-gradient(linear, right top, left top, from(rgba(0, 0, 0, 0.5)), to(rgba(0, 0, 0, 0)));\\\\n  background-image: linear-gradient(to left, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0));\\\\n}\\\\n.swiper-container-3d .swiper-slide-shadow-right {\\\\n  background-image: -webkit-gradient(linear, left top, right top, from(rgba(0, 0, 0, 0.5)), to(rgba(0, 0, 0, 0)));\\\\n  background-image: linear-gradient(to right, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0));\\\\n}\\\\n.swiper-container-3d .swiper-slide-shadow-top {\\\\n  background-image: -webkit-gradient(linear, left bottom, left top, from(rgba(0, 0, 0, 0.5)), to(rgba(0, 0, 0, 0)));\\\\n  background-image: linear-gradient(to top, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0));\\\\n}\\\\n.swiper-container-3d .swiper-slide-shadow-bottom {\\\\n  background-image: -webkit-gradient(linear, left top, left bottom, from(rgba(0, 0, 0, 0.5)), to(rgba(0, 0, 0, 0)));\\\\n  background-image: linear-gradient(to bottom, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0));\\\\n}\\\\n.swiper-container-coverflow .swiper-wrapper,\\\\n.swiper-container-flip .swiper-wrapper {\\\\n  -ms-perspective: 1200px;\\\\n}\\\\n.swiper-container-cube,\\\\n.swiper-container-flip {\\\\n  overflow: visible;\\\\n}\\\\n.swiper-container-cube .swiper-slide,\\\\n.swiper-container-flip .swiper-slide {\\\\n  pointer-events: none;\\\\n  -webkit-backface-visibility: hidden;\\\\n  backface-visibility: hidden;\\\\n  z-index: 1;\\\\n}\\\\n.swiper-container-cube .swiper-slide .swiper-slide,\\\\n.swiper-container-flip .swiper-slide .swiper-slide {\\\\n  pointer-events: none;\\\\n}\\\\n.swiper-container-cube .swiper-slide-active,\\\\n.swiper-container-cube .swiper-slide-active .swiper-slide-active,\\\\n.swiper-container-flip .swiper-slide-active,\\\\n.swiper-container-flip .swiper-slide-active .swiper-slide-active {\\\\n  pointer-events: auto;\\\\n}\\\\n.swiper-container-cube .swiper-slide-shadow-bottom,\\\\n.swiper-container-cube .swiper-slide-shadow-left,\\\\n.swiper-container-cube .swiper-slide-shadow-right,\\\\n.swiper-container-cube .swiper-slide-shadow-top,\\\\n.swiper-container-flip .swiper-slide-shadow-bottom,\\\\n.swiper-container-flip .swiper-slide-shadow-left,\\\\n.swiper-container-flip .swiper-slide-shadow-right,\\\\n.swiper-container-flip .swiper-slide-shadow-top {\\\\n  z-index: 0;\\\\n  -webkit-backface-visibility: hidden;\\\\n  backface-visibility: hidden;\\\\n}\\\\n.swiper-container-cube .swiper-slide {\\\\n  visibility: hidden;\\\\n  -webkit-transform-origin: 0 0;\\\\n  transform-origin: 0 0;\\\\n  width: 100%;\\\\n  height: 100%;\\\\n}\\\\n.swiper-container-cube.swiper-container-rtl .swiper-slide {\\\\n  -webkit-transform-origin: 100% 0;\\\\n  transform-origin: 100% 0;\\\\n}\\\\n.swiper-container-cube .swiper-slide-active,\\\\n.swiper-container-cube .swiper-slide-next,\\\\n.swiper-container-cube .swiper-slide-next + .swiper-slide,\\\\n.swiper-container-cube .swiper-slide-prev {\\\\n  pointer-events: auto;\\\\n  visibility: visible;\\\\n}\\\\n.swiper-container-cube .swiper-cube-shadow {\\\\n  position: absolute;\\\\n  left: 0;\\\\n  bottom: 0;\\\\n  width: 100%;\\\\n  height: 100%;\\\\n  background: #000;\\\\n  opacity: .6;\\\\n  -webkit-filter: blur(50px);\\\\n  filter: blur(50px);\\\\n  z-index: 0;\\\\n}\\\\n.swiper-container-fade.swiper-container-free-mode .swiper-slide {\\\\n  -webkit-transition-timing-function: ease-out;\\\\n  transition-timing-function: ease-out;\\\\n}\\\\n.swiper-container-fade .swiper-slide {\\\\n  pointer-events: none;\\\\n  -webkit-transition-property: opacity;\\\\n  transition-property: opacity;\\\\n}\\\\n.swiper-container-fade .swiper-slide .swiper-slide {\\\\n  pointer-events: none;\\\\n}\\\\n.swiper-container-fade .swiper-slide-active,\\\\n.swiper-container-fade .swiper-slide-active .swiper-slide-active {\\\\n  pointer-events: auto;\\\\n}\\\\n.swiper-zoom-container {\\\\n  width: 100%;\\\\n  height: 100%;\\\\n  display: -webkit-box;\\\\n  display: -ms-flexbox;\\\\n  display: flex;\\\\n  -webkit-box-pack: center;\\\\n  -ms-flex-pack: center;\\\\n  justify-content: center;\\\\n  -webkit-box-align: center;\\\\n  -ms-flex-align: center;\\\\n  align-items: center;\\\\n  text-align: center;\\\\n}\\\\n.swiper-zoom-container > canvas,\\\\n.swiper-zoom-container > img,\\\\n.swiper-zoom-container > svg {\\\\n  max-width: 100%;\\\\n  max-height: 100%;\\\\n  -o-object-fit: contain;\\\\n     object-fit: contain;\\\\n}\\\\n.swiper-scrollbar {\\\\n  border-radius: 10px;\\\\n  position: relative;\\\\n  -ms-touch-action: none;\\\\n  background: rgba(0, 0, 0, 0.1);\\\\n}\\\\n.swiper-container-horizontal > .swiper-scrollbar {\\\\n  position: absolute;\\\\n  left: 1%;\\\\n  bottom: 3px;\\\\n  z-index: 50;\\\\n  height: 5px;\\\\n  width: 98%;\\\\n}\\\\n.swiper-container-vertical > .swiper-scrollbar {\\\\n  position: absolute;\\\\n  right: 3px;\\\\n  top: 1%;\\\\n  z-index: 50;\\\\n  width: 5px;\\\\n  height: 98%;\\\\n}\\\\n.swiper-scrollbar-drag {\\\\n  height: 100%;\\\\n  width: 100%;\\\\n  position: relative;\\\\n  background: rgba(0, 0, 0, 0.5);\\\\n  border-radius: 10px;\\\\n  left: 0;\\\\n  top: 0;\\\\n}\\\\n.swiper-scrollbar-cursor-drag {\\\\n  cursor: move;\\\\n}\\\\n.swiper-lazy-preloader {\\\\n  width: 42px;\\\\n  height: 42px;\\\\n  position: absolute;\\\\n  left: 50%;\\\\n  top: 50%;\\\\n  margin-left: -21px;\\\\n  margin-top: -21px;\\\\n  z-index: 10;\\\\n  -webkit-transform-origin: 50%;\\\\n  transform-origin: 50%;\\\\n  -webkit-animation: swiper-preloader-spin 1s steps(12, end) infinite;\\\\n  animation: swiper-preloader-spin 1s steps(12, end) infinite;\\\\n}\\\\n.swiper-lazy-preloader:after {\\\\n  display: block;\\\\n  content: \\\\\\\"\\\\\\\";\\\\n  width: 100%;\\\\n  height: 100%;\\\\n  background-image: url(\\\\\\\"data:image/svg+xml;charset=utf-8,%3Csvg%20viewBox%3D'0%200%20120%20120'%20xmlns%3D'http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg'%20xmlns%3Axlink%3D'http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink'%3E%3Cdefs%3E%3Cline%20id%3D'l'%20x1%3D'60'%20x2%3D'60'%20y1%3D'7'%20y2%3D'27'%20stroke%3D'%236c6c6c'%20stroke-width%3D'11'%20stroke-linecap%3D'round'%2F%3E%3C%2Fdefs%3E%3Cg%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.27'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.27'%20transform%3D'rotate(30%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.27'%20transform%3D'rotate(60%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.27'%20transform%3D'rotate(90%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.27'%20transform%3D'rotate(120%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.27'%20transform%3D'rotate(150%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.37'%20transform%3D'rotate(180%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.46'%20transform%3D'rotate(210%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.56'%20transform%3D'rotate(240%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.66'%20transform%3D'rotate(270%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.75'%20transform%3D'rotate(300%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.85'%20transform%3D'rotate(330%2060%2C60)'%2F%3E%3C%2Fg%3E%3C%2Fsvg%3E\\\\\\\");\\\\n  background-position: 50%;\\\\n  background-size: 100%;\\\\n  background-repeat: no-repeat;\\\\n}\\\\n.swiper-lazy-preloader-white:after {\\\\n  background-image: url(\\\\\\\"data:image/svg+xml;charset=utf-8,%3Csvg%20viewBox%3D'0%200%20120%20120'%20xmlns%3D'http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg'%20xmlns%3Axlink%3D'http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink'%3E%3Cdefs%3E%3Cline%20id%3D'l'%20x1%3D'60'%20x2%3D'60'%20y1%3D'7'%20y2%3D'27'%20stroke%3D'%23fff'%20stroke-width%3D'11'%20stroke-linecap%3D'round'%2F%3E%3C%2Fdefs%3E%3Cg%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.27'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.27'%20transform%3D'rotate(30%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.27'%20transform%3D'rotate(60%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.27'%20transform%3D'rotate(90%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.27'%20transform%3D'rotate(120%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.27'%20transform%3D'rotate(150%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.37'%20transform%3D'rotate(180%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.46'%20transform%3D'rotate(210%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.56'%20transform%3D'rotate(240%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.66'%20transform%3D'rotate(270%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.75'%20transform%3D'rotate(300%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.85'%20transform%3D'rotate(330%2060%2C60)'%2F%3E%3C%2Fg%3E%3C%2Fsvg%3E\\\\\\\");\\\\n}\\\\n@-webkit-keyframes swiper-preloader-spin {\\\\n  100% {\\\\n    -webkit-transform: rotate(360deg);\\\\n  }\\\\n}\\\\n@keyframes swiper-preloader-spin {\\\\n  100% {\\\\n    -webkit-transform: rotate(360deg);\\\\n            transform: rotate(360deg);\\\\n  }\\\\n}\\\\n\\\", \\\"\\\"]);\\n\\n// exports\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///65\\n\");/***/},/* 66 *//***/function(module,exports,__webpack_require__){eval(\"// style-loader: Adds some css to the DOM by adding a <style> tag\\n\\n// load the styles\\nvar content = __webpack_require__(67);\\nif(typeof content === 'string') content = [[module.i, content, '']];\\n// add the styles to the DOM\\nvar update = __webpack_require__(1)(content, {});\\nif(content.locals) module.exports = content.locals;\\n// Hot Module Replacement\\nif(false) {\\n\\t// When the styles change, update the <style> tags\\n\\tif(!content.locals) {\\n\\t\\tmodule.hot.accept(\\\"!!./../../../node_modules/.0.23.1@css-loader/index.js!./../../../node_modules/postcss-loader/lib/index.js??ref--0-2!./../../../node_modules/.2.2.3@less-loader/index.js!./smile.less\\\", function() {\\n\\t\\t\\tvar newContent = require(\\\"!!./../../../node_modules/.0.23.1@css-loader/index.js!./../../../node_modules/postcss-loader/lib/index.js??ref--0-2!./../../../node_modules/.2.2.3@less-loader/index.js!./smile.less\\\");\\n\\t\\t\\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\\n\\t\\t\\tupdate(newContent);\\n\\t\\t});\\n\\t}\\n\\t// When the module is disposed, remove the <style> tags\\n\\tmodule.hot.dispose(function() { update(); });\\n}//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvc21pbGUubGVzcz83MTIwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQThGO0FBQzlGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsZ0NBQWdDLFVBQVUsRUFBRTtBQUM1QyIsImZpbGUiOiI2Ni5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8uMC4yMy4xQGNzcy1sb2FkZXIvaW5kZXguanMhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTAtMiEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8uMi4yLjNAbGVzcy1sb2FkZXIvaW5kZXguanMhLi9zbWlsZS5sZXNzXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8uMC4xMy4xQHN0eWxlLWxvYWRlci9hZGRTdHlsZXMuanNcIikoY29udGVudCwge30pO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBIb3QgTW9kdWxlIFJlcGxhY2VtZW50XG5pZihtb2R1bGUuaG90KSB7XG5cdC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG5cdGlmKCFjb250ZW50LmxvY2Fscykge1xuXHRcdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8uMC4yMy4xQGNzcy1sb2FkZXIvaW5kZXguanMhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTAtMiEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8uMi4yLjNAbGVzcy1sb2FkZXIvaW5kZXguanMhLi9zbWlsZS5sZXNzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8uMC4yMy4xQGNzcy1sb2FkZXIvaW5kZXguanMhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTAtMiEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8uMi4yLjNAbGVzcy1sb2FkZXIvaW5kZXguanMhLi9zbWlsZS5sZXNzXCIpO1xuXHRcdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cdFx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdFx0fSk7XG5cdH1cblx0Ly8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9zbWlsZS5sZXNzXG4vLyBtb2R1bGUgaWQgPSA2NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///66\\n\");/***/},/* 67 *//***/function(module,exports,__webpack_require__){eval(\"exports = module.exports = __webpack_require__(0)();\\n// imports\\n\\n\\n// module\\nexports.push([module.i, \\\".smile-ovo {\\\\n  vertical-align: middle;\\\\n  width: 30px;\\\\n  display: inline-block;\\\\n}\\\\nsmile-panel {\\\\n  display: block;\\\\n  margin: 0;\\\\n  padding: 0;\\\\n  border: none;\\\\n  height: 160px;\\\\n  overflow: hidden;\\\\n  -webkit-user-select: none;\\\\n     -moz-user-select: none;\\\\n      -ms-user-select: none;\\\\n          user-select: none;\\\\n}\\\\nsmile-panel .smile-panel__groups {\\\\n  overflow: hidden;\\\\n  -webkit-box-sizing: border-box;\\\\n          box-sizing: border-box;\\\\n  padding: 0 5%;\\\\n  margin: 0 auto;\\\\n}\\\\nsmile-panel .smile-panel__groups li {\\\\n  width: 30px;\\\\n  height: 30px;\\\\n  border: none;\\\\n  margin: 2% 2.76% ;\\\\n  background-image: url(\\\" + __webpack_require__(68) + \\\");\\\\n  background-repeat: no-repeat;\\\\n  float: left;\\\\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\\\\n  -webkit-user-select: none;\\\\n     -moz-user-select: none;\\\\n      -ms-user-select: none;\\\\n          user-select: none;\\\\n}\\\\nbody[data-webp*=true] smile-panel .smile-panel__groups li {\\\\n  background-image: url(\\\" + __webpack_require__(69) + \\\");\\\\n}\\\\n\\\", \\\"\\\"]);\\n\\n// exports\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvc21pbGUubGVzcz8yYmFhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7OztBQUdBO0FBQ0EscUNBQXNDLDJCQUEyQixnQkFBZ0IsMEJBQTBCLEdBQUcsZUFBZSxtQkFBbUIsY0FBYyxlQUFlLGlCQUFpQixrQkFBa0IscUJBQXFCLDhCQUE4Qiw4QkFBOEIsOEJBQThCLDhCQUE4QixHQUFHLG9DQUFvQyxxQkFBcUIsbUNBQW1DLG1DQUFtQyxrQkFBa0IsbUJBQW1CLEdBQUcsdUNBQXVDLGdCQUFnQixpQkFBaUIsaUJBQWlCLHNCQUFzQiwyREFBNEUsaUNBQWlDLGdCQUFnQixrREFBa0QsOEJBQThCLDhCQUE4Qiw4QkFBOEIsOEJBQThCLEdBQUcsNkRBQTZELDJEQUFrRixHQUFHOztBQUVsakMiLCJmaWxlIjoiNjcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvLjAuMjMuMUBjc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKSgpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLnNtaWxlLW92byB7XFxuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xcbiAgd2lkdGg6IDMwcHg7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxufVxcbnNtaWxlLXBhbmVsIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgbWFyZ2luOiAwO1xcbiAgcGFkZGluZzogMDtcXG4gIGJvcmRlcjogbm9uZTtcXG4gIGhlaWdodDogMTYwcHg7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTtcXG4gICAgIC1tb3otdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAgICAgLW1zLXVzZXItc2VsZWN0OiBub25lO1xcbiAgICAgICAgICB1c2VyLXNlbGVjdDogbm9uZTtcXG59XFxuc21pbGUtcGFuZWwgLnNtaWxlLXBhbmVsX19ncm91cHMge1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gIC13ZWJraXQtYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIHBhZGRpbmc6IDAgNSU7XFxuICBtYXJnaW46IDAgYXV0bztcXG59XFxuc21pbGUtcGFuZWwgLnNtaWxlLXBhbmVsX19ncm91cHMgbGkge1xcbiAgd2lkdGg6IDMwcHg7XFxuICBoZWlnaHQ6IDMwcHg7XFxuICBib3JkZXI6IG5vbmU7XFxuICBtYXJnaW46IDIlIDIuNzYlIDtcXG4gIGJhY2tncm91bmQtaW1hZ2U6IHVybChcIiArIHJlcXVpcmUoXCIuL2NvbW1vbi9pbWcvcG9wb18yYWRlZmVkLnBuZ1wiKSArIFwiKTtcXG4gIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XFxuICBmbG9hdDogbGVmdDtcXG4gIC13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwKTtcXG4gIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAgICAtbW96LXVzZXItc2VsZWN0OiBub25lO1xcbiAgICAgIC1tcy11c2VyLXNlbGVjdDogbm9uZTtcXG4gICAgICAgICAgdXNlci1zZWxlY3Q6IG5vbmU7XFxufVxcbmJvZHlbZGF0YS13ZWJwKj10cnVlXSBzbWlsZS1wYW5lbCAuc21pbGUtcGFuZWxfX2dyb3VwcyBsaSB7XFxuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCIgKyByZXF1aXJlKFwiLi9jb21tb24vaW1nL3dlYnAvcG9wb18yYWRlZmVkLndlYnBcIikgKyBcIik7XFxufVxcblwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIGQ6L3dlYi9ub2RlX21vZHVsZXMvLjAuMjMuMUBjc3MtbG9hZGVyIWQ6L3dlYi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvbGliP3t9IWQ6L3dlYi9ub2RlX21vZHVsZXMvLjIuMi4zQGxlc3MtbG9hZGVyIS4vc3JjL3NtaWxlLmxlc3Ncbi8vIG1vZHVsZSBpZCA9IDY3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///67\\n\");/***/},/* 68 *//***/function(module,exports,__webpack_require__){eval(\"module.exports = __webpack_require__.p + \\\"img/popo_2adefed.png?2adefe\\\";//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2ltZy9wb3BvXzJhZGVmZWQucG5nP2E1ZDYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNjguanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvcG9wb18yYWRlZmVkLnBuZz8yYWRlZmVcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21tb24vaW1nL3BvcG9fMmFkZWZlZC5wbmdcbi8vIG1vZHVsZSBpZCA9IDY4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///68\\n\");/***/},/* 69 *//***/function(module,exports,__webpack_require__){eval(\"module.exports = __webpack_require__.p + \\\"img/popo_2adefed.webp?b90b8a\\\";//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2ltZy93ZWJwL3BvcG9fMmFkZWZlZC53ZWJwPzNlMTkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNjkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvcG9wb18yYWRlZmVkLndlYnA/YjkwYjhhXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvY29tbW9uL2ltZy93ZWJwL3BvcG9fMmFkZWZlZC53ZWJwXG4vLyBtb2R1bGUgaWQgPSA2OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///69\\n\");/***/},/* 70 *//***/function(module,exports,__webpack_require__){eval(\"// style-loader: Adds some css to the DOM by adding a <style> tag\\n\\n// load the styles\\nvar content = __webpack_require__(71);\\nif(typeof content === 'string') content = [[module.i, content, '']];\\n// add the styles to the DOM\\nvar update = __webpack_require__(1)(content, {});\\nif(content.locals) module.exports = content.locals;\\n// Hot Module Replacement\\nif(false) {\\n\\t// When the styles change, update the <style> tags\\n\\tif(!content.locals) {\\n\\t\\tmodule.hot.accept(\\\"!!./../../../node_modules/.0.23.1@css-loader/index.js!./../../../node_modules/postcss-loader/lib/index.js??ref--0-2!./../../../node_modules/.2.2.3@less-loader/index.js!./reply.less\\\", function() {\\n\\t\\t\\tvar newContent = require(\\\"!!./../../../node_modules/.0.23.1@css-loader/index.js!./../../../node_modules/postcss-loader/lib/index.js??ref--0-2!./../../../node_modules/.2.2.3@less-loader/index.js!./reply.less\\\");\\n\\t\\t\\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\\n\\t\\t\\tupdate(newContent);\\n\\t\\t});\\n\\t}\\n\\t// When the module is disposed, remove the <style> tags\\n\\tmodule.hot.dispose(function() { update(); });\\n}//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcmVwbHkubGVzcz9iODY4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQThGO0FBQzlGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsZ0NBQWdDLFVBQVUsRUFBRTtBQUM1QyIsImZpbGUiOiI3MC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8uMC4yMy4xQGNzcy1sb2FkZXIvaW5kZXguanMhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTAtMiEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8uMi4yLjNAbGVzcy1sb2FkZXIvaW5kZXguanMhLi9yZXBseS5sZXNzXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8uMC4xMy4xQHN0eWxlLWxvYWRlci9hZGRTdHlsZXMuanNcIikoY29udGVudCwge30pO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBIb3QgTW9kdWxlIFJlcGxhY2VtZW50XG5pZihtb2R1bGUuaG90KSB7XG5cdC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG5cdGlmKCFjb250ZW50LmxvY2Fscykge1xuXHRcdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8uMC4yMy4xQGNzcy1sb2FkZXIvaW5kZXguanMhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTAtMiEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8uMi4yLjNAbGVzcy1sb2FkZXIvaW5kZXguanMhLi9yZXBseS5sZXNzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8uMC4yMy4xQGNzcy1sb2FkZXIvaW5kZXguanMhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTAtMiEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8uMi4yLjNAbGVzcy1sb2FkZXIvaW5kZXguanMhLi9yZXBseS5sZXNzXCIpO1xuXHRcdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cdFx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdFx0fSk7XG5cdH1cblx0Ly8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9yZXBseS5sZXNzXG4vLyBtb2R1bGUgaWQgPSA3MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///70\\n\");/***/},/* 71 *//***/function(module,exports,__webpack_require__){eval(\"exports = module.exports = __webpack_require__(0)();\\n// imports\\n\\n\\n// module\\nexports.push([module.i, \\\".editor-reply-ovo {\\\\n  display: block;\\\\n  margin: 0;\\\\n  padding: 0;\\\\n  border: none;\\\\n  width: 100%;\\\\n  height: 100%;\\\\n  background: rgba(0, 0, 0, 0.6);\\\\n  position: absolute;\\\\n  top: 0;\\\\n  left: 0;\\\\n  overflow: hidden;\\\\n  font-size: 16px;\\\\n}\\\\n.editor-reply-ovo .wh {\\\\n  color: black;\\\\n}\\\\n.editor-reply-ovo .default_value-ovo {\\\\n  color: #cacaca;\\\\n}\\\\n.editor-reply-ovo .ej_replay__wrap {\\\\n  width: 95%;\\\\n  margin: 3% 0 0 2.5%;\\\\n  -webkit-box-sizing: border-box;\\\\n          box-sizing: border-box;\\\\n}\\\\n.editor-reply-ovo .ej_reply__content-wrap {\\\\n  padding-top: 30%;\\\\n  overflow: hidden;\\\\n  -webkit-box-sizing: border-box;\\\\n          box-sizing: border-box;\\\\n  border-bottom: .5px solid #c8c7cc;\\\\n  background: white;\\\\n}\\\\n.editor-reply-ovo .ej_reply__content {\\\\n  overflow: hidden;\\\\n  overflow-y: scroll;\\\\n  -webkit-overflow-scrolling: touch;\\\\n  -webkit-box-sizing: border-box;\\\\n          box-sizing: border-box;\\\\n  padding: 3%;\\\\n  border: none;\\\\n  outline: none;\\\\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\\\\n  line-height: 24px;\\\\n}\\\\n.editor-reply-ovo .ej-reply__smile-holder {\\\\n  width: 100%;\\\\n  padding-top: 55%;\\\\n  background: #efeded;\\\\n}\\\\n.editor-reply-ovo .ej-reply__smile-holder .ej-reply__smile-inner {\\\\n  width: 304px;\\\\n  left: 50%;\\\\n  margin-top: 5%;\\\\n  margin-left: -152px;\\\\n}\\\\n.editor-reply-ovo .ej-reply__bot {\\\\n  padding-top: 15%;\\\\n  background: white;\\\\n}\\\\n.editor-reply-ovo .ej-reply__bot ul {\\\\n  width: 30%;\\\\n}\\\\n.editor-reply-ovo .ej-reply__bot > div {\\\\n  display: -webkit-box;\\\\n  display: -ms-flexbox;\\\\n  display: flex;\\\\n  -webkit-box-align: center;\\\\n      -ms-flex-align: center;\\\\n          align-items: center;\\\\n}\\\\n.editor-reply-ovo .ej-reply__bot > div > div {\\\\n  width: 70%;\\\\n  height: 100%;\\\\n  display: -webkit-box;\\\\n  display: -ms-flexbox;\\\\n  display: flex;\\\\n  -webkit-box-pack: end;\\\\n      -ms-flex-pack: end;\\\\n          justify-content: flex-end;\\\\n  -webkit-box-align: center;\\\\n      -ms-flex-align: center;\\\\n          align-items: center;\\\\n}\\\\n.editor-reply-ovo .ej-reply__bot ul li {\\\\n  width: 28%;\\\\n  background: url(\\\" + __webpack_require__(5) + \\\") no-repeat;\\\\n  background-size: cover;\\\\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\\\\n}\\\\n.editor-reply-ovo .ej-reply__bot ul li::after {\\\\n  content: '';\\\\n  display: block;\\\\n  padding-top: 100%;\\\\n}\\\\nbody[data-webp*=true] .editor-reply-ovo .ej-reply__bot ul li {\\\\n  background-image: url(\\\" + __webpack_require__(6) + \\\");\\\\n}\\\\n.editor-reply-ovo .ej-reply__bot ul li:nth-child(1) {\\\\n  margin-left: 16%;\\\\n}\\\\n.editor-reply-ovo .ej-reply__bot div button {\\\\n  width: 30%;\\\\n  height: 63%;\\\\n  border-radius: 4px;\\\\n  -webkit-box-sizing: border-box;\\\\n          box-sizing: border-box;\\\\n  margin: 0 3%;\\\\n}\\\\n.editor-reply-ovo .ej-reply__bot .ej-reply__pub {\\\\n  background: #ff5a00;\\\\n  margin-right: 6%;\\\\n}\\\\n.editor-reply-ovo .ej-reply__bot .ej-reply__pub > span {\\\\n  display: -webkit-box;\\\\n  display: -ms-flexbox;\\\\n  display: flex;\\\\n  -webkit-box-align: center;\\\\n      -ms-flex-align: center;\\\\n          align-items: center;\\\\n  -webkit-box-pack: center;\\\\n      -ms-flex-pack: center;\\\\n          justify-content: center;\\\\n  font-size: 18px;\\\\n  color: white;\\\\n}\\\\n.editor-reply-ovo .ej-reply__bot .ej-reply__cancel {\\\\n  border: 1px solid #c8c7cc;\\\\n}\\\\n.editor-reply-ovo .ej-reply__bot .ej-reply__cancel > span {\\\\n  display: -webkit-box;\\\\n  display: -ms-flexbox;\\\\n  display: flex;\\\\n  -webkit-box-align: center;\\\\n      -ms-flex-align: center;\\\\n          align-items: center;\\\\n  -webkit-box-pack: center;\\\\n      -ms-flex-pack: center;\\\\n          justify-content: center;\\\\n  font-size: 18px;\\\\n  color: #635f5f;\\\\n}\\\\n.editor-reply-ovo .ej-reply__msg {\\\\n  background: rgba(0, 0, 0, 0.7);\\\\n  padding-top: 10%;\\\\n  border-radius: 5px;\\\\n  font-size: 15px;\\\\n  width: 80%;\\\\n  margin-left: 10%;\\\\n  margin-top: -2%;\\\\n  -webkit-transform: translate3d(0, -90%, 0);\\\\n          transform: translate3d(0, -90%, 0);\\\\n  visibility: visible;\\\\n  opacity: 1;\\\\n}\\\\n.editor-reply-ovo .ej-reply__msg > div {\\\\n  display: -webkit-box;\\\\n  display: -ms-flexbox;\\\\n  display: flex;\\\\n  -webkit-box-align: center;\\\\n      -ms-flex-align: center;\\\\n          align-items: center;\\\\n  -webkit-box-pack: center;\\\\n      -ms-flex-pack: center;\\\\n          justify-content: center;\\\\n}\\\\n.editor-reply-ovo .ej-reply__msg span {\\\\n  color: white;\\\\n}\\\\n\\\", \\\"\\\"]);\\n\\n// exports\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///71\\n\");/***/},/* 72 *//***/function(module,exports,__webpack_require__){\"use strict\";eval('\\n\\nObject.defineProperty(exports, \"__esModule\", {\\n  value: true\\n});\\n\\nvar _editor = __webpack_require__(3);\\n\\nvar _editor2 = _interopRequireDefault(_editor);\\n\\nvar _exifJs = __webpack_require__(73);\\n\\nvar _exifJs2 = _interopRequireDefault(_exifJs);\\n\\n__webpack_require__(74);\\n\\nvar _core = __webpack_require__(4);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\\n\\nvar Post = _editor2.default.extend({\\n  init: function init(props) {\\n    var _this = this;\\n\\n    //debugger;\\n    props = Object.assign({}, {\\n      tag_name: \\'editor-post-ovo\\',\\n      config: {\\n        TITLE_EMPTY: \\'\\u6807\\u9898\\u4E0D\\u80FD\\u4E3A\\u7A7A\\',\\n        TITLE_TOO_LONG: \\'\\u6807\\u9898\\u592A\\u957F...\\',\\n        CONTENT_EMPTY: \\'\\u7F16\\u8F91\\u5185\\u5BB9\\u4E0D\\u80FD\\u4E3A\\u7A7A\\',\\n        PHOTO_TOO_MANY: \\'\\u4F60\\u4F20\\u7684\\u7167\\u7247\\u592A\\u591A\\u4E86\\u5427...\\',\\n        SMILE_TOO_MANY: \\'\\u4F60\\u53D1\\u7684\\u8868\\u60C5\\u592A\\u591A\\u4E86\\u5427...\\',\\n        WORD_TOO_MANY: \\'\\u4F60\\u5199\\u7684\\u5B57\\u6570\\u592A\\u591A\\u4E86\\u5427...\\',\\n        PHONE_TOO_BIG: \\'\\u56FE\\u7247\\u592A\\u5927\\u4E86\\',\\n        SUCCESS: \\'\\u53D1\\u8868\\u6210\\u529F\\',\\n        MAX_SMILES: 20\\n        //,SMILE_MAX_LEN:30\\n        // ,PHOTO_MAX_LEN:6\\n        , MAX_PHOTOES: 6\\n        //,PHOTO_MAX_SIZE:1024*10\\n        , MAX_CONTENT_WORDS: 800,\\n        MAX_TITLE_WORDS: 50,\\n\\n        MAX_SIZE_PHOTO: 1024 * 1024 * 4\\n      }\\n    }, props);\\n\\n    this._super(props);\\n\\n    this._map_base64 = Object.create(null);\\n    this.upload_pictures = [];\\n\\n    this._handleChooseImg(function (img, props) {\\n\\n      img.setAttribute(\\'uid\\', props.uid);\\n\\n      var html_ = _this.$content.html().trim();\\n\\n      var default_value = _this.$content.attr(\\'defaultValue\\').trim();\\n\\n      if (html_ === default_value) _this.$content.html(\\'\\');\\n\\n      var img_wrap = document.createElement(\\'p\\');\\n      img_wrap.appendChild(img);\\n\\n      ////////////\\n\\n      _this._appendToLastModifiyEl(img_wrap);\\n\\n      //////////\\n      props.base64 = img.src;\\n\\n      _this._map_base64[props.uid] = props;\\n\\n      _this._getUploadPictures();\\n\\n      ///\\n      _this._setLastEditEl(_this.$content);\\n    });\\n\\n    //console.log(\\'post constructor\\');\\n  },\\n  _getUploadPictures: function _getUploadPictures() {\\n    var _this2 = this;\\n\\n    var base64_imgs = [].concat(_toConsumableArray($(\\'img.from-input-ovo\\', this.el)));\\n\\n    this.upload_pictures = [];\\n    base64_imgs.forEach(function (img, i) {\\n      var uid = img.getAttribute(\\'uid\\');\\n\\n      _this2.upload_pictures.push(_this2._map_base64[uid]);\\n    });\\n\\n    //\\tconsole.log(this.upload_pictures);\\n  },\\n  _handleForThose: function _handleForThose() {\\n    var _this3 = this;\\n\\n    this._super();\\n\\n    this.$content.on(\\'input\\', function (e) {\\n      _this3._setLastEditEl(_this3._editLastChild());\\n      _this3._getUploadPictures();\\n      _this3._recordLastRange(0);\\n    });\\n\\n    this.$content.on(\\'touchend\\', function (e) {\\n      _this3._recordLastRange(566);\\n    });\\n\\n    this.$title.on(\\'focus\\', this._handle_bug_focus.bind(this));\\n    this.$title.on(\\'blur\\', this._handle_bug_blur.bind(this));\\n\\n    {\\n      var i = 0;\\n      $(this.constructor.EL_SMILE_ICON, this.el).on(\\'click\\', function (e) {\\n        ++i % 2 != 0 ? _this3.emoji_panel.hide() : _this3.emoji_panel.show();\\n      });\\n    }\\n  },\\n  _handleChooseImg: function _handleChooseImg(fn) {\\n    var _this4 = this;\\n\\n    var $chooseimg = $(\\'.ej_comment__chooseimg\\', this.el);\\n\\n    $chooseimg[0].addEventListener(\\'change\\', function () {\\n      ////////////////////////////////////\\n\\n      var _$chooseimg$0$files$ = $chooseimg[0].files[0],\\n          name = _$chooseimg$0$files$.name,\\n          type = _$chooseimg$0$files$.type,\\n          size = _$chooseimg$0$files$.size;\\n\\n      //image/png image/jpeg\\n\\n      if (!/image\\\\/(png|jpeg|gif)/.test(type)) return _this4._displayMsg(\\'\\u8BF7\\u4E0A\\u4F20\\u4E00\\u5F20\\u56FE\\u7247...\\');\\n\\n      if (size > _this4.options.config.MAX_SIZE_PHOTO) return _this4._displayMsg(\\'\\u56FE\\u7247\\u592A\\u5927...\\');\\n\\n      var img_orientation;\\n\\n      _exifJs2.default.getData($chooseimg[0].files[0], function () {\\n        _exifJs2.default.getAllTags(this);\\n        img_orientation = _exifJs2.default.getTag(this, \\'Orientation\\');\\n      });\\n\\n      var frd = new FileReader();\\n\\n      //console.log(\\'filereader!\\');\\n      frd.addEventListener(\\'load\\', function () {\\n        var pic = document.createElement(\\'img\\');\\n        //pic.classList.add(\\'from-input-ovo\\');\\n\\n        pic.addEventListener(\\'load\\', function () {\\n\\n          var s = pic.width / pic.height;\\n\\n          //alert(pic.width);\\n\\n          //pic.width = min(pic.width,innerWidth*.777);\\n\\n          var dp = 2;\\n\\n          //pic.width = innerWidth*.777   *dp;\\n          pic.width = innerWidth * .8 * dp;\\n\\n          var cv = document.createElement(\\'canvas\\');\\n          var c = cv.getContext(\\'2d\\');\\n\\n          if (_core.Brower.version.ios && img_orientation === 6) {\\n            //alert(\\'rotating!!!\\');\\n            cv.width = pic.width / s, cv.height = pic.width;\\n            //\\n            var scale_to_max = pic.width / cv.width;\\n            //50 --- 60\\n            //\\n            cv.width *= scale_to_max, cv.height *= scale_to_max;\\n\\n            var tx = cv.width * .5,\\n                ty = cv.height * .5,\\n                x = tx,\\n                y = ty;\\n            c.translate(x, y);\\n            c.rotate(PI * .5);\\n            c.drawImage(pic, -ty, -tx, pic.width * scale_to_max, pic.width / s * scale_to_max);\\n          } else {\\n            cv.width = pic.width, cv.height = pic.width / s;\\n            c.drawImage(pic, 0, 0, cv.width, cv.height);\\n          }\\n\\n          var pic_ = document.createElement(\\'img\\');\\n          var quality = .93;\\n\\n          pic_.width = cv.width * (1 / dp), pic_.height = cv.height * (1 / dp);\\n\\n          //pic_.setAttribute(\\'unselectable\\',\\'on\\');\\n          pic_.setAttribute(\\'quality-ovo\\', quality);\\n          pic_.setAttribute(\\'suffix-ovo\\', type.match(/image\\\\/(\\\\w+)/)[1]);\\n          pic_.classList.add(\\'from-input-ovo\\');\\n          pic_.onload = function () {\\n            return fn(pic_, { name: name, type: type, uid: \\'uid-\\' + (Math.random() + \\'\\').slice(2) });\\n          };\\n          pic_.src = cv.toDataURL(type, quality);\\n          //pic_.src = require(\\'./common/img/a.jpg\\');\\n        });\\n        pic.src = frd.result;\\n      });\\n\\n      frd.readAsDataURL($chooseimg[0].files[0]);\\n\\n      ///////////////////////////////////\\n\\n    });\\n  },\\n  _bindDefaultValue: function _bindDefaultValue() {\\n    this._super();\\n\\n    var that = this;\\n    this.$title.on(\\'blur\\', function (e) {\\n\\n      //that.$bot_pick.show();\\n      that.emoji_panel.show();\\n      //#adadad\\n      var html_ = this.value.trim();\\n\\n      var default_value = this.getAttribute(\\'defaultValue\\').trim();\\n\\n      //console.log(html_,default_value, html_===default_value);\\n      //ios \\u8FD8\\u4F1A\\u5E26\\u4E0A<br>\\u3002\\u3002\\u3002\\u3002\\u3002\\n      //alert(`blur:${html_},length:${html_.length}`);\\n      if (html_ === \\'\\' || html_ === \\'<br>\\') {\\n        this.value = default_value;\\n        this.classList.add(\\'default_value-ovo-2\\');\\n      }\\n    });\\n\\n    this.$title.on(\\'focus\\', function (e) {\\n\\n      //that.$bot_pick.hide();\\n      that.emoji_panel.hide();\\n\\n      this.classList.remove(\\'default_value-ovo-2\\');\\n\\n      var html_ = this.value.trim();\\n\\n      var default_value = this.getAttribute(\\'defaultValue\\').trim();\\n\\n      if (html_ === default_value) this.value = \\'\\';\\n    });\\n  }\\n  // send\\n  ,\\n  _editSuccess: function _editSuccess() {\\n    var _this5 = this;\\n\\n    var config = this.options.config;\\n    // TITLE_EMPTY:\\'\\u6807\\u9898\\u4E0D\\u80FD\\u4E3A\\u7A7A\\'\\n    // ,TITLE_TOO_LONG:\\'\\u6807\\u9898\\u592A\\u957F...\\'\\n    // ,CONTENT_EMPTY:\\'\\u7F16\\u8F91\\u5185\\u5BB9\\u4E0D\\u80FD\\u4E3A\\u7A7A\\'\\n    // ,PHOTO_TOO_MANY:\\'\\u4F60\\u4F20\\u7684\\u7167\\u7247\\u592A\\u591A\\u4E86\\u5427...\\'\\n    // ,SMILE_TOO_MANY:\\'\\u4F60\\u53D1\\u7684\\u8868\\u60C5\\u592A\\u591A\\u4E86\\u5427...\\'\\n    // ,WORD_TOO_MANY:\\'\\u4F60\\u5199\\u7684\\u5B57\\u6570\\u592A\\u591A\\u4E86\\u5427...\\'\\n    // ,PHONE_TOO_BIG:\\'\\u56FE\\u7247\\u592A\\u5927\\u4E86\\'\\n    // ,SUCCES:\\'\\u53D1\\u8868\\u6210\\u529F\\'\\n    // ,MAX_SMILES :20\\n    // //,SMILE_MAX_LEN:30\\n    // // ,PHOTO_MAX_LEN:6\\n    // ,MAX_PHOTOES:6\\n    // //,PHOTO_MAX_SIZE:1024*10\\n    // ,MAX_CONTENT_WORDS:800\\n    // ,MAX_TITLE_WORDS:50\\n\\n    // ,MAX_SIZE_PHOTO : 1024*1024*4\\n\\n    return new Promise(function (r) {\\n      var that = _this5;\\n      var v_ = \\'\\';\\n      var v2_ = \\'\\';\\n      var handle = function () {\\n        var v = that.$title.val().trim();\\n\\n        if (!v.length || v === that.$title.attr(\\'defaultValue\\')) {\\n\\n          return that._displayMsg(config.TITLE_EMPTY);\\n        }\\n\\n        return \\'nextSuccessor\\';\\n      }.after(function () {\\n        var v = that.$title.val().trim();\\n        if (v.length > config.MAX_TITLE_WORDS) {\\n          return that._displayMsg(config.TITLE_TOO_LONG);\\n        }\\n        return \\'nextSuccessor\\';\\n      }).after(function () {\\n        var photo_len = $(\\'.from-input-ovo\\', that.$content).length;\\n        var smile_len = $(\\'.smile-ovo\\', that.$content).length;\\n        var v = that.$content[0].textContent.trim();\\n\\n        if ((!v.length || v === that.$content[0].getAttribute(\\'defaultValue\\')) && !photo_len && !smile_len) {\\n          return that._displayMsg(config.CONTENT_EMPTY);\\n        }\\n        return \\'nextSuccessor\\';\\n      }).after(function () {\\n        var smile_len = $(\\'.smile-ovo\\', that.$content).length;\\n\\n        //CONSOLE.LGO\\n        //console.log(\\'smile_len:\\',smile_len);\\n\\n        if (smile_len > config.MAX_SMILES) return that._displayMsg(config.SMILE_TOO_MANY);\\n\\n        return \\'nextSuccessor\\';\\n      }).after(function () {\\n        var photo_len = $(\\'.from-input-ovo\\', that.$content).length;\\n\\n        if (photo_len > config.MAX_PHOTOES) return that._displayMsg(config.PHOTO_TOO_MANY);\\n\\n        return \\'nextSuccessor\\';\\n      }).after(function () {\\n        var v = that.$content[0].textContent.trim();\\n        if (v.length > config.MAX_CONTENT_WORDS) {\\n          return that._displayMsg(config.WORD_TOO_MANY);\\n        }\\n\\n        return \\'nextSuccessor\\';\\n      }).after(function () {\\n        r({\\n          html_title: that._resAdapter(that.$title.val().trim()),\\n          html_content: that._resAdapter(that.$content[0].innerHTML.trim()),\\n          text_content: that._resAdapter(that.$content[0].textContent.trim())\\n\\n        });\\n      });\\n\\n      handle();\\n    });\\n  },\\n  clear: function clear() {\\n    this._super();\\n    this.$title.val(this.$title.attr(\\'defaultValue\\'));\\n    this.$title[0].classList.add(\\'default_value-ovo-2\\');\\n\\n    this.upload_pictures = [];\\n  },\\n  _handleConfirm: function _handleConfirm() {\\n    var _this6 = this;\\n\\n    $(this.constructor.EL_CONFIRM).on(\\'click\\', function (e) {\\n\\n      _this6._editSuccess().then(function (res) {\\n\\n        //debugger;\\n\\n        var text_content = res.text_content,\\n            html_content = res.html_content,\\n            html_title = res.html_title;\\n\\n\\n        _this6.trigger(\\'complete\\', {\\n          html_content: html_content, text_content: text_content, html_title: html_title,\\n          upload_pictures: _this6.upload_pictures,\\n          el_target: _this6.el_target,\\n          edit_time: Date.now()\\n        });\\n      });\\n    });\\n  },\\n  _createChild: function _createChild() {\\n    this._super();\\n    //editor-reply-ovo\\n    this.el.classList.add(this.constructor.CLS);\\n\\n    // ,CLS_DEFAULT_VALUE:\\'default_value-ovo\\'\\n    // ,EL_CONTENT:\\'div[content-ovo]\\'\\n    // ,EL_CANCEL:\\'button[cancel-ovo]\\'\\n    // ,EL_CONFIRM:\\'button[confirm-ovo]\\'\\n    // ,EL_SMILE:\\'div[smile-holder-ovo]\\'\\n    // ,EL_SMILE_ICON:\\'li[smile-icon-ovo]\\'\\n    // ,EL_DISPLAY_MSG:\\'div[message-ovo]\\'\\n    this.el.innerHTML = \\'\\\\n      <div class=\"ej_wrap rel\">\\\\n        <div class=\"abs wh\">\\\\n          <div class=\"ej_comment__input\">\\\\n            <div class=\"ej_comment__title rel\">\\\\n              <input title-ovo type=\"text\" defaultValue=\"\\\\u52A0\\\\u4E2A\\\\u6807\\\\u9898\\\\u54DF~\" />\\\\n            </div>\\\\n            <div content-ovo class=\"ej_comment__content\" contenteditable=\"true\" defaultValue=\"\\\\u5C3D\\\\u60C5\\\\u53D1\\\\u6325\\\\u5427...\"><p></p></div>\\\\n          </div>\\\\n          <div class=\"ej_comment__bot rel\">\\\\n            <ul>\\\\t\\\\n              <li smile-icon-ovo title=\"\\\\u6DFB\\\\u52A0\\\\u8868\\\\u60C5\"></li>\\\\n              <li title=\"\\\\u6DFB\\\\u52A0\\\\u56FE\\\\u7247\"><input class=\"ej_comment__chooseimg\" type=\"file\"/></li>\\\\n            </ul>\\\\n            <button confirm-ovo class=\"ej_comment__pub rel\">\\\\n              <span class=\"abs wh\">\\\\u53D1\\\\u8868</span>\\\\n            </button>\\\\n            <button cancel-ovo class=\"ej_comment__cancel rel\">\\\\n              <span class=\"abs wh\">\\\\u53D6\\\\u6D88</span>\\\\n            </button>\\\\n          </div>\\\\n        </div>\\\\n        \\\\n      </div>\\\\n\\\\n      <div class=\"smile-holder\" smile-holder-ovo>\\\\n        \\\\n      </div>\\\\n\\\\n      <div class=\"ej-comment__msg abs\" message-ovo>\\\\n        <div class=\"abs wh\">\\\\n          <span>\\\\u8F93\\\\u5165\\\\u51E0\\\\u4E2A\\\\u5B57\\\\uFF1F</span>\\\\n        </div>\\\\n      </div>\\\\n    \\';\\n\\n    this.$content = $(this.constructor.EL_CONTENT, this.el);\\n    this.$title = $(this.constructor.EL_TITLE, this.el);\\n\\n    this.$msg_holder = $(this.constructor.EL_DISPLAY_MSG, this.el);\\n    this.$msg_text = $(\\'span\\', this.$msg_holder);\\n  }\\n}, {\\n  CLS: \\'editor-post-ovo\\',\\n  EL_TITLE: \\'input[title-ovo]\\'\\n});\\n\\nexports.default = Post;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///72\\n');/***/},/* 73 *//***/function(module,exports,__webpack_require__){eval(\"var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function() {\\n\\n    var debug = false;\\n\\n    var root = this;\\n\\n    var EXIF = function(obj) {\\n        if (obj instanceof EXIF) return obj;\\n        if (!(this instanceof EXIF)) return new EXIF(obj);\\n        this.EXIFwrapped = obj;\\n    };\\n\\n    if (true) {\\n        if (typeof module !== 'undefined' && module.exports) {\\n            exports = module.exports = EXIF;\\n        }\\n        exports.EXIF = EXIF;\\n    } else {\\n        root.EXIF = EXIF;\\n    }\\n\\n    var ExifTags = EXIF.Tags = {\\n\\n        // version tags\\n        0x9000 : \\\"ExifVersion\\\",             // EXIF version\\n        0xA000 : \\\"FlashpixVersion\\\",         // Flashpix format version\\n\\n        // colorspace tags\\n        0xA001 : \\\"ColorSpace\\\",              // Color space information tag\\n\\n        // image configuration\\n        0xA002 : \\\"PixelXDimension\\\",         // Valid width of meaningful image\\n        0xA003 : \\\"PixelYDimension\\\",         // Valid height of meaningful image\\n        0x9101 : \\\"ComponentsConfiguration\\\", // Information about channels\\n        0x9102 : \\\"CompressedBitsPerPixel\\\",  // Compressed bits per pixel\\n\\n        // user information\\n        0x927C : \\\"MakerNote\\\",               // Any desired information written by the manufacturer\\n        0x9286 : \\\"UserComment\\\",             // Comments by user\\n\\n        // related file\\n        0xA004 : \\\"RelatedSoundFile\\\",        // Name of related sound file\\n\\n        // date and time\\n        0x9003 : \\\"DateTimeOriginal\\\",        // Date and time when the original image was generated\\n        0x9004 : \\\"DateTimeDigitized\\\",       // Date and time when the image was stored digitally\\n        0x9290 : \\\"SubsecTime\\\",              // Fractions of seconds for DateTime\\n        0x9291 : \\\"SubsecTimeOriginal\\\",      // Fractions of seconds for DateTimeOriginal\\n        0x9292 : \\\"SubsecTimeDigitized\\\",     // Fractions of seconds for DateTimeDigitized\\n\\n        // picture-taking conditions\\n        0x829A : \\\"ExposureTime\\\",            // Exposure time (in seconds)\\n        0x829D : \\\"FNumber\\\",                 // F number\\n        0x8822 : \\\"ExposureProgram\\\",         // Exposure program\\n        0x8824 : \\\"SpectralSensitivity\\\",     // Spectral sensitivity\\n        0x8827 : \\\"ISOSpeedRatings\\\",         // ISO speed rating\\n        0x8828 : \\\"OECF\\\",                    // Optoelectric conversion factor\\n        0x9201 : \\\"ShutterSpeedValue\\\",       // Shutter speed\\n        0x9202 : \\\"ApertureValue\\\",           // Lens aperture\\n        0x9203 : \\\"BrightnessValue\\\",         // Value of brightness\\n        0x9204 : \\\"ExposureBias\\\",            // Exposure bias\\n        0x9205 : \\\"MaxApertureValue\\\",        // Smallest F number of lens\\n        0x9206 : \\\"SubjectDistance\\\",         // Distance to subject in meters\\n        0x9207 : \\\"MeteringMode\\\",            // Metering mode\\n        0x9208 : \\\"LightSource\\\",             // Kind of light source\\n        0x9209 : \\\"Flash\\\",                   // Flash status\\n        0x9214 : \\\"SubjectArea\\\",             // Location and area of main subject\\n        0x920A : \\\"FocalLength\\\",             // Focal length of the lens in mm\\n        0xA20B : \\\"FlashEnergy\\\",             // Strobe energy in BCPS\\n        0xA20C : \\\"SpatialFrequencyResponse\\\",    //\\n        0xA20E : \\\"FocalPlaneXResolution\\\",   // Number of pixels in width direction per FocalPlaneResolutionUnit\\n        0xA20F : \\\"FocalPlaneYResolution\\\",   // Number of pixels in height direction per FocalPlaneResolutionUnit\\n        0xA210 : \\\"FocalPlaneResolutionUnit\\\",    // Unit for measuring FocalPlaneXResolution and FocalPlaneYResolution\\n        0xA214 : \\\"SubjectLocation\\\",         // Location of subject in image\\n        0xA215 : \\\"ExposureIndex\\\",           // Exposure index selected on camera\\n        0xA217 : \\\"SensingMethod\\\",           // Image sensor type\\n        0xA300 : \\\"FileSource\\\",              // Image source (3 == DSC)\\n        0xA301 : \\\"SceneType\\\",               // Scene type (1 == directly photographed)\\n        0xA302 : \\\"CFAPattern\\\",              // Color filter array geometric pattern\\n        0xA401 : \\\"CustomRendered\\\",          // Special processing\\n        0xA402 : \\\"ExposureMode\\\",            // Exposure mode\\n        0xA403 : \\\"WhiteBalance\\\",            // 1 = auto white balance, 2 = manual\\n        0xA404 : \\\"DigitalZoomRation\\\",       // Digital zoom ratio\\n        0xA405 : \\\"FocalLengthIn35mmFilm\\\",   // Equivalent foacl length assuming 35mm film camera (in mm)\\n        0xA406 : \\\"SceneCaptureType\\\",        // Type of scene\\n        0xA407 : \\\"GainControl\\\",             // Degree of overall image gain adjustment\\n        0xA408 : \\\"Contrast\\\",                // Direction of contrast processing applied by camera\\n        0xA409 : \\\"Saturation\\\",              // Direction of saturation processing applied by camera\\n        0xA40A : \\\"Sharpness\\\",               // Direction of sharpness processing applied by camera\\n        0xA40B : \\\"DeviceSettingDescription\\\",    //\\n        0xA40C : \\\"SubjectDistanceRange\\\",    // Distance to subject\\n\\n        // other tags\\n        0xA005 : \\\"InteroperabilityIFDPointer\\\",\\n        0xA420 : \\\"ImageUniqueID\\\"            // Identifier assigned uniquely to each image\\n    };\\n\\n    var TiffTags = EXIF.TiffTags = {\\n        0x0100 : \\\"ImageWidth\\\",\\n        0x0101 : \\\"ImageHeight\\\",\\n        0x8769 : \\\"ExifIFDPointer\\\",\\n        0x8825 : \\\"GPSInfoIFDPointer\\\",\\n        0xA005 : \\\"InteroperabilityIFDPointer\\\",\\n        0x0102 : \\\"BitsPerSample\\\",\\n        0x0103 : \\\"Compression\\\",\\n        0x0106 : \\\"PhotometricInterpretation\\\",\\n        0x0112 : \\\"Orientation\\\",\\n        0x0115 : \\\"SamplesPerPixel\\\",\\n        0x011C : \\\"PlanarConfiguration\\\",\\n        0x0212 : \\\"YCbCrSubSampling\\\",\\n        0x0213 : \\\"YCbCrPositioning\\\",\\n        0x011A : \\\"XResolution\\\",\\n        0x011B : \\\"YResolution\\\",\\n        0x0128 : \\\"ResolutionUnit\\\",\\n        0x0111 : \\\"StripOffsets\\\",\\n        0x0116 : \\\"RowsPerStrip\\\",\\n        0x0117 : \\\"StripByteCounts\\\",\\n        0x0201 : \\\"JPEGInterchangeFormat\\\",\\n        0x0202 : \\\"JPEGInterchangeFormatLength\\\",\\n        0x012D : \\\"TransferFunction\\\",\\n        0x013E : \\\"WhitePoint\\\",\\n        0x013F : \\\"PrimaryChromaticities\\\",\\n        0x0211 : \\\"YCbCrCoefficients\\\",\\n        0x0214 : \\\"ReferenceBlackWhite\\\",\\n        0x0132 : \\\"DateTime\\\",\\n        0x010E : \\\"ImageDescription\\\",\\n        0x010F : \\\"Make\\\",\\n        0x0110 : \\\"Model\\\",\\n        0x0131 : \\\"Software\\\",\\n        0x013B : \\\"Artist\\\",\\n        0x8298 : \\\"Copyright\\\"\\n    };\\n\\n    var GPSTags = EXIF.GPSTags = {\\n        0x0000 : \\\"GPSVersionID\\\",\\n        0x0001 : \\\"GPSLatitudeRef\\\",\\n        0x0002 : \\\"GPSLatitude\\\",\\n        0x0003 : \\\"GPSLongitudeRef\\\",\\n        0x0004 : \\\"GPSLongitude\\\",\\n        0x0005 : \\\"GPSAltitudeRef\\\",\\n        0x0006 : \\\"GPSAltitude\\\",\\n        0x0007 : \\\"GPSTimeStamp\\\",\\n        0x0008 : \\\"GPSSatellites\\\",\\n        0x0009 : \\\"GPSStatus\\\",\\n        0x000A : \\\"GPSMeasureMode\\\",\\n        0x000B : \\\"GPSDOP\\\",\\n        0x000C : \\\"GPSSpeedRef\\\",\\n        0x000D : \\\"GPSSpeed\\\",\\n        0x000E : \\\"GPSTrackRef\\\",\\n        0x000F : \\\"GPSTrack\\\",\\n        0x0010 : \\\"GPSImgDirectionRef\\\",\\n        0x0011 : \\\"GPSImgDirection\\\",\\n        0x0012 : \\\"GPSMapDatum\\\",\\n        0x0013 : \\\"GPSDestLatitudeRef\\\",\\n        0x0014 : \\\"GPSDestLatitude\\\",\\n        0x0015 : \\\"GPSDestLongitudeRef\\\",\\n        0x0016 : \\\"GPSDestLongitude\\\",\\n        0x0017 : \\\"GPSDestBearingRef\\\",\\n        0x0018 : \\\"GPSDestBearing\\\",\\n        0x0019 : \\\"GPSDestDistanceRef\\\",\\n        0x001A : \\\"GPSDestDistance\\\",\\n        0x001B : \\\"GPSProcessingMethod\\\",\\n        0x001C : \\\"GPSAreaInformation\\\",\\n        0x001D : \\\"GPSDateStamp\\\",\\n        0x001E : \\\"GPSDifferential\\\"\\n    };\\n\\n     // EXIF 2.3 Spec\\n    var IFD1Tags = EXIF.IFD1Tags = {\\n        0x0100: \\\"ImageWidth\\\",\\n        0x0101: \\\"ImageHeight\\\",\\n        0x0102: \\\"BitsPerSample\\\",\\n        0x0103: \\\"Compression\\\",\\n        0x0106: \\\"PhotometricInterpretation\\\",\\n        0x0111: \\\"StripOffsets\\\",\\n        0x0112: \\\"Orientation\\\",\\n        0x0115: \\\"SamplesPerPixel\\\",\\n        0x0116: \\\"RowsPerStrip\\\",\\n        0x0117: \\\"StripByteCounts\\\",\\n        0x011A: \\\"XResolution\\\",\\n        0x011B: \\\"YResolution\\\",\\n        0x011C: \\\"PlanarConfiguration\\\",\\n        0x0128: \\\"ResolutionUnit\\\",\\n        0x0201: \\\"JpegIFOffset\\\",    // When image format is JPEG, this value show offset to JPEG data stored.(aka \\\"ThumbnailOffset\\\" or \\\"JPEGInterchangeFormat\\\")\\n        0x0202: \\\"JpegIFByteCount\\\", // When image format is JPEG, this value shows data size of JPEG image (aka \\\"ThumbnailLength\\\" or \\\"JPEGInterchangeFormatLength\\\")\\n        0x0211: \\\"YCbCrCoefficients\\\",\\n        0x0212: \\\"YCbCrSubSampling\\\",\\n        0x0213: \\\"YCbCrPositioning\\\",\\n        0x0214: \\\"ReferenceBlackWhite\\\"\\n    };\\n\\n    var StringValues = EXIF.StringValues = {\\n        ExposureProgram : {\\n            0 : \\\"Not defined\\\",\\n            1 : \\\"Manual\\\",\\n            2 : \\\"Normal program\\\",\\n            3 : \\\"Aperture priority\\\",\\n            4 : \\\"Shutter priority\\\",\\n            5 : \\\"Creative program\\\",\\n            6 : \\\"Action program\\\",\\n            7 : \\\"Portrait mode\\\",\\n            8 : \\\"Landscape mode\\\"\\n        },\\n        MeteringMode : {\\n            0 : \\\"Unknown\\\",\\n            1 : \\\"Average\\\",\\n            2 : \\\"CenterWeightedAverage\\\",\\n            3 : \\\"Spot\\\",\\n            4 : \\\"MultiSpot\\\",\\n            5 : \\\"Pattern\\\",\\n            6 : \\\"Partial\\\",\\n            255 : \\\"Other\\\"\\n        },\\n        LightSource : {\\n            0 : \\\"Unknown\\\",\\n            1 : \\\"Daylight\\\",\\n            2 : \\\"Fluorescent\\\",\\n            3 : \\\"Tungsten (incandescent light)\\\",\\n            4 : \\\"Flash\\\",\\n            9 : \\\"Fine weather\\\",\\n            10 : \\\"Cloudy weather\\\",\\n            11 : \\\"Shade\\\",\\n            12 : \\\"Daylight fluorescent (D 5700 - 7100K)\\\",\\n            13 : \\\"Day white fluorescent (N 4600 - 5400K)\\\",\\n            14 : \\\"Cool white fluorescent (W 3900 - 4500K)\\\",\\n            15 : \\\"White fluorescent (WW 3200 - 3700K)\\\",\\n            17 : \\\"Standard light A\\\",\\n            18 : \\\"Standard light B\\\",\\n            19 : \\\"Standard light C\\\",\\n            20 : \\\"D55\\\",\\n            21 : \\\"D65\\\",\\n            22 : \\\"D75\\\",\\n            23 : \\\"D50\\\",\\n            24 : \\\"ISO studio tungsten\\\",\\n            255 : \\\"Other\\\"\\n        },\\n        Flash : {\\n            0x0000 : \\\"Flash did not fire\\\",\\n            0x0001 : \\\"Flash fired\\\",\\n            0x0005 : \\\"Strobe return light not detected\\\",\\n            0x0007 : \\\"Strobe return light detected\\\",\\n            0x0009 : \\\"Flash fired, compulsory flash mode\\\",\\n            0x000D : \\\"Flash fired, compulsory flash mode, return light not detected\\\",\\n            0x000F : \\\"Flash fired, compulsory flash mode, return light detected\\\",\\n            0x0010 : \\\"Flash did not fire, compulsory flash mode\\\",\\n            0x0018 : \\\"Flash did not fire, auto mode\\\",\\n            0x0019 : \\\"Flash fired, auto mode\\\",\\n            0x001D : \\\"Flash fired, auto mode, return light not detected\\\",\\n            0x001F : \\\"Flash fired, auto mode, return light detected\\\",\\n            0x0020 : \\\"No flash function\\\",\\n            0x0041 : \\\"Flash fired, red-eye reduction mode\\\",\\n            0x0045 : \\\"Flash fired, red-eye reduction mode, return light not detected\\\",\\n            0x0047 : \\\"Flash fired, red-eye reduction mode, return light detected\\\",\\n            0x0049 : \\\"Flash fired, compulsory flash mode, red-eye reduction mode\\\",\\n            0x004D : \\\"Flash fired, compulsory flash mode, red-eye reduction mode, return light not detected\\\",\\n            0x004F : \\\"Flash fired, compulsory flash mode, red-eye reduction mode, return light detected\\\",\\n            0x0059 : \\\"Flash fired, auto mode, red-eye reduction mode\\\",\\n            0x005D : \\\"Flash fired, auto mode, return light not detected, red-eye reduction mode\\\",\\n            0x005F : \\\"Flash fired, auto mode, return light detected, red-eye reduction mode\\\"\\n        },\\n        SensingMethod : {\\n            1 : \\\"Not defined\\\",\\n            2 : \\\"One-chip color area sensor\\\",\\n            3 : \\\"Two-chip color area sensor\\\",\\n            4 : \\\"Three-chip color area sensor\\\",\\n            5 : \\\"Color sequential area sensor\\\",\\n            7 : \\\"Trilinear sensor\\\",\\n            8 : \\\"Color sequential linear sensor\\\"\\n        },\\n        SceneCaptureType : {\\n            0 : \\\"Standard\\\",\\n            1 : \\\"Landscape\\\",\\n            2 : \\\"Portrait\\\",\\n            3 : \\\"Night scene\\\"\\n        },\\n        SceneType : {\\n            1 : \\\"Directly photographed\\\"\\n        },\\n        CustomRendered : {\\n            0 : \\\"Normal process\\\",\\n            1 : \\\"Custom process\\\"\\n        },\\n        WhiteBalance : {\\n            0 : \\\"Auto white balance\\\",\\n            1 : \\\"Manual white balance\\\"\\n        },\\n        GainControl : {\\n            0 : \\\"None\\\",\\n            1 : \\\"Low gain up\\\",\\n            2 : \\\"High gain up\\\",\\n            3 : \\\"Low gain down\\\",\\n            4 : \\\"High gain down\\\"\\n        },\\n        Contrast : {\\n            0 : \\\"Normal\\\",\\n            1 : \\\"Soft\\\",\\n            2 : \\\"Hard\\\"\\n        },\\n        Saturation : {\\n            0 : \\\"Normal\\\",\\n            1 : \\\"Low saturation\\\",\\n            2 : \\\"High saturation\\\"\\n        },\\n        Sharpness : {\\n            0 : \\\"Normal\\\",\\n            1 : \\\"Soft\\\",\\n            2 : \\\"Hard\\\"\\n        },\\n        SubjectDistanceRange : {\\n            0 : \\\"Unknown\\\",\\n            1 : \\\"Macro\\\",\\n            2 : \\\"Close view\\\",\\n            3 : \\\"Distant view\\\"\\n        },\\n        FileSource : {\\n            3 : \\\"DSC\\\"\\n        },\\n\\n        Components : {\\n            0 : \\\"\\\",\\n            1 : \\\"Y\\\",\\n            2 : \\\"Cb\\\",\\n            3 : \\\"Cr\\\",\\n            4 : \\\"R\\\",\\n            5 : \\\"G\\\",\\n            6 : \\\"B\\\"\\n        }\\n    };\\n\\n    function addEvent(element, event, handler) {\\n        if (element.addEventListener) {\\n            element.addEventListener(event, handler, false);\\n        } else if (element.attachEvent) {\\n            element.attachEvent(\\\"on\\\" + event, handler);\\n        }\\n    }\\n\\n    function imageHasData(img) {\\n        return !!(img.exifdata);\\n    }\\n\\n\\n    function base64ToArrayBuffer(base64, contentType) {\\n        contentType = contentType || base64.match(/^data\\\\:([^\\\\;]+)\\\\;base64,/mi)[1] || ''; // e.g. 'data:image/jpeg;base64,...' => 'image/jpeg'\\n        base64 = base64.replace(/^data\\\\:([^\\\\;]+)\\\\;base64,/gmi, '');\\n        var binary = atob(base64);\\n        var len = binary.length;\\n        var buffer = new ArrayBuffer(len);\\n        var view = new Uint8Array(buffer);\\n        for (var i = 0; i < len; i++) {\\n            view[i] = binary.charCodeAt(i);\\n        }\\n        return buffer;\\n    }\\n\\n    function objectURLToBlob(url, callback) {\\n        var http = new XMLHttpRequest();\\n        http.open(\\\"GET\\\", url, true);\\n        http.responseType = \\\"blob\\\";\\n        http.onload = function(e) {\\n            if (this.status == 200 || this.status === 0) {\\n                callback(this.response);\\n            }\\n        };\\n        http.send();\\n    }\\n\\n    function getImageData(img, callback) {\\n        function handleBinaryFile(binFile) {\\n            var data = findEXIFinJPEG(binFile);\\n            img.exifdata = data || {};\\n            var iptcdata = findIPTCinJPEG(binFile);\\n            img.iptcdata = iptcdata || {};\\n            if (EXIF.isXmpEnabled) {\\n               var xmpdata= findXMPinJPEG(binFile);\\n               img.xmpdata = xmpdata || {};               \\n            }\\n            if (callback) {\\n                callback.call(img);\\n            }\\n        }\\n\\n        if (img.src) {\\n            if (/^data\\\\:/i.test(img.src)) { // Data URI\\n                var arrayBuffer = base64ToArrayBuffer(img.src);\\n                handleBinaryFile(arrayBuffer);\\n\\n            } else if (/^blob\\\\:/i.test(img.src)) { // Object URL\\n                var fileReader = new FileReader();\\n                fileReader.onload = function(e) {\\n                    handleBinaryFile(e.target.result);\\n                };\\n                objectURLToBlob(img.src, function (blob) {\\n                    fileReader.readAsArrayBuffer(blob);\\n                });\\n            } else {\\n                var http = new XMLHttpRequest();\\n                http.onload = function() {\\n                    if (this.status == 200 || this.status === 0) {\\n                        handleBinaryFile(http.response);\\n                    } else {\\n                        throw \\\"Could not load image\\\";\\n                    }\\n                    http = null;\\n                };\\n                http.open(\\\"GET\\\", img.src, true);\\n                http.responseType = \\\"arraybuffer\\\";\\n                http.send(null);\\n            }\\n        } else if (self.FileReader && (img instanceof self.Blob || img instanceof self.File)) {\\n            var fileReader = new FileReader();\\n            fileReader.onload = function(e) {\\n                if (debug) console.log(\\\"Got file of length \\\" + e.target.result.byteLength);\\n                handleBinaryFile(e.target.result);\\n            };\\n\\n            fileReader.readAsArrayBuffer(img);\\n        }\\n    }\\n\\n    function findEXIFinJPEG(file) {\\n        var dataView = new DataView(file);\\n\\n        if (debug) console.log(\\\"Got file of length \\\" + file.byteLength);\\n        if ((dataView.getUint8(0) != 0xFF) || (dataView.getUint8(1) != 0xD8)) {\\n            if (debug) console.log(\\\"Not a valid JPEG\\\");\\n            return false; // not a valid jpeg\\n        }\\n\\n        var offset = 2,\\n            length = file.byteLength,\\n            marker;\\n\\n        while (offset < length) {\\n            if (dataView.getUint8(offset) != 0xFF) {\\n                if (debug) console.log(\\\"Not a valid marker at offset \\\" + offset + \\\", found: \\\" + dataView.getUint8(offset));\\n                return false; // not a valid marker, something is wrong\\n            }\\n\\n            marker = dataView.getUint8(offset + 1);\\n            if (debug) console.log(marker);\\n\\n            // we could implement handling for other markers here,\\n            // but we're only looking for 0xFFE1 for EXIF data\\n\\n            if (marker == 225) {\\n                if (debug) console.log(\\\"Found 0xFFE1 marker\\\");\\n\\n                return readEXIFData(dataView, offset + 4, dataView.getUint16(offset + 2) - 2);\\n\\n                // offset += 2 + file.getShortAt(offset+2, true);\\n\\n            } else {\\n                offset += 2 + dataView.getUint16(offset+2);\\n            }\\n\\n        }\\n\\n    }\\n\\n    function findIPTCinJPEG(file) {\\n        var dataView = new DataView(file);\\n\\n        if (debug) console.log(\\\"Got file of length \\\" + file.byteLength);\\n        if ((dataView.getUint8(0) != 0xFF) || (dataView.getUint8(1) != 0xD8)) {\\n            if (debug) console.log(\\\"Not a valid JPEG\\\");\\n            return false; // not a valid jpeg\\n        }\\n\\n        var offset = 2,\\n            length = file.byteLength;\\n\\n\\n        var isFieldSegmentStart = function(dataView, offset){\\n            return (\\n                dataView.getUint8(offset) === 0x38 &&\\n                dataView.getUint8(offset+1) === 0x42 &&\\n                dataView.getUint8(offset+2) === 0x49 &&\\n                dataView.getUint8(offset+3) === 0x4D &&\\n                dataView.getUint8(offset+4) === 0x04 &&\\n                dataView.getUint8(offset+5) === 0x04\\n            );\\n        };\\n\\n        while (offset < length) {\\n\\n            if ( isFieldSegmentStart(dataView, offset )){\\n\\n                // Get the length of the name header (which is padded to an even number of bytes)\\n                var nameHeaderLength = dataView.getUint8(offset+7);\\n                if(nameHeaderLength % 2 !== 0) nameHeaderLength += 1;\\n                // Check for pre photoshop 6 format\\n                if(nameHeaderLength === 0) {\\n                    // Always 4\\n                    nameHeaderLength = 4;\\n                }\\n\\n                var startOffset = offset + 8 + nameHeaderLength;\\n                var sectionLength = dataView.getUint16(offset + 6 + nameHeaderLength);\\n\\n                return readIPTCData(file, startOffset, sectionLength);\\n\\n                break;\\n\\n            }\\n\\n\\n            // Not the marker, continue searching\\n            offset++;\\n\\n        }\\n\\n    }\\n    var IptcFieldMap = {\\n        0x78 : 'caption',\\n        0x6E : 'credit',\\n        0x19 : 'keywords',\\n        0x37 : 'dateCreated',\\n        0x50 : 'byline',\\n        0x55 : 'bylineTitle',\\n        0x7A : 'captionWriter',\\n        0x69 : 'headline',\\n        0x74 : 'copyright',\\n        0x0F : 'category'\\n    };\\n    function readIPTCData(file, startOffset, sectionLength){\\n        var dataView = new DataView(file);\\n        var data = {};\\n        var fieldValue, fieldName, dataSize, segmentType, segmentSize;\\n        var segmentStartPos = startOffset;\\n        while(segmentStartPos < startOffset+sectionLength) {\\n            if(dataView.getUint8(segmentStartPos) === 0x1C && dataView.getUint8(segmentStartPos+1) === 0x02){\\n                segmentType = dataView.getUint8(segmentStartPos+2);\\n                if(segmentType in IptcFieldMap) {\\n                    dataSize = dataView.getInt16(segmentStartPos+3);\\n                    segmentSize = dataSize + 5;\\n                    fieldName = IptcFieldMap[segmentType];\\n                    fieldValue = getStringFromDB(dataView, segmentStartPos+5, dataSize);\\n                    // Check if we already stored a value with this name\\n                    if(data.hasOwnProperty(fieldName)) {\\n                        // Value already stored with this name, create multivalue field\\n                        if(data[fieldName] instanceof Array) {\\n                            data[fieldName].push(fieldValue);\\n                        }\\n                        else {\\n                            data[fieldName] = [data[fieldName], fieldValue];\\n                        }\\n                    }\\n                    else {\\n                        data[fieldName] = fieldValue;\\n                    }\\n                }\\n\\n            }\\n            segmentStartPos++;\\n        }\\n        return data;\\n    }\\n\\n\\n\\n    function readTags(file, tiffStart, dirStart, strings, bigEnd) {\\n        var entries = file.getUint16(dirStart, !bigEnd),\\n            tags = {},\\n            entryOffset, tag,\\n            i;\\n\\n        for (i=0;i<entries;i++) {\\n            entryOffset = dirStart + i*12 + 2;\\n            tag = strings[file.getUint16(entryOffset, !bigEnd)];\\n            if (!tag && debug) console.log(\\\"Unknown tag: \\\" + file.getUint16(entryOffset, !bigEnd));\\n            tags[tag] = readTagValue(file, entryOffset, tiffStart, dirStart, bigEnd);\\n        }\\n        return tags;\\n    }\\n\\n\\n    function readTagValue(file, entryOffset, tiffStart, dirStart, bigEnd) {\\n        var type = file.getUint16(entryOffset+2, !bigEnd),\\n            numValues = file.getUint32(entryOffset+4, !bigEnd),\\n            valueOffset = file.getUint32(entryOffset+8, !bigEnd) + tiffStart,\\n            offset,\\n            vals, val, n,\\n            numerator, denominator;\\n\\n        switch (type) {\\n            case 1: // byte, 8-bit unsigned int\\n            case 7: // undefined, 8-bit byte, value depending on field\\n                if (numValues == 1) {\\n                    return file.getUint8(entryOffset + 8, !bigEnd);\\n                } else {\\n                    offset = numValues > 4 ? valueOffset : (entryOffset + 8);\\n                    vals = [];\\n                    for (n=0;n<numValues;n++) {\\n                        vals[n] = file.getUint8(offset + n);\\n                    }\\n                    return vals;\\n                }\\n\\n            case 2: // ascii, 8-bit byte\\n                offset = numValues > 4 ? valueOffset : (entryOffset + 8);\\n                return getStringFromDB(file, offset, numValues-1);\\n\\n            case 3: // short, 16 bit int\\n                if (numValues == 1) {\\n                    return file.getUint16(entryOffset + 8, !bigEnd);\\n                } else {\\n                    offset = numValues > 2 ? valueOffset : (entryOffset + 8);\\n                    vals = [];\\n                    for (n=0;n<numValues;n++) {\\n                        vals[n] = file.getUint16(offset + 2*n, !bigEnd);\\n                    }\\n                    return vals;\\n                }\\n\\n            case 4: // long, 32 bit int\\n                if (numValues == 1) {\\n                    return file.getUint32(entryOffset + 8, !bigEnd);\\n                } else {\\n                    vals = [];\\n                    for (n=0;n<numValues;n++) {\\n                        vals[n] = file.getUint32(valueOffset + 4*n, !bigEnd);\\n                    }\\n                    return vals;\\n                }\\n\\n            case 5:    // rational = two long values, first is numerator, second is denominator\\n                if (numValues == 1) {\\n                    numerator = file.getUint32(valueOffset, !bigEnd);\\n                    denominator = file.getUint32(valueOffset+4, !bigEnd);\\n                    val = new Number(numerator / denominator);\\n                    val.numerator = numerator;\\n                    val.denominator = denominator;\\n                    return val;\\n                } else {\\n                    vals = [];\\n                    for (n=0;n<numValues;n++) {\\n                        numerator = file.getUint32(valueOffset + 8*n, !bigEnd);\\n                        denominator = file.getUint32(valueOffset+4 + 8*n, !bigEnd);\\n                        vals[n] = new Number(numerator / denominator);\\n                        vals[n].numerator = numerator;\\n                        vals[n].denominator = denominator;\\n                    }\\n                    return vals;\\n                }\\n\\n            case 9: // slong, 32 bit signed int\\n                if (numValues == 1) {\\n                    return file.getInt32(entryOffset + 8, !bigEnd);\\n                } else {\\n                    vals = [];\\n                    for (n=0;n<numValues;n++) {\\n                        vals[n] = file.getInt32(valueOffset + 4*n, !bigEnd);\\n                    }\\n                    return vals;\\n                }\\n\\n            case 10: // signed rational, two slongs, first is numerator, second is denominator\\n                if (numValues == 1) {\\n                    return file.getInt32(valueOffset, !bigEnd) / file.getInt32(valueOffset+4, !bigEnd);\\n                } else {\\n                    vals = [];\\n                    for (n=0;n<numValues;n++) {\\n                        vals[n] = file.getInt32(valueOffset + 8*n, !bigEnd) / file.getInt32(valueOffset+4 + 8*n, !bigEnd);\\n                    }\\n                    return vals;\\n                }\\n        }\\n    }\\n\\n    /**\\n    * Given an IFD (Image File Directory) start offset\\n    * returns an offset to next IFD or 0 if it's the last IFD.\\n    */\\n    function getNextIFDOffset(dataView, dirStart, bigEnd){\\n        //the first 2bytes means the number of directory entries contains in this IFD\\n        var entries = dataView.getUint16(dirStart, !bigEnd);\\n\\n        // After last directory entry, there is a 4bytes of data,\\n        // it means an offset to next IFD.\\n        // If its value is '0x00000000', it means this is the last IFD and there is no linked IFD.\\n\\n        return dataView.getUint32(dirStart + 2 + entries * 12, !bigEnd); // each entry is 12 bytes long\\n    }\\n\\n    function readThumbnailImage(dataView, tiffStart, firstIFDOffset, bigEnd){\\n        // get the IFD1 offset\\n        var IFD1OffsetPointer = getNextIFDOffset(dataView, tiffStart+firstIFDOffset, bigEnd);\\n\\n        if (!IFD1OffsetPointer) {\\n            // console.log('******** IFD1Offset is empty, image thumb not found ********');\\n            return {};\\n        }\\n        else if (IFD1OffsetPointer > dataView.byteLength) { // this should not happen\\n            // console.log('******** IFD1Offset is outside the bounds of the DataView ********');\\n            return {};\\n        }\\n        // console.log('*******  thumbnail IFD offset (IFD1) is: %s', IFD1OffsetPointer);\\n\\n        var thumbTags = readTags(dataView, tiffStart, tiffStart + IFD1OffsetPointer, IFD1Tags, bigEnd)\\n\\n        // EXIF 2.3 specification for JPEG format thumbnail\\n\\n        // If the value of Compression(0x0103) Tag in IFD1 is '6', thumbnail image format is JPEG.\\n        // Most of Exif image uses JPEG format for thumbnail. In that case, you can get offset of thumbnail\\n        // by JpegIFOffset(0x0201) Tag in IFD1, size of thumbnail by JpegIFByteCount(0x0202) Tag.\\n        // Data format is ordinary JPEG format, starts from 0xFFD8 and ends by 0xFFD9. It seems that\\n        // JPEG format and 160x120pixels of size are recommended thumbnail format for Exif2.1 or later.\\n\\n        if (thumbTags['Compression']) {\\n            // console.log('Thumbnail image found!');\\n\\n            switch (thumbTags['Compression']) {\\n                case 6:\\n                    // console.log('Thumbnail image format is JPEG');\\n                    if (thumbTags.JpegIFOffset && thumbTags.JpegIFByteCount) {\\n                    // extract the thumbnail\\n                        var tOffset = tiffStart + thumbTags.JpegIFOffset;\\n                        var tLength = thumbTags.JpegIFByteCount;\\n                        thumbTags['blob'] = new Blob([new Uint8Array(dataView.buffer, tOffset, tLength)], {\\n                            type: 'image/jpeg'\\n                        });\\n                    }\\n                break;\\n\\n            case 1:\\n                console.log(\\\"Thumbnail image format is TIFF, which is not implemented.\\\");\\n                break;\\n            default:\\n                console.log(\\\"Unknown thumbnail image format '%s'\\\", thumbTags['Compression']);\\n            }\\n        }\\n        else if (thumbTags['PhotometricInterpretation'] == 2) {\\n            console.log(\\\"Thumbnail image format is RGB, which is not implemented.\\\");\\n        }\\n        return thumbTags;\\n    }\\n\\n    function getStringFromDB(buffer, start, length) {\\n        var outstr = \\\"\\\";\\n        for (n = start; n < start+length; n++) {\\n            outstr += String.fromCharCode(buffer.getUint8(n));\\n        }\\n        return outstr;\\n    }\\n\\n    function readEXIFData(file, start) {\\n        if (getStringFromDB(file, start, 4) != \\\"Exif\\\") {\\n            if (debug) console.log(\\\"Not valid EXIF data! \\\" + getStringFromDB(file, start, 4));\\n            return false;\\n        }\\n\\n        var bigEnd,\\n            tags, tag,\\n            exifData, gpsData,\\n            tiffOffset = start + 6;\\n\\n        // test for TIFF validity and endianness\\n        if (file.getUint16(tiffOffset) == 0x4949) {\\n            bigEnd = false;\\n        } else if (file.getUint16(tiffOffset) == 0x4D4D) {\\n            bigEnd = true;\\n        } else {\\n            if (debug) console.log(\\\"Not valid TIFF data! (no 0x4949 or 0x4D4D)\\\");\\n            return false;\\n        }\\n\\n        if (file.getUint16(tiffOffset+2, !bigEnd) != 0x002A) {\\n            if (debug) console.log(\\\"Not valid TIFF data! (no 0x002A)\\\");\\n            return false;\\n        }\\n\\n        var firstIFDOffset = file.getUint32(tiffOffset+4, !bigEnd);\\n\\n        if (firstIFDOffset < 0x00000008) {\\n            if (debug) console.log(\\\"Not valid TIFF data! (First offset less than 8)\\\", file.getUint32(tiffOffset+4, !bigEnd));\\n            return false;\\n        }\\n\\n        tags = readTags(file, tiffOffset, tiffOffset + firstIFDOffset, TiffTags, bigEnd);\\n\\n        if (tags.ExifIFDPointer) {\\n            exifData = readTags(file, tiffOffset, tiffOffset + tags.ExifIFDPointer, ExifTags, bigEnd);\\n            for (tag in exifData) {\\n                switch (tag) {\\n                    case \\\"LightSource\\\" :\\n                    case \\\"Flash\\\" :\\n                    case \\\"MeteringMode\\\" :\\n                    case \\\"ExposureProgram\\\" :\\n                    case \\\"SensingMethod\\\" :\\n                    case \\\"SceneCaptureType\\\" :\\n                    case \\\"SceneType\\\" :\\n                    case \\\"CustomRendered\\\" :\\n                    case \\\"WhiteBalance\\\" :\\n                    case \\\"GainControl\\\" :\\n                    case \\\"Contrast\\\" :\\n                    case \\\"Saturation\\\" :\\n                    case \\\"Sharpness\\\" :\\n                    case \\\"SubjectDistanceRange\\\" :\\n                    case \\\"FileSource\\\" :\\n                        exifData[tag] = StringValues[tag][exifData[tag]];\\n                        break;\\n\\n                    case \\\"ExifVersion\\\" :\\n                    case \\\"FlashpixVersion\\\" :\\n                        exifData[tag] = String.fromCharCode(exifData[tag][0], exifData[tag][1], exifData[tag][2], exifData[tag][3]);\\n                        break;\\n\\n                    case \\\"ComponentsConfiguration\\\" :\\n                        exifData[tag] =\\n                            StringValues.Components[exifData[tag][0]] +\\n                            StringValues.Components[exifData[tag][1]] +\\n                            StringValues.Components[exifData[tag][2]] +\\n                            StringValues.Components[exifData[tag][3]];\\n                        break;\\n                }\\n                tags[tag] = exifData[tag];\\n            }\\n        }\\n\\n        if (tags.GPSInfoIFDPointer) {\\n            gpsData = readTags(file, tiffOffset, tiffOffset + tags.GPSInfoIFDPointer, GPSTags, bigEnd);\\n            for (tag in gpsData) {\\n                switch (tag) {\\n                    case \\\"GPSVersionID\\\" :\\n                        gpsData[tag] = gpsData[tag][0] +\\n                            \\\".\\\" + gpsData[tag][1] +\\n                            \\\".\\\" + gpsData[tag][2] +\\n                            \\\".\\\" + gpsData[tag][3];\\n                        break;\\n                }\\n                tags[tag] = gpsData[tag];\\n            }\\n        }\\n\\n        // extract thumbnail\\n        tags['thumbnail'] = readThumbnailImage(file, tiffOffset, firstIFDOffset, bigEnd);\\n\\n        return tags;\\n    }\\n\\n   function findXMPinJPEG(file) {\\n\\n        if (!('DOMParser' in self)) {\\n            // console.warn('XML parsing not supported without DOMParser');\\n            return;\\n        }\\n        var dataView = new DataView(file);\\n\\n        if (debug) console.log(\\\"Got file of length \\\" + file.byteLength);\\n        if ((dataView.getUint8(0) != 0xFF) || (dataView.getUint8(1) != 0xD8)) {\\n           if (debug) console.log(\\\"Not a valid JPEG\\\");\\n           return false; // not a valid jpeg\\n        }\\n\\n        var offset = 2,\\n            length = file.byteLength,\\n            dom = new DOMParser();\\n\\n        while (offset < (length-4)) {\\n            if (getStringFromDB(dataView, offset, 4) == \\\"http\\\") {\\n                var startOffset = offset - 1;\\n                var sectionLength = dataView.getUint16(offset - 2) - 1;\\n                var xmpString = getStringFromDB(dataView, startOffset, sectionLength)\\n                var xmpEndIndex = xmpString.indexOf('xmpmeta>') + 8;\\n                xmpString = xmpString.substring( xmpString.indexOf( '<x:xmpmeta' ), xmpEndIndex );\\n\\n                var indexOfXmp = xmpString.indexOf('x:xmpmeta') + 10\\n                //Many custom written programs embed xmp/xml without any namespace. Following are some of them.\\n                //Without these namespaces, XML is thought to be invalid by parsers\\n                xmpString = xmpString.slice(0, indexOfXmp)\\n                            + 'xmlns:Iptc4xmpCore=\\\"http://iptc.org/std/Iptc4xmpCore/1.0/xmlns/\\\" '\\n                            + 'xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" '\\n                            + 'xmlns:tiff=\\\"http://ns.adobe.com/tiff/1.0/\\\" '\\n                            + 'xmlns:plus=\\\"http://schemas.android.com/apk/lib/com.google.android.gms.plus\\\" '\\n                            + 'xmlns:ext=\\\"http://www.gettyimages.com/xsltExtension/1.0\\\" '\\n                            + 'xmlns:exif=\\\"http://ns.adobe.com/exif/1.0/\\\" '\\n                            + 'xmlns:stEvt=\\\"http://ns.adobe.com/xap/1.0/sType/ResourceEvent#\\\" '\\n                            + 'xmlns:stRef=\\\"http://ns.adobe.com/xap/1.0/sType/ResourceRef#\\\" '\\n                            + 'xmlns:crs=\\\"http://ns.adobe.com/camera-raw-settings/1.0/\\\" '\\n                            + 'xmlns:xapGImg=\\\"http://ns.adobe.com/xap/1.0/g/img/\\\" '\\n                            + 'xmlns:Iptc4xmpExt=\\\"http://iptc.org/std/Iptc4xmpExt/2008-02-29/\\\" '\\n                            + xmpString.slice(indexOfXmp)\\n\\n                var domDocument = dom.parseFromString( xmpString, 'text/xml' );\\n                return xml2Object(domDocument);\\n            } else{\\n             offset++;\\n            }\\n        }\\n    }\\n\\n    function xml2json(xml) {\\n        var json = {};\\n      \\n        if (xml.nodeType == 1) { // element node\\n          if (xml.attributes.length > 0) {\\n            json['@attributes'] = {};\\n            for (var j = 0; j < xml.attributes.length; j++) {\\n              var attribute = xml.attributes.item(j);\\n              json['@attributes'][attribute.nodeName] = attribute.nodeValue;\\n            }\\n          }\\n        } else if (xml.nodeType == 3) { // text node\\n          return xml.nodeValue;\\n        }\\n      \\n        // deal with children\\n        if (xml.hasChildNodes()) {\\n          for(var i = 0; i < xml.childNodes.length; i++) {\\n            var child = xml.childNodes.item(i);\\n            var nodeName = child.nodeName;\\n            if (json[nodeName] == null) {\\n              json[nodeName] = xml2json(child);\\n            } else {\\n              if (json[nodeName].push == null) {\\n                var old = json[nodeName];\\n                json[nodeName] = [];\\n                json[nodeName].push(old);\\n              }\\n              json[nodeName].push(xml2json(child));\\n            }\\n          }\\n        }\\n        \\n        return json;\\n    }\\n\\n    function xml2Object(xml) {\\n        try {\\n            var obj = {};\\n            if (xml.children.length > 0) {\\n              for (var i = 0; i < xml.children.length; i++) {\\n                var item = xml.children.item(i);\\n                var attributes = item.attributes;\\n                for(var idx in attributes) {\\n                    var itemAtt = attributes[idx];\\n                    var dataKey = itemAtt.nodeName;\\n                    var dataValue = itemAtt.nodeValue;\\n\\n                    if(dataKey !== undefined) {\\n                        obj[dataKey] = dataValue;\\n                    }\\n                }\\n                var nodeName = item.nodeName;\\n\\n                if (typeof (obj[nodeName]) == \\\"undefined\\\") {\\n                  obj[nodeName] = xml2json(item);\\n                } else {\\n                  if (typeof (obj[nodeName].push) == \\\"undefined\\\") {\\n                    var old = obj[nodeName];\\n\\n                    obj[nodeName] = [];\\n                    obj[nodeName].push(old);\\n                  }\\n                  obj[nodeName].push(xml2json(item));\\n                }\\n              }\\n            } else {\\n              obj = xml.textContent;\\n            }\\n            return obj;\\n          } catch (e) {\\n              console.log(e.message);\\n          }\\n    }\\n\\n    EXIF.enableXmp = function() {\\n        EXIF.isXmpEnabled = true;\\n    }\\n\\n    EXIF.disableXmp = function() {\\n        EXIF.isXmpEnabled = false;\\n    }\\n\\n    EXIF.getData = function(img, callback) {\\n        if (((self.Image && img instanceof self.Image)\\n            || (self.HTMLImageElement && img instanceof self.HTMLImageElement))\\n            && !img.complete)\\n            return false;\\n\\n        if (!imageHasData(img)) {\\n            getImageData(img, callback);\\n        } else {\\n            if (callback) {\\n                callback.call(img);\\n            }\\n        }\\n        return true;\\n    }\\n\\n    EXIF.getTag = function(img, tag) {\\n        if (!imageHasData(img)) return;\\n        return img.exifdata[tag];\\n    }\\n    \\n    EXIF.getIptcTag = function(img, tag) {\\n        if (!imageHasData(img)) return;\\n        return img.iptcdata[tag];\\n    }\\n\\n    EXIF.getAllTags = function(img) {\\n        if (!imageHasData(img)) return {};\\n        var a,\\n            data = img.exifdata,\\n            tags = {};\\n        for (a in data) {\\n            if (data.hasOwnProperty(a)) {\\n                tags[a] = data[a];\\n            }\\n        }\\n        return tags;\\n    }\\n    \\n    EXIF.getAllIptcTags = function(img) {\\n        if (!imageHasData(img)) return {};\\n        var a,\\n            data = img.iptcdata,\\n            tags = {};\\n        for (a in data) {\\n            if (data.hasOwnProperty(a)) {\\n                tags[a] = data[a];\\n            }\\n        }\\n        return tags;\\n    }\\n\\n    EXIF.pretty = function(img) {\\n        if (!imageHasData(img)) return \\\"\\\";\\n        var a,\\n            data = img.exifdata,\\n            strPretty = \\\"\\\";\\n        for (a in data) {\\n            if (data.hasOwnProperty(a)) {\\n                if (typeof data[a] == \\\"object\\\") {\\n                    if (data[a] instanceof Number) {\\n                        strPretty += a + \\\" : \\\" + data[a] + \\\" [\\\" + data[a].numerator + \\\"/\\\" + data[a].denominator + \\\"]\\\\r\\\\n\\\";\\n                    } else {\\n                        strPretty += a + \\\" : [\\\" + data[a].length + \\\" values]\\\\r\\\\n\\\";\\n                    }\\n                } else {\\n                    strPretty += a + \\\" : \\\" + data[a] + \\\"\\\\r\\\\n\\\";\\n                }\\n            }\\n        }\\n        return strPretty;\\n    }\\n\\n    EXIF.readFromBinaryFile = function(file) {\\n        return findEXIFinJPEG(file);\\n    }\\n\\n    if (true) {\\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {\\n            return EXIF;\\n        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\\n\\t\\t\\t\\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\\n    }\\n}.call(this));\\n\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZDovd2ViL25vZGVfbW9kdWxlcy9leGlmLWpzL2V4aWYuanM/YWY4NSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7QUFHQTtBQUNBLCtEQUErRCxLQUFLLHFCQUFxQiwwQkFBMEI7QUFDbkgsNkNBQTZDLEtBQUs7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsU0FBUztBQUNoQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwyQ0FBMkM7QUFDM0M7QUFDQTs7QUFFQSxhQUFhLHFDQUFxQztBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3Qjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQSxhQUFhO0FBQ2I7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6Qjs7QUFFQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7OztBQUdBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUlBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTs7QUFFQSxpQkFBaUIsVUFBVTtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EsNkJBQTZCLFlBQVk7QUFDekM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EsNkJBQTZCLFlBQVk7QUFDekM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsNkJBQTZCLFlBQVk7QUFDekM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLDZCQUE2QixZQUFZO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsNkJBQTZCLFlBQVk7QUFDekM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsNkJBQTZCLFlBQVk7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSx3RUFBd0U7QUFDeEU7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQTJEO0FBQzNEO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHVCQUF1QixrQkFBa0I7QUFDekM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQSwyQkFBMkIsMkJBQTJCO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyw4QkFBOEI7QUFDdkM7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esd0JBQXdCLDJCQUEyQjtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qix5QkFBeUI7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQUE7QUFDVDtBQUNBLENBQUMiLCJmaWxlIjoiNzMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKSB7XG5cbiAgICB2YXIgZGVidWcgPSBmYWxzZTtcblxuICAgIHZhciByb290ID0gdGhpcztcblxuICAgIHZhciBFWElGID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgICAgIGlmIChvYmogaW5zdGFuY2VvZiBFWElGKSByZXR1cm4gb2JqO1xuICAgICAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgRVhJRikpIHJldHVybiBuZXcgRVhJRihvYmopO1xuICAgICAgICB0aGlzLkVYSUZ3cmFwcGVkID0gb2JqO1xuICAgIH07XG5cbiAgICBpZiAodHlwZW9mIGV4cG9ydHMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuICAgICAgICAgICAgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gRVhJRjtcbiAgICAgICAgfVxuICAgICAgICBleHBvcnRzLkVYSUYgPSBFWElGO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJvb3QuRVhJRiA9IEVYSUY7XG4gICAgfVxuXG4gICAgdmFyIEV4aWZUYWdzID0gRVhJRi5UYWdzID0ge1xuXG4gICAgICAgIC8vIHZlcnNpb24gdGFnc1xuICAgICAgICAweDkwMDAgOiBcIkV4aWZWZXJzaW9uXCIsICAgICAgICAgICAgIC8vIEVYSUYgdmVyc2lvblxuICAgICAgICAweEEwMDAgOiBcIkZsYXNocGl4VmVyc2lvblwiLCAgICAgICAgIC8vIEZsYXNocGl4IGZvcm1hdCB2ZXJzaW9uXG5cbiAgICAgICAgLy8gY29sb3JzcGFjZSB0YWdzXG4gICAgICAgIDB4QTAwMSA6IFwiQ29sb3JTcGFjZVwiLCAgICAgICAgICAgICAgLy8gQ29sb3Igc3BhY2UgaW5mb3JtYXRpb24gdGFnXG5cbiAgICAgICAgLy8gaW1hZ2UgY29uZmlndXJhdGlvblxuICAgICAgICAweEEwMDIgOiBcIlBpeGVsWERpbWVuc2lvblwiLCAgICAgICAgIC8vIFZhbGlkIHdpZHRoIG9mIG1lYW5pbmdmdWwgaW1hZ2VcbiAgICAgICAgMHhBMDAzIDogXCJQaXhlbFlEaW1lbnNpb25cIiwgICAgICAgICAvLyBWYWxpZCBoZWlnaHQgb2YgbWVhbmluZ2Z1bCBpbWFnZVxuICAgICAgICAweDkxMDEgOiBcIkNvbXBvbmVudHNDb25maWd1cmF0aW9uXCIsIC8vIEluZm9ybWF0aW9uIGFib3V0IGNoYW5uZWxzXG4gICAgICAgIDB4OTEwMiA6IFwiQ29tcHJlc3NlZEJpdHNQZXJQaXhlbFwiLCAgLy8gQ29tcHJlc3NlZCBiaXRzIHBlciBwaXhlbFxuXG4gICAgICAgIC8vIHVzZXIgaW5mb3JtYXRpb25cbiAgICAgICAgMHg5MjdDIDogXCJNYWtlck5vdGVcIiwgICAgICAgICAgICAgICAvLyBBbnkgZGVzaXJlZCBpbmZvcm1hdGlvbiB3cml0dGVuIGJ5IHRoZSBtYW51ZmFjdHVyZXJcbiAgICAgICAgMHg5Mjg2IDogXCJVc2VyQ29tbWVudFwiLCAgICAgICAgICAgICAvLyBDb21tZW50cyBieSB1c2VyXG5cbiAgICAgICAgLy8gcmVsYXRlZCBmaWxlXG4gICAgICAgIDB4QTAwNCA6IFwiUmVsYXRlZFNvdW5kRmlsZVwiLCAgICAgICAgLy8gTmFtZSBvZiByZWxhdGVkIHNvdW5kIGZpbGVcblxuICAgICAgICAvLyBkYXRlIGFuZCB0aW1lXG4gICAgICAgIDB4OTAwMyA6IFwiRGF0ZVRpbWVPcmlnaW5hbFwiLCAgICAgICAgLy8gRGF0ZSBhbmQgdGltZSB3aGVuIHRoZSBvcmlnaW5hbCBpbWFnZSB3YXMgZ2VuZXJhdGVkXG4gICAgICAgIDB4OTAwNCA6IFwiRGF0ZVRpbWVEaWdpdGl6ZWRcIiwgICAgICAgLy8gRGF0ZSBhbmQgdGltZSB3aGVuIHRoZSBpbWFnZSB3YXMgc3RvcmVkIGRpZ2l0YWxseVxuICAgICAgICAweDkyOTAgOiBcIlN1YnNlY1RpbWVcIiwgICAgICAgICAgICAgIC8vIEZyYWN0aW9ucyBvZiBzZWNvbmRzIGZvciBEYXRlVGltZVxuICAgICAgICAweDkyOTEgOiBcIlN1YnNlY1RpbWVPcmlnaW5hbFwiLCAgICAgIC8vIEZyYWN0aW9ucyBvZiBzZWNvbmRzIGZvciBEYXRlVGltZU9yaWdpbmFsXG4gICAgICAgIDB4OTI5MiA6IFwiU3Vic2VjVGltZURpZ2l0aXplZFwiLCAgICAgLy8gRnJhY3Rpb25zIG9mIHNlY29uZHMgZm9yIERhdGVUaW1lRGlnaXRpemVkXG5cbiAgICAgICAgLy8gcGljdHVyZS10YWtpbmcgY29uZGl0aW9uc1xuICAgICAgICAweDgyOUEgOiBcIkV4cG9zdXJlVGltZVwiLCAgICAgICAgICAgIC8vIEV4cG9zdXJlIHRpbWUgKGluIHNlY29uZHMpXG4gICAgICAgIDB4ODI5RCA6IFwiRk51bWJlclwiLCAgICAgICAgICAgICAgICAgLy8gRiBudW1iZXJcbiAgICAgICAgMHg4ODIyIDogXCJFeHBvc3VyZVByb2dyYW1cIiwgICAgICAgICAvLyBFeHBvc3VyZSBwcm9ncmFtXG4gICAgICAgIDB4ODgyNCA6IFwiU3BlY3RyYWxTZW5zaXRpdml0eVwiLCAgICAgLy8gU3BlY3RyYWwgc2Vuc2l0aXZpdHlcbiAgICAgICAgMHg4ODI3IDogXCJJU09TcGVlZFJhdGluZ3NcIiwgICAgICAgICAvLyBJU08gc3BlZWQgcmF0aW5nXG4gICAgICAgIDB4ODgyOCA6IFwiT0VDRlwiLCAgICAgICAgICAgICAgICAgICAgLy8gT3B0b2VsZWN0cmljIGNvbnZlcnNpb24gZmFjdG9yXG4gICAgICAgIDB4OTIwMSA6IFwiU2h1dHRlclNwZWVkVmFsdWVcIiwgICAgICAgLy8gU2h1dHRlciBzcGVlZFxuICAgICAgICAweDkyMDIgOiBcIkFwZXJ0dXJlVmFsdWVcIiwgICAgICAgICAgIC8vIExlbnMgYXBlcnR1cmVcbiAgICAgICAgMHg5MjAzIDogXCJCcmlnaHRuZXNzVmFsdWVcIiwgICAgICAgICAvLyBWYWx1ZSBvZiBicmlnaHRuZXNzXG4gICAgICAgIDB4OTIwNCA6IFwiRXhwb3N1cmVCaWFzXCIsICAgICAgICAgICAgLy8gRXhwb3N1cmUgYmlhc1xuICAgICAgICAweDkyMDUgOiBcIk1heEFwZXJ0dXJlVmFsdWVcIiwgICAgICAgIC8vIFNtYWxsZXN0IEYgbnVtYmVyIG9mIGxlbnNcbiAgICAgICAgMHg5MjA2IDogXCJTdWJqZWN0RGlzdGFuY2VcIiwgICAgICAgICAvLyBEaXN0YW5jZSB0byBzdWJqZWN0IGluIG1ldGVyc1xuICAgICAgICAweDkyMDcgOiBcIk1ldGVyaW5nTW9kZVwiLCAgICAgICAgICAgIC8vIE1ldGVyaW5nIG1vZGVcbiAgICAgICAgMHg5MjA4IDogXCJMaWdodFNvdXJjZVwiLCAgICAgICAgICAgICAvLyBLaW5kIG9mIGxpZ2h0IHNvdXJjZVxuICAgICAgICAweDkyMDkgOiBcIkZsYXNoXCIsICAgICAgICAgICAgICAgICAgIC8vIEZsYXNoIHN0YXR1c1xuICAgICAgICAweDkyMTQgOiBcIlN1YmplY3RBcmVhXCIsICAgICAgICAgICAgIC8vIExvY2F0aW9uIGFuZCBhcmVhIG9mIG1haW4gc3ViamVjdFxuICAgICAgICAweDkyMEEgOiBcIkZvY2FsTGVuZ3RoXCIsICAgICAgICAgICAgIC8vIEZvY2FsIGxlbmd0aCBvZiB0aGUgbGVucyBpbiBtbVxuICAgICAgICAweEEyMEIgOiBcIkZsYXNoRW5lcmd5XCIsICAgICAgICAgICAgIC8vIFN0cm9iZSBlbmVyZ3kgaW4gQkNQU1xuICAgICAgICAweEEyMEMgOiBcIlNwYXRpYWxGcmVxdWVuY3lSZXNwb25zZVwiLCAgICAvL1xuICAgICAgICAweEEyMEUgOiBcIkZvY2FsUGxhbmVYUmVzb2x1dGlvblwiLCAgIC8vIE51bWJlciBvZiBwaXhlbHMgaW4gd2lkdGggZGlyZWN0aW9uIHBlciBGb2NhbFBsYW5lUmVzb2x1dGlvblVuaXRcbiAgICAgICAgMHhBMjBGIDogXCJGb2NhbFBsYW5lWVJlc29sdXRpb25cIiwgICAvLyBOdW1iZXIgb2YgcGl4ZWxzIGluIGhlaWdodCBkaXJlY3Rpb24gcGVyIEZvY2FsUGxhbmVSZXNvbHV0aW9uVW5pdFxuICAgICAgICAweEEyMTAgOiBcIkZvY2FsUGxhbmVSZXNvbHV0aW9uVW5pdFwiLCAgICAvLyBVbml0IGZvciBtZWFzdXJpbmcgRm9jYWxQbGFuZVhSZXNvbHV0aW9uIGFuZCBGb2NhbFBsYW5lWVJlc29sdXRpb25cbiAgICAgICAgMHhBMjE0IDogXCJTdWJqZWN0TG9jYXRpb25cIiwgICAgICAgICAvLyBMb2NhdGlvbiBvZiBzdWJqZWN0IGluIGltYWdlXG4gICAgICAgIDB4QTIxNSA6IFwiRXhwb3N1cmVJbmRleFwiLCAgICAgICAgICAgLy8gRXhwb3N1cmUgaW5kZXggc2VsZWN0ZWQgb24gY2FtZXJhXG4gICAgICAgIDB4QTIxNyA6IFwiU2Vuc2luZ01ldGhvZFwiLCAgICAgICAgICAgLy8gSW1hZ2Ugc2Vuc29yIHR5cGVcbiAgICAgICAgMHhBMzAwIDogXCJGaWxlU291cmNlXCIsICAgICAgICAgICAgICAvLyBJbWFnZSBzb3VyY2UgKDMgPT0gRFNDKVxuICAgICAgICAweEEzMDEgOiBcIlNjZW5lVHlwZVwiLCAgICAgICAgICAgICAgIC8vIFNjZW5lIHR5cGUgKDEgPT0gZGlyZWN0bHkgcGhvdG9ncmFwaGVkKVxuICAgICAgICAweEEzMDIgOiBcIkNGQVBhdHRlcm5cIiwgICAgICAgICAgICAgIC8vIENvbG9yIGZpbHRlciBhcnJheSBnZW9tZXRyaWMgcGF0dGVyblxuICAgICAgICAweEE0MDEgOiBcIkN1c3RvbVJlbmRlcmVkXCIsICAgICAgICAgIC8vIFNwZWNpYWwgcHJvY2Vzc2luZ1xuICAgICAgICAweEE0MDIgOiBcIkV4cG9zdXJlTW9kZVwiLCAgICAgICAgICAgIC8vIEV4cG9zdXJlIG1vZGVcbiAgICAgICAgMHhBNDAzIDogXCJXaGl0ZUJhbGFuY2VcIiwgICAgICAgICAgICAvLyAxID0gYXV0byB3aGl0ZSBiYWxhbmNlLCAyID0gbWFudWFsXG4gICAgICAgIDB4QTQwNCA6IFwiRGlnaXRhbFpvb21SYXRpb25cIiwgICAgICAgLy8gRGlnaXRhbCB6b29tIHJhdGlvXG4gICAgICAgIDB4QTQwNSA6IFwiRm9jYWxMZW5ndGhJbjM1bW1GaWxtXCIsICAgLy8gRXF1aXZhbGVudCBmb2FjbCBsZW5ndGggYXNzdW1pbmcgMzVtbSBmaWxtIGNhbWVyYSAoaW4gbW0pXG4gICAgICAgIDB4QTQwNiA6IFwiU2NlbmVDYXB0dXJlVHlwZVwiLCAgICAgICAgLy8gVHlwZSBvZiBzY2VuZVxuICAgICAgICAweEE0MDcgOiBcIkdhaW5Db250cm9sXCIsICAgICAgICAgICAgIC8vIERlZ3JlZSBvZiBvdmVyYWxsIGltYWdlIGdhaW4gYWRqdXN0bWVudFxuICAgICAgICAweEE0MDggOiBcIkNvbnRyYXN0XCIsICAgICAgICAgICAgICAgIC8vIERpcmVjdGlvbiBvZiBjb250cmFzdCBwcm9jZXNzaW5nIGFwcGxpZWQgYnkgY2FtZXJhXG4gICAgICAgIDB4QTQwOSA6IFwiU2F0dXJhdGlvblwiLCAgICAgICAgICAgICAgLy8gRGlyZWN0aW9uIG9mIHNhdHVyYXRpb24gcHJvY2Vzc2luZyBhcHBsaWVkIGJ5IGNhbWVyYVxuICAgICAgICAweEE0MEEgOiBcIlNoYXJwbmVzc1wiLCAgICAgICAgICAgICAgIC8vIERpcmVjdGlvbiBvZiBzaGFycG5lc3MgcHJvY2Vzc2luZyBhcHBsaWVkIGJ5IGNhbWVyYVxuICAgICAgICAweEE0MEIgOiBcIkRldmljZVNldHRpbmdEZXNjcmlwdGlvblwiLCAgICAvL1xuICAgICAgICAweEE0MEMgOiBcIlN1YmplY3REaXN0YW5jZVJhbmdlXCIsICAgIC8vIERpc3RhbmNlIHRvIHN1YmplY3RcblxuICAgICAgICAvLyBvdGhlciB0YWdzXG4gICAgICAgIDB4QTAwNSA6IFwiSW50ZXJvcGVyYWJpbGl0eUlGRFBvaW50ZXJcIixcbiAgICAgICAgMHhBNDIwIDogXCJJbWFnZVVuaXF1ZUlEXCIgICAgICAgICAgICAvLyBJZGVudGlmaWVyIGFzc2lnbmVkIHVuaXF1ZWx5IHRvIGVhY2ggaW1hZ2VcbiAgICB9O1xuXG4gICAgdmFyIFRpZmZUYWdzID0gRVhJRi5UaWZmVGFncyA9IHtcbiAgICAgICAgMHgwMTAwIDogXCJJbWFnZVdpZHRoXCIsXG4gICAgICAgIDB4MDEwMSA6IFwiSW1hZ2VIZWlnaHRcIixcbiAgICAgICAgMHg4NzY5IDogXCJFeGlmSUZEUG9pbnRlclwiLFxuICAgICAgICAweDg4MjUgOiBcIkdQU0luZm9JRkRQb2ludGVyXCIsXG4gICAgICAgIDB4QTAwNSA6IFwiSW50ZXJvcGVyYWJpbGl0eUlGRFBvaW50ZXJcIixcbiAgICAgICAgMHgwMTAyIDogXCJCaXRzUGVyU2FtcGxlXCIsXG4gICAgICAgIDB4MDEwMyA6IFwiQ29tcHJlc3Npb25cIixcbiAgICAgICAgMHgwMTA2IDogXCJQaG90b21ldHJpY0ludGVycHJldGF0aW9uXCIsXG4gICAgICAgIDB4MDExMiA6IFwiT3JpZW50YXRpb25cIixcbiAgICAgICAgMHgwMTE1IDogXCJTYW1wbGVzUGVyUGl4ZWxcIixcbiAgICAgICAgMHgwMTFDIDogXCJQbGFuYXJDb25maWd1cmF0aW9uXCIsXG4gICAgICAgIDB4MDIxMiA6IFwiWUNiQ3JTdWJTYW1wbGluZ1wiLFxuICAgICAgICAweDAyMTMgOiBcIllDYkNyUG9zaXRpb25pbmdcIixcbiAgICAgICAgMHgwMTFBIDogXCJYUmVzb2x1dGlvblwiLFxuICAgICAgICAweDAxMUIgOiBcIllSZXNvbHV0aW9uXCIsXG4gICAgICAgIDB4MDEyOCA6IFwiUmVzb2x1dGlvblVuaXRcIixcbiAgICAgICAgMHgwMTExIDogXCJTdHJpcE9mZnNldHNcIixcbiAgICAgICAgMHgwMTE2IDogXCJSb3dzUGVyU3RyaXBcIixcbiAgICAgICAgMHgwMTE3IDogXCJTdHJpcEJ5dGVDb3VudHNcIixcbiAgICAgICAgMHgwMjAxIDogXCJKUEVHSW50ZXJjaGFuZ2VGb3JtYXRcIixcbiAgICAgICAgMHgwMjAyIDogXCJKUEVHSW50ZXJjaGFuZ2VGb3JtYXRMZW5ndGhcIixcbiAgICAgICAgMHgwMTJEIDogXCJUcmFuc2ZlckZ1bmN0aW9uXCIsXG4gICAgICAgIDB4MDEzRSA6IFwiV2hpdGVQb2ludFwiLFxuICAgICAgICAweDAxM0YgOiBcIlByaW1hcnlDaHJvbWF0aWNpdGllc1wiLFxuICAgICAgICAweDAyMTEgOiBcIllDYkNyQ29lZmZpY2llbnRzXCIsXG4gICAgICAgIDB4MDIxNCA6IFwiUmVmZXJlbmNlQmxhY2tXaGl0ZVwiLFxuICAgICAgICAweDAxMzIgOiBcIkRhdGVUaW1lXCIsXG4gICAgICAgIDB4MDEwRSA6IFwiSW1hZ2VEZXNjcmlwdGlvblwiLFxuICAgICAgICAweDAxMEYgOiBcIk1ha2VcIixcbiAgICAgICAgMHgwMTEwIDogXCJNb2RlbFwiLFxuICAgICAgICAweDAxMzEgOiBcIlNvZnR3YXJlXCIsXG4gICAgICAgIDB4MDEzQiA6IFwiQXJ0aXN0XCIsXG4gICAgICAgIDB4ODI5OCA6IFwiQ29weXJpZ2h0XCJcbiAgICB9O1xuXG4gICAgdmFyIEdQU1RhZ3MgPSBFWElGLkdQU1RhZ3MgPSB7XG4gICAgICAgIDB4MDAwMCA6IFwiR1BTVmVyc2lvbklEXCIsXG4gICAgICAgIDB4MDAwMSA6IFwiR1BTTGF0aXR1ZGVSZWZcIixcbiAgICAgICAgMHgwMDAyIDogXCJHUFNMYXRpdHVkZVwiLFxuICAgICAgICAweDAwMDMgOiBcIkdQU0xvbmdpdHVkZVJlZlwiLFxuICAgICAgICAweDAwMDQgOiBcIkdQU0xvbmdpdHVkZVwiLFxuICAgICAgICAweDAwMDUgOiBcIkdQU0FsdGl0dWRlUmVmXCIsXG4gICAgICAgIDB4MDAwNiA6IFwiR1BTQWx0aXR1ZGVcIixcbiAgICAgICAgMHgwMDA3IDogXCJHUFNUaW1lU3RhbXBcIixcbiAgICAgICAgMHgwMDA4IDogXCJHUFNTYXRlbGxpdGVzXCIsXG4gICAgICAgIDB4MDAwOSA6IFwiR1BTU3RhdHVzXCIsXG4gICAgICAgIDB4MDAwQSA6IFwiR1BTTWVhc3VyZU1vZGVcIixcbiAgICAgICAgMHgwMDBCIDogXCJHUFNET1BcIixcbiAgICAgICAgMHgwMDBDIDogXCJHUFNTcGVlZFJlZlwiLFxuICAgICAgICAweDAwMEQgOiBcIkdQU1NwZWVkXCIsXG4gICAgICAgIDB4MDAwRSA6IFwiR1BTVHJhY2tSZWZcIixcbiAgICAgICAgMHgwMDBGIDogXCJHUFNUcmFja1wiLFxuICAgICAgICAweDAwMTAgOiBcIkdQU0ltZ0RpcmVjdGlvblJlZlwiLFxuICAgICAgICAweDAwMTEgOiBcIkdQU0ltZ0RpcmVjdGlvblwiLFxuICAgICAgICAweDAwMTIgOiBcIkdQU01hcERhdHVtXCIsXG4gICAgICAgIDB4MDAxMyA6IFwiR1BTRGVzdExhdGl0dWRlUmVmXCIsXG4gICAgICAgIDB4MDAxNCA6IFwiR1BTRGVzdExhdGl0dWRlXCIsXG4gICAgICAgIDB4MDAxNSA6IFwiR1BTRGVzdExvbmdpdHVkZVJlZlwiLFxuICAgICAgICAweDAwMTYgOiBcIkdQU0Rlc3RMb25naXR1ZGVcIixcbiAgICAgICAgMHgwMDE3IDogXCJHUFNEZXN0QmVhcmluZ1JlZlwiLFxuICAgICAgICAweDAwMTggOiBcIkdQU0Rlc3RCZWFyaW5nXCIsXG4gICAgICAgIDB4MDAxOSA6IFwiR1BTRGVzdERpc3RhbmNlUmVmXCIsXG4gICAgICAgIDB4MDAxQSA6IFwiR1BTRGVzdERpc3RhbmNlXCIsXG4gICAgICAgIDB4MDAxQiA6IFwiR1BTUHJvY2Vzc2luZ01ldGhvZFwiLFxuICAgICAgICAweDAwMUMgOiBcIkdQU0FyZWFJbmZvcm1hdGlvblwiLFxuICAgICAgICAweDAwMUQgOiBcIkdQU0RhdGVTdGFtcFwiLFxuICAgICAgICAweDAwMUUgOiBcIkdQU0RpZmZlcmVudGlhbFwiXG4gICAgfTtcblxuICAgICAvLyBFWElGIDIuMyBTcGVjXG4gICAgdmFyIElGRDFUYWdzID0gRVhJRi5JRkQxVGFncyA9IHtcbiAgICAgICAgMHgwMTAwOiBcIkltYWdlV2lkdGhcIixcbiAgICAgICAgMHgwMTAxOiBcIkltYWdlSGVpZ2h0XCIsXG4gICAgICAgIDB4MDEwMjogXCJCaXRzUGVyU2FtcGxlXCIsXG4gICAgICAgIDB4MDEwMzogXCJDb21wcmVzc2lvblwiLFxuICAgICAgICAweDAxMDY6IFwiUGhvdG9tZXRyaWNJbnRlcnByZXRhdGlvblwiLFxuICAgICAgICAweDAxMTE6IFwiU3RyaXBPZmZzZXRzXCIsXG4gICAgICAgIDB4MDExMjogXCJPcmllbnRhdGlvblwiLFxuICAgICAgICAweDAxMTU6IFwiU2FtcGxlc1BlclBpeGVsXCIsXG4gICAgICAgIDB4MDExNjogXCJSb3dzUGVyU3RyaXBcIixcbiAgICAgICAgMHgwMTE3OiBcIlN0cmlwQnl0ZUNvdW50c1wiLFxuICAgICAgICAweDAxMUE6IFwiWFJlc29sdXRpb25cIixcbiAgICAgICAgMHgwMTFCOiBcIllSZXNvbHV0aW9uXCIsXG4gICAgICAgIDB4MDExQzogXCJQbGFuYXJDb25maWd1cmF0aW9uXCIsXG4gICAgICAgIDB4MDEyODogXCJSZXNvbHV0aW9uVW5pdFwiLFxuICAgICAgICAweDAyMDE6IFwiSnBlZ0lGT2Zmc2V0XCIsICAgIC8vIFdoZW4gaW1hZ2UgZm9ybWF0IGlzIEpQRUcsIHRoaXMgdmFsdWUgc2hvdyBvZmZzZXQgdG8gSlBFRyBkYXRhIHN0b3JlZC4oYWthIFwiVGh1bWJuYWlsT2Zmc2V0XCIgb3IgXCJKUEVHSW50ZXJjaGFuZ2VGb3JtYXRcIilcbiAgICAgICAgMHgwMjAyOiBcIkpwZWdJRkJ5dGVDb3VudFwiLCAvLyBXaGVuIGltYWdlIGZvcm1hdCBpcyBKUEVHLCB0aGlzIHZhbHVlIHNob3dzIGRhdGEgc2l6ZSBvZiBKUEVHIGltYWdlIChha2EgXCJUaHVtYm5haWxMZW5ndGhcIiBvciBcIkpQRUdJbnRlcmNoYW5nZUZvcm1hdExlbmd0aFwiKVxuICAgICAgICAweDAyMTE6IFwiWUNiQ3JDb2VmZmljaWVudHNcIixcbiAgICAgICAgMHgwMjEyOiBcIllDYkNyU3ViU2FtcGxpbmdcIixcbiAgICAgICAgMHgwMjEzOiBcIllDYkNyUG9zaXRpb25pbmdcIixcbiAgICAgICAgMHgwMjE0OiBcIlJlZmVyZW5jZUJsYWNrV2hpdGVcIlxuICAgIH07XG5cbiAgICB2YXIgU3RyaW5nVmFsdWVzID0gRVhJRi5TdHJpbmdWYWx1ZXMgPSB7XG4gICAgICAgIEV4cG9zdXJlUHJvZ3JhbSA6IHtcbiAgICAgICAgICAgIDAgOiBcIk5vdCBkZWZpbmVkXCIsXG4gICAgICAgICAgICAxIDogXCJNYW51YWxcIixcbiAgICAgICAgICAgIDIgOiBcIk5vcm1hbCBwcm9ncmFtXCIsXG4gICAgICAgICAgICAzIDogXCJBcGVydHVyZSBwcmlvcml0eVwiLFxuICAgICAgICAgICAgNCA6IFwiU2h1dHRlciBwcmlvcml0eVwiLFxuICAgICAgICAgICAgNSA6IFwiQ3JlYXRpdmUgcHJvZ3JhbVwiLFxuICAgICAgICAgICAgNiA6IFwiQWN0aW9uIHByb2dyYW1cIixcbiAgICAgICAgICAgIDcgOiBcIlBvcnRyYWl0IG1vZGVcIixcbiAgICAgICAgICAgIDggOiBcIkxhbmRzY2FwZSBtb2RlXCJcbiAgICAgICAgfSxcbiAgICAgICAgTWV0ZXJpbmdNb2RlIDoge1xuICAgICAgICAgICAgMCA6IFwiVW5rbm93blwiLFxuICAgICAgICAgICAgMSA6IFwiQXZlcmFnZVwiLFxuICAgICAgICAgICAgMiA6IFwiQ2VudGVyV2VpZ2h0ZWRBdmVyYWdlXCIsXG4gICAgICAgICAgICAzIDogXCJTcG90XCIsXG4gICAgICAgICAgICA0IDogXCJNdWx0aVNwb3RcIixcbiAgICAgICAgICAgIDUgOiBcIlBhdHRlcm5cIixcbiAgICAgICAgICAgIDYgOiBcIlBhcnRpYWxcIixcbiAgICAgICAgICAgIDI1NSA6IFwiT3RoZXJcIlxuICAgICAgICB9LFxuICAgICAgICBMaWdodFNvdXJjZSA6IHtcbiAgICAgICAgICAgIDAgOiBcIlVua25vd25cIixcbiAgICAgICAgICAgIDEgOiBcIkRheWxpZ2h0XCIsXG4gICAgICAgICAgICAyIDogXCJGbHVvcmVzY2VudFwiLFxuICAgICAgICAgICAgMyA6IFwiVHVuZ3N0ZW4gKGluY2FuZGVzY2VudCBsaWdodClcIixcbiAgICAgICAgICAgIDQgOiBcIkZsYXNoXCIsXG4gICAgICAgICAgICA5IDogXCJGaW5lIHdlYXRoZXJcIixcbiAgICAgICAgICAgIDEwIDogXCJDbG91ZHkgd2VhdGhlclwiLFxuICAgICAgICAgICAgMTEgOiBcIlNoYWRlXCIsXG4gICAgICAgICAgICAxMiA6IFwiRGF5bGlnaHQgZmx1b3Jlc2NlbnQgKEQgNTcwMCAtIDcxMDBLKVwiLFxuICAgICAgICAgICAgMTMgOiBcIkRheSB3aGl0ZSBmbHVvcmVzY2VudCAoTiA0NjAwIC0gNTQwMEspXCIsXG4gICAgICAgICAgICAxNCA6IFwiQ29vbCB3aGl0ZSBmbHVvcmVzY2VudCAoVyAzOTAwIC0gNDUwMEspXCIsXG4gICAgICAgICAgICAxNSA6IFwiV2hpdGUgZmx1b3Jlc2NlbnQgKFdXIDMyMDAgLSAzNzAwSylcIixcbiAgICAgICAgICAgIDE3IDogXCJTdGFuZGFyZCBsaWdodCBBXCIsXG4gICAgICAgICAgICAxOCA6IFwiU3RhbmRhcmQgbGlnaHQgQlwiLFxuICAgICAgICAgICAgMTkgOiBcIlN0YW5kYXJkIGxpZ2h0IENcIixcbiAgICAgICAgICAgIDIwIDogXCJENTVcIixcbiAgICAgICAgICAgIDIxIDogXCJENjVcIixcbiAgICAgICAgICAgIDIyIDogXCJENzVcIixcbiAgICAgICAgICAgIDIzIDogXCJENTBcIixcbiAgICAgICAgICAgIDI0IDogXCJJU08gc3R1ZGlvIHR1bmdzdGVuXCIsXG4gICAgICAgICAgICAyNTUgOiBcIk90aGVyXCJcbiAgICAgICAgfSxcbiAgICAgICAgRmxhc2ggOiB7XG4gICAgICAgICAgICAweDAwMDAgOiBcIkZsYXNoIGRpZCBub3QgZmlyZVwiLFxuICAgICAgICAgICAgMHgwMDAxIDogXCJGbGFzaCBmaXJlZFwiLFxuICAgICAgICAgICAgMHgwMDA1IDogXCJTdHJvYmUgcmV0dXJuIGxpZ2h0IG5vdCBkZXRlY3RlZFwiLFxuICAgICAgICAgICAgMHgwMDA3IDogXCJTdHJvYmUgcmV0dXJuIGxpZ2h0IGRldGVjdGVkXCIsXG4gICAgICAgICAgICAweDAwMDkgOiBcIkZsYXNoIGZpcmVkLCBjb21wdWxzb3J5IGZsYXNoIG1vZGVcIixcbiAgICAgICAgICAgIDB4MDAwRCA6IFwiRmxhc2ggZmlyZWQsIGNvbXB1bHNvcnkgZmxhc2ggbW9kZSwgcmV0dXJuIGxpZ2h0IG5vdCBkZXRlY3RlZFwiLFxuICAgICAgICAgICAgMHgwMDBGIDogXCJGbGFzaCBmaXJlZCwgY29tcHVsc29yeSBmbGFzaCBtb2RlLCByZXR1cm4gbGlnaHQgZGV0ZWN0ZWRcIixcbiAgICAgICAgICAgIDB4MDAxMCA6IFwiRmxhc2ggZGlkIG5vdCBmaXJlLCBjb21wdWxzb3J5IGZsYXNoIG1vZGVcIixcbiAgICAgICAgICAgIDB4MDAxOCA6IFwiRmxhc2ggZGlkIG5vdCBmaXJlLCBhdXRvIG1vZGVcIixcbiAgICAgICAgICAgIDB4MDAxOSA6IFwiRmxhc2ggZmlyZWQsIGF1dG8gbW9kZVwiLFxuICAgICAgICAgICAgMHgwMDFEIDogXCJGbGFzaCBmaXJlZCwgYXV0byBtb2RlLCByZXR1cm4gbGlnaHQgbm90IGRldGVjdGVkXCIsXG4gICAgICAgICAgICAweDAwMUYgOiBcIkZsYXNoIGZpcmVkLCBhdXRvIG1vZGUsIHJldHVybiBsaWdodCBkZXRlY3RlZFwiLFxuICAgICAgICAgICAgMHgwMDIwIDogXCJObyBmbGFzaCBmdW5jdGlvblwiLFxuICAgICAgICAgICAgMHgwMDQxIDogXCJGbGFzaCBmaXJlZCwgcmVkLWV5ZSByZWR1Y3Rpb24gbW9kZVwiLFxuICAgICAgICAgICAgMHgwMDQ1IDogXCJGbGFzaCBmaXJlZCwgcmVkLWV5ZSByZWR1Y3Rpb24gbW9kZSwgcmV0dXJuIGxpZ2h0IG5vdCBkZXRlY3RlZFwiLFxuICAgICAgICAgICAgMHgwMDQ3IDogXCJGbGFzaCBmaXJlZCwgcmVkLWV5ZSByZWR1Y3Rpb24gbW9kZSwgcmV0dXJuIGxpZ2h0IGRldGVjdGVkXCIsXG4gICAgICAgICAgICAweDAwNDkgOiBcIkZsYXNoIGZpcmVkLCBjb21wdWxzb3J5IGZsYXNoIG1vZGUsIHJlZC1leWUgcmVkdWN0aW9uIG1vZGVcIixcbiAgICAgICAgICAgIDB4MDA0RCA6IFwiRmxhc2ggZmlyZWQsIGNvbXB1bHNvcnkgZmxhc2ggbW9kZSwgcmVkLWV5ZSByZWR1Y3Rpb24gbW9kZSwgcmV0dXJuIGxpZ2h0IG5vdCBkZXRlY3RlZFwiLFxuICAgICAgICAgICAgMHgwMDRGIDogXCJGbGFzaCBmaXJlZCwgY29tcHVsc29yeSBmbGFzaCBtb2RlLCByZWQtZXllIHJlZHVjdGlvbiBtb2RlLCByZXR1cm4gbGlnaHQgZGV0ZWN0ZWRcIixcbiAgICAgICAgICAgIDB4MDA1OSA6IFwiRmxhc2ggZmlyZWQsIGF1dG8gbW9kZSwgcmVkLWV5ZSByZWR1Y3Rpb24gbW9kZVwiLFxuICAgICAgICAgICAgMHgwMDVEIDogXCJGbGFzaCBmaXJlZCwgYXV0byBtb2RlLCByZXR1cm4gbGlnaHQgbm90IGRldGVjdGVkLCByZWQtZXllIHJlZHVjdGlvbiBtb2RlXCIsXG4gICAgICAgICAgICAweDAwNUYgOiBcIkZsYXNoIGZpcmVkLCBhdXRvIG1vZGUsIHJldHVybiBsaWdodCBkZXRlY3RlZCwgcmVkLWV5ZSByZWR1Y3Rpb24gbW9kZVwiXG4gICAgICAgIH0sXG4gICAgICAgIFNlbnNpbmdNZXRob2QgOiB7XG4gICAgICAgICAgICAxIDogXCJOb3QgZGVmaW5lZFwiLFxuICAgICAgICAgICAgMiA6IFwiT25lLWNoaXAgY29sb3IgYXJlYSBzZW5zb3JcIixcbiAgICAgICAgICAgIDMgOiBcIlR3by1jaGlwIGNvbG9yIGFyZWEgc2Vuc29yXCIsXG4gICAgICAgICAgICA0IDogXCJUaHJlZS1jaGlwIGNvbG9yIGFyZWEgc2Vuc29yXCIsXG4gICAgICAgICAgICA1IDogXCJDb2xvciBzZXF1ZW50aWFsIGFyZWEgc2Vuc29yXCIsXG4gICAgICAgICAgICA3IDogXCJUcmlsaW5lYXIgc2Vuc29yXCIsXG4gICAgICAgICAgICA4IDogXCJDb2xvciBzZXF1ZW50aWFsIGxpbmVhciBzZW5zb3JcIlxuICAgICAgICB9LFxuICAgICAgICBTY2VuZUNhcHR1cmVUeXBlIDoge1xuICAgICAgICAgICAgMCA6IFwiU3RhbmRhcmRcIixcbiAgICAgICAgICAgIDEgOiBcIkxhbmRzY2FwZVwiLFxuICAgICAgICAgICAgMiA6IFwiUG9ydHJhaXRcIixcbiAgICAgICAgICAgIDMgOiBcIk5pZ2h0IHNjZW5lXCJcbiAgICAgICAgfSxcbiAgICAgICAgU2NlbmVUeXBlIDoge1xuICAgICAgICAgICAgMSA6IFwiRGlyZWN0bHkgcGhvdG9ncmFwaGVkXCJcbiAgICAgICAgfSxcbiAgICAgICAgQ3VzdG9tUmVuZGVyZWQgOiB7XG4gICAgICAgICAgICAwIDogXCJOb3JtYWwgcHJvY2Vzc1wiLFxuICAgICAgICAgICAgMSA6IFwiQ3VzdG9tIHByb2Nlc3NcIlxuICAgICAgICB9LFxuICAgICAgICBXaGl0ZUJhbGFuY2UgOiB7XG4gICAgICAgICAgICAwIDogXCJBdXRvIHdoaXRlIGJhbGFuY2VcIixcbiAgICAgICAgICAgIDEgOiBcIk1hbnVhbCB3aGl0ZSBiYWxhbmNlXCJcbiAgICAgICAgfSxcbiAgICAgICAgR2FpbkNvbnRyb2wgOiB7XG4gICAgICAgICAgICAwIDogXCJOb25lXCIsXG4gICAgICAgICAgICAxIDogXCJMb3cgZ2FpbiB1cFwiLFxuICAgICAgICAgICAgMiA6IFwiSGlnaCBnYWluIHVwXCIsXG4gICAgICAgICAgICAzIDogXCJMb3cgZ2FpbiBkb3duXCIsXG4gICAgICAgICAgICA0IDogXCJIaWdoIGdhaW4gZG93blwiXG4gICAgICAgIH0sXG4gICAgICAgIENvbnRyYXN0IDoge1xuICAgICAgICAgICAgMCA6IFwiTm9ybWFsXCIsXG4gICAgICAgICAgICAxIDogXCJTb2Z0XCIsXG4gICAgICAgICAgICAyIDogXCJIYXJkXCJcbiAgICAgICAgfSxcbiAgICAgICAgU2F0dXJhdGlvbiA6IHtcbiAgICAgICAgICAgIDAgOiBcIk5vcm1hbFwiLFxuICAgICAgICAgICAgMSA6IFwiTG93IHNhdHVyYXRpb25cIixcbiAgICAgICAgICAgIDIgOiBcIkhpZ2ggc2F0dXJhdGlvblwiXG4gICAgICAgIH0sXG4gICAgICAgIFNoYXJwbmVzcyA6IHtcbiAgICAgICAgICAgIDAgOiBcIk5vcm1hbFwiLFxuICAgICAgICAgICAgMSA6IFwiU29mdFwiLFxuICAgICAgICAgICAgMiA6IFwiSGFyZFwiXG4gICAgICAgIH0sXG4gICAgICAgIFN1YmplY3REaXN0YW5jZVJhbmdlIDoge1xuICAgICAgICAgICAgMCA6IFwiVW5rbm93blwiLFxuICAgICAgICAgICAgMSA6IFwiTWFjcm9cIixcbiAgICAgICAgICAgIDIgOiBcIkNsb3NlIHZpZXdcIixcbiAgICAgICAgICAgIDMgOiBcIkRpc3RhbnQgdmlld1wiXG4gICAgICAgIH0sXG4gICAgICAgIEZpbGVTb3VyY2UgOiB7XG4gICAgICAgICAgICAzIDogXCJEU0NcIlxuICAgICAgICB9LFxuXG4gICAgICAgIENvbXBvbmVudHMgOiB7XG4gICAgICAgICAgICAwIDogXCJcIixcbiAgICAgICAgICAgIDEgOiBcIllcIixcbiAgICAgICAgICAgIDIgOiBcIkNiXCIsXG4gICAgICAgICAgICAzIDogXCJDclwiLFxuICAgICAgICAgICAgNCA6IFwiUlwiLFxuICAgICAgICAgICAgNSA6IFwiR1wiLFxuICAgICAgICAgICAgNiA6IFwiQlwiXG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gYWRkRXZlbnQoZWxlbWVudCwgZXZlbnQsIGhhbmRsZXIpIHtcbiAgICAgICAgaWYgKGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVyLCBmYWxzZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoZWxlbWVudC5hdHRhY2hFdmVudCkge1xuICAgICAgICAgICAgZWxlbWVudC5hdHRhY2hFdmVudChcIm9uXCIgKyBldmVudCwgaGFuZGxlcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbWFnZUhhc0RhdGEoaW1nKSB7XG4gICAgICAgIHJldHVybiAhIShpbWcuZXhpZmRhdGEpO1xuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gYmFzZTY0VG9BcnJheUJ1ZmZlcihiYXNlNjQsIGNvbnRlbnRUeXBlKSB7XG4gICAgICAgIGNvbnRlbnRUeXBlID0gY29udGVudFR5cGUgfHwgYmFzZTY0Lm1hdGNoKC9eZGF0YVxcOihbXlxcO10rKVxcO2Jhc2U2NCwvbWkpWzFdIHx8ICcnOyAvLyBlLmcuICdkYXRhOmltYWdlL2pwZWc7YmFzZTY0LC4uLicgPT4gJ2ltYWdlL2pwZWcnXG4gICAgICAgIGJhc2U2NCA9IGJhc2U2NC5yZXBsYWNlKC9eZGF0YVxcOihbXlxcO10rKVxcO2Jhc2U2NCwvZ21pLCAnJyk7XG4gICAgICAgIHZhciBiaW5hcnkgPSBhdG9iKGJhc2U2NCk7XG4gICAgICAgIHZhciBsZW4gPSBiaW5hcnkubGVuZ3RoO1xuICAgICAgICB2YXIgYnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKGxlbik7XG4gICAgICAgIHZhciB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgdmlld1tpXSA9IGJpbmFyeS5jaGFyQ29kZUF0KGkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBidWZmZXI7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb2JqZWN0VVJMVG9CbG9iKHVybCwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIGh0dHAgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgICAgaHR0cC5vcGVuKFwiR0VUXCIsIHVybCwgdHJ1ZSk7XG4gICAgICAgIGh0dHAucmVzcG9uc2VUeXBlID0gXCJibG9iXCI7XG4gICAgICAgIGh0dHAub25sb2FkID0gZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuc3RhdHVzID09IDIwMCB8fCB0aGlzLnN0YXR1cyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKHRoaXMucmVzcG9uc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBodHRwLnNlbmQoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRJbWFnZURhdGEoaW1nLCBjYWxsYmFjaykge1xuICAgICAgICBmdW5jdGlvbiBoYW5kbGVCaW5hcnlGaWxlKGJpbkZpbGUpIHtcbiAgICAgICAgICAgIHZhciBkYXRhID0gZmluZEVYSUZpbkpQRUcoYmluRmlsZSk7XG4gICAgICAgICAgICBpbWcuZXhpZmRhdGEgPSBkYXRhIHx8IHt9O1xuICAgICAgICAgICAgdmFyIGlwdGNkYXRhID0gZmluZElQVENpbkpQRUcoYmluRmlsZSk7XG4gICAgICAgICAgICBpbWcuaXB0Y2RhdGEgPSBpcHRjZGF0YSB8fCB7fTtcbiAgICAgICAgICAgIGlmIChFWElGLmlzWG1wRW5hYmxlZCkge1xuICAgICAgICAgICAgICAgdmFyIHhtcGRhdGE9IGZpbmRYTVBpbkpQRUcoYmluRmlsZSk7XG4gICAgICAgICAgICAgICBpbWcueG1wZGF0YSA9IHhtcGRhdGEgfHwge307ICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjay5jYWxsKGltZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW1nLnNyYykge1xuICAgICAgICAgICAgaWYgKC9eZGF0YVxcOi9pLnRlc3QoaW1nLnNyYykpIHsgLy8gRGF0YSBVUklcbiAgICAgICAgICAgICAgICB2YXIgYXJyYXlCdWZmZXIgPSBiYXNlNjRUb0FycmF5QnVmZmVyKGltZy5zcmMpO1xuICAgICAgICAgICAgICAgIGhhbmRsZUJpbmFyeUZpbGUoYXJyYXlCdWZmZXIpO1xuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKC9eYmxvYlxcOi9pLnRlc3QoaW1nLnNyYykpIHsgLy8gT2JqZWN0IFVSTFxuICAgICAgICAgICAgICAgIHZhciBmaWxlUmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICAgICAgICAgICAgICBmaWxlUmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlQmluYXJ5RmlsZShlLnRhcmdldC5yZXN1bHQpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgb2JqZWN0VVJMVG9CbG9iKGltZy5zcmMsIGZ1bmN0aW9uIChibG9iKSB7XG4gICAgICAgICAgICAgICAgICAgIGZpbGVSZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoYmxvYik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBodHRwID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgICAgICAgICAgaHR0cC5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RhdHVzID09IDIwMCB8fCB0aGlzLnN0YXR1cyA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlQmluYXJ5RmlsZShodHRwLnJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IFwiQ291bGQgbm90IGxvYWQgaW1hZ2VcIjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBodHRwID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGh0dHAub3BlbihcIkdFVFwiLCBpbWcuc3JjLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBodHRwLnJlc3BvbnNlVHlwZSA9IFwiYXJyYXlidWZmZXJcIjtcbiAgICAgICAgICAgICAgICBodHRwLnNlbmQobnVsbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoc2VsZi5GaWxlUmVhZGVyICYmIChpbWcgaW5zdGFuY2VvZiBzZWxmLkJsb2IgfHwgaW1nIGluc3RhbmNlb2Ygc2VsZi5GaWxlKSkge1xuICAgICAgICAgICAgdmFyIGZpbGVSZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgICAgICAgICAgZmlsZVJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRlYnVnKSBjb25zb2xlLmxvZyhcIkdvdCBmaWxlIG9mIGxlbmd0aCBcIiArIGUudGFyZ2V0LnJlc3VsdC5ieXRlTGVuZ3RoKTtcbiAgICAgICAgICAgICAgICBoYW5kbGVCaW5hcnlGaWxlKGUudGFyZ2V0LnJlc3VsdCk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBmaWxlUmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGltZyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmaW5kRVhJRmluSlBFRyhmaWxlKSB7XG4gICAgICAgIHZhciBkYXRhVmlldyA9IG5ldyBEYXRhVmlldyhmaWxlKTtcblxuICAgICAgICBpZiAoZGVidWcpIGNvbnNvbGUubG9nKFwiR290IGZpbGUgb2YgbGVuZ3RoIFwiICsgZmlsZS5ieXRlTGVuZ3RoKTtcbiAgICAgICAgaWYgKChkYXRhVmlldy5nZXRVaW50OCgwKSAhPSAweEZGKSB8fCAoZGF0YVZpZXcuZ2V0VWludDgoMSkgIT0gMHhEOCkpIHtcbiAgICAgICAgICAgIGlmIChkZWJ1ZykgY29uc29sZS5sb2coXCJOb3QgYSB2YWxpZCBKUEVHXCIpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBub3QgYSB2YWxpZCBqcGVnXG4gICAgICAgIH1cblxuICAgICAgICB2YXIgb2Zmc2V0ID0gMixcbiAgICAgICAgICAgIGxlbmd0aCA9IGZpbGUuYnl0ZUxlbmd0aCxcbiAgICAgICAgICAgIG1hcmtlcjtcblxuICAgICAgICB3aGlsZSAob2Zmc2V0IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoZGF0YVZpZXcuZ2V0VWludDgob2Zmc2V0KSAhPSAweEZGKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRlYnVnKSBjb25zb2xlLmxvZyhcIk5vdCBhIHZhbGlkIG1hcmtlciBhdCBvZmZzZXQgXCIgKyBvZmZzZXQgKyBcIiwgZm91bmQ6IFwiICsgZGF0YVZpZXcuZ2V0VWludDgob2Zmc2V0KSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBub3QgYSB2YWxpZCBtYXJrZXIsIHNvbWV0aGluZyBpcyB3cm9uZ1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBtYXJrZXIgPSBkYXRhVmlldy5nZXRVaW50OChvZmZzZXQgKyAxKTtcbiAgICAgICAgICAgIGlmIChkZWJ1ZykgY29uc29sZS5sb2cobWFya2VyKTtcblxuICAgICAgICAgICAgLy8gd2UgY291bGQgaW1wbGVtZW50IGhhbmRsaW5nIGZvciBvdGhlciBtYXJrZXJzIGhlcmUsXG4gICAgICAgICAgICAvLyBidXQgd2UncmUgb25seSBsb29raW5nIGZvciAweEZGRTEgZm9yIEVYSUYgZGF0YVxuXG4gICAgICAgICAgICBpZiAobWFya2VyID09IDIyNSkge1xuICAgICAgICAgICAgICAgIGlmIChkZWJ1ZykgY29uc29sZS5sb2coXCJGb3VuZCAweEZGRTEgbWFya2VyXCIpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlYWRFWElGRGF0YShkYXRhVmlldywgb2Zmc2V0ICsgNCwgZGF0YVZpZXcuZ2V0VWludDE2KG9mZnNldCArIDIpIC0gMik7XG5cbiAgICAgICAgICAgICAgICAvLyBvZmZzZXQgKz0gMiArIGZpbGUuZ2V0U2hvcnRBdChvZmZzZXQrMiwgdHJ1ZSk7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgb2Zmc2V0ICs9IDIgKyBkYXRhVmlldy5nZXRVaW50MTYob2Zmc2V0KzIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZpbmRJUFRDaW5KUEVHKGZpbGUpIHtcbiAgICAgICAgdmFyIGRhdGFWaWV3ID0gbmV3IERhdGFWaWV3KGZpbGUpO1xuXG4gICAgICAgIGlmIChkZWJ1ZykgY29uc29sZS5sb2coXCJHb3QgZmlsZSBvZiBsZW5ndGggXCIgKyBmaWxlLmJ5dGVMZW5ndGgpO1xuICAgICAgICBpZiAoKGRhdGFWaWV3LmdldFVpbnQ4KDApICE9IDB4RkYpIHx8IChkYXRhVmlldy5nZXRVaW50OCgxKSAhPSAweEQ4KSkge1xuICAgICAgICAgICAgaWYgKGRlYnVnKSBjb25zb2xlLmxvZyhcIk5vdCBhIHZhbGlkIEpQRUdcIik7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7IC8vIG5vdCBhIHZhbGlkIGpwZWdcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBvZmZzZXQgPSAyLFxuICAgICAgICAgICAgbGVuZ3RoID0gZmlsZS5ieXRlTGVuZ3RoO1xuXG5cbiAgICAgICAgdmFyIGlzRmllbGRTZWdtZW50U3RhcnQgPSBmdW5jdGlvbihkYXRhVmlldywgb2Zmc2V0KXtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgZGF0YVZpZXcuZ2V0VWludDgob2Zmc2V0KSA9PT0gMHgzOCAmJlxuICAgICAgICAgICAgICAgIGRhdGFWaWV3LmdldFVpbnQ4KG9mZnNldCsxKSA9PT0gMHg0MiAmJlxuICAgICAgICAgICAgICAgIGRhdGFWaWV3LmdldFVpbnQ4KG9mZnNldCsyKSA9PT0gMHg0OSAmJlxuICAgICAgICAgICAgICAgIGRhdGFWaWV3LmdldFVpbnQ4KG9mZnNldCszKSA9PT0gMHg0RCAmJlxuICAgICAgICAgICAgICAgIGRhdGFWaWV3LmdldFVpbnQ4KG9mZnNldCs0KSA9PT0gMHgwNCAmJlxuICAgICAgICAgICAgICAgIGRhdGFWaWV3LmdldFVpbnQ4KG9mZnNldCs1KSA9PT0gMHgwNFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfTtcblxuICAgICAgICB3aGlsZSAob2Zmc2V0IDwgbGVuZ3RoKSB7XG5cbiAgICAgICAgICAgIGlmICggaXNGaWVsZFNlZ21lbnRTdGFydChkYXRhVmlldywgb2Zmc2V0ICkpe1xuXG4gICAgICAgICAgICAgICAgLy8gR2V0IHRoZSBsZW5ndGggb2YgdGhlIG5hbWUgaGVhZGVyICh3aGljaCBpcyBwYWRkZWQgdG8gYW4gZXZlbiBudW1iZXIgb2YgYnl0ZXMpXG4gICAgICAgICAgICAgICAgdmFyIG5hbWVIZWFkZXJMZW5ndGggPSBkYXRhVmlldy5nZXRVaW50OChvZmZzZXQrNyk7XG4gICAgICAgICAgICAgICAgaWYobmFtZUhlYWRlckxlbmd0aCAlIDIgIT09IDApIG5hbWVIZWFkZXJMZW5ndGggKz0gMTtcbiAgICAgICAgICAgICAgICAvLyBDaGVjayBmb3IgcHJlIHBob3Rvc2hvcCA2IGZvcm1hdFxuICAgICAgICAgICAgICAgIGlmKG5hbWVIZWFkZXJMZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQWx3YXlzIDRcbiAgICAgICAgICAgICAgICAgICAgbmFtZUhlYWRlckxlbmd0aCA9IDQ7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIHN0YXJ0T2Zmc2V0ID0gb2Zmc2V0ICsgOCArIG5hbWVIZWFkZXJMZW5ndGg7XG4gICAgICAgICAgICAgICAgdmFyIHNlY3Rpb25MZW5ndGggPSBkYXRhVmlldy5nZXRVaW50MTYob2Zmc2V0ICsgNiArIG5hbWVIZWFkZXJMZW5ndGgpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlYWRJUFRDRGF0YShmaWxlLCBzdGFydE9mZnNldCwgc2VjdGlvbkxlbmd0aCk7XG5cbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgIC8vIE5vdCB0aGUgbWFya2VyLCBjb250aW51ZSBzZWFyY2hpbmdcbiAgICAgICAgICAgIG9mZnNldCsrO1xuXG4gICAgICAgIH1cblxuICAgIH1cbiAgICB2YXIgSXB0Y0ZpZWxkTWFwID0ge1xuICAgICAgICAweDc4IDogJ2NhcHRpb24nLFxuICAgICAgICAweDZFIDogJ2NyZWRpdCcsXG4gICAgICAgIDB4MTkgOiAna2V5d29yZHMnLFxuICAgICAgICAweDM3IDogJ2RhdGVDcmVhdGVkJyxcbiAgICAgICAgMHg1MCA6ICdieWxpbmUnLFxuICAgICAgICAweDU1IDogJ2J5bGluZVRpdGxlJyxcbiAgICAgICAgMHg3QSA6ICdjYXB0aW9uV3JpdGVyJyxcbiAgICAgICAgMHg2OSA6ICdoZWFkbGluZScsXG4gICAgICAgIDB4NzQgOiAnY29weXJpZ2h0JyxcbiAgICAgICAgMHgwRiA6ICdjYXRlZ29yeSdcbiAgICB9O1xuICAgIGZ1bmN0aW9uIHJlYWRJUFRDRGF0YShmaWxlLCBzdGFydE9mZnNldCwgc2VjdGlvbkxlbmd0aCl7XG4gICAgICAgIHZhciBkYXRhVmlldyA9IG5ldyBEYXRhVmlldyhmaWxlKTtcbiAgICAgICAgdmFyIGRhdGEgPSB7fTtcbiAgICAgICAgdmFyIGZpZWxkVmFsdWUsIGZpZWxkTmFtZSwgZGF0YVNpemUsIHNlZ21lbnRUeXBlLCBzZWdtZW50U2l6ZTtcbiAgICAgICAgdmFyIHNlZ21lbnRTdGFydFBvcyA9IHN0YXJ0T2Zmc2V0O1xuICAgICAgICB3aGlsZShzZWdtZW50U3RhcnRQb3MgPCBzdGFydE9mZnNldCtzZWN0aW9uTGVuZ3RoKSB7XG4gICAgICAgICAgICBpZihkYXRhVmlldy5nZXRVaW50OChzZWdtZW50U3RhcnRQb3MpID09PSAweDFDICYmIGRhdGFWaWV3LmdldFVpbnQ4KHNlZ21lbnRTdGFydFBvcysxKSA9PT0gMHgwMil7XG4gICAgICAgICAgICAgICAgc2VnbWVudFR5cGUgPSBkYXRhVmlldy5nZXRVaW50OChzZWdtZW50U3RhcnRQb3MrMik7XG4gICAgICAgICAgICAgICAgaWYoc2VnbWVudFR5cGUgaW4gSXB0Y0ZpZWxkTWFwKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGFTaXplID0gZGF0YVZpZXcuZ2V0SW50MTYoc2VnbWVudFN0YXJ0UG9zKzMpO1xuICAgICAgICAgICAgICAgICAgICBzZWdtZW50U2l6ZSA9IGRhdGFTaXplICsgNTtcbiAgICAgICAgICAgICAgICAgICAgZmllbGROYW1lID0gSXB0Y0ZpZWxkTWFwW3NlZ21lbnRUeXBlXTtcbiAgICAgICAgICAgICAgICAgICAgZmllbGRWYWx1ZSA9IGdldFN0cmluZ0Zyb21EQihkYXRhVmlldywgc2VnbWVudFN0YXJ0UG9zKzUsIGRhdGFTaXplKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgd2UgYWxyZWFkeSBzdG9yZWQgYSB2YWx1ZSB3aXRoIHRoaXMgbmFtZVxuICAgICAgICAgICAgICAgICAgICBpZihkYXRhLmhhc093blByb3BlcnR5KGZpZWxkTmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFZhbHVlIGFscmVhZHkgc3RvcmVkIHdpdGggdGhpcyBuYW1lLCBjcmVhdGUgbXVsdGl2YWx1ZSBmaWVsZFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoZGF0YVtmaWVsZE5hbWVdIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhW2ZpZWxkTmFtZV0ucHVzaChmaWVsZFZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFbZmllbGROYW1lXSA9IFtkYXRhW2ZpZWxkTmFtZV0sIGZpZWxkVmFsdWVdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVtmaWVsZE5hbWVdID0gZmllbGRWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VnbWVudFN0YXJ0UG9zKys7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG5cblxuICAgIGZ1bmN0aW9uIHJlYWRUYWdzKGZpbGUsIHRpZmZTdGFydCwgZGlyU3RhcnQsIHN0cmluZ3MsIGJpZ0VuZCkge1xuICAgICAgICB2YXIgZW50cmllcyA9IGZpbGUuZ2V0VWludDE2KGRpclN0YXJ0LCAhYmlnRW5kKSxcbiAgICAgICAgICAgIHRhZ3MgPSB7fSxcbiAgICAgICAgICAgIGVudHJ5T2Zmc2V0LCB0YWcsXG4gICAgICAgICAgICBpO1xuXG4gICAgICAgIGZvciAoaT0wO2k8ZW50cmllcztpKyspIHtcbiAgICAgICAgICAgIGVudHJ5T2Zmc2V0ID0gZGlyU3RhcnQgKyBpKjEyICsgMjtcbiAgICAgICAgICAgIHRhZyA9IHN0cmluZ3NbZmlsZS5nZXRVaW50MTYoZW50cnlPZmZzZXQsICFiaWdFbmQpXTtcbiAgICAgICAgICAgIGlmICghdGFnICYmIGRlYnVnKSBjb25zb2xlLmxvZyhcIlVua25vd24gdGFnOiBcIiArIGZpbGUuZ2V0VWludDE2KGVudHJ5T2Zmc2V0LCAhYmlnRW5kKSk7XG4gICAgICAgICAgICB0YWdzW3RhZ10gPSByZWFkVGFnVmFsdWUoZmlsZSwgZW50cnlPZmZzZXQsIHRpZmZTdGFydCwgZGlyU3RhcnQsIGJpZ0VuZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRhZ3M7XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiByZWFkVGFnVmFsdWUoZmlsZSwgZW50cnlPZmZzZXQsIHRpZmZTdGFydCwgZGlyU3RhcnQsIGJpZ0VuZCkge1xuICAgICAgICB2YXIgdHlwZSA9IGZpbGUuZ2V0VWludDE2KGVudHJ5T2Zmc2V0KzIsICFiaWdFbmQpLFxuICAgICAgICAgICAgbnVtVmFsdWVzID0gZmlsZS5nZXRVaW50MzIoZW50cnlPZmZzZXQrNCwgIWJpZ0VuZCksXG4gICAgICAgICAgICB2YWx1ZU9mZnNldCA9IGZpbGUuZ2V0VWludDMyKGVudHJ5T2Zmc2V0KzgsICFiaWdFbmQpICsgdGlmZlN0YXJ0LFxuICAgICAgICAgICAgb2Zmc2V0LFxuICAgICAgICAgICAgdmFscywgdmFsLCBuLFxuICAgICAgICAgICAgbnVtZXJhdG9yLCBkZW5vbWluYXRvcjtcblxuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgMTogLy8gYnl0ZSwgOC1iaXQgdW5zaWduZWQgaW50XG4gICAgICAgICAgICBjYXNlIDc6IC8vIHVuZGVmaW5lZCwgOC1iaXQgYnl0ZSwgdmFsdWUgZGVwZW5kaW5nIG9uIGZpZWxkXG4gICAgICAgICAgICAgICAgaWYgKG51bVZhbHVlcyA9PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmaWxlLmdldFVpbnQ4KGVudHJ5T2Zmc2V0ICsgOCwgIWJpZ0VuZCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ID0gbnVtVmFsdWVzID4gNCA/IHZhbHVlT2Zmc2V0IDogKGVudHJ5T2Zmc2V0ICsgOCk7XG4gICAgICAgICAgICAgICAgICAgIHZhbHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChuPTA7bjxudW1WYWx1ZXM7bisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxzW25dID0gZmlsZS5nZXRVaW50OChvZmZzZXQgKyBuKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFscztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNhc2UgMjogLy8gYXNjaWksIDgtYml0IGJ5dGVcbiAgICAgICAgICAgICAgICBvZmZzZXQgPSBudW1WYWx1ZXMgPiA0ID8gdmFsdWVPZmZzZXQgOiAoZW50cnlPZmZzZXQgKyA4KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0U3RyaW5nRnJvbURCKGZpbGUsIG9mZnNldCwgbnVtVmFsdWVzLTEpO1xuXG4gICAgICAgICAgICBjYXNlIDM6IC8vIHNob3J0LCAxNiBiaXQgaW50XG4gICAgICAgICAgICAgICAgaWYgKG51bVZhbHVlcyA9PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmaWxlLmdldFVpbnQxNihlbnRyeU9mZnNldCArIDgsICFiaWdFbmQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IG51bVZhbHVlcyA+IDIgPyB2YWx1ZU9mZnNldCA6IChlbnRyeU9mZnNldCArIDgpO1xuICAgICAgICAgICAgICAgICAgICB2YWxzID0gW107XG4gICAgICAgICAgICAgICAgICAgIGZvciAobj0wO248bnVtVmFsdWVzO24rKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsc1tuXSA9IGZpbGUuZ2V0VWludDE2KG9mZnNldCArIDIqbiwgIWJpZ0VuZCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHM7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjYXNlIDQ6IC8vIGxvbmcsIDMyIGJpdCBpbnRcbiAgICAgICAgICAgICAgICBpZiAobnVtVmFsdWVzID09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZpbGUuZ2V0VWludDMyKGVudHJ5T2Zmc2V0ICsgOCwgIWJpZ0VuZCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFscyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKG49MDtuPG51bVZhbHVlcztuKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHNbbl0gPSBmaWxlLmdldFVpbnQzMih2YWx1ZU9mZnNldCArIDQqbiwgIWJpZ0VuZCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHM7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjYXNlIDU6ICAgIC8vIHJhdGlvbmFsID0gdHdvIGxvbmcgdmFsdWVzLCBmaXJzdCBpcyBudW1lcmF0b3IsIHNlY29uZCBpcyBkZW5vbWluYXRvclxuICAgICAgICAgICAgICAgIGlmIChudW1WYWx1ZXMgPT0gMSkge1xuICAgICAgICAgICAgICAgICAgICBudW1lcmF0b3IgPSBmaWxlLmdldFVpbnQzMih2YWx1ZU9mZnNldCwgIWJpZ0VuZCk7XG4gICAgICAgICAgICAgICAgICAgIGRlbm9taW5hdG9yID0gZmlsZS5nZXRVaW50MzIodmFsdWVPZmZzZXQrNCwgIWJpZ0VuZCk7XG4gICAgICAgICAgICAgICAgICAgIHZhbCA9IG5ldyBOdW1iZXIobnVtZXJhdG9yIC8gZGVub21pbmF0b3IpO1xuICAgICAgICAgICAgICAgICAgICB2YWwubnVtZXJhdG9yID0gbnVtZXJhdG9yO1xuICAgICAgICAgICAgICAgICAgICB2YWwuZGVub21pbmF0b3IgPSBkZW5vbWluYXRvcjtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YWxzID0gW107XG4gICAgICAgICAgICAgICAgICAgIGZvciAobj0wO248bnVtVmFsdWVzO24rKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbnVtZXJhdG9yID0gZmlsZS5nZXRVaW50MzIodmFsdWVPZmZzZXQgKyA4Km4sICFiaWdFbmQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVub21pbmF0b3IgPSBmaWxlLmdldFVpbnQzMih2YWx1ZU9mZnNldCs0ICsgOCpuLCAhYmlnRW5kKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHNbbl0gPSBuZXcgTnVtYmVyKG51bWVyYXRvciAvIGRlbm9taW5hdG9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHNbbl0ubnVtZXJhdG9yID0gbnVtZXJhdG9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsc1tuXS5kZW5vbWluYXRvciA9IGRlbm9taW5hdG9yO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWxzO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY2FzZSA5OiAvLyBzbG9uZywgMzIgYml0IHNpZ25lZCBpbnRcbiAgICAgICAgICAgICAgICBpZiAobnVtVmFsdWVzID09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZpbGUuZ2V0SW50MzIoZW50cnlPZmZzZXQgKyA4LCAhYmlnRW5kKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YWxzID0gW107XG4gICAgICAgICAgICAgICAgICAgIGZvciAobj0wO248bnVtVmFsdWVzO24rKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsc1tuXSA9IGZpbGUuZ2V0SW50MzIodmFsdWVPZmZzZXQgKyA0Km4sICFiaWdFbmQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWxzO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY2FzZSAxMDogLy8gc2lnbmVkIHJhdGlvbmFsLCB0d28gc2xvbmdzLCBmaXJzdCBpcyBudW1lcmF0b3IsIHNlY29uZCBpcyBkZW5vbWluYXRvclxuICAgICAgICAgICAgICAgIGlmIChudW1WYWx1ZXMgPT0gMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmlsZS5nZXRJbnQzMih2YWx1ZU9mZnNldCwgIWJpZ0VuZCkgLyBmaWxlLmdldEludDMyKHZhbHVlT2Zmc2V0KzQsICFiaWdFbmQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChuPTA7bjxudW1WYWx1ZXM7bisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxzW25dID0gZmlsZS5nZXRJbnQzMih2YWx1ZU9mZnNldCArIDgqbiwgIWJpZ0VuZCkgLyBmaWxlLmdldEludDMyKHZhbHVlT2Zmc2V0KzQgKyA4Km4sICFiaWdFbmQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWxzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICogR2l2ZW4gYW4gSUZEIChJbWFnZSBGaWxlIERpcmVjdG9yeSkgc3RhcnQgb2Zmc2V0XG4gICAgKiByZXR1cm5zIGFuIG9mZnNldCB0byBuZXh0IElGRCBvciAwIGlmIGl0J3MgdGhlIGxhc3QgSUZELlxuICAgICovXG4gICAgZnVuY3Rpb24gZ2V0TmV4dElGRE9mZnNldChkYXRhVmlldywgZGlyU3RhcnQsIGJpZ0VuZCl7XG4gICAgICAgIC8vdGhlIGZpcnN0IDJieXRlcyBtZWFucyB0aGUgbnVtYmVyIG9mIGRpcmVjdG9yeSBlbnRyaWVzIGNvbnRhaW5zIGluIHRoaXMgSUZEXG4gICAgICAgIHZhciBlbnRyaWVzID0gZGF0YVZpZXcuZ2V0VWludDE2KGRpclN0YXJ0LCAhYmlnRW5kKTtcblxuICAgICAgICAvLyBBZnRlciBsYXN0IGRpcmVjdG9yeSBlbnRyeSwgdGhlcmUgaXMgYSA0Ynl0ZXMgb2YgZGF0YSxcbiAgICAgICAgLy8gaXQgbWVhbnMgYW4gb2Zmc2V0IHRvIG5leHQgSUZELlxuICAgICAgICAvLyBJZiBpdHMgdmFsdWUgaXMgJzB4MDAwMDAwMDAnLCBpdCBtZWFucyB0aGlzIGlzIHRoZSBsYXN0IElGRCBhbmQgdGhlcmUgaXMgbm8gbGlua2VkIElGRC5cblxuICAgICAgICByZXR1cm4gZGF0YVZpZXcuZ2V0VWludDMyKGRpclN0YXJ0ICsgMiArIGVudHJpZXMgKiAxMiwgIWJpZ0VuZCk7IC8vIGVhY2ggZW50cnkgaXMgMTIgYnl0ZXMgbG9uZ1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlYWRUaHVtYm5haWxJbWFnZShkYXRhVmlldywgdGlmZlN0YXJ0LCBmaXJzdElGRE9mZnNldCwgYmlnRW5kKXtcbiAgICAgICAgLy8gZ2V0IHRoZSBJRkQxIG9mZnNldFxuICAgICAgICB2YXIgSUZEMU9mZnNldFBvaW50ZXIgPSBnZXROZXh0SUZET2Zmc2V0KGRhdGFWaWV3LCB0aWZmU3RhcnQrZmlyc3RJRkRPZmZzZXQsIGJpZ0VuZCk7XG5cbiAgICAgICAgaWYgKCFJRkQxT2Zmc2V0UG9pbnRlcikge1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJyoqKioqKioqIElGRDFPZmZzZXQgaXMgZW1wdHksIGltYWdlIHRodW1iIG5vdCBmb3VuZCAqKioqKioqKicpO1xuICAgICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKElGRDFPZmZzZXRQb2ludGVyID4gZGF0YVZpZXcuYnl0ZUxlbmd0aCkgeyAvLyB0aGlzIHNob3VsZCBub3QgaGFwcGVuXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnKioqKioqKiogSUZEMU9mZnNldCBpcyBvdXRzaWRlIHRoZSBib3VuZHMgb2YgdGhlIERhdGFWaWV3ICoqKioqKioqJyk7XG4gICAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgIH1cbiAgICAgICAgLy8gY29uc29sZS5sb2coJyoqKioqKiogIHRodW1ibmFpbCBJRkQgb2Zmc2V0IChJRkQxKSBpczogJXMnLCBJRkQxT2Zmc2V0UG9pbnRlcik7XG5cbiAgICAgICAgdmFyIHRodW1iVGFncyA9IHJlYWRUYWdzKGRhdGFWaWV3LCB0aWZmU3RhcnQsIHRpZmZTdGFydCArIElGRDFPZmZzZXRQb2ludGVyLCBJRkQxVGFncywgYmlnRW5kKVxuXG4gICAgICAgIC8vIEVYSUYgMi4zIHNwZWNpZmljYXRpb24gZm9yIEpQRUcgZm9ybWF0IHRodW1ibmFpbFxuXG4gICAgICAgIC8vIElmIHRoZSB2YWx1ZSBvZiBDb21wcmVzc2lvbigweDAxMDMpIFRhZyBpbiBJRkQxIGlzICc2JywgdGh1bWJuYWlsIGltYWdlIGZvcm1hdCBpcyBKUEVHLlxuICAgICAgICAvLyBNb3N0IG9mIEV4aWYgaW1hZ2UgdXNlcyBKUEVHIGZvcm1hdCBmb3IgdGh1bWJuYWlsLiBJbiB0aGF0IGNhc2UsIHlvdSBjYW4gZ2V0IG9mZnNldCBvZiB0aHVtYm5haWxcbiAgICAgICAgLy8gYnkgSnBlZ0lGT2Zmc2V0KDB4MDIwMSkgVGFnIGluIElGRDEsIHNpemUgb2YgdGh1bWJuYWlsIGJ5IEpwZWdJRkJ5dGVDb3VudCgweDAyMDIpIFRhZy5cbiAgICAgICAgLy8gRGF0YSBmb3JtYXQgaXMgb3JkaW5hcnkgSlBFRyBmb3JtYXQsIHN0YXJ0cyBmcm9tIDB4RkZEOCBhbmQgZW5kcyBieSAweEZGRDkuIEl0IHNlZW1zIHRoYXRcbiAgICAgICAgLy8gSlBFRyBmb3JtYXQgYW5kIDE2MHgxMjBwaXhlbHMgb2Ygc2l6ZSBhcmUgcmVjb21tZW5kZWQgdGh1bWJuYWlsIGZvcm1hdCBmb3IgRXhpZjIuMSBvciBsYXRlci5cblxuICAgICAgICBpZiAodGh1bWJUYWdzWydDb21wcmVzc2lvbiddKSB7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnVGh1bWJuYWlsIGltYWdlIGZvdW5kIScpO1xuXG4gICAgICAgICAgICBzd2l0Y2ggKHRodW1iVGFnc1snQ29tcHJlc3Npb24nXSkge1xuICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ1RodW1ibmFpbCBpbWFnZSBmb3JtYXQgaXMgSlBFRycpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGh1bWJUYWdzLkpwZWdJRk9mZnNldCAmJiB0aHVtYlRhZ3MuSnBlZ0lGQnl0ZUNvdW50KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGV4dHJhY3QgdGhlIHRodW1ibmFpbFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRPZmZzZXQgPSB0aWZmU3RhcnQgKyB0aHVtYlRhZ3MuSnBlZ0lGT2Zmc2V0O1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRMZW5ndGggPSB0aHVtYlRhZ3MuSnBlZ0lGQnl0ZUNvdW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgdGh1bWJUYWdzWydibG9iJ10gPSBuZXcgQmxvYihbbmV3IFVpbnQ4QXJyYXkoZGF0YVZpZXcuYnVmZmVyLCB0T2Zmc2V0LCB0TGVuZ3RoKV0sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnaW1hZ2UvanBlZydcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlRodW1ibmFpbCBpbWFnZSBmb3JtYXQgaXMgVElGRiwgd2hpY2ggaXMgbm90IGltcGxlbWVudGVkLlwiKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJVbmtub3duIHRodW1ibmFpbCBpbWFnZSBmb3JtYXQgJyVzJ1wiLCB0aHVtYlRhZ3NbJ0NvbXByZXNzaW9uJ10pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRodW1iVGFnc1snUGhvdG9tZXRyaWNJbnRlcnByZXRhdGlvbiddID09IDIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiVGh1bWJuYWlsIGltYWdlIGZvcm1hdCBpcyBSR0IsIHdoaWNoIGlzIG5vdCBpbXBsZW1lbnRlZC5cIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRodW1iVGFncztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTdHJpbmdGcm9tREIoYnVmZmVyLCBzdGFydCwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBvdXRzdHIgPSBcIlwiO1xuICAgICAgICBmb3IgKG4gPSBzdGFydDsgbiA8IHN0YXJ0K2xlbmd0aDsgbisrKSB7XG4gICAgICAgICAgICBvdXRzdHIgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZmZXIuZ2V0VWludDgobikpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXRzdHI7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVhZEVYSUZEYXRhKGZpbGUsIHN0YXJ0KSB7XG4gICAgICAgIGlmIChnZXRTdHJpbmdGcm9tREIoZmlsZSwgc3RhcnQsIDQpICE9IFwiRXhpZlwiKSB7XG4gICAgICAgICAgICBpZiAoZGVidWcpIGNvbnNvbGUubG9nKFwiTm90IHZhbGlkIEVYSUYgZGF0YSEgXCIgKyBnZXRTdHJpbmdGcm9tREIoZmlsZSwgc3RhcnQsIDQpKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBiaWdFbmQsXG4gICAgICAgICAgICB0YWdzLCB0YWcsXG4gICAgICAgICAgICBleGlmRGF0YSwgZ3BzRGF0YSxcbiAgICAgICAgICAgIHRpZmZPZmZzZXQgPSBzdGFydCArIDY7XG5cbiAgICAgICAgLy8gdGVzdCBmb3IgVElGRiB2YWxpZGl0eSBhbmQgZW5kaWFubmVzc1xuICAgICAgICBpZiAoZmlsZS5nZXRVaW50MTYodGlmZk9mZnNldCkgPT0gMHg0OTQ5KSB7XG4gICAgICAgICAgICBiaWdFbmQgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIGlmIChmaWxlLmdldFVpbnQxNih0aWZmT2Zmc2V0KSA9PSAweDRENEQpIHtcbiAgICAgICAgICAgIGJpZ0VuZCA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoZGVidWcpIGNvbnNvbGUubG9nKFwiTm90IHZhbGlkIFRJRkYgZGF0YSEgKG5vIDB4NDk0OSBvciAweDRENEQpXCIpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGZpbGUuZ2V0VWludDE2KHRpZmZPZmZzZXQrMiwgIWJpZ0VuZCkgIT0gMHgwMDJBKSB7XG4gICAgICAgICAgICBpZiAoZGVidWcpIGNvbnNvbGUubG9nKFwiTm90IHZhbGlkIFRJRkYgZGF0YSEgKG5vIDB4MDAyQSlcIik7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZmlyc3RJRkRPZmZzZXQgPSBmaWxlLmdldFVpbnQzMih0aWZmT2Zmc2V0KzQsICFiaWdFbmQpO1xuXG4gICAgICAgIGlmIChmaXJzdElGRE9mZnNldCA8IDB4MDAwMDAwMDgpIHtcbiAgICAgICAgICAgIGlmIChkZWJ1ZykgY29uc29sZS5sb2coXCJOb3QgdmFsaWQgVElGRiBkYXRhISAoRmlyc3Qgb2Zmc2V0IGxlc3MgdGhhbiA4KVwiLCBmaWxlLmdldFVpbnQzMih0aWZmT2Zmc2V0KzQsICFiaWdFbmQpKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRhZ3MgPSByZWFkVGFncyhmaWxlLCB0aWZmT2Zmc2V0LCB0aWZmT2Zmc2V0ICsgZmlyc3RJRkRPZmZzZXQsIFRpZmZUYWdzLCBiaWdFbmQpO1xuXG4gICAgICAgIGlmICh0YWdzLkV4aWZJRkRQb2ludGVyKSB7XG4gICAgICAgICAgICBleGlmRGF0YSA9IHJlYWRUYWdzKGZpbGUsIHRpZmZPZmZzZXQsIHRpZmZPZmZzZXQgKyB0YWdzLkV4aWZJRkRQb2ludGVyLCBFeGlmVGFncywgYmlnRW5kKTtcbiAgICAgICAgICAgIGZvciAodGFnIGluIGV4aWZEYXRhKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0YWcpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIkxpZ2h0U291cmNlXCIgOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiRmxhc2hcIiA6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJNZXRlcmluZ01vZGVcIiA6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJFeHBvc3VyZVByb2dyYW1cIiA6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJTZW5zaW5nTWV0aG9kXCIgOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiU2NlbmVDYXB0dXJlVHlwZVwiIDpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIlNjZW5lVHlwZVwiIDpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIkN1c3RvbVJlbmRlcmVkXCIgOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiV2hpdGVCYWxhbmNlXCIgOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiR2FpbkNvbnRyb2xcIiA6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJDb250cmFzdFwiIDpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIlNhdHVyYXRpb25cIiA6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJTaGFycG5lc3NcIiA6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJTdWJqZWN0RGlzdGFuY2VSYW5nZVwiIDpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIkZpbGVTb3VyY2VcIiA6XG4gICAgICAgICAgICAgICAgICAgICAgICBleGlmRGF0YVt0YWddID0gU3RyaW5nVmFsdWVzW3RhZ11bZXhpZkRhdGFbdGFnXV07XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiRXhpZlZlcnNpb25cIiA6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJGbGFzaHBpeFZlcnNpb25cIiA6XG4gICAgICAgICAgICAgICAgICAgICAgICBleGlmRGF0YVt0YWddID0gU3RyaW5nLmZyb21DaGFyQ29kZShleGlmRGF0YVt0YWddWzBdLCBleGlmRGF0YVt0YWddWzFdLCBleGlmRGF0YVt0YWddWzJdLCBleGlmRGF0YVt0YWddWzNdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJDb21wb25lbnRzQ29uZmlndXJhdGlvblwiIDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4aWZEYXRhW3RhZ10gPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN0cmluZ1ZhbHVlcy5Db21wb25lbnRzW2V4aWZEYXRhW3RhZ11bMF1dICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTdHJpbmdWYWx1ZXMuQ29tcG9uZW50c1tleGlmRGF0YVt0YWddWzFdXSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgU3RyaW5nVmFsdWVzLkNvbXBvbmVudHNbZXhpZkRhdGFbdGFnXVsyXV0gK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN0cmluZ1ZhbHVlcy5Db21wb25lbnRzW2V4aWZEYXRhW3RhZ11bM11dO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRhZ3NbdGFnXSA9IGV4aWZEYXRhW3RhZ107XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGFncy5HUFNJbmZvSUZEUG9pbnRlcikge1xuICAgICAgICAgICAgZ3BzRGF0YSA9IHJlYWRUYWdzKGZpbGUsIHRpZmZPZmZzZXQsIHRpZmZPZmZzZXQgKyB0YWdzLkdQU0luZm9JRkRQb2ludGVyLCBHUFNUYWdzLCBiaWdFbmQpO1xuICAgICAgICAgICAgZm9yICh0YWcgaW4gZ3BzRGF0YSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGFnKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJHUFNWZXJzaW9uSURcIiA6XG4gICAgICAgICAgICAgICAgICAgICAgICBncHNEYXRhW3RhZ10gPSBncHNEYXRhW3RhZ11bMF0gK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiLlwiICsgZ3BzRGF0YVt0YWddWzFdICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIi5cIiArIGdwc0RhdGFbdGFnXVsyXSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIuXCIgKyBncHNEYXRhW3RhZ11bM107XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGFnc1t0YWddID0gZ3BzRGF0YVt0YWddO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gZXh0cmFjdCB0aHVtYm5haWxcbiAgICAgICAgdGFnc1sndGh1bWJuYWlsJ10gPSByZWFkVGh1bWJuYWlsSW1hZ2UoZmlsZSwgdGlmZk9mZnNldCwgZmlyc3RJRkRPZmZzZXQsIGJpZ0VuZCk7XG5cbiAgICAgICAgcmV0dXJuIHRhZ3M7XG4gICAgfVxuXG4gICBmdW5jdGlvbiBmaW5kWE1QaW5KUEVHKGZpbGUpIHtcblxuICAgICAgICBpZiAoISgnRE9NUGFyc2VyJyBpbiBzZWxmKSkge1xuICAgICAgICAgICAgLy8gY29uc29sZS53YXJuKCdYTUwgcGFyc2luZyBub3Qgc3VwcG9ydGVkIHdpdGhvdXQgRE9NUGFyc2VyJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRhdGFWaWV3ID0gbmV3IERhdGFWaWV3KGZpbGUpO1xuXG4gICAgICAgIGlmIChkZWJ1ZykgY29uc29sZS5sb2coXCJHb3QgZmlsZSBvZiBsZW5ndGggXCIgKyBmaWxlLmJ5dGVMZW5ndGgpO1xuICAgICAgICBpZiAoKGRhdGFWaWV3LmdldFVpbnQ4KDApICE9IDB4RkYpIHx8IChkYXRhVmlldy5nZXRVaW50OCgxKSAhPSAweEQ4KSkge1xuICAgICAgICAgICBpZiAoZGVidWcpIGNvbnNvbGUubG9nKFwiTm90IGEgdmFsaWQgSlBFR1wiKTtcbiAgICAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBub3QgYSB2YWxpZCBqcGVnXG4gICAgICAgIH1cblxuICAgICAgICB2YXIgb2Zmc2V0ID0gMixcbiAgICAgICAgICAgIGxlbmd0aCA9IGZpbGUuYnl0ZUxlbmd0aCxcbiAgICAgICAgICAgIGRvbSA9IG5ldyBET01QYXJzZXIoKTtcblxuICAgICAgICB3aGlsZSAob2Zmc2V0IDwgKGxlbmd0aC00KSkge1xuICAgICAgICAgICAgaWYgKGdldFN0cmluZ0Zyb21EQihkYXRhVmlldywgb2Zmc2V0LCA0KSA9PSBcImh0dHBcIikge1xuICAgICAgICAgICAgICAgIHZhciBzdGFydE9mZnNldCA9IG9mZnNldCAtIDE7XG4gICAgICAgICAgICAgICAgdmFyIHNlY3Rpb25MZW5ndGggPSBkYXRhVmlldy5nZXRVaW50MTYob2Zmc2V0IC0gMikgLSAxO1xuICAgICAgICAgICAgICAgIHZhciB4bXBTdHJpbmcgPSBnZXRTdHJpbmdGcm9tREIoZGF0YVZpZXcsIHN0YXJ0T2Zmc2V0LCBzZWN0aW9uTGVuZ3RoKVxuICAgICAgICAgICAgICAgIHZhciB4bXBFbmRJbmRleCA9IHhtcFN0cmluZy5pbmRleE9mKCd4bXBtZXRhPicpICsgODtcbiAgICAgICAgICAgICAgICB4bXBTdHJpbmcgPSB4bXBTdHJpbmcuc3Vic3RyaW5nKCB4bXBTdHJpbmcuaW5kZXhPZiggJzx4OnhtcG1ldGEnICksIHhtcEVuZEluZGV4ICk7XG5cbiAgICAgICAgICAgICAgICB2YXIgaW5kZXhPZlhtcCA9IHhtcFN0cmluZy5pbmRleE9mKCd4OnhtcG1ldGEnKSArIDEwXG4gICAgICAgICAgICAgICAgLy9NYW55IGN1c3RvbSB3cml0dGVuIHByb2dyYW1zIGVtYmVkIHhtcC94bWwgd2l0aG91dCBhbnkgbmFtZXNwYWNlLiBGb2xsb3dpbmcgYXJlIHNvbWUgb2YgdGhlbS5cbiAgICAgICAgICAgICAgICAvL1dpdGhvdXQgdGhlc2UgbmFtZXNwYWNlcywgWE1MIGlzIHRob3VnaHQgdG8gYmUgaW52YWxpZCBieSBwYXJzZXJzXG4gICAgICAgICAgICAgICAgeG1wU3RyaW5nID0geG1wU3RyaW5nLnNsaWNlKDAsIGluZGV4T2ZYbXApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAneG1sbnM6SXB0YzR4bXBDb3JlPVwiaHR0cDovL2lwdGMub3JnL3N0ZC9JcHRjNHhtcENvcmUvMS4wL3htbG5zL1wiICdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArICd4bWxuczp4c2k9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZVwiICdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArICd4bWxuczp0aWZmPVwiaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC9cIiAnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAneG1sbnM6cGx1cz1cImh0dHA6Ly9zY2hlbWFzLmFuZHJvaWQuY29tL2Fway9saWIvY29tLmdvb2dsZS5hbmRyb2lkLmdtcy5wbHVzXCIgJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgJ3htbG5zOmV4dD1cImh0dHA6Ly93d3cuZ2V0dHlpbWFnZXMuY29tL3hzbHRFeHRlbnNpb24vMS4wXCIgJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgJ3htbG5zOmV4aWY9XCJodHRwOi8vbnMuYWRvYmUuY29tL2V4aWYvMS4wL1wiICdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArICd4bWxuczpzdEV2dD1cImh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZUV2ZW50I1wiICdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArICd4bWxuczpzdFJlZj1cImh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiNcIiAnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAneG1sbnM6Y3JzPVwiaHR0cDovL25zLmFkb2JlLmNvbS9jYW1lcmEtcmF3LXNldHRpbmdzLzEuMC9cIiAnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAneG1sbnM6eGFwR0ltZz1cImh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9nL2ltZy9cIiAnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAneG1sbnM6SXB0YzR4bXBFeHQ9XCJodHRwOi8vaXB0Yy5vcmcvc3RkL0lwdGM0eG1wRXh0LzIwMDgtMDItMjkvXCIgJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgeG1wU3RyaW5nLnNsaWNlKGluZGV4T2ZYbXApXG5cbiAgICAgICAgICAgICAgICB2YXIgZG9tRG9jdW1lbnQgPSBkb20ucGFyc2VGcm9tU3RyaW5nKCB4bXBTdHJpbmcsICd0ZXh0L3htbCcgKTtcbiAgICAgICAgICAgICAgICByZXR1cm4geG1sMk9iamVjdChkb21Eb2N1bWVudCk7XG4gICAgICAgICAgICB9IGVsc2V7XG4gICAgICAgICAgICAgb2Zmc2V0Kys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB4bWwyanNvbih4bWwpIHtcbiAgICAgICAgdmFyIGpzb24gPSB7fTtcbiAgICAgIFxuICAgICAgICBpZiAoeG1sLm5vZGVUeXBlID09IDEpIHsgLy8gZWxlbWVudCBub2RlXG4gICAgICAgICAgaWYgKHhtbC5hdHRyaWJ1dGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGpzb25bJ0BhdHRyaWJ1dGVzJ10gPSB7fTtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgeG1sLmF0dHJpYnV0ZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IHhtbC5hdHRyaWJ1dGVzLml0ZW0oaik7XG4gICAgICAgICAgICAgIGpzb25bJ0BhdHRyaWJ1dGVzJ11bYXR0cmlidXRlLm5vZGVOYW1lXSA9IGF0dHJpYnV0ZS5ub2RlVmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHhtbC5ub2RlVHlwZSA9PSAzKSB7IC8vIHRleHQgbm9kZVxuICAgICAgICAgIHJldHVybiB4bWwubm9kZVZhbHVlO1xuICAgICAgICB9XG4gICAgICBcbiAgICAgICAgLy8gZGVhbCB3aXRoIGNoaWxkcmVuXG4gICAgICAgIGlmICh4bWwuaGFzQ2hpbGROb2RlcygpKSB7XG4gICAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IHhtbC5jaGlsZE5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgY2hpbGQgPSB4bWwuY2hpbGROb2Rlcy5pdGVtKGkpO1xuICAgICAgICAgICAgdmFyIG5vZGVOYW1lID0gY2hpbGQubm9kZU5hbWU7XG4gICAgICAgICAgICBpZiAoanNvbltub2RlTmFtZV0gPT0gbnVsbCkge1xuICAgICAgICAgICAgICBqc29uW25vZGVOYW1lXSA9IHhtbDJqc29uKGNoaWxkKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGlmIChqc29uW25vZGVOYW1lXS5wdXNoID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB2YXIgb2xkID0ganNvbltub2RlTmFtZV07XG4gICAgICAgICAgICAgICAganNvbltub2RlTmFtZV0gPSBbXTtcbiAgICAgICAgICAgICAgICBqc29uW25vZGVOYW1lXS5wdXNoKG9sZCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAganNvbltub2RlTmFtZV0ucHVzaCh4bWwyanNvbihjaGlsZCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGpzb247XG4gICAgfVxuXG4gICAgZnVuY3Rpb24geG1sMk9iamVjdCh4bWwpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciBvYmogPSB7fTtcbiAgICAgICAgICAgIGlmICh4bWwuY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHhtbC5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBpdGVtID0geG1sLmNoaWxkcmVuLml0ZW0oaSk7XG4gICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZXMgPSBpdGVtLmF0dHJpYnV0ZXM7XG4gICAgICAgICAgICAgICAgZm9yKHZhciBpZHggaW4gYXR0cmlidXRlcykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaXRlbUF0dCA9IGF0dHJpYnV0ZXNbaWR4XTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGFLZXkgPSBpdGVtQXR0Lm5vZGVOYW1lO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YVZhbHVlID0gaXRlbUF0dC5ub2RlVmFsdWU7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYoZGF0YUtleSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvYmpbZGF0YUtleV0gPSBkYXRhVmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIG5vZGVOYW1lID0gaXRlbS5ub2RlTmFtZTtcblxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgKG9ialtub2RlTmFtZV0pID09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICAgIG9ialtub2RlTmFtZV0gPSB4bWwyanNvbihpdGVtKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiAob2JqW25vZGVOYW1lXS5wdXNoKSA9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBvbGQgPSBvYmpbbm9kZU5hbWVdO1xuXG4gICAgICAgICAgICAgICAgICAgIG9ialtub2RlTmFtZV0gPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgb2JqW25vZGVOYW1lXS5wdXNoKG9sZCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBvYmpbbm9kZU5hbWVdLnB1c2goeG1sMmpzb24oaXRlbSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgb2JqID0geG1sLnRleHRDb250ZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKGUubWVzc2FnZSk7XG4gICAgICAgICAgfVxuICAgIH1cblxuICAgIEVYSUYuZW5hYmxlWG1wID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIEVYSUYuaXNYbXBFbmFibGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBFWElGLmRpc2FibGVYbXAgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgRVhJRi5pc1htcEVuYWJsZWQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBFWElGLmdldERhdGEgPSBmdW5jdGlvbihpbWcsIGNhbGxiYWNrKSB7XG4gICAgICAgIGlmICgoKHNlbGYuSW1hZ2UgJiYgaW1nIGluc3RhbmNlb2Ygc2VsZi5JbWFnZSlcbiAgICAgICAgICAgIHx8IChzZWxmLkhUTUxJbWFnZUVsZW1lbnQgJiYgaW1nIGluc3RhbmNlb2Ygc2VsZi5IVE1MSW1hZ2VFbGVtZW50KSlcbiAgICAgICAgICAgICYmICFpbWcuY29tcGxldGUpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgaWYgKCFpbWFnZUhhc0RhdGEoaW1nKSkge1xuICAgICAgICAgICAgZ2V0SW1hZ2VEYXRhKGltZywgY2FsbGJhY2spO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbChpbWcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIEVYSUYuZ2V0VGFnID0gZnVuY3Rpb24oaW1nLCB0YWcpIHtcbiAgICAgICAgaWYgKCFpbWFnZUhhc0RhdGEoaW1nKSkgcmV0dXJuO1xuICAgICAgICByZXR1cm4gaW1nLmV4aWZkYXRhW3RhZ107XG4gICAgfVxuICAgIFxuICAgIEVYSUYuZ2V0SXB0Y1RhZyA9IGZ1bmN0aW9uKGltZywgdGFnKSB7XG4gICAgICAgIGlmICghaW1hZ2VIYXNEYXRhKGltZykpIHJldHVybjtcbiAgICAgICAgcmV0dXJuIGltZy5pcHRjZGF0YVt0YWddO1xuICAgIH1cblxuICAgIEVYSUYuZ2V0QWxsVGFncyA9IGZ1bmN0aW9uKGltZykge1xuICAgICAgICBpZiAoIWltYWdlSGFzRGF0YShpbWcpKSByZXR1cm4ge307XG4gICAgICAgIHZhciBhLFxuICAgICAgICAgICAgZGF0YSA9IGltZy5leGlmZGF0YSxcbiAgICAgICAgICAgIHRhZ3MgPSB7fTtcbiAgICAgICAgZm9yIChhIGluIGRhdGEpIHtcbiAgICAgICAgICAgIGlmIChkYXRhLmhhc093blByb3BlcnR5KGEpKSB7XG4gICAgICAgICAgICAgICAgdGFnc1thXSA9IGRhdGFbYV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRhZ3M7XG4gICAgfVxuICAgIFxuICAgIEVYSUYuZ2V0QWxsSXB0Y1RhZ3MgPSBmdW5jdGlvbihpbWcpIHtcbiAgICAgICAgaWYgKCFpbWFnZUhhc0RhdGEoaW1nKSkgcmV0dXJuIHt9O1xuICAgICAgICB2YXIgYSxcbiAgICAgICAgICAgIGRhdGEgPSBpbWcuaXB0Y2RhdGEsXG4gICAgICAgICAgICB0YWdzID0ge307XG4gICAgICAgIGZvciAoYSBpbiBkYXRhKSB7XG4gICAgICAgICAgICBpZiAoZGF0YS5oYXNPd25Qcm9wZXJ0eShhKSkge1xuICAgICAgICAgICAgICAgIHRhZ3NbYV0gPSBkYXRhW2FdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0YWdzO1xuICAgIH1cblxuICAgIEVYSUYucHJldHR5ID0gZnVuY3Rpb24oaW1nKSB7XG4gICAgICAgIGlmICghaW1hZ2VIYXNEYXRhKGltZykpIHJldHVybiBcIlwiO1xuICAgICAgICB2YXIgYSxcbiAgICAgICAgICAgIGRhdGEgPSBpbWcuZXhpZmRhdGEsXG4gICAgICAgICAgICBzdHJQcmV0dHkgPSBcIlwiO1xuICAgICAgICBmb3IgKGEgaW4gZGF0YSkge1xuICAgICAgICAgICAgaWYgKGRhdGEuaGFzT3duUHJvcGVydHkoYSkpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRhdGFbYV0gPT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YVthXSBpbnN0YW5jZW9mIE51bWJlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RyUHJldHR5ICs9IGEgKyBcIiA6IFwiICsgZGF0YVthXSArIFwiIFtcIiArIGRhdGFbYV0ubnVtZXJhdG9yICsgXCIvXCIgKyBkYXRhW2FdLmRlbm9taW5hdG9yICsgXCJdXFxyXFxuXCI7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJQcmV0dHkgKz0gYSArIFwiIDogW1wiICsgZGF0YVthXS5sZW5ndGggKyBcIiB2YWx1ZXNdXFxyXFxuXCI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzdHJQcmV0dHkgKz0gYSArIFwiIDogXCIgKyBkYXRhW2FdICsgXCJcXHJcXG5cIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0clByZXR0eTtcbiAgICB9XG5cbiAgICBFWElGLnJlYWRGcm9tQmluYXJ5RmlsZSA9IGZ1bmN0aW9uKGZpbGUpIHtcbiAgICAgICAgcmV0dXJuIGZpbmRFWElGaW5KUEVHKGZpbGUpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICAgICAgZGVmaW5lKCdleGlmLWpzJywgW10sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIEVYSUY7XG4gICAgICAgIH0pO1xuICAgIH1cbn0uY2FsbCh0aGlzKSk7XG5cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIGQ6L3dlYi9ub2RlX21vZHVsZXMvZXhpZi1qcy9leGlmLmpzXG4vLyBtb2R1bGUgaWQgPSA3M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///73\\n\");/***/},/* 74 *//***/function(module,exports,__webpack_require__){eval(\"// style-loader: Adds some css to the DOM by adding a <style> tag\\n\\n// load the styles\\nvar content = __webpack_require__(75);\\nif(typeof content === 'string') content = [[module.i, content, '']];\\n// add the styles to the DOM\\nvar update = __webpack_require__(1)(content, {});\\nif(content.locals) module.exports = content.locals;\\n// Hot Module Replacement\\nif(false) {\\n\\t// When the styles change, update the <style> tags\\n\\tif(!content.locals) {\\n\\t\\tmodule.hot.accept(\\\"!!./../../../node_modules/.0.23.1@css-loader/index.js!./../../../node_modules/postcss-loader/lib/index.js??ref--0-2!./../../../node_modules/.2.2.3@less-loader/index.js!./post.less\\\", function() {\\n\\t\\t\\tvar newContent = require(\\\"!!./../../../node_modules/.0.23.1@css-loader/index.js!./../../../node_modules/postcss-loader/lib/index.js??ref--0-2!./../../../node_modules/.2.2.3@less-loader/index.js!./post.less\\\");\\n\\t\\t\\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\\n\\t\\t\\tupdate(newContent);\\n\\t\\t});\\n\\t}\\n\\t// When the module is disposed, remove the <style> tags\\n\\tmodule.hot.dispose(function() { update(); });\\n}//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcG9zdC5sZXNzP2RlM2MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQ0FBOEY7QUFDOUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxnQ0FBZ0MsVUFBVSxFQUFFO0FBQzVDIiwiZmlsZSI6Ijc0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy4wLjIzLjFAY3NzLWxvYWRlci9pbmRleC5qcyEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9saWIvaW5kZXguanM/P3JlZi0tMC0yIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy4yLjIuM0BsZXNzLWxvYWRlci9pbmRleC5qcyEuL3Bvc3QubGVzc1wiKTtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvLjAuMTMuMUBzdHlsZS1sb2FkZXIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIHt9KTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuXHQvLyBXaGVuIHRoZSBzdHlsZXMgY2hhbmdlLCB1cGRhdGUgdGhlIDxzdHlsZT4gdGFnc1xuXHRpZighY29udGVudC5sb2NhbHMpIHtcblx0XHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvLjAuMjMuMUBjc3MtbG9hZGVyL2luZGV4LmpzIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS0wLTIhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvLjIuMi4zQGxlc3MtbG9hZGVyL2luZGV4LmpzIS4vcG9zdC5sZXNzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8uMC4yMy4xQGNzcy1sb2FkZXIvaW5kZXguanMhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTAtMiEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8uMi4yLjNAbGVzcy1sb2FkZXIvaW5kZXguanMhLi9wb3N0Lmxlc3NcIik7XG5cdFx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblx0XHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0XHR9KTtcblx0fVxuXHQvLyBXaGVuIHRoZSBtb2R1bGUgaXMgZGlzcG9zZWQsIHJlbW92ZSB0aGUgPHN0eWxlPiB0YWdzXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL3Bvc3QubGVzc1xuLy8gbW9kdWxlIGlkID0gNzRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///74\\n\");/***/},/* 75 *//***/function(module,exports,__webpack_require__){eval(\"exports = module.exports = __webpack_require__(0)();\\n// imports\\n\\n\\n// module\\nexports.push([module.i, \\\".editor-post-ovo {\\\\n  display: block;\\\\n  margin: 0;\\\\n  padding: 0;\\\\n  border: none;\\\\n  width: 100%;\\\\n  height: 100%;\\\\n  background: #f0eff6;\\\\n  position: absolute;\\\\n  left: 0;\\\\n  top: 0;\\\\n  -webkit-overflow-scrolling: touch;\\\\n  overflow: hidden;\\\\n}\\\\n.editor-post-ovo .wh {\\\\n  color: black;\\\\n}\\\\n.editor-post-ovo .emoji {\\\\n  width: 20px;\\\\n  height: 20px;\\\\n  border: none;\\\\n  vertical-align: middle;\\\\n}\\\\n.editor-post-ovo .ej_wrap {\\\\n  width: 100%;\\\\n  padding-top: 98%;\\\\n  background: white;\\\\n}\\\\n.editor-post-ovo .ej_comment__input {\\\\n  height: 87%;\\\\n  -webkit-box-sizing: border-box;\\\\n          box-sizing: border-box;\\\\n  border-bottom: .5px solid #c8c7cc;\\\\n}\\\\n.editor-post-ovo .ej_comment__input > div {\\\\n  -webkit-box-sizing: border-box;\\\\n          box-sizing: border-box;\\\\n}\\\\n.editor-post-ovo .ej_comment__input > div:nth-child(1) {\\\\n  height: 15%;\\\\n  width: 88%;\\\\n  margin: 0 auto;\\\\n}\\\\n.editor-post-ovo .ej_comment__input > div:nth-child(1) input {\\\\n  position: absolute;\\\\n  left: 0;\\\\n  top: 0;\\\\n  width: 100%;\\\\n  height: 100%;\\\\n  font-size: 16px;\\\\n  margin: 0;\\\\n  padding: 0;\\\\n  font-weight: 700;\\\\n  border: none;\\\\n  outline: none;\\\\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\\\\n}\\\\n.editor-post-ovo .ej_comment__input > div:nth-child(2) {\\\\n  height: 75%;\\\\n  width: 88%;\\\\n  margin: 0 auto;\\\\n  margin-top: 2%;\\\\n  font-size: 16px;\\\\n  overflow-y: scroll;\\\\n  overflow-x: hidden;\\\\n  -webkit-overflow-scrolling: touch;\\\\n  word-break: break-all;\\\\n  border: none;\\\\n  outline: none;\\\\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\\\\n  line-height: 24px;\\\\n  padding-bottom: 5%;\\\\n}\\\\n.editor-post-ovo .ej_comment__input > div:nth-child(2) img.from-input-ovo {\\\\n  display: inline;\\\\n}\\\\n.editor-post-ovo .ej_comment__input > div:nth-child(2) > p {\\\\n  margin: 2.5px 0;\\\\n}\\\\n.editor-post-ovo .ej_comment__input > div:nth-child(2) > div {\\\\n  margin: 2.5px 0;\\\\n}\\\\n.editor-post-ovo .ej_comment__bot {\\\\n  height: 25%;\\\\n  -webkit-box-sizing: border-box;\\\\n          box-sizing: border-box;\\\\n  overflow: hidden;\\\\n}\\\\n.editor-post-ovo .ej_comment__bot .ej_comment__chooseimg {\\\\n  position: absolute;\\\\n  left: 0;\\\\n  top: 0;\\\\n  opacity: 0;\\\\n  display: block;\\\\n  width: 100%;\\\\n  height: 100%;\\\\n  border: 1px solid #861818;\\\\n  -webkit-box-sizing: border-box;\\\\n          box-sizing: border-box;\\\\n}\\\\n.editor-post-ovo .ej_comment__bot ul {\\\\n  display: -webkit-box;\\\\n  display: -ms-flexbox;\\\\n  display: flex;\\\\n  float: left;\\\\n  width: 43%;\\\\n  margin-top: 2.3%;\\\\n  margin-left: 5%;\\\\n}\\\\n.editor-post-ovo .ej_comment__bot ul li {\\\\n  width: 18%;\\\\n  position: relative;\\\\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\\\\n}\\\\n.editor-post-ovo .ej_comment__bot ul li:nth-child(1) {\\\\n  background: url(\\\" + __webpack_require__(5) + \\\") no-repeat;\\\\n  background-size: cover;\\\\n  margin-left: -3%;\\\\n}\\\\n.editor-post-ovo .ej_comment__bot ul li:nth-child(1)::after {\\\\n  content: '';\\\\n  display: block;\\\\n  padding-top: 100%;\\\\n}\\\\nbody[data-webp*=true] .editor-post-ovo .ej_comment__bot ul li:nth-child(1) {\\\\n  background-image: url(\\\" + __webpack_require__(6) + \\\");\\\\n}\\\\n.editor-post-ovo .ej_comment__bot ul li:nth-child(2) {\\\\n  background: url(\\\" + __webpack_require__(76) + \\\") no-repeat;\\\\n  background-size: cover;\\\\n  overflow: hidden;\\\\n  margin: 0 0 0 10%;\\\\n}\\\\n.editor-post-ovo .ej_comment__bot ul li:nth-child(2)::after {\\\\n  content: '';\\\\n  display: block;\\\\n  padding-top: 100%;\\\\n}\\\\nbody[data-webp*=true] .editor-post-ovo .ej_comment__bot ul li:nth-child(2) {\\\\n  background-image: url(\\\" + __webpack_require__(77) + \\\");\\\\n}\\\\n.editor-post-ovo .ej_comment__bot button {\\\\n  float: right;\\\\n  margin-top: 2.3%;\\\\n  width: 20%;\\\\n  padding-top: 8.2%;\\\\n  margin-right: 5%;\\\\n  border-radius: 4px;\\\\n  -webkit-box-sizing: border-box;\\\\n          box-sizing: border-box;\\\\n}\\\\n.editor-post-ovo .ej_comment__bot .ej_comment__pub {\\\\n  background: #ff5a00;\\\\n}\\\\n.editor-post-ovo .ej_comment__bot .ej_comment__pub > span {\\\\n  display: -webkit-box;\\\\n  display: -ms-flexbox;\\\\n  display: flex;\\\\n  -webkit-box-align: center;\\\\n      -ms-flex-align: center;\\\\n          align-items: center;\\\\n  -webkit-box-pack: center;\\\\n      -ms-flex-pack: center;\\\\n          justify-content: center;\\\\n  font-size: 16px;\\\\n  color: white;\\\\n}\\\\n.editor-post-ovo .ej_comment__bot .ej_comment__cancel {\\\\n  border: 1px solid #c8c7cc;\\\\n}\\\\n.editor-post-ovo .ej_comment__bot .ej_comment__cancel > span {\\\\n  display: -webkit-box;\\\\n  display: -ms-flexbox;\\\\n  display: flex;\\\\n  -webkit-box-align: center;\\\\n      -ms-flex-align: center;\\\\n          align-items: center;\\\\n  -webkit-box-pack: center;\\\\n      -ms-flex-pack: center;\\\\n          justify-content: center;\\\\n  font-size: 16px;\\\\n  color: #635f5f;\\\\n}\\\\n.editor-post-ovo .smile-holder {\\\\n  margin: 0 auto;\\\\n  margin-top: 5%;\\\\n  width: 304px;\\\\n}\\\\n.editor-post-ovo .ej-comment__msg--show {\\\\n  -webkit-animation: 0.2s msg-anm-show forwards;\\\\n          animation: 0.2s msg-anm-show forwards;\\\\n}\\\\n.editor-post-ovo .ej-comment__msg--hide {\\\\n  -webkit-animation: 0.2s msg-anm-hide forwards;\\\\n          animation: 0.2s msg-anm-hide forwards;\\\\n}\\\\n@-webkit-keyframes msg-anm-show {\\\\n  0% {\\\\n    -webkit-transform: translate3d(0, -90%, 0);\\\\n            transform: translate3d(0, -90%, 0);\\\\n    visibility: hidden;\\\\n    opacity: 0;\\\\n  }\\\\n  100% {\\\\n    -webkit-transform: translate3d(0, 0%, 0);\\\\n            transform: translate3d(0, 0%, 0);\\\\n    visibility: visible;\\\\n    opacity: 1;\\\\n  }\\\\n}\\\\n@keyframes msg-anm-show {\\\\n  0% {\\\\n    -webkit-transform: translate3d(0, -90%, 0);\\\\n            transform: translate3d(0, -90%, 0);\\\\n    visibility: hidden;\\\\n    opacity: 0;\\\\n  }\\\\n  100% {\\\\n    -webkit-transform: translate3d(0, 0%, 0);\\\\n            transform: translate3d(0, 0%, 0);\\\\n    visibility: visible;\\\\n    opacity: 1;\\\\n  }\\\\n}\\\\n@-webkit-keyframes msg-anm-hide {\\\\n  0% {\\\\n    -webkit-transform: translate3d(0, 0, 0);\\\\n            transform: translate3d(0, 0, 0);\\\\n    visibility: visible;\\\\n    opacity: 1;\\\\n  }\\\\n  100% {\\\\n    -webkit-transform: translate3d(0, -90%, 0);\\\\n            transform: translate3d(0, -90%, 0);\\\\n    visibility: hidden;\\\\n    opacity: 0;\\\\n  }\\\\n}\\\\n@keyframes msg-anm-hide {\\\\n  0% {\\\\n    -webkit-transform: translate3d(0, 0, 0);\\\\n            transform: translate3d(0, 0, 0);\\\\n    visibility: visible;\\\\n    opacity: 1;\\\\n  }\\\\n  100% {\\\\n    -webkit-transform: translate3d(0, -90%, 0);\\\\n            transform: translate3d(0, -90%, 0);\\\\n    visibility: hidden;\\\\n    opacity: 0;\\\\n  }\\\\n}\\\\n.editor-post-ovo .ej-comment__msg {\\\\n  background: rgba(0, 0, 0, 0.7);\\\\n  padding-top: 10%;\\\\n  border-radius: 5px;\\\\n  font-size: 15px;\\\\n  width: 80%;\\\\n  margin-left: 10%;\\\\n  margin-top: -2%;\\\\n  -webkit-transform: translate3d(0, -90%, 0);\\\\n          transform: translate3d(0, -90%, 0);\\\\n  visibility: visible;\\\\n  opacity: 1;\\\\n}\\\\n.editor-post-ovo .ej-comment__msg > div {\\\\n  display: -webkit-box;\\\\n  display: -ms-flexbox;\\\\n  display: flex;\\\\n  -webkit-box-align: center;\\\\n      -ms-flex-align: center;\\\\n          align-items: center;\\\\n  -webkit-box-pack: center;\\\\n      -ms-flex-pack: center;\\\\n          justify-content: center;\\\\n}\\\\n.editor-post-ovo .ej-comment__msg span {\\\\n  color: white;\\\\n}\\\\n\\\", \\\"\\\"]);\\n\\n// exports\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcG9zdC5sZXNzPzUxZDciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7O0FBR0E7QUFDQSwyQ0FBNEMsbUJBQW1CLGNBQWMsZUFBZSxpQkFBaUIsZ0JBQWdCLGlCQUFpQix3QkFBd0IsdUJBQXVCLFlBQVksV0FBVyxzQ0FBc0MscUJBQXFCLEdBQUcsd0JBQXdCLGlCQUFpQixHQUFHLDJCQUEyQixnQkFBZ0IsaUJBQWlCLGlCQUFpQiwyQkFBMkIsR0FBRyw2QkFBNkIsZ0JBQWdCLHFCQUFxQixzQkFBc0IsR0FBRyx1Q0FBdUMsZ0JBQWdCLG1DQUFtQyxtQ0FBbUMsc0NBQXNDLEdBQUcsNkNBQTZDLG1DQUFtQyxtQ0FBbUMsR0FBRywwREFBMEQsZ0JBQWdCLGVBQWUsbUJBQW1CLEdBQUcsZ0VBQWdFLHVCQUF1QixZQUFZLFdBQVcsZ0JBQWdCLGlCQUFpQixvQkFBb0IsY0FBYyxlQUFlLHFCQUFxQixpQkFBaUIsa0JBQWtCLGtEQUFrRCxHQUFHLDBEQUEwRCxnQkFBZ0IsZUFBZSxtQkFBbUIsbUJBQW1CLG9CQUFvQix1QkFBdUIsdUJBQXVCLHNDQUFzQywwQkFBMEIsaUJBQWlCLGtCQUFrQixrREFBa0Qsc0JBQXNCLHVCQUF1QixHQUFHLDZFQUE2RSxvQkFBb0IsR0FBRyw4REFBOEQsb0JBQW9CLEdBQUcsZ0VBQWdFLG9CQUFvQixHQUFHLHFDQUFxQyxnQkFBZ0IsbUNBQW1DLG1DQUFtQyxxQkFBcUIsR0FBRyw0REFBNEQsdUJBQXVCLFlBQVksV0FBVyxlQUFlLG1CQUFtQixnQkFBZ0IsaUJBQWlCLDhCQUE4QixtQ0FBbUMsbUNBQW1DLEdBQUcsd0NBQXdDLHlCQUF5Qix5QkFBeUIsa0JBQWtCLGdCQUFnQixlQUFlLHFCQUFxQixvQkFBb0IsR0FBRywyQ0FBMkMsZUFBZSx1QkFBdUIsa0RBQWtELEdBQUcsd0RBQXdELDhEQUF3RSwyQkFBMkIscUJBQXFCLEdBQUcsK0RBQStELGdCQUFnQixtQkFBbUIsc0JBQXNCLEdBQUcsOEVBQThFLDBEQUEwRSxHQUFHLHdEQUF3RCwrREFBeUUsMkJBQTJCLHFCQUFxQixzQkFBc0IsR0FBRywrREFBK0QsZ0JBQWdCLG1CQUFtQixzQkFBc0IsR0FBRyw4RUFBOEUsMkRBQTJFLEdBQUcsNENBQTRDLGlCQUFpQixxQkFBcUIsZUFBZSxzQkFBc0IscUJBQXFCLHVCQUF1QixtQ0FBbUMsbUNBQW1DLEdBQUcsc0RBQXNELHdCQUF3QixHQUFHLDZEQUE2RCx5QkFBeUIseUJBQXlCLGtCQUFrQiw4QkFBOEIsK0JBQStCLGdDQUFnQyw2QkFBNkIsOEJBQThCLG9DQUFvQyxvQkFBb0IsaUJBQWlCLEdBQUcseURBQXlELDhCQUE4QixHQUFHLGdFQUFnRSx5QkFBeUIseUJBQXlCLGtCQUFrQiw4QkFBOEIsK0JBQStCLGdDQUFnQyw2QkFBNkIsOEJBQThCLG9DQUFvQyxvQkFBb0IsbUJBQW1CLEdBQUcsa0NBQWtDLG1CQUFtQixtQkFBbUIsaUJBQWlCLEdBQUcsMkNBQTJDLGtEQUFrRCxrREFBa0QsR0FBRywyQ0FBMkMsa0RBQWtELGtEQUFrRCxHQUFHLG1DQUFtQyxRQUFRLGlEQUFpRCxpREFBaUQseUJBQXlCLGlCQUFpQixLQUFLLFVBQVUsK0NBQStDLCtDQUErQywwQkFBMEIsaUJBQWlCLEtBQUssR0FBRywyQkFBMkIsUUFBUSxpREFBaUQsaURBQWlELHlCQUF5QixpQkFBaUIsS0FBSyxVQUFVLCtDQUErQywrQ0FBK0MsMEJBQTBCLGlCQUFpQixLQUFLLEdBQUcsbUNBQW1DLFFBQVEsOENBQThDLDhDQUE4QywwQkFBMEIsaUJBQWlCLEtBQUssVUFBVSxpREFBaUQsaURBQWlELHlCQUF5QixpQkFBaUIsS0FBSyxHQUFHLDJCQUEyQixRQUFRLDhDQUE4Qyw4Q0FBOEMsMEJBQTBCLGlCQUFpQixLQUFLLFVBQVUsaURBQWlELGlEQUFpRCx5QkFBeUIsaUJBQWlCLEtBQUssR0FBRyxxQ0FBcUMsbUNBQW1DLHFCQUFxQix1QkFBdUIsb0JBQW9CLGVBQWUscUJBQXFCLG9CQUFvQiwrQ0FBK0MsK0NBQStDLHdCQUF3QixlQUFlLEdBQUcsMkNBQTJDLHlCQUF5Qix5QkFBeUIsa0JBQWtCLDhCQUE4QiwrQkFBK0IsZ0NBQWdDLDZCQUE2Qiw4QkFBOEIsb0NBQW9DLEdBQUcsMENBQTBDLGlCQUFpQixHQUFHOztBQUVsOE4iLCJmaWxlIjoiNzUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvLjAuMjMuMUBjc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKSgpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLmVkaXRvci1wb3N0LW92byB7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIG1hcmdpbjogMDtcXG4gIHBhZGRpbmc6IDA7XFxuICBib3JkZXI6IG5vbmU7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMTAwJTtcXG4gIGJhY2tncm91bmQ6ICNmMGVmZjY7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBsZWZ0OiAwO1xcbiAgdG9wOiAwO1xcbiAgLXdlYmtpdC1vdmVyZmxvdy1zY3JvbGxpbmc6IHRvdWNoO1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG59XFxuLmVkaXRvci1wb3N0LW92byAud2gge1xcbiAgY29sb3I6IGJsYWNrO1xcbn1cXG4uZWRpdG9yLXBvc3Qtb3ZvIC5lbW9qaSB7XFxuICB3aWR0aDogMjBweDtcXG4gIGhlaWdodDogMjBweDtcXG4gIGJvcmRlcjogbm9uZTtcXG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XFxufVxcbi5lZGl0b3ItcG9zdC1vdm8gLmVqX3dyYXAge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBwYWRkaW5nLXRvcDogOTglO1xcbiAgYmFja2dyb3VuZDogd2hpdGU7XFxufVxcbi5lZGl0b3ItcG9zdC1vdm8gLmVqX2NvbW1lbnRfX2lucHV0IHtcXG4gIGhlaWdodDogODclO1xcbiAgLXdlYmtpdC1ib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgYm9yZGVyLWJvdHRvbTogLjVweCBzb2xpZCAjYzhjN2NjO1xcbn1cXG4uZWRpdG9yLXBvc3Qtb3ZvIC5lal9jb21tZW50X19pbnB1dCA+IGRpdiB7XFxuICAtd2Via2l0LWJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICAgICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcbi5lZGl0b3ItcG9zdC1vdm8gLmVqX2NvbW1lbnRfX2lucHV0ID4gZGl2Om50aC1jaGlsZCgxKSB7XFxuICBoZWlnaHQ6IDE1JTtcXG4gIHdpZHRoOiA4OCU7XFxuICBtYXJnaW46IDAgYXV0bztcXG59XFxuLmVkaXRvci1wb3N0LW92byAuZWpfY29tbWVudF9faW5wdXQgPiBkaXY6bnRoLWNoaWxkKDEpIGlucHV0IHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGxlZnQ6IDA7XFxuICB0b3A6IDA7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMTAwJTtcXG4gIGZvbnQtc2l6ZTogMTZweDtcXG4gIG1hcmdpbjogMDtcXG4gIHBhZGRpbmc6IDA7XFxuICBmb250LXdlaWdodDogNzAwO1xcbiAgYm9yZGVyOiBub25lO1xcbiAgb3V0bGluZTogbm9uZTtcXG4gIC13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwKTtcXG59XFxuLmVkaXRvci1wb3N0LW92byAuZWpfY29tbWVudF9faW5wdXQgPiBkaXY6bnRoLWNoaWxkKDIpIHtcXG4gIGhlaWdodDogNzUlO1xcbiAgd2lkdGg6IDg4JTtcXG4gIG1hcmdpbjogMCBhdXRvO1xcbiAgbWFyZ2luLXRvcDogMiU7XFxuICBmb250LXNpemU6IDE2cHg7XFxuICBvdmVyZmxvdy15OiBzY3JvbGw7XFxuICBvdmVyZmxvdy14OiBoaWRkZW47XFxuICAtd2Via2l0LW92ZXJmbG93LXNjcm9sbGluZzogdG91Y2g7XFxuICB3b3JkLWJyZWFrOiBicmVhay1hbGw7XFxuICBib3JkZXI6IG5vbmU7XFxuICBvdXRsaW5lOiBub25lO1xcbiAgLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yOiByZ2JhKDAsIDAsIDAsIDApO1xcbiAgbGluZS1oZWlnaHQ6IDI0cHg7XFxuICBwYWRkaW5nLWJvdHRvbTogNSU7XFxufVxcbi5lZGl0b3ItcG9zdC1vdm8gLmVqX2NvbW1lbnRfX2lucHV0ID4gZGl2Om50aC1jaGlsZCgyKSBpbWcuZnJvbS1pbnB1dC1vdm8ge1xcbiAgZGlzcGxheTogaW5saW5lO1xcbn1cXG4uZWRpdG9yLXBvc3Qtb3ZvIC5lal9jb21tZW50X19pbnB1dCA+IGRpdjpudGgtY2hpbGQoMikgPiBwIHtcXG4gIG1hcmdpbjogMi41cHggMDtcXG59XFxuLmVkaXRvci1wb3N0LW92byAuZWpfY29tbWVudF9faW5wdXQgPiBkaXY6bnRoLWNoaWxkKDIpID4gZGl2IHtcXG4gIG1hcmdpbjogMi41cHggMDtcXG59XFxuLmVkaXRvci1wb3N0LW92byAuZWpfY29tbWVudF9fYm90IHtcXG4gIGhlaWdodDogMjUlO1xcbiAgLXdlYmtpdC1ib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG59XFxuLmVkaXRvci1wb3N0LW92byAuZWpfY29tbWVudF9fYm90IC5lal9jb21tZW50X19jaG9vc2VpbWcge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgbGVmdDogMDtcXG4gIHRvcDogMDtcXG4gIG9wYWNpdHk6IDA7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgYm9yZGVyOiAxcHggc29saWQgIzg2MTgxODtcXG4gIC13ZWJraXQtYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG59XFxuLmVkaXRvci1wb3N0LW92byAuZWpfY29tbWVudF9fYm90IHVsIHtcXG4gIGRpc3BsYXk6IC13ZWJraXQtYm94O1xcbiAgZGlzcGxheTogLW1zLWZsZXhib3g7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxvYXQ6IGxlZnQ7XFxuICB3aWR0aDogNDMlO1xcbiAgbWFyZ2luLXRvcDogMi4zJTtcXG4gIG1hcmdpbi1sZWZ0OiA1JTtcXG59XFxuLmVkaXRvci1wb3N0LW92byAuZWpfY29tbWVudF9fYm90IHVsIGxpIHtcXG4gIHdpZHRoOiAxOCU7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAtd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMCk7XFxufVxcbi5lZGl0b3ItcG9zdC1vdm8gLmVqX2NvbW1lbnRfX2JvdCB1bCBsaTpudGgtY2hpbGQoMSkge1xcbiAgYmFja2dyb3VuZDogdXJsKFwiICsgcmVxdWlyZShcIi4vY29tbW9uL2ltZy9pY29uLnBuZ1wiKSArIFwiKSBuby1yZXBlYXQ7XFxuICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xcbiAgbWFyZ2luLWxlZnQ6IC0zJTtcXG59XFxuLmVkaXRvci1wb3N0LW92byAuZWpfY29tbWVudF9fYm90IHVsIGxpOm50aC1jaGlsZCgxKTo6YWZ0ZXIge1xcbiAgY29udGVudDogJyc7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIHBhZGRpbmctdG9wOiAxMDAlO1xcbn1cXG5ib2R5W2RhdGEtd2VicCo9dHJ1ZV0gLmVkaXRvci1wb3N0LW92byAuZWpfY29tbWVudF9fYm90IHVsIGxpOm50aC1jaGlsZCgxKSB7XFxuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCIgKyByZXF1aXJlKFwiLi9jb21tb24vaW1nL3dlYnAvaWNvbi53ZWJwXCIpICsgXCIpO1xcbn1cXG4uZWRpdG9yLXBvc3Qtb3ZvIC5lal9jb21tZW50X19ib3QgdWwgbGk6bnRoLWNoaWxkKDIpIHtcXG4gIGJhY2tncm91bmQ6IHVybChcIiArIHJlcXVpcmUoXCIuL2NvbW1vbi9pbWcvaWNvbjIucG5nXCIpICsgXCIpIG5vLXJlcGVhdDtcXG4gIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgbWFyZ2luOiAwIDAgMCAxMCU7XFxufVxcbi5lZGl0b3ItcG9zdC1vdm8gLmVqX2NvbW1lbnRfX2JvdCB1bCBsaTpudGgtY2hpbGQoMik6OmFmdGVyIHtcXG4gIGNvbnRlbnQ6ICcnO1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBwYWRkaW5nLXRvcDogMTAwJTtcXG59XFxuYm9keVtkYXRhLXdlYnAqPXRydWVdIC5lZGl0b3ItcG9zdC1vdm8gLmVqX2NvbW1lbnRfX2JvdCB1bCBsaTpudGgtY2hpbGQoMikge1xcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFwiICsgcmVxdWlyZShcIi4vY29tbW9uL2ltZy93ZWJwL2ljb24yLndlYnBcIikgKyBcIik7XFxufVxcbi5lZGl0b3ItcG9zdC1vdm8gLmVqX2NvbW1lbnRfX2JvdCBidXR0b24ge1xcbiAgZmxvYXQ6IHJpZ2h0O1xcbiAgbWFyZ2luLXRvcDogMi4zJTtcXG4gIHdpZHRoOiAyMCU7XFxuICBwYWRkaW5nLXRvcDogOC4yJTtcXG4gIG1hcmdpbi1yaWdodDogNSU7XFxuICBib3JkZXItcmFkaXVzOiA0cHg7XFxuICAtd2Via2l0LWJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICAgICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcbi5lZGl0b3ItcG9zdC1vdm8gLmVqX2NvbW1lbnRfX2JvdCAuZWpfY29tbWVudF9fcHViIHtcXG4gIGJhY2tncm91bmQ6ICNmZjVhMDA7XFxufVxcbi5lZGl0b3ItcG9zdC1vdm8gLmVqX2NvbW1lbnRfX2JvdCAuZWpfY29tbWVudF9fcHViID4gc3BhbiB7XFxuICBkaXNwbGF5OiAtd2Via2l0LWJveDtcXG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIC13ZWJraXQtYm94LWFsaWduOiBjZW50ZXI7XFxuICAgICAgLW1zLWZsZXgtYWxpZ246IGNlbnRlcjtcXG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIC13ZWJraXQtYm94LXBhY2s6IGNlbnRlcjtcXG4gICAgICAtbXMtZmxleC1wYWNrOiBjZW50ZXI7XFxuICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgZm9udC1zaXplOiAxNnB4O1xcbiAgY29sb3I6IHdoaXRlO1xcbn1cXG4uZWRpdG9yLXBvc3Qtb3ZvIC5lal9jb21tZW50X19ib3QgLmVqX2NvbW1lbnRfX2NhbmNlbCB7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjYzhjN2NjO1xcbn1cXG4uZWRpdG9yLXBvc3Qtb3ZvIC5lal9jb21tZW50X19ib3QgLmVqX2NvbW1lbnRfX2NhbmNlbCA+IHNwYW4ge1xcbiAgZGlzcGxheTogLXdlYmtpdC1ib3g7XFxuICBkaXNwbGF5OiAtbXMtZmxleGJveDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICAtd2Via2l0LWJveC1hbGlnbjogY2VudGVyO1xcbiAgICAgIC1tcy1mbGV4LWFsaWduOiBjZW50ZXI7XFxuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAtd2Via2l0LWJveC1wYWNrOiBjZW50ZXI7XFxuICAgICAgLW1zLWZsZXgtcGFjazogY2VudGVyO1xcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGZvbnQtc2l6ZTogMTZweDtcXG4gIGNvbG9yOiAjNjM1ZjVmO1xcbn1cXG4uZWRpdG9yLXBvc3Qtb3ZvIC5zbWlsZS1ob2xkZXIge1xcbiAgbWFyZ2luOiAwIGF1dG87XFxuICBtYXJnaW4tdG9wOiA1JTtcXG4gIHdpZHRoOiAzMDRweDtcXG59XFxuLmVkaXRvci1wb3N0LW92byAuZWotY29tbWVudF9fbXNnLS1zaG93IHtcXG4gIC13ZWJraXQtYW5pbWF0aW9uOiAwLjJzIG1zZy1hbm0tc2hvdyBmb3J3YXJkcztcXG4gICAgICAgICAgYW5pbWF0aW9uOiAwLjJzIG1zZy1hbm0tc2hvdyBmb3J3YXJkcztcXG59XFxuLmVkaXRvci1wb3N0LW92byAuZWotY29tbWVudF9fbXNnLS1oaWRlIHtcXG4gIC13ZWJraXQtYW5pbWF0aW9uOiAwLjJzIG1zZy1hbm0taGlkZSBmb3J3YXJkcztcXG4gICAgICAgICAgYW5pbWF0aW9uOiAwLjJzIG1zZy1hbm0taGlkZSBmb3J3YXJkcztcXG59XFxuQC13ZWJraXQta2V5ZnJhbWVzIG1zZy1hbm0tc2hvdyB7XFxuICAwJSB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtOTAlLCAwKTtcXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC05MCUsIDApO1xcbiAgICB2aXNpYmlsaXR5OiBoaWRkZW47XFxuICAgIG9wYWNpdHk6IDA7XFxuICB9XFxuICAxMDAlIHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAlLCAwKTtcXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAlLCAwKTtcXG4gICAgdmlzaWJpbGl0eTogdmlzaWJsZTtcXG4gICAgb3BhY2l0eTogMTtcXG4gIH1cXG59XFxuQGtleWZyYW1lcyBtc2ctYW5tLXNob3cge1xcbiAgMCUge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgLTkwJSwgMCk7XFxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtOTAlLCAwKTtcXG4gICAgdmlzaWJpbGl0eTogaGlkZGVuO1xcbiAgICBvcGFjaXR5OiAwO1xcbiAgfVxcbiAgMTAwJSB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwJSwgMCk7XFxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwJSwgMCk7XFxuICAgIHZpc2liaWxpdHk6IHZpc2libGU7XFxuICAgIG9wYWNpdHk6IDE7XFxuICB9XFxufVxcbkAtd2Via2l0LWtleWZyYW1lcyBtc2ctYW5tLWhpZGUge1xcbiAgMCUge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XFxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcXG4gICAgdmlzaWJpbGl0eTogdmlzaWJsZTtcXG4gICAgb3BhY2l0eTogMTtcXG4gIH1cXG4gIDEwMCUge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgLTkwJSwgMCk7XFxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtOTAlLCAwKTtcXG4gICAgdmlzaWJpbGl0eTogaGlkZGVuO1xcbiAgICBvcGFjaXR5OiAwO1xcbiAgfVxcbn1cXG5Aa2V5ZnJhbWVzIG1zZy1hbm0taGlkZSB7XFxuICAwJSB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xcbiAgICB2aXNpYmlsaXR5OiB2aXNpYmxlO1xcbiAgICBvcGFjaXR5OiAxO1xcbiAgfVxcbiAgMTAwJSB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtOTAlLCAwKTtcXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC05MCUsIDApO1xcbiAgICB2aXNpYmlsaXR5OiBoaWRkZW47XFxuICAgIG9wYWNpdHk6IDA7XFxuICB9XFxufVxcbi5lZGl0b3ItcG9zdC1vdm8gLmVqLWNvbW1lbnRfX21zZyB7XFxuICBiYWNrZ3JvdW5kOiByZ2JhKDAsIDAsIDAsIDAuNyk7XFxuICBwYWRkaW5nLXRvcDogMTAlO1xcbiAgYm9yZGVyLXJhZGl1czogNXB4O1xcbiAgZm9udC1zaXplOiAxNXB4O1xcbiAgd2lkdGg6IDgwJTtcXG4gIG1hcmdpbi1sZWZ0OiAxMCU7XFxuICBtYXJnaW4tdG9wOiAtMiU7XFxuICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgLTkwJSwgMCk7XFxuICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgLTkwJSwgMCk7XFxuICB2aXNpYmlsaXR5OiB2aXNpYmxlO1xcbiAgb3BhY2l0eTogMTtcXG59XFxuLmVkaXRvci1wb3N0LW92byAuZWotY29tbWVudF9fbXNnID4gZGl2IHtcXG4gIGRpc3BsYXk6IC13ZWJraXQtYm94O1xcbiAgZGlzcGxheTogLW1zLWZsZXhib3g7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgLXdlYmtpdC1ib3gtYWxpZ246IGNlbnRlcjtcXG4gICAgICAtbXMtZmxleC1hbGlnbjogY2VudGVyO1xcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgLXdlYmtpdC1ib3gtcGFjazogY2VudGVyO1xcbiAgICAgIC1tcy1mbGV4LXBhY2s6IGNlbnRlcjtcXG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxufVxcbi5lZGl0b3ItcG9zdC1vdm8gLmVqLWNvbW1lbnRfX21zZyBzcGFuIHtcXG4gIGNvbG9yOiB3aGl0ZTtcXG59XFxuXCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gZDovd2ViL25vZGVfbW9kdWxlcy8uMC4yMy4xQGNzcy1sb2FkZXIhZDovd2ViL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9saWI/e30hZDovd2ViL25vZGVfbW9kdWxlcy8uMi4yLjNAbGVzcy1sb2FkZXIhLi9zcmMvcG9zdC5sZXNzXG4vLyBtb2R1bGUgaWQgPSA3NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///75\\n\");/***/},/* 76 *//***/function(module,exports,__webpack_require__){eval(\"module.exports = __webpack_require__.p + \\\"img/icon2.png?31e1f7\\\";//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2ltZy9pY29uMi5wbmc/OWI2OSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiI3Ni5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImltZy9pY29uMi5wbmc/MzFlMWY3XCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvY29tbW9uL2ltZy9pY29uMi5wbmdcbi8vIG1vZHVsZSBpZCA9IDc2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///76\\n\");/***/},/* 77 *//***/function(module,exports,__webpack_require__){eval(\"module.exports = __webpack_require__.p + \\\"img/icon2.webp?08e7e0\\\";//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2ltZy93ZWJwL2ljb24yLndlYnA/ZDg1OCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiI3Ny5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImltZy9pY29uMi53ZWJwPzA4ZTdlMFwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2NvbW1vbi9pbWcvd2VicC9pY29uMi53ZWJwXG4vLyBtb2R1bGUgaWQgPSA3N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///77\\n\");/***/}]/******/));});\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9kaXN0L3NjcmlwdHMvbWFpbjEuanM/YTY4ZiJdLCJuYW1lcyI6WyJ3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsInJvb3QiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsIm1vZHVsZXMiLCJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiaSIsImwiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXQiLCJuIiwiX19lc01vZHVsZSIsImdldERlZmF1bHQiLCJnZXRNb2R1bGVFeHBvcnRzIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiZXZhbCJdLCJtYXBwaW5ncyI6InVYQUFBLENBQUMsUUFBU0EsaUNBQVQsQ0FBMENDLElBQTFDLENBQWdEQyxPQUFoRCxDQUF5RCxDQUN6RCxHQUFHLDRCQUFPQyxPQUFQLEtBQW1CLFFBQW5CLEVBQStCLDRCQUFPQyxNQUFQLEtBQWtCLFFBQXBELENBQ0NBLE9BQU9ELE9BQVAsQ0FBaUJELFNBQWpCLENBREQsSUFFSyxJQUFHLElBQUgsQ0FDSixpQ0FBTyxFQUFQLG9DQUFXQSxPQUFYO0FBQUE7QUFBQTtBQUFBLHFHQURJLElBRUEsSUFBRyxPQUFPQyxRQUFQLG1DQUFPQSxPQUFQLEtBQW1CLFFBQXRCLENBQ0pBLFFBQVEsVUFBUixFQUFzQkQsU0FBdEIsQ0FESSxJQUdKRCxNQUFLLFVBQUwsRUFBbUJDLFNBQW5CLENBQ0QsQ0FURCxZQVNTLFVBQVcsQ0FDcEIsTUFBTyxTQUFVLFNBQVNHLE9BQVQsQ0FBa0IsQ0FBRTtBQUNyQyxRQUFVO0FBQ1YsUUFBVSxHQUFJQyxrQkFBbUIsRUFBdkIsQ0FDVixRQUNBLFFBQVU7QUFDVixRQUFVLFFBQVNDLG9CQUFULENBQTZCQyxRQUE3QixDQUF1QyxDQUNqRCxRQUNBLFFBQVc7QUFDWCxRQUFXLEdBQUdGLGlCQUFpQkUsUUFBakIsQ0FBSCxDQUErQixDQUMxQyxRQUFZLE1BQU9GLGtCQUFpQkUsUUFBakIsRUFBMkJMLE9BQWxDLENBQ1osUUFBWSxDQUNaLFFBQVc7QUFDWCxRQUFXLEdBQUlDLFFBQVNFLGlCQUFpQkUsUUFBakIsRUFBNkIsQ0FDckQsUUFBWUMsRUFBR0QsUUFEc0MsQ0FFckQsUUFBWUUsRUFBRyxLQUZzQyxDQUdyRCxRQUFZUCxRQUFTLEVBQ3JCLFFBSnFELENBQTFDLENBS1gsUUFDQSxRQUFXO0FBQ1gsUUFBV0UsUUFBUUcsUUFBUixFQUFrQkcsSUFBbEIsQ0FBdUJQLE9BQU9ELE9BQTlCLENBQXVDQyxNQUF2QyxDQUErQ0EsT0FBT0QsT0FBdEQsQ0FBK0RJLG1CQUEvRCxFQUNYLFFBQ0EsUUFBVztBQUNYLFFBQVdILE9BQU9NLENBQVAsQ0FBVyxJQUFYLENBQ1gsUUFDQSxRQUFXO0FBQ1gsUUFBVyxNQUFPTixRQUFPRCxPQUFkLENBQ1gsUUFBVyxDQUNYLFFBQ0EsUUFDQSxRQUFVO0FBQ1YsUUFBVUksb0JBQW9CSyxDQUFwQixDQUF3QlAsT0FBeEIsQ0FDVixRQUNBLFFBQVU7QUFDVixRQUFVRSxvQkFBb0JNLENBQXBCLENBQXdCUCxnQkFBeEIsQ0FDVixRQUNBLFFBQVU7QUFDVixRQUFVQyxvQkFBb0JPLENBQXBCLENBQXdCLFNBQVNYLE9BQVQsQ0FBa0JZLElBQWxCLENBQXdCQyxNQUF4QixDQUFnQyxDQUNsRSxRQUFXLEdBQUcsQ0FBQ1Qsb0JBQW9CVSxDQUFwQixDQUFzQmQsT0FBdEIsQ0FBK0JZLElBQS9CLENBQUosQ0FBMEMsQ0FDckQsUUFBWUcsT0FBT0MsY0FBUCxDQUFzQmhCLE9BQXRCLENBQStCWSxJQUEvQixDQUFxQyxDQUNqRCxRQUFhSyxhQUFjLEtBRHNCLENBRWpELFFBQWFDLFdBQVksSUFGd0IsQ0FHakQsUUFBYUMsSUFBS04sTUFDbEIsUUFKaUQsQ0FBckMsRUFLWixRQUFZLENBQ1osUUFBVyxDQVJELENBU1YsUUFDQSxRQUFVO0FBQ1YsUUFBVVQsb0JBQW9CZ0IsQ0FBcEIsQ0FBd0IsU0FBU25CLE1BQVQsQ0FBaUIsQ0FDbkQsUUFBVyxHQUFJWSxRQUFTWixRQUFVQSxPQUFPb0IsVUFBakIsQ0FDeEIsUUFBWSxRQUFTQyxXQUFULEVBQXNCLENBQUUsTUFBT3JCLFFBQU8sU0FBUCxDQUFQLENBQTJCLENBRHZDLENBRXhCLFFBQVksUUFBU3NCLGlCQUFULEVBQTRCLENBQUUsTUFBT3RCLE9BQVAsQ0FBZ0IsQ0FGL0MsQ0FHWCxRQUFXRyxvQkFBb0JPLENBQXBCLENBQXNCRSxNQUF0QixDQUE4QixHQUE5QixDQUFtQ0EsTUFBbkMsRUFDWCxRQUFXLE1BQU9BLE9BQVAsQ0FDWCxRQUFXLENBTkQsQ0FPVixRQUNBLFFBQVU7QUFDVixRQUFVVCxvQkFBb0JVLENBQXBCLENBQXdCLFNBQVNVLE1BQVQsQ0FBaUJDLFFBQWpCLENBQTJCLENBQUUsTUFBT1YsUUFBT1csU0FBUCxDQUFpQkMsY0FBakIsQ0FBZ0NuQixJQUFoQyxDQUFxQ2dCLE1BQXJDLENBQTZDQyxRQUE3QyxDQUFQLENBQWdFLENBQXJILENBQ1YsUUFDQSxRQUFVO0FBQ1YsUUFBVXJCLG9CQUFvQndCLENBQXBCLENBQXdCLE9BQXhCLENBQ1YsUUFDQSxRQUFVO0FBQ1YsUUFBVSxNQUFPeEIscUJBQW9CQSxvQkFBb0J5QixDQUFwQixDQUF3QixDQUE1QyxDQUFQLENBQ1YsUUFBVSxDQS9ETSxDQWdFaEIsMEVBQ0EsUUFBVSxDQUNWLE9BQ0EsS0FBTyxTQUFTNUIsTUFBVCxDQUFpQkQsT0FBakIsQ0FBMEIsQ0FFakM4QixLQUFLLDI1SkFBTCxFQUVBLEtBQU8sQ0FORyxDQU9WLE9BQ0EsS0FBTyxTQUFTN0IsTUFBVCxDQUFpQkQsT0FBakIsQ0FBMEIsQ0FFakM4QixLQUFLLDJxcEJBQUwsRUFFQSxLQUFPLENBWkcsRUFhVixPQUNBLE9BQ0EsS0FBTyxTQUFTN0IsTUFBVCxDQUFpQkQsT0FBakIsQ0FBMEJJLG1CQUExQixDQUErQyxDQUV0RCxhQUNBMEIsS0FBSywycXRDQUFMLEVBRUEsS0FBTyxDQXBCRyxDQXFCVixPQUNBLEtBQU8sU0FBUzdCLE1BQVQsQ0FBaUJELE9BQWpCLENBQTBCSSxtQkFBMUIsQ0FBK0MsQ0FFdEQsYUFDQTBCLEtBQUssMnlmQUFMLEVBRUEsS0FBTyxDQTNCRyxDQTRCVixPQUNBLEtBQU8sU0FBUzdCLE1BQVQsQ0FBaUJELE9BQWpCLENBQTBCSSxtQkFBMUIsQ0FBK0MsQ0FFdEQwQixLQUFLLDBuQkFBTCxFQUVBLEtBQU8sQ0FqQ0csQ0FrQ1YsT0FDQSxLQUFPLFNBQVM3QixNQUFULENBQWlCRCxPQUFqQixDQUEwQkksbUJBQTFCLENBQStDLENBRXREMEIsS0FBSywrb0JBQUwsRUFFQSxLQUFPLENBdkNHLENBd0NWLE9BQ0EsS0FBTyxTQUFTN0IsTUFBVCxDQUFpQkQsT0FBakIsQ0FBMEJJLG1CQUExQixDQUErQyxDQUV0RCxhQUNBMEIsS0FBSyw0d0NBQUwsRUFFQSxLQUFPLENBOUNHLENBK0NWLE9BQ0EsS0FBTyxTQUFTN0IsTUFBVCxDQUFpQkQsT0FBakIsQ0FBMEJJLG1CQUExQixDQUErQyxDQUV0RDBCLEtBQUsseStHQUFMLEVBRUEsS0FBTyxDQXBERyxDQXFEVixPQUNBLEtBQU8sU0FBUzdCLE1BQVQsQ0FBaUJELE9BQWpCLENBQTBCSSxtQkFBMUIsQ0FBK0MsQ0FFdEQwQixLQUFLLCt0eUJBQUwsRUFFQSxLQUFPLENBMURHLENBMkRWLFFBQ0EsS0FBTyxTQUFTN0IsTUFBVCxDQUFpQkQsT0FBakIsQ0FBMEJJLG1CQUExQixDQUErQyxDQUV0RCxhQUNBMEIsS0FBSyxvdmVBQUwsRUFFQSxLQUFPLENBakVHLENBa0VWLFFBQ0EsS0FBTyxTQUFTN0IsTUFBVCxDQUFpQkQsT0FBakIsQ0FBMEJJLG1CQUExQixDQUErQyxDQUV0RDBCLEtBQUssdTZMQUFMLEVBRUEsS0FBTyxDQXZFRyxDQXdFVixRQUNBLEtBQU8sU0FBUzdCLE1BQVQsQ0FBaUJELE9BQWpCLENBQTBCSSxtQkFBMUIsQ0FBK0MsQ0FFdEQwQixLQUFLLHNzQkFBTCxFQUVBLEtBQU8sQ0E3RUcsQ0E4RVYsUUFDQSxLQUFPLFNBQVM3QixNQUFULENBQWlCRCxPQUFqQixDQUEwQkksbUJBQTFCLENBQStDLENBRXREMEIsS0FBSyxzc0JBQUwsRUFFQSxLQUFPLENBbkZHLENBb0ZWLFFBQ0EsS0FBTyxTQUFTN0IsTUFBVCxDQUFpQkQsT0FBakIsQ0FBMEJJLG1CQUExQixDQUErQyxDQUV0RDBCLEtBQUssc3NCQUFMLEVBRUEsS0FBTyxDQXpGRyxDQTBGVixRQUNBLEtBQU8sU0FBUzdCLE1BQVQsQ0FBaUJELE9BQWpCLENBQTBCSSxtQkFBMUIsQ0FBK0MsQ0FFdEQwQixLQUFLLHNzQkFBTCxFQUVBLEtBQU8sQ0EvRkcsQ0FnR1YsUUFDQSxLQUFPLFNBQVM3QixNQUFULENBQWlCRCxPQUFqQixDQUEwQkksbUJBQTFCLENBQStDLENBRXREMEIsS0FBSyxzc0JBQUwsRUFFQSxLQUFPLENBckdHLENBc0dWLFFBQ0EsS0FBTyxTQUFTN0IsTUFBVCxDQUFpQkQsT0FBakIsQ0FBMEJJLG1CQUExQixDQUErQyxDQUV0RDBCLEtBQUssc3NCQUFMLEVBRUEsS0FBTyxDQTNHRyxDQTRHVixRQUNBLEtBQU8sU0FBUzdCLE1BQVQsQ0FBaUJELE9BQWpCLENBQTBCSSxtQkFBMUIsQ0FBK0MsQ0FFdEQwQixLQUFLLHNzQkFBTCxFQUVBLEtBQU8sQ0FqSEcsQ0FrSFYsUUFDQSxLQUFPLFNBQVM3QixNQUFULENBQWlCRCxPQUFqQixDQUEwQkksbUJBQTFCLENBQStDLENBRXREMEIsS0FBSyxzc0JBQUwsRUFFQSxLQUFPLENBdkhHLENBd0hWLFFBQ0EsS0FBTyxTQUFTN0IsTUFBVCxDQUFpQkQsT0FBakIsQ0FBMEJJLG1CQUExQixDQUErQyxDQUV0RDBCLEtBQUssc3NCQUFMLEVBRUEsS0FBTyxDQTdIRyxDQThIVixRQUNBLEtBQU8sU0FBUzdCLE1BQVQsQ0FBaUJELE9BQWpCLENBQTBCSSxtQkFBMUIsQ0FBK0MsQ0FFdEQwQixLQUFLLHNzQkFBTCxFQUVBLEtBQU8sQ0FuSUcsQ0FvSVYsUUFDQSxLQUFPLFNBQVM3QixNQUFULENBQWlCRCxPQUFqQixDQUEwQkksbUJBQTFCLENBQStDLENBRXREMEIsS0FBSyxzc0JBQUwsRUFFQSxLQUFPLENBeklHLENBMElWLFFBQ0EsS0FBTyxTQUFTN0IsTUFBVCxDQUFpQkQsT0FBakIsQ0FBMEJJLG1CQUExQixDQUErQyxDQUV0RDBCLEtBQUssc3NCQUFMLEVBRUEsS0FBTyxDQS9JRyxDQWdKVixRQUNBLEtBQU8sU0FBUzdCLE1BQVQsQ0FBaUJELE9BQWpCLENBQTBCSSxtQkFBMUIsQ0FBK0MsQ0FFdEQwQixLQUFLLHNzQkFBTCxFQUVBLEtBQU8sQ0FySkcsQ0FzSlYsUUFDQSxLQUFPLFNBQVM3QixNQUFULENBQWlCRCxPQUFqQixDQUEwQkksbUJBQTFCLENBQStDLENBRXREMEIsS0FBSyxzc0JBQUwsRUFFQSxLQUFPLENBM0pHLENBNEpWLFFBQ0EsS0FBTyxTQUFTN0IsTUFBVCxDQUFpQkQsT0FBakIsQ0FBMEJJLG1CQUExQixDQUErQyxDQUV0RDBCLEtBQUssc3NCQUFMLEVBRUEsS0FBTyxDQWpLRyxDQWtLVixRQUNBLEtBQU8sU0FBUzdCLE1BQVQsQ0FBaUJELE9BQWpCLENBQTBCSSxtQkFBMUIsQ0FBK0MsQ0FFdEQwQixLQUFLLHNzQkFBTCxFQUVBLEtBQU8sQ0F2S0csQ0F3S1YsUUFDQSxLQUFPLFNBQVM3QixNQUFULENBQWlCRCxPQUFqQixDQUEwQkksbUJBQTFCLENBQStDLENBRXREMEIsS0FBSyxzc0JBQUwsRUFFQSxLQUFPLENBN0tHLENBOEtWLFFBQ0EsS0FBTyxTQUFTN0IsTUFBVCxDQUFpQkQsT0FBakIsQ0FBMEJJLG1CQUExQixDQUErQyxDQUV0RDBCLEtBQUssc3NCQUFMLEVBRUEsS0FBTyxDQW5MRyxDQW9MVixRQUNBLEtBQU8sU0FBUzdCLE1BQVQsQ0FBaUJELE9BQWpCLENBQTBCSSxtQkFBMUIsQ0FBK0MsQ0FFdEQwQixLQUFLLHNzQkFBTCxFQUVBLEtBQU8sQ0F6TEcsQ0EwTFYsUUFDQSxLQUFPLFNBQVM3QixNQUFULENBQWlCRCxPQUFqQixDQUEwQkksbUJBQTFCLENBQStDLENBRXREMEIsS0FBSyxzc0JBQUwsRUFFQSxLQUFPLENBL0xHLENBZ01WLFFBQ0EsS0FBTyxTQUFTN0IsTUFBVCxDQUFpQkQsT0FBakIsQ0FBMEJJLG1CQUExQixDQUErQyxDQUV0RDBCLEtBQUssc3NCQUFMLEVBRUEsS0FBTyxDQXJNRyxDQXNNVixRQUNBLEtBQU8sU0FBUzdCLE1BQVQsQ0FBaUJELE9BQWpCLENBQTBCSSxtQkFBMUIsQ0FBK0MsQ0FFdEQwQixLQUFLLHNzQkFBTCxFQUVBLEtBQU8sQ0EzTUcsQ0E0TVYsUUFDQSxLQUFPLFNBQVM3QixNQUFULENBQWlCRCxPQUFqQixDQUEwQkksbUJBQTFCLENBQStDLENBRXREMEIsS0FBSyxzc0JBQUwsRUFFQSxLQUFPLENBak5HLENBa05WLFFBQ0EsS0FBTyxTQUFTN0IsTUFBVCxDQUFpQkQsT0FBakIsQ0FBMEJJLG1CQUExQixDQUErQyxDQUV0RDBCLEtBQUssc3NCQUFMLEVBRUEsS0FBTyxDQXZORyxDQXdOVixRQUNBLEtBQU8sU0FBUzdCLE1BQVQsQ0FBaUJELE9BQWpCLENBQTBCSSxtQkFBMUIsQ0FBK0MsQ0FFdEQwQixLQUFLLHNzQkFBTCxFQUVBLEtBQU8sQ0E3TkcsQ0E4TlYsUUFDQSxLQUFPLFNBQVM3QixNQUFULENBQWlCRCxPQUFqQixDQUEwQkksbUJBQTFCLENBQStDLENBRXREMEIsS0FBSyxzc0JBQUwsRUFFQSxLQUFPLENBbk9HLENBb09WLFFBQ0EsS0FBTyxTQUFTN0IsTUFBVCxDQUFpQkQsT0FBakIsQ0FBMEJJLG1CQUExQixDQUErQyxDQUV0RDBCLEtBQUssc3NCQUFMLEVBRUEsS0FBTyxDQXpPRyxDQTBPVixRQUNBLEtBQU8sU0FBUzdCLE1BQVQsQ0FBaUJELE9BQWpCLENBQTBCSSxtQkFBMUIsQ0FBK0MsQ0FFdEQwQixLQUFLLHNzQkFBTCxFQUVBLEtBQU8sQ0EvT0csQ0FnUFYsUUFDQSxLQUFPLFNBQVM3QixNQUFULENBQWlCRCxPQUFqQixDQUEwQkksbUJBQTFCLENBQStDLENBRXREMEIsS0FBSyxzc0JBQUwsRUFFQSxLQUFPLENBclBHLENBc1BWLFFBQ0EsS0FBTyxTQUFTN0IsTUFBVCxDQUFpQkQsT0FBakIsQ0FBMEJJLG1CQUExQixDQUErQyxDQUV0RDBCLEtBQUssc3NCQUFMLEVBRUEsS0FBTyxDQTNQRyxDQTRQVixRQUNBLEtBQU8sU0FBUzdCLE1BQVQsQ0FBaUJELE9BQWpCLENBQTBCSSxtQkFBMUIsQ0FBK0MsQ0FFdEQwQixLQUFLLHNzQkFBTCxFQUVBLEtBQU8sQ0FqUUcsQ0FrUVYsUUFDQSxLQUFPLFNBQVM3QixNQUFULENBQWlCRCxPQUFqQixDQUEwQkksbUJBQTFCLENBQStDLENBRXREMEIsS0FBSyxzc0JBQUwsRUFFQSxLQUFPLENBdlFHLENBd1FWLFFBQ0EsS0FBTyxTQUFTN0IsTUFBVCxDQUFpQkQsT0FBakIsQ0FBMEJJLG1CQUExQixDQUErQyxDQUV0RDBCLEtBQUssc3NCQUFMLEVBRUEsS0FBTyxDQTdRRyxDQThRVixRQUNBLEtBQU8sU0FBUzdCLE1BQVQsQ0FBaUJELE9BQWpCLENBQTBCSSxtQkFBMUIsQ0FBK0MsQ0FFdEQwQixLQUFLLHNzQkFBTCxFQUVBLEtBQU8sQ0FuUkcsQ0FvUlYsUUFDQSxLQUFPLFNBQVM3QixNQUFULENBQWlCRCxPQUFqQixDQUEwQkksbUJBQTFCLENBQStDLENBRXREMEIsS0FBSyxzc0JBQUwsRUFFQSxLQUFPLENBelJHLENBMFJWLFFBQ0EsS0FBTyxTQUFTN0IsTUFBVCxDQUFpQkQsT0FBakIsQ0FBMEJJLG1CQUExQixDQUErQyxDQUV0RDBCLEtBQUssc3NCQUFMLEVBRUEsS0FBTyxDQS9SRyxDQWdTVixRQUNBLEtBQU8sU0FBUzdCLE1BQVQsQ0FBaUJELE9BQWpCLENBQTBCSSxtQkFBMUIsQ0FBK0MsQ0FFdEQwQixLQUFLLHNzQkFBTCxFQUVBLEtBQU8sQ0FyU0csQ0FzU1YsUUFDQSxLQUFPLFNBQVM3QixNQUFULENBQWlCRCxPQUFqQixDQUEwQkksbUJBQTFCLENBQStDLENBRXREMEIsS0FBSyxzc0JBQUwsRUFFQSxLQUFPLENBM1NHLENBNFNWLFFBQ0EsS0FBTyxTQUFTN0IsTUFBVCxDQUFpQkQsT0FBakIsQ0FBMEJJLG1CQUExQixDQUErQyxDQUV0RDBCLEtBQUssc3NCQUFMLEVBRUEsS0FBTyxDQWpURyxDQWtUVixRQUNBLEtBQU8sU0FBUzdCLE1BQVQsQ0FBaUJELE9BQWpCLENBQTBCSSxtQkFBMUIsQ0FBK0MsQ0FFdEQwQixLQUFLLHNzQkFBTCxFQUVBLEtBQU8sQ0F2VEcsQ0F3VFYsUUFDQSxLQUFPLFNBQVM3QixNQUFULENBQWlCRCxPQUFqQixDQUEwQkksbUJBQTFCLENBQStDLENBRXREMEIsS0FBSyxzc0JBQUwsRUFFQSxLQUFPLENBN1RHLENBOFRWLFFBQ0EsS0FBTyxTQUFTN0IsTUFBVCxDQUFpQkQsT0FBakIsQ0FBMEJJLG1CQUExQixDQUErQyxDQUV0RDBCLEtBQUssc3NCQUFMLEVBRUEsS0FBTyxDQW5VRyxDQW9VVixRQUNBLEtBQU8sU0FBUzdCLE1BQVQsQ0FBaUJELE9BQWpCLENBQTBCSSxtQkFBMUIsQ0FBK0MsQ0FFdEQwQixLQUFLLHNzQkFBTCxFQUVBLEtBQU8sQ0F6VUcsQ0EwVVYsUUFDQSxLQUFPLFNBQVM3QixNQUFULENBQWlCRCxPQUFqQixDQUEwQkksbUJBQTFCLENBQStDLENBRXREMEIsS0FBSyxzc0JBQUwsRUFFQSxLQUFPLENBL1VHLENBZ1ZWLFFBQ0EsS0FBTyxTQUFTN0IsTUFBVCxDQUFpQkQsT0FBakIsQ0FBMEJJLG1CQUExQixDQUErQyxDQUV0RDBCLEtBQUssc3NCQUFMLEVBRUEsS0FBTyxDQXJWRyxDQXNWVixRQUNBLEtBQU8sU0FBUzdCLE1BQVQsQ0FBaUJELE9BQWpCLENBQTBCSSxtQkFBMUIsQ0FBK0MsQ0FFdEQwQixLQUFLLHNzQkFBTCxFQUVBLEtBQU8sQ0EzVkcsQ0E0VlYsUUFDQSxLQUFPLFNBQVM3QixNQUFULENBQWlCRCxPQUFqQixDQUEwQkksbUJBQTFCLENBQStDLENBRXREMEIsS0FBSyxzc0JBQUwsRUFFQSxLQUFPLENBaldHLENBa1dWLFFBQ0EsS0FBTyxTQUFTN0IsTUFBVCxDQUFpQkQsT0FBakIsQ0FBMEJJLG1CQUExQixDQUErQyxDQUV0RDBCLEtBQUssc3NCQUFMLEVBRUEsS0FBTyxDQXZXRyxDQXdXVixRQUNBLEtBQU8sU0FBUzdCLE1BQVQsQ0FBaUJELE9BQWpCLENBQTBCSSxtQkFBMUIsQ0FBK0MsQ0FFdEQwQixLQUFLLHNzQkFBTCxFQUVBLEtBQU8sQ0E3V0csQ0E4V1YsUUFDQSxLQUFPLFNBQVM3QixNQUFULENBQWlCRCxPQUFqQixDQUEwQkksbUJBQTFCLENBQStDLENBRXREMEIsS0FBSyxzc0JBQUwsRUFFQSxLQUFPLENBblhHLENBb1hWLFFBQ0EsS0FBTyxTQUFTN0IsTUFBVCxDQUFpQkQsT0FBakIsQ0FBMEJJLG1CQUExQixDQUErQyxDQUV0RCxhQUNBMEIsS0FBSyxxOG1CQUFMLEVBRUEsS0FBTyxDQTFYRyxDQTJYVixRQUNBLEtBQU8sU0FBUzdCLE1BQVQsQ0FBaUJELE9BQWpCLENBQTBCSSxtQkFBMUIsQ0FBK0MsQ0FFdEQsYUFDQTBCLEtBQUssNnRvZUFBTCxFQUVBLEtBQU8sQ0FqWUcsQ0FrWVYsUUFDQSxLQUFPLFNBQVM3QixNQUFULENBQWlCRCxPQUFqQixDQUEwQkksbUJBQTFCLENBQStDLENBRXREMEIsS0FBSywrZ0hBQUwsRUFFQSxLQUFPLENBdllHLENBd1lWLFFBQ0EsS0FBTyxTQUFTN0IsTUFBVCxDQUFpQkQsT0FBakIsQ0FBMEJJLG1CQUExQixDQUErQyxDQUV0RDBCLEtBQUssKzg2Q0FBTCxFQUVBLEtBQU8sQ0E3WUcsQ0E4WVYsUUFDQSxLQUFPLFNBQVM3QixNQUFULENBQWlCRCxPQUFqQixDQUEwQkksbUJBQTFCLENBQStDLENBRXREMEIsS0FBSywyK0dBQUwsRUFFQSxLQUFPLENBblpHLENBb1pWLFFBQ0EsS0FBTyxTQUFTN0IsTUFBVCxDQUFpQkQsT0FBakIsQ0FBMEJJLG1CQUExQixDQUErQyxDQUV0RDBCLEtBQUssMjBIQUFMLEVBRUEsS0FBTyxDQXpaRyxDQTBaVixRQUNBLEtBQU8sU0FBUzdCLE1BQVQsQ0FBaUJELE9BQWpCLENBQTBCSSxtQkFBMUIsQ0FBK0MsQ0FFdEQwQixLQUFLLHVxQkFBTCxFQUVBLEtBQU8sQ0EvWkcsQ0FnYVYsUUFDQSxLQUFPLFNBQVM3QixNQUFULENBQWlCRCxPQUFqQixDQUEwQkksbUJBQTFCLENBQStDLENBRXREMEIsS0FBSyx3ckJBQUwsRUFFQSxLQUFPLENBcmFHLENBc2FWLFFBQ0EsS0FBTyxTQUFTN0IsTUFBVCxDQUFpQkQsT0FBakIsQ0FBMEJJLG1CQUExQixDQUErQyxDQUV0RDBCLEtBQUssMitHQUFMLEVBRUEsS0FBTyxDQTNhRyxDQTRhVixRQUNBLEtBQU8sU0FBUzdCLE1BQVQsQ0FBaUJELE9BQWpCLENBQTBCSSxtQkFBMUIsQ0FBK0MsQ0FFdEQwQixLQUFLLHNuWkFBTCxFQUVBLEtBQU8sQ0FqYkcsQ0FrYlYsUUFDQSxLQUFPLFNBQVM3QixNQUFULENBQWlCRCxPQUFqQixDQUEwQkksbUJBQTFCLENBQStDLENBRXRELGFBQ0EwQixLQUFLLGd2NUNBQUwsRUFFQSxLQUFPLENBeGJHLENBeWJWLFFBQ0EsS0FBTyxTQUFTN0IsTUFBVCxDQUFpQkQsT0FBakIsQ0FBMEJJLG1CQUExQixDQUErQyxDQUV0RDBCLEtBQUssK3Z2R0FBTCxFQUVBLEtBQU8sQ0E5YkcsQ0ErYlYsUUFDQSxLQUFPLFNBQVM3QixNQUFULENBQWlCRCxPQUFqQixDQUEwQkksbUJBQTFCLENBQStDLENBRXREMEIsS0FBSyxxK0dBQUwsRUFFQSxLQUFPLENBcGNHLENBcWNWLFFBQ0EsS0FBTyxTQUFTN0IsTUFBVCxDQUFpQkQsT0FBakIsQ0FBMEJJLG1CQUExQixDQUErQyxDQUV0RDBCLEtBQUsscW5vQkFBTCxFQUVBLEtBQU8sQ0ExY0csQ0EyY1YsUUFDQSxLQUFPLFNBQVM3QixNQUFULENBQWlCRCxPQUFqQixDQUEwQkksbUJBQTFCLENBQStDLENBRXREMEIsS0FBSyxvb0JBQUwsRUFFQSxLQUFPLENBaGRHLENBaWRWLFFBQ0EsS0FBTyxTQUFTN0IsTUFBVCxDQUFpQkQsT0FBakIsQ0FBMEJJLG1CQUExQixDQUErQyxDQUV0RDBCLEtBQUsscXBCQUFMLEVBRUEsS0FBTyxDQXRkRyxDQXVkVixRQXhoQmdCLENBQWhCLEVBeWhCQyxDQW5pQkQsRSIsImZpbGUiOiIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wiRW1vamlPdk9cIl0gPSBmYWN0b3J5KCk7XG5cdGVsc2Vcblx0XHRyb290W1wiRW1vamlPdk9cIl0gPSBmYWN0b3J5KCk7XG59KSh0aGlzLCBmdW5jdGlvbigpIHtcbnJldHVybiAvKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbi8qKioqKiovIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGk6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bDogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuLyoqKioqKi8gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbi8qKioqKiovIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4vKioqKioqLyBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4vKioqKioqLyBcdFx0XHRcdGdldDogZ2V0dGVyXG4vKioqKioqLyBcdFx0XHR9KTtcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbi8qKioqKiovIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbi8qKioqKiovIFx0XHRyZXR1cm4gZ2V0dGVyO1xuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiZGlzdC9cIjtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA3KTtcbi8qKioqKiovIH0pXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gKFtcbi8qIDAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuZXZhbChcIi8qXFxyXFxuXFx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcXHJcXG5cXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXFxyXFxuKi9cXHJcXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxcclxcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XFxyXFxuXFx0dmFyIGxpc3QgPSBbXTtcXHJcXG5cXHJcXG5cXHQvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXFxyXFxuXFx0bGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xcclxcblxcdFxcdHZhciByZXN1bHQgPSBbXTtcXHJcXG5cXHRcXHRmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xcclxcblxcdFxcdFxcdHZhciBpdGVtID0gdGhpc1tpXTtcXHJcXG5cXHRcXHRcXHRpZihpdGVtWzJdKSB7XFxyXFxuXFx0XFx0XFx0XFx0cmVzdWx0LnB1c2goXFxcIkBtZWRpYSBcXFwiICsgaXRlbVsyXSArIFxcXCJ7XFxcIiArIGl0ZW1bMV0gKyBcXFwifVxcXCIpO1xcclxcblxcdFxcdFxcdH0gZWxzZSB7XFxyXFxuXFx0XFx0XFx0XFx0cmVzdWx0LnB1c2goaXRlbVsxXSk7XFxyXFxuXFx0XFx0XFx0fVxcclxcblxcdFxcdH1cXHJcXG5cXHRcXHRyZXR1cm4gcmVzdWx0LmpvaW4oXFxcIlxcXCIpO1xcclxcblxcdH07XFxyXFxuXFxyXFxuXFx0Ly8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcXHJcXG5cXHRsaXN0LmkgPSBmdW5jdGlvbihtb2R1bGVzLCBtZWRpYVF1ZXJ5KSB7XFxyXFxuXFx0XFx0aWYodHlwZW9mIG1vZHVsZXMgPT09IFxcXCJzdHJpbmdcXFwiKVxcclxcblxcdFxcdFxcdG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIFxcXCJcXFwiXV07XFxyXFxuXFx0XFx0dmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcXHJcXG5cXHRcXHRmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xcclxcblxcdFxcdFxcdHZhciBpZCA9IHRoaXNbaV1bMF07XFxyXFxuXFx0XFx0XFx0aWYodHlwZW9mIGlkID09PSBcXFwibnVtYmVyXFxcIilcXHJcXG5cXHRcXHRcXHRcXHRhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XFxyXFxuXFx0XFx0fVxcclxcblxcdFxcdGZvcihpID0gMDsgaSA8IG1vZHVsZXMubGVuZ3RoOyBpKyspIHtcXHJcXG5cXHRcXHRcXHR2YXIgaXRlbSA9IG1vZHVsZXNbaV07XFxyXFxuXFx0XFx0XFx0Ly8gc2tpcCBhbHJlYWR5IGltcG9ydGVkIG1vZHVsZVxcclxcblxcdFxcdFxcdC8vIHRoaXMgaW1wbGVtZW50YXRpb24gaXMgbm90IDEwMCUgcGVyZmVjdCBmb3Igd2VpcmQgbWVkaWEgcXVlcnkgY29tYmluYXRpb25zXFxyXFxuXFx0XFx0XFx0Ly8gIHdoZW4gYSBtb2R1bGUgaXMgaW1wb3J0ZWQgbXVsdGlwbGUgdGltZXMgd2l0aCBkaWZmZXJlbnQgbWVkaWEgcXVlcmllcy5cXHJcXG5cXHRcXHRcXHQvLyAgSSBob3BlIHRoaXMgd2lsbCBuZXZlciBvY2N1ciAoSGV5IHRoaXMgd2F5IHdlIGhhdmUgc21hbGxlciBidW5kbGVzKVxcclxcblxcdFxcdFxcdGlmKHR5cGVvZiBpdGVtWzBdICE9PSBcXFwibnVtYmVyXFxcIiB8fCAhYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xcclxcblxcdFxcdFxcdFxcdGlmKG1lZGlhUXVlcnkgJiYgIWl0ZW1bMl0pIHtcXHJcXG5cXHRcXHRcXHRcXHRcXHRpdGVtWzJdID0gbWVkaWFRdWVyeTtcXHJcXG5cXHRcXHRcXHRcXHR9IGVsc2UgaWYobWVkaWFRdWVyeSkge1xcclxcblxcdFxcdFxcdFxcdFxcdGl0ZW1bMl0gPSBcXFwiKFxcXCIgKyBpdGVtWzJdICsgXFxcIikgYW5kIChcXFwiICsgbWVkaWFRdWVyeSArIFxcXCIpXFxcIjtcXHJcXG5cXHRcXHRcXHRcXHR9XFxyXFxuXFx0XFx0XFx0XFx0bGlzdC5wdXNoKGl0ZW0pO1xcclxcblxcdFxcdFxcdH1cXHJcXG5cXHRcXHR9XFxyXFxuXFx0fTtcXHJcXG5cXHRyZXR1cm4gbGlzdDtcXHJcXG59O1xcclxcbi8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2WkRvdmQyVmlMMjV2WkdWZmJXOWtkV3hsY3k4dU1DNHlNeTR4UUdOemN5MXNiMkZrWlhJdmJHbGlMMk56Y3kxaVlYTmxMbXB6UHpnNVlUSWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklrRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRXNaMEpCUVdkQ0xHbENRVUZwUWp0QlFVTnFRenRCUVVOQk8wRkJRMEVzZDBOQlFYZERMR2RDUVVGblFqdEJRVU40UkN4SlFVRkpPMEZCUTBvN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzWjBKQlFXZENMR2xDUVVGcFFqdEJRVU5xUXp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxGbEJRVmtzYjBKQlFXOUNPMEZCUTJoRE8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hMUVVGTE8wRkJRMHc3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU0lzSW1acGJHVWlPaUl3TG1weklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lMeXBjY2x4dVhIUk5TVlFnVEdsalpXNXpaU0JvZEhSd09pOHZkM2QzTG05d1pXNXpiM1Z5WTJVdWIzSm5MMnhwWTJWdWMyVnpMMjFwZEMxc2FXTmxibk5sTG5Cb2NGeHlYRzVjZEVGMWRHaHZjaUJVYjJKcFlYTWdTMjl3Y0dWeWN5QkFjMjlyY21GY2NseHVLaTljY2x4dUx5OGdZM056SUdKaGMyVWdZMjlrWlN3Z2FXNXFaV04wWldRZ1lua2dkR2hsSUdOemN5MXNiMkZrWlhKY2NseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpZ3BJSHRjY2x4dVhIUjJZWElnYkdsemRDQTlJRnRkTzF4eVhHNWNjbHh1WEhRdkx5QnlaWFIxY200Z2RHaGxJR3hwYzNRZ2IyWWdiVzlrZFd4bGN5QmhjeUJqYzNNZ2MzUnlhVzVuWEhKY2JseDBiR2x6ZEM1MGIxTjBjbWx1WnlBOUlHWjFibU4wYVc5dUlIUnZVM1J5YVc1bktDa2dlMXh5WEc1Y2RGeDBkbUZ5SUhKbGMzVnNkQ0E5SUZ0ZE8xeHlYRzVjZEZ4MFptOXlLSFpoY2lCcElEMGdNRHNnYVNBOElIUm9hWE11YkdWdVozUm9PeUJwS3lzcElIdGNjbHh1WEhSY2RGeDBkbUZ5SUdsMFpXMGdQU0IwYUdselcybGRPMXh5WEc1Y2RGeDBYSFJwWmlocGRHVnRXekpkS1NCN1hISmNibHgwWEhSY2RGeDBjbVZ6ZFd4MExuQjFjMmdvWENKQWJXVmthV0VnWENJZ0t5QnBkR1Z0V3pKZElDc2dYQ0o3WENJZ0t5QnBkR1Z0V3pGZElDc2dYQ0o5WENJcE8xeHlYRzVjZEZ4MFhIUjlJR1ZzYzJVZ2UxeHlYRzVjZEZ4MFhIUmNkSEpsYzNWc2RDNXdkWE5vS0dsMFpXMWJNVjBwTzF4eVhHNWNkRngwWEhSOVhISmNibHgwWEhSOVhISmNibHgwWEhSeVpYUjFjbTRnY21WemRXeDBMbXB2YVc0b1hDSmNJaWs3WEhKY2JseDBmVHRjY2x4dVhISmNibHgwTHk4Z2FXMXdiM0owSUdFZ2JHbHpkQ0J2WmlCdGIyUjFiR1Z6SUdsdWRHOGdkR2hsSUd4cGMzUmNjbHh1WEhSc2FYTjBMbWtnUFNCbWRXNWpkR2x2YmlodGIyUjFiR1Z6TENCdFpXUnBZVkYxWlhKNUtTQjdYSEpjYmx4MFhIUnBaaWgwZVhCbGIyWWdiVzlrZFd4bGN5QTlQVDBnWENKemRISnBibWRjSWlsY2NseHVYSFJjZEZ4MGJXOWtkV3hsY3lBOUlGdGJiblZzYkN3Z2JXOWtkV3hsY3l3Z1hDSmNJbDFkTzF4eVhHNWNkRngwZG1GeUlHRnNjbVZoWkhsSmJYQnZjblJsWkUxdlpIVnNaWE1nUFNCN2ZUdGNjbHh1WEhSY2RHWnZjaWgyWVhJZ2FTQTlJREE3SUdrZ1BDQjBhR2x6TG14bGJtZDBhRHNnYVNzcktTQjdYSEpjYmx4MFhIUmNkSFpoY2lCcFpDQTlJSFJvYVhOYmFWMWJNRjA3WEhKY2JseDBYSFJjZEdsbUtIUjVjR1Z2WmlCcFpDQTlQVDBnWENKdWRXMWlaWEpjSWlsY2NseHVYSFJjZEZ4MFhIUmhiSEpsWVdSNVNXMXdiM0owWldSTmIyUjFiR1Z6VzJsa1hTQTlJSFJ5ZFdVN1hISmNibHgwWEhSOVhISmNibHgwWEhSbWIzSW9hU0E5SURBN0lHa2dQQ0J0YjJSMWJHVnpMbXhsYm1kMGFEc2dhU3NyS1NCN1hISmNibHgwWEhSY2RIWmhjaUJwZEdWdElEMGdiVzlrZFd4bGMxdHBYVHRjY2x4dVhIUmNkRngwTHk4Z2MydHBjQ0JoYkhKbFlXUjVJR2x0Y0c5eWRHVmtJRzF2WkhWc1pWeHlYRzVjZEZ4MFhIUXZMeUIwYUdseklHbHRjR3hsYldWdWRHRjBhVzl1SUdseklHNXZkQ0F4TURBbElIQmxjbVpsWTNRZ1ptOXlJSGRsYVhKa0lHMWxaR2xoSUhGMVpYSjVJR052YldKcGJtRjBhVzl1YzF4eVhHNWNkRngwWEhRdkx5QWdkMmhsYmlCaElHMXZaSFZzWlNCcGN5QnBiWEJ2Y25SbFpDQnRkV3gwYVhCc1pTQjBhVzFsY3lCM2FYUm9JR1JwWm1abGNtVnVkQ0J0WldScFlTQnhkV1Z5YVdWekxseHlYRzVjZEZ4MFhIUXZMeUFnU1NCb2IzQmxJSFJvYVhNZ2QybHNiQ0J1WlhabGNpQnZZMk4xY2lBb1NHVjVJSFJvYVhNZ2QyRjVJSGRsSUdoaGRtVWdjMjFoYkd4bGNpQmlkVzVrYkdWektWeHlYRzVjZEZ4MFhIUnBaaWgwZVhCbGIyWWdhWFJsYlZzd1hTQWhQVDBnWENKdWRXMWlaWEpjSWlCOGZDQWhZV3h5WldGa2VVbHRjRzl5ZEdWa1RXOWtkV3hsYzF0cGRHVnRXekJkWFNrZ2UxeHlYRzVjZEZ4MFhIUmNkR2xtS0cxbFpHbGhVWFZsY25rZ0ppWWdJV2wwWlcxYk1sMHBJSHRjY2x4dVhIUmNkRngwWEhSY2RHbDBaVzFiTWwwZ1BTQnRaV1JwWVZGMVpYSjVPMXh5WEc1Y2RGeDBYSFJjZEgwZ1pXeHpaU0JwWmlodFpXUnBZVkYxWlhKNUtTQjdYSEpjYmx4MFhIUmNkRngwWEhScGRHVnRXekpkSUQwZ1hDSW9YQ0lnS3lCcGRHVnRXekpkSUNzZ1hDSXBJR0Z1WkNBb1hDSWdLeUJ0WldScFlWRjFaWEo1SUNzZ1hDSXBYQ0k3WEhKY2JseDBYSFJjZEZ4MGZWeHlYRzVjZEZ4MFhIUmNkR3hwYzNRdWNIVnphQ2hwZEdWdEtUdGNjbHh1WEhSY2RGeDBmVnh5WEc1Y2RGeDBmVnh5WEc1Y2RIMDdYSEpjYmx4MGNtVjBkWEp1SUd4cGMzUTdYSEpjYm4wN1hISmNibHh1WEc1Y2JpOHZMeTh2THk4dkx5OHZMeTh2THk4dkwxeHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaTh2SUdRNkwzZGxZaTl1YjJSbFgyMXZaSFZzWlhNdkxqQXVNak11TVVCamMzTXRiRzloWkdWeUwyeHBZaTlqYzNNdFltRnpaUzVxYzF4dUx5OGdiVzlrZFd4bElHbGtJRDBnTUZ4dUx5OGdiVzlrZFd4bElHTm9kVzVyY3lBOUlEQWlYU3dpYzI5MWNtTmxVbTl2ZENJNklpSjlcXG4vLyMgc291cmNlVVJMPXdlYnBhY2staW50ZXJuYWw6Ly8vMFxcblwiKTtcblxuLyoqKi8gfSksXG4vKiAxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbmV2YWwoXCIvKlxcclxcblxcdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXFxyXFxuXFx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxcclxcbiovXFxyXFxudmFyIHN0eWxlc0luRG9tID0ge30sXFxyXFxuXFx0bWVtb2l6ZSA9IGZ1bmN0aW9uKGZuKSB7XFxyXFxuXFx0XFx0dmFyIG1lbW87XFxyXFxuXFx0XFx0cmV0dXJuIGZ1bmN0aW9uICgpIHtcXHJcXG5cXHRcXHRcXHRpZiAodHlwZW9mIG1lbW8gPT09IFxcXCJ1bmRlZmluZWRcXFwiKSBtZW1vID0gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcXHJcXG5cXHRcXHRcXHRyZXR1cm4gbWVtbztcXHJcXG5cXHRcXHR9O1xcclxcblxcdH0sXFxyXFxuXFx0aXNPbGRJRSA9IG1lbW9pemUoZnVuY3Rpb24oKSB7XFxyXFxuXFx0XFx0cmV0dXJuIC9tc2llIFs2LTldXFxcXGIvLnRlc3Qod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKSk7XFxyXFxuXFx0fSksXFxyXFxuXFx0Z2V0SGVhZEVsZW1lbnQgPSBtZW1vaXplKGZ1bmN0aW9uICgpIHtcXHJcXG5cXHRcXHRyZXR1cm4gZG9jdW1lbnQuaGVhZCB8fCBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcXFwiaGVhZFxcXCIpWzBdO1xcclxcblxcdH0pLFxcclxcblxcdHNpbmdsZXRvbkVsZW1lbnQgPSBudWxsLFxcclxcblxcdHNpbmdsZXRvbkNvdW50ZXIgPSAwLFxcclxcblxcdHN0eWxlRWxlbWVudHNJbnNlcnRlZEF0VG9wID0gW107XFxyXFxuXFxyXFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihsaXN0LCBvcHRpb25zKSB7XFxyXFxuXFx0aWYodHlwZW9mIERFQlVHICE9PSBcXFwidW5kZWZpbmVkXFxcIiAmJiBERUJVRykge1xcclxcblxcdFxcdGlmKHR5cGVvZiBkb2N1bWVudCAhPT0gXFxcIm9iamVjdFxcXCIpIHRocm93IG5ldyBFcnJvcihcXFwiVGhlIHN0eWxlLWxvYWRlciBjYW5ub3QgYmUgdXNlZCBpbiBhIG5vbi1icm93c2VyIGVudmlyb25tZW50XFxcIik7XFxyXFxuXFx0fVxcclxcblxcclxcblxcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xcclxcblxcdC8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxcclxcblxcdC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2VcXHJcXG5cXHRpZiAodHlwZW9mIG9wdGlvbnMuc2luZ2xldG9uID09PSBcXFwidW5kZWZpbmVkXFxcIikgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XFxyXFxuXFxyXFxuXFx0Ly8gQnkgZGVmYXVsdCwgYWRkIDxzdHlsZT4gdGFncyB0byB0aGUgYm90dG9tIG9mIDxoZWFkPi5cXHJcXG5cXHRpZiAodHlwZW9mIG9wdGlvbnMuaW5zZXJ0QXQgPT09IFxcXCJ1bmRlZmluZWRcXFwiKSBvcHRpb25zLmluc2VydEF0ID0gXFxcImJvdHRvbVxcXCI7XFxyXFxuXFxyXFxuXFx0dmFyIHN0eWxlcyA9IGxpc3RUb1N0eWxlcyhsaXN0KTtcXHJcXG5cXHRhZGRTdHlsZXNUb0RvbShzdHlsZXMsIG9wdGlvbnMpO1xcclxcblxcclxcblxcdHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xcclxcblxcdFxcdHZhciBtYXlSZW1vdmUgPSBbXTtcXHJcXG5cXHRcXHRmb3IodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XFxyXFxuXFx0XFx0XFx0dmFyIGl0ZW0gPSBzdHlsZXNbaV07XFxyXFxuXFx0XFx0XFx0dmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XFxyXFxuXFx0XFx0XFx0ZG9tU3R5bGUucmVmcy0tO1xcclxcblxcdFxcdFxcdG1heVJlbW92ZS5wdXNoKGRvbVN0eWxlKTtcXHJcXG5cXHRcXHR9XFxyXFxuXFx0XFx0aWYobmV3TGlzdCkge1xcclxcblxcdFxcdFxcdHZhciBuZXdTdHlsZXMgPSBsaXN0VG9TdHlsZXMobmV3TGlzdCk7XFxyXFxuXFx0XFx0XFx0YWRkU3R5bGVzVG9Eb20obmV3U3R5bGVzLCBvcHRpb25zKTtcXHJcXG5cXHRcXHR9XFxyXFxuXFx0XFx0Zm9yKHZhciBpID0gMDsgaSA8IG1heVJlbW92ZS5sZW5ndGg7IGkrKykge1xcclxcblxcdFxcdFxcdHZhciBkb21TdHlsZSA9IG1heVJlbW92ZVtpXTtcXHJcXG5cXHRcXHRcXHRpZihkb21TdHlsZS5yZWZzID09PSAwKSB7XFxyXFxuXFx0XFx0XFx0XFx0Zm9yKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKVxcclxcblxcdFxcdFxcdFxcdFxcdGRvbVN0eWxlLnBhcnRzW2pdKCk7XFxyXFxuXFx0XFx0XFx0XFx0ZGVsZXRlIHN0eWxlc0luRG9tW2RvbVN0eWxlLmlkXTtcXHJcXG5cXHRcXHRcXHR9XFxyXFxuXFx0XFx0fVxcclxcblxcdH07XFxyXFxufVxcclxcblxcclxcbmZ1bmN0aW9uIGFkZFN0eWxlc1RvRG9tKHN0eWxlcywgb3B0aW9ucykge1xcclxcblxcdGZvcih2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcXHJcXG5cXHRcXHR2YXIgaXRlbSA9IHN0eWxlc1tpXTtcXHJcXG5cXHRcXHR2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcXHJcXG5cXHRcXHRpZihkb21TdHlsZSkge1xcclxcblxcdFxcdFxcdGRvbVN0eWxlLnJlZnMrKztcXHJcXG5cXHRcXHRcXHRmb3IodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIHtcXHJcXG5cXHRcXHRcXHRcXHRkb21TdHlsZS5wYXJ0c1tqXShpdGVtLnBhcnRzW2pdKTtcXHJcXG5cXHRcXHRcXHR9XFxyXFxuXFx0XFx0XFx0Zm9yKDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcXHJcXG5cXHRcXHRcXHRcXHRkb21TdHlsZS5wYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcXHJcXG5cXHRcXHRcXHR9XFxyXFxuXFx0XFx0fSBlbHNlIHtcXHJcXG5cXHRcXHRcXHR2YXIgcGFydHMgPSBbXTtcXHJcXG5cXHRcXHRcXHRmb3IodmFyIGogPSAwOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xcclxcblxcdFxcdFxcdFxcdHBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xcclxcblxcdFxcdFxcdH1cXHJcXG5cXHRcXHRcXHRzdHlsZXNJbkRvbVtpdGVtLmlkXSA9IHtpZDogaXRlbS5pZCwgcmVmczogMSwgcGFydHM6IHBhcnRzfTtcXHJcXG5cXHRcXHR9XFxyXFxuXFx0fVxcclxcbn1cXHJcXG5cXHJcXG5mdW5jdGlvbiBsaXN0VG9TdHlsZXMobGlzdCkge1xcclxcblxcdHZhciBzdHlsZXMgPSBbXTtcXHJcXG5cXHR2YXIgbmV3U3R5bGVzID0ge307XFxyXFxuXFx0Zm9yKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcXHJcXG5cXHRcXHR2YXIgaXRlbSA9IGxpc3RbaV07XFxyXFxuXFx0XFx0dmFyIGlkID0gaXRlbVswXTtcXHJcXG5cXHRcXHR2YXIgY3NzID0gaXRlbVsxXTtcXHJcXG5cXHRcXHR2YXIgbWVkaWEgPSBpdGVtWzJdO1xcclxcblxcdFxcdHZhciBzb3VyY2VNYXAgPSBpdGVtWzNdO1xcclxcblxcdFxcdHZhciBwYXJ0ID0ge2NzczogY3NzLCBtZWRpYTogbWVkaWEsIHNvdXJjZU1hcDogc291cmNlTWFwfTtcXHJcXG5cXHRcXHRpZighbmV3U3R5bGVzW2lkXSlcXHJcXG5cXHRcXHRcXHRzdHlsZXMucHVzaChuZXdTdHlsZXNbaWRdID0ge2lkOiBpZCwgcGFydHM6IFtwYXJ0XX0pO1xcclxcblxcdFxcdGVsc2VcXHJcXG5cXHRcXHRcXHRuZXdTdHlsZXNbaWRdLnBhcnRzLnB1c2gocGFydCk7XFxyXFxuXFx0fVxcclxcblxcdHJldHVybiBzdHlsZXM7XFxyXFxufVxcclxcblxcclxcbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zLCBzdHlsZUVsZW1lbnQpIHtcXHJcXG5cXHR2YXIgaGVhZCA9IGdldEhlYWRFbGVtZW50KCk7XFxyXFxuXFx0dmFyIGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wID0gc3R5bGVFbGVtZW50c0luc2VydGVkQXRUb3Bbc3R5bGVFbGVtZW50c0luc2VydGVkQXRUb3AubGVuZ3RoIC0gMV07XFxyXFxuXFx0aWYgKG9wdGlvbnMuaW5zZXJ0QXQgPT09IFxcXCJ0b3BcXFwiKSB7XFxyXFxuXFx0XFx0aWYoIWxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wKSB7XFxyXFxuXFx0XFx0XFx0aGVhZC5pbnNlcnRCZWZvcmUoc3R5bGVFbGVtZW50LCBoZWFkLmZpcnN0Q2hpbGQpO1xcclxcblxcdFxcdH0gZWxzZSBpZihsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcC5uZXh0U2libGluZykge1xcclxcblxcdFxcdFxcdGhlYWQuaW5zZXJ0QmVmb3JlKHN0eWxlRWxlbWVudCwgbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AubmV4dFNpYmxpbmcpO1xcclxcblxcdFxcdH0gZWxzZSB7XFxyXFxuXFx0XFx0XFx0aGVhZC5hcHBlbmRDaGlsZChzdHlsZUVsZW1lbnQpO1xcclxcblxcdFxcdH1cXHJcXG5cXHRcXHRzdHlsZUVsZW1lbnRzSW5zZXJ0ZWRBdFRvcC5wdXNoKHN0eWxlRWxlbWVudCk7XFxyXFxuXFx0fSBlbHNlIGlmIChvcHRpb25zLmluc2VydEF0ID09PSBcXFwiYm90dG9tXFxcIikge1xcclxcblxcdFxcdGhlYWQuYXBwZW5kQ2hpbGQoc3R5bGVFbGVtZW50KTtcXHJcXG5cXHR9IGVsc2Uge1xcclxcblxcdFxcdHRocm93IG5ldyBFcnJvcihcXFwiSW52YWxpZCB2YWx1ZSBmb3IgcGFyYW1ldGVyICdpbnNlcnRBdCcuIE11c3QgYmUgJ3RvcCcgb3IgJ2JvdHRvbScuXFxcIik7XFxyXFxuXFx0fVxcclxcbn1cXHJcXG5cXHJcXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XFxyXFxuXFx0c3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcXHJcXG5cXHR2YXIgaWR4ID0gc3R5bGVFbGVtZW50c0luc2VydGVkQXRUb3AuaW5kZXhPZihzdHlsZUVsZW1lbnQpO1xcclxcblxcdGlmKGlkeCA+PSAwKSB7XFxyXFxuXFx0XFx0c3R5bGVFbGVtZW50c0luc2VydGVkQXRUb3Auc3BsaWNlKGlkeCwgMSk7XFxyXFxuXFx0fVxcclxcbn1cXHJcXG5cXHJcXG5mdW5jdGlvbiBjcmVhdGVTdHlsZUVsZW1lbnQob3B0aW9ucykge1xcclxcblxcdHZhciBzdHlsZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFxcXCJzdHlsZVxcXCIpO1xcclxcblxcdHN0eWxlRWxlbWVudC50eXBlID0gXFxcInRleHQvY3NzXFxcIjtcXHJcXG5cXHRpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgc3R5bGVFbGVtZW50KTtcXHJcXG5cXHRyZXR1cm4gc3R5bGVFbGVtZW50O1xcclxcbn1cXHJcXG5cXHJcXG5mdW5jdGlvbiBjcmVhdGVMaW5rRWxlbWVudChvcHRpb25zKSB7XFxyXFxuXFx0dmFyIGxpbmtFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcXFwibGlua1xcXCIpO1xcclxcblxcdGxpbmtFbGVtZW50LnJlbCA9IFxcXCJzdHlsZXNoZWV0XFxcIjtcXHJcXG5cXHRpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgbGlua0VsZW1lbnQpO1xcclxcblxcdHJldHVybiBsaW5rRWxlbWVudDtcXHJcXG59XFxyXFxuXFxyXFxuZnVuY3Rpb24gYWRkU3R5bGUob2JqLCBvcHRpb25zKSB7XFxyXFxuXFx0dmFyIHN0eWxlRWxlbWVudCwgdXBkYXRlLCByZW1vdmU7XFxyXFxuXFxyXFxuXFx0aWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XFxyXFxuXFx0XFx0dmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XFxyXFxuXFx0XFx0c3R5bGVFbGVtZW50ID0gc2luZ2xldG9uRWxlbWVudCB8fCAoc2luZ2xldG9uRWxlbWVudCA9IGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKSk7XFxyXFxuXFx0XFx0dXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlRWxlbWVudCwgc3R5bGVJbmRleCwgZmFsc2UpO1xcclxcblxcdFxcdHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZUVsZW1lbnQsIHN0eWxlSW5kZXgsIHRydWUpO1xcclxcblxcdH0gZWxzZSBpZihvYmouc291cmNlTWFwICYmXFxyXFxuXFx0XFx0dHlwZW9mIFVSTCA9PT0gXFxcImZ1bmN0aW9uXFxcIiAmJlxcclxcblxcdFxcdHR5cGVvZiBVUkwuY3JlYXRlT2JqZWN0VVJMID09PSBcXFwiZnVuY3Rpb25cXFwiICYmXFxyXFxuXFx0XFx0dHlwZW9mIFVSTC5yZXZva2VPYmplY3RVUkwgPT09IFxcXCJmdW5jdGlvblxcXCIgJiZcXHJcXG5cXHRcXHR0eXBlb2YgQmxvYiA9PT0gXFxcImZ1bmN0aW9uXFxcIiAmJlxcclxcblxcdFxcdHR5cGVvZiBidG9hID09PSBcXFwiZnVuY3Rpb25cXFwiKSB7XFxyXFxuXFx0XFx0c3R5bGVFbGVtZW50ID0gY3JlYXRlTGlua0VsZW1lbnQob3B0aW9ucyk7XFxyXFxuXFx0XFx0dXBkYXRlID0gdXBkYXRlTGluay5iaW5kKG51bGwsIHN0eWxlRWxlbWVudCk7XFxyXFxuXFx0XFx0cmVtb3ZlID0gZnVuY3Rpb24oKSB7XFxyXFxuXFx0XFx0XFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XFxyXFxuXFx0XFx0XFx0aWYoc3R5bGVFbGVtZW50LmhyZWYpXFxyXFxuXFx0XFx0XFx0XFx0VVJMLnJldm9rZU9iamVjdFVSTChzdHlsZUVsZW1lbnQuaHJlZik7XFxyXFxuXFx0XFx0fTtcXHJcXG5cXHR9IGVsc2Uge1xcclxcblxcdFxcdHN0eWxlRWxlbWVudCA9IGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKTtcXHJcXG5cXHRcXHR1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGVFbGVtZW50KTtcXHJcXG5cXHRcXHRyZW1vdmUgPSBmdW5jdGlvbigpIHtcXHJcXG5cXHRcXHRcXHRyZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcXHJcXG5cXHRcXHR9O1xcclxcblxcdH1cXHJcXG5cXHJcXG5cXHR1cGRhdGUob2JqKTtcXHJcXG5cXHJcXG5cXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUobmV3T2JqKSB7XFxyXFxuXFx0XFx0aWYobmV3T2JqKSB7XFxyXFxuXFx0XFx0XFx0aWYobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwKVxcclxcblxcdFxcdFxcdFxcdHJldHVybjtcXHJcXG5cXHRcXHRcXHR1cGRhdGUob2JqID0gbmV3T2JqKTtcXHJcXG5cXHRcXHR9IGVsc2Uge1xcclxcblxcdFxcdFxcdHJlbW92ZSgpO1xcclxcblxcdFxcdH1cXHJcXG5cXHR9O1xcclxcbn1cXHJcXG5cXHJcXG52YXIgcmVwbGFjZVRleHQgPSAoZnVuY3Rpb24gKCkge1xcclxcblxcdHZhciB0ZXh0U3RvcmUgPSBbXTtcXHJcXG5cXHJcXG5cXHRyZXR1cm4gZnVuY3Rpb24gKGluZGV4LCByZXBsYWNlbWVudCkge1xcclxcblxcdFxcdHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudDtcXHJcXG5cXHRcXHRyZXR1cm4gdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXFxcbicpO1xcclxcblxcdH07XFxyXFxufSkoKTtcXHJcXG5cXHJcXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnKHN0eWxlRWxlbWVudCwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XFxyXFxuXFx0dmFyIGNzcyA9IHJlbW92ZSA/IFxcXCJcXFwiIDogb2JqLmNzcztcXHJcXG5cXHJcXG5cXHRpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcXHJcXG5cXHRcXHRzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcyk7XFxyXFxuXFx0fSBlbHNlIHtcXHJcXG5cXHRcXHR2YXIgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcyk7XFxyXFxuXFx0XFx0dmFyIGNoaWxkTm9kZXMgPSBzdHlsZUVsZW1lbnQuY2hpbGROb2RlcztcXHJcXG5cXHRcXHRpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2luZGV4XSk7XFxyXFxuXFx0XFx0aWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XFxyXFxuXFx0XFx0XFx0c3R5bGVFbGVtZW50Lmluc2VydEJlZm9yZShjc3NOb2RlLCBjaGlsZE5vZGVzW2luZGV4XSk7XFxyXFxuXFx0XFx0fSBlbHNlIHtcXHJcXG5cXHRcXHRcXHRzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XFxyXFxuXFx0XFx0fVxcclxcblxcdH1cXHJcXG59XFxyXFxuXFxyXFxuZnVuY3Rpb24gYXBwbHlUb1RhZyhzdHlsZUVsZW1lbnQsIG9iaikge1xcclxcblxcdHZhciBjc3MgPSBvYmouY3NzO1xcclxcblxcdHZhciBtZWRpYSA9IG9iai5tZWRpYTtcXHJcXG5cXHJcXG5cXHRpZihtZWRpYSkge1xcclxcblxcdFxcdHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXFxcIm1lZGlhXFxcIiwgbWVkaWEpXFxyXFxuXFx0fVxcclxcblxcclxcblxcdGlmKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XFxyXFxuXFx0XFx0c3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcXHJcXG5cXHR9IGVsc2Uge1xcclxcblxcdFxcdHdoaWxlKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XFxyXFxuXFx0XFx0XFx0c3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcXHJcXG5cXHRcXHR9XFxyXFxuXFx0XFx0c3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xcclxcblxcdH1cXHJcXG59XFxyXFxuXFxyXFxuZnVuY3Rpb24gdXBkYXRlTGluayhsaW5rRWxlbWVudCwgb2JqKSB7XFxyXFxuXFx0dmFyIGNzcyA9IG9iai5jc3M7XFxyXFxuXFx0dmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XFxyXFxuXFxyXFxuXFx0aWYoc291cmNlTWFwKSB7XFxyXFxuXFx0XFx0Ly8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjY2MDM4NzVcXHJcXG5cXHRcXHRjc3MgKz0gXFxcIlxcXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcXFwiICsgYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSArIFxcXCIgKi9cXFwiO1xcclxcblxcdH1cXHJcXG5cXHJcXG5cXHR2YXIgYmxvYiA9IG5ldyBCbG9iKFtjc3NdLCB7IHR5cGU6IFxcXCJ0ZXh0L2Nzc1xcXCIgfSk7XFxyXFxuXFxyXFxuXFx0dmFyIG9sZFNyYyA9IGxpbmtFbGVtZW50LmhyZWY7XFxyXFxuXFxyXFxuXFx0bGlua0VsZW1lbnQuaHJlZiA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XFxyXFxuXFxyXFxuXFx0aWYob2xkU3JjKVxcclxcblxcdFxcdFVSTC5yZXZva2VPYmplY3RVUkwob2xkU3JjKTtcXHJcXG59XFxyXFxuLy8jIHNvdXJjZVVSTD1bbW9kdWxlXVxcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OHZaRG92ZDJWaUwyNXZaR1ZmYlc5a2RXeGxjeTh1TUM0eE15NHhRSE4wZVd4bExXeHZZV1JsY2k5aFpHUlRkSGxzWlhNdWFuTS9PRGN6TmlKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRzlDUVVGdlFqdEJRVU53UWp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeEZRVUZGTzBGQlEwWTdRVUZEUVR0QlFVTkJMRVZCUVVVN1FVRkRSanRCUVVOQk8wRkJRMEVzUlVGQlJUdEJRVU5HTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTEdkQ1FVRm5RaXh0UWtGQmJVSTdRVUZEYmtNN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1owSkJRV2RDTEhOQ1FVRnpRanRCUVVOMFF6dEJRVU5CTzBGQlEwRXNhMEpCUVd0Q0xESkNRVUV5UWp0QlFVTTNRenRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRU3hsUVVGbExHMUNRVUZ0UWp0QlFVTnNRenRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEdsQ1FVRnBRaXd5UWtGQk1rSTdRVUZETlVNN1FVRkRRVHRCUVVOQkxGRkJRVkVzZFVKQlFYVkNPMEZCUXk5Q08wRkJRMEU3UVVGRFFTeEhRVUZITzBGQlEwZzdRVUZEUVN4cFFrRkJhVUlzZFVKQlFYVkNPMEZCUTNoRE8wRkJRMEU3UVVGRFFTd3lRa0ZCTWtJN1FVRkRNMEk3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxHVkJRV1VzYVVKQlFXbENPMEZCUTJoRE8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4alFVRmpPMEZCUTJRN1FVRkRRU3huUTBGQlowTXNjMEpCUVhOQ08wRkJRM1JFTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1IwRkJSenRCUVVOSU8wRkJRMEVzUjBGQlJ6dEJRVU5JTzBGQlEwRTdRVUZEUVR0QlFVTkJMRVZCUVVVN1FVRkRSanRCUVVOQkxFVkJRVVU3UVVGRFJqdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4RlFVRkZPMEZCUTBZN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUlVGQlJUdEJRVU5HTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUjBGQlJ6dEJRVU5JTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hEUVVGRE96dEJRVVZFTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQkxFVkJRVVU3UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1IwRkJSenRCUVVOSU8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQkxFVkJRVVU3UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRU3gxUkVGQmRVUTdRVUZEZGtRN08wRkJSVUVzTmtKQlFUWkNMRzFDUVVGdFFqczdRVUZGYUVRN08wRkJSVUU3TzBGQlJVRTdRVUZEUVR0QlFVTkJJaXdpWm1sc1pTSTZJakV1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SXZLbHh5WEc1Y2RFMUpWQ0JNYVdObGJuTmxJR2gwZEhBNkx5OTNkM2N1YjNCbGJuTnZkWEpqWlM1dmNtY3ZiR2xqWlc1elpYTXZiV2wwTFd4cFkyVnVjMlV1Y0dod1hISmNibHgwUVhWMGFHOXlJRlJ2WW1saGN5QkxiM0J3WlhKeklFQnpiMnR5WVZ4eVhHNHFMMXh5WEc1MllYSWdjM1I1YkdWelNXNUViMjBnUFNCN2ZTeGNjbHh1WEhSdFpXMXZhWHBsSUQwZ1puVnVZM1JwYjI0b1ptNHBJSHRjY2x4dVhIUmNkSFpoY2lCdFpXMXZPMXh5WEc1Y2RGeDBjbVYwZFhKdUlHWjFibU4wYVc5dUlDZ3BJSHRjY2x4dVhIUmNkRngwYVdZZ0tIUjVjR1Z2WmlCdFpXMXZJRDA5UFNCY0luVnVaR1ZtYVc1bFpGd2lLU0J0WlcxdklEMGdabTR1WVhCd2JIa29kR2hwY3l3Z1lYSm5kVzFsYm5SektUdGNjbHh1WEhSY2RGeDBjbVYwZFhKdUlHMWxiVzg3WEhKY2JseDBYSFI5TzF4eVhHNWNkSDBzWEhKY2JseDBhWE5QYkdSSlJTQTlJRzFsYlc5cGVtVW9ablZ1WTNScGIyNG9LU0I3WEhKY2JseDBYSFJ5WlhSMWNtNGdMMjF6YVdVZ1d6WXRPVjFjWEdJdkxuUmxjM1FvZDJsdVpHOTNMbTVoZG1sbllYUnZjaTUxYzJWeVFXZGxiblF1ZEc5TWIzZGxja05oYzJVb0tTazdYSEpjYmx4MGZTa3NYSEpjYmx4MFoyVjBTR1ZoWkVWc1pXMWxiblFnUFNCdFpXMXZhWHBsS0daMWJtTjBhVzl1SUNncElIdGNjbHh1WEhSY2RISmxkSFZ5YmlCa2IyTjFiV1Z1ZEM1b1pXRmtJSHg4SUdSdlkzVnRaVzUwTG1kbGRFVnNaVzFsYm5SelFubFVZV2RPWVcxbEtGd2lhR1ZoWkZ3aUtWc3dYVHRjY2x4dVhIUjlLU3hjY2x4dVhIUnphVzVuYkdWMGIyNUZiR1Z0Wlc1MElEMGdiblZzYkN4Y2NseHVYSFJ6YVc1bmJHVjBiMjVEYjNWdWRHVnlJRDBnTUN4Y2NseHVYSFJ6ZEhsc1pVVnNaVzFsYm5SelNXNXpaWEowWldSQmRGUnZjQ0E5SUZ0ZE8xeHlYRzVjY2x4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2Ymloc2FYTjBMQ0J2Y0hScGIyNXpLU0I3WEhKY2JseDBhV1lvZEhsd1pXOW1JRVJGUWxWSElDRTlQU0JjSW5WdVpHVm1hVzVsWkZ3aUlDWW1JRVJGUWxWSEtTQjdYSEpjYmx4MFhIUnBaaWgwZVhCbGIyWWdaRzlqZFcxbGJuUWdJVDA5SUZ3aWIySnFaV04wWENJcElIUm9jbTkzSUc1bGR5QkZjbkp2Y2loY0lsUm9aU0J6ZEhsc1pTMXNiMkZrWlhJZ1kyRnVibTkwSUdKbElIVnpaV1FnYVc0Z1lTQnViMjR0WW5KdmQzTmxjaUJsYm5acGNtOXViV1Z1ZEZ3aUtUdGNjbHh1WEhSOVhISmNibHh5WEc1Y2RHOXdkR2x2Ym5NZ1BTQnZjSFJwYjI1eklIeDhJSHQ5TzF4eVhHNWNkQzh2SUVadmNtTmxJSE5wYm1kc1pTMTBZV2NnYzI5c2RYUnBiMjRnYjI0Z1NVVTJMVGtzSUhkb2FXTm9JR2hoY3lCaElHaGhjbVFnYkdsdGFYUWdiMjRnZEdobElDTWdiMllnUEhOMGVXeGxQbHh5WEc1Y2RDOHZJSFJoWjNNZ2FYUWdkMmxzYkNCaGJHeHZkeUJ2YmlCaElIQmhaMlZjY2x4dVhIUnBaaUFvZEhsd1pXOW1JRzl3ZEdsdmJuTXVjMmx1WjJ4bGRHOXVJRDA5UFNCY0luVnVaR1ZtYVc1bFpGd2lLU0J2Y0hScGIyNXpMbk5wYm1kc1pYUnZiaUE5SUdselQyeGtTVVVvS1R0Y2NseHVYSEpjYmx4MEx5OGdRbmtnWkdWbVlYVnNkQ3dnWVdSa0lEeHpkSGxzWlQ0Z2RHRm5jeUIwYnlCMGFHVWdZbTkwZEc5dElHOW1JRHhvWldGa1BpNWNjbHh1WEhScFppQW9kSGx3Wlc5bUlHOXdkR2x2Ym5NdWFXNXpaWEowUVhRZ1BUMDlJRndpZFc1a1pXWnBibVZrWENJcElHOXdkR2x2Ym5NdWFXNXpaWEowUVhRZ1BTQmNJbUp2ZEhSdmJWd2lPMXh5WEc1Y2NseHVYSFIyWVhJZ2MzUjViR1Z6SUQwZ2JHbHpkRlJ2VTNSNWJHVnpLR3hwYzNRcE8xeHlYRzVjZEdGa1pGTjBlV3hsYzFSdlJHOXRLSE4wZVd4bGN5d2diM0IwYVc5dWN5azdYSEpjYmx4eVhHNWNkSEpsZEhWeWJpQm1kVzVqZEdsdmJpQjFjR1JoZEdVb2JtVjNUR2x6ZENrZ2UxeHlYRzVjZEZ4MGRtRnlJRzFoZVZKbGJXOTJaU0E5SUZ0ZE8xeHlYRzVjZEZ4MFptOXlLSFpoY2lCcElEMGdNRHNnYVNBOElITjBlV3hsY3k1c1pXNW5kR2c3SUdrckt5a2dlMXh5WEc1Y2RGeDBYSFIyWVhJZ2FYUmxiU0E5SUhOMGVXeGxjMXRwWFR0Y2NseHVYSFJjZEZ4MGRtRnlJR1J2YlZOMGVXeGxJRDBnYzNSNWJHVnpTVzVFYjIxYmFYUmxiUzVwWkYwN1hISmNibHgwWEhSY2RHUnZiVk4wZVd4bExuSmxabk10TFR0Y2NseHVYSFJjZEZ4MGJXRjVVbVZ0YjNabExuQjFjMmdvWkc5dFUzUjViR1VwTzF4eVhHNWNkRngwZlZ4eVhHNWNkRngwYVdZb2JtVjNUR2x6ZENrZ2UxeHlYRzVjZEZ4MFhIUjJZWElnYm1WM1UzUjViR1Z6SUQwZ2JHbHpkRlJ2VTNSNWJHVnpLRzVsZDB4cGMzUXBPMXh5WEc1Y2RGeDBYSFJoWkdSVGRIbHNaWE5VYjBSdmJTaHVaWGRUZEhsc1pYTXNJRzl3ZEdsdmJuTXBPMXh5WEc1Y2RGeDBmVnh5WEc1Y2RGeDBabTl5S0haaGNpQnBJRDBnTURzZ2FTQThJRzFoZVZKbGJXOTJaUzVzWlc1bmRHZzdJR2tyS3lrZ2UxeHlYRzVjZEZ4MFhIUjJZWElnWkc5dFUzUjViR1VnUFNCdFlYbFNaVzF2ZG1WYmFWMDdYSEpjYmx4MFhIUmNkR2xtS0dSdmJWTjBlV3hsTG5KbFpuTWdQVDA5SURBcElIdGNjbHh1WEhSY2RGeDBYSFJtYjNJb2RtRnlJR29nUFNBd095QnFJRHdnWkc5dFUzUjViR1V1Y0dGeWRITXViR1Z1WjNSb095QnFLeXNwWEhKY2JseDBYSFJjZEZ4MFhIUmtiMjFUZEhsc1pTNXdZWEowYzF0cVhTZ3BPMXh5WEc1Y2RGeDBYSFJjZEdSbGJHVjBaU0J6ZEhsc1pYTkpia1J2YlZ0a2IyMVRkSGxzWlM1cFpGMDdYSEpjYmx4MFhIUmNkSDFjY2x4dVhIUmNkSDFjY2x4dVhIUjlPMXh5WEc1OVhISmNibHh5WEc1bWRXNWpkR2x2YmlCaFpHUlRkSGxzWlhOVWIwUnZiU2h6ZEhsc1pYTXNJRzl3ZEdsdmJuTXBJSHRjY2x4dVhIUm1iM0lvZG1GeUlHa2dQU0F3T3lCcElEd2djM1I1YkdWekxteGxibWQwYURzZ2FTc3JLU0I3WEhKY2JseDBYSFIyWVhJZ2FYUmxiU0E5SUhOMGVXeGxjMXRwWFR0Y2NseHVYSFJjZEhaaGNpQmtiMjFUZEhsc1pTQTlJSE4wZVd4bGMwbHVSRzl0VzJsMFpXMHVhV1JkTzF4eVhHNWNkRngwYVdZb1pHOXRVM1I1YkdVcElIdGNjbHh1WEhSY2RGeDBaRzl0VTNSNWJHVXVjbVZtY3lzck8xeHlYRzVjZEZ4MFhIUm1iM0lvZG1GeUlHb2dQU0F3T3lCcUlEd2daRzl0VTNSNWJHVXVjR0Z5ZEhNdWJHVnVaM1JvT3lCcUt5c3BJSHRjY2x4dVhIUmNkRngwWEhSa2IyMVRkSGxzWlM1d1lYSjBjMXRxWFNocGRHVnRMbkJoY25SelcycGRLVHRjY2x4dVhIUmNkRngwZlZ4eVhHNWNkRngwWEhSbWIzSW9PeUJxSUR3Z2FYUmxiUzV3WVhKMGN5NXNaVzVuZEdnN0lHb3JLeWtnZTF4eVhHNWNkRngwWEhSY2RHUnZiVk4wZVd4bExuQmhjblJ6TG5CMWMyZ29ZV1JrVTNSNWJHVW9hWFJsYlM1d1lYSjBjMXRxWFN3Z2IzQjBhVzl1Y3lrcE8xeHlYRzVjZEZ4MFhIUjlYSEpjYmx4MFhIUjlJR1ZzYzJVZ2UxeHlYRzVjZEZ4MFhIUjJZWElnY0dGeWRITWdQU0JiWFR0Y2NseHVYSFJjZEZ4MFptOXlLSFpoY2lCcUlEMGdNRHNnYWlBOElHbDBaVzB1Y0dGeWRITXViR1Z1WjNSb095QnFLeXNwSUh0Y2NseHVYSFJjZEZ4MFhIUndZWEowY3k1d2RYTm9LR0ZrWkZOMGVXeGxLR2wwWlcwdWNHRnlkSE5iYWwwc0lHOXdkR2x2Ym5NcEtUdGNjbHh1WEhSY2RGeDBmVnh5WEc1Y2RGeDBYSFJ6ZEhsc1pYTkpia1J2YlZ0cGRHVnRMbWxrWFNBOUlIdHBaRG9nYVhSbGJTNXBaQ3dnY21WbWN6b2dNU3dnY0dGeWRITTZJSEJoY25SemZUdGNjbHh1WEhSY2RIMWNjbHh1WEhSOVhISmNibjFjY2x4dVhISmNibVoxYm1OMGFXOXVJR3hwYzNSVWIxTjBlV3hsY3loc2FYTjBLU0I3WEhKY2JseDBkbUZ5SUhOMGVXeGxjeUE5SUZ0ZE8xeHlYRzVjZEhaaGNpQnVaWGRUZEhsc1pYTWdQU0I3ZlR0Y2NseHVYSFJtYjNJb2RtRnlJR2tnUFNBd095QnBJRHdnYkdsemRDNXNaVzVuZEdnN0lHa3JLeWtnZTF4eVhHNWNkRngwZG1GeUlHbDBaVzBnUFNCc2FYTjBXMmxkTzF4eVhHNWNkRngwZG1GeUlHbGtJRDBnYVhSbGJWc3dYVHRjY2x4dVhIUmNkSFpoY2lCamMzTWdQU0JwZEdWdFd6RmRPMXh5WEc1Y2RGeDBkbUZ5SUcxbFpHbGhJRDBnYVhSbGJWc3lYVHRjY2x4dVhIUmNkSFpoY2lCemIzVnlZMlZOWVhBZ1BTQnBkR1Z0V3pOZE8xeHlYRzVjZEZ4MGRtRnlJSEJoY25RZ1BTQjdZM056T2lCamMzTXNJRzFsWkdsaE9pQnRaV1JwWVN3Z2MyOTFjbU5sVFdGd09pQnpiM1Z5WTJWTllYQjlPMXh5WEc1Y2RGeDBhV1lvSVc1bGQxTjBlV3hsYzF0cFpGMHBYSEpjYmx4MFhIUmNkSE4wZVd4bGN5NXdkWE5vS0c1bGQxTjBlV3hsYzF0cFpGMGdQU0I3YVdRNklHbGtMQ0J3WVhKMGN6b2dXM0JoY25SZGZTazdYSEpjYmx4MFhIUmxiSE5sWEhKY2JseDBYSFJjZEc1bGQxTjBlV3hsYzF0cFpGMHVjR0Z5ZEhNdWNIVnphQ2h3WVhKMEtUdGNjbHh1WEhSOVhISmNibHgwY21WMGRYSnVJSE4wZVd4bGN6dGNjbHh1ZlZ4eVhHNWNjbHh1Wm5WdVkzUnBiMjRnYVc1elpYSjBVM1I1YkdWRmJHVnRaVzUwS0c5d2RHbHZibk1zSUhOMGVXeGxSV3hsYldWdWRDa2dlMXh5WEc1Y2RIWmhjaUJvWldGa0lEMGdaMlYwU0dWaFpFVnNaVzFsYm5Rb0tUdGNjbHh1WEhSMllYSWdiR0Z6ZEZOMGVXeGxSV3hsYldWdWRFbHVjMlZ5ZEdWa1FYUlViM0FnUFNCemRIbHNaVVZzWlcxbGJuUnpTVzV6WlhKMFpXUkJkRlJ2Y0Z0emRIbHNaVVZzWlcxbGJuUnpTVzV6WlhKMFpXUkJkRlJ2Y0M1c1pXNW5kR2dnTFNBeFhUdGNjbHh1WEhScFppQW9iM0IwYVc5dWN5NXBibk5sY25SQmRDQTlQVDBnWENKMGIzQmNJaWtnZTF4eVhHNWNkRngwYVdZb0lXeGhjM1JUZEhsc1pVVnNaVzFsYm5SSmJuTmxjblJsWkVGMFZHOXdLU0I3WEhKY2JseDBYSFJjZEdobFlXUXVhVzV6WlhKMFFtVm1iM0psS0hOMGVXeGxSV3hsYldWdWRDd2dhR1ZoWkM1bWFYSnpkRU5vYVd4a0tUdGNjbHh1WEhSY2RIMGdaV3h6WlNCcFppaHNZWE4wVTNSNWJHVkZiR1Z0Wlc1MFNXNXpaWEowWldSQmRGUnZjQzV1WlhoMFUybGliR2x1WnlrZ2UxeHlYRzVjZEZ4MFhIUm9aV0ZrTG1sdWMyVnlkRUpsWm05eVpTaHpkSGxzWlVWc1pXMWxiblFzSUd4aGMzUlRkSGxzWlVWc1pXMWxiblJKYm5ObGNuUmxaRUYwVkc5d0xtNWxlSFJUYVdKc2FXNW5LVHRjY2x4dVhIUmNkSDBnWld4elpTQjdYSEpjYmx4MFhIUmNkR2hsWVdRdVlYQndaVzVrUTJocGJHUW9jM1I1YkdWRmJHVnRaVzUwS1R0Y2NseHVYSFJjZEgxY2NseHVYSFJjZEhOMGVXeGxSV3hsYldWdWRITkpibk5sY25SbFpFRjBWRzl3TG5CMWMyZ29jM1I1YkdWRmJHVnRaVzUwS1R0Y2NseHVYSFI5SUdWc2MyVWdhV1lnS0c5d2RHbHZibk11YVc1elpYSjBRWFFnUFQwOUlGd2lZbTkwZEc5dFhDSXBJSHRjY2x4dVhIUmNkR2hsWVdRdVlYQndaVzVrUTJocGJHUW9jM1I1YkdWRmJHVnRaVzUwS1R0Y2NseHVYSFI5SUdWc2MyVWdlMXh5WEc1Y2RGeDBkR2h5YjNjZ2JtVjNJRVZ5Y205eUtGd2lTVzUyWVd4cFpDQjJZV3gxWlNCbWIzSWdjR0Z5WVcxbGRHVnlJQ2RwYm5ObGNuUkJkQ2N1SUUxMWMzUWdZbVVnSjNSdmNDY2diM0lnSjJKdmRIUnZiU2N1WENJcE8xeHlYRzVjZEgxY2NseHVmVnh5WEc1Y2NseHVablZ1WTNScGIyNGdjbVZ0YjNabFUzUjViR1ZGYkdWdFpXNTBLSE4wZVd4bFJXeGxiV1Z1ZENrZ2UxeHlYRzVjZEhOMGVXeGxSV3hsYldWdWRDNXdZWEpsYm5ST2IyUmxMbkpsYlc5MlpVTm9hV3hrS0hOMGVXeGxSV3hsYldWdWRDazdYSEpjYmx4MGRtRnlJR2xrZUNBOUlITjBlV3hsUld4bGJXVnVkSE5KYm5ObGNuUmxaRUYwVkc5d0xtbHVaR1Y0VDJZb2MzUjViR1ZGYkdWdFpXNTBLVHRjY2x4dVhIUnBaaWhwWkhnZ1BqMGdNQ2tnZTF4eVhHNWNkRngwYzNSNWJHVkZiR1Z0Wlc1MGMwbHVjMlZ5ZEdWa1FYUlViM0F1YzNCc2FXTmxLR2xrZUN3Z01TazdYSEpjYmx4MGZWeHlYRzU5WEhKY2JseHlYRzVtZFc1amRHbHZiaUJqY21WaGRHVlRkSGxzWlVWc1pXMWxiblFvYjNCMGFXOXVjeWtnZTF4eVhHNWNkSFpoY2lCemRIbHNaVVZzWlcxbGJuUWdQU0JrYjJOMWJXVnVkQzVqY21WaGRHVkZiR1Z0Wlc1MEtGd2ljM1I1YkdWY0lpazdYSEpjYmx4MGMzUjViR1ZGYkdWdFpXNTBMblI1Y0dVZ1BTQmNJblJsZUhRdlkzTnpYQ0k3WEhKY2JseDBhVzV6WlhKMFUzUjViR1ZGYkdWdFpXNTBLRzl3ZEdsdmJuTXNJSE4wZVd4bFJXeGxiV1Z1ZENrN1hISmNibHgwY21WMGRYSnVJSE4wZVd4bFJXeGxiV1Z1ZER0Y2NseHVmVnh5WEc1Y2NseHVablZ1WTNScGIyNGdZM0psWVhSbFRHbHVhMFZzWlcxbGJuUW9iM0IwYVc5dWN5a2dlMXh5WEc1Y2RIWmhjaUJzYVc1clJXeGxiV1Z1ZENBOUlHUnZZM1Z0Wlc1MExtTnlaV0YwWlVWc1pXMWxiblFvWENKc2FXNXJYQ0lwTzF4eVhHNWNkR3hwYm10RmJHVnRaVzUwTG5KbGJDQTlJRndpYzNSNWJHVnphR1ZsZEZ3aU8xeHlYRzVjZEdsdWMyVnlkRk4wZVd4bFJXeGxiV1Z1ZENodmNIUnBiMjV6TENCc2FXNXJSV3hsYldWdWRDazdYSEpjYmx4MGNtVjBkWEp1SUd4cGJtdEZiR1Z0Wlc1ME8xeHlYRzU5WEhKY2JseHlYRzVtZFc1amRHbHZiaUJoWkdSVGRIbHNaU2h2WW1vc0lHOXdkR2x2Ym5NcElIdGNjbHh1WEhSMllYSWdjM1I1YkdWRmJHVnRaVzUwTENCMWNHUmhkR1VzSUhKbGJXOTJaVHRjY2x4dVhISmNibHgwYVdZZ0tHOXdkR2x2Ym5NdWMybHVaMnhsZEc5dUtTQjdYSEpjYmx4MFhIUjJZWElnYzNSNWJHVkpibVJsZUNBOUlITnBibWRzWlhSdmJrTnZkVzUwWlhJckt6dGNjbHh1WEhSY2RITjBlV3hsUld4bGJXVnVkQ0E5SUhOcGJtZHNaWFJ2YmtWc1pXMWxiblFnZkh3Z0tITnBibWRzWlhSdmJrVnNaVzFsYm5RZ1BTQmpjbVZoZEdWVGRIbHNaVVZzWlcxbGJuUW9iM0IwYVc5dWN5a3BPMXh5WEc1Y2RGeDBkWEJrWVhSbElEMGdZWEJ3YkhsVWIxTnBibWRzWlhSdmJsUmhaeTVpYVc1a0tHNTFiR3dzSUhOMGVXeGxSV3hsYldWdWRDd2djM1I1YkdWSmJtUmxlQ3dnWm1Gc2MyVXBPMXh5WEc1Y2RGeDBjbVZ0YjNabElEMGdZWEJ3YkhsVWIxTnBibWRzWlhSdmJsUmhaeTVpYVc1a0tHNTFiR3dzSUhOMGVXeGxSV3hsYldWdWRDd2djM1I1YkdWSmJtUmxlQ3dnZEhKMVpTazdYSEpjYmx4MGZTQmxiSE5sSUdsbUtHOWlhaTV6YjNWeVkyVk5ZWEFnSmlaY2NseHVYSFJjZEhSNWNHVnZaaUJWVWt3Z1BUMDlJRndpWm5WdVkzUnBiMjVjSWlBbUpseHlYRzVjZEZ4MGRIbHdaVzltSUZWU1RDNWpjbVZoZEdWUFltcGxZM1JWVWt3Z1BUMDlJRndpWm5WdVkzUnBiMjVjSWlBbUpseHlYRzVjZEZ4MGRIbHdaVzltSUZWU1RDNXlaWFp2YTJWUFltcGxZM1JWVWt3Z1BUMDlJRndpWm5WdVkzUnBiMjVjSWlBbUpseHlYRzVjZEZ4MGRIbHdaVzltSUVKc2IySWdQVDA5SUZ3aVpuVnVZM1JwYjI1Y0lpQW1KbHh5WEc1Y2RGeDBkSGx3Wlc5bUlHSjBiMkVnUFQwOUlGd2lablZ1WTNScGIyNWNJaWtnZTF4eVhHNWNkRngwYzNSNWJHVkZiR1Z0Wlc1MElEMGdZM0psWVhSbFRHbHVhMFZzWlcxbGJuUW9iM0IwYVc5dWN5azdYSEpjYmx4MFhIUjFjR1JoZEdVZ1BTQjFjR1JoZEdWTWFXNXJMbUpwYm1Rb2JuVnNiQ3dnYzNSNWJHVkZiR1Z0Wlc1MEtUdGNjbHh1WEhSY2RISmxiVzkyWlNBOUlHWjFibU4wYVc5dUtDa2dlMXh5WEc1Y2RGeDBYSFJ5WlcxdmRtVlRkSGxzWlVWc1pXMWxiblFvYzNSNWJHVkZiR1Z0Wlc1MEtUdGNjbHh1WEhSY2RGeDBhV1lvYzNSNWJHVkZiR1Z0Wlc1MExtaHlaV1lwWEhKY2JseDBYSFJjZEZ4MFZWSk1MbkpsZG05clpVOWlhbVZqZEZWU1RDaHpkSGxzWlVWc1pXMWxiblF1YUhKbFppazdYSEpjYmx4MFhIUjlPMXh5WEc1Y2RIMGdaV3h6WlNCN1hISmNibHgwWEhSemRIbHNaVVZzWlcxbGJuUWdQU0JqY21WaGRHVlRkSGxzWlVWc1pXMWxiblFvYjNCMGFXOXVjeWs3WEhKY2JseDBYSFIxY0dSaGRHVWdQU0JoY0hCc2VWUnZWR0ZuTG1KcGJtUW9iblZzYkN3Z2MzUjViR1ZGYkdWdFpXNTBLVHRjY2x4dVhIUmNkSEpsYlc5MlpTQTlJR1oxYm1OMGFXOXVLQ2tnZTF4eVhHNWNkRngwWEhSeVpXMXZkbVZUZEhsc1pVVnNaVzFsYm5Rb2MzUjViR1ZGYkdWdFpXNTBLVHRjY2x4dVhIUmNkSDA3WEhKY2JseDBmVnh5WEc1Y2NseHVYSFIxY0dSaGRHVW9iMkpxS1R0Y2NseHVYSEpjYmx4MGNtVjBkWEp1SUdaMWJtTjBhVzl1SUhWd1pHRjBaVk4wZVd4bEtHNWxkMDlpYWlrZ2UxeHlYRzVjZEZ4MGFXWW9ibVYzVDJKcUtTQjdYSEpjYmx4MFhIUmNkR2xtS0c1bGQwOWlhaTVqYzNNZ1BUMDlJRzlpYWk1amMzTWdKaVlnYm1WM1QySnFMbTFsWkdsaElEMDlQU0J2WW1vdWJXVmthV0VnSmlZZ2JtVjNUMkpxTG5OdmRYSmpaVTFoY0NBOVBUMGdiMkpxTG5OdmRYSmpaVTFoY0NsY2NseHVYSFJjZEZ4MFhIUnlaWFIxY200N1hISmNibHgwWEhSY2RIVndaR0YwWlNodlltb2dQU0J1WlhkUFltb3BPMXh5WEc1Y2RGeDBmU0JsYkhObElIdGNjbHh1WEhSY2RGeDBjbVZ0YjNabEtDazdYSEpjYmx4MFhIUjlYSEpjYmx4MGZUdGNjbHh1ZlZ4eVhHNWNjbHh1ZG1GeUlISmxjR3hoWTJWVVpYaDBJRDBnS0daMWJtTjBhVzl1SUNncElIdGNjbHh1WEhSMllYSWdkR1Y0ZEZOMGIzSmxJRDBnVzEwN1hISmNibHh5WEc1Y2RISmxkSFZ5YmlCbWRXNWpkR2x2YmlBb2FXNWtaWGdzSUhKbGNHeGhZMlZ0Wlc1MEtTQjdYSEpjYmx4MFhIUjBaWGgwVTNSdmNtVmJhVzVrWlhoZElEMGdjbVZ3YkdGalpXMWxiblE3WEhKY2JseDBYSFJ5WlhSMWNtNGdkR1Y0ZEZOMGIzSmxMbVpwYkhSbGNpaENiMjlzWldGdUtTNXFiMmx1S0NkY1hHNG5LVHRjY2x4dVhIUjlPMXh5WEc1OUtTZ3BPMXh5WEc1Y2NseHVablZ1WTNScGIyNGdZWEJ3YkhsVWIxTnBibWRzWlhSdmJsUmhaeWh6ZEhsc1pVVnNaVzFsYm5Rc0lHbHVaR1Y0TENCeVpXMXZkbVVzSUc5aWFpa2dlMXh5WEc1Y2RIWmhjaUJqYzNNZ1BTQnlaVzF2ZG1VZ1B5QmNJbHdpSURvZ2IySnFMbU56Y3p0Y2NseHVYSEpjYmx4MGFXWWdLSE4wZVd4bFJXeGxiV1Z1ZEM1emRIbHNaVk5vWldWMEtTQjdYSEpjYmx4MFhIUnpkSGxzWlVWc1pXMWxiblF1YzNSNWJHVlRhR1ZsZEM1amMzTlVaWGgwSUQwZ2NtVndiR0ZqWlZSbGVIUW9hVzVrWlhnc0lHTnpjeWs3WEhKY2JseDBmU0JsYkhObElIdGNjbHh1WEhSY2RIWmhjaUJqYzNOT2IyUmxJRDBnWkc5amRXMWxiblF1WTNKbFlYUmxWR1Y0ZEU1dlpHVW9ZM056S1R0Y2NseHVYSFJjZEhaaGNpQmphR2xzWkU1dlpHVnpJRDBnYzNSNWJHVkZiR1Z0Wlc1MExtTm9hV3hrVG05a1pYTTdYSEpjYmx4MFhIUnBaaUFvWTJocGJHUk9iMlJsYzF0cGJtUmxlRjBwSUhOMGVXeGxSV3hsYldWdWRDNXlaVzF2ZG1WRGFHbHNaQ2hqYUdsc1pFNXZaR1Z6VzJsdVpHVjRYU2s3WEhKY2JseDBYSFJwWmlBb1kyaHBiR1JPYjJSbGN5NXNaVzVuZEdncElIdGNjbHh1WEhSY2RGeDBjM1I1YkdWRmJHVnRaVzUwTG1sdWMyVnlkRUpsWm05eVpTaGpjM05PYjJSbExDQmphR2xzWkU1dlpHVnpXMmx1WkdWNFhTazdYSEpjYmx4MFhIUjlJR1ZzYzJVZ2UxeHlYRzVjZEZ4MFhIUnpkSGxzWlVWc1pXMWxiblF1WVhCd1pXNWtRMmhwYkdRb1kzTnpUbTlrWlNrN1hISmNibHgwWEhSOVhISmNibHgwZlZ4eVhHNTlYSEpjYmx4eVhHNW1kVzVqZEdsdmJpQmhjSEJzZVZSdlZHRm5LSE4wZVd4bFJXeGxiV1Z1ZEN3Z2IySnFLU0I3WEhKY2JseDBkbUZ5SUdOemN5QTlJRzlpYWk1amMzTTdYSEpjYmx4MGRtRnlJRzFsWkdsaElEMGdiMkpxTG0xbFpHbGhPMXh5WEc1Y2NseHVYSFJwWmlodFpXUnBZU2tnZTF4eVhHNWNkRngwYzNSNWJHVkZiR1Z0Wlc1MExuTmxkRUYwZEhKcFluVjBaU2hjSW0xbFpHbGhYQ0lzSUcxbFpHbGhLVnh5WEc1Y2RIMWNjbHh1WEhKY2JseDBhV1lvYzNSNWJHVkZiR1Z0Wlc1MExuTjBlV3hsVTJobFpYUXBJSHRjY2x4dVhIUmNkSE4wZVd4bFJXeGxiV1Z1ZEM1emRIbHNaVk5vWldWMExtTnpjMVJsZUhRZ1BTQmpjM003WEhKY2JseDBmU0JsYkhObElIdGNjbHh1WEhSY2RIZG9hV3hsS0hOMGVXeGxSV3hsYldWdWRDNW1hWEp6ZEVOb2FXeGtLU0I3WEhKY2JseDBYSFJjZEhOMGVXeGxSV3hsYldWdWRDNXlaVzF2ZG1WRGFHbHNaQ2h6ZEhsc1pVVnNaVzFsYm5RdVptbHljM1JEYUdsc1pDazdYSEpjYmx4MFhIUjlYSEpjYmx4MFhIUnpkSGxzWlVWc1pXMWxiblF1WVhCd1pXNWtRMmhwYkdRb1pHOWpkVzFsYm5RdVkzSmxZWFJsVkdWNGRFNXZaR1VvWTNOektTazdYSEpjYmx4MGZWeHlYRzU5WEhKY2JseHlYRzVtZFc1amRHbHZiaUIxY0dSaGRHVk1hVzVyS0d4cGJtdEZiR1Z0Wlc1MExDQnZZbW9wSUh0Y2NseHVYSFIyWVhJZ1kzTnpJRDBnYjJKcUxtTnpjenRjY2x4dVhIUjJZWElnYzI5MWNtTmxUV0Z3SUQwZ2IySnFMbk52ZFhKalpVMWhjRHRjY2x4dVhISmNibHgwYVdZb2MyOTFjbU5sVFdGd0tTQjdYSEpjYmx4MFhIUXZMeUJvZEhSd09pOHZjM1JoWTJ0dmRtVnlabXh2ZHk1amIyMHZZUzh5TmpZd016ZzNOVnh5WEc1Y2RGeDBZM056SUNzOUlGd2lYRnh1THlvaklITnZkWEpqWlUxaGNIQnBibWRWVWt3OVpHRjBZVHBoY0hCc2FXTmhkR2x2Ymk5cWMyOXVPMkpoYzJVMk5DeGNJaUFySUdKMGIyRW9kVzVsYzJOaGNHVW9aVzVqYjJSbFZWSkpRMjl0Y0c5dVpXNTBLRXBUVDA0dWMzUnlhVzVuYVdaNUtITnZkWEpqWlUxaGNDa3BLU2tnS3lCY0lpQXFMMXdpTzF4eVhHNWNkSDFjY2x4dVhISmNibHgwZG1GeUlHSnNiMklnUFNCdVpYY2dRbXh2WWloYlkzTnpYU3dnZXlCMGVYQmxPaUJjSW5SbGVIUXZZM056WENJZ2ZTazdYSEpjYmx4eVhHNWNkSFpoY2lCdmJHUlRjbU1nUFNCc2FXNXJSV3hsYldWdWRDNW9jbVZtTzF4eVhHNWNjbHh1WEhSc2FXNXJSV3hsYldWdWRDNW9jbVZtSUQwZ1ZWSk1MbU55WldGMFpVOWlhbVZqZEZWU1RDaGliRzlpS1R0Y2NseHVYSEpjYmx4MGFXWW9iMnhrVTNKaktWeHlYRzVjZEZ4MFZWSk1MbkpsZG05clpVOWlhbVZqZEZWU1RDaHZiR1JUY21NcE8xeHlYRzU5WEhKY2JseHVYRzVjYmk4dkx5OHZMeTh2THk4dkx5OHZMeTh2TDF4dUx5OGdWMFZDVUVGRFN5QkdUMDlVUlZKY2JpOHZJR1E2TDNkbFlpOXViMlJsWDIxdlpIVnNaWE12TGpBdU1UTXVNVUJ6ZEhsc1pTMXNiMkZrWlhJdllXUmtVM1I1YkdWekxtcHpYRzR2THlCdGIyUjFiR1VnYVdRZ1BTQXhYRzR2THlCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUNKZExDSnpiM1Z5WTJWU2IyOTBJam9pSW4wPVxcbi8vIyBzb3VyY2VVUkw9d2VicGFjay1pbnRlcm5hbDovLy8xXFxuXCIpO1xuXG4vKioqLyB9KSxcbi8qIDIgKi8sXG4vKiAzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuZXZhbChcIlxcblxcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcXFwiX19lc01vZHVsZVxcXCIsIHtcXG4gIHZhbHVlOiB0cnVlXFxufSk7XFxuXFxudmFyIF9FdmVudCRleHRlbmQ7XFxuXFxudmFyIF9jb3JlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcXG5cXG52YXIgX3NtaWxlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2Mik7XFxuXFxudmFyIF9zbWlsZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zbWlsZSk7XFxuXFxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cXG5cXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxcblxcbmZ1bmN0aW9uIF9vYmplY3REZXN0cnVjdHVyaW5nRW1wdHkob2JqKSB7IGlmIChvYmogPT0gbnVsbCkgdGhyb3cgbmV3IFR5cGVFcnJvcihcXFwiQ2Fubm90IGRlc3RydWN0dXJlIHVuZGVmaW5lZFxcXCIpOyB9XFxuXFxuZXhwb3J0cy5kZWZhdWx0ID0gX2NvcmUuRXZlbnQuZXh0ZW5kKChfRXZlbnQkZXh0ZW5kID0ge1xcbiAgaW5pdDogZnVuY3Rpb24gaW5pdChwcm9wcykge1xcbiAgICB0aGlzLl9zdXBlcih0cnVlKTtcXG5cXG4gICAgdGhpcy5kZWZhdWx0X29wdGlvbnMgPSB7XFxuICAgICAgJGNvbnRhaW5lcjogJChkb2N1bWVudC5ib2R5KSxcXG4gICAgICAkZWxfYWN0aXZlOiAnIz13PScsXFxuICAgICAgdGFnX25hbWU6ICdlZGl0b3Itb3ZvJyxcXG4gICAgICB6X2luZGV4OiAxMDAsXFxuICAgICAgY29uZmlnOiB7fSxcXG4gICAgICBjb252ZXJ0X2ludG9fZW50aXRpZXM6IGZhbHNlXFxuICAgIH07XFxuXFxuICAgIHByb3BzID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5kZWZhdWx0X29wdGlvbnMsIHByb3BzKTtcXG5cXG4gICAgdGhpcy5vcHRpb25zID0gcHJvcHM7XFxuXFxuICAgIHRoaXMuZWw7XFxuICAgIHRoaXMuJGNvbnRhaW5lciA9IHByb3BzLiRjb250YWluZXI7XFxuICAgIHRoaXMuJGNvbnRlbnQ7XFxuICAgIHRoaXMuJGVtb2ppX2hvbGRlcjtcXG4gICAgdGhpcy4kZWxfdGFyZ2V0O1xcbiAgICB0aGlzLnRhZ19uYW1lID0gcHJvcHMudGFnX25hbWU7XFxuICAgIHRoaXMuX2hhbmRsZV9jb21wbGV0ZSA9IHByb3BzLm9uQ29tcGxldGU7XFxuXFxuICAgIHRoaXMuX3NlbGVjdGlvbiA9IGdldFNlbGVjdGlvbigpO1xcbiAgICB0aGlzLl9sYXN0X2VkaXRfcmFuZ2U7XFxuICAgIHRoaXMuX2xhc3RfZWRpdF9zdGFydENvbnRhaW5lcjtcXG4gICAgdGhpcy5fbGFzdF9lZGl0X3N0YXJ0T2Zmc2V0O1xcblxcbiAgICB0aGlzLl9pdHZfbXNnO1xcblxcbiAgICB0aGlzLiRlbF9hY3RpdmUgPSAkKHByb3BzLiRlbF9hY3RpdmUpO1xcblxcbiAgICB0aGlzLl9jcmVhdGVDaGlsZCgpO1xcblxcbiAgICB0aGlzLl9zZXRMYXN0RWRpdEVsKHRoaXMuJGNvbnRlbnQpO1xcblxcbiAgICAvL2NvbnNvbGUubG9nKHRoaXMuY29uc3RydWN0b3IuRUxfU01JTEUsdGhpcy5lbCk7XFxuICAgIC8vY29uc29sZS5sb2coJCh0aGlzLmNvbnN0cnVjdG9yLkVMX1NNSUxFLHRoaXMuZWwpWzBdKTtcXG5cXG4gICAgdGhpcy5lbW9qaV9wYW5lbCA9IG5ldyBfc21pbGUyLmRlZmF1bHQoe1xcbiAgICAgIGNvbnRhaW5lcjogJCh0aGlzLmNvbnN0cnVjdG9yLkVMX1NNSUxFLCB0aGlzLmVsKVxcbiAgICB9KTtcXG5cXG4gICAgdGhpcy5fcnVuKCk7XFxuICAgIC8vY29uc29sZS5sb2coJ2VkaXRvciBjb25zdHJ1Y3RvcicpO1xcbiAgfSxcXG4gIGNsZWFyOiBmdW5jdGlvbiBjbGVhcigpIHtcXG5cXG4gICAgdGhpcy4kY29udGVudC5odG1sKHRoaXMuJGNvbnRlbnQuYXR0cignZGVmYXVsdFZhbHVlJykpO1xcbiAgICB0aGlzLiRjb250ZW50WzBdLmNsYXNzTGlzdC5hZGQoJ2RlZmF1bHRfdmFsdWUtb3ZvJyk7XFxuXFxuICAgIGNsZWFyVGltZW91dCh0aGlzLl9pdHZfcHViKTtcXG5cXG4gICAgdGhpcy4kbXNnX2hvbGRlci5jc3Moe1xcbiAgICAgIHRyYW5zaXRpb246ICdub25lJyxcXG4gICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUzZCgwLC05MCUsMCknXFxuICAgIH0pO1xcbiAgfSxcXG4gIHNob3c6IGZ1bmN0aW9uIHNob3coKSB7XFxuICAgIC8vIGNvbnNvbGUubG9nKCdzaGl3Jyk7XFxuICAgICQodGhpcy5lbCkuc2hvdygpO1xcbiAgfSxcXG4gIGhpZGU6IGZ1bmN0aW9uIGhpZGUoKSB7XFxuICAgIC8vZGVidWdnZXI7XFxuXFxuICAgIC8vY29uc29sZS5sb2coJ2hpZGUnKTtcXG4gICAgJCh0aGlzLmVsKS5oaWRlKCk7XFxuICB9LFxcbiAgX2NyZWF0ZUNoaWxkOiBmdW5jdGlvbiBfY3JlYXRlQ2hpbGQoKSB7XFxuICAgIHRoaXMuZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRoaXMudGFnX25hbWUpO1xcbiAgICB0aGlzLiRjb250YWluZXIuYXBwZW5kKHRoaXMuZWwpO1xcbiAgICB0aGlzLmVsLmNsYXNzTGlzdC5hZGQodGhpcy5jb25zdHJ1Y3Rvci5DTFMpO1xcbiAgICAvLyB0aGlzLmVsLmlubmVySFRNTCA9IGBcXG4gICAgLy8gICA8ZGl2IGNvbnRlbnQtb3ZvPjwvZGl2PlxcbiAgICAvLyBgO1xcblxcbiAgICAvLyB0aGlzLiRjb250ZW50ID0gJCgnZGl2W2NvbnRlbnQtb3ZvXScsdGhpcy5lbCk7XFxuICAgIC8vZGVidWdnZXI7XFxuICB9LFxcbiAgX2ZvY3VzOiBmdW5jdGlvbiBfZm9jdXMoKSB7XFxuICAgIHZhciBkaWZmX29mZnNldCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogMDtcXG5cXG4gICAgdGhpcy4kY29udGVudFswXS5mb2N1cygpO1xcblxcbiAgICBpZiAoIXRoaXMuX2xhc3RfZWRpdF9yYW5nZSkgcmV0dXJuO1xcblxcbiAgICB2YXIgcmFuZ2UgPSB0aGlzLl9sYXN0X2VkaXRfcmFuZ2U7XFxuICAgIHZhciBzdGFydENvbnRhaW5lciA9IHJhbmdlLnN0YXJ0Q29udGFpbmVyLFxcbiAgICAgICAgc3RhcnRPZmZzZXQgPSByYW5nZS5zdGFydE9mZnNldDtcXG5cXG5cXG4gICAgcmFuZ2Uuc2V0U3RhcnQoc3RhcnRDb250YWluZXIsIHN0YXJ0T2Zmc2V0ICsgZGlmZl9vZmZzZXQpO1xcbiAgICByYW5nZS5jb2xsYXBzZSh0cnVlKTtcXG5cXG4gICAgdGhpcy5fc2VsZWN0aW9uLnJlbW92ZUFsbFJhbmdlcygpO1xcbiAgICB0aGlzLl9zZWxlY3Rpb24uYWRkUmFuZ2UocmFuZ2UpO1xcbiAgfSxcXG4gIF9yZXNBZGFwdGVyOiBmdW5jdGlvbiBfcmVzQWRhcHRlcihzKSB7XFxuICAgIHJldHVybiB0aGlzLm9wdGlvbnMuY29udmVydF9pbnRvX2VudGl0aWVzID8gdGhpcy5fY29udmVydEVtb2ppSW5Ub0VudGl0aWVzKHMpIDogcztcXG4gIH1cXG4gIC8qKiBcXHJcXG4gICAqIOeUqOS6juaKiueUqHV0ZjE257yW56CB55qE5a2X56ym6L2s5o2i5oiQ5a6e5L2T5a2X56ym77yM5Lul5L6b5ZCO5Y+w5a2Y5YKoIFxcclxcbiAgICogQHBhcmFtICB7c3RyaW5nfSBzdHIg5bCG6KaB6L2s5o2i55qE5a2X56ym5Liy77yM5YW25Lit5ZCr5pyJdXRmMTblrZfnrKblsIbooqvoh6rliqjmo4Dlh7ogXFxyXFxuICAgKiBAcmV0dXJuIHtzdHJpbmd9ICAgICDovazmjaLlkI7nmoTlrZfnrKbkuLLvvIx1dGYxNuWtl+espuWwhuiiq+i9rOaNouaIkCYjeHh4eDvlvaLlvI/nmoTlrp7kvZPlrZfnrKYgXFxyXFxuICAgKi9cXG4gICxcXG4gIF9jb252ZXJ0RW1vamlJblRvRW50aXRpZXM6IGZ1bmN0aW9uIF9jb252ZXJ0RW1vamlJblRvRW50aXRpZXMocykge1xcbiAgICBzID0gcy5yZXBsYWNlKC9bXFxcXHVkODAwLVxcXFx1ZGJmZl1bXFxcXHVkYzAwLVxcXFx1ZGZmZl0vZywgZnVuY3Rpb24gKGNoYXIpIHtcXG4gICAgICB2YXIgSCwgTCwgY29kZTtcXG4gICAgICBpZiAoY2hhci5sZW5ndGggPT09IDIpIHtcXG4gICAgICAgIEggPSBjaGFyLmNoYXJDb2RlQXQoMCk7IC8vIOWPluWHuumrmOS9jSAgXFxuICAgICAgICBMID0gY2hhci5jaGFyQ29kZUF0KDEpOyAvLyDlj5blh7rkvY7kvY0gIFxcbiAgICAgICAgY29kZSA9IChIIC0gMHhEODAwKSAqIDB4NDAwICsgMHgxMDAwMCArIEwgLSAweERDMDA7IC8vIOi9rOaNoueul+azlSAgXFxuICAgICAgICByZXR1cm4gXFxcIiYjXFxcIiArIGNvZGUgKyBcXFwiO1xcXCI7XFxuICAgICAgfSBlbHNlIHtcXG4gICAgICAgIHJldHVybiBjaGFyO1xcbiAgICAgIH1cXG4gICAgfSk7XFxuICAgIHJldHVybiBzO1xcbiAgfSxcXG4gIF9lZGl0TGFzdENoaWxkOiBmdW5jdGlvbiBfZWRpdExhc3RDaGlsZCgpIHtcXG4gICAgdmFyIF90aGlzID0gdGhpcztcXG5cXG4gICAgdmFyIGNoaWxkID0gdGhpcy4kY29udGVudFswXS5jaGlsZHJlbjtcXG4gICAgaWYgKCFjaGlsZCkgcmV0dXJuIHRoaXMuJGNvbnRlbnQ7XFxuXFxuICAgIHZhciBpID0gMDtcXG5cXG4gICAgLy/lpoLmmK/lm77niYcs5L2G5piv5piv5pyA5ZCO5LiA5LiqY2hpbGTpgqPkuYjkuZ/mmK/mj5LlhaXliLAkY29udGVudOS4re+8gVxcbiAgICB2YXIgZiA9IGZ1bmN0aW9uIGYoY2hpbGQsIGlkeCkge1xcbiAgICAgIGlmICgrK2kgPiAxMDAwMDApIHJldHVybiBhbGVydCgn5p+l5om+5qyh5pWw6L+H5aSacXdxJyk7XFxuXFxuICAgICAgaWYgKGlkeCA8IDAgfHwgIWNoaWxkKSByZXR1cm4gX3RoaXMuJGNvbnRlbnQ7XFxuXFxuICAgICAgdmFyIG5vZGVfbmFtZSA9IGNoaWxkW2lkeF0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcXG5cXG4gICAgICAvL2lvc+i+k+WFpeeahOWGheWuueepuuS5n+WtmOWcqOS4qmJyXFxuICAgICAgaWYgKG5vZGVfbmFtZSA9PT0gJ2JyJyAmJiBpZHggPT09IGNoaWxkLmxlbmd0aCAtIDEpIHJldHVybiBfdGhpcy4kY29udGVudDtcXG4gICAgICAvL1xcbiAgICAgIGlmIChub2RlX25hbWUgPT09ICdpbWcnICYmIGlkeCA9PT0gY2hpbGQubGVuZ3RoIC0gMSkgcmV0dXJuIF90aGlzLiRjb250ZW50O1xcbiAgICAgIC8vaWYobm9kZV9uYW1lID09PSdpbWcnJiYgY2hpbGRbaWR4XS5jbGFzc0xpc3QuY29udGFpbnMoJ3NtaWxlLW92bycpKSByZXR1cm4gdGhpcy4kY29udGVudDtcXG4gICAgICBpZiAobm9kZV9uYW1lICE9ICdpbWcnKSByZXR1cm4gJChjaGlsZFtpZHhdKTtcXG5cXG4gICAgICByZXR1cm4gZihjaGlsZCwgLS1pZHgpO1xcbiAgICB9O1xcblxcbiAgICByZXR1cm4gZihjaGlsZCwgY2hpbGQubGVuZ3RoIC0gMSk7XFxuICB9LFxcbiAgX2JpbmREZWZhdWx0VmFsdWU6IGZ1bmN0aW9uIF9iaW5kRGVmYXVsdFZhbHVlKCkge1xcbiAgICB2YXIgQ0xTX0RFRkFVTFRfVkFMVUUgPSB0aGlzLmNvbnN0cnVjdG9yLkNMU19ERUZBVUxUX1ZBTFVFO1xcblxcblxcbiAgICB0aGlzLmNsZWFyKCk7XFxuXFxuICAgIC8vY29uc29sZS5sb2codGhpcy4kY29udGVudCk7XFxuICAgIHRoaXMuJGNvbnRlbnQuaHRtbCh0aGlzLiRjb250ZW50LmF0dHIoJ2RlZmF1bHRWYWx1ZScpKTtcXG4gICAgdGhpcy4kY29udGVudFswXS5jbGFzc0xpc3QuYWRkKENMU19ERUZBVUxUX1ZBTFVFKTtcXG5cXG4gICAgdGhpcy4kY29udGVudFswXS5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgZnVuY3Rpb24gKGUpIHtcXG4gICAgICAvL2NvbnNvbGUubG9nKCdibHVyJyk7XFxuICAgICAgdmFyIGh0bWxfID0gdGhpcy5pbm5lckhUTUwudHJpbSgpO1xcblxcbiAgICAgIHZhciBkZWZhdWx0X3ZhbHVlID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ2RlZmF1bHRWYWx1ZScpLnRyaW0oKTtcXG5cXG4gICAgICBpZiAoaHRtbF8gPT09ICcnIHx8IGh0bWxfID09PSAnPGJyPicpIHtcXG4gICAgICAgIHRoaXMuaW5uZXJIVE1MID0gZGVmYXVsdF92YWx1ZTtcXG4gICAgICAgIHRoaXMuY2xhc3NMaXN0LmFkZChDTFNfREVGQVVMVF9WQUxVRSk7XFxuICAgICAgfVxcbiAgICB9KTtcXG5cXG4gICAgdGhpcy4kY29udGVudFswXS5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsIGZ1bmN0aW9uICgpIHtcXG5cXG4gICAgICB0aGlzLmNsYXNzTGlzdC5yZW1vdmUoQ0xTX0RFRkFVTFRfVkFMVUUpO1xcblxcbiAgICAgIHZhciBodG1sXyA9IHRoaXMuaW5uZXJIVE1MLnRyaW0oKTtcXG5cXG4gICAgICB2YXIgZGVmYXVsdF92YWx1ZSA9IHRoaXMuZ2V0QXR0cmlidXRlKCdkZWZhdWx0VmFsdWUnKS50cmltKCk7XFxuXFxuICAgICAgaWYgKGh0bWxfID09PSBkZWZhdWx0X3ZhbHVlKSB0aGlzLmlubmVySFRNTCA9ICcnO1xcbiAgICB9KTtcXG4gIH0sXFxuICBfcGlja0Vtb2ppOiBmdW5jdGlvbiBfcGlja0Vtb2ppKCkge1xcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcXG5cXG4gICAgdGhpcy5lbW9qaV9wYW5lbC5vbigncGljaycsIGZ1bmN0aW9uIChwcm9wcykge1xcblxcbiAgICAgIF90aGlzMi4kY29udGVudC5hcHBlbmQocHJvcHMuZWwpO1xcbiAgICB9KTtcXG4gIH0sXFxuICBfZGlzcGxheU1zZzogZnVuY3Rpb24gX2Rpc3BsYXlNc2cobXNnKSB7XFxuICAgIHZhciBfdGhpczMgPSB0aGlzO1xcblxcbiAgICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XFxuXFxuICAgIF9vYmplY3REZXN0cnVjdHVyaW5nRW1wdHkoX3JlZik7XFxuXFxuICAgIHRoaXMuJG1zZ190ZXh0LnRleHQobXNnICsgJycpO1xcblxcbiAgICBjbGVhclRpbWVvdXQodGhpcy5faXR2X21zZyk7XFxuXFxuICAgIHRoaXMuJG1zZ19ob2xkZXIuY3NzKHtcXG4gICAgICB0cmFuc2l0aW9uOiAnbm9uZScsXFxuICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoMCwwJSwwKSdcXG4gICAgfSk7XFxuXFxuICAgIHRoaXMuX2l0dl9tc2cgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcXG5cXG4gICAgICBfdGhpczMuJG1zZ19ob2xkZXIuY3NzKHtcXG4gICAgICAgIHRyYW5zaXRpb246ICdub25lJyxcXG4gICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZTNkKDAsLTkwJSwwKSdcXG4gICAgICB9KTtcXG4gICAgfSwgMjMzMyk7XFxuICB9LFxcbiAgX2FwcGVuZFRvTGFzdE1vZGlmaXlFbDogZnVuY3Rpb24gX2FwcGVuZFRvTGFzdE1vZGlmaXlFbChlbCkge1xcbiAgICBpZiAoIXRoaXMuX2xhc3RfZWRpdF9yYW5nZSkgcmV0dXJuIHRoaXMuX2xhc3RfZWwuYXBwZW5kKGVsKTtcXG5cXG4gICAgdmFyIF9yZWYyID0gW3RoaXMuX2xhc3RfZWRpdF9yYW5nZS5zdGFydENvbnRhaW5lci5ub2RlVHlwZSwgdGhpcy5fbGFzdF9lZGl0X3JhbmdlLnN0YXJ0Q29udGFpbmVyLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCldLFxcbiAgICAgICAgbm9kZV90eXBlID0gX3JlZjJbMF0sXFxuICAgICAgICBub2RlX25hbWUgPSBfcmVmMlsxXTtcXG5cXG5cXG4gICAgaWYgKG5vZGVfdHlwZSA9PT0gMSAmJiBub2RlX25hbWUgPT09ICdsaScpIHJldHVybiBjb25zb2xlLmxvZygncXdxJyk7XFxuXFxuICAgIHRoaXMuX2xhc3RfZWRpdF9yYW5nZS5pbnNlcnROb2RlKGVsKTtcXG4gICAgLy9mYWxzZSx0cnVlICDplJrngrliZWZvcmV8YWZ0ZXJcXG4gICAgdGhpcy5fbGFzdF9lZGl0X3JhbmdlLmNvbGxhcHNlKGZhbHNlKTtcXG4gICAgdGhpcy5fc2VsZWN0aW9uLnJlbW92ZUFsbFJhbmdlcygpO1xcbiAgICB0aGlzLl9zZWxlY3Rpb24uYWRkUmFuZ2UodGhpcy5fbGFzdF9lZGl0X3JhbmdlKTtcXG4gIH1cXG59LCBfZGVmaW5lUHJvcGVydHkoX0V2ZW50JGV4dGVuZCwgJ19mb2N1cycsIGZ1bmN0aW9uIF9mb2N1cygpIHtcXG4gIC8vY29uc29sZS5sb2codGhpcy4kY29udGVudCk7XFxuICB0aGlzLiRjb250ZW50WzBdLmZvY3VzKCk7XFxuXFxuICAvL2NvbnNvbGUubG9nKCdmb2N1cyEhISEnKTtcXG4gIGlmICghdGhpcy5fbGFzdF9lZGl0X3JhbmdlKSByZXR1cm47XFxuXFxuICB2YXIgcmFuZ2UgPSB0aGlzLl9sYXN0X2VkaXRfcmFuZ2U7XFxuICB2YXIgc3RhcnRDb250YWluZXIgPSByYW5nZS5zdGFydENvbnRhaW5lcixcXG4gICAgICBzdGFydE9mZnNldCA9IHJhbmdlLnN0YXJ0T2Zmc2V0O1xcblxcblxcbiAgcmFuZ2Uuc2V0U3RhcnQoc3RhcnRDb250YWluZXIsIHN0YXJ0T2Zmc2V0KTtcXG4gIHJhbmdlLmNvbGxhcHNlKHRydWUpO1xcblxcbiAgdGhpcy5fc2VsZWN0aW9uLnJlbW92ZUFsbFJhbmdlcygpO1xcbiAgdGhpcy5fc2VsZWN0aW9uLmFkZFJhbmdlKHJhbmdlKTtcXG59KSwgX2RlZmluZVByb3BlcnR5KF9FdmVudCRleHRlbmQsICdfcmVjb3JkTGFzdFJhbmdlJywgZnVuY3Rpb24gX3JlY29yZExhc3RSYW5nZSgpIHtcXG4gIHZhciBfdGhpczQgPSB0aGlzO1xcblxcbiAgdmFyIG1zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAwO1xcblxcblxcbiAgY2xlYXJUaW1lb3V0KHRoaXMuX2l0dl9yYW5nZSk7XFxuICB0aGlzLl9pdHZfcmFuZ2UgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcXG4gICAgaWYgKCFfdGhpczQuX3NlbGVjdGlvbi5yYW5nZUNvdW50KSByZXR1cm47XFxuXFxuICAgIHZhciByYW5nZSA9IF90aGlzNC5fc2VsZWN0aW9uLmdldFJhbmdlQXQoMCk7XFxuXFxuICAgIF90aGlzNC5fc2VsZWN0aW9uLnJlbW92ZUFsbFJhbmdlcygpO1xcbiAgICBfdGhpczQuX3NlbGVjdGlvbi5hZGRSYW5nZShyYW5nZSk7XFxuXFxuICAgIF90aGlzNC5fbGFzdF9lZGl0X3JhbmdlID0gcmFuZ2U7XFxuXFxuICAgIC8vLy8vLy8vL1xcbiAgICBfdGhpczQuX2xhc3RfZWRpdF9zdGFydENvbnRhaW5lciA9IHJhbmdlLnN0YXJ0Q29udGFpbmVyO1xcbiAgICBfdGhpczQuX2xhc3RfZWRpdF9zdGFydE9mZnNldCA9IHJhbmdlLnN0YXJ0T2Zmc2V0O1xcbiAgICAvLy8vLy8vL1xcblxcbiAgICAvL2NvbnNvbGUubG9nKHRoaXMuX2xhc3RfZWRpdF9yYW5nZS5zdGFydENvbnRhaW5lcix0aGlzLl9sYXN0X2VkaXRfcmFuZ2Uuc3RhcnRPZmZzZXQpO1xcbiAgICAvL2NvbnNvbGUubG9nKHRoaXMuX2xhc3RfZWRpdF9zdGFydENvbnRhaW5lcix0aGlzLl9sYXN0X2VkaXRfc3RhcnRPZmZzZXQpO1xcbiAgfSwgbXMpO1xcbn0pLCBfZGVmaW5lUHJvcGVydHkoX0V2ZW50JGV4dGVuZCwgJ19zZXRMYXN0RWRpdEVsJywgZnVuY3Rpb24gX3NldExhc3RFZGl0RWwoJGxhc3RfZWwpIHtcXG4gIHRoaXMuX2xhc3RfZWwgPSAkbGFzdF9lbDtcXG59KSwgX2RlZmluZVByb3BlcnR5KF9FdmVudCRleHRlbmQsICdfcGlja1NtaWxlJywgZnVuY3Rpb24gX3BpY2tTbWlsZSgpIHtcXG4gIHZhciBfdGhpczUgPSB0aGlzO1xcblxcbiAgLy9kZWJ1Z2dlcjtcXG4gIHRoaXMuZW1vamlfcGFuZWwub24oJ3BpY2snLCBmdW5jdGlvbiAocHJvcHMpIHtcXG5cXG4gICAgdmFyIGh0bWxfID0gX3RoaXM1LiRjb250ZW50Lmh0bWwoKS50cmltKCk7XFxuXFxuICAgIHZhciBkZWZhdWx0X3ZhbHVlID0gX3RoaXM1LiRjb250ZW50LmF0dHIoJ2RlZmF1bHRWYWx1ZScpLnRyaW0oKTtcXG5cXG4gICAgaWYgKGh0bWxfID09PSBkZWZhdWx0X3ZhbHVlKSBfdGhpczUuJGNvbnRlbnQuaHRtbCgnJyk7XFxuXFxuICAgIF90aGlzNS5fYXBwZW5kVG9MYXN0TW9kaWZpeUVsKHByb3BzLmVsKTtcXG4gIH0pO1xcbn0pLCBfZGVmaW5lUHJvcGVydHkoX0V2ZW50JGV4dGVuZCwgJ19oYW5kbGVDb25maXJtJywgZnVuY3Rpb24gX2hhbmRsZUNvbmZpcm0oKSB7XFxuICB0aHJvdyAncmV3cml0ZSAhJztcXG59KSwgX2RlZmluZVByb3BlcnR5KF9FdmVudCRleHRlbmQsICdfZWRpdFN1Y2Nlc3MnLCBmdW5jdGlvbiBfZWRpdFN1Y2Nlc3MoKSB7XFxuICB0aHJvdyAncmV3cml0ZSAhJztcXG59KSwgX2RlZmluZVByb3BlcnR5KF9FdmVudCRleHRlbmQsICdfaGFuZGxlRm9yVGhvc2UnLCBmdW5jdGlvbiBfaGFuZGxlRm9yVGhvc2UoKSB7XFxuICB2YXIgX3RoaXM2ID0gdGhpcztcXG5cXG4gIHRoaXMuJGVsX2FjdGl2ZS5vbignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xcblxcbiAgICBfdGhpczYuc2hvdygpO1xcbiAgfSk7XFxuXFxuICAkKHRoaXMuY29uc3RydWN0b3IuRUxfQ0FOQ0VMLCB0aGlzLmVsKS5vbignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xcblxcbiAgICBfdGhpczYuaGlkZSgpO1xcbiAgfSk7XFxuXFxuICB0aGlzLiRjb250ZW50Lm9uKCdibHVyJywgZnVuY3Rpb24gKGUpIHt9KTtcXG5cXG4gICQodGhpcy4kZWxfYWN0aXZlKS5vbignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xcbiAgICBfdGhpczYuZWxfdGFyZ2V0ID0gZS50YXJnZXQ7XFxuICAgIF90aGlzNi5zaG93KCk7XFxuICAgIF90aGlzNi5fZm9jdXMoKTtcXG4gIH0pO1xcblxcbiAgdGhpcy4kY29udGVudC5vbignZm9jdXMnLCB0aGlzLl9oYW5kbGVfYnVnX2ZvY3VzLmJpbmQodGhpcykpO1xcbiAgdGhpcy4kY29udGVudC5vbignYmx1cicsIHRoaXMuX2hhbmRsZV9idWdfYmx1ci5iaW5kKHRoaXMpKTtcXG59KSwgX2RlZmluZVByb3BlcnR5KF9FdmVudCRleHRlbmQsICdfaGFuZGxlX2J1Z19mb2N1cycsIGZ1bmN0aW9uIF9oYW5kbGVfYnVnX2ZvY3VzKGUpIHtcXG5cXG4gIC8vZGVidWdnZXI7XFxuXFxuICB2YXIgel9pbmRleCA9IHRoaXMub3B0aW9ucy56X2luZGV4O1xcblxcblxcbiAgaWYgKF9jb3JlLkJyb3dlci52ZXJzaW9uLmlvcykge1xcblxcbiAgICAkKHRoaXMuZWwpLmNzcyh7XFxuICAgICAgd2lkdGg6IGRvY3VtZW50LmJvZHkub2Zmc2V0V2lkdGggKyAncHgnLFxcbiAgICAgIGhlaWdodDogZG9jdW1lbnQuYm9keS5vZmZzZXRIZWlnaHQgKyAncHgnLFxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxcbiAgICAgIGxlZnQ6ICcwJywgdG9wOiAnMCcsICd6LWluZGV4Jzogel9pbmRleFxcbiAgICB9KTtcXG5cXG4gICAgLy9jb25zb2xlLmxvZyh6X2luZGV4KTtcXG4gIH0gZWxzZSB7XFxuICAgICQodGhpcy5lbCkuY3NzKHtcXG4gICAgICBwb3NpdGlvbjogJ2ZpeGVkJyxcXG4gICAgICBsZWZ0OiAnMCcsIHRvcDogJzAnLCAnei1pbmRleCc6IHpfaW5kZXhcXG4gICAgfSk7XFxuICB9XFxuICBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCA9IDA7XFxuICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wID0gMDtcXG59KSwgX2RlZmluZVByb3BlcnR5KF9FdmVudCRleHRlbmQsICdfaGFuZGxlX2J1Z19ibHVyJywgZnVuY3Rpb24gX2hhbmRsZV9idWdfYmx1cigpIHtcXG4gIHZhciB6X2luZGV4ID0gdGhpcy5vcHRpb25zLnpfaW5kZXg7XFxuXFxuICBpZiAoX2NvcmUuQnJvd2VyLnZlcnNpb24uaW9zKSB7XFxuICAgICQodGhpcy5lbCkuY3NzKHsgcG9zaXRpb246ICdmaXhlZCcsIGxlZnQ6ICcwJywgdG9wOiAnMCcsICd6LWluZGV4Jzogel9pbmRleCB9KTtcXG4gIH1cXG59KSwgX2RlZmluZVByb3BlcnR5KF9FdmVudCRleHRlbmQsICdfcnVuJywgZnVuY3Rpb24gX3J1bigpIHtcXG4gIHZhciBfdGhpczcgPSB0aGlzO1xcblxcbiAgdGhpcy5fYmluZERlZmF1bHRWYWx1ZSgpO1xcblxcbiAgdGhpcy5fcGlja1NtaWxlKCk7XFxuXFxuICB0aGlzLl9oYW5kbGVGb3JUaG9zZSgpO1xcbiAgdGhpcy5fZm9jdXMoKTtcXG5cXG4gIHRoaXMuX2hhbmRsZUNvbmZpcm0oKTtcXG5cXG4gIHRoaXMub24oJ2NvbXBsZXRlJywgZnVuY3Rpb24gKHByb3BzKSB7XFxuXFxuICAgIF90aGlzNy5faGFuZGxlX2NvbXBsZXRlICYmIF90aGlzNy5faGFuZGxlX2NvbXBsZXRlLmNhbGwoX3RoaXM3LCBwcm9wcyk7XFxuICB9KTtcXG5cXG4gIHRoaXMuaGlkZSgpO1xcbn0pLCBfRXZlbnQkZXh0ZW5kKSwge1xcbiAgQ0xTOiAnJyxcXG4gIENMU19ERUZBVUxUX1ZBTFVFOiAnZGVmYXVsdF92YWx1ZS1vdm8nLFxcbiAgRUxfQ09OVEVOVDogJ2Rpdltjb250ZW50LW92b10nLFxcbiAgRUxfQ0FOQ0VMOiAnYnV0dG9uW2NhbmNlbC1vdm9dJyxcXG4gIEVMX0NPTkZJUk06ICdidXR0b25bY29uZmlybS1vdm9dJyxcXG4gIEVMX1NNSUxFOiAnZGl2W3NtaWxlLWhvbGRlci1vdm9dJyxcXG4gIEVMX1NNSUxFX0lDT046ICdsaVtzbWlsZS1pY29uLW92b10nLFxcbiAgRUxfRElTUExBWV9NU0c6ICdkaXZbbWVzc2FnZS1vdm9dJ1xcbn0pOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZaV1JwZEc5eUxtcHpQMkl3WmpZaVhTd2libUZ0WlhNaU9sc2laWGgwWlc1a0lpd2lhVzVwZENJc0luQnliM0J6SWl3aVgzTjFjR1Z5SWl3aVpHVm1ZWFZzZEY5dmNIUnBiMjV6SWl3aUpHTnZiblJoYVc1bGNpSXNJaVFpTENKa2IyTjFiV1Z1ZENJc0ltSnZaSGtpTENJa1pXeGZZV04wYVhabElpd2lkR0ZuWDI1aGJXVWlMQ0o2WDJsdVpHVjRJaXdpWTI5dVptbG5JaXdpWTI5dWRtVnlkRjlwYm5SdlgyVnVkR2wwYVdWeklpd2lUMkpxWldOMElpd2lZWE56YVdkdUlpd2liM0IwYVc5dWN5SXNJbVZzSWl3aUpHTnZiblJsYm5RaUxDSWtaVzF2YW1sZmFHOXNaR1Z5SWl3aUpHVnNYM1JoY21kbGRDSXNJbDlvWVc1a2JHVmZZMjl0Y0d4bGRHVWlMQ0p2YmtOdmJYQnNaWFJsSWl3aVgzTmxiR1ZqZEdsdmJpSXNJbWRsZEZObGJHVmpkR2x2YmlJc0lsOXNZWE4wWDJWa2FYUmZjbUZ1WjJVaUxDSmZiR0Z6ZEY5bFpHbDBYM04wWVhKMFEyOXVkR0ZwYm1WeUlpd2lYMnhoYzNSZlpXUnBkRjl6ZEdGeWRFOW1abk5sZENJc0lsOXBkSFpmYlhObklpd2lYMk55WldGMFpVTm9hV3hrSWl3aVgzTmxkRXhoYzNSRlpHbDBSV3dpTENKbGJXOXFhVjl3WVc1bGJDSXNJbU52Ym5SaGFXNWxjaUlzSW1OdmJuTjBjblZqZEc5eUlpd2lSVXhmVTAxSlRFVWlMQ0pmY25WdUlpd2lZMnhsWVhJaUxDSm9kRzFzSWl3aVlYUjBjaUlzSW1Oc1lYTnpUR2x6ZENJc0ltRmtaQ0lzSW1Oc1pXRnlWR2x0Wlc5MWRDSXNJbDlwZEhaZmNIVmlJaXdpSkcxeloxOW9iMnhrWlhJaUxDSmpjM01pTENKMGNtRnVjMmwwYVc5dUlpd2lkSEpoYm5ObWIzSnRJaXdpYzJodmR5SXNJbWhwWkdVaUxDSmpjbVZoZEdWRmJHVnRaVzUwSWl3aVlYQndaVzVrSWl3aVEweFRJaXdpWDJadlkzVnpJaXdpWkdsbVpsOXZabVp6WlhRaUxDSm1iMk4xY3lJc0luSmhibWRsSWl3aWMzUmhjblJEYjI1MFlXbHVaWElpTENKemRHRnlkRTltWm5ObGRDSXNJbk5sZEZOMFlYSjBJaXdpWTI5c2JHRndjMlVpTENKeVpXMXZkbVZCYkd4U1lXNW5aWE1pTENKaFpHUlNZVzVuWlNJc0lsOXlaWE5CWkdGd2RHVnlJaXdpY3lJc0lsOWpiMjUyWlhKMFJXMXZhbWxKYmxSdlJXNTBhWFJwWlhNaUxDSnlaWEJzWVdObElpd2lZMmhoY2lJc0lrZ2lMQ0pNSWl3aVkyOWtaU0lzSW14bGJtZDBhQ0lzSW1Ob1lYSkRiMlJsUVhRaUxDSmZaV1JwZEV4aGMzUkRhR2xzWkNJc0ltTm9hV3hrSWl3aVkyaHBiR1J5Wlc0aUxDSnBJaXdpWmlJc0ltbGtlQ0lzSW1Gc1pYSjBJaXdpYm05a1pWOXVZVzFsSWl3aWJtOWtaVTVoYldVaUxDSjBiMHh2ZDJWeVEyRnpaU0lzSWw5aWFXNWtSR1ZtWVhWc2RGWmhiSFZsSWl3aVEweFRYMFJGUmtGVlRGUmZWa0ZNVlVVaUxDSmhaR1JGZG1WdWRFeHBjM1JsYm1WeUlpd2laU0lzSW1oMGJXeGZJaXdpYVc1dVpYSklWRTFNSWl3aWRISnBiU0lzSW1SbFptRjFiSFJmZG1Gc2RXVWlMQ0puWlhSQmRIUnlhV0oxZEdVaUxDSnlaVzF2ZG1VaUxDSmZjR2xqYTBWdGIycHBJaXdpYjI0aUxDSmZaR2x6Y0d4aGVVMXpaeUlzSW0xelp5SXNJaVJ0YzJkZmRHVjRkQ0lzSW5SbGVIUWlMQ0p6WlhSVWFXMWxiM1YwSWl3aVgyRndjR1Z1WkZSdlRHRnpkRTF2WkdsbWFYbEZiQ0lzSWw5c1lYTjBYMlZzSWl3aWJtOWtaVlI1Y0dVaUxDSnViMlJsWDNSNWNHVWlMQ0pqYjI1emIyeGxJaXdpYkc5bklpd2lhVzV6WlhKMFRtOWtaU0lzSW0xeklpd2lYMmwwZGw5eVlXNW5aU0lzSW5KaGJtZGxRMjkxYm5RaUxDSm5aWFJTWVc1blpVRjBJaXdpSkd4aGMzUmZaV3dpTENKRlRGOURRVTVEUlV3aUxDSmxiRjkwWVhKblpYUWlMQ0owWVhKblpYUWlMQ0pmYUdGdVpHeGxYMkoxWjE5bWIyTjFjeUlzSW1KcGJtUWlMQ0pmYUdGdVpHeGxYMkoxWjE5aWJIVnlJaXdpZG1WeWMybHZiaUlzSW1sdmN5SXNJbmRwWkhSb0lpd2liMlptYzJWMFYybGtkR2dpTENKb1pXbG5hSFFpTENKdlptWnpaWFJJWldsbmFIUWlMQ0p3YjNOcGRHbHZiaUlzSW14bFpuUWlMQ0owYjNBaUxDSnpZM0p2Ykd4VWIzQWlMQ0prYjJOMWJXVnVkRVZzWlcxbGJuUWlMQ0pmY0dsamExTnRhV3hsSWl3aVgyaGhibVJzWlVadmNsUm9iM05sSWl3aVgyaGhibVJzWlVOdmJtWnBjbTBpTENKallXeHNJaXdpUlV4ZlEwOU9WRVZPVkNJc0lrVk1YME5QVGtaSlVrMGlMQ0pGVEY5VFRVbE1SVjlKUTA5T0lpd2lSVXhmUkVsVFVFeEJXVjlOVTBjaVhTd2liV0Z3Y0dsdVozTWlPaUk3T3pzN096czdPMEZCUVVFN08wRkJSVUU3T3pzN096czdPenM3YTBKQlJXVXNXVUZCVFVFc1RVRkJUanRCUVVOaVF5eE5RVVJoTEdkQ1FVTlNReXhMUVVSUkxFVkJRMFk3UVVGRFZDeFRRVUZMUXl4TlFVRk1MRU5CUVZrc1NVRkJXanM3UVVGRlFTeFRRVUZMUXl4bFFVRk1MRWRCUVhWQ08wRkJRM0pDUXl4clFrRkJZVU1zUlVGQlJVTXNVMEZCVTBNc1NVRkJXQ3hEUVVSUk8wRkJSWEJDUXl4clFrRkJZU3hOUVVaUE8wRkJSM0JDUXl4blFrRkJWeXhaUVVoVE8wRkJTWEJDUXl4bFFVRlZMRWRCU2xVN1FVRkxjRUpETEdOQlFWTXNSVUZNVnp0QlFWRndRa01zTmtKQlFYZENPMEZCVWtvc1MwRkJka0k3TzBGQlYwRllMRmxCUVZGWkxFOUJRVTlETEUxQlFWQXNRMEZCWXl4RlFVRmtMRVZCUVdsQ0xFdEJRVXRZTEdWQlFYUkNMRVZCUVhORFJpeExRVUYwUXl4RFFVRlNPenRCUVVWQkxGTkJRVXRqTEU5QlFVd3NSMEZCWldRc1MwRkJaanM3UVVGRlFTeFRRVUZMWlN4RlFVRk1PMEZCUTBFc1UwRkJTMW9zVlVGQlRDeEhRVUZyUWtnc1RVRkJUVWNzVlVGQmVFSTdRVUZEUVN4VFFVRkxZU3hSUVVGTU8wRkJRMEVzVTBGQlMwTXNZVUZCVER0QlFVTkJMRk5CUVV0RExGVkJRVXc3UVVGRFFTeFRRVUZMVml4UlFVRk1MRWRCUVdkQ1VpeE5RVUZOVVN4UlFVRjBRanRCUVVOQkxGTkJRVXRYTEdkQ1FVRk1MRWRCUVhkQ2JrSXNUVUZCVFc5Q0xGVkJRVGxDT3p0QlFVVkJMRk5CUVV0RExGVkJRVXdzUjBGQmEwSkRMR05CUVd4Q08wRkJRMEVzVTBGQlMwTXNaMEpCUVV3N1FVRkRRU3hUUVVGTFF5eDVRa0ZCVER0QlFVTkJMRk5CUVV0RExITkNRVUZNT3p0QlFVVkJMRk5CUVV0RExGRkJRVXc3TzBGQlJVRXNVMEZCUzI1Q0xGVkJRVXdzUjBGQmEwSklMRVZCUVVWS0xFMUJRVTFQTEZWQlFWSXNRMEZCYkVJN08wRkJSVUVzVTBGQlMyOUNMRmxCUVV3N08wRkJSVUVzVTBGQlMwTXNZMEZCVEN4RFFVRnZRaXhMUVVGTFdpeFJRVUY2UWpzN1FVRkZRVHRCUVVOQk96dEJRVVZCTEZOQlFVdGhMRmRCUVV3c1IwRkJiVUlzYjBKQlFWVTdRVUZETTBKRExHbENRVUZWTVVJc1JVRkJSU3hMUVVGTE1rSXNWMEZCVEN4RFFVRnBRa01zVVVGQmJrSXNSVUZCTkVJc1MwRkJTMnBDTEVWQlFXcERPMEZCUkdsQ0xFdEJRVllzUTBGQmJrSTdPMEZCU1VFc1UwRkJTMnRDTEVsQlFVdzdRVUZEUVR0QlFVTkVMRWRCYWtSWk8wRkJhMFJhUXl4UFFXeEVXU3h0UWtGclJFdzdPMEZCUlU0c1UwRkJTMnhDTEZGQlFVd3NRMEZCWTIxQ0xFbEJRV1FzUTBGQmJVSXNTMEZCUzI1Q0xGRkJRVXdzUTBGQlkyOUNMRWxCUVdRc1EwRkJiVUlzWTBGQmJrSXNRMEZCYmtJN1FVRkRRU3hUUVVGTGNFSXNVVUZCVEN4RFFVRmpMRU5CUVdRc1JVRkJhVUp4UWl4VFFVRnFRaXhEUVVFeVFrTXNSMEZCTTBJc1EwRkJLMElzYlVKQlFTOUNPenRCUVVkQlF5eHBRa0ZCWVN4TFFVRkxReXhSUVVGc1FqczdRVUZGUVN4VFFVRkxReXhYUVVGTUxFTkJRV2xDUXl4SFFVRnFRaXhEUVVGeFFqdEJRVU51UWtNc2EwSkJRVmNzVFVGRVVUdEJRVVZzUWtNc2FVSkJRVlU3UVVGR1VTeExRVUZ5UWp0QlFVMUVMRWRCYUVWWk8wRkJhVVZhUXl4TlFXcEZXU3hyUWtGcFJVNDdRVUZEVGp0QlFVTkRla01zVFVGQlJTeExRVUZMVnl4RlFVRlFMRVZCUVZjNFFpeEpRVUZZTzBGQlEwUXNSMEZ3UlZrN1FVRnhSVnBETEUxQmNrVlpMR3RDUVhGRlRqdEJRVU5NT3p0QlFVVkJPMEZCUTBFeFF5eE5RVUZGTEV0QlFVdFhMRVZCUVZBc1JVRkJWeXRDTEVsQlFWZzdRVUZEUkN4SFFURkZXVHRCUVRKRldtNUNMR05CTTBWWkxEQkNRVEpGUlR0QlFVTmlMRk5CUVV0YUxFVkJRVXdzUjBGQlZWWXNVMEZCVXpCRExHRkJRVlFzUTBGQmRVSXNTMEZCUzNaRExGRkJRVFZDTEVOQlFWWTdRVUZEUVN4VFFVRkxUQ3hWUVVGTUxFTkJRV2RDTmtNc1RVRkJhRUlzUTBGQmRVSXNTMEZCUzJwRExFVkJRVFZDTzBGQlEwRXNVMEZCUzBFc1JVRkJUQ3hEUVVGUmMwSXNVMEZCVWl4RFFVRnJRa01zUjBGQmJFSXNRMEZCYzBJc1MwRkJTMUFzVjBGQlRDeERRVUZwUW10Q0xFZEJRWFpETzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRlJDeEhRWFJHV1R0QlFYVkdXa01zVVVGMlJsa3NiMEpCZFVaVE8wRkJRVUVzVVVGQlpFTXNWMEZCWXl4MVJVRkJSaXhEUVVGRk96dEJRVU53UWl4VFFVRkxia01zVVVGQlRDeERRVUZqTEVOQlFXUXNSVUZCYVVKdlF5eExRVUZxUWpzN1FVRkZRU3hSUVVGSExFTkJRVU1zUzBGQlN6ZENMR2RDUVVGVUxFVkJRVFJDT3p0QlFVVTFRaXhSUVVGSk9FSXNVVUZCVVN4TFFVRkxPVUlzWjBKQlFXcENPMEZCVEc5Q0xGRkJUV1lyUWl4alFVNWxMRWRCVFdWRUxFdEJUbVlzUTBGTlprTXNZMEZPWlR0QlFVRkJMRkZCVFVGRExGZEJUa0VzUjBGTlpVWXNTMEZPWml4RFFVMUJSU3hYUVU1Qk96czdRVUZSY0VKR0xGVkJRVTFITEZGQlFVNHNRMEZCWlVZc1kwRkJaaXhGUVVFclFrTXNZMEZCV1Vvc1YwRkJNME03UVVGRFFVVXNWVUZCVFVrc1VVRkJUaXhEUVVGbExFbEJRV1k3TzBGQlJVRXNVMEZCUzNCRExGVkJRVXdzUTBGQlowSnhReXhsUVVGb1FqdEJRVU5CTEZOQlFVdHlReXhWUVVGTUxFTkJRV2RDYzBNc1VVRkJhRUlzUTBGQmVVSk9MRXRCUVhwQ08wRkJRMFFzUjBGd1IxazdRVUZ4UjFwUExHRkJja2RaTEhWQ1FYRkhRVU1zUTBGeVIwRXNSVUZ4UjBVN1FVRkRZaXhYUVVGUExFdEJRVXN2UXl4UFFVRk1MRU5CUVdGSUxIRkNRVUZpTEVkQlEwd3NTMEZCUzIxRUxIbENRVUZNTEVOQlFTdENSQ3hEUVVFdlFpeERRVVJMTEVkQlJVeEJMRU5CUmtZN1FVRkhSRHRCUVVORU96czdPenRCUVRGSFlUdEJRU3RIV2tNc01rSkJMMGRaTEhGRFFTdEhZMFFzUTBFdlIyUXNSVUVyUjJkQ08wRkJRek5DUVN4UlFVRkpRU3hGUVVGRlJTeFBRVUZHTEVOQlFWVXNhVU5CUVZZc1JVRkJOa01zVlVGQlEwTXNTVUZCUkN4RlFVRlJPMEZCUTNaRUxGVkJRVWxETEVOQlFVb3NSVUZCVDBNc1EwRkJVQ3hGUVVGVlF5eEpRVUZXTzBGQlEwRXNWVUZCU1Vnc1MwRkJTMGtzVFVGQlRDeExRVUZqTEVOQlFXeENMRVZCUVhGQ08wRkJRMjVDU0N4WlFVRkpSQ3hMUVVGTFN5eFZRVUZNTEVOQlFXZENMRU5CUVdoQ0xFTkJRVW9zUTBGRWJVSXNRMEZEU3p0QlFVTjRRa2dzV1VGQlNVWXNTMEZCUzBzc1ZVRkJUQ3hEUVVGblFpeERRVUZvUWl4RFFVRktMRU5CUm0xQ0xFTkJSVXM3UVVGRGVFSkdMR1ZCUVU4c1EwRkJRMFlzU1VGQlNTeE5RVUZNTEVsQlFXVXNTMEZCWml4SFFVRjFRaXhQUVVGMlFpeEhRVUZwUTBNc1EwRkJha01zUjBGQmNVTXNUVUZCTlVNc1EwRkliVUlzUTBGSGFVTTdRVUZEY0VRc1pVRkJUeXhQUVVGUFF5eEpRVUZRTEVkQlFXTXNSMEZCY2tJN1FVRkRSQ3hQUVV4RUxFMUJTMHM3UVVGRFNDeGxRVUZQU0N4SlFVRlFPMEZCUTBRN1FVRkRSaXhMUVZaSExFTkJRVW83UVVGWFFTeFhRVUZQU0N4RFFVRlFPMEZCUTBRc1IwRTFTRms3UVVFMlNGcFRMR2RDUVRkSVdTdzBRa0UyU0VrN1FVRkJRVHM3UVVGRFppeFJRVUZKUXl4UlFVRlJMRXRCUVV0MlJDeFJRVUZNTEVOQlFXTXNRMEZCWkN4RlFVRnBRbmRFTEZGQlFUZENPMEZCUTBFc1VVRkJSeXhEUVVGRFJDeExRVUZLTEVWQlFWY3NUMEZCVHl4TFFVRkxka1FzVVVGQldqczdRVUZGV0N4UlFVRkplVVFzU1VGQlNTeERRVUZTT3p0QlFVVkJPMEZCUTBFc1VVRkJTVU1zU1VGQlNTeFRRVUZLUVN4RFFVRkpMRU5CUVVOSUxFdEJRVVFzUlVGQlQwa3NSMEZCVUN4RlFVRmhPMEZCUTI1Q0xGVkJRVWNzUlVGQlJVWXNRMEZCUml4SFFVRkpMRTFCUVZBc1JVRkJaU3hQUVVGUFJ5eE5RVUZOTEZkQlFVNHNRMEZCVURzN1FVRkZaaXhWUVVGSFJDeE5RVUZKTEVOQlFVb3NTVUZCVXl4RFFVRkRTaXhMUVVGaUxFVkJRVzlDTEU5QlFVOHNUVUZCUzNaRUxGRkJRVm83TzBGQlJYQkNMRlZCUVVrMlJDeFpRVUZaVGl4TlFVRk5TU3hIUVVGT0xFVkJRVmRITEZGQlFWZ3NRMEZCYjBKRExGZEJRWEJDTEVWQlFXaENPenRCUVVWQk8wRkJRMEVzVlVGQlIwWXNZMEZCV1N4SlFVRmFMRWxCUVd0Q1JpeFJRVUZOU2l4TlFVRk5TQ3hOUVVGT0xFZEJRV0VzUTBGQmVFTXNSVUZCTWtNc1QwRkJUeXhOUVVGTGNFUXNVVUZCV2p0QlFVTXpRenRCUVVOQkxGVkJRVWMyUkN4alFVRmhMRXRCUVdJc1NVRkJiMEpHTEZGQlFVMUtMRTFCUVUxSUxFMUJRVTRzUjBGQllTeERRVUV4UXl4RlFVRTJReXhQUVVGUkxFMUJRVXR3UkN4UlFVRmlPMEZCUXpkRE8wRkJRMEVzVlVGQlJ6WkVMR0ZCUVZrc1MwRkJaaXhGUVVGelFpeFBRVUZQZWtVc1JVRkJSVzFGTEUxQlFVMUpMRWRCUVU0c1EwRkJSaXhEUVVGUU96dEJRVVYwUWl4aFFVRlBSQ3hGUVVGRlNDeExRVUZHTEVWQlFWRXNSVUZCUlVrc1IwRkJWaXhEUVVGUU8wRkJSVVFzUzBGb1FrUTdPMEZCYTBKQkxGZEJRVTlFTEVWQlFVVklMRXRCUVVZc1JVRkJVVUVzVFVGQlRVZ3NUVUZCVGl4SFFVRmhMRU5CUVhKQ0xFTkJRVkE3UVVGRlJDeEhRWGhLV1R0QlFYbEtXbGtzYlVKQmVrcFpMQ3RDUVhsS1R6dEJRVUZCTEZGQlJXSkRMR2xDUVVaaExFZEJSVkVzUzBGQlMyeEVMRmRCUm1Jc1EwRkZZbXRFTEdsQ1FVWmhPenM3UVVGSmJFSXNVMEZCU3k5RExFdEJRVXc3TzBGQlJVRTdRVUZEUVN4VFFVRkxiRUlzVVVGQlRDeERRVUZqYlVJc1NVRkJaQ3hEUVVGdFFpeExRVUZMYmtJc1VVRkJUQ3hEUVVGamIwSXNTVUZCWkN4RFFVRnRRaXhqUVVGdVFpeERRVUZ1UWp0QlFVTkJMRk5CUVV0d1FpeFJRVUZNTEVOQlFXTXNRMEZCWkN4RlFVRnBRbkZDTEZOQlFXcENMRU5CUVRKQ1F5eEhRVUV6UWl4RFFVRXJRakpETEdsQ1FVRXZRanM3UVVGRlFTeFRRVUZMYWtVc1VVRkJUQ3hEUVVGakxFTkJRV1FzUlVGQmFVSnJSU3huUWtGQmFrSXNRMEZCYTBNc1RVRkJiRU1zUlVGQmVVTXNWVUZCVTBNc1EwRkJWQ3hGUVVGWE8wRkJRMnhFTzBGQlEwRXNWVUZCU1VNc1VVRkJVU3hMUVVGTFF5eFRRVUZNTEVOQlFXVkRMRWxCUVdZc1JVRkJXanM3UVVGRlFTeFZRVUZKUXl4blFrRkJaMElzUzBGQlMwTXNXVUZCVEN4RFFVRnJRaXhqUVVGc1FpeEZRVUZyUTBZc1NVRkJiRU1zUlVGQmNFSTdPMEZCUlVFc1ZVRkJSMFlzVlVGQlVTeEZRVUZTTEVsQlFXTkJMRlZCUVZVc1RVRkJNMElzUlVGQmJVTTdRVUZEYWtNc1lVRkJTME1zVTBGQlRDeEhRVUZwUWtVc1lVRkJha0k3UVVGRFFTeGhRVUZMYkVRc1UwRkJUQ3hEUVVGbFF5eEhRVUZtTEVOQlFXMUNNa01zYVVKQlFXNUNPMEZCUlVRN1FVRkRSaXhMUVZoRU96dEJRV0ZCTEZOQlFVdHFSU3hSUVVGTUxFTkJRV01zUTBGQlpDeEZRVUZwUW10RkxHZENRVUZxUWl4RFFVRnJReXhQUVVGc1F5eEZRVUV3UXl4WlFVRlZPenRCUVVWc1JDeFhRVUZMTjBNc1UwRkJUQ3hEUVVGbGIwUXNUVUZCWml4RFFVRnpRbElzYVVKQlFYUkNPenRCUVVWQkxGVkJRVWxITEZGQlFWRXNTMEZCUzBNc1UwRkJUQ3hEUVVGbFF5eEpRVUZtTEVWQlFWbzdPMEZCUlVFc1ZVRkJTVU1zWjBKQlFXZENMRXRCUVV0RExGbEJRVXdzUTBGQmEwSXNZMEZCYkVJc1JVRkJhME5HTEVsQlFXeERMRVZCUVhCQ096dEJRVVZCTEZWQlFVZEdMRlZCUVZGSExHRkJRVmdzUlVGQk1FSXNTMEZCUzBZc1UwRkJUQ3hIUVVGcFFpeEZRVUZxUWp0QlFVVXpRaXhMUVZaRU8wRkJWMFFzUjBFelRGazdRVUUwVEZwTExGbEJOVXhaTEhkQ1FUUk1RVHRCUVVGQk96dEJRVU5ZTEZOQlFVczNSQ3hYUVVGTUxFTkJRV2xDT0VRc1JVRkJha0lzUTBGQmIwSXNUVUZCY0VJc1JVRkJNa0lzVlVGQlF6TkdMRXRCUVVRc1JVRkJVenM3UVVGRmJFTXNZVUZCUzJkQ0xGRkJRVXdzUTBGQlkyZERMRTFCUVdRc1EwRkJjVUpvUkN4TlFVRk5aU3hGUVVFelFqdEJRVU5FTEV0QlNFUTdRVUZKUkN4SFFXcE5XVHRCUVd0TldqWkZMR0ZCYkUxWkxIVkNRV3ROUVVNc1IwRnNUVUVzUlVGclRWVTdRVUZCUVRzN1FVRkJRU3h0UmtGQlNDeEZRVUZIT3p0QlFVRkJPenRCUVVOeVFpeFRRVUZMUXl4VFFVRk1MRU5CUVdWRExFbEJRV1lzUTBGQmIwSkdMRTFCUVVrc1JVRkJlRUk3TzBGQlJVRjBSQ3hwUWtGQllTeExRVUZMWWl4UlFVRnNRanM3UVVGRlFTeFRRVUZMWlN4WFFVRk1MRU5CUVdsQ1F5eEhRVUZxUWl4RFFVRnhRanRCUVVOdVFrTXNhMEpCUVZjc1RVRkVVVHRCUVVWc1FrTXNhVUpCUVZVN1FVRkdVU3hMUVVGeVFqczdRVUZMUVN4VFFVRkxiRUlzVVVGQlRDeEhRVUZuUW5ORkxGZEJRVmNzV1VGQlNUczdRVUZGTjBJc1lVRkJTM1pFTEZkQlFVd3NRMEZCYVVKRExFZEJRV3BDTEVOQlFYRkNPMEZCUTI1Q1F5eHZRa0ZCVnl4TlFVUlJPMEZCUld4Q1F5eHRRa0ZCVlR0QlFVWlJMRTlCUVhKQ08wRkJTMFFzUzBGUVpTeEZRVTlrTEVsQlVHTXNRMEZCYUVJN1FVRlJSQ3hIUVhCT1dUdEJRWEZPV25GRUxIZENRWEpPV1N4clEwRnhUbGRzUml4RlFYSk9XQ3hGUVhGT1l6dEJRVU42UWl4UlFVRkhMRU5CUVVNc1MwRkJTMUVzWjBKQlFWUXNSVUZCTWtJc1QwRkJUeXhMUVVGTE1rVXNVVUZCVEN4RFFVRmpiRVFzVFVGQlpDeERRVUZ4UW1wRExFVkJRWEpDTEVOQlFWQTdPMEZCUkVZc1owSkJSMGNzUTBGRE1VSXNTMEZCUzFFc1owSkJRVXdzUTBGQmMwSXJRaXhqUVVGMFFpeERRVUZ4UXpaRExGRkJSRmdzUlVGRmVrSXNTMEZCU3pWRkxHZENRVUZNTEVOQlFYTkNLMElzWTBGQmRFSXNRMEZCY1VOM1FpeFJRVUZ5UXl4RFFVRTRRME1zVjBGQk9VTXNSVUZHZVVJc1EwRklTRHRCUVVGQkxGRkJSM0JDY1VJc1UwRkliMEk3UVVGQlFTeFJRVWRXZGtJc1UwRklWVHM3TzBGQlUzcENMRkZCUVVkMVFpeGpRVUZaTEVOQlFWb3NTVUZCWlhaQ0xHTkJRVmtzU1VGQk9VSXNSVUZCYjBNc1QwRkJUM2RDTEZGQlFWRkRMRWRCUVZJc1EwRkJXU3hMUVVGYUxFTkJRVkE3TzBGQlIzQkRMRk5CUVVzdlJTeG5Ra0ZCVEN4RFFVRnpRbWRHTEZWQlFYUkNMRU5CUVdsRGVFWXNSVUZCYWtNN1FVRkRRVHRCUVVOQkxGTkJRVXRSTEdkQ1FVRk1MRU5CUVhOQ2EwTXNVVUZCZEVJc1EwRkJLMElzUzBGQkwwSTdRVUZEUVN4VFFVRkxjRU1zVlVGQlRDeERRVUZuUW5GRExHVkJRV2hDTzBGQlEwRXNVMEZCUzNKRExGVkJRVXdzUTBGQlowSnpReXhSUVVGb1FpeERRVUY1UWl4TFFVRkxjRU1zWjBKQlFUbENPMEZCUjBRN1FVRjRUMWtzT0VSQmVVOUtPMEZCUTFBN1FVRkRRU3hQUVVGTFVDeFJRVUZNTEVOQlFXTXNRMEZCWkN4RlFVRnBRbTlETEV0QlFXcENPenRCUVVkQk8wRkJRMEVzVFVGQlJ5eERRVUZETEV0QlFVczNRaXhuUWtGQlZDeEZRVUUwUWpzN1FVRkZOVUlzVFVGQlNUaENMRkZCUVZFc1MwRkJTemxDTEdkQ1FVRnFRanRCUVZKUExFMUJVMFlyUWl4alFWUkZMRWRCVXpSQ1JDeExRVlExUWl4RFFWTkdReXhqUVZSRk8wRkJRVUVzVFVGVFlVTXNWMEZVWWl4SFFWTTBRa1lzUzBGVU5VSXNRMEZUWVVVc1YwRlVZanM3TzBGQlYxQkdMRkZCUVUxSExGRkJRVTRzUTBGQlpVWXNZMEZCWml4RlFVRXJRa01zVjBGQkwwSTdRVUZEUVVZc1VVRkJUVWtzVVVGQlRpeERRVUZsTEVsQlFXWTdPMEZCUlVFc1QwRkJTM0JETEZWQlFVd3NRMEZCWjBKeFF5eGxRVUZvUWp0QlFVTkJMRTlCUVV0eVF5eFZRVUZNTEVOQlFXZENjME1zVVVGQmFFSXNRMEZCZVVKT0xFdEJRWHBDTzBGQlEwUXNRMEY2VUZrc2EwWkJNRkJWTzBGQlFVRTdPMEZCUVVFc1RVRkJURzFFTEVWQlFVc3NkVVZCUVVZc1EwRkJSVHM3TzBGQlJYSkNha1VzWlVGQllTeExRVUZMYTBVc1ZVRkJiRUk3UVVGRFFTeFBRVUZMUVN4VlFVRk1MRWRCUVd0Q1ZDeFhRVUZYTEZsQlFVazdRVUZETDBJc1VVRkJSeXhEUVVGRExFOUJRVXN6UlN4VlFVRk1MRU5CUVdkQ2NVWXNWVUZCY0VJc1JVRkJaME03TzBGQlJXaERMRkZCUVVseVJDeFJRVUZSTEU5QlFVdG9ReXhWUVVGTUxFTkJRV2RDYzBZc1ZVRkJhRUlzUTBGQk1rSXNRMEZCTTBJc1EwRkJXanM3UVVGRlFTeFhRVUZMZEVZc1ZVRkJUQ3hEUVVGblFuRkRMR1ZCUVdoQ08wRkJRMEVzVjBGQlMzSkRMRlZCUVV3c1EwRkJaMEp6UXl4UlFVRm9RaXhEUVVGNVFrNHNTMEZCZWtJN08wRkJSVUVzVjBGQlN6bENMR2RDUVVGTUxFZEJRWGRDT0VJc1MwRkJlRUk3TzBGQlJVRTdRVUZEUVN4WFFVRkxOMElzZVVKQlFVd3NSMEZCYVVNMlFpeE5RVUZOUXl4alFVRjJRenRCUVVOQkxGZEJRVXMzUWl4elFrRkJUQ3hIUVVFNFFqUkNMRTFCUVUxRkxGZEJRWEJETzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVWRUxFZEJiRUpwUWl4RlFXdENhRUpwUkN4RlFXeENaMElzUTBGQmJFSTdRVUZ0UWtRc1EwRm9VbGtzTkVWQmFWSkhTU3hSUVdwU1NDeEZRV2xTV1R0QlFVTjJRaXhQUVVGTFZpeFJRVUZNTEVkQlFXZENWU3hSUVVGb1FqdEJRVVZFTEVOQmNGSlpMSE5GUVhGU1FUdEJRVUZCT3p0QlFVVllPMEZCUTBFc1QwRkJTeTlGTEZkQlFVd3NRMEZCYVVJNFJDeEZRVUZxUWl4RFFVRnZRaXhOUVVGd1FpeEZRVUV5UWl4VlFVRkRNMFlzUzBGQlJDeEZRVUZUT3p0QlFVVnNReXhSUVVGSmIwWXNVVUZCVVN4UFFVRkxjRVVzVVVGQlRDeERRVUZqYlVJc1NVRkJaQ3hIUVVGeFFtMUVMRWxCUVhKQ0xFVkJRVm83TzBGQlJVRXNVVUZCU1VNc1owSkJRV2RDTEU5QlFVdDJSU3hSUVVGTUxFTkJRV052UWl4SlFVRmtMRU5CUVcxQ0xHTkJRVzVDTEVWQlFXMURhMFFzU1VGQmJrTXNSVUZCY0VJN08wRkJSVUVzVVVGQlIwWXNWVUZCVVVjc1lVRkJXQ3hGUVVFd1FpeFBRVUZMZGtVc1VVRkJUQ3hEUVVGamJVSXNTVUZCWkN4RFFVRnRRaXhGUVVGdVFqczdRVUZGTVVJc1YwRkJTemhFTEhOQ1FVRk1MRU5CUVRSQ2FrY3NUVUZCVFdVc1JVRkJiRU03UVVGRlJDeEhRVlpFTzBGQlYwUXNRMEZ1VTFrc09FVkJiMU5KTzBGQlEyWXNVVUZCVFN4WFFVRk9PMEZCUTBRc1EwRjBVMWtzTUVWQmRWTkZPMEZCUTJJc1VVRkJUU3hYUVVGT08wRkJRMFFzUTBGNlUxa3NaMFpCTUZOTE8wRkJRVUU3TzBGQlJXaENMRTlCUVV0U0xGVkJRVXdzUTBGQlowSnZSaXhGUVVGb1FpeERRVUZ0UWl4UFFVRnVRaXhGUVVFeVFpeGhRVUZIT3p0QlFVVTFRaXhYUVVGTE9VTXNTVUZCVER0QlFVTkVMRWRCU0VRN08wRkJTMEY2UXl4SlFVRkZMRXRCUVVzeVFpeFhRVUZNTEVOQlFXbENPRVVzVTBGQmJrSXNSVUZCTmtJc1MwRkJTemxHTEVWQlFXeERMRVZCUVhORE5FVXNSVUZCZEVNc1EwRkJlVU1zVDBGQmVrTXNSVUZCYVVRc1lVRkJSenM3UVVGRmJFUXNWMEZCU3pkRExFbEJRVXc3UVVGRFJDeEhRVWhFT3p0QlFVdEJMRTlCUVVzNVFpeFJRVUZNTEVOQlFXTXlSU3hGUVVGa0xFTkJRV2xDTEUxQlFXcENMRVZCUVhkQ0xHRkJRVWNzUTBGRk1VSXNRMEZHUkRzN1FVRkxRWFpHTEVsQlFVVXNTMEZCUzBjc1ZVRkJVQ3hGUVVGdFFtOUdMRVZCUVc1Q0xFTkJRWE5DTEU5QlFYUkNMRVZCUVRoQ0xHRkJRVWM3UVVGREwwSXNWMEZCUzIxQ0xGTkJRVXdzUjBGQmFVSXpRaXhGUVVGRk5FSXNUVUZCYmtJN1FVRkRRU3hYUVVGTGJFVXNTVUZCVER0QlFVTkJMRmRCUVV0TExFMUJRVXc3UVVGRFJDeEhRVXBFT3p0QlFVOUJMRTlCUVV0c1F5eFJRVUZNTEVOQlFXTXlSU3hGUVVGa0xFTkJRV2xDTEU5QlFXcENMRVZCUVhsQ0xFdEJRVXR4UWl4cFFrRkJUQ3hEUVVGMVFrTXNTVUZCZGtJc1EwRkJORUlzU1VGQk5VSXNRMEZCZWtJN1FVRkRRU3hQUVVGTGFrY3NVVUZCVEN4RFFVRmpNa1VzUlVGQlpDeERRVUZwUWl4TlFVRnFRaXhGUVVGM1FpeExRVUZMZFVJc1owSkJRVXdzUTBGQmMwSkVMRWxCUVhSQ0xFTkJRVEpDTEVsQlFUTkNMRU5CUVhoQ08wRkJSVVFzUTBGeVZWa3NhMFpCZFZWTk9VSXNRMEYyVlU0c1JVRjFWVkU3TzBGQlJXNUNPenRCUVVadFFpeE5RVWxrTVVVc1QwRktZeXhIUVVsSUxFdEJRVXRMTEU5QlNrWXNRMEZKWkV3c1QwRktZenM3TzBGQlRXNUNMRTFCUVVjc1lVRkJUekJITEU5QlFWQXNRMEZCWlVNc1IwRkJiRUlzUlVGQmMwSTdPMEZCUlhCQ2FFZ3NUVUZCUlN4TFFVRkxWeXhGUVVGUUxFVkJRVmN5UWl4SFFVRllMRU5CUVdVN1FVRkRZakpGTEdGQlFVMW9TQ3hUUVVGVFF5eEpRVUZVTEVOQlFXTm5TQ3hYUVVGa0xFZEJRVEJDTEVsQlJHNUNPMEZCUlZwRExHTkJRVTlzU0N4VFFVRlRReXhKUVVGVUxFTkJRV05yU0N4WlFVRmtMRWRCUVRKQ0xFbEJSblJDTzBGQlIxcERMR2RDUVVGVExGVkJTRWM3UVVGSldrTXNXVUZCU3l4SFFVcFBMRVZCU1VoRExFdEJRVWtzUjBGS1JDeEZRVWxMTEZkQlFWVnNTRHRCUVVwbUxFdEJRV1k3TzBGQlQwRTdRVUZEUkN4SFFWWkVMRTFCVlVzN1FVRkRTRXdzVFVGQlJTeExRVUZMVnl4RlFVRlFMRVZCUVZjeVFpeEhRVUZZTEVOQlFXVTdRVUZEWWl0RkxHZENRVUZUTEU5QlJFazdRVUZGV2tNc1dVRkJTeXhIUVVaUExFVkJSVWhETEV0QlFVa3NSMEZHUkN4RlFVVkxMRmRCUVZWc1NEdEJRVVptTEV0QlFXWTdRVUZKUkR0QlFVTkVTaXhYUVVGVFF5eEpRVUZVTEVOQlFXTnpTQ3hUUVVGa0xFZEJRVEJDTEVOQlFURkNPMEZCUTBGMlNDeFhRVUZUZDBnc1pVRkJWQ3hEUVVGNVFrUXNVMEZCZWtJc1IwRkJjVU1zUTBGQmNrTTdRVUZEUkN4RFFTOVdXU3hyUmtGblYwMDdRVUZCUVN4TlFVTmFia2dzVDBGRVdTeEhRVU5FTEV0QlFVdExMRTlCUkVvc1EwRkRXa3dzVDBGRVdUczdRVUZGYWtJc1RVRkJSeXhoUVVGUE1FY3NUMEZCVUN4RFFVRmxReXhIUVVGc1FpeEZRVUZ6UWp0QlFVTndRbWhJTEUxQlFVVXNTMEZCUzFjc1JVRkJVQ3hGUVVGWE1rSXNSMEZCV0N4RFFVRmxMRVZCUVVVclJTeFZRVUZUTEU5QlFWZ3NSVUZCYlVKRExFMUJRVXNzUjBGQmVFSXNSVUZCTkVKRExFdEJRVWtzUjBGQmFFTXNSVUZCYjBNc1YwRkJWV3hJTEU5QlFUbERMRVZCUVdZN1FVRkRSRHRCUVVOR0xFTkJjbGRaTERCRVFYTlhUanRCUVVGQk96dEJRVU5NTEU5QlFVdDFSU3hwUWtGQlREczdRVUZGUVN4UFFVRkxPRU1zVlVGQlREczdRVUZIUVN4UFFVRkxReXhsUVVGTU8wRkJRMEVzVDBGQlN6ZEZMRTFCUVV3N08wRkJSVUVzVDBGQlN6aEZMR05CUVV3N08wRkJTVUVzVDBGQlMzSkRMRVZCUVV3c1EwRkJVU3hWUVVGU0xFVkJRVzFDTEZWQlFVTXpSaXhMUVVGRUxFVkJRVk03TzBGQlJURkNMRmRCUVV0dFFpeG5Ra0ZCVEN4SlFVRjFRaXhQUVVGTFFTeG5Ra0ZCVEN4RFFVRnpRamhITEVsQlFYUkNMRk5CUVdkRGFra3NTMEZCYUVNc1EwRkJka0k3UVVGRFJDeEhRVWhFT3p0QlFVMUJMRTlCUVVzNFF5eEpRVUZNTzBGQlIwUXNRMEUxV0Zrc2JVSkJObGhhTzBGQlEwUkhMRTlCUVVrc1JVRkVTRHRCUVVWQlowTXNjVUpCUVd0Q0xHMUNRVVpzUWp0QlFVZEJhVVFzWTBGQlZ5eHJRa0ZJV0R0QlFVbEJja0lzWVVGQlZTeHZRa0ZLVmp0QlFVdEJjMElzWTBGQlZ5eHhRa0ZNV0R0QlFVMUJia2NzV1VGQlV5eDFRa0ZPVkR0QlFVOUJiMGNzYVVKQlFXTXNiMEpCVUdRN1FVRlJRVU1zYTBKQlFXVTdRVUZTWml4RFFUZFlXU3hESWl3aVptbHNaU0k2SWpNdWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUpwYlhCdmNuUWdlMFYyWlc1MExFSnliM2RsY24wZ1puSnZiU0FuTGk5amIzSmxKenRjY2x4dVhISmNibWx0Y0c5eWRDQlRiV2xzWlNCbWNtOXRJQ2N1TDNOdGFXeGxKenRjY2x4dVhISmNibVY0Y0c5eWRDQmtaV1poZFd4MElFVjJaVzUwTG1WNGRHVnVaQ2g3WEhKY2JpQWdhVzVwZENod2NtOXdjeWw3WEhKY2JpQWdJQ0IwYUdsekxsOXpkWEJsY2loMGNuVmxLVHRjY2x4dVhISmNiaUFnSUNCMGFHbHpMbVJsWm1GMWJIUmZiM0IwYVc5dWN5QTlJSHRjY2x4dUlDQWdJQ0FnSkdOdmJuUmhhVzVsY2lBNklDUW9aRzlqZFcxbGJuUXVZbTlrZVNsY2NseHVJQ0FnSUNBZ0xDUmxiRjloWTNScGRtVWdPaUFuSXoxM1BTZGNjbHh1SUNBZ0lDQWdMSFJoWjE5dVlXMWxJRG9nSjJWa2FYUnZjaTF2ZG04blhISmNiaUFnSUNBZ0lDeDZYMmx1WkdWNElEb2dNVEF3WEhKY2JpQWdJQ0FnSUN4amIyNW1hV2NnT2lCN1hISmNibHh5WEc0Z0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUN4amIyNTJaWEowWDJsdWRHOWZaVzUwYVhScFpYTWdPaUJtWVd4elpWeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJSEJ5YjNCeklEMGdUMkpxWldOMExtRnpjMmxuYmloN2ZTeDBhR2x6TG1SbFptRjFiSFJmYjNCMGFXOXVjeXh3Y205d2N5azdYSEpjYmlBZ0lDQmNjbHh1SUNBZ0lIUm9hWE11YjNCMGFXOXVjeUE5SUhCeWIzQnpPMXh5WEc0Z0lDQWdYSEpjYmlBZ0lDQjBhR2x6TG1Wc08xeHlYRzRnSUNBZ2RHaHBjeTRrWTI5dWRHRnBibVZ5SUQwZ2NISnZjSE11SkdOdmJuUmhhVzVsY2p0Y2NseHVJQ0FnSUhSb2FYTXVKR052Ym5SbGJuUTdYSEpjYmlBZ0lDQjBhR2x6TGlSbGJXOXFhVjlvYjJ4a1pYSTdYSEpjYmlBZ0lDQjBhR2x6TGlSbGJGOTBZWEpuWlhRN1hISmNiaUFnSUNCMGFHbHpMblJoWjE5dVlXMWxJRDBnY0hKdmNITXVkR0ZuWDI1aGJXVTdYSEpjYmlBZ0lDQjBhR2x6TGw5b1lXNWtiR1ZmWTI5dGNHeGxkR1VnUFNCd2NtOXdjeTV2YmtOdmJYQnNaWFJsTzF4eVhHNWNjbHh1SUNBZ0lIUm9hWE11WDNObGJHVmpkR2x2YmlBOUlHZGxkRk5sYkdWamRHbHZiaWdwTzF4eVhHNGdJQ0FnZEdocGN5NWZiR0Z6ZEY5bFpHbDBYM0poYm1kbE8xeHlYRzRnSUNBZ2RHaHBjeTVmYkdGemRGOWxaR2wwWDNOMFlYSjBRMjl1ZEdGcGJtVnlPMXh5WEc0Z0lDQWdkR2hwY3k1ZmJHRnpkRjlsWkdsMFgzTjBZWEowVDJabWMyVjBPMXh5WEc1Y2NseHVJQ0FnSUhSb2FYTXVYMmwwZGw5dGMyYzdYSEpjYmx4eVhHNGdJQ0FnZEdocGN5NGtaV3hmWVdOMGFYWmxJRDBnSkNod2NtOXdjeTRrWld4ZllXTjBhWFpsS1R0Y2NseHVYSEpjYmlBZ0lDQjBhR2x6TGw5amNtVmhkR1ZEYUdsc1pDZ3BPMXh5WEc1Y2NseHVJQ0FnSUhSb2FYTXVYM05sZEV4aGMzUkZaR2wwUld3b2RHaHBjeTRrWTI5dWRHVnVkQ2s3WEhKY2JseHlYRzRnSUNBZ0x5OWpiMjV6YjJ4bExteHZaeWgwYUdsekxtTnZibk4wY25WamRHOXlMa1ZNWDFOTlNVeEZMSFJvYVhNdVpXd3BPMXh5WEc0Z0lDQWdMeTlqYjI1emIyeGxMbXh2Wnlna0tIUm9hWE11WTI5dWMzUnlkV04wYjNJdVJVeGZVMDFKVEVVc2RHaHBjeTVsYkNsYk1GMHBPMXh5WEc1Y2NseHVJQ0FnSUhSb2FYTXVaVzF2YW1sZmNHRnVaV3dnUFNCdVpYY2dVMjFwYkdVb2UxeHlYRzRnSUNBZ0lDQmpiMjUwWVdsdVpYSTZKQ2gwYUdsekxtTnZibk4wY25WamRHOXlMa1ZNWDFOTlNVeEZMSFJvYVhNdVpXd3BYSEpjYmlBZ0lDQjlLVHRjY2x4dVhISmNiaUFnSUNCMGFHbHpMbDl5ZFc0b0tUdGNjbHh1SUNBZ0lDOHZZMjl1YzI5c1pTNXNiMmNvSjJWa2FYUnZjaUJqYjI1emRISjFZM1J2Y2ljcE8xeHlYRzRnSUgxY2NseHVJQ0FzWTJ4bFlYSW9LWHRjY2x4dVhISmNiaUFnSUNCMGFHbHpMaVJqYjI1MFpXNTBMbWgwYld3b2RHaHBjeTRrWTI5dWRHVnVkQzVoZEhSeUtDZGtaV1poZFd4MFZtRnNkV1VuS1NBZ0tUdGNjbHh1SUNBZ0lIUm9hWE11SkdOdmJuUmxiblJiTUYwdVkyeGhjM05NYVhOMExtRmtaQ2duWkdWbVlYVnNkRjkyWVd4MVpTMXZkbThuS1R0Y2NseHVJQ0FnSUZ4eVhHNWNjbHh1SUNBZ0lHTnNaV0Z5VkdsdFpXOTFkQ2gwYUdsekxsOXBkSFpmY0hWaUtUdGNjbHh1SUNBZ1hISmNiaUFnSUNCMGFHbHpMaVJ0YzJkZmFHOXNaR1Z5TG1OemN5aDdYSEpjYmlBZ0lDQWdJSFJ5WVc1emFYUnBiMjQ2SjI1dmJtVW5YSEpjYmlBZ0lDQWdJQ3gwY21GdWMyWnZjbTA2SjNSeVlXNXpiR0YwWlROa0tEQXNMVGt3SlN3d0tTZGNjbHh1SUNBZ0lIMHBPMXh5WEc1Y2NseHVYSEpjYmlBZ2ZWeHlYRzRnSUN4emFHOTNLQ2w3WEhKY2JpQWdJQzh2SUdOdmJuTnZiR1V1Ykc5bktDZHphR2wzSnlrN1hISmNiaUFnSUNBa0tIUm9hWE11Wld3cExuTm9iM2NvS1R0Y2NseHVJQ0I5WEhKY2JpQWdMR2hwWkdVb0tYdGNjbHh1SUNBZ0lDOHZaR1ZpZFdkblpYSTdYSEpjYmx4eVhHNGdJQ0FnTHk5amIyNXpiMnhsTG14dlp5Z25hR2xrWlNjcE8xeHlYRzRnSUNBZ0pDaDBhR2x6TG1Wc0tTNW9hV1JsS0NrN1hISmNiaUFnZlZ4eVhHNGdJQ3hmWTNKbFlYUmxRMmhwYkdRb0tYdGNjbHh1SUNBZ0lIUm9hWE11Wld3Z1BTQmtiMk4xYldWdWRDNWpjbVZoZEdWRmJHVnRaVzUwS0hSb2FYTXVkR0ZuWDI1aGJXVXBPMXh5WEc0Z0lDQWdkR2hwY3k0a1kyOXVkR0ZwYm1WeUxtRndjR1Z1WkNoMGFHbHpMbVZzS1R0Y2NseHVJQ0FnSUhSb2FYTXVaV3d1WTJ4aGMzTk1hWE4wTG1Ga1pDaDBhR2x6TG1OdmJuTjBjblZqZEc5eUxrTk1VeWs3WEhKY2JpQWdJQ0F2THlCMGFHbHpMbVZzTG1sdWJtVnlTRlJOVENBOUlHQmNjbHh1SUNBZ0lDOHZJQ0FnUEdScGRpQmpiMjUwWlc1MExXOTJiejQ4TDJScGRqNWNjbHh1SUNBZ0lDOHZJR0E3WEhKY2JseHlYRzRnSUNBZ0x5OGdkR2hwY3k0a1kyOXVkR1Z1ZENBOUlDUW9KMlJwZGx0amIyNTBaVzUwTFc5MmIxMG5MSFJvYVhNdVpXd3BPMXh5WEc0Z0lDQWdMeTlrWldKMVoyZGxjanRjY2x4dVhISmNiaUFnZlZ4eVhHNGdJQ3hmWm05amRYTW9aR2xtWmw5dlptWnpaWFE5TUNsN1hISmNiaUFnSUNCMGFHbHpMaVJqYjI1MFpXNTBXekJkTG1adlkzVnpLQ2s3WEhKY2JpQWdJQ0JjY2x4dUlDQWdJR2xtS0NGMGFHbHpMbDlzWVhOMFgyVmthWFJmY21GdVoyVWdLU0J5WlhSMWNtNDdYSEpjYmx4eVhHNGdJQ0FnZG1GeUlISmhibWRsSUQwZ2RHaHBjeTVmYkdGemRGOWxaR2wwWDNKaGJtZGxPMXh5WEc0Z0lDQWdkbUZ5SUh0emRHRnlkRU52Ym5SaGFXNWxjaXh6ZEdGeWRFOW1abk5sZEgwZ1BTQnlZVzVuWlR0Y2NseHVYSEpjYmlBZ0lDQnlZVzVuWlM1elpYUlRkR0Z5ZENoemRHRnlkRU52Ym5SaGFXNWxjaXdnYzNSaGNuUlBabVp6WlhRclpHbG1abDl2Wm1aelpYUXBPMXh5WEc0Z0lDQWdjbUZ1WjJVdVkyOXNiR0Z3YzJVb2RISjFaU2s3WEhKY2JpQWdYSEpjYmlBZ0lDQjBhR2x6TGw5elpXeGxZM1JwYjI0dWNtVnRiM1psUVd4c1VtRnVaMlZ6S0NrN1hISmNiaUFnSUNCMGFHbHpMbDl6Wld4bFkzUnBiMjR1WVdSa1VtRnVaMlVvY21GdVoyVXBPMXh5WEc0Z0lIMWNjbHh1SUNBc1gzSmxjMEZrWVhCMFpYSW9jeWw3WEhKY2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1dmNIUnBiMjV6TG1OdmJuWmxjblJmYVc1MGIxOWxiblJwZEdsbGN6OWNjbHh1SUNBZ0lDQWdkR2hwY3k1ZlkyOXVkbVZ5ZEVWdGIycHBTVzVVYjBWdWRHbDBhV1Z6S0hNcE9seHlYRzRnSUNBZ0lDQnpPMXh5WEc0Z0lIMWNjbHh1SUNBdktpb2dYSEpjYmlBZ0lDb2c1NVNvNUxxTzVvcUs1NVNvZFhSbU1UYm52SmJub0lIbm1vVGxyWmZucktib3Zhem1qYUxtaUpEbHJwN2t2WlBsclpmbnJLYnZ2SXprdTZYa3ZwdmxrSTdsajdEbHJaamxncWdnWEhKY2JpQWdJQ29nUUhCaGNtRnRJQ0I3YzNSeWFXNW5mU0J6ZEhJZzViQ0c2S2FCNkwyczVvMmk1NXFFNWEyWDU2eW01TGl5Nzd5TTVZVzI1TGl0NVpDcjVweUpkWFJtTVRibHJaZm5yS2Jsc0lib29xdm9oNnJsaXFqbW80RGxoN29nWEhKY2JpQWdJQ29nUUhKbGRIVnliaUI3YzNSeWFXNW5mU0FnSUNBZzZMMnM1bzJpNVpDTzU1cUU1YTJYNTZ5bTVMaXk3N3lNZFhSbU1UYmxyWmZucktibHNJYm9vcXZvdmF6bWphTG1pSkFtSTNoNGVIZzc1YjJpNWJ5UDU1cUU1YTZlNUwyVDVhMlg1NnltSUZ4eVhHNGdJQ0FxTHlBZ1hISmNiaUFnTEY5amIyNTJaWEowUlcxdmFtbEpibFJ2Ulc1MGFYUnBaWE1vY3lsN1hISmNiaUFnSUNCeklEMGdjeTV5WlhCc1lXTmxLQzliWEZ4MVpEZ3dNQzFjWEhWa1ltWm1YVnRjWEhWa1l6QXdMVnhjZFdSbVptWmRMMmNzSUNoamFHRnlLVDArZXlBZ1hISmNiaUFnSUNBZ0lIWmhjaUJJTENCTUxDQmpiMlJsT3lBZ1hISmNiaUFnSUNBZ0lHbG1JQ2hqYUdGeUxteGxibWQwYUQwOVBUSXBJSHNnSUZ4eVhHNGdJQ0FnSUNBZ0lFZ2dQU0JqYUdGeUxtTm9ZWEpEYjJSbFFYUW9NQ2s3SUM4dklPV1BsdVdIdXVtcm1PUzlqU0FnWEhKY2JpQWdJQ0FnSUNBZ1RDQTlJR05vWVhJdVkyaGhja052WkdWQmRDZ3hLVHNnTHk4ZzVZK1c1WWU2NUwyTzVMMk5JQ0JjY2x4dUlDQWdJQ0FnSUNCamIyUmxJRDBnS0VnZ0xTQXdlRVE0TURBcElDb2dNSGcwTURBZ0t5QXdlREV3TURBd0lDc2dUQ0F0SURCNFJFTXdNRHNnTHk4ZzZMMnM1bzJpNTY2WDVyT1ZJQ0JjY2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWENJbUkxd2lJQ3NnWTI5a1pTQXJJRndpTzF3aU95QWdYSEpjYmlBZ0lDQWdJSDFsYkhObGV5QWdYSEpjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR05vWVhJN0lDQmNjbHh1SUNBZ0lDQWdmU0FnWEhKY2JpQWdJQ0I5S1RzZ0lGeHlYRzRnSUNBZ2NtVjBkWEp1SUhNN0lDQmNjbHh1SUNCOVhISmNiaUFnTEY5bFpHbDBUR0Z6ZEVOb2FXeGtLQ2w3WEhKY2JpQWdJQ0IyWVhJZ1kyaHBiR1FnUFNCMGFHbHpMaVJqYjI1MFpXNTBXekJkTG1Ob2FXeGtjbVZ1TzF4eVhHNGdJQ0FnYVdZb0lXTm9hV3hrS1NCeVpYUjFjbTRnZEdocGN5NGtZMjl1ZEdWdWREdGNjbHh1WEhKY2JpQWdJQ0IyWVhJZ2FTQTlJREE3WEhKY2JseHlYRzRnSUNBZ0x5L2xwb0xtbUsvbG03N25pWWNzNUwyRzVwaXY1cGl2NXB5QTVaQ081TGlBNUxpcVkyaHBiR1RwZ3FQa3VZamt1Wi9tbUsvbWo1TGxoYVhsaUxBa1kyOXVkR1Z1ZE9TNHJlKzhnVnh5WEc0Z0lDQWdkbUZ5SUdZZ1BTQW9ZMmhwYkdRc2FXUjRLVDArZTF4eVhHNGdJQ0FnSUNCcFppZ3JLMmsrTVRBd01EQXdLU0J5WlhSMWNtNGdZV3hsY25Rb0orYWZwZWFKdnVhc29lYVZzT2kvaCtXa21uRjNjU2NwTzF4eVhHNWNjbHh1SUNBZ0lDQWdhV1lvYVdSNFBEQWdmSHdnSVdOb2FXeGtLU0J5WlhSMWNtNGdkR2hwY3k0a1kyOXVkR1Z1ZER0Y2NseHVJQ0FnSUNBZ1hISmNiaUFnSUNBZ0lIWmhjaUJ1YjJSbFgyNWhiV1VnUFNCamFHbHNaRnRwWkhoZExtNXZaR1ZPWVcxbExuUnZURzkzWlhKRFlYTmxLQ2s3WEhKY2JseHlYRzRnSUNBZ0lDQXZMMmx2YytpK2srV0ZwZWVhaE9XR2hlV3V1ZWVwdXVTNW4rV3RtT1djcU9TNHFtSnlYSEpjYmlBZ0lDQWdJR2xtS0c1dlpHVmZibUZ0WlQwOVBTZGljaWNtSm1sa2VEMDlQV05vYVd4a0xteGxibWQwYUMweEtTQnlaWFIxY200Z2RHaHBjeTRrWTI5dWRHVnVkRHRjY2x4dUlDQWdJQ0FnTHk5Y2NseHVJQ0FnSUNBZ2FXWW9ibTlrWlY5dVlXMWxJRDA5UFNkcGJXY25KaVpwWkhnOVBUMWphR2xzWkM1c1pXNW5kR2d0TVNrZ2NtVjBkWEp1SUNoMGFHbHpMaVJqYjI1MFpXNTBLVHRjY2x4dUlDQWdJQ0FnTHk5cFppaHViMlJsWDI1aGJXVWdQVDA5SjJsdFp5Y21KaUJqYUdsc1pGdHBaSGhkTG1Oc1lYTnpUR2x6ZEM1amIyNTBZV2x1Y3lnbmMyMXBiR1V0YjNadkp5a3BJSEpsZEhWeWJpQjBhR2x6TGlSamIyNTBaVzUwTzF4eVhHNGdJQ0FnSUNCcFppaHViMlJsWDI1aGJXVWdJVDBuYVcxbkp5a2djbVYwZFhKdUlDUW9ZMmhwYkdSYmFXUjRYU2s3WEhKY2JpQWdJQ0JjY2x4dUlDQWdJQ0FnY21WMGRYSnVJR1lvWTJocGJHUXNMUzFwWkhncE8xeHlYRzRnSUNBZ0lDQmNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0J5WlhSMWNtNGdaaWhqYUdsc1pDeGphR2xzWkM1c1pXNW5kR2d0TVNrN1hISmNibHh5WEc0Z0lIMWNjbHh1SUNBc1gySnBibVJFWldaaGRXeDBWbUZzZFdVb0tYdGNjbHh1SUNBZ1hISmNiaUFnSUNCMllYSWdlME5NVTE5RVJVWkJWVXhVWDFaQlRGVkZmU0E5SUhSb2FYTXVZMjl1YzNSeWRXTjBiM0k3WEhKY2JseHlYRzRnSUNBZ2RHaHBjeTVqYkdWaGNpZ3BPMXh5WEc1Y2NseHVJQ0FnSUM4dlkyOXVjMjlzWlM1c2IyY29kR2hwY3k0a1kyOXVkR1Z1ZENrN1hISmNiaUFnSUNCMGFHbHpMaVJqYjI1MFpXNTBMbWgwYld3b2RHaHBjeTRrWTI5dWRHVnVkQzVoZEhSeUtDZGtaV1poZFd4MFZtRnNkV1VuS1NBZ0tUdGNjbHh1SUNBZ0lIUm9hWE11SkdOdmJuUmxiblJiTUYwdVkyeGhjM05NYVhOMExtRmtaQ2hEVEZOZlJFVkdRVlZNVkY5V1FVeFZSU2s3WEhKY2JseHlYRzRnSUNBZ2RHaHBjeTRrWTI5dWRHVnVkRnN3WFM1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NkaWJIVnlKeXhtZFc1amRHbHZiaWhsS1h0Y2NseHVJQ0FnSUNBZ0x5OWpiMjV6YjJ4bExteHZaeWduWW14MWNpY3BPMXh5WEc0Z0lDQWdJQ0IyWVhJZ2FIUnRiRjhnUFNCMGFHbHpMbWx1Ym1WeVNGUk5UQzUwY21sdEtDazdYSEpjYmx4eVhHNGdJQ0FnSUNCMllYSWdaR1ZtWVhWc2RGOTJZV3gxWlNBOUlIUm9hWE11WjJWMFFYUjBjbWxpZFhSbEtDZGtaV1poZFd4MFZtRnNkV1VuS1M1MGNtbHRLQ2s3WEhKY2JpQWdJQ0FnSUZ4eVhHNGdJQ0FnSUNCcFppaG9kRzFzWHowOVBTY25JSHg4SUdoMGJXeGZJRDA5UFNBblBHSnlQaWNnS1h0Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TG1sdWJtVnlTRlJOVENBOUlHUmxabUYxYkhSZmRtRnNkV1U3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTVqYkdGemMweHBjM1F1WVdSa0tFTk1VMTlFUlVaQlZVeFVYMVpCVEZWRktUdGNjbHh1WEhKY2JpQWdJQ0FnSUgxY2NseHVJQ0FnSUgwcE8xeHlYRzVjY2x4dUlDQWdJSFJvYVhNdUpHTnZiblJsYm5SYk1GMHVZV1JrUlhabGJuUk1hWE4wWlc1bGNpZ25abTlqZFhNbkxHWjFibU4wYVc5dUtDbDdYSEpjYmx4eVhHNGdJQ0FnSUNCMGFHbHpMbU5zWVhOelRHbHpkQzV5WlcxdmRtVW9RMHhUWDBSRlJrRlZURlJmVmtGTVZVVXBPMXh5WEc1Y2NseHVJQ0FnSUNBZ2RtRnlJR2gwYld4ZklEMGdkR2hwY3k1cGJtNWxja2hVVFV3dWRISnBiU2dwTzF4eVhHNWNjbHh1SUNBZ0lDQWdkbUZ5SUdSbFptRjFiSFJmZG1Gc2RXVWdQU0IwYUdsekxtZGxkRUYwZEhKcFluVjBaU2duWkdWbVlYVnNkRlpoYkhWbEp5a3VkSEpwYlNncE8xeHlYRzVjY2x4dUlDQWdJQ0FnYVdZb2FIUnRiRjg5UFQxa1pXWmhkV3gwWDNaaGJIVmxLU0IwYUdsekxtbHVibVZ5U0ZSTlRDQTlJQ2NuTzF4eVhHNWNjbHh1SUNBZ0lIMHBPMXh5WEc0Z0lIMWNjbHh1SUNBc1gzQnBZMnRGYlc5cWFTZ3BlMXh5WEc0Z0lDQWdkR2hwY3k1bGJXOXFhVjl3WVc1bGJDNXZiaWduY0dsamF5Y3NLSEJ5YjNCektUMCtlMXh5WEc0Z0lDQWdJQ0JjY2x4dUlDQWdJQ0FnZEdocGN5NGtZMjl1ZEdWdWRDNWhjSEJsYm1Rb2NISnZjSE11Wld3cE8xeHlYRzRnSUNBZ2ZTazdYSEpjYmlBZ2ZWeHlYRzRnSUN4ZlpHbHpjR3hoZVUxelp5aHRjMmNzZTMwOWUzMHBlMXh5WEc0Z0lDQWdkR2hwY3k0a2JYTm5YM1JsZUhRdWRHVjRkQ2h0YzJjckp5Y3BPMXh5WEc0Z0lDQmNjbHh1SUNBZ0lHTnNaV0Z5VkdsdFpXOTFkQ2gwYUdsekxsOXBkSFpmYlhObktUdGNjbHh1WEhKY2JpQWdJQ0IwYUdsekxpUnRjMmRmYUc5c1pHVnlMbU56Y3loN1hISmNiaUFnSUNBZ0lIUnlZVzV6YVhScGIyNDZKMjV2Ym1VblhISmNiaUFnSUNBZ0lDeDBjbUZ1YzJadmNtMDZKM1J5WVc1emJHRjBaVE5rS0RBc01DVXNNQ2tuWEhKY2JpQWdJQ0I5S1R0Y2NseHVYSEpjYmlBZ0lDQjBhR2x6TGw5cGRIWmZiWE5uSUQwZ2MyVjBWR2x0Wlc5MWRDZ29LVDArZTF4eVhHNWNjbHh1SUNBZ0lDQWdkR2hwY3k0a2JYTm5YMmh2YkdSbGNpNWpjM01vZTF4eVhHNGdJQ0FnSUNBZ0lIUnlZVzV6YVhScGIyNDZKMjV2Ym1VblhISmNiaUFnSUNBZ0lDQWdMSFJ5WVc1elptOXliVG9uZEhKaGJuTnNZWFJsTTJRb01Dd3RPVEFsTERBcEoxeHlYRzRnSUNBZ0lDQjlLVHRjY2x4dVhISmNiaUFnSUNCOUxESXpNek1wTzF4eVhHNGdJSDFjY2x4dUlDQXNYMkZ3Y0dWdVpGUnZUR0Z6ZEUxdlpHbG1hWGxGYkNobGJDbDdYSEpjYmlBZ0lDQnBaaWdoZEdocGN5NWZiR0Z6ZEY5bFpHbDBYM0poYm1kbEtTQnlaWFIxY200Z2RHaHBjeTVmYkdGemRGOWxiQzVoY0hCbGJtUW9aV3dwTzF4eVhHNWNjbHh1SUNBZ0lIWmhjaUJiYm05a1pWOTBlWEJsTEc1dlpHVmZibUZ0WlYwZ1BTQmJYSEpjYmlBZ0lDQWdJSFJvYVhNdVgyeGhjM1JmWldScGRGOXlZVzVuWlM1emRHRnlkRU52Ym5SaGFXNWxjaTV1YjJSbFZIbHdaVnh5WEc0Z0lDQWdJQ0FzZEdocGN5NWZiR0Z6ZEY5bFpHbDBYM0poYm1kbExuTjBZWEowUTI5dWRHRnBibVZ5TG01dlpHVk9ZVzFsTG5SdlRHOTNaWEpEWVhObEtDbGNjbHh1SUNBZ0lGMDdYSEpjYmx4eVhHNWNjbHh1SUNBZ0lHbG1LRzV2WkdWZmRIbHdaVDA5UFRFbUptNXZaR1ZmYm1GdFpUMDlQU2RzYVNjcElISmxkSFZ5YmlCamIyNXpiMnhsTG14dlp5Z25jWGR4SnlrN1hISmNibHh5WEc1Y2NseHVJQ0FnSUhSb2FYTXVYMnhoYzNSZlpXUnBkRjl5WVc1blpTNXBibk5sY25ST2IyUmxLR1ZzS1R0Y2NseHVJQ0FnSUM4dlptRnNjMlVzZEhKMVpTQWc2WlNhNTRLNVltVm1iM0psZkdGbWRHVnlYSEpjYmlBZ0lDQjBhR2x6TGw5c1lYTjBYMlZrYVhSZmNtRnVaMlV1WTI5c2JHRndjMlVvWm1Gc2MyVXBPMXh5WEc0Z0lDQWdkR2hwY3k1ZmMyVnNaV04wYVc5dUxuSmxiVzkyWlVGc2JGSmhibWRsY3lncE8xeHlYRzRnSUNBZ2RHaHBjeTVmYzJWc1pXTjBhVzl1TG1Ga1pGSmhibWRsS0hSb2FYTXVYMnhoYzNSZlpXUnBkRjl5WVc1blpTazdYSEpjYmlBZ0lDQmNjbHh1WEhKY2JpQWdmVnh5WEc0Z0lDeGZabTlqZFhNb0tYdGNjbHh1SUNBZ0lDOHZZMjl1YzI5c1pTNXNiMmNvZEdocGN5NGtZMjl1ZEdWdWRDazdYSEpjYmlBZ0lDQjBhR2x6TGlSamIyNTBaVzUwV3pCZExtWnZZM1Z6S0NrN1hISmNiaUFnSUNBZ0lGeHlYRzVjY2x4dUlDQWdJQzh2WTI5dWMyOXNaUzVzYjJjb0oyWnZZM1Z6SVNFaElTY3BPMXh5WEc0Z0lDQWdhV1lvSVhSb2FYTXVYMnhoYzNSZlpXUnBkRjl5WVc1blpTQXBJSEpsZEhWeWJqdGNjbHh1WEhKY2JpQWdJQ0IyWVhJZ2NtRnVaMlVnUFNCMGFHbHpMbDlzWVhOMFgyVmthWFJmY21GdVoyVTdYSEpjYmlBZ0lDQjJZWElnZTNOMFlYSjBRMjl1ZEdGcGJtVnlMSE4wWVhKMFQyWm1jMlYwZlNBOUlISmhibWRsTzF4eVhHNWNjbHh1SUNBZ0lISmhibWRsTG5ObGRGTjBZWEowS0hOMFlYSjBRMjl1ZEdGcGJtVnlMQ0J6ZEdGeWRFOW1abk5sZENrN1hISmNiaUFnSUNCeVlXNW5aUzVqYjJ4c1lYQnpaU2gwY25WbEtUdGNjbHh1SUNCY2NseHVJQ0FnSUhSb2FYTXVYM05sYkdWamRHbHZiaTV5WlcxdmRtVkJiR3hTWVc1blpYTW9LVHRjY2x4dUlDQWdJSFJvYVhNdVgzTmxiR1ZqZEdsdmJpNWhaR1JTWVc1blpTaHlZVzVuWlNrN1hISmNiaUFnZlZ4eVhHNGdJQ3hmY21WamIzSmtUR0Z6ZEZKaGJtZGxLRzF6UFRBcGUxeHlYRzVjY2x4dUlDQWdJR05zWldGeVZHbHRaVzkxZENoMGFHbHpMbDlwZEhaZmNtRnVaMlVwTzF4eVhHNGdJQ0FnZEdocGN5NWZhWFIyWDNKaGJtZGxJRDBnYzJWMFZHbHRaVzkxZENnb0tUMCtlMXh5WEc0Z0lDQWdJQ0JwWmlnaGRHaHBjeTVmYzJWc1pXTjBhVzl1TG5KaGJtZGxRMjkxYm5RcElISmxkSFZ5Ymp0Y2NseHVYSEpjYmlBZ0lDQWdJSFpoY2lCeVlXNW5aU0E5SUhSb2FYTXVYM05sYkdWamRHbHZiaTVuWlhSU1lXNW5aVUYwS0RBcE8xeHlYRzVjY2x4dUlDQWdJQ0FnZEdocGN5NWZjMlZzWldOMGFXOXVMbkpsYlc5MlpVRnNiRkpoYm1kbGN5Z3BPMXh5WEc0Z0lDQWdJQ0IwYUdsekxsOXpaV3hsWTNScGIyNHVZV1JrVW1GdVoyVW9jbUZ1WjJVcE8xeHlYRzVjY2x4dUlDQWdJQ0FnZEdocGN5NWZiR0Z6ZEY5bFpHbDBYM0poYm1kbElEMGdjbUZ1WjJVN1hISmNibHh5WEc0Z0lDQWdJQ0F2THk4dkx5OHZMeTljY2x4dUlDQWdJQ0FnZEdocGN5NWZiR0Z6ZEY5bFpHbDBYM04wWVhKMFEyOXVkR0ZwYm1WeUlEMGdjbUZ1WjJVdWMzUmhjblJEYjI1MFlXbHVaWEk3WEhKY2JpQWdJQ0FnSUhSb2FYTXVYMnhoYzNSZlpXUnBkRjl6ZEdGeWRFOW1abk5sZENBOUlISmhibWRsTG5OMFlYSjBUMlptYzJWME8xeHlYRzRnSUNBZ0lDQXZMeTh2THk4dkwxeHlYRzVjY2x4dUlDQWdJQ0FnTHk5amIyNXpiMnhsTG14dlp5aDBhR2x6TGw5c1lYTjBYMlZrYVhSZmNtRnVaMlV1YzNSaGNuUkRiMjUwWVdsdVpYSXNkR2hwY3k1ZmJHRnpkRjlsWkdsMFgzSmhibWRsTG5OMFlYSjBUMlptYzJWMEtUdGNjbHh1SUNBZ0lDQWdMeTlqYjI1emIyeGxMbXh2WnloMGFHbHpMbDlzWVhOMFgyVmthWFJmYzNSaGNuUkRiMjUwWVdsdVpYSXNkR2hwY3k1ZmJHRnpkRjlsWkdsMFgzTjBZWEowVDJabWMyVjBLVHRjY2x4dVhISmNiaUFnSUNCOUxHMXpLVHRjY2x4dUlDQjlYSEpjYmlBZ0xGOXpaWFJNWVhOMFJXUnBkRVZzS0NSc1lYTjBYMlZzS1h0Y2NseHVJQ0FnSUhSb2FYTXVYMnhoYzNSZlpXd2dQU0FrYkdGemRGOWxiRHRjY2x4dVhISmNiaUFnZlZ4eVhHNGdJQ3hmY0dsamExTnRhV3hsS0NsN1hISmNiaUFnSUNCY2NseHVJQ0FnSUM4dlpHVmlkV2RuWlhJN1hISmNiaUFnSUNCMGFHbHpMbVZ0YjJwcFgzQmhibVZzTG05dUtDZHdhV05ySnl3b2NISnZjSE1wUFQ1N1hISmNibHh5WEc0Z0lDQWdJQ0IyWVhJZ2FIUnRiRjhnUFNCMGFHbHpMaVJqYjI1MFpXNTBMbWgwYld3b0tTNTBjbWx0S0NrN1hISmNibHh5WEc0Z0lDQWdJQ0IyWVhJZ1pHVm1ZWFZzZEY5MllXeDFaU0E5SUhSb2FYTXVKR052Ym5SbGJuUXVZWFIwY2lnblpHVm1ZWFZzZEZaaGJIVmxKeWt1ZEhKcGJTZ3BPMXh5WEc0Z0lDQWdJQ0JjY2x4dUlDQWdJQ0FnYVdZb2FIUnRiRjg5UFQxa1pXWmhkV3gwWDNaaGJIVmxLU0IwYUdsekxpUmpiMjUwWlc1MExtaDBiV3dvSnljcE8xeHlYRzRnSUNBZ0lDQmNjbHh1SUNBZ0lDQWdkR2hwY3k1ZllYQndaVzVrVkc5TVlYTjBUVzlrYVdacGVVVnNLSEJ5YjNCekxtVnNLVHRjY2x4dVhISmNiaUFnSUNCOUtWeHlYRzRnSUgxY2NseHVJQ0FzWDJoaGJtUnNaVU52Ym1acGNtMG9LWHRjY2x4dUlDQWdJSFJvY205M0lDZHlaWGR5YVhSbElDRW5PMXh5WEc0Z0lIMWNjbHh1SUNBc1gyVmthWFJUZFdOalpYTnpLQ2w3WEhKY2JpQWdJQ0IwYUhKdmR5QW5jbVYzY21sMFpTQWhKenRjY2x4dUlDQjlYSEpjYmlBZ0xGOW9ZVzVrYkdWR2IzSlVhRzl6WlNncGUxeHlYRzRnSUNBZ1hISmNiaUFnSUNCMGFHbHpMaVJsYkY5aFkzUnBkbVV1YjI0b0oyTnNhV05ySnl4bFBUNTdYSEpjYmlBZ0lDQWdYSEpjYmlBZ0lDQWdJSFJvYVhNdWMyaHZkeWdwTzF4eVhHNGdJQ0FnZlNrN1hISmNibHh5WEc0Z0lDQWdKQ2gwYUdsekxtTnZibk4wY25WamRHOXlMa1ZNWDBOQlRrTkZUQ3gwYUdsekxtVnNLUzV2YmlnblkyeHBZMnNuTEdVOVBudGNjbHh1SUNBZ0lDQmNjbHh1SUNBZ0lDQWdkR2hwY3k1b2FXUmxLQ2s3WEhKY2JpQWdJQ0I5S1R0Y2NseHVJQ0FnSUZ4eVhHNGdJQ0FnZEdocGN5NGtZMjl1ZEdWdWRDNXZiaWduWW14MWNpY3NaVDArZTF4eVhHNWNjbHh1SUNBZ0lIMHBPMXh5WEc1Y2NseHVYSEpjYmlBZ0lDQWtLSFJvYVhNdUpHVnNYMkZqZEdsMlpTa3ViMjRvSjJOc2FXTnJKeXhsUFQ1N1hISmNiaUFnSUNBZ0lIUm9hWE11Wld4ZmRHRnlaMlYwSUQwZ1pTNTBZWEpuWlhRN1hISmNiaUFnSUNBZ0lIUm9hWE11YzJodmR5Z3BPMXh5WEc0Z0lDQWdJQ0IwYUdsekxsOW1iMk4xY3lncE8xeHlYRzRnSUNBZ2ZTazdYSEpjYmx4eVhHNWNjbHh1SUNBZ0lIUm9hWE11SkdOdmJuUmxiblF1YjI0b0oyWnZZM1Z6Snl4MGFHbHpMbDlvWVc1a2JHVmZZblZuWDJadlkzVnpMbUpwYm1Rb2RHaHBjeWtwTzF4eVhHNGdJQ0FnZEdocGN5NGtZMjl1ZEdWdWRDNXZiaWduWW14MWNpY3NkR2hwY3k1ZmFHRnVaR3hsWDJKMVoxOWliSFZ5TG1KcGJtUW9kR2hwY3lrcE8xeHlYRzVjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQ3hmYUdGdVpHeGxYMkoxWjE5bWIyTjFjeWhsS1h0Y2NseHVYSEpjYmlBZ0lDQXZMMlJsWW5WbloyVnlPMXh5WEc1Y2NseHVJQ0FnSUhaaGNpQjdlbDlwYm1SbGVIMGdQU0IwYUdsekxtOXdkR2x2Ym5NN1hISmNibHh5WEc0Z0lDQWdhV1lvUW5KdmQyVnlMblpsY25OcGIyNHVhVzl6S1h0Y2NseHVYSFJjZEZ4MFhIUmNkRnh5WEc0Z0lDQWdJQ0FrS0hSb2FYTXVaV3dwTG1OemN5aDdYSEpjYmlBZ0lDQWdJQ0FnZDJsa2RHZzZaRzlqZFcxbGJuUXVZbTlrZVM1dlptWnpaWFJYYVdSMGFDc25jSGduWEhKY2JpQWdJQ0FnSUNBZ0xHaGxhV2RvZERwa2IyTjFiV1Z1ZEM1aWIyUjVMbTltWm5ObGRFaGxhV2RvZENzbmNIZ25YSEpjYmlBZ0lDQWdJQ0FnTEhCdmMybDBhVzl1T2lkaFluTnZiSFYwWlNkY2NseHVJQ0FnSUNBZ0lDQXNiR1ZtZERvbk1DY3NkRzl3T2ljd0p5d25laTFwYm1SbGVDYzZlbDlwYm1SbGVGeHlYRzRnSUNBZ0lDQjlLVHRjY2x4dVhISmNiaUFnSUNBZ0lDOHZZMjl1YzI5c1pTNXNiMmNvZWw5cGJtUmxlQ2s3WEhKY2JpQWdJQ0I5Wld4elpYdGNjbHh1SUNBZ0lDQWdKQ2gwYUdsekxtVnNLUzVqYzNNb2UxeHlYRzRnSUNBZ0lDQWdJSEJ2YzJsMGFXOXVPaWRtYVhobFpDZGNjbHh1SUNBZ0lDQWdJQ0FzYkdWbWREb25NQ2NzZEc5d09pY3dKeXduZWkxcGJtUmxlQ2M2ZWw5cGJtUmxlRnh5WEc0Z0lDQWdJQ0I5S1R0Y2NseHVJQ0FnSUgxY2NseHVJQ0FnSUdSdlkzVnRaVzUwTG1KdlpIa3VjMk55YjJ4c1ZHOXdJRDBnTUR0Y2NseHVJQ0FnSUdSdlkzVnRaVzUwTG1SdlkzVnRaVzUwUld4bGJXVnVkQzV6WTNKdmJHeFViM0FnUFNBd08xeHlYRzRnSUgxY2NseHVJQ0FzWDJoaGJtUnNaVjlpZFdkZllteDFjaWdwZTF4eVhHNGdJQ0FnZG1GeUlIdDZYMmx1WkdWNGZTQTlJSFJvYVhNdWIzQjBhVzl1Y3p0Y2NseHVJQ0FnSUdsbUtFSnliM2RsY2k1MlpYSnphVzl1TG1sdmN5bDdYSEpjYmlBZ0lDQWdJQ1FvZEdocGN5NWxiQ2t1WTNOektIdGNkSEJ2YzJsMGFXOXVPaWRtYVhobFpDY3NiR1ZtZERvbk1DY3NkRzl3T2ljd0p5d25laTFwYm1SbGVDYzZlbDlwYm1SbGVGeDBmU2s3WEhKY2JpQWdJQ0I5WEhSY2NseHVJQ0I5WEhKY2JpQWdMRjl5ZFc0b0tYdGNjbHh1SUNBZ0lIUm9hWE11WDJKcGJtUkVaV1poZFd4MFZtRnNkV1VvS1R0Y2NseHVJRnh5WEc0Z0lDQWdkR2hwY3k1ZmNHbGphMU50YVd4bEtDazdYSEpjYmx4eVhHNWNjbHh1SUNBZ0lIUm9hWE11WDJoaGJtUnNaVVp2Y2xSb2IzTmxLQ2s3WEhKY2JpQWdJQ0IwYUdsekxsOW1iMk4xY3lncE8xeHlYRzVjY2x4dUlDQWdJSFJvYVhNdVgyaGhibVJzWlVOdmJtWnBjbTBvS1R0Y2NseHVYSEpjYmx4eVhHNWNjbHh1SUNBZ0lIUm9hWE11YjI0b0oyTnZiWEJzWlhSbEp5d29jSEp2Y0hNcFBUNTdYSEpjYmlBZ0lDQWdYSEpjYmlBZ0lDQWdJSFJvYVhNdVgyaGhibVJzWlY5amIyMXdiR1YwWlNZbWRHaHBjeTVmYUdGdVpHeGxYMk52YlhCc1pYUmxMbU5oYkd3b2RHaHBjeXh3Y205d2N5azdYSEpjYmlBZ0lDQjlLVHRjY2x4dVhISmNibHh5WEc0Z0lDQWdkR2hwY3k1b2FXUmxLQ2s3WEhKY2JseHlYRzVjY2x4dUlDQjlYSEpjYm4wc0lIdGNjbHh1SUNCRFRGTTZKeWRjY2x4dUlDQXNRMHhUWDBSRlJrRlZURlJmVmtGTVZVVTZKMlJsWm1GMWJIUmZkbUZzZFdVdGIzWnZKMXh5WEc0Z0lDeEZURjlEVDA1VVJVNVVPaWRrYVhaYlkyOXVkR1Z1ZEMxdmRtOWRKMXh5WEc0Z0lDeEZURjlEUVU1RFJVdzZKMkoxZEhSdmJsdGpZVzVqWld3dGIzWnZYU2RjY2x4dUlDQXNSVXhmUTA5T1JrbFNUVG9uWW5WMGRHOXVXMk52Ym1acGNtMHRiM1p2WFNkY2NseHVJQ0FzUlV4ZlUwMUpURVU2SjJScGRsdHpiV2xzWlMxb2IyeGtaWEl0YjNadlhTZGNjbHh1SUNBc1JVeGZVMDFKVEVWZlNVTlBUam9uYkdsYmMyMXBiR1V0YVdOdmJpMXZkbTlkSjF4eVhHNGdJQ3hGVEY5RVNWTlFURUZaWDAxVFJ6b25aR2wyVzIxbGMzTmhaMlV0YjNadlhTZGNjbHh1ZlNrN1hISmNibHh5WEc1Y2JseHVYRzR2THlCWFJVSlFRVU5MSUVaUFQxUkZVaUF2TDF4dUx5OGdMaTl6Y21NdlpXUnBkRzl5TG1weklsMHNJbk52ZFhKalpWSnZiM1FpT2lJaWZRPT1cXG4vLyMgc291cmNlVVJMPXdlYnBhY2staW50ZXJuYWw6Ly8vM1xcblwiKTtcblxuLyoqKi8gfSksXG4vKiA0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuZXZhbChcIlxcblxcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcXFwiX19lc01vZHVsZVxcXCIsIHtcXG4gIHZhbHVlOiB0cnVlXFxufSk7XFxuXFxue1xcbiAgdmFyIENsYXNzID0ge307XFxuXFxuICBDbGFzcy5jcmVhdGUgPSBmdW5jdGlvbiAocHJvcCwgc3RfcHJvcCkge1xcblxcbiAgICB2YXIgRiA9IGZ1bmN0aW9uIEYoKSB7XFxuICAgICAgaWYgKHR5cGVvZiB0aGlzLmluaXQgPT09ICdmdW5jdGlvbicgJiYgdGhpcy5pbml0KSB7XFxuICAgICAgICB0aGlzLmluaXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcXG4gICAgICB9XFxuICAgIH07XFxuXFxuICAgIHByb3AgPSBwcm9wIHx8IHt9O1xcblxcbiAgICBzdF9wcm9wICYmIE9iamVjdC5rZXlzKHN0X3Byb3ApLmZvckVhY2goZnVuY3Rpb24gKHMpIHtcXG4gICAgICBGW3NdID0gc3RfcHJvcFtzXTtcXG4gICAgfSk7XFxuXFxuICAgIEYuZXh0ZW5kID0gQ2xhc3MuY3JlYXRlO1xcblxcbiAgICAvL+S4jeaYr0NsYXNzIGV4dGVuZCDopoHku47kuIrkuKpG57un5om/5LqGXFxuICAgIGlmICh0aGlzICE9IENsYXNzKSB7XFxuICAgICAgRi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHRoaXMucHJvdG90eXBlKTtcXG4gICAgICBGLnByb3RvdHlwZS5fX3N1cGVyX18gPSB0aGlzLnByb3RvdHlwZTtcXG4gICAgICBGLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEY7XFxuXFxuICAgICAgdmFyIHBhcmVudF9wcm9wID0gdGhpcy5wcm90b3R5cGU7XFxuICAgICAgT2JqZWN0LmtleXMocHJvcCkuZm9yRWFjaChmdW5jdGlvbiAocykge1xcbiAgICAgICAgLy/pnIDopoHmianlsZXnmoTlkoznu6fmib/ov4flkI7nmoTlrZjlnKjph43lpI3vvIFcXG4gICAgICAgIGlmIChwYXJlbnRfcHJvcFtzXSAmJiB0eXBlb2YgcGFyZW50X3Byb3Bbc10gPT0gJ2Z1bmN0aW9uJykge1xcblxcbiAgICAgICAgICBGLnByb3RvdHlwZVtzXSA9IGZ1bmN0aW9uICgpIHtcXG4gICAgICAgICAgICB0aGlzLl9zdXBlciA9IHBhcmVudF9wcm9wW3NdO1xcbiAgICAgICAgICAgIHJldHVybiBwcm9wW3NdLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XFxuICAgICAgICAgIH07XFxuICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICBGLnByb3RvdHlwZVtzXSA9IHByb3Bbc107XFxuICAgICAgICB9O1xcbiAgICAgIH0pO1xcblxcbiAgICAgIE9iamVjdC5rZXlzKHRoaXMpLmZpbHRlcihmdW5jdGlvbiAocykge1xcbiAgICAgICAgcmV0dXJuICEvZXh0ZW5kfGNyZWF0ZS8udGVzdChzKTtcXG4gICAgICB9KS5mb3JFYWNoKGZ1bmN0aW9uIChzKSB7XFxuICAgICAgICBGW3NdID0gdGhpcy5fX3N1cGVyX18uY29uc3RydWN0b3Jbc107XFxuICAgICAgfSwgRi5wcm90b3R5cGUpO1xcblxcbiAgICAgIHN0X3Byb3AgJiYgT2JqZWN0LmtleXMoc3RfcHJvcCkuZm9yRWFjaChmdW5jdGlvbiAocykge1xcbiAgICAgICAgRltzXSA9IHN0X3Byb3Bbc107XFxuICAgICAgfSk7XFxuXFxuICAgICAgcmV0dXJuIEY7XFxuICAgIH07XFxuXFxuICAgIE9iamVjdC5rZXlzKHByb3ApLmZvckVhY2goZnVuY3Rpb24gKHMpIHtcXG4gICAgICBGLnByb3RvdHlwZVtzXSA9IHByb3Bbc107XFxuICAgIH0pO1xcbiAgICBGLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEY7XFxuXFxuICAgIHJldHVybiBGO1xcbiAgfTtcXG59XFxuXFxuLy9kZWJ1Z2dlcjtcXG5cXG5GdW5jdGlvbi5wcm90b3R5cGUuYWZ0ZXIgPSBmdW5jdGlvbiAoZm4pIHtcXG4gIHZhciB0aGF0ID0gdGhpcztcXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XFxuICAgIHZhciBmbm4gPSB0aGF0LmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XFxuICAgIGlmIChmbm4gIT0gdm9pZCAwKSByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcXG4gICAgcmV0dXJuIGZubjtcXG4gIH07XFxufTtcXG5cXG57XFxuICB2YXIgdSA9IG5hdmlnYXRvci51c2VyQWdlbnQ7XFxuICB2YXIgQnJvd2VyID0ge1xcbiAgICB2ZXJzaW9uOiB7XFxuICAgICAgbW9iaWxlOiAvQXBwbGVXZWJLaXQuKk1vYmlsZS4qL2kudGVzdCh1KSxcXG4gICAgICAvL+aYr+WQpuS4uuenu+WKqOe7iOerr1xcbiAgICAgIGlvczogL1xcXFwoaVteO10rOyggVTspPyBDUFUuK01hYyBPUyBYL2kudGVzdCh1KSxcXG4gICAgICAvL2lvc+e7iOerr1xcbiAgICAgIGFuZHJvaWQ6IC9BbmRyb2lkL2kudGVzdCh1KSB8fCAvTGludXgvaS50ZXN0KHUpLFxcbiAgICAgIC8vYW5kcm9pZOe7iOerr+aIluiAhXVj5rWP6KeI5ZmoXFxuICAgICAgd2luZG93c3Bob25lOiAvV2luZG93cyBQaG9uZS9pLnRlc3QodSksXFxuICAgICAgLy9XaW5kb3dzIFBob25lXFxuICAgICAgaVBob25lOiAvaVBob25lL2kudGVzdCh1KSxcXG4gICAgICAvL+aYr+WQpuS4umlQaG9uZeaIluiAhVFRSETmtY/op4jlmahcXG4gICAgICBpUGFkOiAvaVBhZC9pLnRlc3QodSksXFxuICAgICAgLy/mmK/lkKZpUGFkXFxuICAgICAgd2ViQXBwOiAhL1NhZmFyaS9pLnRlc3QodSksXFxuICAgICAgLy/mmK/lkKZ3ZWLlupTor6XnqIvluo/vvIzmsqHmnInlpLTpg6jkuI7lupXpg6hcXG4gICAgICBNaWNyb01lc3NlbmdlcjogL01pY3JvTWVzc2VuZ2VyL2kudGVzdCh1KSxcXG4gICAgICAvL+aYr+WQpuS4uuW+ruS/oVxcbiAgICAgIHdlaWJvOiAvV2VpYm8vaS50ZXN0KHUpLFxcbiAgICAgIC8v5piv5ZCm5Li65b6u5Y2aXFxuICAgICAgdWM6IC91Y3dlYnxVQ0Jyb3dzZXIvaS50ZXN0KHUpLFxcbiAgICAgIC8v5piv5ZCm5Li6VUNcXG4gICAgICBxcTogL01RUUJyb3dzZXIvaS50ZXN0KHUpLFxcbiAgICAgIC8v5piv5ZCm5Li6UVHmtY/op4jlmahcXG4gICAgICBiYWlkdTogL0JhaWR1L2kudGVzdCh1KSwgLy/mmK/lkKbkuLrnmb7luqbmtY/op4jlmahcXG5cXG4gICAgICB3ZWl4aW46IC9NaWNyb01lc3Nlbmdlci9pLnRlc3QodSlcXG4gICAgfSxcXG4gICAgbGFuZ3VhZ2U6IChuYXZpZ2F0b3IuYnJvd3Nlckxhbmd1YWdlIHx8IG5hdmlnYXRvci5sYW5ndWFnZSkudG9Mb3dlckNhc2UoKVxcbiAgfTtcXG59XFxuXFxue1xcbiAgdmFyIENhY2hlID0ge307XFxuICB2YXIgaW1wb3J0QWxsID0gZnVuY3Rpb24gaW1wb3J0QWxsKHIpIHtcXG4gICAgLy9yLmtleXMoKS5mb3JFYWNoKGtleSA9PiBjYWNoZVtrZXldID0gcihrZXkpKTtcXG4gICAgci5rZXlzKCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XFxuICAgICAgLy9jb25zb2xlLmxvZyhrZXkpO1xcbiAgICAgIENhY2hlW2tleV0gPSByKGtleSk7XFxuICAgIH0pO1xcbiAgfTtcXG4gIC8vaW1wb3J0QWxsKHJlcXVpcmUuY29udGV4dCgnLi9jb21tb24vaW1nL3BvcG9fMmFkZWZlZC8nLCB0cnVlLCAvXFxcXC5wbmckLykpO1xcbiAgaW1wb3J0QWxsKF9fd2VicGFja19yZXF1aXJlX18oMTEpKTtcXG59XFxuXFxudmFyIENhY2hlID0gZXhwb3J0cy5DYWNoZSA9IENhY2hlO1xcblxcbnZhciBCcm93ZXIgPSBleHBvcnRzLkJyb3dlciA9IEJyb3dlcjtcXG5cXG52YXIgQ2xhc3MgPSBleHBvcnRzLkNsYXNzID0gQ2xhc3M7XFxuXFxudmFyIEV2ZW50ID0gZXhwb3J0cy5FdmVudCA9IENsYXNzLmNyZWF0ZSh7XFxuICBpbml0OiBmdW5jdGlvbiBpbml0KCkge1xcbiAgICB0aGlzLmV2cyA9IHt9O1xcbiAgfSxcXG4gIG9uOiBmdW5jdGlvbiBvbihzLCBmbiwgb25jZSkge1xcbiAgICBzID0gcy50cmltKCk7XFxuICAgIGlmIChvbmNlICYmIG9uY2UudHJpbSgpID09ICdvbmNlJykge1xcbiAgICAgIHRoaXMuZXZzW3NdID0gW2ZuXTtcXG5cXG4gICAgICByZXR1cm4gdGhpcztcXG4gICAgfTtcXG5cXG4gICAgaWYgKCF0aGlzLmV2c1tzXSkge1xcbiAgICAgIHRoaXMuZXZzW3NdID0gW2ZuXTtcXG4gICAgICByZXR1cm4gdGhpcztcXG4gICAgfTtcXG4gICAgdGhpcy5ldnNbc10ucHVzaChmbik7XFxuICAgIHJldHVybiB0aGlzO1xcbiAgfSxcXG4gIHRyaWdnZXI6IGZ1bmN0aW9uIHRyaWdnZXIocykge1xcbiAgICB2YXIgdGhhdCA9IHRoaXMsXFxuICAgICAgICBhcmdzID0gYXJndW1lbnRzLFxcbiAgICAgICAgYXIgPSB0aGlzLmV2c1tzID0gcy50cmltKCldO1xcblxcbiAgICAvL3RpcmdnZXIoJ2FhYScgLCBhLGIsYylcXG4gICAgYXIgJiYgYXIuZm9yRWFjaChmdW5jdGlvbiAoZm4pIHtcXG4gICAgICBmbi5hcHBseSh0aGF0LCBbXS5zbGljZS5jYWxsKGFyZ3MsIDEpKTtcXG4gICAgfSk7XFxuXFxuICAgIHJldHVybiB0aGlzO1xcbiAgfSxcXG4gIG9mZjogZnVuY3Rpb24gb2ZmKHMpIHtcXG4gICAgZGVsZXRlIHRoaXMuZXZzW3MudHJpbSgpXTtcXG4gICAgcmV0dXJuIHRoaXM7XFxuICB9XFxufSk7Ly8jIHNvdXJjZVVSTD1bbW9kdWxlXVxcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OHZMaTl6Y21NdlkyOXlaUzVxY3o4ek1qUXdJbDBzSW01aGJXVnpJanBiSWtOc1lYTnpJaXdpWTNKbFlYUmxJaXdpY0hKdmNDSXNJbk4wWDNCeWIzQWlMQ0pHSWl3aWFXNXBkQ0lzSW1Gd2NHeDVJaXdpWVhKbmRXMWxiblJ6SWl3aVQySnFaV04wSWl3aWEyVjVjeUlzSW1admNrVmhZMmdpTENKeklpd2laWGgwWlc1a0lpd2ljSEp2ZEc5MGVYQmxJaXdpWDE5emRYQmxjbDlmSWl3aVkyOXVjM1J5ZFdOMGIzSWlMQ0p3WVhKbGJuUmZjSEp2Y0NJc0lsOXpkWEJsY2lJc0ltWnBiSFJsY2lJc0luUmxjM1FpTENKR2RXNWpkR2x2YmlJc0ltRm1kR1Z5SWl3aVptNGlMQ0owYUdGMElpd2labTV1SWl3aWRTSXNJbTVoZG1sbllYUnZjaUlzSW5WelpYSkJaMlZ1ZENJc0lrSnliM2RsY2lJc0luWmxjbk5wYjI0aUxDSnRiMkpwYkdVaUxDSnBiM01pTENKaGJtUnliMmxrSWl3aWQybHVaRzkzYzNCb2IyNWxJaXdpYVZCb2IyNWxJaXdpYVZCaFpDSXNJbmRsWWtGd2NDSXNJazFwWTNKdlRXVnpjMlZ1WjJWeUlpd2lkMlZwWW04aUxDSjFZeUlzSW5GeElpd2lZbUZwWkhVaUxDSjNaV2w0YVc0aUxDSnNZVzVuZFdGblpTSXNJbUp5YjNkelpYSk1ZVzVuZFdGblpTSXNJblJ2VEc5M1pYSkRZWE5sSWl3aVEyRmphR1VpTENKcGJYQnZjblJCYkd3aUxDSnlJaXdpYTJWNUlpd2lSWFpsYm5RaUxDSmxkbk1pTENKdmJpSXNJbTl1WTJVaUxDSjBjbWx0SWl3aWNIVnphQ0lzSW5SeWFXZG5aWElpTENKaGNtZHpJaXdpWVhJaUxDSnpiR2xqWlNJc0ltTmhiR3dpTENKdlptWWlYU3dpYldGd2NHbHVaM01pT2lJN096czdPenRCUVVOQk8wRkJRMFVzVFVGQlNVRXNVVUZCVVN4RlFVRmFPenRCUVVWQlFTeFJRVUZOUXl4TlFVRk9MRWRCUVdVc1ZVRkJVME1zU1VGQlZDeEZRVUZqUXl4UFFVRmtMRVZCUVhOQ096dEJRVVZ1UXl4UlFVRkpReXhKUVVGSkxGTkJRVXBCTEVOQlFVa3NSMEZCVlR0QlFVTm9RaXhWUVVGSExFOUJRVThzUzBGQlMwTXNTVUZCV2l4TFFVRnZRaXhWUVVGd1FpeEpRVUZuUXl4TFFVRkxRU3hKUVVGNFF5eEZRVUUyUXp0QlFVTXpReXhoUVVGTFFTeEpRVUZNTEVOQlFWVkRMRXRCUVZZc1EwRkJaMElzU1VGQmFFSXNSVUZCY1VKRExGTkJRWEpDTzBGQlEwUTdRVUZGUml4TFFVeEVPenRCUVU5QlRDeFhRVUZQUVN4UlFVRlJMRVZCUVdZN08wRkJSVUZETEdWQlFWZExMRTlCUVU5RExFbEJRVkFzUTBGQldVNHNUMEZCV2l4RlFVRnhRazhzVDBGQmNrSXNRMEZCTmtJc1ZVRkJVME1zUTBGQlZDeEZRVUZYTzBGQlEycEVVQ3hSUVVGRlR5eERRVUZHTEVsQlFVOVNMRkZCUVZGUkxFTkJRVklzUTBGQlVEdEJRVU5FTEV0QlJsVXNRMEZCV0RzN1FVRkpRVkFzVFVGQlJWRXNUVUZCUml4SFFVRlhXaXhOUVVGTlF5eE5RVUZxUWpzN1FVRkZRVHRCUVVOQkxGRkJRVWNzVVVGQlVVUXNTMEZCV0N4RlFVRnBRanRCUVVObVNTeFJRVUZGVXl4VFFVRkdMRWRCUVdOTUxFOUJRVTlRTEUxQlFWQXNRMEZCWXl4TFFVRkxXU3hUUVVGdVFpeERRVUZrTzBGQlEwRlVMRkZCUVVWVExGTkJRVVlzUTBGQldVTXNVMEZCV2l4SFFVRjNRaXhMUVVGTFJDeFRRVUUzUWp0QlFVTkJWQ3hSUVVGRlV5eFRRVUZHTEVOQlFWbEZMRmRCUVZvc1IwRkJNRUpZTEVOQlFURkNPenRCUVVWQkxGVkJRVWxaTEdOQlFXTXNTMEZCUzBnc1UwRkJka0k3UVVGRFFVd3NZVUZCVDBNc1NVRkJVQ3hEUVVGWlVDeEpRVUZhTEVWQlFXdENVU3hQUVVGc1FpeERRVUV3UWl4VlFVRlRReXhEUVVGVUxFVkJRVmM3UVVGRGJrTTdRVUZEUVN4WlFVRkhTeXhaUVVGWlRDeERRVUZhTEV0QlFXdENMRTlCUVU5TExGbEJRVmxNTEVOQlFWb3NRMEZCVUN4SlFVRjFRaXhWUVVFMVF5eEZRVUYxUkRzN1FVRkZja1JRTEZsQlFVVlRMRk5CUVVZc1EwRkJXVVlzUTBGQldpeEpRVUZwUWl4WlFVRlZPMEZCUTNwQ0xHbENRVUZMVFN4TlFVRk1MRWRCUVdORUxGbEJRVmxNTEVOQlFWb3NRMEZCWkR0QlFVTkJMRzFDUVVGUFZDeExRVUZMVXl4RFFVRk1MRVZCUVZGTUxFdEJRVklzUTBGQll5eEpRVUZrTEVWQlFXMUNReXhUUVVGdVFpeERRVUZRTzBGQlJVUXNWMEZLUkR0QlFVMUVMRk5CVWtRc1RVRlJTenRCUVVOSVNDeFpRVUZGVXl4VFFVRkdMRU5CUVZsR0xFTkJRVm9zU1VGQmFVSlVMRXRCUVV0VExFTkJRVXdzUTBGQmFrSTdRVUZEUkR0QlFVTkdMRTlCWWtRN08wRkJaVUZJTEdGQlFVOURMRWxCUVZBc1EwRkJXU3hKUVVGYUxFVkJRV3RDVXl4TlFVRnNRaXhEUVVGNVFpeFZRVUZUVUN4RFFVRlVMRVZCUVZjN1FVRkRiRU1zWlVGQlR5eERRVUZGTEdWQlFVUXNRMEZCYTBKUkxFbEJRV3hDTEVOQlFYVkNVaXhEUVVGMlFpeERRVUZTTzBGQlEwUXNUMEZHUkN4RlFVVkhSQ3hQUVVaSUxFTkJSVmNzVlVGQlUwTXNRMEZCVkN4RlFVRlhPMEZCUTNCQ1VDeFZRVUZGVHl4RFFVRkdMRWxCUVU4c1MwRkJTMGNzVTBGQlRDeERRVUZsUXl4WFFVRm1MRU5CUVRKQ1NpeERRVUV6UWl4RFFVRlFPMEZCUTBRc1QwRktSQ3hGUVVsRlVDeEZRVUZGVXl4VFFVcEtPenRCUVUxQlZpeHBRa0ZCVjBzc1QwRkJUME1zU1VGQlVDeERRVUZaVGl4UFFVRmFMRVZCUVhGQ1R5eFBRVUZ5UWl4RFFVRTJRaXhWUVVGVFF5eERRVUZVTEVWQlFWYzdRVUZEYWtSUUxGVkJRVVZQTEVOQlFVWXNTVUZCVDFJc1VVRkJVVkVzUTBGQlVpeERRVUZRTzBGQlEwUXNUMEZHVlN4RFFVRllPenRCUVV0QkxHRkJRVTlRTEVOQlFWQTdRVUZEUkRzN1FVRkZSRWtzVjBGQlQwTXNTVUZCVUN4RFFVRlpVQ3hKUVVGYUxFVkJRV3RDVVN4UFFVRnNRaXhEUVVFd1FpeFZRVUZUUXl4RFFVRlVMRVZCUVZjN1FVRkRia05RTEZGQlFVVlRMRk5CUVVZc1EwRkJXVVlzUTBGQldpeEpRVUZuUWxRc1MwRkJTMU1zUTBGQlRDeERRVUZvUWp0QlFVTkVMRXRCUmtRN1FVRkhRVkFzVFVGQlJWTXNVMEZCUml4RFFVRlpSU3hYUVVGYUxFZEJRVEJDV0N4RFFVRXhRanM3UVVGRlFTeFhRVUZQUVN4RFFVRlFPMEZCUlVRc1IwRTFSRVE3UVVFNFJFUTdPMEZCUjBRN08wRkJSVUZuUWl4VFFVRlRVQ3hUUVVGVUxFTkJRVzFDVVN4TFFVRnVRaXhIUVVFeVFpeFZRVUZUUXl4RlFVRlVMRVZCUVZrN1FVRkRja01zVFVGQlNVTXNUMEZCVHl4SlFVRllPMEZCUTBFc1UwRkJUeXhaUVVGVk8wRkJRMllzVVVGQlNVTXNUVUZCVFVRc1MwRkJTMnBDTEV0QlFVd3NRMEZCVjJsQ0xFbEJRVmdzUlVGQmEwSm9RaXhUUVVGc1FpeERRVUZXTzBGQlEwTXNVVUZCU1dsQ0xFOUJRVThzUzBGQlN5eERRVUZvUWl4RlFVTkhMRTlCUVU5R0xFZEJRVWRvUWl4TFFVRklMRU5CUVZNc1NVRkJWQ3hGUVVGblFrTXNVMEZCYUVJc1EwRkJVRHRCUVVOSUxGZEJRVTlwUWl4SFFVRlFPMEZCUTBZc1IwRk1SRHRCUVUxRUxFTkJVa1E3TzBGQlZVRTdRVUZEUXl4TlFVRk5ReXhKUVVGSlF5eFZRVUZWUXl4VFFVRndRanRCUVVOQkxFMUJRVWxETEZOQlFWTTdRVUZEV2tNc1lVRkJVVHRCUVVOUVF5eGpRVUZUTEhkQ1FVRkVMRU5CUVRKQ1dDeEpRVUV6UWl4RFFVRm5RMDBzUTBGQmFFTXNRMEZFUkR0QlFVVk1PMEZCUTBGTkxGZEJRVTBzWjBOQlFVUXNRMEZCYlVOYUxFbEJRVzVETEVOQlFYZERUU3hEUVVGNFF5eERRVWhCTzBGQlNVdzdRVUZEUVU4c1pVRkJWU3hWUVVGRUxFTkJRV0ZpTEVsQlFXSXNRMEZCYTBKTkxFTkJRV3hDTEV0QlFYbENMRkZCUVVRc1EwRkJWMDRzU1VGQldDeERRVUZuUWswc1EwRkJhRUlzUTBGTU5VSTdRVUZOVER0QlFVTkJVU3h2UWtGQlpTeG5Ra0ZCUkN4RFFVRnRRbVFzU1VGQmJrSXNRMEZCZDBKTkxFTkJRWGhDTEVOQlVGUTdRVUZSVER0QlFVTkJVeXhqUVVGVExGTkJRVVFzUTBGQldXWXNTVUZCV2l4RFFVRnBRazBzUTBGQmFrSXNRMEZVU0R0QlFWVk1PMEZCUTBGVkxGbEJRVThzVDBGQlJDeERRVUZWYUVJc1NVRkJWaXhEUVVGbFRTeERRVUZtTEVOQldFUTdRVUZaVER0QlFVTkJWeXhqUVVGUkxFTkJRVVVzVTBGQlJDeERRVUZaYWtJc1NVRkJXaXhEUVVGcFFrMHNRMEZCYWtJc1EwRmlTanRCUVdOTU8wRkJRMEZaTEhOQ1FVRnBRaXhwUWtGQlJDeERRVUZ2UW14Q0xFbEJRWEJDTEVOQlFYbENUU3hEUVVGNlFpeERRV1pZTzBGQlowSk1PMEZCUTBGaExHRkJRVkVzVVVGQlJDeERRVUZYYmtJc1NVRkJXQ3hEUVVGblFrMHNRMEZCYUVJc1EwRnFRa1k3UVVGclFrdzdRVUZEUVdNc1ZVRkJTeXhyUWtGQlJDeERRVUZ4UW5CQ0xFbEJRWEpDTEVOQlFUQkNUU3hEUVVFeFFpeERRVzVDUXp0QlFXOUNURHRCUVVOQlpTeFZRVUZMTEdGQlFVUXNRMEZCWjBKeVFpeEpRVUZvUWl4RFFVRnhRazBzUTBGQmNrSXNRMEZ5UWtNN1FVRnpRa3c3UVVGRFFXZENMR0ZCUVZFc1VVRkJSQ3hEUVVGWGRFSXNTVUZCV0N4RFFVRm5RazBzUTBGQmFFSXNRMEYyUWtZc1JVRjFRbkZDT3p0QlFVVXhRbWxDTEdOQlFVOHNhMEpCUVd0Q2RrSXNTVUZCYkVJc1EwRkJkVUpOTEVOQlFYWkNPMEZCZWtKR0xFdEJSRWs3UVVFMFFsaHJRaXhqUVVGVExFTkJRVU5xUWl4VlFVRlZhMElzWlVGQlZpeEpRVUUyUW14Q0xGVkJRVlZwUWl4UlFVRjRReXhGUVVGclJFVXNWMEZCYkVRN1FVRTFRa1VzUjBGQllqdEJRVGhDUVRzN1FVRkZSRHRCUVVORkxFMUJRVWxETEZGQlFWRXNSVUZCV2p0QlFVTkJMRTFCUVVsRExGbEJRVmtzVTBGQldrRXNVMEZCV1N4RFFVRlRReXhEUVVGVUxFVkJRVmM3UVVGRGVrSTdRVUZEUVVFc1RVRkJSWFpETEVsQlFVWXNSMEZCVTBNc1QwRkJWQ3hEUVVGcFFpeFZRVUZEZFVNc1IwRkJSQ3hGUVVGUE8wRkJRM1JDTzBGQlEwRklMRmxCUVUxSExFZEJRVTRzU1VGQllVUXNSVUZCUlVNc1IwRkJSaXhEUVVGaU8wRkJRMFFzUzBGSVJEdEJRVWxFTEVkQlRrUTdRVUZQUVR0QlFVTkJSaXhaUVVGVkxIVkNRVUZXTzBGQlEwUTdPMEZCUlUwc1NVRkJTVVFzZDBKQlFWRkJMRXRCUVZvN08wRkJSVUVzU1VGQlNXeENMREJDUVVGVFFTeE5RVUZpT3p0QlFVVkJMRWxCUVVrMVFpeDNRa0ZCVVVFc1MwRkJXanM3UVVGRlFTeEpRVUZKYTBRc2QwSkJRVkZzUkN4TlFVRk5ReXhOUVVGT0xFTkJRV0U3UVVGRE9VSkpMRkZCUVU4c1owSkJRVlU3UVVGRFppeFRRVUZMT0VNc1IwRkJUQ3hIUVVGWExFVkJRVmc3UVVGRFJDeEhRVWcyUWp0QlFVazVRa01zVFVGQlN5eFpRVUZUZWtNc1EwRkJWQ3hGUVVGWFZ5eEZRVUZZTEVWQlFXTXJRaXhKUVVGa0xFVkJRVzFDTzBGQlEzUkNNVU1zVVVGQlNVRXNSVUZCUlRKRExFbEJRVVlzUlVGQlNqdEJRVU5CTEZGQlFVZEVMRkZCUVZGQkxFdEJRVXRETEVsQlFVd3NUVUZCWlN4TlFVRXhRaXhGUVVGcFF6dEJRVU12UWl4WFFVRkxTQ3hIUVVGTUxFTkJRVk40UXl4RFFVRlVMRWxCUVdNc1EwRkJRMWNzUlVGQlJDeERRVUZrT3p0QlFVVkJMR0ZCUVU4c1NVRkJVRHRCUVVORU96dEJRVVZFTEZGQlFVY3NRMEZCUXl4TFFVRkxOa0lzUjBGQlRDeERRVUZUZUVNc1EwRkJWQ3hEUVVGS0xFVkJRV2RDTzBGQlEyUXNWMEZCUzNkRExFZEJRVXdzUTBGQlUzaERMRU5CUVZRc1NVRkJZeXhEUVVGRFZ5eEZRVUZFTEVOQlFXUTdRVUZEUVN4aFFVRlBMRWxCUVZBN1FVRkRSRHRCUVVORUxGTkJRVXMyUWl4SFFVRk1MRU5CUVZONFF5eERRVUZVTEVWQlFWazBReXhKUVVGYUxFTkJRV2xDYWtNc1JVRkJha0k3UVVGRFFTeFhRVUZQTEVsQlFWQTdRVUZEUkN4SFFXeENOa0k3UVVGdFFqbENhME1zVjBGQlZTeHBRa0ZCVXpkRExFTkJRVlFzUlVGQlZ6dEJRVU51UWl4UlFVRkpXU3hQUVVGUExFbEJRVmc3UVVGQlFTeFJRVU5GYTBNc1QwRkJUMnhFTEZOQlJGUTdRVUZCUVN4UlFVVkZiVVFzUzBGQlN5eExRVUZMVUN4SFFVRk1MRU5CUVZONFF5eEpRVUZKUVN4RlFVRkZNa01zU1VGQlJpeEZRVUZpTEVOQlJsQTdPMEZCU1VFN1FVRkRRVWtzVlVGQlRVRXNSMEZCUjJoRUxFOUJRVWdzUTBGQlZ5eFZRVUZUV1N4RlFVRlVMRVZCUVZrN1FVRkRNMEpCTEZOQlFVZG9RaXhMUVVGSUxFTkJRVk5wUWl4SlFVRlVMRVZCUVdkQ0xFZEJRVWR2UXl4TFFVRklMRU5CUVZORExFbEJRVlFzUTBGQlkwZ3NTVUZCWkN4RlFVRnRRaXhEUVVGdVFpeERRVUZvUWp0QlFVTkVMRXRCUmtzc1EwRkJUanM3UVVGSlFTeFhRVUZQTEVsQlFWQTdRVUZEUkN4SFFUbENOa0k3UVVFclFqbENTU3hQUVVGTkxHRkJRVk5zUkN4RFFVRlVMRVZCUVZjN1FVRkRaaXhYUVVGUExFdEJRVXQzUXl4SFFVRk1MRU5CUVZONFF5eEZRVUZGTWtNc1NVRkJSaXhGUVVGVUxFTkJRVkE3UVVGRFFTeFhRVUZQTEVsQlFWQTdRVUZEUkR0QlFXeEROa0lzUTBGQllpeERRVUZhSWl3aVptbHNaU0k2SWpRdWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUpjY2x4dWUxeHlYRzRnSUhaaGNpQkRiR0Z6Y3lBOUlIdDlPMXh5WEc1Y2NseHVJQ0JEYkdGemN5NWpjbVZoZEdVZ1BTQm1kVzVqZEdsdmJpaHdjbTl3TEhOMFgzQnliM0FwZTF4eVhHNGdJQ0FnWEhKY2JpQWdJQ0IyWVhJZ1JpQTlJR1oxYm1OMGFXOXVLQ2w3SUNBZ0lDQWdJRnh5WEc0Z0lDQWdJQ0JwWmloMGVYQmxiMllnZEdocGN5NXBibWwwSUQwOVBTZG1kVzVqZEdsdmJpY21KblJvYVhNdWFXNXBkQ2w3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTVwYm1sMExtRndjR3g1S0hSb2FYTXNZWEpuZFcxbGJuUnpLVHRjY2x4dUlDQWdJQ0FnZlZ4eVhHNGdYSEpjYmlBZ0lDQjlPMXh5WEc0Z0lDQWdYSEpjYmlBZ0lDQndjbTl3SUQwZ2NISnZjQ0I4ZkNCN2ZUdGNjbHh1SUNBZ0lGeHlYRzRnSUNBZ2MzUmZjSEp2Y0NBbUppQlBZbXBsWTNRdWEyVjVjeWh6ZEY5d2NtOXdLUzVtYjNKRllXTm9LR1oxYm1OMGFXOXVLSE1wZTF4eVhHNGdJQ0FnSUNCR1czTmRJRDBnYzNSZmNISnZjRnR6WFRzZ0lGeHlYRzRnSUNBZ2ZTazdYSEpjYmlBZ0lDQmNjbHh1SUNBZ0lFWXVaWGgwWlc1a0lEMGdRMnhoYzNNdVkzSmxZWFJsTzF4eVhHNGdJQ0FnWEhKY2JpQWdJQ0F2TCtTNGplYVlyME5zWVhOeklHVjRkR1Z1WkNEb3BvSGt1NDdrdUlya3VLcEc1N3VuNW9tLzVMcUdYSEpjYmlBZ0lDQnBaaWgwYUdseklDRTlJRU5zWVhOektYdGNjbHh1SUNBZ0lDQWdSaTV3Y205MGIzUjVjR1VnUFNCUFltcGxZM1F1WTNKbFlYUmxLSFJvYVhNdWNISnZkRzkwZVhCbEtUdGNjbHh1SUNBZ0lDQWdSaTV3Y205MGIzUjVjR1V1WDE5emRYQmxjbDlmSUQwZ2RHaHBjeTV3Y205MGIzUjVjR1U3WEhKY2JpQWdJQ0FnSUVZdWNISnZkRzkwZVhCbExtTnZibk4wY25WamRHOXlJRDBnUmp0Y2NseHVYSEpjYmlBZ0lDQWdJSFpoY2lCd1lYSmxiblJmY0hKdmNDQTlJSFJvYVhNdWNISnZkRzkwZVhCbE8xeHlYRzRnSUNBZ0lDQlBZbXBsWTNRdWEyVjVjeWh3Y205d0tTNW1iM0pGWVdOb0tHWjFibU4wYVc5dUtITXBlMXh5WEc0Z0lDQWdJQ0FnSUM4djZaeUE2S2FCNW9tcDViR1Y1NXFFNVpLTTU3dW41b20vNkwrSDVaQ081NXFFNWEyWTVaeW82WWVONWFTTjc3eUJYSEpjYmlBZ0lDQWdJQ0FnYVdZb2NHRnlaVzUwWDNCeWIzQmJjMTBnSmlZZ2RIbHdaVzltSUhCaGNtVnVkRjl3Y205d1czTmRQVDBuWm5WdVkzUnBiMjRuS1h0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCY2NseHVJQ0FnSUNBZ0lDQWdJRVl1Y0hKdmRHOTBlWEJsVzNOZElEMGdablZ1WTNScGIyNG9LWHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmMzVndaWElnUFNCd1lYSmxiblJmY0hKdmNGdHpYVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIQnliM0JiYzEwdVlYQndiSGtvZEdocGN5eGhjbWQxYldWdWRITXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmNjbHh1SUNBZ0lDQWdJQ0FnSUgwN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUgxbGJITmxlMXh5WEc0Z0lDQWdJQ0FnSUNBZ1JpNXdjbTkwYjNSNWNHVmJjMTBnUFNCd2NtOXdXM05kTzF4eVhHNGdJQ0FnSUNBZ0lIMDdYSFJjY2x4dUlDQWdJQ0FnZlNrN1hISmNibHh5WEc0Z0lDQWdJQ0JQWW1wbFkzUXVhMlY1Y3loMGFHbHpLUzVtYVd4MFpYSW9ablZ1WTNScGIyNG9jeWw3WEhKY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUNFb0wyVjRkR1Z1Wkh4amNtVmhkR1V2S1M1MFpYTjBLSE1wTzF4eVhHNGdJQ0FnSUNCOUtTNW1iM0pGWVdOb0tHWjFibU4wYVc5dUtITXBlMXh5WEc0Z0lDQWdJQ0FnSUVaYmMxMGdQU0IwYUdsekxsOWZjM1Z3WlhKZlh5NWpiMjV6ZEhKMVkzUnZjbHR6WFR0Y2NseHVJQ0FnSUNBZ2ZTeEdMbkJ5YjNSdmRIbHdaU2s3WEhKY2JpQWdJQ0FnSUZ4eVhHNGdJQ0FnSUNCemRGOXdjbTl3SUNZbUlFOWlhbVZqZEM1clpYbHpLSE4wWDNCeWIzQXBMbVp2Y2tWaFkyZ29ablZ1WTNScGIyNG9jeWw3WEhKY2JpQWdJQ0FnSUNBZ1JsdHpYU0E5SUhOMFgzQnliM0JiYzEwN0lDQmNjbHh1SUNBZ0lDQWdmU2s3WEhKY2JseHlYRzVjY2x4dUlDQWdJQ0FnY21WMGRYSnVJRVk3WEhKY2JpQWdJQ0I5TzF4eVhHNWNjbHh1SUNBZ0lFOWlhbVZqZEM1clpYbHpLSEJ5YjNBcExtWnZja1ZoWTJnb1puVnVZM1JwYjI0b2N5bDdYSEpjYmlBZ0lDQWdJRVl1Y0hKdmRHOTBlWEJsVzNOZElEMXdjbTl3VzNOZE8xeHlYRzRnSUNBZ2ZTazdYSEpjYmlBZ0lDQkdMbkJ5YjNSdmRIbHdaUzVqYjI1emRISjFZM1J2Y2lBOUlFWTdYSEpjYmx4eVhHNGdJQ0FnY21WMGRYSnVJRVk3WEhKY2JpQWdJQ0JjY2x4dUlDQjlPeUJjY2x4dVhISmNibjFjY2x4dVhISmNibHh5WEc0dkwyUmxZblZuWjJWeU8xeHlYRzVjY2x4dVJuVnVZM1JwYjI0dWNISnZkRzkwZVhCbExtRm1kR1Z5SUQwZ1puVnVZM1JwYjI0b1ptNHBlMXh5WEc0Z0lIWmhjaUIwYUdGMElEMGdkR2hwY3p0Y2NseHVJQ0J5WlhSMWNtNGdablZ1WTNScGIyNG9LWHRjY2x4dUlDQWdJSFpoY2lCbWJtNGdQU0IwYUdGMExtRndjR3g1S0hSb1lYUWdMQ0JoY21kMWJXVnVkSE1wTzF4eVhHNGdJQ0FnSUdsbUtDQm1ibTRnSVQwZ2RtOXBaQ0F3S1Z4eVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCbWJpNWhjSEJzZVNoMGFHbHpJQ3dnWVhKbmRXMWxiblJ6S1R0Y2NseHVJQ0FnSUNCeVpYUjFjbTRnWm01dU8xeHlYRzRnSUgxY2NseHVmVnh5WEc1Y2NseHVlMXh5WEc1Y2RHTnZibk4wSUhVZ1BTQnVZWFpwWjJGMGIzSXVkWE5sY2tGblpXNTBPMXh5WEc1Y2RIWmhjaUJDY205M1pYSWdQU0I3WEhKY2JseDBYSFIyWlhKemFXOXVPbnRjY2x4dVhIUmNkRngwYlc5aWFXeGxPaUFvTDBGd2NHeGxWMlZpUzJsMExpcE5iMkpwYkdVdUtpOXBLUzUwWlhOMEtIVXBMRnh5WEc1Y2RDQWdJQ0F2TCthWXIrV1FwdVM0dXVlbnUrV0txT2U3aU9lcnIxeHlYRzVjZENBZ0lDQnBiM002SUNndlhGd29hVnRlTzEwck95Z2dWVHNwUHlCRFVGVXVLMDFoWXlCUFV5QllMMmtwTG5SbGMzUW9kU2tzWEhKY2JseDBJQ0FnSUM4dmFXOXo1N3VJNTZ1dlhISmNibHgwSUNBZ0lHRnVaSEp2YVdRNklDZ3ZRVzVrY205cFpDOXBLUzUwWlhOMEtIVXBJSHg4SUNndlRHbHVkWGd2YVNrdWRHVnpkQ2gxS1N4Y2NseHVYSFFnSUNBZ0x5OWhibVJ5YjJsazU3dUk1NnV2NW9pVzZJQ0ZkV1BtdFkvb3A0amxtYWhjY2x4dVhIUWdJQ0FnZDJsdVpHOTNjM0JvYjI1bE9pQW9MMWRwYm1SdmQzTWdVR2h2Ym1VdmFTa3VkR1Z6ZENoMUtTeGNjbHh1WEhRZ0lDQWdMeTlYYVc1a2IzZHpJRkJvYjI1bFhISmNibHgwSUNBZ0lHbFFhRzl1WlRvZ0tDOXBVR2h2Ym1VdmFTa3VkR1Z6ZENoMUtTeGNjbHh1WEhRZ0lDQWdMeS9tbUsvbGtLYmt1THBwVUdodmJtWG1pSmJvZ0lWUlVVaEU1cldQNktlSTVabW9YSEpjYmx4MElDQWdJR2xRWVdRNklDZ3ZhVkJoWkM5cEtTNTBaWE4wS0hVcExGeHlYRzVjZENBZ0lDQXZMK2FZcitXUXBtbFFZV1JjY2x4dVhIUWdJQ0FnZDJWaVFYQndPaUFoS0M5VFlXWmhjbWt2YVNrdWRHVnpkQ2gxS1N4Y2NseHVYSFFnSUNBZ0x5L21tSy9sa0taM1pXTGx1cFRvcjZYbnFJdmx1by92dkl6bXNxSG1uSW5scExUcGc2amt1STdsdXBYcGc2aGNjbHh1WEhRZ0lDQWdUV2xqY205TlpYTnpaVzVuWlhJNklDZ3ZUV2xqY205TlpYTnpaVzVuWlhJdmFTa3VkR1Z6ZENoMUtTeGNjbHh1WEhRZ0lDQWdMeS9tbUsvbGtLYmt1THJsdnE3a3Y2RmNjbHh1WEhRZ0lDQWdkMlZwWW04NklDZ3ZWMlZwWW04dmFTa3VkR1Z6ZENoMUtTeGNjbHh1WEhRZ0lDQWdMeS9tbUsvbGtLYmt1THJsdnE3bGpacGNjbHh1WEhRZ0lDQWdkV002SUNndmRXTjNaV0o4VlVOQ2NtOTNjMlZ5TDJrcExuUmxjM1FvZFNrc1hISmNibHgwSUNBZ0lDOHY1cGl2NVpDbTVMaTZWVU5jY2x4dVhIUWdJQ0FnY1hFNklDZ3ZUVkZSUW5KdmQzTmxjaTlwS1M1MFpYTjBLSFVwTEZ4eVhHNWNkQ0FnSUNBdkwrYVlyK1dRcHVTNHVsRlI1cldQNktlSTVabW9YSEpjYmx4MElDQWdJR0poYVdSMU9pQW9MMEpoYVdSMUwya3BMblJsYzNRb2RTa3NMeS9tbUsvbGtLYmt1THJubWI3bHVxYm10WS9vcDRqbG1haGNjbHh1WEhKY2JseDBJQ0FnSUhkbGFYaHBiam92VFdsamNtOU5aWE56Wlc1blpYSXZhUzUwWlhOMEtIVXBYSEpjYmx4MFhIUjlYSEpjYmx4MFhIUXNiR0Z1WjNWaFoyVTZLRzVoZG1sbllYUnZjaTVpY205M2MyVnlUR0Z1WjNWaFoyVWdmSHdnYm1GMmFXZGhkRzl5TG14aGJtZDFZV2RsS1M1MGIweHZkMlZ5UTJGelpTZ3BYSEpjYmx4MGZWeHlYRzU5WEhKY2JseHlYRzU3WEhKY2JpQWdkbUZ5SUVOaFkyaGxJRDBnZTMwN1hISmNiaUFnYkdWMElHbHRjRzl5ZEVGc2JDQTlJR1oxYm1OMGFXOXVLSElwZTF4eVhHNGdJQ0FnTHk5eUxtdGxlWE1vS1M1bWIzSkZZV05vS0d0bGVTQTlQaUJqWVdOb1pWdHJaWGxkSUQwZ2NpaHJaWGtwS1R0Y2NseHVJQ0FnSUhJdWEyVjVjeWdwTG1admNrVmhZMmdvS0d0bGVTazlQbnRjY2x4dUlDQWdJQ0FnTHk5amIyNXpiMnhsTG14dlp5aHJaWGtwTzF4eVhHNGdJQ0FnSUNCRFlXTm9aVnRyWlhsZElEMGdjaWhyWlhrcE8xeHlYRzRnSUNBZ2ZTazdYSEpjYmlBZ2ZWeHlYRzRnSUM4dmFXMXdiM0owUVd4c0tISmxjWFZwY21VdVkyOXVkR1Y0ZENnbkxpOWpiMjF0YjI0dmFXMW5MM0J2Y0c5Zk1tRmtaV1psWkM4bkxDQjBjblZsTENBdlhGd3VjRzVuSkM4cEtUdGNjbHh1SUNCcGJYQnZjblJCYkd3b2NtVnhkV2x5WlM1amIyNTBaWGgwS0NjdUwyTnZiVzF2Ymk5cGJXY3ZjMjFwYkdVdkp5d2dkSEoxWlN3Z0wxeGNMbkJ1WnlRdktTazdYSEpjYm4xY2NseHVYSEpjYm1WNGNHOXlkQ0IyWVhJZ1EyRmphR1VnUFNCRFlXTm9aVHRjY2x4dVhISmNibVY0Y0c5eWRDQjJZWElnUW5KdmQyVnlJRDBnUW5KdmQyVnlPMXh5WEc1Y2NseHVaWGh3YjNKMElIWmhjaUJEYkdGemN5QTlJRU5zWVhOek8xeHlYRzVjY2x4dVpYaHdiM0owSUhaaGNpQkZkbVZ1ZENBOUlFTnNZWE56TG1OeVpXRjBaU2g3WEhKY2JpQWdhVzVwZENBNklHWjFibU4wYVc5dUtDbDdYSEpjYmlBZ0lDQjBhR2x6TG1WMmN5QTlJSHQ5TzF4eVhHNGdJSDBzWEhKY2JpQWdiMjRnT2lCbWRXNWpkR2x2YmloekxHWnVMRzl1WTJVcGUxeHlYRzRnSUNBZ2N5QTlJSE11ZEhKcGJTZ3BPMXh5WEc0Z0lDQWdhV1lvYjI1alpTQW1KaUJ2Ym1ObExuUnlhVzBvS1NBOVBTQW5iMjVqWlNjcGUxeHlYRzRnSUNBZ0lDQjBhR2x6TG1WMmMxdHpYU0E5SUZ0bWJsMDdYSEpjYmlBZ0lDQWdJRnh5WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3p0Y2NseHVJQ0FnSUgwN1hISmNiaUFnSUNCY2NseHVJQ0FnSUdsbUtDRjBhR2x6TG1WMmMxdHpYU2w3WEhKY2JpQWdJQ0FnSUhSb2FYTXVaWFp6VzNOZElEMGdXMlp1WFR0Y2NseHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTTdYSEpjYmlBZ0lDQjlPMXh5WEc0Z0lDQWdkR2hwY3k1bGRuTmJjMTB1Y0hWemFDaG1iaWs3WEhKY2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3p0Y2NseHVJQ0I5TEZ4eVhHNGdJSFJ5YVdkblpYSWdPaUJtZFc1amRHbHZiaWh6S1h0Y2NseHVJQ0FnSUhaaGNpQjBhR0YwSUQwZ2RHaHBjeXhjY2x4dUlDQWdJQ0FnWVhKbmN5QTlJR0Z5WjNWdFpXNTBjeXhjY2x4dUlDQWdJQ0FnWVhJZ1BTQjBhR2x6TG1WMmMxdHpJRDBnY3k1MGNtbHRLQ2xkTzF4eVhHNGdJQ0FnWEhKY2JpQWdJQ0F2TDNScGNtZG5aWElvSjJGaFlTY2dMQ0JoTEdJc1l5bGNjbHh1SUNBZ0lHRnlJQ1ltSUdGeUxtWnZja1ZoWTJnb1puVnVZM1JwYjI0b1ptNHBlMXh5WEc0Z0lDQWdJQ0JtYmk1aGNIQnNlU2gwYUdGMElDd2dXMTB1YzJ4cFkyVXVZMkZzYkNoaGNtZHpMREVwS1R0Y2NseHVJQ0FnSUgwcE8xeHlYRzRnSUNBZ1hISmNiaUFnSUNCeVpYUjFjbTRnZEdocGN6dGNjbHh1SUNCOUxGeHlYRzRnSUc5bVppQTZJR1oxYm1OMGFXOXVLSE1wZTF4eVhHNGdJQ0FnWkdWc1pYUmxJSFJvYVhNdVpYWnpXM011ZEhKcGJTZ3BYVHRjY2x4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TzF4eVhHNGdJSDFjY2x4dWZTazdYRzVjYmx4dUx5OGdWMFZDVUVGRFN5QkdUMDlVUlZJZ0x5OWNiaTh2SUM0dmMzSmpMMk52Y21VdWFuTWlYU3dpYzI5MWNtTmxVbTl2ZENJNklpSjlcXG4vLyMgc291cmNlVVJMPXdlYnBhY2staW50ZXJuYWw6Ly8vNFxcblwiKTtcblxuLyoqKi8gfSksXG4vKiA1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFxcXCJpbWcvaWNvbi5wbmc/MmYyYzUxXFxcIjsvLyMgc291cmNlVVJMPVttb2R1bGVdXFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk4dkxpOXpjbU12WTI5dGJXOXVMMmx0Wnk5cFkyOXVMbkJ1Wno4eE16azVJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCSWl3aVptbHNaU0k2SWpVdWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUp0YjJSMWJHVXVaWGh3YjNKMGN5QTlJRjlmZDJWaWNHRmphMTl3ZFdKc2FXTmZjR0YwYUY5ZklDc2dYQ0pwYldjdmFXTnZiaTV3Ym1jL01tWXlZelV4WENJN1hHNWNibHh1THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2WEc0dkx5QlhSVUpRUVVOTElFWlBUMVJGVWx4dUx5OGdMaTl6Y21NdlkyOXRiVzl1TDJsdFp5OXBZMjl1TG5CdVoxeHVMeThnYlc5a2RXeGxJR2xrSUQwZ05WeHVMeThnYlc5a2RXeGxJR05vZFc1cmN5QTlJREFpWFN3aWMyOTFjbU5sVW05dmRDSTZJaUo5XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzVcXG5cIik7XG5cbi8qKiovIH0pLFxuLyogNiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5ldmFsKFwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBcXFwiaW1nL2ljb24ud2VicD84MmFlYmJcXFwiOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZZMjl0Ylc5dUwybHRaeTkzWldKd0wybGpiMjR1ZDJWaWNEOWxPRGd4SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQklpd2labWxzWlNJNklqWXVhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUY5ZmQyVmljR0ZqYTE5d2RXSnNhV05mY0dGMGFGOWZJQ3NnWENKcGJXY3ZhV052Ymk1M1pXSndQemd5WVdWaVlsd2lPMXh1WEc1Y2JpOHZMeTh2THk4dkx5OHZMeTh2THk4dkwxeHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaTh2SUM0dmMzSmpMMk52YlcxdmJpOXBiV2N2ZDJWaWNDOXBZMjl1TG5kbFluQmNiaTh2SUcxdlpIVnNaU0JwWkNBOUlEWmNiaTh2SUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3SWwwc0luTnZkWEpqWlZKdmIzUWlPaUlpZlE9PVxcbi8vIyBzb3VyY2VVUkw9d2VicGFjay1pbnRlcm5hbDovLy82XFxuXCIpO1xuXG4vKioqLyB9KSxcbi8qIDcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5ldmFsKFwiXFxuXFxuX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcXG5cXG52YXIgX3JlcGx5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMCk7XFxuXFxudmFyIF9yZXBseTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZXBseSk7XFxuXFxudmFyIF9wb3N0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3Mik7XFxuXFxudmFyIF9wb3N0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Bvc3QpO1xcblxcbnZhciBfZWRpdG9yID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcXG5cXG52YXIgX2VkaXRvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9lZGl0b3IpO1xcblxcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XFxuXFxubW9kdWxlLmV4cG9ydHMgPSB7IFJlcGx5OiBfcmVwbHkyLmRlZmF1bHQsIFBvc3Q6IF9wb3N0Mi5kZWZhdWx0LCBFZGl0b3I6IF9lZGl0b3IyLmRlZmF1bHQgfTsvLyMgc291cmNlVVJMPVttb2R1bGVdXFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk4dkxpOXpjbU12YldGcGJqRXVhbk0vT1dZeE5pSmRMQ0p1WVcxbGN5STZXeUp0YjJSMWJHVWlMQ0psZUhCdmNuUnpJaXdpVW1Wd2JIa2lMQ0pRYjNOMElpd2lSV1JwZEc5eUlsMHNJbTFoY0hCcGJtZHpJam9pT3p0QlFVTkJPenRCUVVOQk96czdPMEZCUTBFN096czdRVUZEUVRzN096czdPMEZCU1VGQkxFOUJRVTlETEU5QlFWQXNSMEZCYVVJc1JVRkJRME1zYzBKQlFVUXNSVUZCVDBNc2IwSkJRVkFzUlVGQldVTXNkMEpCUVZvc1JVRkJha0lpTENKbWFXeGxJam9pTnk1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbHh5WEc1cGJYQnZjblFnSnk0dmJXRnBiakV1YkdWemN5YzdYSEpjYm1sdGNHOXlkQ0JTWlhCc2VTQm1jbTl0SUNjdUwzSmxjR3g1Snp0Y2NseHVhVzF3YjNKMElGQnZjM1FnWm5KdmJTQW5MaTl3YjNOMEp6dGNjbHh1YVcxd2IzSjBJRVZrYVhSdmNpQm1jbTl0SUNjdUwyVmthWFJ2Y2ljN1hISmNibHh5WEc1Y2NseHVYSEpjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnZTFKbGNHeDVMRkJ2YzNRc1JXUnBkRzl5ZlR0Y2NseHVYSEpjYmx4dVhHNWNiaTh2SUZkRlFsQkJRMHNnUms5UFZFVlNJQzh2WEc0dkx5QXVMM055WXk5dFlXbHVNUzVxY3lKZExDSnpiM1Z5WTJWU2IyOTBJam9pSW4wPVxcbi8vIyBzb3VyY2VVUkw9d2VicGFjay1pbnRlcm5hbDovLy83XFxuXCIpO1xuXG4vKioqLyB9KSxcbi8qIDggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuZXZhbChcIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXFxuXFxuLy8gbG9hZCB0aGUgc3R5bGVzXFxudmFyIGNvbnRlbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkpO1xcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmksIGNvbnRlbnQsICcnXV07XFxuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxcbnZhciB1cGRhdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKGNvbnRlbnQsIHt9KTtcXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcXG4vLyBIb3QgTW9kdWxlIFJlcGxhY2VtZW50XFxuaWYoZmFsc2UpIHtcXG5cXHQvLyBXaGVuIHRoZSBzdHlsZXMgY2hhbmdlLCB1cGRhdGUgdGhlIDxzdHlsZT4gdGFnc1xcblxcdGlmKCFjb250ZW50LmxvY2Fscykge1xcblxcdFxcdG1vZHVsZS5ob3QuYWNjZXB0KFxcXCIhIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy4wLjIzLjFAY3NzLWxvYWRlci9pbmRleC5qcyEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9saWIvaW5kZXguanM/P3JlZi0tMC0yIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy4yLjIuM0BsZXNzLWxvYWRlci9pbmRleC5qcyEuL21haW4xLmxlc3NcXFwiLCBmdW5jdGlvbigpIHtcXG5cXHRcXHRcXHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXFxcIiEhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvLjAuMjMuMUBjc3MtbG9hZGVyL2luZGV4LmpzIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS0wLTIhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvLjIuMi4zQGxlc3MtbG9hZGVyL2luZGV4LmpzIS4vbWFpbjEubGVzc1xcXCIpO1xcblxcdFxcdFxcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xcblxcdFxcdFxcdHVwZGF0ZShuZXdDb250ZW50KTtcXG5cXHRcXHR9KTtcXG5cXHR9XFxuXFx0Ly8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xcblxcdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xcbn0vLyMgc291cmNlVVJMPVttb2R1bGVdXFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk4dkxpOXpjbU12YldGcGJqRXViR1Z6Y3o4MU1USmtJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzSzBOQlFUaEdPMEZCUXpsR08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFZEJRVWM3UVVGRFNEdEJRVU5CTzBGQlEwRXNaME5CUVdkRExGVkJRVlVzUlVGQlJUdEJRVU0xUXlJc0ltWnBiR1VpT2lJNExtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpTHk4Z2MzUjViR1V0Ykc5aFpHVnlPaUJCWkdSeklITnZiV1VnWTNOeklIUnZJSFJvWlNCRVQwMGdZbmtnWVdSa2FXNW5JR0VnUEhOMGVXeGxQaUIwWVdkY2JseHVMeThnYkc5aFpDQjBhR1VnYzNSNWJHVnpYRzUyWVhJZ1kyOXVkR1Z1ZENBOUlISmxjWFZwY21Vb1hDSWhJUzR2TGk0dkxpNHZMaTR2Ym05a1pWOXRiMlIxYkdWekx5NHdMakl6TGpGQVkzTnpMV3h2WVdSbGNpOXBibVJsZUM1cWN5RXVMeTR1THk0dUx5NHVMMjV2WkdWZmJXOWtkV3hsY3k5d2IzTjBZM056TFd4dllXUmxjaTlzYVdJdmFXNWtaWGd1YW5NL1AzSmxaaTB0TUMweUlTNHZMaTR2TGk0dkxpNHZibTlrWlY5dGIyUjFiR1Z6THk0eUxqSXVNMEJzWlhOekxXeHZZV1JsY2k5cGJtUmxlQzVxY3lFdUwyMWhhVzR4TG14bGMzTmNJaWs3WEc1cFppaDBlWEJsYjJZZ1kyOXVkR1Z1ZENBOVBUMGdKM04wY21sdVp5Y3BJR052Ym5SbGJuUWdQU0JiVzIxdlpIVnNaUzVwWkN3Z1kyOXVkR1Z1ZEN3Z0p5ZGRYVHRjYmk4dklHRmtaQ0IwYUdVZ2MzUjViR1Z6SUhSdklIUm9aU0JFVDAxY2JuWmhjaUIxY0dSaGRHVWdQU0J5WlhGMWFYSmxLRndpSVM0dkxpNHZMaTR2TGk0dmJtOWtaVjl0YjJSMWJHVnpMeTR3TGpFekxqRkFjM1I1YkdVdGJHOWhaR1Z5TDJGa1pGTjBlV3hsY3k1cWMxd2lLU2hqYjI1MFpXNTBMQ0I3ZlNrN1hHNXBaaWhqYjI1MFpXNTBMbXh2WTJGc2N5a2diVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQmpiMjUwWlc1MExteHZZMkZzY3p0Y2JpOHZJRWh2ZENCTmIyUjFiR1VnVW1Wd2JHRmpaVzFsYm5SY2JtbG1LRzF2WkhWc1pTNW9iM1FwSUh0Y2JseDBMeThnVjJobGJpQjBhR1VnYzNSNWJHVnpJR05vWVc1blpTd2dkWEJrWVhSbElIUm9aU0E4YzNSNWJHVStJSFJoWjNOY2JseDBhV1lvSVdOdmJuUmxiblF1Ykc5allXeHpLU0I3WEc1Y2RGeDBiVzlrZFd4bExtaHZkQzVoWTJObGNIUW9YQ0loSVM0dkxpNHZMaTR2TGk0dmJtOWtaVjl0YjJSMWJHVnpMeTR3TGpJekxqRkFZM056TFd4dllXUmxjaTlwYm1SbGVDNXFjeUV1THk0dUx5NHVMeTR1TDI1dlpHVmZiVzlrZFd4bGN5OXdiM04wWTNOekxXeHZZV1JsY2k5c2FXSXZhVzVrWlhndWFuTS9QM0psWmkwdE1DMHlJUzR2TGk0dkxpNHZMaTR2Ym05a1pWOXRiMlIxYkdWekx5NHlMakl1TTBCc1pYTnpMV3h2WVdSbGNpOXBibVJsZUM1cWN5RXVMMjFoYVc0eExteGxjM05jSWl3Z1puVnVZM1JwYjI0b0tTQjdYRzVjZEZ4MFhIUjJZWElnYm1WM1EyOXVkR1Z1ZENBOUlISmxjWFZwY21Vb1hDSWhJUzR2TGk0dkxpNHZMaTR2Ym05a1pWOXRiMlIxYkdWekx5NHdMakl6TGpGQVkzTnpMV3h2WVdSbGNpOXBibVJsZUM1cWN5RXVMeTR1THk0dUx5NHVMMjV2WkdWZmJXOWtkV3hsY3k5d2IzTjBZM056TFd4dllXUmxjaTlzYVdJdmFXNWtaWGd1YW5NL1AzSmxaaTB0TUMweUlTNHZMaTR2TGk0dkxpNHZibTlrWlY5dGIyUjFiR1Z6THk0eUxqSXVNMEJzWlhOekxXeHZZV1JsY2k5cGJtUmxlQzVxY3lFdUwyMWhhVzR4TG14bGMzTmNJaWs3WEc1Y2RGeDBYSFJwWmloMGVYQmxiMllnYm1WM1EyOXVkR1Z1ZENBOVBUMGdKM04wY21sdVp5Y3BJRzVsZDBOdmJuUmxiblFnUFNCYlcyMXZaSFZzWlM1cFpDd2dibVYzUTI5dWRHVnVkQ3dnSnlkZFhUdGNibHgwWEhSY2RIVndaR0YwWlNodVpYZERiMjUwWlc1MEtUdGNibHgwWEhSOUtUdGNibHgwZlZ4dVhIUXZMeUJYYUdWdUlIUm9aU0J0YjJSMWJHVWdhWE1nWkdsemNHOXpaV1FzSUhKbGJXOTJaU0IwYUdVZ1BITjBlV3hsUGlCMFlXZHpYRzVjZEcxdlpIVnNaUzVvYjNRdVpHbHpjRzl6WlNobWRXNWpkR2x2YmlncElIc2dkWEJrWVhSbEtDazdJSDBwTzF4dWZWeHVYRzVjYmk4dkx5OHZMeTh2THk4dkx5OHZMeTh2TDF4dUx5OGdWMFZDVUVGRFN5QkdUMDlVUlZKY2JpOHZJQzR2YzNKakwyMWhhVzR4TG14bGMzTmNiaTh2SUcxdlpIVnNaU0JwWkNBOUlEaGNiaTh2SUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3SWwwc0luTnZkWEpqWlZKdmIzUWlPaUlpZlE9PVxcbi8vIyBzb3VyY2VVUkw9d2VicGFjay1pbnRlcm5hbDovLy84XFxuXCIpO1xuXG4vKioqLyB9KSxcbi8qIDkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuZXZhbChcImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMCkoKTtcXG4vLyBpbXBvcnRzXFxuXFxuXFxuLy8gbW9kdWxlXFxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaSwgXFxcIioge1xcXFxuICBtYXJnaW46IDA7XFxcXG4gIHBhZGRpbmc6IDA7XFxcXG4gIGJvcmRlcjogbm9uZTtcXFxcbn1cXFxcbnVsIGxpIHtcXFxcbiAgbGlzdC1zdHlsZTogbm9uZTtcXFxcbn1cXFxcbi5kZWZhdWx0X3ZhbHVlLW92byB7XFxcXG4gIGNvbG9yOiAjY2FjYWNhO1xcXFxufVxcXFxuLmRlZmF1bHRfdmFsdWUtb3ZvLTIge1xcXFxuICBjb2xvcjogI2FkYWRhZDtcXFxcbn1cXFxcbmh0bWwge1xcXFxuICB3aWR0aDogMTAwJTtcXFxcbiAgaGVpZ2h0OiAxMDAlO1xcXFxuICBmb250LWZhbWlseTogSGVsdmV0aWNhO1xcXFxufVxcXFxuYm9keSB7XFxcXG4gIG1heC13aWR0aDogNzIwcHg7XFxcXG4gIG1hcmdpbjogMCBhdXRvO1xcXFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxcXG4gIHdpZHRoOiAxMDAlO1xcXFxuICBtaW4taGVpZ2h0OiAxMDAlO1xcXFxufVxcXFxuYm9keSAucmVsIHtcXFxcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcXFxuICBsZWZ0OiAwO1xcXFxuICB0b3A6IDA7XFxcXG59XFxcXG5ib2R5IC5yZWxfIHtcXFxcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcXFxufVxcXFxuYm9keSAuYWJzIHtcXFxcbiAgcG9zaXRpb246IGFic29sdXRlO1xcXFxuICBsZWZ0OiAwO1xcXFxuICB0b3A6IDA7XFxcXG59XFxcXG5ib2R5IC5hYnNfIHtcXFxcbiAgcG9zaXRpb246IGFic29sdXRlO1xcXFxufVxcXFxuYm9keSAuY2xlYXItYm90aCB7XFxcXG4gIGNsZWFyOiBib3RoO1xcXFxufVxcXFxuYm9keSAudyB7XFxcXG4gIHdpZHRoOiAxMDAlO1xcXFxufVxcXFxuYm9keSAud2gge1xcXFxuICB3aWR0aDogMTAwJTtcXFxcbiAgaGVpZ2h0OiAxMDAlO1xcXFxufVxcXFxuYm9keSAuc2hvdyB7XFxcXG4gIGRpc3BsYXk6IGJsb2NrO1xcXFxufVxcXFxuYm9keSAuaGlkZSB7XFxcXG4gIGRpc3BsYXk6IG5vbmU7XFxcXG59XFxcXG5ib2R5IC52aXNpYmxlIHtcXFxcbiAgdmlzaWJpbGl0eTogdmlzaWJsZTtcXFxcbn1cXFxcbmJvZHkgLmhpZGRlbiB7XFxcXG4gIHZpc2liaWxpdHk6IGhpZGRlbjtcXFxcbn1cXFxcbmJvZHkgLmNzczItejEge1xcXFxuICB6LWluZGV4OiAxO1xcXFxufVxcXFxuYm9keSAuY3NzMi16MiB7XFxcXG4gIHotaW5kZXg6IDI7XFxcXG59XFxcXG5ib2R5IC5jc3MyLXozIHtcXFxcbiAgei1pbmRleDogMztcXFxcbn1cXFxcbmJvZHkgLmNzczItejQge1xcXFxuICB6LWluZGV4OiA0O1xcXFxufVxcXFxuYm9keSAuY3NzMi16NSB7XFxcXG4gIHotaW5kZXg6IDU7XFxcXG59XFxcXG5ib2R5IC5jc3MyLXo2IHtcXFxcbiAgei1pbmRleDogNjtcXFxcbn1cXFxcbmJvZHkgLmNzczItejcge1xcXFxuICB6LWluZGV4OiA3O1xcXFxufVxcXFxuYm9keSAuY3NzMi16OCB7XFxcXG4gIHotaW5kZXg6IDg7XFxcXG59XFxcXG5ib2R5IC5jc3MyLXo5IHtcXFxcbiAgei1pbmRleDogOTtcXFxcbn1cXFxcbmJvZHkgLmNzczItejEwIHtcXFxcbiAgei1pbmRleDogMTA7XFxcXG59XFxcXG5ib2R5IC5jc3MyLXoxMSB7XFxcXG4gIHotaW5kZXg6IDExO1xcXFxufVxcXFxuYm9keSAuY3NzMi16MTIge1xcXFxuICB6LWluZGV4OiAxMjtcXFxcbn1cXFxcbmJvZHkgLmNzczItejEzIHtcXFxcbiAgei1pbmRleDogMTM7XFxcXG59XFxcXG5ib2R5IC5jc3MyLXoxNCB7XFxcXG4gIHotaW5kZXg6IDE0O1xcXFxufVxcXFxuYm9keSAuY3NzMi16MTUge1xcXFxuICB6LWluZGV4OiAxNTtcXFxcbn1cXFxcbmJvZHkgLmNzczItejE2IHtcXFxcbiAgei1pbmRleDogMTY7XFxcXG59XFxcXG5ib2R5IC5jc3MyLXoxNyB7XFxcXG4gIHotaW5kZXg6IDE3O1xcXFxufVxcXFxuYm9keSAuY3NzMi16MTgge1xcXFxuICB6LWluZGV4OiAxODtcXFxcbn1cXFxcbmJvZHkgLmNzczItejE5IHtcXFxcbiAgei1pbmRleDogMTk7XFxcXG59XFxcXG5ib2R5IC5jc3MyLXoyMCB7XFxcXG4gIHotaW5kZXg6IDIwO1xcXFxufVxcXFxuYm9keSAuY3NzMy16MSB7XFxcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZChcXFxcXFxcIjAuMDFweFxcXFxcXFwiLCAwLCAwKTtcXFxcbn1cXFxcbmJvZHkgLmNzczMtejIge1xcXFxuICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoXFxcXFxcXCIwLjAycHhcXFxcXFxcIiwgMCwgMCk7XFxcXG59XFxcXG5ib2R5IC5jc3MzLXozIHtcXFxcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKFxcXFxcXFwiMC4wM3B4XFxcXFxcXCIsIDAsIDApO1xcXFxufVxcXFxuYm9keSAuY3NzMy16NCB7XFxcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZChcXFxcXFxcIjAuMDRweFxcXFxcXFwiLCAwLCAwKTtcXFxcbn1cXFxcbmJvZHkgLmNzczMtejUge1xcXFxuICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoXFxcXFxcXCIwLjA1cHhcXFxcXFxcIiwgMCwgMCk7XFxcXG59XFxcXG5ib2R5IC5jc3MzLXo2IHtcXFxcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKFxcXFxcXFwiMC4wNnB4XFxcXFxcXCIsIDAsIDApO1xcXFxufVxcXFxuYm9keSAuY3NzMy16NyB7XFxcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZChcXFxcXFxcIjAuMDdweFxcXFxcXFwiLCAwLCAwKTtcXFxcbn1cXFxcbmJvZHkgLmNzczMtejgge1xcXFxuICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoXFxcXFxcXCIwLjA4cHhcXFxcXFxcIiwgMCwgMCk7XFxcXG59XFxcXG5ib2R5IC5jc3MzLXo5IHtcXFxcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKFxcXFxcXFwiMC4wOXB4XFxcXFxcXCIsIDAsIDApO1xcXFxufVxcXFxuYm9keSAuY3NzMy16MTAge1xcXFxuICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoXFxcXFxcXCIwLjFweFxcXFxcXFwiLCAwLCAwKTtcXFxcbn1cXFxcbmJvZHkgLmNzczMtejExIHtcXFxcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKFxcXFxcXFwiMC4xMXB4XFxcXFxcXCIsIDAsIDApO1xcXFxufVxcXFxuYm9keSAuY3NzMy16MTIge1xcXFxuICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoXFxcXFxcXCIwLjEycHhcXFxcXFxcIiwgMCwgMCk7XFxcXG59XFxcXG5ib2R5IC5jc3MzLXoxMyB7XFxcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZChcXFxcXFxcIjAuMTNweFxcXFxcXFwiLCAwLCAwKTtcXFxcbn1cXFxcbmJvZHkgLmNzczMtejE0IHtcXFxcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKFxcXFxcXFwiMC4xNHB4XFxcXFxcXCIsIDAsIDApO1xcXFxufVxcXFxuYm9keSAuY3NzMy16MTUge1xcXFxuICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoXFxcXFxcXCIwLjE1cHhcXFxcXFxcIiwgMCwgMCk7XFxcXG59XFxcXG5ib2R5IC5jc3MzLXoxNiB7XFxcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZChcXFxcXFxcIjAuMTZweFxcXFxcXFwiLCAwLCAwKTtcXFxcbn1cXFxcbmJvZHkgLmNzczMtejE3IHtcXFxcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKFxcXFxcXFwiMC4xN3B4XFxcXFxcXCIsIDAsIDApO1xcXFxufVxcXFxuYm9keSAuY3NzMy16MTgge1xcXFxuICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoXFxcXFxcXCIwLjE4cHhcXFxcXFxcIiwgMCwgMCk7XFxcXG59XFxcXG5ib2R5IC5jc3MzLXoxOSB7XFxcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZChcXFxcXFxcIjAuMTlweFxcXFxcXFwiLCAwLCAwKTtcXFxcbn1cXFxcbmJvZHkgLmNzczMtejIwIHtcXFxcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKFxcXFxcXFwiMC4ycHhcXFxcXFxcIiwgMCwgMCk7XFxcXG59XFxcXG5idXR0b24ge1xcXFxuICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcXFxcbiAgYm9yZGVyOiBub25lO1xcXFxuICAtd2Via2l0LXRvdWNoLWNhbGxvdXQ6IG5vbmU7XFxcXG4gIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7XFxcXG4gIC13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxcXG4gIGRpc3BsYXk6IGJsb2NrO1xcXFxuICBvdXRsaW5lOiBub25lO1xcXFxuICBjdXJzb3I6IGF1dG87XFxcXG59XFxcXG5saSB7XFxcXG4gIGxpc3Qtc3R5bGU6IG5vbmU7XFxcXG59XFxcXG5jYW52YXMge1xcXFxuICAtd2Via2l0LXRvdWNoLWNhbGxvdXQ6IG5vbmU7XFxcXG4gIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7XFxcXG59XFxcXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAzMjFweCkge1xcXFxufVxcXFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzIxcHgpIGFuZCAobWF4LXdpZHRoOiA0MDBweCkge1xcXFxufVxcXFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNDAwcHgpIHtcXFxcbn1cXFxcbkAtd2Via2l0LWtleWZyYW1lcyBsaWdodC1tYXNrIHtcXFxcbiAgMCUsXFxcXG4gIDEwMCUge1xcXFxuICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcXFxcbiAgICBvcGFjaXR5OiAwO1xcXFxuICB9XFxcXG4gIDMwJSxcXFxcbiAgNjAlIHtcXFxcbiAgICB2aXNpYmlsaXR5OiB2aXNpYmxlO1xcXFxuICAgIG9wYWNpdHk6IDE7XFxcXG4gIH1cXFxcbn1cXFxcbi5saWdodC1tYXNrIHtcXFxcbiAgLXdlYmtpdC1hbmltYXRpb246IDAuNXMgbGlnaHQtbWFzaztcXFxcbn1cXFxcbi5zaGFrZS12ZXJ0aWNhbCB7XFxcXG4gIC13ZWJraXQtYW5pbWF0aW9uOiAwLjVzIHNoYWtlLXZlcnRpY2FsO1xcXFxufVxcXFxuQC13ZWJraXQta2V5ZnJhbWVzIHNoYWtlLXZlcnRpY2FsIHtcXFxcbiAgMCUge1xcXFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoMHB4LCAwcHgpIHJvdGF0ZSgwZGVnKSBzY2FsZSgxLjIpO1xcXFxuICB9XFxcXG4gIDIlIHtcXFxcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlKDBweCwgMXB4KSByb3RhdGUoMGRlZykgc2NhbGUoMS4yKTtcXFxcbiAgfVxcXFxuICA0JSB7XFxcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZSgwcHgsIDVweCkgcm90YXRlKDBkZWcpIHNjYWxlKDEuMik7XFxcXG4gIH1cXFxcbiAgNiUge1xcXFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoMHB4LCAtMnB4KSByb3RhdGUoMGRlZykgc2NhbGUoMS4yKTtcXFxcbiAgfVxcXFxuICA4JSB7XFxcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZSgwcHgsIDZweCkgcm90YXRlKDBkZWcpIHNjYWxlKDEuMik7XFxcXG4gIH1cXFxcbiAgMTAlIHtcXFxcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlKDBweCwgNHB4KSByb3RhdGUoMGRlZykgc2NhbGUoMS4yKTtcXFxcbiAgfVxcXFxuICAxMiUge1xcXFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoMHB4LCA2cHgpIHJvdGF0ZSgwZGVnKSBzY2FsZSgxLjIpO1xcXFxuICB9XFxcXG4gIDE0JSB7XFxcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZSgwcHgsIDVweCkgcm90YXRlKDBkZWcpIHNjYWxlKDEuMik7XFxcXG4gIH1cXFxcbiAgMTYlIHtcXFxcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlKDBweCwgLTdweCkgcm90YXRlKDBkZWcpIHNjYWxlKDEuMik7XFxcXG4gIH1cXFxcbiAgMTglIHtcXFxcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlKDBweCwgM3B4KSByb3RhdGUoMGRlZykgc2NhbGUoMS4yKTtcXFxcbiAgfVxcXFxuICAyMCUge1xcXFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoMHB4LCAxMHB4KSByb3RhdGUoMGRlZykgc2NhbGUoMS4yKTtcXFxcbiAgfVxcXFxuICAyMiUge1xcXFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoMHB4LCA4cHgpIHJvdGF0ZSgwZGVnKSBzY2FsZSgxLjIpO1xcXFxuICB9XFxcXG4gIDI0JSB7XFxcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZSgwcHgsIC01cHgpIHJvdGF0ZSgwZGVnKSBzY2FsZSgxLjIpO1xcXFxuICB9XFxcXG4gIDI2JSB7XFxcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZSgwcHgsIDlweCkgcm90YXRlKDBkZWcpIHNjYWxlKDEuMik7XFxcXG4gIH1cXFxcbiAgMjglIHtcXFxcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlKDBweCwgNXB4KSByb3RhdGUoMGRlZykgc2NhbGUoMS4yKTtcXFxcbiAgfVxcXFxuICAzMCUge1xcXFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoMHB4LCAtN3B4KSByb3RhdGUoMGRlZykgc2NhbGUoMS4yKTtcXFxcbiAgfVxcXFxuICAzMiUge1xcXFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoMHB4LCAtMXB4KSByb3RhdGUoMGRlZykgc2NhbGUoMS4yKTtcXFxcbiAgfVxcXFxuICAzNCUge1xcXFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoMHB4LCA0cHgpIHJvdGF0ZSgwZGVnKSBzY2FsZSgxLjIpO1xcXFxuICB9XFxcXG4gIDM2JSB7XFxcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZSgwcHgsIC00cHgpIHJvdGF0ZSgwZGVnKSBzY2FsZSgxLjIpO1xcXFxuICB9XFxcXG4gIDM4JSB7XFxcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZSgwcHgsIDJweCkgcm90YXRlKDBkZWcpIHNjYWxlKDEuMik7XFxcXG4gIH1cXFxcbiAgNDAlIHtcXFxcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlKDBweCwgMTBweCkgcm90YXRlKDBkZWcpIHNjYWxlKDEuMik7XFxcXG4gIH1cXFxcbiAgNDIlIHtcXFxcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlKDBweCwgMXB4KSByb3RhdGUoMGRlZykgc2NhbGUoMS4yKTtcXFxcbiAgfVxcXFxuICA0NCUge1xcXFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoMHB4LCA2cHgpIHJvdGF0ZSgwZGVnKSBzY2FsZSgxLjIpO1xcXFxuICB9XFxcXG4gIDQ2JSB7XFxcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZSgwcHgsIDVweCkgcm90YXRlKDBkZWcpIHNjYWxlKDEuMik7XFxcXG4gIH1cXFxcbiAgNDglIHtcXFxcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlKDBweCwgN3B4KSByb3RhdGUoMGRlZykgc2NhbGUoMS4yKTtcXFxcbiAgfVxcXFxuICA1MCUge1xcXFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoMHB4LCAtN3B4KSByb3RhdGUoMGRlZykgc2NhbGUoMS4yKTtcXFxcbiAgfVxcXFxuICA1MiUge1xcXFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoMHB4LCAtMnB4KSByb3RhdGUoMGRlZykgc2NhbGUoMS4yKTtcXFxcbiAgfVxcXFxuICA1NCUge1xcXFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoMHB4LCAycHgpIHJvdGF0ZSgwZGVnKSBzY2FsZSgxLjIpO1xcXFxuICB9XFxcXG4gIDU2JSB7XFxcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZSgwcHgsIDNweCkgcm90YXRlKDBkZWcpIHNjYWxlKDEuMik7XFxcXG4gIH1cXFxcbiAgNTglIHtcXFxcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlKDBweCwgLTVweCkgcm90YXRlKDBkZWcpIHNjYWxlKDEuMik7XFxcXG4gIH1cXFxcbiAgNjAlIHtcXFxcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlKDBweCwgLTNweCkgcm90YXRlKDBkZWcpIHNjYWxlKDEuMik7XFxcXG4gIH1cXFxcbiAgNjIlIHtcXFxcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlKDBweCwgMTBweCkgcm90YXRlKDBkZWcpIHNjYWxlKDEuMik7XFxcXG4gIH1cXFxcbiAgNjQlIHtcXFxcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlKDBweCwgLTVweCkgcm90YXRlKDBkZWcpIHNjYWxlKDEuMik7XFxcXG4gIH1cXFxcbiAgNjYlIHtcXFxcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlKDBweCwgOHB4KSByb3RhdGUoMGRlZykgc2NhbGUoMS4yKTtcXFxcbiAgfVxcXFxuICA2OCUge1xcXFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoMHB4LCAwcHgpIHJvdGF0ZSgwZGVnKSBzY2FsZSgxLjIpO1xcXFxuICB9XFxcXG4gIDcwJSB7XFxcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZSgwcHgsIDZweCkgcm90YXRlKDBkZWcpIHNjYWxlKDEuMik7XFxcXG4gIH1cXFxcbiAgNzIlIHtcXFxcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlKDBweCwgLTFweCkgcm90YXRlKDBkZWcpIHNjYWxlKDEuMik7XFxcXG4gIH1cXFxcbiAgNzQlIHtcXFxcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlKDBweCwgNnB4KSByb3RhdGUoMGRlZykgc2NhbGUoMS4yKTtcXFxcbiAgfVxcXFxuICA3NiUge1xcXFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoMHB4LCA4cHgpIHJvdGF0ZSgwZGVnKSBzY2FsZSgxLjIpO1xcXFxuICB9XFxcXG4gIDc4JSB7XFxcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZSgwcHgsIDEwcHgpIHJvdGF0ZSgwZGVnKSBzY2FsZSgxLjIpO1xcXFxuICB9XFxcXG4gIDgwJSB7XFxcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZSgwcHgsIDRweCkgcm90YXRlKDBkZWcpIHNjYWxlKDEuMik7XFxcXG4gIH1cXFxcbiAgODIlIHtcXFxcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlKDBweCwgOXB4KSByb3RhdGUoMGRlZykgc2NhbGUoMS4yKTtcXFxcbiAgfVxcXFxuICA4NCUge1xcXFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoMHB4LCAtMXB4KSByb3RhdGUoMGRlZykgc2NhbGUoMS4yKTtcXFxcbiAgfVxcXFxuICA4NiUge1xcXFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoMHB4LCA4cHgpIHJvdGF0ZSgwZGVnKSBzY2FsZSgxLjIpO1xcXFxuICB9XFxcXG4gIDg4JSB7XFxcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZSgwcHgsIDFweCkgcm90YXRlKDBkZWcpIHNjYWxlKDEuMik7XFxcXG4gIH1cXFxcbiAgOTAlIHtcXFxcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlKDBweCwgLTZweCkgcm90YXRlKDBkZWcpIHNjYWxlKDEuMik7XFxcXG4gIH1cXFxcbiAgOTIlIHtcXFxcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlKDBweCwgMnB4KSByb3RhdGUoMGRlZykgc2NhbGUoMS4yKTtcXFxcbiAgfVxcXFxuICA5NCUge1xcXFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoMHB4LCAtNXB4KSByb3RhdGUoMGRlZykgc2NhbGUoMS4yKTtcXFxcbiAgfVxcXFxuICA5NiUge1xcXFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoMHB4LCAtNHB4KSByb3RhdGUoMGRlZykgc2NhbGUoMS4yKTtcXFxcbiAgfVxcXFxuICA5OCUge1xcXFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoMHB4LCAtNHB4KSByb3RhdGUoMGRlZykgc2NhbGUoMS4yKTtcXFxcbiAgfVxcXFxufVxcXFxuI3h4em9vbSB7XFxcXG4gIHdpZHRoOiAxMDAwJTtcXFxcbiAgaGVpZ2h0OiAxMDAlO1xcXFxuICBiYWNrZ3JvdW5kOiAtd2Via2l0LWxpbmVhci1ncmFkaWVudChsZWZ0LCByZ2JhKDAsIDAsIDAsIDAuMDAxKSAwJSwgIzAwMDAwMCAzMCUsICMwMDAwMDAgNzAlLCByZ2JhKDAsIDAsIDAsIDAuMDAxKSAxMDAlKTtcXFxcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKC0xMDAlLCAwLCAwKTtcXFxcbn1cXFxcbiN4em9vbSB7XFxcXG4gIGJhY2tncm91bmQ6ICMwMDAwMDA7XFxcXG59XFxcXG4ueGZhZGUge1xcXFxuICAtd2Via2l0LWFuaW1hdGlvbjogMXMgeGZhZGUxIGZvcndhcmRzXFxcXG5cXFxcdFxcXFx0LDFzIDEuNXMgeGZhZGUyIGZvcndhcmRzO1xcXFxufVxcXFxuQC13ZWJraXQta2V5ZnJhbWVzIHhmYWRlMSB7XFxcXG4gIDAlIHtcXFxcbiAgICB2aXNpYmlsaXR5OiBoaWRkZW47XFxcXG4gICAgb3BhY2l0eTogMDtcXFxcbiAgfVxcXFxuICAxMDAlIHtcXFxcbiAgICB2aXNpYmlsaXR5OiB2aXNpYmxlO1xcXFxuICAgIG9wYWNpdHk6IDE7XFxcXG4gIH1cXFxcbn1cXFxcbkAtd2Via2l0LWtleWZyYW1lcyB4ZmFkZTIge1xcXFxuICAwJSB7XFxcXG4gICAgdmlzaWJpbGl0eTogdmlzaWJsZTtcXFxcbiAgICBvcGFjaXR5OiAxO1xcXFxuICB9XFxcXG4gIDEwMCUge1xcXFxuICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcXFxcbiAgICBvcGFjaXR5OiAwO1xcXFxuICB9XFxcXG59XFxcXG5zLXdvcmQge1xcXFxuICBkaXNwbGF5OiBub25lO1xcXFxufVxcXFxuLmFuaW1hdGVkMSB7XFxcXG4gIC13ZWJraXQtYW5pbWF0aW9uOiAwLjVzIGVhc2UtaW4tb3V0IGZvcndhcmRzO1xcXFxufVxcXFxuXFxcIiwgXFxcIlxcXCJdKTtcXG5cXG4vLyBleHBvcnRzXFxuLy8jIHNvdXJjZVVSTD1bbW9kdWxlXVxcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OHZMaTl6Y21NdmJXRnBiakV1YkdWemN6OWxZMlZtSWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQk8wRkJRMEU3T3p0QlFVZEJPMEZCUTBFc05FSkJRVFpDTEdOQlFXTXNaVUZCWlN4cFFrRkJhVUlzUjBGQlJ5eFRRVUZUTEhGQ1FVRnhRaXhIUVVGSExITkNRVUZ6UWl4dFFrRkJiVUlzUjBGQlJ5eDNRa0ZCZDBJc2JVSkJRVzFDTEVkQlFVY3NVVUZCVVN4blFrRkJaMElzYVVKQlFXbENMREpDUVVFeVFpeEhRVUZITEZGQlFWRXNjVUpCUVhGQ0xHMUNRVUZ0UWl4MVFrRkJkVUlzWjBKQlFXZENMSEZDUVVGeFFpeEhRVUZITEdGQlFXRXNkVUpCUVhWQ0xGbEJRVmtzVjBGQlZ5eEhRVUZITEdOQlFXTXNkVUpCUVhWQ0xFZEJRVWNzWVVGQllTeDFRa0ZCZFVJc1dVRkJXU3hYUVVGWExFZEJRVWNzWTBGQll5eDFRa0ZCZFVJc1IwRkJSeXh2UWtGQmIwSXNaMEpCUVdkQ0xFZEJRVWNzVjBGQlZ5eG5Ra0ZCWjBJc1IwRkJSeXhaUVVGWkxHZENRVUZuUWl4cFFrRkJhVUlzUjBGQlJ5eGpRVUZqTEcxQ1FVRnRRaXhIUVVGSExHTkJRV01zYTBKQlFXdENMRWRCUVVjc2FVSkJRV2xDTEhkQ1FVRjNRaXhIUVVGSExHZENRVUZuUWl4MVFrRkJkVUlzUjBGQlJ5eHBRa0ZCYVVJc1pVRkJaU3hIUVVGSExHbENRVUZwUWl4bFFVRmxMRWRCUVVjc2FVSkJRV2xDTEdWQlFXVXNSMEZCUnl4cFFrRkJhVUlzWlVGQlpTeEhRVUZITEdsQ1FVRnBRaXhsUVVGbExFZEJRVWNzYVVKQlFXbENMR1ZCUVdVc1IwRkJSeXhwUWtGQmFVSXNaVUZCWlN4SFFVRkhMR2xDUVVGcFFpeGxRVUZsTEVkQlFVY3NhVUpCUVdsQ0xHVkJRV1VzUjBGQlJ5eHJRa0ZCYTBJc1owSkJRV2RDTEVkQlFVY3NhMEpCUVd0Q0xHZENRVUZuUWl4SFFVRkhMR3RDUVVGclFpeG5Ra0ZCWjBJc1IwRkJSeXhyUWtGQmEwSXNaMEpCUVdkQ0xFZEJRVWNzYTBKQlFXdENMR2RDUVVGblFpeEhRVUZITEd0Q1FVRnJRaXhuUWtGQlowSXNSMEZCUnl4clFrRkJhMElzWjBKQlFXZENMRWRCUVVjc2EwSkJRV3RDTEdkQ1FVRm5RaXhIUVVGSExHdENRVUZyUWl4blFrRkJaMElzUjBGQlJ5eHJRa0ZCYTBJc1owSkJRV2RDTEVkQlFVY3NhMEpCUVd0Q0xHZENRVUZuUWl4SFFVRkhMR2xDUVVGcFFpeHhSRUZCY1VRc1IwRkJSeXhwUWtGQmFVSXNjVVJCUVhGRUxFZEJRVWNzYVVKQlFXbENMSEZFUVVGeFJDeEhRVUZITEdsQ1FVRnBRaXh4UkVGQmNVUXNSMEZCUnl4cFFrRkJhVUlzY1VSQlFYRkVMRWRCUVVjc2FVSkJRV2xDTEhGRVFVRnhSQ3hIUVVGSExHbENRVUZwUWl4eFJFRkJjVVFzUjBGQlJ5eHBRa0ZCYVVJc2NVUkJRWEZFTEVkQlFVY3NhVUpCUVdsQ0xIRkVRVUZ4UkN4SFFVRkhMR3RDUVVGclFpeHZSRUZCYjBRc1IwRkJSeXhyUWtGQmEwSXNjVVJCUVhGRUxFZEJRVWNzYTBKQlFXdENMSEZFUVVGeFJDeEhRVUZITEd0Q1FVRnJRaXh4UkVGQmNVUXNSMEZCUnl4clFrRkJhMElzY1VSQlFYRkVMRWRCUVVjc2EwSkJRV3RDTEhGRVFVRnhSQ3hIUVVGSExHdENRVUZyUWl4eFJFRkJjVVFzUjBGQlJ5eHJRa0ZCYTBJc2NVUkJRWEZFTEVkQlFVY3NhMEpCUVd0Q0xIRkVRVUZ4UkN4SFFVRkhMR3RDUVVGclFpeHhSRUZCY1VRc1IwRkJSeXhyUWtGQmEwSXNiMFJCUVc5RUxFZEJRVWNzVlVGQlZTdzBRa0ZCTkVJc2FVSkJRV2xDTEdkRFFVRm5ReXc0UWtGQk9FSXNOa05CUVRaRExHMUNRVUZ0UWl4clFrRkJhMElzYVVKQlFXbENMRWRCUVVjc1RVRkJUU3h4UWtGQmNVSXNSMEZCUnl4VlFVRlZMR2REUVVGblF5dzRRa0ZCT0VJc1IwRkJSeXgzUTBGQmQwTXNSMEZCUnl3clJFRkJLMFFzUjBGQlJ5eDNRMEZCZDBNc1IwRkJSeXhwUTBGQmFVTXNhVUpCUVdsQ0xIbENRVUY1UWl4cFFrRkJhVUlzUzBGQlN5eHBRa0ZCYVVJc01FSkJRVEJDTEdsQ1FVRnBRaXhMUVVGTExFZEJRVWNzWlVGQlpTeDFRMEZCZFVNc1IwRkJSeXh0UWtGQmJVSXNNa05CUVRKRExFZEJRVWNzY1VOQlFYRkRMRkZCUVZFc2NVVkJRWEZGTEV0QlFVc3NVVUZCVVN4eFJVRkJjVVVzUzBGQlN5eFJRVUZSTEhGRlFVRnhSU3hMUVVGTExGRkJRVkVzYzBWQlFYTkZMRXRCUVVzc1VVRkJVU3h4UlVGQmNVVXNTMEZCU3l4VFFVRlRMSEZGUVVGeFJTeExRVUZMTEZOQlFWTXNjVVZCUVhGRkxFdEJRVXNzVTBGQlV5eHhSVUZCY1VVc1MwRkJTeXhUUVVGVExITkZRVUZ6UlN4TFFVRkxMRk5CUVZNc2NVVkJRWEZGTEV0QlFVc3NVMEZCVXl4elJVRkJjMFVzUzBGQlN5eFRRVUZUTEhGRlFVRnhSU3hMUVVGTExGTkJRVk1zYzBWQlFYTkZMRXRCUVVzc1UwRkJVeXh4UlVGQmNVVXNTMEZCU3l4VFFVRlRMSEZGUVVGeFJTeExRVUZMTEZOQlFWTXNjMFZCUVhORkxFdEJRVXNzVTBGQlV5eHpSVUZCYzBVc1MwRkJTeXhUUVVGVExIRkZRVUZ4UlN4TFFVRkxMRk5CUVZNc2MwVkJRWE5GTEV0QlFVc3NVMEZCVXl4eFJVRkJjVVVzUzBGQlN5eFRRVUZUTEhORlFVRnpSU3hMUVVGTExGTkJRVk1zY1VWQlFYRkZMRXRCUVVzc1UwRkJVeXh4UlVGQmNVVXNTMEZCU3l4VFFVRlRMSEZGUVVGeFJTeExRVUZMTEZOQlFWTXNjVVZCUVhGRkxFdEJRVXNzVTBGQlV5eHpSVUZCYzBVc1MwRkJTeXhUUVVGVExITkZRVUZ6UlN4TFFVRkxMRk5CUVZNc2NVVkJRWEZGTEV0QlFVc3NVMEZCVXl4eFJVRkJjVVVzUzBGQlN5eFRRVUZUTEhORlFVRnpSU3hMUVVGTExGTkJRVk1zYzBWQlFYTkZMRXRCUVVzc1UwRkJVeXh6UlVGQmMwVXNTMEZCU3l4VFFVRlRMSE5GUVVGelJTeExRVUZMTEZOQlFWTXNjVVZCUVhGRkxFdEJRVXNzVTBGQlV5eHhSVUZCY1VVc1MwRkJTeXhUUVVGVExIRkZRVUZ4UlN4TFFVRkxMRk5CUVZNc2MwVkJRWE5GTEV0QlFVc3NVMEZCVXl4eFJVRkJjVVVzUzBGQlN5eFRRVUZUTEhGRlFVRnhSU3hMUVVGTExGTkJRVk1zYzBWQlFYTkZMRXRCUVVzc1UwRkJVeXh4UlVGQmNVVXNTMEZCU3l4VFFVRlRMSEZGUVVGeFJTeExRVUZMTEZOQlFWTXNjMFZCUVhORkxFdEJRVXNzVTBGQlV5eHhSVUZCY1VVc1MwRkJTeXhUUVVGVExIRkZRVUZ4UlN4TFFVRkxMRk5CUVZNc2MwVkJRWE5GTEV0QlFVc3NVMEZCVXl4eFJVRkJjVVVzUzBGQlN5eFRRVUZUTEhORlFVRnpSU3hMUVVGTExGTkJRVk1zYzBWQlFYTkZMRXRCUVVzc1UwRkJVeXh6UlVGQmMwVXNTMEZCU3l4SFFVRkhMRmRCUVZjc2FVSkJRV2xDTEdsQ1FVRnBRaXcwU0VGQk5FZ3NaMFJCUVdkRUxFZEJRVWNzVlVGQlZTeDNRa0ZCZDBJc1IwRkJSeXhWUVVGVkxIZEZRVUYzUlN4SFFVRkhMRFpDUVVFMlFpeFJRVUZSTEhsQ1FVRjVRaXhwUWtGQmFVSXNTMEZCU3l4VlFVRlZMREJDUVVFd1FpeHBRa0ZCYVVJc1MwRkJTeXhIUVVGSExEWkNRVUUyUWl4UlFVRlJMREJDUVVFd1FpeHBRa0ZCYVVJc1MwRkJTeXhWUVVGVkxIbENRVUY1UWl4cFFrRkJhVUlzUzBGQlN5eEhRVUZITEZWQlFWVXNhMEpCUVd0Q0xFZEJRVWNzWTBGQll5eHBSRUZCYVVRc1IwRkJSenM3UVVGRk9XbFNJaXdpWm1sc1pTSTZJamt1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SmxlSEJ2Y25SeklEMGdiVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQnlaWEYxYVhKbEtGd2lMaTh1TGk4dUxpOHVMaTl1YjJSbFgyMXZaSFZzWlhNdkxqQXVNak11TVVCamMzTXRiRzloWkdWeUwyeHBZaTlqYzNNdFltRnpaUzVxYzF3aUtTZ3BPMXh1THk4Z2FXMXdiM0owYzF4dVhHNWNiaTh2SUcxdlpIVnNaVnh1Wlhod2IzSjBjeTV3ZFhOb0tGdHRiMlIxYkdVdWFXUXNJRndpS2lCN1hGeHVJQ0J0WVhKbmFXNDZJREE3WEZ4dUlDQndZV1JrYVc1bk9pQXdPMXhjYmlBZ1ltOXlaR1Z5T2lCdWIyNWxPMXhjYm4xY1hHNTFiQ0JzYVNCN1hGeHVJQ0JzYVhOMExYTjBlV3hsT2lCdWIyNWxPMXhjYm4xY1hHNHVaR1ZtWVhWc2RGOTJZV3gxWlMxdmRtOGdlMXhjYmlBZ1kyOXNiM0k2SUNOallXTmhZMkU3WEZ4dWZWeGNiaTVrWldaaGRXeDBYM1poYkhWbExXOTJieTB5SUh0Y1hHNGdJR052Ykc5eU9pQWpZV1JoWkdGa08xeGNibjFjWEc1b2RHMXNJSHRjWEc0Z0lIZHBaSFJvT2lBeE1EQWxPMXhjYmlBZ2FHVnBaMmgwT2lBeE1EQWxPMXhjYmlBZ1ptOXVkQzFtWVcxcGJIazZJRWhsYkhabGRHbGpZVHRjWEc1OVhGeHVZbTlrZVNCN1hGeHVJQ0J0WVhndGQybGtkR2c2SURjeU1IQjRPMXhjYmlBZ2JXRnlaMmx1T2lBd0lHRjFkRzg3WEZ4dUlDQndiM05wZEdsdmJqb2djbVZzWVhScGRtVTdYRnh1SUNCM2FXUjBhRG9nTVRBd0pUdGNYRzRnSUcxcGJpMW9aV2xuYUhRNklERXdNQ1U3WEZ4dWZWeGNibUp2WkhrZ0xuSmxiQ0I3WEZ4dUlDQndiM05wZEdsdmJqb2djbVZzWVhScGRtVTdYRnh1SUNCc1pXWjBPaUF3TzF4Y2JpQWdkRzl3T2lBd08xeGNibjFjWEc1aWIyUjVJQzV5Wld4ZklIdGNYRzRnSUhCdmMybDBhVzl1T2lCeVpXeGhkR2wyWlR0Y1hHNTlYRnh1WW05a2VTQXVZV0p6SUh0Y1hHNGdJSEJ2YzJsMGFXOXVPaUJoWW5OdmJIVjBaVHRjWEc0Z0lHeGxablE2SURBN1hGeHVJQ0IwYjNBNklEQTdYRnh1ZlZ4Y2JtSnZaSGtnTG1GaWMxOGdlMXhjYmlBZ2NHOXphWFJwYjI0NklHRmljMjlzZFhSbE8xeGNibjFjWEc1aWIyUjVJQzVqYkdWaGNpMWliM1JvSUh0Y1hHNGdJR05zWldGeU9pQmliM1JvTzF4Y2JuMWNYRzVpYjJSNUlDNTNJSHRjWEc0Z0lIZHBaSFJvT2lBeE1EQWxPMXhjYm4xY1hHNWliMlI1SUM1M2FDQjdYRnh1SUNCM2FXUjBhRG9nTVRBd0pUdGNYRzRnSUdobGFXZG9kRG9nTVRBd0pUdGNYRzU5WEZ4dVltOWtlU0F1YzJodmR5QjdYRnh1SUNCa2FYTndiR0Y1T2lCaWJHOWphenRjWEc1OVhGeHVZbTlrZVNBdWFHbGtaU0I3WEZ4dUlDQmthWE53YkdGNU9pQnViMjVsTzF4Y2JuMWNYRzVpYjJSNUlDNTJhWE5wWW14bElIdGNYRzRnSUhacGMybGlhV3hwZEhrNklIWnBjMmxpYkdVN1hGeHVmVnhjYm1KdlpIa2dMbWhwWkdSbGJpQjdYRnh1SUNCMmFYTnBZbWxzYVhSNU9pQm9hV1JrWlc0N1hGeHVmVnhjYm1KdlpIa2dMbU56Y3pJdGVqRWdlMXhjYmlBZ2VpMXBibVJsZURvZ01UdGNYRzU5WEZ4dVltOWtlU0F1WTNOek1pMTZNaUI3WEZ4dUlDQjZMV2x1WkdWNE9pQXlPMXhjYm4xY1hHNWliMlI1SUM1amMzTXlMWG96SUh0Y1hHNGdJSG90YVc1a1pYZzZJRE03WEZ4dWZWeGNibUp2WkhrZ0xtTnpjekl0ZWpRZ2UxeGNiaUFnZWkxcGJtUmxlRG9nTkR0Y1hHNTlYRnh1WW05a2VTQXVZM056TWkxNk5TQjdYRnh1SUNCNkxXbHVaR1Y0T2lBMU8xeGNibjFjWEc1aWIyUjVJQzVqYzNNeUxYbzJJSHRjWEc0Z0lIb3RhVzVrWlhnNklEWTdYRnh1ZlZ4Y2JtSnZaSGtnTG1OemN6SXRlamNnZTF4Y2JpQWdlaTFwYm1SbGVEb2dOenRjWEc1OVhGeHVZbTlrZVNBdVkzTnpNaTE2T0NCN1hGeHVJQ0I2TFdsdVpHVjRPaUE0TzF4Y2JuMWNYRzVpYjJSNUlDNWpjM015TFhvNUlIdGNYRzRnSUhvdGFXNWtaWGc2SURrN1hGeHVmVnhjYm1KdlpIa2dMbU56Y3pJdGVqRXdJSHRjWEc0Z0lIb3RhVzVrWlhnNklERXdPMXhjYm4xY1hHNWliMlI1SUM1amMzTXlMWG94TVNCN1hGeHVJQ0I2TFdsdVpHVjRPaUF4TVR0Y1hHNTlYRnh1WW05a2VTQXVZM056TWkxNk1USWdlMXhjYmlBZ2VpMXBibVJsZURvZ01USTdYRnh1ZlZ4Y2JtSnZaSGtnTG1OemN6SXRlakV6SUh0Y1hHNGdJSG90YVc1a1pYZzZJREV6TzF4Y2JuMWNYRzVpYjJSNUlDNWpjM015TFhveE5DQjdYRnh1SUNCNkxXbHVaR1Y0T2lBeE5EdGNYRzU5WEZ4dVltOWtlU0F1WTNOek1pMTZNVFVnZTF4Y2JpQWdlaTFwYm1SbGVEb2dNVFU3WEZ4dWZWeGNibUp2WkhrZ0xtTnpjekl0ZWpFMklIdGNYRzRnSUhvdGFXNWtaWGc2SURFMk8xeGNibjFjWEc1aWIyUjVJQzVqYzNNeUxYb3hOeUI3WEZ4dUlDQjZMV2x1WkdWNE9pQXhOenRjWEc1OVhGeHVZbTlrZVNBdVkzTnpNaTE2TVRnZ2UxeGNiaUFnZWkxcGJtUmxlRG9nTVRnN1hGeHVmVnhjYm1KdlpIa2dMbU56Y3pJdGVqRTVJSHRjWEc0Z0lIb3RhVzVrWlhnNklERTVPMXhjYm4xY1hHNWliMlI1SUM1amMzTXlMWG95TUNCN1hGeHVJQ0I2TFdsdVpHVjRPaUF5TUR0Y1hHNTlYRnh1WW05a2VTQXVZM056TXkxNk1TQjdYRnh1SUNBdGQyVmlhMmwwTFhSeVlXNXpabTl5YlRvZ2RISmhibk5zWVhSbE0yUW9YRnhjSWpBdU1ERndlRnhjWENJc0lEQXNJREFwTzF4Y2JuMWNYRzVpYjJSNUlDNWpjM016TFhveUlIdGNYRzRnSUMxM1pXSnJhWFF0ZEhKaGJuTm1iM0p0T2lCMGNtRnVjMnhoZEdVelpDaGNYRndpTUM0d01uQjRYRnhjSWl3Z01Dd2dNQ2s3WEZ4dWZWeGNibUp2WkhrZ0xtTnpjek10ZWpNZ2UxeGNiaUFnTFhkbFltdHBkQzEwY21GdWMyWnZjbTA2SUhSeVlXNXpiR0YwWlROa0tGeGNYQ0l3TGpBemNIaGNYRndpTENBd0xDQXdLVHRjWEc1OVhGeHVZbTlrZVNBdVkzTnpNeTE2TkNCN1hGeHVJQ0F0ZDJWaWEybDBMWFJ5WVc1elptOXliVG9nZEhKaGJuTnNZWFJsTTJRb1hGeGNJakF1TURSd2VGeGNYQ0lzSURBc0lEQXBPMXhjYm4xY1hHNWliMlI1SUM1amMzTXpMWG8xSUh0Y1hHNGdJQzEzWldKcmFYUXRkSEpoYm5ObWIzSnRPaUIwY21GdWMyeGhkR1V6WkNoY1hGd2lNQzR3TlhCNFhGeGNJaXdnTUN3Z01DazdYRnh1ZlZ4Y2JtSnZaSGtnTG1OemN6TXRlallnZTF4Y2JpQWdMWGRsWW10cGRDMTBjbUZ1YzJadmNtMDZJSFJ5WVc1emJHRjBaVE5rS0Z4Y1hDSXdMakEyY0hoY1hGd2lMQ0F3TENBd0tUdGNYRzU5WEZ4dVltOWtlU0F1WTNOek15MTZOeUI3WEZ4dUlDQXRkMlZpYTJsMExYUnlZVzV6Wm05eWJUb2dkSEpoYm5Oc1lYUmxNMlFvWEZ4Y0lqQXVNRGR3ZUZ4Y1hDSXNJREFzSURBcE8xeGNibjFjWEc1aWIyUjVJQzVqYzNNekxYbzRJSHRjWEc0Z0lDMTNaV0pyYVhRdGRISmhibk5tYjNKdE9pQjBjbUZ1YzJ4aGRHVXpaQ2hjWEZ3aU1DNHdPSEI0WEZ4Y0lpd2dNQ3dnTUNrN1hGeHVmVnhjYm1KdlpIa2dMbU56Y3pNdGVqa2dlMXhjYmlBZ0xYZGxZbXRwZEMxMGNtRnVjMlp2Y20wNklIUnlZVzV6YkdGMFpUTmtLRnhjWENJd0xqQTVjSGhjWEZ3aUxDQXdMQ0F3S1R0Y1hHNTlYRnh1WW05a2VTQXVZM056TXkxNk1UQWdlMXhjYmlBZ0xYZGxZbXRwZEMxMGNtRnVjMlp2Y20wNklIUnlZVzV6YkdGMFpUTmtLRnhjWENJd0xqRndlRnhjWENJc0lEQXNJREFwTzF4Y2JuMWNYRzVpYjJSNUlDNWpjM016TFhveE1TQjdYRnh1SUNBdGQyVmlhMmwwTFhSeVlXNXpabTl5YlRvZ2RISmhibk5zWVhSbE0yUW9YRnhjSWpBdU1URndlRnhjWENJc0lEQXNJREFwTzF4Y2JuMWNYRzVpYjJSNUlDNWpjM016TFhveE1pQjdYRnh1SUNBdGQyVmlhMmwwTFhSeVlXNXpabTl5YlRvZ2RISmhibk5zWVhSbE0yUW9YRnhjSWpBdU1USndlRnhjWENJc0lEQXNJREFwTzF4Y2JuMWNYRzVpYjJSNUlDNWpjM016TFhveE15QjdYRnh1SUNBdGQyVmlhMmwwTFhSeVlXNXpabTl5YlRvZ2RISmhibk5zWVhSbE0yUW9YRnhjSWpBdU1UTndlRnhjWENJc0lEQXNJREFwTzF4Y2JuMWNYRzVpYjJSNUlDNWpjM016TFhveE5DQjdYRnh1SUNBdGQyVmlhMmwwTFhSeVlXNXpabTl5YlRvZ2RISmhibk5zWVhSbE0yUW9YRnhjSWpBdU1UUndlRnhjWENJc0lEQXNJREFwTzF4Y2JuMWNYRzVpYjJSNUlDNWpjM016TFhveE5TQjdYRnh1SUNBdGQyVmlhMmwwTFhSeVlXNXpabTl5YlRvZ2RISmhibk5zWVhSbE0yUW9YRnhjSWpBdU1UVndlRnhjWENJc0lEQXNJREFwTzF4Y2JuMWNYRzVpYjJSNUlDNWpjM016TFhveE5pQjdYRnh1SUNBdGQyVmlhMmwwTFhSeVlXNXpabTl5YlRvZ2RISmhibk5zWVhSbE0yUW9YRnhjSWpBdU1UWndlRnhjWENJc0lEQXNJREFwTzF4Y2JuMWNYRzVpYjJSNUlDNWpjM016TFhveE55QjdYRnh1SUNBdGQyVmlhMmwwTFhSeVlXNXpabTl5YlRvZ2RISmhibk5zWVhSbE0yUW9YRnhjSWpBdU1UZHdlRnhjWENJc0lEQXNJREFwTzF4Y2JuMWNYRzVpYjJSNUlDNWpjM016TFhveE9DQjdYRnh1SUNBdGQyVmlhMmwwTFhSeVlXNXpabTl5YlRvZ2RISmhibk5zWVhSbE0yUW9YRnhjSWpBdU1UaHdlRnhjWENJc0lEQXNJREFwTzF4Y2JuMWNYRzVpYjJSNUlDNWpjM016TFhveE9TQjdYRnh1SUNBdGQyVmlhMmwwTFhSeVlXNXpabTl5YlRvZ2RISmhibk5zWVhSbE0yUW9YRnhjSWpBdU1UbHdlRnhjWENJc0lEQXNJREFwTzF4Y2JuMWNYRzVpYjJSNUlDNWpjM016TFhveU1DQjdYRnh1SUNBdGQyVmlhMmwwTFhSeVlXNXpabTl5YlRvZ2RISmhibk5zWVhSbE0yUW9YRnhjSWpBdU1uQjRYRnhjSWl3Z01Dd2dNQ2s3WEZ4dWZWeGNibUoxZEhSdmJpQjdYRnh1SUNCaVlXTnJaM0p2ZFc1a09pQjBjbUZ1YzNCaGNtVnVkRHRjWEc0Z0lHSnZjbVJsY2pvZ2JtOXVaVHRjWEc0Z0lDMTNaV0pyYVhRdGRHOTFZMmd0WTJGc2JHOTFkRG9nYm05dVpUdGNYRzRnSUMxM1pXSnJhWFF0ZFhObGNpMXpaV3hsWTNRNklHNXZibVU3WEZ4dUlDQXRkMlZpYTJsMExYUmhjQzFvYVdkb2JHbG5hSFF0WTI5c2IzSTZJSFJ5WVc1emNHRnlaVzUwTzF4Y2JpQWdaR2x6Y0d4aGVUb2dZbXh2WTJzN1hGeHVJQ0J2ZFhSc2FXNWxPaUJ1YjI1bE8xeGNiaUFnWTNWeWMyOXlPaUJoZFhSdk8xeGNibjFjWEc1c2FTQjdYRnh1SUNCc2FYTjBMWE4wZVd4bE9pQnViMjVsTzF4Y2JuMWNYRzVqWVc1MllYTWdlMXhjYmlBZ0xYZGxZbXRwZEMxMGIzVmphQzFqWVd4c2IzVjBPaUJ1YjI1bE8xeGNiaUFnTFhkbFltdHBkQzExYzJWeUxYTmxiR1ZqZERvZ2JtOXVaVHRjWEc1OVhGeHVRRzFsWkdsaElITmpjbVZsYmlCaGJtUWdLRzFoZUMxM2FXUjBhRG9nTXpJeGNIZ3BJSHRjWEc1OVhGeHVRRzFsWkdsaElITmpjbVZsYmlCaGJtUWdLRzFwYmkxM2FXUjBhRG9nTXpJeGNIZ3BJR0Z1WkNBb2JXRjRMWGRwWkhSb09pQTBNREJ3ZUNrZ2UxeGNibjFjWEc1QWJXVmthV0VnYzJOeVpXVnVJR0Z1WkNBb2JXbHVMWGRwWkhSb09pQTBNREJ3ZUNrZ2UxeGNibjFjWEc1QUxYZGxZbXRwZEMxclpYbG1jbUZ0WlhNZ2JHbG5hSFF0YldGemF5QjdYRnh1SUNBd0pTeGNYRzRnSURFd01DVWdlMXhjYmlBZ0lDQjJhWE5wWW1sc2FYUjVPaUJvYVdSa1pXNDdYRnh1SUNBZ0lHOXdZV05wZEhrNklEQTdYRnh1SUNCOVhGeHVJQ0F6TUNVc1hGeHVJQ0EyTUNVZ2UxeGNiaUFnSUNCMmFYTnBZbWxzYVhSNU9pQjJhWE5wWW14bE8xeGNiaUFnSUNCdmNHRmphWFI1T2lBeE8xeGNiaUFnZlZ4Y2JuMWNYRzR1YkdsbmFIUXRiV0Z6YXlCN1hGeHVJQ0F0ZDJWaWEybDBMV0Z1YVcxaGRHbHZiam9nTUM0MWN5QnNhV2RvZEMxdFlYTnJPMXhjYm4xY1hHNHVjMmhoYTJVdGRtVnlkR2xqWVd3Z2UxeGNiaUFnTFhkbFltdHBkQzFoYm1sdFlYUnBiMjQ2SURBdU5YTWdjMmhoYTJVdGRtVnlkR2xqWVd3N1hGeHVmVnhjYmtBdGQyVmlhMmwwTFd0bGVXWnlZVzFsY3lCemFHRnJaUzEyWlhKMGFXTmhiQ0I3WEZ4dUlDQXdKU0I3WEZ4dUlDQWdJQzEzWldKcmFYUXRkSEpoYm5ObWIzSnRPaUIwY21GdWMyeGhkR1VvTUhCNExDQXdjSGdwSUhKdmRHRjBaU2d3WkdWbktTQnpZMkZzWlNneExqSXBPMXhjYmlBZ2ZWeGNiaUFnTWlVZ2UxeGNiaUFnSUNBdGQyVmlhMmwwTFhSeVlXNXpabTl5YlRvZ2RISmhibk5zWVhSbEtEQndlQ3dnTVhCNEtTQnliM1JoZEdVb01HUmxaeWtnYzJOaGJHVW9NUzR5S1R0Y1hHNGdJSDFjWEc0Z0lEUWxJSHRjWEc0Z0lDQWdMWGRsWW10cGRDMTBjbUZ1YzJadmNtMDZJSFJ5WVc1emJHRjBaU2d3Y0hnc0lEVndlQ2tnY205MFlYUmxLREJrWldjcElITmpZV3hsS0RFdU1pazdYRnh1SUNCOVhGeHVJQ0EySlNCN1hGeHVJQ0FnSUMxM1pXSnJhWFF0ZEhKaGJuTm1iM0p0T2lCMGNtRnVjMnhoZEdVb01IQjRMQ0F0TW5CNEtTQnliM1JoZEdVb01HUmxaeWtnYzJOaGJHVW9NUzR5S1R0Y1hHNGdJSDFjWEc0Z0lEZ2xJSHRjWEc0Z0lDQWdMWGRsWW10cGRDMTBjbUZ1YzJadmNtMDZJSFJ5WVc1emJHRjBaU2d3Y0hnc0lEWndlQ2tnY205MFlYUmxLREJrWldjcElITmpZV3hsS0RFdU1pazdYRnh1SUNCOVhGeHVJQ0F4TUNVZ2UxeGNiaUFnSUNBdGQyVmlhMmwwTFhSeVlXNXpabTl5YlRvZ2RISmhibk5zWVhSbEtEQndlQ3dnTkhCNEtTQnliM1JoZEdVb01HUmxaeWtnYzJOaGJHVW9NUzR5S1R0Y1hHNGdJSDFjWEc0Z0lERXlKU0I3WEZ4dUlDQWdJQzEzWldKcmFYUXRkSEpoYm5ObWIzSnRPaUIwY21GdWMyeGhkR1VvTUhCNExDQTJjSGdwSUhKdmRHRjBaU2d3WkdWbktTQnpZMkZzWlNneExqSXBPMXhjYmlBZ2ZWeGNiaUFnTVRRbElIdGNYRzRnSUNBZ0xYZGxZbXRwZEMxMGNtRnVjMlp2Y20wNklIUnlZVzV6YkdGMFpTZ3djSGdzSURWd2VDa2djbTkwWVhSbEtEQmtaV2NwSUhOallXeGxLREV1TWlrN1hGeHVJQ0I5WEZ4dUlDQXhOaVVnZTF4Y2JpQWdJQ0F0ZDJWaWEybDBMWFJ5WVc1elptOXliVG9nZEhKaGJuTnNZWFJsS0RCd2VDd2dMVGR3ZUNrZ2NtOTBZWFJsS0RCa1pXY3BJSE5qWVd4bEtERXVNaWs3WEZ4dUlDQjlYRnh1SUNBeE9DVWdlMXhjYmlBZ0lDQXRkMlZpYTJsMExYUnlZVzV6Wm05eWJUb2dkSEpoYm5Oc1lYUmxLREJ3ZUN3Z00zQjRLU0J5YjNSaGRHVW9NR1JsWnlrZ2MyTmhiR1VvTVM0eUtUdGNYRzRnSUgxY1hHNGdJREl3SlNCN1hGeHVJQ0FnSUMxM1pXSnJhWFF0ZEhKaGJuTm1iM0p0T2lCMGNtRnVjMnhoZEdVb01IQjRMQ0F4TUhCNEtTQnliM1JoZEdVb01HUmxaeWtnYzJOaGJHVW9NUzR5S1R0Y1hHNGdJSDFjWEc0Z0lESXlKU0I3WEZ4dUlDQWdJQzEzWldKcmFYUXRkSEpoYm5ObWIzSnRPaUIwY21GdWMyeGhkR1VvTUhCNExDQTRjSGdwSUhKdmRHRjBaU2d3WkdWbktTQnpZMkZzWlNneExqSXBPMXhjYmlBZ2ZWeGNiaUFnTWpRbElIdGNYRzRnSUNBZ0xYZGxZbXRwZEMxMGNtRnVjMlp2Y20wNklIUnlZVzV6YkdGMFpTZ3djSGdzSUMwMWNIZ3BJSEp2ZEdGMFpTZ3daR1ZuS1NCelkyRnNaU2d4TGpJcE8xeGNiaUFnZlZ4Y2JpQWdNallsSUh0Y1hHNGdJQ0FnTFhkbFltdHBkQzEwY21GdWMyWnZjbTA2SUhSeVlXNXpiR0YwWlNnd2NIZ3NJRGx3ZUNrZ2NtOTBZWFJsS0RCa1pXY3BJSE5qWVd4bEtERXVNaWs3WEZ4dUlDQjlYRnh1SUNBeU9DVWdlMXhjYmlBZ0lDQXRkMlZpYTJsMExYUnlZVzV6Wm05eWJUb2dkSEpoYm5Oc1lYUmxLREJ3ZUN3Z05YQjRLU0J5YjNSaGRHVW9NR1JsWnlrZ2MyTmhiR1VvTVM0eUtUdGNYRzRnSUgxY1hHNGdJRE13SlNCN1hGeHVJQ0FnSUMxM1pXSnJhWFF0ZEhKaGJuTm1iM0p0T2lCMGNtRnVjMnhoZEdVb01IQjRMQ0F0TjNCNEtTQnliM1JoZEdVb01HUmxaeWtnYzJOaGJHVW9NUzR5S1R0Y1hHNGdJSDFjWEc0Z0lETXlKU0I3WEZ4dUlDQWdJQzEzWldKcmFYUXRkSEpoYm5ObWIzSnRPaUIwY21GdWMyeGhkR1VvTUhCNExDQXRNWEI0S1NCeWIzUmhkR1VvTUdSbFp5a2djMk5oYkdVb01TNHlLVHRjWEc0Z0lIMWNYRzRnSURNMEpTQjdYRnh1SUNBZ0lDMTNaV0pyYVhRdGRISmhibk5tYjNKdE9pQjBjbUZ1YzJ4aGRHVW9NSEI0TENBMGNIZ3BJSEp2ZEdGMFpTZ3daR1ZuS1NCelkyRnNaU2d4TGpJcE8xeGNiaUFnZlZ4Y2JpQWdNellsSUh0Y1hHNGdJQ0FnTFhkbFltdHBkQzEwY21GdWMyWnZjbTA2SUhSeVlXNXpiR0YwWlNnd2NIZ3NJQzAwY0hncElISnZkR0YwWlNnd1pHVm5LU0J6WTJGc1pTZ3hMaklwTzF4Y2JpQWdmVnhjYmlBZ016Z2xJSHRjWEc0Z0lDQWdMWGRsWW10cGRDMTBjbUZ1YzJadmNtMDZJSFJ5WVc1emJHRjBaU2d3Y0hnc0lESndlQ2tnY205MFlYUmxLREJrWldjcElITmpZV3hsS0RFdU1pazdYRnh1SUNCOVhGeHVJQ0EwTUNVZ2UxeGNiaUFnSUNBdGQyVmlhMmwwTFhSeVlXNXpabTl5YlRvZ2RISmhibk5zWVhSbEtEQndlQ3dnTVRCd2VDa2djbTkwWVhSbEtEQmtaV2NwSUhOallXeGxLREV1TWlrN1hGeHVJQ0I5WEZ4dUlDQTBNaVVnZTF4Y2JpQWdJQ0F0ZDJWaWEybDBMWFJ5WVc1elptOXliVG9nZEhKaGJuTnNZWFJsS0RCd2VDd2dNWEI0S1NCeWIzUmhkR1VvTUdSbFp5a2djMk5oYkdVb01TNHlLVHRjWEc0Z0lIMWNYRzRnSURRMEpTQjdYRnh1SUNBZ0lDMTNaV0pyYVhRdGRISmhibk5tYjNKdE9pQjBjbUZ1YzJ4aGRHVW9NSEI0TENBMmNIZ3BJSEp2ZEdGMFpTZ3daR1ZuS1NCelkyRnNaU2d4TGpJcE8xeGNiaUFnZlZ4Y2JpQWdORFlsSUh0Y1hHNGdJQ0FnTFhkbFltdHBkQzEwY21GdWMyWnZjbTA2SUhSeVlXNXpiR0YwWlNnd2NIZ3NJRFZ3ZUNrZ2NtOTBZWFJsS0RCa1pXY3BJSE5qWVd4bEtERXVNaWs3WEZ4dUlDQjlYRnh1SUNBME9DVWdlMXhjYmlBZ0lDQXRkMlZpYTJsMExYUnlZVzV6Wm05eWJUb2dkSEpoYm5Oc1lYUmxLREJ3ZUN3Z04zQjRLU0J5YjNSaGRHVW9NR1JsWnlrZ2MyTmhiR1VvTVM0eUtUdGNYRzRnSUgxY1hHNGdJRFV3SlNCN1hGeHVJQ0FnSUMxM1pXSnJhWFF0ZEhKaGJuTm1iM0p0T2lCMGNtRnVjMnhoZEdVb01IQjRMQ0F0TjNCNEtTQnliM1JoZEdVb01HUmxaeWtnYzJOaGJHVW9NUzR5S1R0Y1hHNGdJSDFjWEc0Z0lEVXlKU0I3WEZ4dUlDQWdJQzEzWldKcmFYUXRkSEpoYm5ObWIzSnRPaUIwY21GdWMyeGhkR1VvTUhCNExDQXRNbkI0S1NCeWIzUmhkR1VvTUdSbFp5a2djMk5oYkdVb01TNHlLVHRjWEc0Z0lIMWNYRzRnSURVMEpTQjdYRnh1SUNBZ0lDMTNaV0pyYVhRdGRISmhibk5tYjNKdE9pQjBjbUZ1YzJ4aGRHVW9NSEI0TENBeWNIZ3BJSEp2ZEdGMFpTZ3daR1ZuS1NCelkyRnNaU2d4TGpJcE8xeGNiaUFnZlZ4Y2JpQWdOVFlsSUh0Y1hHNGdJQ0FnTFhkbFltdHBkQzEwY21GdWMyWnZjbTA2SUhSeVlXNXpiR0YwWlNnd2NIZ3NJRE53ZUNrZ2NtOTBZWFJsS0RCa1pXY3BJSE5qWVd4bEtERXVNaWs3WEZ4dUlDQjlYRnh1SUNBMU9DVWdlMXhjYmlBZ0lDQXRkMlZpYTJsMExYUnlZVzV6Wm05eWJUb2dkSEpoYm5Oc1lYUmxLREJ3ZUN3Z0xUVndlQ2tnY205MFlYUmxLREJrWldjcElITmpZV3hsS0RFdU1pazdYRnh1SUNCOVhGeHVJQ0EyTUNVZ2UxeGNiaUFnSUNBdGQyVmlhMmwwTFhSeVlXNXpabTl5YlRvZ2RISmhibk5zWVhSbEtEQndlQ3dnTFROd2VDa2djbTkwWVhSbEtEQmtaV2NwSUhOallXeGxLREV1TWlrN1hGeHVJQ0I5WEZ4dUlDQTJNaVVnZTF4Y2JpQWdJQ0F0ZDJWaWEybDBMWFJ5WVc1elptOXliVG9nZEhKaGJuTnNZWFJsS0RCd2VDd2dNVEJ3ZUNrZ2NtOTBZWFJsS0RCa1pXY3BJSE5qWVd4bEtERXVNaWs3WEZ4dUlDQjlYRnh1SUNBMk5DVWdlMXhjYmlBZ0lDQXRkMlZpYTJsMExYUnlZVzV6Wm05eWJUb2dkSEpoYm5Oc1lYUmxLREJ3ZUN3Z0xUVndlQ2tnY205MFlYUmxLREJrWldjcElITmpZV3hsS0RFdU1pazdYRnh1SUNCOVhGeHVJQ0EyTmlVZ2UxeGNiaUFnSUNBdGQyVmlhMmwwTFhSeVlXNXpabTl5YlRvZ2RISmhibk5zWVhSbEtEQndlQ3dnT0hCNEtTQnliM1JoZEdVb01HUmxaeWtnYzJOaGJHVW9NUzR5S1R0Y1hHNGdJSDFjWEc0Z0lEWTRKU0I3WEZ4dUlDQWdJQzEzWldKcmFYUXRkSEpoYm5ObWIzSnRPaUIwY21GdWMyeGhkR1VvTUhCNExDQXdjSGdwSUhKdmRHRjBaU2d3WkdWbktTQnpZMkZzWlNneExqSXBPMXhjYmlBZ2ZWeGNiaUFnTnpBbElIdGNYRzRnSUNBZ0xYZGxZbXRwZEMxMGNtRnVjMlp2Y20wNklIUnlZVzV6YkdGMFpTZ3djSGdzSURad2VDa2djbTkwWVhSbEtEQmtaV2NwSUhOallXeGxLREV1TWlrN1hGeHVJQ0I5WEZ4dUlDQTNNaVVnZTF4Y2JpQWdJQ0F0ZDJWaWEybDBMWFJ5WVc1elptOXliVG9nZEhKaGJuTnNZWFJsS0RCd2VDd2dMVEZ3ZUNrZ2NtOTBZWFJsS0RCa1pXY3BJSE5qWVd4bEtERXVNaWs3WEZ4dUlDQjlYRnh1SUNBM05DVWdlMXhjYmlBZ0lDQXRkMlZpYTJsMExYUnlZVzV6Wm05eWJUb2dkSEpoYm5Oc1lYUmxLREJ3ZUN3Z05uQjRLU0J5YjNSaGRHVW9NR1JsWnlrZ2MyTmhiR1VvTVM0eUtUdGNYRzRnSUgxY1hHNGdJRGMySlNCN1hGeHVJQ0FnSUMxM1pXSnJhWFF0ZEhKaGJuTm1iM0p0T2lCMGNtRnVjMnhoZEdVb01IQjRMQ0E0Y0hncElISnZkR0YwWlNnd1pHVm5LU0J6WTJGc1pTZ3hMaklwTzF4Y2JpQWdmVnhjYmlBZ056Z2xJSHRjWEc0Z0lDQWdMWGRsWW10cGRDMTBjbUZ1YzJadmNtMDZJSFJ5WVc1emJHRjBaU2d3Y0hnc0lERXdjSGdwSUhKdmRHRjBaU2d3WkdWbktTQnpZMkZzWlNneExqSXBPMXhjYmlBZ2ZWeGNiaUFnT0RBbElIdGNYRzRnSUNBZ0xYZGxZbXRwZEMxMGNtRnVjMlp2Y20wNklIUnlZVzV6YkdGMFpTZ3djSGdzSURSd2VDa2djbTkwWVhSbEtEQmtaV2NwSUhOallXeGxLREV1TWlrN1hGeHVJQ0I5WEZ4dUlDQTRNaVVnZTF4Y2JpQWdJQ0F0ZDJWaWEybDBMWFJ5WVc1elptOXliVG9nZEhKaGJuTnNZWFJsS0RCd2VDd2dPWEI0S1NCeWIzUmhkR1VvTUdSbFp5a2djMk5oYkdVb01TNHlLVHRjWEc0Z0lIMWNYRzRnSURnMEpTQjdYRnh1SUNBZ0lDMTNaV0pyYVhRdGRISmhibk5tYjNKdE9pQjBjbUZ1YzJ4aGRHVW9NSEI0TENBdE1YQjRLU0J5YjNSaGRHVW9NR1JsWnlrZ2MyTmhiR1VvTVM0eUtUdGNYRzRnSUgxY1hHNGdJRGcySlNCN1hGeHVJQ0FnSUMxM1pXSnJhWFF0ZEhKaGJuTm1iM0p0T2lCMGNtRnVjMnhoZEdVb01IQjRMQ0E0Y0hncElISnZkR0YwWlNnd1pHVm5LU0J6WTJGc1pTZ3hMaklwTzF4Y2JpQWdmVnhjYmlBZ09EZ2xJSHRjWEc0Z0lDQWdMWGRsWW10cGRDMTBjbUZ1YzJadmNtMDZJSFJ5WVc1emJHRjBaU2d3Y0hnc0lERndlQ2tnY205MFlYUmxLREJrWldjcElITmpZV3hsS0RFdU1pazdYRnh1SUNCOVhGeHVJQ0E1TUNVZ2UxeGNiaUFnSUNBdGQyVmlhMmwwTFhSeVlXNXpabTl5YlRvZ2RISmhibk5zWVhSbEtEQndlQ3dnTFRad2VDa2djbTkwWVhSbEtEQmtaV2NwSUhOallXeGxLREV1TWlrN1hGeHVJQ0I5WEZ4dUlDQTVNaVVnZTF4Y2JpQWdJQ0F0ZDJWaWEybDBMWFJ5WVc1elptOXliVG9nZEhKaGJuTnNZWFJsS0RCd2VDd2dNbkI0S1NCeWIzUmhkR1VvTUdSbFp5a2djMk5oYkdVb01TNHlLVHRjWEc0Z0lIMWNYRzRnSURrMEpTQjdYRnh1SUNBZ0lDMTNaV0pyYVhRdGRISmhibk5tYjNKdE9pQjBjbUZ1YzJ4aGRHVW9NSEI0TENBdE5YQjRLU0J5YjNSaGRHVW9NR1JsWnlrZ2MyTmhiR1VvTVM0eUtUdGNYRzRnSUgxY1hHNGdJRGsySlNCN1hGeHVJQ0FnSUMxM1pXSnJhWFF0ZEhKaGJuTm1iM0p0T2lCMGNtRnVjMnhoZEdVb01IQjRMQ0F0TkhCNEtTQnliM1JoZEdVb01HUmxaeWtnYzJOaGJHVW9NUzR5S1R0Y1hHNGdJSDFjWEc0Z0lEazRKU0I3WEZ4dUlDQWdJQzEzWldKcmFYUXRkSEpoYm5ObWIzSnRPaUIwY21GdWMyeGhkR1VvTUhCNExDQXROSEI0S1NCeWIzUmhkR1VvTUdSbFp5a2djMk5oYkdVb01TNHlLVHRjWEc0Z0lIMWNYRzU5WEZ4dUkzaDRlbTl2YlNCN1hGeHVJQ0IzYVdSMGFEb2dNVEF3TUNVN1hGeHVJQ0JvWldsbmFIUTZJREV3TUNVN1hGeHVJQ0JpWVdOclozSnZkVzVrT2lBdGQyVmlhMmwwTFd4cGJtVmhjaTFuY21Ga2FXVnVkQ2hzWldaMExDQnlaMkpoS0RBc0lEQXNJREFzSURBdU1EQXhLU0F3SlN3Z0l6QXdNREF3TUNBek1DVXNJQ013TURBd01EQWdOekFsTENCeVoySmhLREFzSURBc0lEQXNJREF1TURBeEtTQXhNREFsS1R0Y1hHNGdJQzEzWldKcmFYUXRkSEpoYm5ObWIzSnRPaUIwY21GdWMyeGhkR1V6WkNndE1UQXdKU3dnTUN3Z01DazdYRnh1ZlZ4Y2JpTjRlbTl2YlNCN1hGeHVJQ0JpWVdOclozSnZkVzVrT2lBak1EQXdNREF3TzF4Y2JuMWNYRzR1ZUdaaFpHVWdlMXhjYmlBZ0xYZGxZbXRwZEMxaGJtbHRZWFJwYjI0NklERnpJSGhtWVdSbE1TQm1iM0ozWVhKa2MxeGNibHhjZEZ4Y2RDd3hjeUF4TGpWeklIaG1ZV1JsTWlCbWIzSjNZWEprY3p0Y1hHNTlYRnh1UUMxM1pXSnJhWFF0YTJWNVpuSmhiV1Z6SUhobVlXUmxNU0I3WEZ4dUlDQXdKU0I3WEZ4dUlDQWdJSFpwYzJsaWFXeHBkSGs2SUdocFpHUmxianRjWEc0Z0lDQWdiM0JoWTJsMGVUb2dNRHRjWEc0Z0lIMWNYRzRnSURFd01DVWdlMXhjYmlBZ0lDQjJhWE5wWW1sc2FYUjVPaUIyYVhOcFlteGxPMXhjYmlBZ0lDQnZjR0ZqYVhSNU9pQXhPMXhjYmlBZ2ZWeGNibjFjWEc1QUxYZGxZbXRwZEMxclpYbG1jbUZ0WlhNZ2VHWmhaR1V5SUh0Y1hHNGdJREFsSUh0Y1hHNGdJQ0FnZG1semFXSnBiR2wwZVRvZ2RtbHphV0pzWlR0Y1hHNGdJQ0FnYjNCaFkybDBlVG9nTVR0Y1hHNGdJSDFjWEc0Z0lERXdNQ1VnZTF4Y2JpQWdJQ0IyYVhOcFltbHNhWFI1T2lCb2FXUmtaVzQ3WEZ4dUlDQWdJRzl3WVdOcGRIazZJREE3WEZ4dUlDQjlYRnh1ZlZ4Y2JuTXRkMjl5WkNCN1hGeHVJQ0JrYVhOd2JHRjVPaUJ1YjI1bE8xeGNibjFjWEc0dVlXNXBiV0YwWldReElIdGNYRzRnSUMxM1pXSnJhWFF0WVc1cGJXRjBhVzl1T2lBd0xqVnpJR1ZoYzJVdGFXNHRiM1YwSUdadmNuZGhjbVJ6TzF4Y2JuMWNYRzVjSWl3Z1hDSmNJbDBwTzF4dVhHNHZMeUJsZUhCdmNuUnpYRzVjYmx4dVhHNHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OWNiaTh2SUZkRlFsQkJRMHNnUms5UFZFVlNYRzR2THlCa09pOTNaV0l2Ym05a1pWOXRiMlIxYkdWekx5NHdMakl6TGpGQVkzTnpMV3h2WVdSbGNpRmtPaTkzWldJdmJtOWtaVjl0YjJSMWJHVnpMM0J2YzNSamMzTXRiRzloWkdWeUwyeHBZajk3ZlNGa09pOTNaV0l2Ym05a1pWOXRiMlIxYkdWekx5NHlMakl1TTBCc1pYTnpMV3h2WVdSbGNpRXVMM055WXk5dFlXbHVNUzVzWlhOelhHNHZMeUJ0YjJSMWJHVWdhV1FnUFNBNVhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzlcXG5cIik7XG5cbi8qKiovIH0pLFxuLyogMTAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5ldmFsKFwiXFxuXFxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFxcXCJfX2VzTW9kdWxlXFxcIiwge1xcbiAgdmFsdWU6IHRydWVcXG59KTtcXG5cXG52YXIgX2VkaXRvciA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XFxuXFxudmFyIF9lZGl0b3IyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZWRpdG9yKTtcXG5cXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDcwKTtcXG5cXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxcblxcbnZhciBSZXBseSA9IF9lZGl0b3IyLmRlZmF1bHQuZXh0ZW5kKHtcXG4gIGluaXQ6IGZ1bmN0aW9uIGluaXQocHJvcHMpIHtcXG4gICAgLy9kZWJ1Z2dlcjtcXG4gICAgcHJvcHMgPSBPYmplY3QuYXNzaWduKHt9LCB7XFxuICAgICAgdGFnX25hbWU6ICdlZGl0b3ItcmVwbHktb3ZvJyxcXG4gICAgICBjb25maWc6IHtcXG4gICAgICAgIFRJVExFX0VNUFRZOiAn5Zue5aSN5YaF5a655LiN6IO95Li656m6JyxcXG4gICAgICAgIFNVQ0NFU1M6ICflm57lpI3miJDlip8nLFxcbiAgICAgICAgV09SRF9UT09fTUFOWTogJ+S9oOWGmeeahOWtl+aVsOWkquWkmuS6huWQpy4uLicsXFxuICAgICAgICBTTUlMRV9UT09fTUFOWTogJ+S9oOWPkeeahOihqOaDheWkquWkmuS6huWQpy4uLicsXFxuICAgICAgICBNQVhfV09SRFM6IDUwMCxcXG4gICAgICAgIE1BWF9TTUlMRVM6IDIwXFxuICAgICAgfVxcbiAgICB9LCBwcm9wcyk7XFxuXFxuICAgIHRoaXMuX3N1cGVyKHByb3BzKTtcXG5cXG4gICAgLy9jb25zb2xlLmxvZygncmVwbHkgY29uc3RydWN0b3InKTtcXG4gIH0sXFxuICBfaGFuZGxlRm9yVGhvc2U6IGZ1bmN0aW9uIF9oYW5kbGVGb3JUaG9zZSgpIHtcXG4gICAgdmFyIF90aGlzID0gdGhpcztcXG5cXG4gICAgdGhpcy5fc3VwZXIoKTtcXG5cXG4gICAgdGhpcy4kY29udGVudC5vbignaW5wdXQnLCBmdW5jdGlvbiAoZSkge1xcbiAgICAgIF90aGlzLl9yZWNvcmRMYXN0UmFuZ2UoMCk7XFxuICAgIH0pO1xcbiAgICB0aGlzLiRjb250ZW50Lm9uKCd0b3VjaGVuZCcsIGZ1bmN0aW9uIChlKSB7XFxuICAgICAgX3RoaXMuX3JlY29yZExhc3RSYW5nZSg1NjYpO1xcbiAgICB9KTtcXG5cXG4gICAge1xcbiAgICAgIHZhciBpID0gMDtcXG4gICAgICB2YXIgJGhvbGRlciA9ICQoJy5lai1yZXBseV9fc21pbGUtaG9sZGVyJywgdGhpcy5lbCk7XFxuICAgICAgJGhvbGRlci5oaWRlKCk7XFxuICAgICAgJCh0aGlzLmNvbnN0cnVjdG9yLkVMX1NNSUxFX0lDT04pLm9uKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XFxuICAgICAgICArK2kgJSAyID09PSAwID8gJGhvbGRlci5oaWRlKCkgOiAkaG9sZGVyLnNob3coKTtcXG4gICAgICB9KTtcXG4gICAgfVxcbiAgfVxcbiAgLy8gc2VuZFxcbiAgLFxcbiAgX2VkaXRTdWNjZXNzOiBmdW5jdGlvbiBfZWRpdFN1Y2Nlc3MoKSB7XFxuICAgIHZhciBfdGhpczIgPSB0aGlzO1xcblxcbiAgICB2YXIgY29uZmlnID0gdGhpcy5vcHRpb25zLmNvbmZpZztcXG5cXG5cXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyKSB7XFxuICAgICAgdmFyIHRoYXQgPSBfdGhpczI7XFxuXFxuICAgICAgdmFyIGhhbmRsZSA9IGZ1bmN0aW9uICgpIHtcXG4gICAgICAgIHZhciB2ID0gdGhhdC4kY29udGVudFswXS5pbm5lckhUTUwudHJpbSgpO1xcblxcbiAgICAgICAgaWYgKCF2Lmxlbmd0aCB8fCB2ID09PSB0aGF0LiRjb250ZW50WzBdLmdldEF0dHJpYnV0ZSgnZGVmYXVsdFZhbHVlJykpIHtcXG5cXG4gICAgICAgICAgcmV0dXJuIHRoYXQuX2Rpc3BsYXlNc2coY29uZmlnLlRJVExFX0VNUFRZKTtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIHJldHVybiAnbmV4dFN1Y2Nlc3Nvcic7XFxuICAgICAgfS5hZnRlcihmdW5jdGlvbiAoKSB7XFxuICAgICAgICB2YXIgc21pbGVfbGVuID0gJCgnLnNtaWxlLW92bycsIHRoYXQuJGNvbnRlbnQpLmxlbmd0aDtcXG5cXG4gICAgICAgIGlmIChzbWlsZV9sZW4gPiBjb25maWcuTUFYX1NNSUxFUykgcmV0dXJuIHRoYXQuX2Rpc3BsYXlNc2coY29uZmlnLlNNSUxFX1RPT19NQU5ZKTtcXG5cXG4gICAgICAgIHJldHVybiAnbmV4dFN1Y2Nlc3Nvcic7XFxuICAgICAgfSkuYWZ0ZXIoZnVuY3Rpb24gKCkge1xcbiAgICAgICAgdmFyIHYgPSB0aGF0LiRjb250ZW50WzBdLnRleHRDb250ZW50LnRyaW0oKTtcXG4gICAgICAgIGlmICh2Lmxlbmd0aCA+IGNvbmZpZy5NQVhfV09SRFMpIHtcXG4gICAgICAgICAgcmV0dXJuIHRoYXQuX2Rpc3BsYXlNc2coY29uZmlnLldPUkRfVE9PX01BTlkpO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgcmV0dXJuICduZXh0U3VjY2Vzc29yJztcXG4gICAgICB9KS5hZnRlcihmdW5jdGlvbiAoKSB7XFxuXFxuICAgICAgICByKHtcXG4gICAgICAgICAgaHRtbF9jb250ZW50OiB0aGF0Ll9yZXNBZGFwdGVyKHRoYXQuJGNvbnRlbnRbMF0uaW5uZXJIVE1MLnRyaW0oKSksXFxuICAgICAgICAgIHRleHRfY29udGVudDogdGhhdC5fcmVzQWRhcHRlcih0aGF0LiRjb250ZW50WzBdLnRleHRDb250ZW50LnRyaW0oKSlcXG5cXG4gICAgICAgIH0pO1xcbiAgICAgIH0pO1xcblxcbiAgICAgIGhhbmRsZSgpO1xcbiAgICB9KTtcXG4gIH0sXFxuICBfaGFuZGxlQ29uZmlybTogZnVuY3Rpb24gX2hhbmRsZUNvbmZpcm0oKSB7XFxuICAgIHZhciBfdGhpczMgPSB0aGlzO1xcblxcbiAgICAkKHRoaXMuY29uc3RydWN0b3IuRUxfQ09ORklSTSkub24oJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcXG5cXG4gICAgICBfdGhpczMuX2VkaXRTdWNjZXNzKCkudGhlbihmdW5jdGlvbiAocmVzKSB7XFxuICAgICAgICB2YXIgdGV4dF9jb250ZW50ID0gcmVzLnRleHRfY29udGVudCxcXG4gICAgICAgICAgICBodG1sX2NvbnRlbnQgPSByZXMuaHRtbF9jb250ZW50O1xcblxcblxcbiAgICAgICAgX3RoaXMzLnRyaWdnZXIoJ2NvbXBsZXRlJywge1xcbiAgICAgICAgICBodG1sX2NvbnRlbnQ6IGh0bWxfY29udGVudCwgdGV4dF9jb250ZW50OiB0ZXh0X2NvbnRlbnQsXFxuICAgICAgICAgIGVsX3RhcmdldDogX3RoaXMzLmVsX3RhcmdldCxcXG4gICAgICAgICAgZWRpdF90aW1lOiBEYXRlLm5vdygpXFxuICAgICAgICB9KTtcXG4gICAgICB9KTtcXG4gICAgfSk7XFxuICB9LFxcbiAgX2NyZWF0ZUNoaWxkOiBmdW5jdGlvbiBfY3JlYXRlQ2hpbGQoKSB7XFxuICAgIHRoaXMuX3N1cGVyKCk7XFxuICAgIC8vZWRpdG9yLXJlcGx5LW92b1xcbiAgICB0aGlzLmVsLmNsYXNzTGlzdC5hZGQodGhpcy5jb25zdHJ1Y3Rvci5DTFMpO1xcblxcbiAgICB0aGlzLmVsLmlubmVySFRNTCA9ICdcXFxcbiAgICAgIDxkaXYgY2xhc3M9XFxcImVqX3JlcGxheV9fd3JhcFxcXCI+XFxcXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcImVqX3JlcGx5X19jb250ZW50LXdyYXAgcmVsXFxcIj5cXFxcbiAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJlal9yZXBseV9fY29udGVudCBhYnMgd2hcXFwiIGNvbnRlbnQtb3ZvIGNvbnRlbnRlZGl0YWJsZT1cXFwidHJ1ZVxcXCIgZGVmYXVsdFZhbHVlPVxcXCJcXFxcdTU2REVcXFxcdTU5MERcXFxcdTRGNjBcXFxcdTc2ODRcXFxcdTUxODVcXFxcdTVCQjlcXFxcdTU0MjcuLi5cXFwiID48L2Rpdj5cXFxcbiAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcImVqLXJlcGx5X19ib3QgcmVsXFxcIj5cXFxcbiAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJhYnMgd2hcXFwiPlxcXFxuXFxcXG4gICAgICAgICAgICA8dWw+XFxcXG4gICAgICAgICAgICAgIDxsaSBzbWlsZS1pY29uLW92bz48L2xpPlxcXFxuICAgICAgICAgICAgPC91bD5cXFxcblxcXFxuICAgICAgICAgICAgPGRpdj5cXFxcbiAgICAgICAgICAgICAgPGJ1dHRvbiBjYW5jZWwtb3ZvIGNsYXNzPVxcXCJyZWwgZWotcmVwbHlfX2NhbmNlbFxcXCI+PHNwYW4gY2xhc3M9XFxcImFicyB3aFxcXCI+XFxcXHU1M0Q2XFxcXHU2RDg4PC9zcGFuPjwvYnV0dG9uPlxcXFxuICAgICAgICAgICAgICA8YnV0dG9uIGNvbmZpcm0tb3ZvIGNsYXNzPVxcXCJyZWwgZWotcmVwbHlfX3B1YlxcXCI+PHNwYW4gY2xhc3M9XFxcImFicyB3aFxcXCI+XFxcXHU1M0QxXFxcXHU4ODY4PC9zcGFuPjwvYnV0dG9uPlxcXFxuICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgIDwvZGl2PlxcXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJlai1yZXBseV9fc21pbGUtaG9sZGVyIHJlbFxcXCI+XFxcXG4gICAgICAgICAgPGRpdiBzbWlsZS1ob2xkZXItb3ZvIHh4eHh4eCBjbGFzcz1cXFwiZWotcmVwbHlfX3NtaWxlLWlubmVyIGFic1xcXCI+XFxcXG5cXFxcbiAgICAgICAgICA8L2Rpdj5cXFxcbiAgICAgICAgPC9kaXY+XFxcXG5cXFxcbiAgICAgICAgPGRpdiBtZXNzYWdlLW92byBjbGFzcz1cXFwiZWotcmVwbHlfX21zZyBhYnNcXFwiPlxcXFxuICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImFicyB3aFxcXCI+XFxcXG4gICAgICAgICAgICA8c3Bhbj5cXFxcdThGOTNcXFxcdTUxNjVcXFxcdTUxRTBcXFxcdTRFMkFcXFxcdTVCNTdcXFxcdUZGMUY8L3NwYW4+XFxcXG4gICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgIDwvZGl2PlxcXFxuICAgICAgPC9kaXY+XFxcXG4gICAgJztcXG5cXG4gICAgdGhpcy4kY29udGVudCA9ICQodGhpcy5jb25zdHJ1Y3Rvci5FTF9DT05URU5ULCB0aGlzLmVsKTtcXG4gICAgdGhpcy4kbXNnX2hvbGRlciA9ICQodGhpcy5jb25zdHJ1Y3Rvci5FTF9ESVNQTEFZX01TRywgdGhpcy5lbCk7XFxuICAgIHRoaXMuJG1zZ190ZXh0ID0gJCgnc3BhbicsIHRoaXMuJG1zZ19ob2xkZXIpO1xcbiAgfVxcbn0sIHtcXG4gIENMUzogJ2VkaXRvci1yZXBseS1vdm8nXFxufSk7XFxuXFxuZXhwb3J0cy5kZWZhdWx0ID0gUmVwbHk7XFxuXFxuLy8gZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocHJvcHMpe1xcblxcbi8vICAgcmV0dXJuIG5ldyBSZXBseShwcm9wcyk7XFxuLy8gfS8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZjbVZ3YkhrdWFuTS9ZMlZrTlNKZExDSnVZVzFsY3lJNld5SlNaWEJzZVNJc0ltVjRkR1Z1WkNJc0ltbHVhWFFpTENKd2NtOXdjeUlzSWs5aWFtVmpkQ0lzSW1GemMybG5iaUlzSW5SaFoxOXVZVzFsSWl3aVkyOXVabWxuSWl3aVZFbFVURVZmUlUxUVZGa2lMQ0pUVlVORFJWTlRJaXdpVjA5U1JGOVVUMDlmVFVGT1dTSXNJbE5OU1V4RlgxUlBUMTlOUVU1Wklpd2lUVUZZWDFkUFVrUlRJaXdpVFVGWVgxTk5TVXhGVXlJc0lsOXpkWEJsY2lJc0lsOW9ZVzVrYkdWR2IzSlVhRzl6WlNJc0lpUmpiMjUwWlc1MElpd2liMjRpTENKZmNtVmpiM0prVEdGemRGSmhibWRsSWl3aWFTSXNJaVJvYjJ4a1pYSWlMQ0lrSWl3aVpXd2lMQ0pvYVdSbElpd2lZMjl1YzNSeWRXTjBiM0lpTENKRlRGOVRUVWxNUlY5SlEwOU9JaXdpYzJodmR5SXNJbDlsWkdsMFUzVmpZMlZ6Y3lJc0ltOXdkR2x2Ym5NaUxDSlFjbTl0YVhObElpd2lkR2hoZENJc0ltaGhibVJzWlNJc0luWWlMQ0pwYm01bGNraFVUVXdpTENKMGNtbHRJaXdpYkdWdVozUm9JaXdpWjJWMFFYUjBjbWxpZFhSbElpd2lYMlJwYzNCc1lYbE5jMmNpTENKaFpuUmxjaUlzSW5OdGFXeGxYMnhsYmlJc0luUmxlSFJEYjI1MFpXNTBJaXdpY2lJc0ltaDBiV3hmWTI5dWRHVnVkQ0lzSWw5eVpYTkJaR0Z3ZEdWeUlpd2lkR1Y0ZEY5amIyNTBaVzUwSWl3aVgyaGhibVJzWlVOdmJtWnBjbTBpTENKRlRGOURUMDVHU1ZKTklpd2lkR2hsYmlJc0luSmxjeUlzSW5SeWFXZG5aWElpTENKbGJGOTBZWEpuWlhRaUxDSmxaR2wwWDNScGJXVWlMQ0pFWVhSbElpd2libTkzSWl3aVgyTnlaV0YwWlVOb2FXeGtJaXdpWTJ4aGMzTk1hWE4wSWl3aVlXUmtJaXdpUTB4VElpd2lSVXhmUTA5T1ZFVk9WQ0lzSWlSdGMyZGZhRzlzWkdWeUlpd2lSVXhmUkVsVFVFeEJXVjlOVTBjaUxDSWtiWE5uWDNSbGVIUWlYU3dpYldGd2NHbHVaM01pT2lJN096czdPenRCUVVGQk96czdPMEZCUTBFN096czdRVUZIUVN4SlFVRkpRU3hSUVVGUkxHbENRVUZQUXl4TlFVRlFMRU5CUVdNN1FVRkRlRUpETEUxQlJIZENMR2RDUVVOdVFrTXNTMEZFYlVJc1JVRkRZanRCUVVOVU8wRkJRMEZCTEZsQlFWRkRMRTlCUVU5RExFMUJRVkFzUTBGQll5eEZRVUZrTEVWQlFXbENPMEZCUTNaQ1F5eG5Ra0ZCVXl4clFrRkVZenRCUVVWMFFrTXNZMEZCVXp0QlFVTlNReXh4UWtGQldTeFZRVVJLTzBGQlJWQkRMR2xDUVVGUkxFMUJSa1E3UVVGSFVFTXNkVUpCUVdNc1kwRklVRHRCUVVsUVF5eDNRa0ZCWlN4alFVcFNPMEZCUzFCRExHMUNRVUZWTEVkQlRFZzdRVUZOVUVNc2IwSkJRVmM3UVVGT1NqdEJRVVpoTEV0QlFXcENMRVZCVlU1V0xFdEJWazBzUTBGQlVqczdRVUZaUVN4VFFVRkxWeXhOUVVGTUxFTkJRVmxZTEV0QlFWbzdPMEZCUjBFN1FVRkZSQ3hIUVhCQ2RVSTdRVUZ4UW5aQ1dTeHBRa0Z5UW5WQ0xEWkNRWEZDVGp0QlFVRkJPenRCUVVOb1FpeFRRVUZMUkN4TlFVRk1PenRCUVVWQkxGTkJRVXRGTEZGQlFVd3NRMEZCWTBNc1JVRkJaQ3hEUVVGcFFpeFBRVUZxUWl4RlFVRjVRaXhoUVVGSE8wRkJRekZDTEZsQlFVdERMR2RDUVVGTUxFTkJRWE5DTEVOQlFYUkNPMEZCUTBRc1MwRkdSRHRCUVVkQkxGTkJRVXRHTEZGQlFVd3NRMEZCWTBNc1JVRkJaQ3hEUVVGcFFpeFZRVUZxUWl4RlFVRTBRaXhoUVVGSE8wRkJRemRDTEZsQlFVdERMR2RDUVVGTUxFTkJRWE5DTEVkQlFYUkNPMEZCUTBRc1MwRkdSRHM3UVVGTFFUdEJRVU5GTEZWQlFVbERMRWxCUVVrc1EwRkJVanRCUVVOQkxGVkJRVWxETEZWQlFWVkRMRVZCUVVVc2VVSkJRVVlzUlVGQk5FSXNTMEZCUzBNc1JVRkJha01zUTBGQlpEdEJRVU5CUml4alFVRlJSeXhKUVVGU08wRkJRMEZHTEZGQlFVVXNTMEZCUzBjc1YwRkJUQ3hEUVVGcFFrTXNZVUZCYmtJc1JVRkJhME5TTEVWQlFXeERMRU5CUVhGRExFOUJRWEpETEVWQlFUWkRMR0ZCUVVjN1FVRkRPVU1zVlVGQlJVVXNRMEZCUml4SFFVRkpMRU5CUVVvc1MwRkJVU3hEUVVGU0xFZEJRVlZETEZGQlFWRkhMRWxCUVZJc1JVRkJWaXhIUVVGNVFrZ3NVVUZCVVUwc1NVRkJVaXhGUVVGNlFqdEJRVU5FTEU5QlJrUTdRVUZIUkR0QlFVVkdPMEZCUTBRN1FVRXhRM2RDTzBGQk1rTjJRa01zWTBFelEzVkNMREJDUVRKRFZEdEJRVUZCT3p0QlFVRkJMRkZCUlU1d1FpeE5RVVpOTEVkQlJVa3NTMEZCUzNGQ0xFOUJSbFFzUTBGRlRuSkNMRTFCUmswN096dEJRVWxpTEZkQlFVOHNTVUZCU1hOQ0xFOUJRVW9zUTBGQldTeGhRVUZITzBGQlEzQkNMRlZCUVVsRExHRkJRVW83TzBGQlJVRXNWVUZCU1VNc1UwRkJWU3haUVVGVk8wRkJRM1JDTEZsQlFVbERMRWxCUVVsR0xFdEJRVXRrTEZGQlFVd3NRMEZCWXl4RFFVRmtMRVZCUVdsQ2FVSXNVMEZCYWtJc1EwRkJNa0pETEVsQlFUTkNMRVZCUVZJN08wRkJSVUVzV1VGQlJ5eERRVUZEUml4RlFVRkZSeXhOUVVGSUxFbEJRV05JTEUxQlFVbEdMRXRCUVV0a0xGRkJRVXdzUTBGQll5eERRVUZrTEVWQlFXbENiMElzV1VGQmFrSXNRMEZCT0VJc1kwRkJPVUlzUTBGQmNrSXNSVUZCYlVVN08wRkJSV3BGTEdsQ1FVRlBUaXhMUVVGTFR5eFhRVUZNTEVOQlFXbENPVUlzVDBGQlQwTXNWMEZCZUVJc1EwRkJVRHRCUVVORU96dEJRVVZFTEdWQlFVOHNaVUZCVUR0QlFVTkVMRTlCVkZrc1EwRlZXamhDTEV0QlZsa3NRMEZWVGl4WlFVRlZPMEZCUTJZc1dVRkJTVU1zV1VGQldXeENMRVZCUVVVc1dVRkJSaXhGUVVGbFV5eExRVUZMWkN4UlFVRndRaXhGUVVFNFFtMUNMRTFCUVRsRE96dEJRVVZCTEZsQlFVZEpMRmxCUVZWb1F5eFBRVUZQVFN4VlFVRndRaXhGUVVGblF5eFBRVUZQYVVJc1MwRkJTMDhzVjBGQlRDeERRVUZwUWpsQ0xFOUJRVTlKTEdOQlFYaENMRU5CUVZBN08wRkJSV2hETEdWQlFVOHNaVUZCVUR0QlFVTkVMRTlCYUVKWkxFVkJhMEphTWtJc1MwRnNRbGtzUTBGclFrNHNXVUZCVlR0QlFVTm1MRmxCUVVsT0xFbEJRVWxHTEV0QlFVdGtMRkZCUVV3c1EwRkJZeXhEUVVGa0xFVkJRV2xDZDBJc1YwRkJha0lzUTBGQk5rSk9MRWxCUVRkQ0xFVkJRVkk3UVVGRFFTeFpRVUZIUml4RlFVRkZSeXhOUVVGR0xFZEJRVlUxUWl4UFFVRlBTeXhUUVVGd1FpeEZRVUU0UWp0QlFVTTFRaXhwUWtGQlQydENMRXRCUVV0UExGZEJRVXdzUTBGQmFVSTVRaXhQUVVGUFJ5eGhRVUY0UWl4RFFVRlFPMEZCUTBRN08wRkJSVVFzWlVGQlR5eGxRVUZRTzBGQlEwUXNUMEY2UWxrc1JVRXdRbG8wUWl4TFFURkNXU3hEUVRCQ1RpeFpRVUZWT3p0QlFVVm1SeXhWUVVGRk8wRkJRMEZETEhkQ1FVRmhXaXhMUVVGTFlTeFhRVUZNTEVOQlFXbENZaXhMUVVGTFpDeFJRVUZNTEVOQlFXTXNRMEZCWkN4RlFVRnBRbWxDTEZOQlFXcENMRU5CUVRKQ1F5eEpRVUV6UWl4RlFVRnFRaXhEUVVSaU8wRkJSVU5WTEhkQ1FVRmhaQ3hMUVVGTFlTeFhRVUZNTEVOQlFXbENZaXhMUVVGTFpDeFJRVUZNTEVOQlFXTXNRMEZCWkN4RlFVRnBRbmRDTEZkQlFXcENMRU5CUVRaQ1RpeEpRVUUzUWl4RlFVRnFRanM3UVVGR1pDeFRRVUZHTzBGQlQwUXNUMEZ1UTFrc1EwRkJZanM3UVVGeFEwRklPMEZCUjBRc1MwRXpRMDBzUTBGQlVEdEJRVFpEUkN4SFFUVkdkVUk3UVVFNFJuWkNZeXhuUWtFNVJuVkNMRFJDUVRoR1VEdEJRVUZCT3p0QlFVZG1lRUlzVFVGQlJTeExRVUZMUnl4WFFVRk1MRU5CUVdsQ2MwSXNWVUZCYmtJc1JVRkJLMEkzUWl4RlFVRXZRaXhEUVVGclF5eFBRVUZzUXl4RlFVRXdReXhoUVVGSE96dEJRVVV6UXl4aFFVRkxWU3haUVVGTUxFZEJRVzlDYjBJc1NVRkJjRUlzUTBGQmVVSXNaVUZCU3p0QlFVRkJMRmxCUlhaQ1NDeFpRVVoxUWl4SFFVVk5TU3hIUVVaT0xFTkJSWFpDU2l4WlFVWjFRanRCUVVGQkxGbEJSVlpHTEZsQlJsVXNSMEZGVFUwc1IwRkdUaXhEUVVWV1RpeFpRVVpWT3pzN1FVRkpOVUlzWlVGQlMwOHNUMEZCVEN4RFFVRmhMRlZCUVdJc1JVRkJkMEk3UVVGRGNrSlFMRzlEUVVSeFFpeEZRVU5TUlN3d1FrRkVVVHRCUVVWeVFrMHNjVUpCUVZVc1QwRkJTMEVzVTBGR1RUdEJRVWR5UWtNc2NVSkJRVlZETEV0QlFVdERMRWRCUVV3N1FVRklWeXhUUVVGNFFqdEJRVTFFTEU5QlZrUTdRVUZaUkN4TFFXUkVPMEZCWlVRc1IwRm9TSFZDTzBGQmFVaDJRa01zWTBGcVNIVkNMREJDUVdsSVZEdEJRVU5pTEZOQlFVdDRReXhOUVVGTU8wRkJRMEU3UVVGRFFTeFRRVUZMVVN4RlFVRk1MRU5CUVZGcFF5eFRRVUZTTEVOQlFXdENReXhIUVVGc1FpeERRVUZ6UWl4TFFVRkxhRU1zVjBGQlRDeERRVUZwUW1sRExFZEJRWFpET3p0QlFVVkJMRk5CUVV0dVF5eEZRVUZNTEVOQlFWRlhMRk5CUVZJN08wRkJaME5CTEZOQlFVdHFRaXhSUVVGTUxFZEJRV2RDU3l4RlFVRkZMRXRCUVV0SExGZEJRVXdzUTBGQmFVSnJReXhWUVVGdVFpeEZRVUU0UWl4TFFVRkxjRU1zUlVGQmJrTXNRMEZCYUVJN1FVRkRRU3hUUVVGTGNVTXNWMEZCVEN4SFFVRnRRblJETEVWQlFVVXNTMEZCUzBjc1YwRkJUQ3hEUVVGcFFtOURMR05CUVc1Q0xFVkJRV3RETEV0QlFVdDBReXhGUVVGMlF5eERRVUZ1UWp0QlFVTkJMRk5CUVV0MVF5eFRRVUZNTEVkQlFXbENlRU1zUlVGQlJTeE5RVUZHTEVWQlFWTXNTMEZCUzNORExGZEJRV1FzUTBGQmFrSTdRVUZIUkR0QlFUTktkVUlzUTBGQlpDeEZRVFJLVmp0QlFVTkJSaXhQUVVGSk8wRkJSRW9zUTBFMVNsVXNRMEZCV2pzN2EwSkJhVXRsZWtRc1N6czdRVUZIWmpzN1FVRkZRVHRCUVVOQklpd2labWxzWlNJNklqRXdMbXB6SWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaWFXMXdiM0owSUVWa2FYUnZjaUJtY205dElDY3VMMlZrYVhSdmNpYzdYSEpjYm1sdGNHOXlkQ0FuTGk5eVpYQnNlUzVzWlhOekp6dGNjbHh1WEhKY2JseHlYRzUyWVhJZ1VtVndiSGtnUFNCRlpHbDBiM0l1WlhoMFpXNWtLSHRjY2x4dUlDQnBibWwwS0hCeWIzQnpLWHRjY2x4dUlDQWdJQzh2WkdWaWRXZG5aWEk3WEhKY2JpQWdJQ0J3Y205d2N5QTlJRTlpYW1WamRDNWhjM05wWjI0b2UzMHNlMXh5WEc0Z0lDQWdJQ0IwWVdkZmJtRnRaVG9uWldScGRHOXlMWEpsY0d4NUxXOTJieWRjY2x4dUlDQWdJQ0FnTEdOdmJtWnBaeUE2SUh0Y2NseHVJQ0FnSUNBZ0lDQlVTVlJNUlY5RlRWQlVXVG9uNVp1ZTVhU041WWFGNWE2NTVMaU42SU85NUxpNjU2bTZKMXh5WEc0Z0lDQWdJQ0FnSUN4VFZVTkRSVk5UT2lmbG01N2xwSTNtaUpEbGlwOG5YSEpjYmlBZ0lDQWdJQ0FnTEZkUFVrUmZWRTlQWDAxQlRsazZKK1M5b09XR21lZWFoT1d0bCthVnNPV2txdVdrbXVTNmh1V1FweTR1TGlkY2NseHVJQ0FnSUNBZ0lDQXNVMDFKVEVWZlZFOVBYMDFCVGxrNkorUzlvT1dQa2VlYWhPaWhxT2FEaGVXa3F1V2ttdVM2aHVXUXB5NHVMaWRjY2x4dUlDQWdJQ0FnSUNBc1RVRllYMWRQVWtSVE9qVXdNRnh5WEc0Z0lDQWdJQ0FnSUN4TlFWaGZVMDFKVEVWVE9qSXdYSEpjYmlBZ0lDQWdJSDFjY2x4dUlDQWdJSDBzY0hKdmNITXBPMXh5WEc0Z0lDQmNjbHh1SUNBZ0lIUm9hWE11WDNOMWNHVnlLSEJ5YjNCektUdGNjbHh1WEhKY2JpQWdJQ0JjY2x4dUlDQWdJQzh2WTI5dWMyOXNaUzVzYjJjb0ozSmxjR3g1SUdOdmJuTjBjblZqZEc5eUp5azdYSEpjYmx4eVhHNGdJSDFjY2x4dUlDQXNYMmhoYm1Sc1pVWnZjbFJvYjNObEtDbDdYSEpjYmlBZ0lDQjBhR2x6TGw5emRYQmxjaWdwTzF4eVhHNGdJQ0FnWEhKY2JpQWdJQ0IwYUdsekxpUmpiMjUwWlc1MExtOXVLQ2RwYm5CMWRDY3NaVDArZTF4eVhHNGdJQ0FnSUNCMGFHbHpMbDl5WldOdmNtUk1ZWE4wVW1GdVoyVW9NQ2s3WEhKY2JpQWdJQ0I5S1R0Y2NseHVJQ0FnSUhSb2FYTXVKR052Ym5SbGJuUXViMjRvSjNSdmRXTm9aVzVrSnl4bFBUNTdYSEpjYmlBZ0lDQWdJSFJvYVhNdVgzSmxZMjl5WkV4aGMzUlNZVzVuWlNnMU5qWXBPMXh5WEc0Z0lDQWdmU2s3WEhKY2JseHlYRzVjY2x4dUlDQWdJSHRjY2x4dUlDQWdJQ0FnYkdWMElHa2dQU0F3TzF4eVhHNGdJQ0FnSUNCc1pYUWdKR2h2YkdSbGNpQTlJQ1FvSnk1bGFpMXlaWEJzZVY5ZmMyMXBiR1V0YUc5c1pHVnlKeXgwYUdsekxtVnNLVHRjY2x4dUlDQWdJQ0FnSkdodmJHUmxjaTVvYVdSbEtDazdYSEpjYmlBZ0lDQWdJQ1FvZEdocGN5NWpiMjV6ZEhKMVkzUnZjaTVGVEY5VFRVbE1SVjlKUTA5T0tTNXZiaWduWTJ4cFkyc25MR1U5UG50Y2NseHVJQ0FnSUNBZ0lDQXJLMmtsTWowOVBUQS9KR2h2YkdSbGNpNW9hV1JsS0NrNkpHaHZiR1JsY2k1emFHOTNLQ2s3WEhKY2JpQWdJQ0FnSUgwcE8xeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQjlYSEpjYmlBZ0x5OGdjMlZ1WkZ4eVhHNGdJQ3hmWldScGRGTjFZMk5sYzNNb0tYdGNjbHh1SUNBZ0lGeHlYRzRnSUNBZ1kyOXVjM1FnZTJOdmJtWnBaMzBnUFNCMGFHbHpMbTl3ZEdsdmJuTTdYSEpjYmlBZ0lDQmNjbHh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dVSEp2YldselpTaHlQVDU3WEhKY2JpQWdJQ0FnSUhaaGNpQjBhR0YwSUQwZ2RHaHBjenRjY2x4dVhISmNiaUFnSUNBZ0lIWmhjaUJvWVc1a2JHVWdQU0FvWm5WdVkzUnBiMjRvS1h0Y2NseHVJQ0FnSUNBZ0lDQjJZWElnZGlBOUlIUm9ZWFF1SkdOdmJuUmxiblJiTUYwdWFXNXVaWEpJVkUxTUxuUnlhVzBvS1Z4eVhHNWNjbHh1SUNBZ0lDQWdJQ0JwWmlnaGRpNXNaVzVuZEdnZ2ZId2dJSFk5UFQxMGFHRjBMaVJqYjI1MFpXNTBXekJkTG1kbGRFRjBkSEpwWW5WMFpTZ25aR1ZtWVhWc2RGWmhiSFZsSnlrcGUxeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHRjBMbDlrYVhOd2JHRjVUWE5uS0dOdmJtWnBaeTVVU1ZSTVJWOUZUVkJVV1NrN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUZ4eVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlBbmJtVjRkRk4xWTJObGMzTnZjaWM3WEhKY2JpQWdJQ0FnSUgwcFhISmNiaUFnSUNBZ0lDNWhablJsY2lobWRXNWpkR2x2YmlncGUxeHlYRzRnSUNBZ0lDQWdJSFpoY2lCemJXbHNaVjlzWlc0Z1BTQWtLQ2N1YzIxcGJHVXRiM1p2Snl4MGFHRjBMaVJqYjI1MFpXNTBLUzVzWlc1bmRHZzdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lHbG1LSE50YVd4bFgyeGxiajVqYjI1bWFXY3VUVUZZWDFOTlNVeEZVeWtnY21WMGRYSnVJSFJvWVhRdVgyUnBjM0JzWVhsTmMyY29ZMjl1Wm1sbkxsTk5TVXhGWDFSUFQxOU5RVTVaS1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJQ2R1WlhoMFUzVmpZMlZ6YzI5eUp6dGNjbHh1SUNBZ0lDQWdmU2xjY2x4dVhISmNiaUFnSUNBZ0lDNWhablJsY2lobWRXNWpkR2x2YmlncGUxeHlYRzRnSUNBZ0lDQWdJSFpoY2lCMklEMGdkR2hoZEM0a1kyOXVkR1Z1ZEZzd1hTNTBaWGgwUTI5dWRHVnVkQzUwY21sdEtDazdYSEpjYmlBZ0lDQWdJQ0FnYVdZb2RpNXNaVzVuZEdnZ1BtTnZibVpwWnk1TlFWaGZWMDlTUkZNcGUxeHlYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvWVhRdVgyUnBjM0JzWVhsTmMyY29ZMjl1Wm1sbkxsZFBVa1JmVkU5UFgwMUJUbGtwTzF4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUNkdVpYaDBVM1ZqWTJWemMyOXlKenRjY2x4dUlDQWdJQ0FnZlNsY2NseHVJQ0FnSUNBZ0xtRm1kR1Z5S0daMWJtTjBhVzl1S0NsN1hISmNiaUJjY2x4dUlDQWdJQ0FnSUNCeUtIdGNjbHh1SUNBZ0lDQWdJQ0FnSUdoMGJXeGZZMjl1ZEdWdWREcDBhR0YwTGw5eVpYTkJaR0Z3ZEdWeUtIUm9ZWFF1SkdOdmJuUmxiblJiTUYwdWFXNXVaWEpJVkUxTUxuUnlhVzBvS1NsY2NseHVJQ0FnSUNBZ0lDQWdJQ3gwWlhoMFgyTnZiblJsYm5RNmRHaGhkQzVmY21WelFXUmhjSFJsY2loMGFHRjBMaVJqYjI1MFpXNTBXekJkTG5SbGVIUkRiMjUwWlc1MExuUnlhVzBvS1NrZ1hISmNiaUFnSUNBZ0lDQWdJQ0JjY2x4dUlDQWdJQ0FnSUNCOUtUdGNjbHh1WEhKY2JseHlYRzRnSUNBZ0lDQjlLVHRjY2x4dVhISmNiaUFnSUNBZ0lHaGhibVJzWlNncE8xeHlYRzVjY2x4dVhISmNiaUFnSUNCOUtUdGNjbHh1WEhKY2JpQWdmVnh5WEc0Z1hISmNiaUFnTEY5b1lXNWtiR1ZEYjI1bWFYSnRLQ2w3WEhKY2JpQWdJRnh5WEc1Y2NseHVJQ0FnSUNRb2RHaHBjeTVqYjI1emRISjFZM1J2Y2k1RlRGOURUMDVHU1ZKTktTNXZiaWduWTJ4cFkyc25MR1U5UG50Y2NseHVJQ0FnSUNBZ1hISmNiaUFnSUNBZ0lIUm9hWE11WDJWa2FYUlRkV05qWlhOektDa3VkR2hsYmloeVpYTTlQbnRjY2x4dUlDQWdJQ0FnWEhKY2JpQWdJQ0FnSUNBZ2RtRnlJSHQwWlhoMFgyTnZiblJsYm5Rc2FIUnRiRjlqYjI1MFpXNTBmU0E5SUhKbGN6dGNjbHh1SUNCY2NseHVJQ0FnSUNBZ0lDQjBhR2x6TG5SeWFXZG5aWElvSjJOdmJYQnNaWFJsSnl4N1hISmNiaUFnSUNBZ0lDQWdJQ0FnYUhSdGJGOWpiMjUwWlc1MExIUmxlSFJmWTI5dWRHVnVkRnh5WEc0Z0lDQWdJQ0FnSUNBZ0xHVnNYM1JoY21kbGREcDBhR2x6TG1Wc1gzUmhjbWRsZEZ4eVhHNGdJQ0FnSUNBZ0lDQWdMR1ZrYVhSZmRHbHRaVHBFWVhSbExtNXZkeWdwWEhKY2JpQWdJQ0FnSUNBZ2ZTazdYSEpjYmx4eVhHNGdJQ0FnSUNCOUtUdGNjbHh1WEhKY2JpQWdJQ0I5S1Z4eVhHNGdJSDFjY2x4dUlDQXNYMk55WldGMFpVTm9hV3hrS0NsN1hISmNiaUFnSUNCMGFHbHpMbDl6ZFhCbGNpZ3BPMXh5WEc0Z0lDQWdMeTlsWkdsMGIzSXRjbVZ3YkhrdGIzWnZYSEpjYmlBZ0lDQjBhR2x6TG1Wc0xtTnNZWE56VEdsemRDNWhaR1FvZEdocGN5NWpiMjV6ZEhKMVkzUnZjaTVEVEZNcE8xeHlYRzRnSUNBZ1hISmNiaUFnSUNCMGFHbHpMbVZzTG1sdWJtVnlTRlJOVENBOUlHQmNjbHh1SUNBZ0lDQWdQR1JwZGlCamJHRnpjejFjSW1WcVgzSmxjR3hoZVY5ZmQzSmhjRndpUGx4eVhHNGdJQ0FnSUNBZ0lEeGthWFlnWTJ4aGMzTTlYQ0psYWw5eVpYQnNlVjlmWTI5dWRHVnVkQzEzY21Gd0lISmxiRndpUGx4eVhHNGdJQ0FnSUNBZ0lDQWdQR1JwZGlCamJHRnpjejFjSW1WcVgzSmxjR3g1WDE5amIyNTBaVzUwSUdGaWN5QjNhRndpSUdOdmJuUmxiblF0YjNadklHTnZiblJsYm5SbFpHbDBZV0pzWlQxY0luUnlkV1ZjSWlCa1pXWmhkV3gwVm1Gc2RXVTlYQ0xsbTU3bHBJM2t2YURubW9UbGhvWGxycm5sa0tjdUxpNWNJaUErUEM5a2FYWStYSEpjYmlBZ0lDQWdJQ0FnUEM5a2FYWStYSEpjYmlBZ0lDQWdJQ0FnUEdScGRpQmpiR0Z6Y3oxY0ltVnFMWEpsY0d4NVgxOWliM1FnY21Wc1hDSStYSEpjYmlBZ0lDQWdJQ0FnSUNBOFpHbDJJR05zWVhOelBWd2lZV0p6SUhkb1hDSStYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0E4ZFd3K1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1BHeHBJSE50YVd4bExXbGpiMjR0YjNadlBqd3ZiR2srWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJRHd2ZFd3K1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQThaR2wyUGx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUR4aWRYUjBiMjRnWTJGdVkyVnNMVzkyYnlCamJHRnpjejFjSW5KbGJDQmxhaTF5WlhCc2VWOWZZMkZ1WTJWc1hDSStQSE53WVc0Z1kyeGhjM005WENKaFluTWdkMmhjSWo3bGo1Ym10b2c4TDNOd1lXNCtQQzlpZFhSMGIyNCtYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdQR0oxZEhSdmJpQmpiMjVtYVhKdExXOTJieUJqYkdGemN6MWNJbkpsYkNCbGFpMXlaWEJzZVY5ZmNIVmlYQ0krUEhOd1lXNGdZMnhoYzNNOVhDSmhZbk1nZDJoY0lqN2xqNUhvb2FnOEwzTndZVzQrUEM5aWRYUjBiMjQrWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJRHd2WkdsMlBseHlYRzRnSUNBZ0lDQWdJQ0FnUEM5a2FYWStYSEpjYmlBZ0lDQWdJQ0FnUEM5a2FYWStYSEpjYmlBZ0lDQWdJQ0FnUEdScGRpQmpiR0Z6Y3oxY0ltVnFMWEpsY0d4NVgxOXpiV2xzWlMxb2IyeGtaWElnY21Wc1hDSStYSEpjYmlBZ0lDQWdJQ0FnSUNBOFpHbDJJSE50YVd4bExXaHZiR1JsY2kxdmRtOGdlSGg0ZUhoNElHTnNZWE56UFZ3aVpXb3RjbVZ3YkhsZlgzTnRhV3hsTFdsdWJtVnlJR0ZpYzF3aVBseHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lEd3ZaR2wyUGx4eVhHNGdJQ0FnSUNBZ0lEd3ZaR2wyUGx4eVhHNWNjbHh1SUNBZ0lDQWdJQ0E4WkdsMklHMWxjM05oWjJVdGIzWnZJR05zWVhOelBWd2laV290Y21Wd2JIbGZYMjF6WnlCaFluTmNJajVjY2x4dUlDQWdJQ0FnSUNBZ0lEeGthWFlnWTJ4aGMzTTlYQ0poWW5NZ2QyaGNJajVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdQSE53WVc0KzZMNlQ1WVdsNVllZzVMaXE1YTJYNzd5ZlBDOXpjR0Z1UGx4eVhHNGdJQ0FnSUNBZ0lDQWdQQzlrYVhZK1hISmNiaUFnSUNBZ0lDQWdQQzlrYVhZK1hISmNiaUFnSUNBZ0lEd3ZaR2wyUGx4eVhHNGdJQ0FnWUR0Y2NseHVYSEpjYmlBZ0lDQjBhR2x6TGlSamIyNTBaVzUwSUQwZ0pDaDBhR2x6TG1OdmJuTjBjblZqZEc5eUxrVk1YME5QVGxSRlRsUXNkR2hwY3k1bGJDazdYSEpjYmlBZ0lDQjBhR2x6TGlSdGMyZGZhRzlzWkdWeUlEMGdKQ2gwYUdsekxtTnZibk4wY25WamRHOXlMa1ZNWDBSSlUxQk1RVmxmVFZOSExIUm9hWE11Wld3cFhISmNiaUFnSUNCMGFHbHpMaVJ0YzJkZmRHVjRkQ0E5SUNRb0ozTndZVzRuTEhSb2FYTXVKRzF6WjE5b2IyeGtaWElwTzF4eVhHNWNjbHh1WEhKY2JpQWdmVnh5WEc1OUxIdGNjbHh1SUNCRFRGTTZKMlZrYVhSdmNpMXlaWEJzZVMxdmRtOG5YSEpjYm4wcE8xeHlYRzVjY2x4dVhISmNibVY0Y0c5eWRDQmtaV1poZFd4MElGSmxjR3g1TzF4eVhHNWNjbHh1WEhKY2JpOHZJR1Y0Y0c5eWRDQmtaV1poZFd4MElHWjFibU4wYVc5dUtIQnliM0J6S1h0Y2NseHVYSEpjYmk4dklDQWdjbVYwZFhKdUlHNWxkeUJTWlhCc2VTaHdjbTl3Y3lrN1hISmNiaTh2SUgxY2JseHVYRzR2THlCWFJVSlFRVU5MSUVaUFQxUkZVaUF2TDF4dUx5OGdMaTl6Y21NdmNtVndiSGt1YW5NaVhTd2ljMjkxY21ObFVtOXZkQ0k2SWlKOVxcbi8vIyBzb3VyY2VVUkw9d2VicGFjay1pbnRlcm5hbDovLy8xMFxcblwiKTtcblxuLyoqKi8gfSksXG4vKiAxMSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5ldmFsKFwidmFyIG1hcCA9IHtcXG5cXHRcXFwiLi9wb3BvXzJhZGVmZWRfMDEucG5nXFxcIjogMTIsXFxuXFx0XFxcIi4vcG9wb18yYWRlZmVkXzAyLnBuZ1xcXCI6IDEzLFxcblxcdFxcXCIuL3BvcG9fMmFkZWZlZF8wMy5wbmdcXFwiOiAxNCxcXG5cXHRcXFwiLi9wb3BvXzJhZGVmZWRfMDQucG5nXFxcIjogMTUsXFxuXFx0XFxcIi4vcG9wb18yYWRlZmVkXzA1LnBuZ1xcXCI6IDE2LFxcblxcdFxcXCIuL3BvcG9fMmFkZWZlZF8wNi5wbmdcXFwiOiAxNyxcXG5cXHRcXFwiLi9wb3BvXzJhZGVmZWRfMDcucG5nXFxcIjogMTgsXFxuXFx0XFxcIi4vcG9wb18yYWRlZmVkXzA4LnBuZ1xcXCI6IDE5LFxcblxcdFxcXCIuL3BvcG9fMmFkZWZlZF8wOS5wbmdcXFwiOiAyMCxcXG5cXHRcXFwiLi9wb3BvXzJhZGVmZWRfMTAucG5nXFxcIjogMjEsXFxuXFx0XFxcIi4vcG9wb18yYWRlZmVkXzExLnBuZ1xcXCI6IDIyLFxcblxcdFxcXCIuL3BvcG9fMmFkZWZlZF8xMi5wbmdcXFwiOiAyMyxcXG5cXHRcXFwiLi9wb3BvXzJhZGVmZWRfMTMucG5nXFxcIjogMjQsXFxuXFx0XFxcIi4vcG9wb18yYWRlZmVkXzE0LnBuZ1xcXCI6IDI1LFxcblxcdFxcXCIuL3BvcG9fMmFkZWZlZF8xNS5wbmdcXFwiOiAyNixcXG5cXHRcXFwiLi9wb3BvXzJhZGVmZWRfMTYucG5nXFxcIjogMjcsXFxuXFx0XFxcIi4vcG9wb18yYWRlZmVkXzE3LnBuZ1xcXCI6IDI4LFxcblxcdFxcXCIuL3BvcG9fMmFkZWZlZF8xOC5wbmdcXFwiOiAyOSxcXG5cXHRcXFwiLi9wb3BvXzJhZGVmZWRfMTkucG5nXFxcIjogMzAsXFxuXFx0XFxcIi4vcG9wb18yYWRlZmVkXzIwLnBuZ1xcXCI6IDMxLFxcblxcdFxcXCIuL3BvcG9fMmFkZWZlZF8yMS5wbmdcXFwiOiAzMixcXG5cXHRcXFwiLi9wb3BvXzJhZGVmZWRfMjIucG5nXFxcIjogMzMsXFxuXFx0XFxcIi4vcG9wb18yYWRlZmVkXzIzLnBuZ1xcXCI6IDM0LFxcblxcdFxcXCIuL3BvcG9fMmFkZWZlZF8yNC5wbmdcXFwiOiAzNSxcXG5cXHRcXFwiLi9wb3BvXzJhZGVmZWRfMjUucG5nXFxcIjogMzYsXFxuXFx0XFxcIi4vcG9wb18yYWRlZmVkXzI2LnBuZ1xcXCI6IDM3LFxcblxcdFxcXCIuL3BvcG9fMmFkZWZlZF8yNy5wbmdcXFwiOiAzOCxcXG5cXHRcXFwiLi9wb3BvXzJhZGVmZWRfMjgucG5nXFxcIjogMzksXFxuXFx0XFxcIi4vcG9wb18yYWRlZmVkXzI5LnBuZ1xcXCI6IDQwLFxcblxcdFxcXCIuL3BvcG9fMmFkZWZlZF8zMC5wbmdcXFwiOiA0MSxcXG5cXHRcXFwiLi9wb3BvXzJhZGVmZWRfMzEucG5nXFxcIjogNDIsXFxuXFx0XFxcIi4vcG9wb18yYWRlZmVkXzMyLnBuZ1xcXCI6IDQzLFxcblxcdFxcXCIuL3BvcG9fMmFkZWZlZF8zMy5wbmdcXFwiOiA0NCxcXG5cXHRcXFwiLi9wb3BvXzJhZGVmZWRfMzQucG5nXFxcIjogNDUsXFxuXFx0XFxcIi4vcG9wb18yYWRlZmVkXzM1LnBuZ1xcXCI6IDQ2LFxcblxcdFxcXCIuL3BvcG9fMmFkZWZlZF8zNi5wbmdcXFwiOiA0NyxcXG5cXHRcXFwiLi9wb3BvXzJhZGVmZWRfMzcucG5nXFxcIjogNDgsXFxuXFx0XFxcIi4vcG9wb18yYWRlZmVkXzM4LnBuZ1xcXCI6IDQ5LFxcblxcdFxcXCIuL3BvcG9fMmFkZWZlZF8zOS5wbmdcXFwiOiA1MCxcXG5cXHRcXFwiLi9wb3BvXzJhZGVmZWRfNDAucG5nXFxcIjogNTEsXFxuXFx0XFxcIi4vcG9wb18yYWRlZmVkXzQxLnBuZ1xcXCI6IDUyLFxcblxcdFxcXCIuL3BvcG9fMmFkZWZlZF80Mi5wbmdcXFwiOiA1MyxcXG5cXHRcXFwiLi9wb3BvXzJhZGVmZWRfNDMucG5nXFxcIjogNTQsXFxuXFx0XFxcIi4vcG9wb18yYWRlZmVkXzQ0LnBuZ1xcXCI6IDU1LFxcblxcdFxcXCIuL3BvcG9fMmFkZWZlZF80NS5wbmdcXFwiOiA1NixcXG5cXHRcXFwiLi9wb3BvXzJhZGVmZWRfNDYucG5nXFxcIjogNTcsXFxuXFx0XFxcIi4vcG9wb18yYWRlZmVkXzQ3LnBuZ1xcXCI6IDU4LFxcblxcdFxcXCIuL3BvcG9fMmFkZWZlZF80OC5wbmdcXFwiOiA1OSxcXG5cXHRcXFwiLi9wb3BvXzJhZGVmZWRfNDkucG5nXFxcIjogNjAsXFxuXFx0XFxcIi4vcG9wb18yYWRlZmVkXzUwLnBuZ1xcXCI6IDYxXFxufTtcXG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dChyZXEpIHtcXG5cXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyh3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKSk7XFxufTtcXG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKSB7XFxuXFx0dmFyIGlkID0gbWFwW3JlcV07XFxuXFx0aWYoIShpZCArIDEpKSAvLyBjaGVjayBmb3IgbnVtYmVyIG9yIHN0cmluZ1xcblxcdFxcdHRocm93IG5ldyBFcnJvcihcXFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcXFwiICsgcmVxICsgXFxcIicuXFxcIik7XFxuXFx0cmV0dXJuIGlkO1xcbn07XFxud2VicGFja0NvbnRleHQua2V5cyA9IGZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0S2V5cygpIHtcXG5cXHRyZXR1cm4gT2JqZWN0LmtleXMobWFwKTtcXG59O1xcbndlYnBhY2tDb250ZXh0LnJlc29sdmUgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmU7XFxubW9kdWxlLmV4cG9ydHMgPSB3ZWJwYWNrQ29udGV4dDtcXG53ZWJwYWNrQ29udGV4dC5pZCA9IDExOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZZMjl0Ylc5dUwybHRaeTl6Yldsc1pTQmNYQzV3Ym1ja1AyWXpOR0VpWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVpTENKbWFXeGxJam9pTVRFdWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUoyWVhJZ2JXRndJRDBnZTF4dVhIUmNJaTR2Y0c5d2IxOHlZV1JsWm1Wa1h6QXhMbkJ1WjF3aU9pQXhNaXhjYmx4MFhDSXVMM0J2Y0c5Zk1tRmtaV1psWkY4d01pNXdibWRjSWpvZ01UTXNYRzVjZEZ3aUxpOXdiM0J2WHpKaFpHVm1aV1JmTURNdWNHNW5YQ0k2SURFMExGeHVYSFJjSWk0dmNHOXdiMTh5WVdSbFptVmtYekEwTG5CdVoxd2lPaUF4TlN4Y2JseDBYQ0l1TDNCdmNHOWZNbUZrWldabFpGOHdOUzV3Ym1kY0lqb2dNVFlzWEc1Y2RGd2lMaTl3YjNCdlh6SmhaR1ZtWldSZk1EWXVjRzVuWENJNklERTNMRnh1WEhSY0lpNHZjRzl3YjE4eVlXUmxabVZrWHpBM0xuQnVaMXdpT2lBeE9DeGNibHgwWENJdUwzQnZjRzlmTW1Ga1pXWmxaRjh3T0M1d2JtZGNJam9nTVRrc1hHNWNkRndpTGk5d2IzQnZYekpoWkdWbVpXUmZNRGt1Y0c1blhDSTZJREl3TEZ4dVhIUmNJaTR2Y0c5d2IxOHlZV1JsWm1Wa1h6RXdMbkJ1WjF3aU9pQXlNU3hjYmx4MFhDSXVMM0J2Y0c5Zk1tRmtaV1psWkY4eE1TNXdibWRjSWpvZ01qSXNYRzVjZEZ3aUxpOXdiM0J2WHpKaFpHVm1aV1JmTVRJdWNHNW5YQ0k2SURJekxGeHVYSFJjSWk0dmNHOXdiMTh5WVdSbFptVmtYekV6TG5CdVoxd2lPaUF5TkN4Y2JseDBYQ0l1TDNCdmNHOWZNbUZrWldabFpGOHhOQzV3Ym1kY0lqb2dNalVzWEc1Y2RGd2lMaTl3YjNCdlh6SmhaR1ZtWldSZk1UVXVjRzVuWENJNklESTJMRnh1WEhSY0lpNHZjRzl3YjE4eVlXUmxabVZrWHpFMkxuQnVaMXdpT2lBeU55eGNibHgwWENJdUwzQnZjRzlmTW1Ga1pXWmxaRjh4Tnk1d2JtZGNJam9nTWpnc1hHNWNkRndpTGk5d2IzQnZYekpoWkdWbVpXUmZNVGd1Y0c1blhDSTZJREk1TEZ4dVhIUmNJaTR2Y0c5d2IxOHlZV1JsWm1Wa1h6RTVMbkJ1WjF3aU9pQXpNQ3hjYmx4MFhDSXVMM0J2Y0c5Zk1tRmtaV1psWkY4eU1DNXdibWRjSWpvZ016RXNYRzVjZEZ3aUxpOXdiM0J2WHpKaFpHVm1aV1JmTWpFdWNHNW5YQ0k2SURNeUxGeHVYSFJjSWk0dmNHOXdiMTh5WVdSbFptVmtYekl5TG5CdVoxd2lPaUF6TXl4Y2JseDBYQ0l1TDNCdmNHOWZNbUZrWldabFpGOHlNeTV3Ym1kY0lqb2dNelFzWEc1Y2RGd2lMaTl3YjNCdlh6SmhaR1ZtWldSZk1qUXVjRzVuWENJNklETTFMRnh1WEhSY0lpNHZjRzl3YjE4eVlXUmxabVZrWHpJMUxuQnVaMXdpT2lBek5peGNibHgwWENJdUwzQnZjRzlmTW1Ga1pXWmxaRjh5Tmk1d2JtZGNJam9nTXpjc1hHNWNkRndpTGk5d2IzQnZYekpoWkdWbVpXUmZNamN1Y0c1blhDSTZJRE00TEZ4dVhIUmNJaTR2Y0c5d2IxOHlZV1JsWm1Wa1h6STRMbkJ1WjF3aU9pQXpPU3hjYmx4MFhDSXVMM0J2Y0c5Zk1tRmtaV1psWkY4eU9TNXdibWRjSWpvZ05EQXNYRzVjZEZ3aUxpOXdiM0J2WHpKaFpHVm1aV1JmTXpBdWNHNW5YQ0k2SURReExGeHVYSFJjSWk0dmNHOXdiMTh5WVdSbFptVmtYek14TG5CdVoxd2lPaUEwTWl4Y2JseDBYQ0l1TDNCdmNHOWZNbUZrWldabFpGOHpNaTV3Ym1kY0lqb2dORE1zWEc1Y2RGd2lMaTl3YjNCdlh6SmhaR1ZtWldSZk16TXVjRzVuWENJNklEUTBMRnh1WEhSY0lpNHZjRzl3YjE4eVlXUmxabVZrWHpNMExuQnVaMXdpT2lBME5TeGNibHgwWENJdUwzQnZjRzlmTW1Ga1pXWmxaRjh6TlM1d2JtZGNJam9nTkRZc1hHNWNkRndpTGk5d2IzQnZYekpoWkdWbVpXUmZNell1Y0c1blhDSTZJRFEzTEZ4dVhIUmNJaTR2Y0c5d2IxOHlZV1JsWm1Wa1h6TTNMbkJ1WjF3aU9pQTBPQ3hjYmx4MFhDSXVMM0J2Y0c5Zk1tRmtaV1psWkY4ek9DNXdibWRjSWpvZ05Ea3NYRzVjZEZ3aUxpOXdiM0J2WHpKaFpHVm1aV1JmTXprdWNHNW5YQ0k2SURVd0xGeHVYSFJjSWk0dmNHOXdiMTh5WVdSbFptVmtYelF3TG5CdVoxd2lPaUExTVN4Y2JseDBYQ0l1TDNCdmNHOWZNbUZrWldabFpGODBNUzV3Ym1kY0lqb2dOVElzWEc1Y2RGd2lMaTl3YjNCdlh6SmhaR1ZtWldSZk5ESXVjRzVuWENJNklEVXpMRnh1WEhSY0lpNHZjRzl3YjE4eVlXUmxabVZrWHpRekxuQnVaMXdpT2lBMU5DeGNibHgwWENJdUwzQnZjRzlmTW1Ga1pXWmxaRjgwTkM1d2JtZGNJam9nTlRVc1hHNWNkRndpTGk5d2IzQnZYekpoWkdWbVpXUmZORFV1Y0c1blhDSTZJRFUyTEZ4dVhIUmNJaTR2Y0c5d2IxOHlZV1JsWm1Wa1h6UTJMbkJ1WjF3aU9pQTFOeXhjYmx4MFhDSXVMM0J2Y0c5Zk1tRmtaV1psWkY4ME55NXdibWRjSWpvZ05UZ3NYRzVjZEZ3aUxpOXdiM0J2WHpKaFpHVm1aV1JmTkRndWNHNW5YQ0k2SURVNUxGeHVYSFJjSWk0dmNHOXdiMTh5WVdSbFptVmtYelE1TG5CdVoxd2lPaUEyTUN4Y2JseDBYQ0l1TDNCdmNHOWZNbUZrWldabFpGODFNQzV3Ym1kY0lqb2dOakZjYm4wN1hHNW1kVzVqZEdsdmJpQjNaV0p3WVdOclEyOXVkR1Y0ZENoeVpYRXBJSHRjYmx4MGNtVjBkWEp1SUY5ZmQyVmljR0ZqYTE5eVpYRjFhWEpsWDE4b2QyVmljR0ZqYTBOdmJuUmxlSFJTWlhOdmJIWmxLSEpsY1NrcE8xeHVmVHRjYm1aMWJtTjBhVzl1SUhkbFluQmhZMnREYjI1MFpYaDBVbVZ6YjJ4MlpTaHlaWEVwSUh0Y2JseDBkbUZ5SUdsa0lEMGdiV0Z3VzNKbGNWMDdYRzVjZEdsbUtDRW9hV1FnS3lBeEtTa2dMeThnWTJobFkyc2dabTl5SUc1MWJXSmxjaUJ2Y2lCemRISnBibWRjYmx4MFhIUjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hDSkRZVzV1YjNRZ1ptbHVaQ0J0YjJSMWJHVWdKMXdpSUNzZ2NtVnhJQ3NnWENJbkxsd2lLVHRjYmx4MGNtVjBkWEp1SUdsa08xeHVmVHRjYm5kbFluQmhZMnREYjI1MFpYaDBMbXRsZVhNZ1BTQm1kVzVqZEdsdmJpQjNaV0p3WVdOclEyOXVkR1Y0ZEV0bGVYTW9LU0I3WEc1Y2RISmxkSFZ5YmlCUFltcGxZM1F1YTJWNWN5aHRZWEFwTzF4dWZUdGNibmRsWW5CaFkydERiMjUwWlhoMExuSmxjMjlzZG1VZ1BTQjNaV0p3WVdOclEyOXVkR1Y0ZEZKbGMyOXNkbVU3WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUhkbFluQmhZMnREYjI1MFpYaDBPMXh1ZDJWaWNHRmphME52Ym5SbGVIUXVhV1FnUFNBeE1UdGNibHh1WEc0dkx5OHZMeTh2THk4dkx5OHZMeTh2THk5Y2JpOHZJRmRGUWxCQlEwc2dSazlQVkVWU1hHNHZMeUF1TDNOeVl5OWpiMjF0YjI0dmFXMW5MM050YVd4bElGeGNMbkJ1WnlSY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURFeFhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzExXFxuXCIpO1xuXG4vKioqLyB9KSxcbi8qIDEyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFxcXCJpbWcvcG9wb18yYWRlZmVkXzAxLnBuZz81NWYzZmFcXFwiOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZZMjl0Ylc5dUwybHRaeTl6Yldsc1pTOXdiM0J2WHpKaFpHVm1aV1JmTURFdWNHNW5QelZqT0dRaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRWlMQ0ptYVd4bElqb2lNVEl1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnRiMlIxYkdVdVpYaHdiM0owY3lBOUlGOWZkMlZpY0dGamExOXdkV0pzYVdOZmNHRjBhRjlmSUNzZ1hDSnBiV2N2Y0c5d2IxOHlZV1JsWm1Wa1h6QXhMbkJ1Wno4MU5XWXpabUZjSWp0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMM055WXk5amIyMXRiMjR2YVcxbkwzTnRhV3hsTDNCdmNHOWZNbUZrWldabFpGOHdNUzV3Ym1kY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURFeVhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzEyXFxuXCIpO1xuXG4vKioqLyB9KSxcbi8qIDEzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFxcXCJpbWcvcG9wb18yYWRlZmVkXzAyLnBuZz80MzllMzJcXFwiOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZZMjl0Ylc5dUwybHRaeTl6Yldsc1pTOXdiM0J2WHpKaFpHVm1aV1JmTURJdWNHNW5QekV5WW1FaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRWlMQ0ptYVd4bElqb2lNVE11YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnRiMlIxYkdVdVpYaHdiM0owY3lBOUlGOWZkMlZpY0dGamExOXdkV0pzYVdOZmNHRjBhRjlmSUNzZ1hDSnBiV2N2Y0c5d2IxOHlZV1JsWm1Wa1h6QXlMbkJ1Wno4ME16bGxNekpjSWp0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMM055WXk5amIyMXRiMjR2YVcxbkwzTnRhV3hsTDNCdmNHOWZNbUZrWldabFpGOHdNaTV3Ym1kY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURFelhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzEzXFxuXCIpO1xuXG4vKioqLyB9KSxcbi8qIDE0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFxcXCJpbWcvcG9wb18yYWRlZmVkXzAzLnBuZz8zYzk4OWFcXFwiOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZZMjl0Ylc5dUwybHRaeTl6Yldsc1pTOXdiM0J2WHpKaFpHVm1aV1JmTURNdWNHNW5QekkzWkRnaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRWlMQ0ptYVd4bElqb2lNVFF1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnRiMlIxYkdVdVpYaHdiM0owY3lBOUlGOWZkMlZpY0dGamExOXdkV0pzYVdOZmNHRjBhRjlmSUNzZ1hDSnBiV2N2Y0c5d2IxOHlZV1JsWm1Wa1h6QXpMbkJ1Wno4ell6azRPV0ZjSWp0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMM055WXk5amIyMXRiMjR2YVcxbkwzTnRhV3hsTDNCdmNHOWZNbUZrWldabFpGOHdNeTV3Ym1kY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURFMFhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzE0XFxuXCIpO1xuXG4vKioqLyB9KSxcbi8qIDE1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFxcXCJpbWcvcG9wb18yYWRlZmVkXzA0LnBuZz8xN2ViZDVcXFwiOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZZMjl0Ylc5dUwybHRaeTl6Yldsc1pTOXdiM0J2WHpKaFpHVm1aV1JmTURRdWNHNW5QemsxTkRnaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRWlMQ0ptYVd4bElqb2lNVFV1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnRiMlIxYkdVdVpYaHdiM0owY3lBOUlGOWZkMlZpY0dGamExOXdkV0pzYVdOZmNHRjBhRjlmSUNzZ1hDSnBiV2N2Y0c5d2IxOHlZV1JsWm1Wa1h6QTBMbkJ1Wno4eE4yVmlaRFZjSWp0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMM055WXk5amIyMXRiMjR2YVcxbkwzTnRhV3hsTDNCdmNHOWZNbUZrWldabFpGOHdOQzV3Ym1kY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURFMVhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzE1XFxuXCIpO1xuXG4vKioqLyB9KSxcbi8qIDE2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFxcXCJpbWcvcG9wb18yYWRlZmVkXzA1LnBuZz85MTk2MzlcXFwiOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZZMjl0Ylc5dUwybHRaeTl6Yldsc1pTOXdiM0J2WHpKaFpHVm1aV1JmTURVdWNHNW5QMlpoWmpZaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRWlMQ0ptYVd4bElqb2lNVFl1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnRiMlIxYkdVdVpYaHdiM0owY3lBOUlGOWZkMlZpY0dGamExOXdkV0pzYVdOZmNHRjBhRjlmSUNzZ1hDSnBiV2N2Y0c5d2IxOHlZV1JsWm1Wa1h6QTFMbkJ1Wno4NU1UazJNemxjSWp0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMM055WXk5amIyMXRiMjR2YVcxbkwzTnRhV3hsTDNCdmNHOWZNbUZrWldabFpGOHdOUzV3Ym1kY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURFMlhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzE2XFxuXCIpO1xuXG4vKioqLyB9KSxcbi8qIDE3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFxcXCJpbWcvcG9wb18yYWRlZmVkXzA2LnBuZz8zMTI2ZjVcXFwiOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZZMjl0Ylc5dUwybHRaeTl6Yldsc1pTOXdiM0J2WHpKaFpHVm1aV1JmTURZdWNHNW5QelUzWVdJaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRWlMQ0ptYVd4bElqb2lNVGN1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnRiMlIxYkdVdVpYaHdiM0owY3lBOUlGOWZkMlZpY0dGamExOXdkV0pzYVdOZmNHRjBhRjlmSUNzZ1hDSnBiV2N2Y0c5d2IxOHlZV1JsWm1Wa1h6QTJMbkJ1Wno4ek1USTJaalZjSWp0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMM055WXk5amIyMXRiMjR2YVcxbkwzTnRhV3hsTDNCdmNHOWZNbUZrWldabFpGOHdOaTV3Ym1kY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURFM1hHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzE3XFxuXCIpO1xuXG4vKioqLyB9KSxcbi8qIDE4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFxcXCJpbWcvcG9wb18yYWRlZmVkXzA3LnBuZz9hMDBlOTBcXFwiOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZZMjl0Ylc5dUwybHRaeTl6Yldsc1pTOXdiM0J2WHpKaFpHVm1aV1JmTURjdWNHNW5QemxtTldRaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRWlMQ0ptYVd4bElqb2lNVGd1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnRiMlIxYkdVdVpYaHdiM0owY3lBOUlGOWZkMlZpY0dGamExOXdkV0pzYVdOZmNHRjBhRjlmSUNzZ1hDSnBiV2N2Y0c5d2IxOHlZV1JsWm1Wa1h6QTNMbkJ1Wno5aE1EQmxPVEJjSWp0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMM055WXk5amIyMXRiMjR2YVcxbkwzTnRhV3hsTDNCdmNHOWZNbUZrWldabFpGOHdOeTV3Ym1kY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURFNFhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzE4XFxuXCIpO1xuXG4vKioqLyB9KSxcbi8qIDE5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFxcXCJpbWcvcG9wb18yYWRlZmVkXzA4LnBuZz9kOGU4OTFcXFwiOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZZMjl0Ylc5dUwybHRaeTl6Yldsc1pTOXdiM0J2WHpKaFpHVm1aV1JmTURndWNHNW5Qemc0TkRraVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRWlMQ0ptYVd4bElqb2lNVGt1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnRiMlIxYkdVdVpYaHdiM0owY3lBOUlGOWZkMlZpY0dGamExOXdkV0pzYVdOZmNHRjBhRjlmSUNzZ1hDSnBiV2N2Y0c5d2IxOHlZV1JsWm1Wa1h6QTRMbkJ1Wno5a09HVTRPVEZjSWp0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMM055WXk5amIyMXRiMjR2YVcxbkwzTnRhV3hsTDNCdmNHOWZNbUZrWldabFpGOHdPQzV3Ym1kY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURFNVhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzE5XFxuXCIpO1xuXG4vKioqLyB9KSxcbi8qIDIwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFxcXCJpbWcvcG9wb18yYWRlZmVkXzA5LnBuZz85ODJjYzlcXFwiOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZZMjl0Ylc5dUwybHRaeTl6Yldsc1pTOXdiM0J2WHpKaFpHVm1aV1JmTURrdWNHNW5Qek0wTkRnaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRWlMQ0ptYVd4bElqb2lNakF1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnRiMlIxYkdVdVpYaHdiM0owY3lBOUlGOWZkMlZpY0dGamExOXdkV0pzYVdOZmNHRjBhRjlmSUNzZ1hDSnBiV2N2Y0c5d2IxOHlZV1JsWm1Wa1h6QTVMbkJ1Wno4NU9ESmpZemxjSWp0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMM055WXk5amIyMXRiMjR2YVcxbkwzTnRhV3hsTDNCdmNHOWZNbUZrWldabFpGOHdPUzV3Ym1kY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURJd1hHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzIwXFxuXCIpO1xuXG4vKioqLyB9KSxcbi8qIDIxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFxcXCJpbWcvcG9wb18yYWRlZmVkXzEwLnBuZz85YThlMWFcXFwiOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZZMjl0Ylc5dUwybHRaeTl6Yldsc1pTOXdiM0J2WHpKaFpHVm1aV1JmTVRBdWNHNW5QelppTkdZaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRWlMQ0ptYVd4bElqb2lNakV1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnRiMlIxYkdVdVpYaHdiM0owY3lBOUlGOWZkMlZpY0dGamExOXdkV0pzYVdOZmNHRjBhRjlmSUNzZ1hDSnBiV2N2Y0c5d2IxOHlZV1JsWm1Wa1h6RXdMbkJ1Wno4NVlUaGxNV0ZjSWp0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMM055WXk5amIyMXRiMjR2YVcxbkwzTnRhV3hsTDNCdmNHOWZNbUZrWldabFpGOHhNQzV3Ym1kY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURJeFhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzIxXFxuXCIpO1xuXG4vKioqLyB9KSxcbi8qIDIyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFxcXCJpbWcvcG9wb18yYWRlZmVkXzExLnBuZz9kMGJkNTFcXFwiOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZZMjl0Ylc5dUwybHRaeTl6Yldsc1pTOXdiM0J2WHpKaFpHVm1aV1JmTVRFdWNHNW5QMlkwTkRFaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRWlMQ0ptYVd4bElqb2lNakl1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnRiMlIxYkdVdVpYaHdiM0owY3lBOUlGOWZkMlZpY0dGamExOXdkV0pzYVdOZmNHRjBhRjlmSUNzZ1hDSnBiV2N2Y0c5d2IxOHlZV1JsWm1Wa1h6RXhMbkJ1Wno5a01HSmtOVEZjSWp0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMM055WXk5amIyMXRiMjR2YVcxbkwzTnRhV3hsTDNCdmNHOWZNbUZrWldabFpGOHhNUzV3Ym1kY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURJeVhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzIyXFxuXCIpO1xuXG4vKioqLyB9KSxcbi8qIDIzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFxcXCJpbWcvcG9wb18yYWRlZmVkXzEyLnBuZz9jNTkzODNcXFwiOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZZMjl0Ylc5dUwybHRaeTl6Yldsc1pTOXdiM0J2WHpKaFpHVm1aV1JmTVRJdWNHNW5QelkxWVRJaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRWlMQ0ptYVd4bElqb2lNak11YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnRiMlIxYkdVdVpYaHdiM0owY3lBOUlGOWZkMlZpY0dGamExOXdkV0pzYVdOZmNHRjBhRjlmSUNzZ1hDSnBiV2N2Y0c5d2IxOHlZV1JsWm1Wa1h6RXlMbkJ1Wno5ak5Ua3pPRE5jSWp0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMM055WXk5amIyMXRiMjR2YVcxbkwzTnRhV3hsTDNCdmNHOWZNbUZrWldabFpGOHhNaTV3Ym1kY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURJelhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzIzXFxuXCIpO1xuXG4vKioqLyB9KSxcbi8qIDI0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFxcXCJpbWcvcG9wb18yYWRlZmVkXzEzLnBuZz82Yjc5ZDdcXFwiOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZZMjl0Ylc5dUwybHRaeTl6Yldsc1pTOXdiM0J2WHpKaFpHVm1aV1JmTVRNdWNHNW5QelZoTWpraVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRWlMQ0ptYVd4bElqb2lNalF1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnRiMlIxYkdVdVpYaHdiM0owY3lBOUlGOWZkMlZpY0dGamExOXdkV0pzYVdOZmNHRjBhRjlmSUNzZ1hDSnBiV2N2Y0c5d2IxOHlZV1JsWm1Wa1h6RXpMbkJ1Wno4MllqYzVaRGRjSWp0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMM055WXk5amIyMXRiMjR2YVcxbkwzTnRhV3hsTDNCdmNHOWZNbUZrWldabFpGOHhNeTV3Ym1kY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURJMFhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzI0XFxuXCIpO1xuXG4vKioqLyB9KSxcbi8qIDI1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFxcXCJpbWcvcG9wb18yYWRlZmVkXzE0LnBuZz9jMWRiZGVcXFwiOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZZMjl0Ylc5dUwybHRaeTl6Yldsc1pTOXdiM0J2WHpKaFpHVm1aV1JmTVRRdWNHNW5QekUwTWpnaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRWlMQ0ptYVd4bElqb2lNalV1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnRiMlIxYkdVdVpYaHdiM0owY3lBOUlGOWZkMlZpY0dGamExOXdkV0pzYVdOZmNHRjBhRjlmSUNzZ1hDSnBiV2N2Y0c5d2IxOHlZV1JsWm1Wa1h6RTBMbkJ1Wno5ak1XUmlaR1ZjSWp0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMM055WXk5amIyMXRiMjR2YVcxbkwzTnRhV3hsTDNCdmNHOWZNbUZrWldabFpGOHhOQzV3Ym1kY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURJMVhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzI1XFxuXCIpO1xuXG4vKioqLyB9KSxcbi8qIDI2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFxcXCJpbWcvcG9wb18yYWRlZmVkXzE1LnBuZz9hNzQwYjhcXFwiOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZZMjl0Ylc5dUwybHRaeTl6Yldsc1pTOXdiM0J2WHpKaFpHVm1aV1JmTVRVdWNHNW5QelUwTVRjaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRWlMQ0ptYVd4bElqb2lNall1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnRiMlIxYkdVdVpYaHdiM0owY3lBOUlGOWZkMlZpY0dGamExOXdkV0pzYVdOZmNHRjBhRjlmSUNzZ1hDSnBiV2N2Y0c5d2IxOHlZV1JsWm1Wa1h6RTFMbkJ1Wno5aE56UXdZamhjSWp0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMM055WXk5amIyMXRiMjR2YVcxbkwzTnRhV3hsTDNCdmNHOWZNbUZrWldabFpGOHhOUzV3Ym1kY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURJMlhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzI2XFxuXCIpO1xuXG4vKioqLyB9KSxcbi8qIDI3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFxcXCJpbWcvcG9wb18yYWRlZmVkXzE2LnBuZz9jZDk0ODZcXFwiOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZZMjl0Ylc5dUwybHRaeTl6Yldsc1pTOXdiM0J2WHpKaFpHVm1aV1JmTVRZdWNHNW5QMlE0WTJFaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRWlMQ0ptYVd4bElqb2lNamN1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnRiMlIxYkdVdVpYaHdiM0owY3lBOUlGOWZkMlZpY0dGamExOXdkV0pzYVdOZmNHRjBhRjlmSUNzZ1hDSnBiV2N2Y0c5d2IxOHlZV1JsWm1Wa1h6RTJMbkJ1Wno5alpEazBPRFpjSWp0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMM055WXk5amIyMXRiMjR2YVcxbkwzTnRhV3hsTDNCdmNHOWZNbUZrWldabFpGOHhOaTV3Ym1kY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURJM1hHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzI3XFxuXCIpO1xuXG4vKioqLyB9KSxcbi8qIDI4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFxcXCJpbWcvcG9wb18yYWRlZmVkXzE3LnBuZz8xMDhkMjhcXFwiOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZZMjl0Ylc5dUwybHRaeTl6Yldsc1pTOXdiM0J2WHpKaFpHVm1aV1JmTVRjdWNHNW5QekV4WW1JaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRWlMQ0ptYVd4bElqb2lNamd1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnRiMlIxYkdVdVpYaHdiM0owY3lBOUlGOWZkMlZpY0dGamExOXdkV0pzYVdOZmNHRjBhRjlmSUNzZ1hDSnBiV2N2Y0c5d2IxOHlZV1JsWm1Wa1h6RTNMbkJ1Wno4eE1EaGtNamhjSWp0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMM055WXk5amIyMXRiMjR2YVcxbkwzTnRhV3hsTDNCdmNHOWZNbUZrWldabFpGOHhOeTV3Ym1kY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURJNFhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzI4XFxuXCIpO1xuXG4vKioqLyB9KSxcbi8qIDI5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFxcXCJpbWcvcG9wb18yYWRlZmVkXzE4LnBuZz85MWNlY2ZcXFwiOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZZMjl0Ylc5dUwybHRaeTl6Yldsc1pTOXdiM0J2WHpKaFpHVm1aV1JmTVRndWNHNW5QMkV3TTJFaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRWlMQ0ptYVd4bElqb2lNamt1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnRiMlIxYkdVdVpYaHdiM0owY3lBOUlGOWZkMlZpY0dGamExOXdkV0pzYVdOZmNHRjBhRjlmSUNzZ1hDSnBiV2N2Y0c5d2IxOHlZV1JsWm1Wa1h6RTRMbkJ1Wno4NU1XTmxZMlpjSWp0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMM055WXk5amIyMXRiMjR2YVcxbkwzTnRhV3hsTDNCdmNHOWZNbUZrWldabFpGOHhPQzV3Ym1kY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURJNVhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzI5XFxuXCIpO1xuXG4vKioqLyB9KSxcbi8qIDMwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFxcXCJpbWcvcG9wb18yYWRlZmVkXzE5LnBuZz8xYzA3YTZcXFwiOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZZMjl0Ylc5dUwybHRaeTl6Yldsc1pTOXdiM0J2WHpKaFpHVm1aV1JmTVRrdWNHNW5QekppWmpFaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRWlMQ0ptYVd4bElqb2lNekF1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnRiMlIxYkdVdVpYaHdiM0owY3lBOUlGOWZkMlZpY0dGamExOXdkV0pzYVdOZmNHRjBhRjlmSUNzZ1hDSnBiV2N2Y0c5d2IxOHlZV1JsWm1Wa1h6RTVMbkJ1Wno4eFl6QTNZVFpjSWp0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMM055WXk5amIyMXRiMjR2YVcxbkwzTnRhV3hsTDNCdmNHOWZNbUZrWldabFpGOHhPUzV3Ym1kY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURNd1hHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzMwXFxuXCIpO1xuXG4vKioqLyB9KSxcbi8qIDMxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFxcXCJpbWcvcG9wb18yYWRlZmVkXzIwLnBuZz84ZGYxYjRcXFwiOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZZMjl0Ylc5dUwybHRaeTl6Yldsc1pTOXdiM0J2WHpKaFpHVm1aV1JmTWpBdWNHNW5QemN5TUdRaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRWlMQ0ptYVd4bElqb2lNekV1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnRiMlIxYkdVdVpYaHdiM0owY3lBOUlGOWZkMlZpY0dGamExOXdkV0pzYVdOZmNHRjBhRjlmSUNzZ1hDSnBiV2N2Y0c5d2IxOHlZV1JsWm1Wa1h6SXdMbkJ1Wno4NFpHWXhZalJjSWp0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMM055WXk5amIyMXRiMjR2YVcxbkwzTnRhV3hsTDNCdmNHOWZNbUZrWldabFpGOHlNQzV3Ym1kY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURNeFhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzMxXFxuXCIpO1xuXG4vKioqLyB9KSxcbi8qIDMyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFxcXCJpbWcvcG9wb18yYWRlZmVkXzIxLnBuZz82MjNkN2RcXFwiOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZZMjl0Ylc5dUwybHRaeTl6Yldsc1pTOXdiM0J2WHpKaFpHVm1aV1JmTWpFdWNHNW5Qell3TlRJaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRWlMQ0ptYVd4bElqb2lNekl1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnRiMlIxYkdVdVpYaHdiM0owY3lBOUlGOWZkMlZpY0dGamExOXdkV0pzYVdOZmNHRjBhRjlmSUNzZ1hDSnBiV2N2Y0c5d2IxOHlZV1JsWm1Wa1h6SXhMbkJ1Wno4Mk1qTmtOMlJjSWp0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMM055WXk5amIyMXRiMjR2YVcxbkwzTnRhV3hsTDNCdmNHOWZNbUZrWldabFpGOHlNUzV3Ym1kY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURNeVhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzMyXFxuXCIpO1xuXG4vKioqLyB9KSxcbi8qIDMzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFxcXCJpbWcvcG9wb18yYWRlZmVkXzIyLnBuZz8zZTMwMmVcXFwiOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZZMjl0Ylc5dUwybHRaeTl6Yldsc1pTOXdiM0J2WHpKaFpHVm1aV1JmTWpJdWNHNW5QemMzTlRVaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRWlMQ0ptYVd4bElqb2lNek11YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnRiMlIxYkdVdVpYaHdiM0owY3lBOUlGOWZkMlZpY0dGamExOXdkV0pzYVdOZmNHRjBhRjlmSUNzZ1hDSnBiV2N2Y0c5d2IxOHlZV1JsWm1Wa1h6SXlMbkJ1Wno4elpUTXdNbVZjSWp0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMM055WXk5amIyMXRiMjR2YVcxbkwzTnRhV3hsTDNCdmNHOWZNbUZrWldabFpGOHlNaTV3Ym1kY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURNelhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzMzXFxuXCIpO1xuXG4vKioqLyB9KSxcbi8qIDM0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFxcXCJpbWcvcG9wb18yYWRlZmVkXzIzLnBuZz81ZjNmOTlcXFwiOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZZMjl0Ylc5dUwybHRaeTl6Yldsc1pTOXdiM0J2WHpKaFpHVm1aV1JmTWpNdWNHNW5QelE0TWpRaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRWlMQ0ptYVd4bElqb2lNelF1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnRiMlIxYkdVdVpYaHdiM0owY3lBOUlGOWZkMlZpY0dGamExOXdkV0pzYVdOZmNHRjBhRjlmSUNzZ1hDSnBiV2N2Y0c5d2IxOHlZV1JsWm1Wa1h6SXpMbkJ1Wno4MVpqTm1PVGxjSWp0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMM055WXk5amIyMXRiMjR2YVcxbkwzTnRhV3hsTDNCdmNHOWZNbUZrWldabFpGOHlNeTV3Ym1kY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURNMFhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzM0XFxuXCIpO1xuXG4vKioqLyB9KSxcbi8qIDM1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFxcXCJpbWcvcG9wb18yYWRlZmVkXzI0LnBuZz84MjA1ZGZcXFwiOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZZMjl0Ylc5dUwybHRaeTl6Yldsc1pTOXdiM0J2WHpKaFpHVm1aV1JmTWpRdWNHNW5QelU0WWpFaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRWlMQ0ptYVd4bElqb2lNelV1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnRiMlIxYkdVdVpYaHdiM0owY3lBOUlGOWZkMlZpY0dGamExOXdkV0pzYVdOZmNHRjBhRjlmSUNzZ1hDSnBiV2N2Y0c5d2IxOHlZV1JsWm1Wa1h6STBMbkJ1Wno4NE1qQTFaR1pjSWp0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMM055WXk5amIyMXRiMjR2YVcxbkwzTnRhV3hsTDNCdmNHOWZNbUZrWldabFpGOHlOQzV3Ym1kY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURNMVhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzM1XFxuXCIpO1xuXG4vKioqLyB9KSxcbi8qIDM2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFxcXCJpbWcvcG9wb18yYWRlZmVkXzI1LnBuZz9lY2MyNWZcXFwiOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZZMjl0Ylc5dUwybHRaeTl6Yldsc1pTOXdiM0J2WHpKaFpHVm1aV1JmTWpVdWNHNW5QMkkxTVdFaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRWlMQ0ptYVd4bElqb2lNell1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnRiMlIxYkdVdVpYaHdiM0owY3lBOUlGOWZkMlZpY0dGamExOXdkV0pzYVdOZmNHRjBhRjlmSUNzZ1hDSnBiV2N2Y0c5d2IxOHlZV1JsWm1Wa1h6STFMbkJ1Wno5bFkyTXlOV1pjSWp0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMM055WXk5amIyMXRiMjR2YVcxbkwzTnRhV3hsTDNCdmNHOWZNbUZrWldabFpGOHlOUzV3Ym1kY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURNMlhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzM2XFxuXCIpO1xuXG4vKioqLyB9KSxcbi8qIDM3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFxcXCJpbWcvcG9wb18yYWRlZmVkXzI2LnBuZz9iNWMyNWJcXFwiOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZZMjl0Ylc5dUwybHRaeTl6Yldsc1pTOXdiM0J2WHpKaFpHVm1aV1JmTWpZdWNHNW5Qek15WXpFaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRWlMQ0ptYVd4bElqb2lNemN1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnRiMlIxYkdVdVpYaHdiM0owY3lBOUlGOWZkMlZpY0dGamExOXdkV0pzYVdOZmNHRjBhRjlmSUNzZ1hDSnBiV2N2Y0c5d2IxOHlZV1JsWm1Wa1h6STJMbkJ1Wno5aU5XTXlOV0pjSWp0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMM055WXk5amIyMXRiMjR2YVcxbkwzTnRhV3hsTDNCdmNHOWZNbUZrWldabFpGOHlOaTV3Ym1kY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURNM1hHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzM3XFxuXCIpO1xuXG4vKioqLyB9KSxcbi8qIDM4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFxcXCJpbWcvcG9wb18yYWRlZmVkXzI3LnBuZz9mZjA1MTNcXFwiOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZZMjl0Ylc5dUwybHRaeTl6Yldsc1pTOXdiM0J2WHpKaFpHVm1aV1JmTWpjdWNHNW5QekkyWmpZaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRWlMQ0ptYVd4bElqb2lNemd1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnRiMlIxYkdVdVpYaHdiM0owY3lBOUlGOWZkMlZpY0dGamExOXdkV0pzYVdOZmNHRjBhRjlmSUNzZ1hDSnBiV2N2Y0c5d2IxOHlZV1JsWm1Wa1h6STNMbkJ1Wno5bVpqQTFNVE5jSWp0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMM055WXk5amIyMXRiMjR2YVcxbkwzTnRhV3hsTDNCdmNHOWZNbUZrWldabFpGOHlOeTV3Ym1kY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURNNFhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzM4XFxuXCIpO1xuXG4vKioqLyB9KSxcbi8qIDM5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFxcXCJpbWcvcG9wb18yYWRlZmVkXzI4LnBuZz84NjFlMWFcXFwiOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZZMjl0Ylc5dUwybHRaeTl6Yldsc1pTOXdiM0J2WHpKaFpHVm1aV1JmTWpndWNHNW5QMkV4WXpnaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRWlMQ0ptYVd4bElqb2lNemt1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnRiMlIxYkdVdVpYaHdiM0owY3lBOUlGOWZkMlZpY0dGamExOXdkV0pzYVdOZmNHRjBhRjlmSUNzZ1hDSnBiV2N2Y0c5d2IxOHlZV1JsWm1Wa1h6STRMbkJ1Wno4NE5qRmxNV0ZjSWp0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMM055WXk5amIyMXRiMjR2YVcxbkwzTnRhV3hsTDNCdmNHOWZNbUZrWldabFpGOHlPQzV3Ym1kY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURNNVhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzM5XFxuXCIpO1xuXG4vKioqLyB9KSxcbi8qIDQwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFxcXCJpbWcvcG9wb18yYWRlZmVkXzI5LnBuZz83YmIzMGNcXFwiOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZZMjl0Ylc5dUwybHRaeTl6Yldsc1pTOXdiM0J2WHpKaFpHVm1aV1JmTWprdWNHNW5QelJqTVRRaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRWlMQ0ptYVd4bElqb2lOREF1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnRiMlIxYkdVdVpYaHdiM0owY3lBOUlGOWZkMlZpY0dGamExOXdkV0pzYVdOZmNHRjBhRjlmSUNzZ1hDSnBiV2N2Y0c5d2IxOHlZV1JsWm1Wa1h6STVMbkJ1Wno4M1ltSXpNR05jSWp0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMM055WXk5amIyMXRiMjR2YVcxbkwzTnRhV3hsTDNCdmNHOWZNbUZrWldabFpGOHlPUzV3Ym1kY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURRd1hHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzQwXFxuXCIpO1xuXG4vKioqLyB9KSxcbi8qIDQxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFxcXCJpbWcvcG9wb18yYWRlZmVkXzMwLnBuZz84NDM1Y2NcXFwiOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZZMjl0Ylc5dUwybHRaeTl6Yldsc1pTOXdiM0J2WHpKaFpHVm1aV1JmTXpBdWNHNW5QelU1TkRFaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRWlMQ0ptYVd4bElqb2lOREV1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnRiMlIxYkdVdVpYaHdiM0owY3lBOUlGOWZkMlZpY0dGamExOXdkV0pzYVdOZmNHRjBhRjlmSUNzZ1hDSnBiV2N2Y0c5d2IxOHlZV1JsWm1Wa1h6TXdMbkJ1Wno4NE5ETTFZMk5jSWp0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMM055WXk5amIyMXRiMjR2YVcxbkwzTnRhV3hsTDNCdmNHOWZNbUZrWldabFpGOHpNQzV3Ym1kY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURReFhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzQxXFxuXCIpO1xuXG4vKioqLyB9KSxcbi8qIDQyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFxcXCJpbWcvcG9wb18yYWRlZmVkXzMxLnBuZz82N2YxNzNcXFwiOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZZMjl0Ylc5dUwybHRaeTl6Yldsc1pTOXdiM0J2WHpKaFpHVm1aV1JmTXpFdWNHNW5Qekk1TWpJaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRWlMQ0ptYVd4bElqb2lOREl1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnRiMlIxYkdVdVpYaHdiM0owY3lBOUlGOWZkMlZpY0dGamExOXdkV0pzYVdOZmNHRjBhRjlmSUNzZ1hDSnBiV2N2Y0c5d2IxOHlZV1JsWm1Wa1h6TXhMbkJ1Wno4Mk4yWXhOek5jSWp0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMM055WXk5amIyMXRiMjR2YVcxbkwzTnRhV3hsTDNCdmNHOWZNbUZrWldabFpGOHpNUzV3Ym1kY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURReVhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzQyXFxuXCIpO1xuXG4vKioqLyB9KSxcbi8qIDQzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFxcXCJpbWcvcG9wb18yYWRlZmVkXzMyLnBuZz80ZjhhMWJcXFwiOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZZMjl0Ylc5dUwybHRaeTl6Yldsc1pTOXdiM0J2WHpKaFpHVm1aV1JmTXpJdWNHNW5QemxpTkRZaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRWlMQ0ptYVd4bElqb2lORE11YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnRiMlIxYkdVdVpYaHdiM0owY3lBOUlGOWZkMlZpY0dGamExOXdkV0pzYVdOZmNHRjBhRjlmSUNzZ1hDSnBiV2N2Y0c5d2IxOHlZV1JsWm1Wa1h6TXlMbkJ1Wno4MFpqaGhNV0pjSWp0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMM055WXk5amIyMXRiMjR2YVcxbkwzTnRhV3hsTDNCdmNHOWZNbUZrWldabFpGOHpNaTV3Ym1kY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURRelhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzQzXFxuXCIpO1xuXG4vKioqLyB9KSxcbi8qIDQ0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFxcXCJpbWcvcG9wb18yYWRlZmVkXzMzLnBuZz9lYTczMTZcXFwiOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZZMjl0Ylc5dUwybHRaeTl6Yldsc1pTOXdiM0J2WHpKaFpHVm1aV1JmTXpNdWNHNW5QekU1TXpJaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRWlMQ0ptYVd4bElqb2lORFF1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnRiMlIxYkdVdVpYaHdiM0owY3lBOUlGOWZkMlZpY0dGamExOXdkV0pzYVdOZmNHRjBhRjlmSUNzZ1hDSnBiV2N2Y0c5d2IxOHlZV1JsWm1Wa1h6TXpMbkJ1Wno5bFlUY3pNVFpjSWp0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMM055WXk5amIyMXRiMjR2YVcxbkwzTnRhV3hsTDNCdmNHOWZNbUZrWldabFpGOHpNeTV3Ym1kY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURRMFhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzQ0XFxuXCIpO1xuXG4vKioqLyB9KSxcbi8qIDQ1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFxcXCJpbWcvcG9wb18yYWRlZmVkXzM0LnBuZz8xNGQ4YjFcXFwiOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZZMjl0Ylc5dUwybHRaeTl6Yldsc1pTOXdiM0J2WHpKaFpHVm1aV1JmTXpRdWNHNW5QMlptTkRBaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRWlMQ0ptYVd4bElqb2lORFV1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnRiMlIxYkdVdVpYaHdiM0owY3lBOUlGOWZkMlZpY0dGamExOXdkV0pzYVdOZmNHRjBhRjlmSUNzZ1hDSnBiV2N2Y0c5d2IxOHlZV1JsWm1Wa1h6TTBMbkJ1Wno4eE5HUTRZakZjSWp0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMM055WXk5amIyMXRiMjR2YVcxbkwzTnRhV3hsTDNCdmNHOWZNbUZrWldabFpGOHpOQzV3Ym1kY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURRMVhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzQ1XFxuXCIpO1xuXG4vKioqLyB9KSxcbi8qIDQ2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFxcXCJpbWcvcG9wb18yYWRlZmVkXzM1LnBuZz9iZGJjYTdcXFwiOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZZMjl0Ylc5dUwybHRaeTl6Yldsc1pTOXdiM0J2WHpKaFpHVm1aV1JmTXpVdWNHNW5QMlV4TmpVaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRWlMQ0ptYVd4bElqb2lORFl1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnRiMlIxYkdVdVpYaHdiM0owY3lBOUlGOWZkMlZpY0dGamExOXdkV0pzYVdOZmNHRjBhRjlmSUNzZ1hDSnBiV2N2Y0c5d2IxOHlZV1JsWm1Wa1h6TTFMbkJ1Wno5aVpHSmpZVGRjSWp0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMM055WXk5amIyMXRiMjR2YVcxbkwzTnRhV3hsTDNCdmNHOWZNbUZrWldabFpGOHpOUzV3Ym1kY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURRMlhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzQ2XFxuXCIpO1xuXG4vKioqLyB9KSxcbi8qIDQ3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFxcXCJpbWcvcG9wb18yYWRlZmVkXzM2LnBuZz83OGM0NGNcXFwiOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZZMjl0Ylc5dUwybHRaeTl6Yldsc1pTOXdiM0J2WHpKaFpHVm1aV1JmTXpZdWNHNW5Qek15WWpJaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRWlMQ0ptYVd4bElqb2lORGN1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnRiMlIxYkdVdVpYaHdiM0owY3lBOUlGOWZkMlZpY0dGamExOXdkV0pzYVdOZmNHRjBhRjlmSUNzZ1hDSnBiV2N2Y0c5d2IxOHlZV1JsWm1Wa1h6TTJMbkJ1Wno4M09HTTBOR05jSWp0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMM055WXk5amIyMXRiMjR2YVcxbkwzTnRhV3hsTDNCdmNHOWZNbUZrWldabFpGOHpOaTV3Ym1kY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURRM1hHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzQ3XFxuXCIpO1xuXG4vKioqLyB9KSxcbi8qIDQ4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFxcXCJpbWcvcG9wb18yYWRlZmVkXzM3LnBuZz9iYTIyNmZcXFwiOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZZMjl0Ylc5dUwybHRaeTl6Yldsc1pTOXdiM0J2WHpKaFpHVm1aV1JmTXpjdWNHNW5QelEyWkdVaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRWlMQ0ptYVd4bElqb2lORGd1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnRiMlIxYkdVdVpYaHdiM0owY3lBOUlGOWZkMlZpY0dGamExOXdkV0pzYVdOZmNHRjBhRjlmSUNzZ1hDSnBiV2N2Y0c5d2IxOHlZV1JsWm1Wa1h6TTNMbkJ1Wno5aVlUSXlObVpjSWp0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMM055WXk5amIyMXRiMjR2YVcxbkwzTnRhV3hsTDNCdmNHOWZNbUZrWldabFpGOHpOeTV3Ym1kY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURRNFhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzQ4XFxuXCIpO1xuXG4vKioqLyB9KSxcbi8qIDQ5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFxcXCJpbWcvcG9wb18yYWRlZmVkXzM4LnBuZz80YTk5OWNcXFwiOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZZMjl0Ylc5dUwybHRaeTl6Yldsc1pTOXdiM0J2WHpKaFpHVm1aV1JmTXpndWNHNW5QelU1TmpjaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRWlMQ0ptYVd4bElqb2lORGt1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnRiMlIxYkdVdVpYaHdiM0owY3lBOUlGOWZkMlZpY0dGamExOXdkV0pzYVdOZmNHRjBhRjlmSUNzZ1hDSnBiV2N2Y0c5d2IxOHlZV1JsWm1Wa1h6TTRMbkJ1Wno4MFlUazVPV05jSWp0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMM055WXk5amIyMXRiMjR2YVcxbkwzTnRhV3hsTDNCdmNHOWZNbUZrWldabFpGOHpPQzV3Ym1kY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURRNVhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzQ5XFxuXCIpO1xuXG4vKioqLyB9KSxcbi8qIDUwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFxcXCJpbWcvcG9wb18yYWRlZmVkXzM5LnBuZz8yY2ViNGNcXFwiOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZZMjl0Ylc5dUwybHRaeTl6Yldsc1pTOXdiM0J2WHpKaFpHVm1aV1JmTXprdWNHNW5QekprWm1FaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRWlMQ0ptYVd4bElqb2lOVEF1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnRiMlIxYkdVdVpYaHdiM0owY3lBOUlGOWZkMlZpY0dGamExOXdkV0pzYVdOZmNHRjBhRjlmSUNzZ1hDSnBiV2N2Y0c5d2IxOHlZV1JsWm1Wa1h6TTVMbkJ1Wno4eVkyVmlOR05jSWp0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMM055WXk5amIyMXRiMjR2YVcxbkwzTnRhV3hsTDNCdmNHOWZNbUZrWldabFpGOHpPUzV3Ym1kY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURVd1hHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzUwXFxuXCIpO1xuXG4vKioqLyB9KSxcbi8qIDUxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFxcXCJpbWcvcG9wb18yYWRlZmVkXzQwLnBuZz84NDQzZGZcXFwiOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZZMjl0Ylc5dUwybHRaeTl6Yldsc1pTOXdiM0J2WHpKaFpHVm1aV1JmTkRBdWNHNW5QMk5qWkdVaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRWlMQ0ptYVd4bElqb2lOVEV1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnRiMlIxYkdVdVpYaHdiM0owY3lBOUlGOWZkMlZpY0dGamExOXdkV0pzYVdOZmNHRjBhRjlmSUNzZ1hDSnBiV2N2Y0c5d2IxOHlZV1JsWm1Wa1h6UXdMbkJ1Wno4NE5EUXpaR1pjSWp0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMM055WXk5amIyMXRiMjR2YVcxbkwzTnRhV3hsTDNCdmNHOWZNbUZrWldabFpGODBNQzV3Ym1kY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURVeFhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzUxXFxuXCIpO1xuXG4vKioqLyB9KSxcbi8qIDUyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFxcXCJpbWcvcG9wb18yYWRlZmVkXzQxLnBuZz9iNzJmOWRcXFwiOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZZMjl0Ylc5dUwybHRaeTl6Yldsc1pTOXdiM0J2WHpKaFpHVm1aV1JmTkRFdWNHNW5QekJpTnpRaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRWlMQ0ptYVd4bElqb2lOVEl1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnRiMlIxYkdVdVpYaHdiM0owY3lBOUlGOWZkMlZpY0dGamExOXdkV0pzYVdOZmNHRjBhRjlmSUNzZ1hDSnBiV2N2Y0c5d2IxOHlZV1JsWm1Wa1h6UXhMbkJ1Wno5aU56Sm1PV1JjSWp0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMM055WXk5amIyMXRiMjR2YVcxbkwzTnRhV3hsTDNCdmNHOWZNbUZrWldabFpGODBNUzV3Ym1kY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURVeVhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzUyXFxuXCIpO1xuXG4vKioqLyB9KSxcbi8qIDUzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFxcXCJpbWcvcG9wb18yYWRlZmVkXzQyLnBuZz9jNzFiMTdcXFwiOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZZMjl0Ylc5dUwybHRaeTl6Yldsc1pTOXdiM0J2WHpKaFpHVm1aV1JmTkRJdWNHNW5QemN5WlRnaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRWlMQ0ptYVd4bElqb2lOVE11YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnRiMlIxYkdVdVpYaHdiM0owY3lBOUlGOWZkMlZpY0dGamExOXdkV0pzYVdOZmNHRjBhRjlmSUNzZ1hDSnBiV2N2Y0c5d2IxOHlZV1JsWm1Wa1h6UXlMbkJ1Wno5ak56RmlNVGRjSWp0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMM055WXk5amIyMXRiMjR2YVcxbkwzTnRhV3hsTDNCdmNHOWZNbUZrWldabFpGODBNaTV3Ym1kY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURVelhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzUzXFxuXCIpO1xuXG4vKioqLyB9KSxcbi8qIDU0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFxcXCJpbWcvcG9wb18yYWRlZmVkXzQzLnBuZz80ZGQwMzBcXFwiOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZZMjl0Ylc5dUwybHRaeTl6Yldsc1pTOXdiM0J2WHpKaFpHVm1aV1JmTkRNdWNHNW5QMk5pT0RRaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRWlMQ0ptYVd4bElqb2lOVFF1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnRiMlIxYkdVdVpYaHdiM0owY3lBOUlGOWZkMlZpY0dGamExOXdkV0pzYVdOZmNHRjBhRjlmSUNzZ1hDSnBiV2N2Y0c5d2IxOHlZV1JsWm1Wa1h6UXpMbkJ1Wno4MFpHUXdNekJjSWp0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMM055WXk5amIyMXRiMjR2YVcxbkwzTnRhV3hsTDNCdmNHOWZNbUZrWldabFpGODBNeTV3Ym1kY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURVMFhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzU0XFxuXCIpO1xuXG4vKioqLyB9KSxcbi8qIDU1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFxcXCJpbWcvcG9wb18yYWRlZmVkXzQ0LnBuZz8zMDM0NThcXFwiOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZZMjl0Ylc5dUwybHRaeTl6Yldsc1pTOXdiM0J2WHpKaFpHVm1aV1JmTkRRdWNHNW5QekpoWVRFaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRWlMQ0ptYVd4bElqb2lOVFV1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnRiMlIxYkdVdVpYaHdiM0owY3lBOUlGOWZkMlZpY0dGamExOXdkV0pzYVdOZmNHRjBhRjlmSUNzZ1hDSnBiV2N2Y0c5d2IxOHlZV1JsWm1Wa1h6UTBMbkJ1Wno4ek1ETTBOVGhjSWp0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMM055WXk5amIyMXRiMjR2YVcxbkwzTnRhV3hsTDNCdmNHOWZNbUZrWldabFpGODBOQzV3Ym1kY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURVMVhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzU1XFxuXCIpO1xuXG4vKioqLyB9KSxcbi8qIDU2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFxcXCJpbWcvcG9wb18yYWRlZmVkXzQ1LnBuZz8yZDNlMGRcXFwiOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZZMjl0Ylc5dUwybHRaeTl6Yldsc1pTOXdiM0J2WHpKaFpHVm1aV1JmTkRVdWNHNW5QMkkxWVdNaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRWlMQ0ptYVd4bElqb2lOVFl1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnRiMlIxYkdVdVpYaHdiM0owY3lBOUlGOWZkMlZpY0dGamExOXdkV0pzYVdOZmNHRjBhRjlmSUNzZ1hDSnBiV2N2Y0c5d2IxOHlZV1JsWm1Wa1h6UTFMbkJ1Wno4eVpETmxNR1JjSWp0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMM055WXk5amIyMXRiMjR2YVcxbkwzTnRhV3hsTDNCdmNHOWZNbUZrWldabFpGODBOUzV3Ym1kY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURVMlhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzU2XFxuXCIpO1xuXG4vKioqLyB9KSxcbi8qIDU3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFxcXCJpbWcvcG9wb18yYWRlZmVkXzQ2LnBuZz80YmM2YzRcXFwiOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZZMjl0Ylc5dUwybHRaeTl6Yldsc1pTOXdiM0J2WHpKaFpHVm1aV1JmTkRZdWNHNW5QekJqWWpFaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRWlMQ0ptYVd4bElqb2lOVGN1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnRiMlIxYkdVdVpYaHdiM0owY3lBOUlGOWZkMlZpY0dGamExOXdkV0pzYVdOZmNHRjBhRjlmSUNzZ1hDSnBiV2N2Y0c5d2IxOHlZV1JsWm1Wa1h6UTJMbkJ1Wno4MFltTTJZelJjSWp0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMM055WXk5amIyMXRiMjR2YVcxbkwzTnRhV3hsTDNCdmNHOWZNbUZrWldabFpGODBOaTV3Ym1kY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURVM1hHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzU3XFxuXCIpO1xuXG4vKioqLyB9KSxcbi8qIDU4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFxcXCJpbWcvcG9wb18yYWRlZmVkXzQ3LnBuZz9kZjI5NjNcXFwiOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZZMjl0Ylc5dUwybHRaeTl6Yldsc1pTOXdiM0J2WHpKaFpHVm1aV1JmTkRjdWNHNW5QMlUyTlRjaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRWlMQ0ptYVd4bElqb2lOVGd1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnRiMlIxYkdVdVpYaHdiM0owY3lBOUlGOWZkMlZpY0dGamExOXdkV0pzYVdOZmNHRjBhRjlmSUNzZ1hDSnBiV2N2Y0c5d2IxOHlZV1JsWm1Wa1h6UTNMbkJ1Wno5a1pqSTVOak5jSWp0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMM055WXk5amIyMXRiMjR2YVcxbkwzTnRhV3hsTDNCdmNHOWZNbUZrWldabFpGODBOeTV3Ym1kY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURVNFhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzU4XFxuXCIpO1xuXG4vKioqLyB9KSxcbi8qIDU5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFxcXCJpbWcvcG9wb18yYWRlZmVkXzQ4LnBuZz9kMWM0NmVcXFwiOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZZMjl0Ylc5dUwybHRaeTl6Yldsc1pTOXdiM0J2WHpKaFpHVm1aV1JmTkRndWNHNW5QelU1WVRRaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRWlMQ0ptYVd4bElqb2lOVGt1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnRiMlIxYkdVdVpYaHdiM0owY3lBOUlGOWZkMlZpY0dGamExOXdkV0pzYVdOZmNHRjBhRjlmSUNzZ1hDSnBiV2N2Y0c5d2IxOHlZV1JsWm1Wa1h6UTRMbkJ1Wno5a01XTTBObVZjSWp0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMM055WXk5amIyMXRiMjR2YVcxbkwzTnRhV3hsTDNCdmNHOWZNbUZrWldabFpGODBPQzV3Ym1kY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURVNVhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzU5XFxuXCIpO1xuXG4vKioqLyB9KSxcbi8qIDYwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFxcXCJpbWcvcG9wb18yYWRlZmVkXzQ5LnBuZz84NzFlMThcXFwiOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZZMjl0Ylc5dUwybHRaeTl6Yldsc1pTOXdiM0J2WHpKaFpHVm1aV1JmTkRrdWNHNW5Qemt4WVdFaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRWlMQ0ptYVd4bElqb2lOakF1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnRiMlIxYkdVdVpYaHdiM0owY3lBOUlGOWZkMlZpY0dGamExOXdkV0pzYVdOZmNHRjBhRjlmSUNzZ1hDSnBiV2N2Y0c5d2IxOHlZV1JsWm1Wa1h6UTVMbkJ1Wno4NE56RmxNVGhjSWp0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMM055WXk5amIyMXRiMjR2YVcxbkwzTnRhV3hsTDNCdmNHOWZNbUZrWldabFpGODBPUzV3Ym1kY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURZd1hHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzYwXFxuXCIpO1xuXG4vKioqLyB9KSxcbi8qIDYxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFxcXCJpbWcvcG9wb18yYWRlZmVkXzUwLnBuZz80ODljOTNcXFwiOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZZMjl0Ylc5dUwybHRaeTl6Yldsc1pTOXdiM0J2WHpKaFpHVm1aV1JmTlRBdWNHNW5QelV3TkRFaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRWlMQ0ptYVd4bElqb2lOakV1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnRiMlIxYkdVdVpYaHdiM0owY3lBOUlGOWZkMlZpY0dGamExOXdkV0pzYVdOZmNHRjBhRjlmSUNzZ1hDSnBiV2N2Y0c5d2IxOHlZV1JsWm1Wa1h6VXdMbkJ1Wno4ME9EbGpPVE5jSWp0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMM055WXk5amIyMXRiMjR2YVcxbkwzTnRhV3hsTDNCdmNHOWZNbUZrWldabFpGODFNQzV3Ym1kY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURZeFhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzYxXFxuXCIpO1xuXG4vKioqLyB9KSxcbi8qIDYyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuZXZhbChcIlxcblxcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcXFwiX19lc01vZHVsZVxcXCIsIHtcXG4gIHZhbHVlOiB0cnVlXFxufSk7XFxuXFxudmFyIF9jb3JlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcXG5cXG52YXIgX3N3aXBlciA9IF9fd2VicGFja19yZXF1aXJlX18oNjMpO1xcblxcbnZhciBfc3dpcGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3N3aXBlcik7XFxuXFxuX193ZWJwYWNrX3JlcXVpcmVfXyg2NCk7XFxuXFxuX193ZWJwYWNrX3JlcXVpcmVfXyg2Nik7XFxuXFxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cXG5cXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9IGVsc2UgeyByZXR1cm4gQXJyYXkuZnJvbShhcnIpOyB9IH1cXG5cXG5leHBvcnRzLmRlZmF1bHQgPSBfY29yZS5FdmVudC5leHRlbmQoe1xcbiAgaW5pdDogZnVuY3Rpb24gaW5pdChwcm9wcykge1xcbiAgICB0aGlzLl9zdXBlcigpO1xcblxcbiAgICBwcm9wcyA9IE9iamVjdC5hc3NpZ24oe30sIHsgY29udGFpbmVyOiAnJywgcGFkZGluZzogJzAlJywgYm90dG9tOiAnLTIzJScgfSwgcHJvcHMpO1xcblxcbiAgICB0aGlzLm9wdGlvbnMgPSBwcm9wcztcXG4gICAgLy9kZWJ1Z2dlcjtcXG5cXG4gICAgdGhpcy5lbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NtaWxlLXBhbmVsJyk7XFxuICAgIHRoaXMuX2RlbGF5X2hhbmRsZXMgPSBbXTtcXG4gICAgdGhpcy5faXR2X2NoZWNrO1xcbiAgICB0aGlzLnVpZCA9IChNYXRoLnJhbmRvbSgpICsgJycpLnNsaWNlKDIpO1xcblxcbiAgICB0aGlzLnN3aXBlcl9jbHMgPSAnc3dpcGVyLXVpZCcgKyB0aGlzLnVpZDtcXG4gICAgdGhpcy5zd2lwZXJfcGFnaW5hdGlvbl9jbHMgPSAnc3dpcGVyLXBhZ2luYXRpb24tdWlkJyArIHRoaXMudWlkO1xcblxcbiAgICB0aGlzLl9jcmVhdGVDaGlsZCgpO1xcblxcbiAgICAkKHByb3BzLmNvbnRhaW5lcikuYXBwZW5kKHRoaXMuZWwpO1xcblxcbiAgICB0aGlzLl9jcmVhdGVTbWlsZSgpO1xcblxcbiAgICB0aGlzLl9hcHBseVN3aXBlcigpO1xcblxcbiAgICAvL3RoaXMuaGlkZSgpO1xcblxcbiAgICB0aGlzLl9jaGVja0RlbGF5SGFuZGxlKCk7XFxuXFxuICAgIHJldHVybiB0aGlzO1xcbiAgfSxcXG4gIGhpZGU6IGZ1bmN0aW9uIGhpZGUoKSB7XFxuICAgIHRoaXMuZWwuc3R5bGUuZGlzcGxheSA9ICdub25lJztcXG4gICAgLy9jb25zb2xlLmxvZyh0aGlzLmVsKTtcXG4gIH0sXFxuICBzaG93OiBmdW5jdGlvbiBzaG93KCkge1xcbiAgICB0aGlzLmVsLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xcbiAgICAvL2NvbnNvbGUubG9nKHRoaXMuZWwpO1xcbiAgfSxcXG4gIF9hcHBseVN3aXBlcjogZnVuY3Rpb24gX2FwcGx5U3dpcGVyKCkge1xcbiAgICB2YXIgYm90dG9tID0gdGhpcy5vcHRpb25zLmJvdHRvbTtcXG5cXG4gICAgdHJ5IHtcXG4gICAgICBuZXcgX3N3aXBlcjIuZGVmYXVsdCgnLicgKyB0aGlzLnN3aXBlcl9jbHMsIHtcXG4gICAgICAgIHBhZ2luYXRpb246ICcuJyArIHRoaXMuc3dpcGVyX3BhZ2luYXRpb25fY2xzLFxcbiAgICAgICAgb25TbGlkZUNoYW5nZUVuZDogZnVuY3Rpb24gb25TbGlkZUNoYW5nZUVuZChzd2lwZXIpIHtcXG5cXG4gICAgICAgICAgLy9jb25zb2xlLmxvZyhzd2lwZXIuYWN0aXZlSW5kZXgpO1xcbiAgICAgICAgfSxcXG4gICAgICAgIG9uUGFnaW5hdGlvblJlbmRlcmVkOiBmdW5jdGlvbiBvblBhZ2luYXRpb25SZW5kZXJlZChzd2lwZXIsIHBhZ2luYXRpb25Db250YWluZXIpIHtcXG4gICAgICAgICAgdmFyICRwYWdpbmF0aW9uID0gJChzd2lwZXIub3JpZ2luYWxQYXJhbXMucGFnaW5hdGlvbik7XFxuICAgICAgICAgICRwYWdpbmF0aW9uLmNzcyh7ICd0cmFuc2l0aW9uJzogJ25vbmUnLCBib3R0b206IGJvdHRvbSB9KTtcXG4gICAgICAgIH0sXFxuICAgICAgICBvbkluaXQ6IGZ1bmN0aW9uIG9uSW5pdChzd2lwZXIpIHtcXG5cXG4gICAgICAgICAgLy92YXIgZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHN3aXBlci5vcmlnaW5hbFBhcmFtcy5wYWdpbmF0aW9uKTtcXG4gICAgICAgICAgdmFyICRjb250YWluZXIgPSAkKHN3aXBlci5jb250YWluZXIpO1xcblxcbiAgICAgICAgICAkY29udGFpbmVyLmNzcyh7XFxuICAgICAgICAgICAgb3ZlcmZsb3c6ICd2aXNpYmxlJ1xcbiAgICAgICAgICAgIC8vb3ZlcmZsb3c6J2hpZGRlbidcXG4gICAgICAgICAgICAvLyxvdmVyZmxvd1k6J2F1dG8nXFxuICAgICAgICAgIH0pO1xcbiAgICAgICAgfVxcbiAgICAgIH0pO1xcbiAgICB9IGNhdGNoIChlKSB7XFxuICAgICAgYWxlcnQoZSk7XFxuICAgIH1cXG4gIH0sXFxuICBfYWRkRGVsYXlIYW5kbGU6IGZ1bmN0aW9uIF9hZGREZWxheUhhbmRsZSgpIHtcXG4gICAgdmFyIG1zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAzMzM7XFxuICAgIHZhciBoYW5kbGUgPSBhcmd1bWVudHNbMV07XFxuXFxuICAgIHRoaXMuX2RlbGF5X2hhbmRsZXMucHVzaCh7IG1zOiBtcywgaGFuZGxlOiBoYW5kbGUgfSk7XFxuICB9LFxcbiAgX2NoZWNrRGVsYXlIYW5kbGU6IGZ1bmN0aW9uIF9jaGVja0RlbGF5SGFuZGxlKCkge1xcbiAgICB2YXIgbXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDU2NjtcXG5cXG4gICAgdmFyIHRoYXQgPSB0aGlzO1xcbiAgICA7KGZ1bmN0aW9uIGNoZWNrKCkge1xcbiAgICAgIHRoYXQuX2l0dl9jaGVjayA9IHNldFRpbWVvdXQoY2hlY2ssIG1zKTtcXG4gICAgICBpZiAoIXRoYXQuX2RlbGF5X2hhbmRsZXMubGVuZ3RoKSByZXR1cm47XFxuICAgICAgdmFyIG8gPSB0aGF0Ll9kZWxheV9oYW5kbGVzLnNoaWZ0KCk7XFxuICAgICAgLy9jb25zb2xlLmxvZygnZGVsYXkjJyxoYW5kbGUpO1xcbiAgICAgIG8uaGFuZGxlLmNhbGwodGhhdCk7XFxuICAgIH0pKCk7XFxuICB9LFxcbiAgX2NyZWF0ZVNtaWxlOiBmdW5jdGlvbiBfY3JlYXRlU21pbGUoKSB7XFxuICAgIHZhciBfdGhpcyA9IHRoaXM7XFxuXFxuICAgIHZhciAkd3JhcHBlciA9IHRoaXMuZWwucXVlcnlTZWxlY3RvcignLnN3aXBlci13cmFwcGVyJyk7XFxuXFxuICAgIC8vZGVidWdnZXI7XFxuICAgIC8vIGNvbnN0IENPTkZJRyA9IHtcXG4gICAgLy8gXFx0VzozMCxIOjE1MDAsQ0VJTDo3LFJPVzozXFxuICAgIC8vIFxcdCxDTFNfU01JTEU6J3NtaWxlLW92bydcXG4gICAgLy8gXFx0LENMU19HUk9VUFM6J3NtaWxlLXBhbmVsX19ncm91cHMgc3dpcGVyLXNsaWRlJ1xcbiAgICAvLyB9XFxuICAgIHZhciBDT05GSUcgPSB7XFxuICAgICAgVzogMzAsIEg6IDE1MDAsIENFSUw6IDYsIFJPVzogMyxcXG4gICAgICBDTFNfU01JTEU6ICdzbWlsZS1vdm8nLFxcbiAgICAgIENMU19HUk9VUFM6ICdzbWlsZS1wYW5lbF9fZ3JvdXBzIHN3aXBlci1zbGlkZSdcXG4gICAgfTtcXG4gICAgQ09ORklHLkdST1VQUyA9IENPTkZJRy5DRUlMICogQ09ORklHLlJPVztcXG5cXG4gICAgdmFyIFRPVEFMID0gQ09ORklHLkggLyBDT05GSUcuVztcXG4gICAgdmFyIEdST1VQX05VTSA9IE1hdGguY2VpbChUT1RBTCAvIENPTkZJRy5HUk9VUFMpO1xcblxcbiAgICBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KEFycmF5KEdST1VQX05VTSkpKS5tYXAoZnVuY3Rpb24gKHYsIGkpIHtcXG5cXG4gICAgICB2YXIgdWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd1bCcpO1xcbiAgICAgICR3cmFwcGVyLmFwcGVuZENoaWxkKHVsKTtcXG4gICAgICAvL2NvbnNvbGUubG9nKCR3cmFwcGVyKTtcXG4gICAgICAvL2RlYnVnZ2VyO1xcbiAgICAgIHVsLmNsYXNzTmFtZSA9IENPTkZJRy5DTFNfR1JPVVBTO1xcbiAgICAgIC8vXFx0dWwuc3R5bGUucGFkZGluZyA9IHBhZGRpbmc7XFxuXFxuICAgICAgdmFyIHN0YXJ0X2kgPSBpICogQ09ORklHLkdST1VQUztcXG4gICAgICAvL2NvbnNvbGUubG9nKHN0YXJ0X2kpO1xcbiAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBDT05GSUcuUk9XOyBfaSsrKSB7XFxuICAgICAgICB2YXIgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcChqKSB7XFxuXFxuICAgICAgICAgIHZhciBsaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XFxuICAgICAgICAgIHZhciBjb3VudCA9IHN0YXJ0X2kgKyBfaSAqIENPTkZJRy5DRUlMICsgajtcXG4gICAgICAgICAgaWYgKGNvdW50ID49IFRPVEFMKSByZXR1cm4gJ2NvbnRpbnVlJztcXG5cXG4gICAgICAgICAgLy80OVxcbiAgICAgICAgICAvL2NvbnNvbGUubG9nKFRPVEFMLCAgY291bnQpO1xcbiAgICAgICAgICBsaS5zZXRBdHRyaWJ1dGUoJ2RhdGEtc21pbGUtaWR4JywgX2kgKyAnLCcgKyBqICsgJywnICsgY291bnQpO1xcbiAgICAgICAgICAvL2xpLnNldEF0dHJpYnV0ZSgndW5zZWxlY3RhYmxlJywnb24nKTsgXFxuICAgICAgICAgIHVsLmFwcGVuZENoaWxkKGxpKTtcXG4gICAgICAgICAgLy9saS5jbGFzc05hbWUgPSAnc21pbGUtb3ZvJztcXG4gICAgICAgICAgbGkuc3R5bGUuYmFja2dyb3VuZFBvc2l0aW9uID0gJzAgJyArIGNvdW50ICogQ09ORklHLlcgKiAtMSArICdweCc7XFxuICAgICAgICAgIE9iamVjdC5hc3NpZ24obGksIHsgc21pbGVfaWR4OiBjb3VudCB9KTtcXG5cXG4gICAgICAgICAgbGkuaXR2XztcXG5cXG4gICAgICAgICAgbGkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xcblxcbiAgICAgICAgICAgIF90aGlzLl9hZGREZWxheUhhbmRsZSgzMzMsIGZ1bmN0aW9uICgpIHtcXG4gICAgICAgICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xcblxcbiAgICAgICAgICAgICAgdmFyIG51bV9vZl9waWMgPSBjb3VudCArIDE7XFxuICAgICAgICAgICAgICBudW1fb2ZfcGljIDwgMTAgJiYgKG51bV9vZl9waWMgPSAnMCcgKyBudW1fb2ZfcGljKTtcXG4gICAgICAgICAgICAgIC8vXFx0Y29uc29sZS5sb2cobGksbnVtX29mX3BpYyk7XFxuICAgICAgICAgICAgICB2YXIgaW1nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XFxuICAgICAgICAgICAgICBpbWcuY2xhc3NOYW1lID0gQ09ORklHLkNMU19TTUlMRTtcXG4gICAgICAgICAgICAgIGltZy5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XFxuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczIudHJpZ2dlcigncGljaycsIHsgZWw6IGltZywgc21pbGVfaWR4OiBjb3VudCB9KTtcXG4gICAgICAgICAgICAgIH07XFxuXFxuICAgICAgICAgICAgICAvL0NhY2hlW2Bwb3BvXzJhZGVmZWRfJHtudW1fb2ZfcGljfS5wbmdgXVxcbiAgICAgICAgICAgICAgLy9pbWcuc3JjID0gYC4vc3JjL2NvbW1vbi9pbWcvcG9wb18yYWRlZmVkL3BvcG9fMmFkZWZlZF8ke251bV9vZl9waWN9LnBuZ2A7XFxuICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKENhY2hlKSxDYWNoZVtgLi9wb3BvXzJhZGVmZWRfJHtudW1fb2ZfcGljfS5wbmdgXTtcXG4gICAgICAgICAgICAgIGltZy5zcmMgPSBfY29yZS5DYWNoZVsnLi9wb3BvXzJhZGVmZWRfJyArIG51bV9vZl9waWMgKyAnLnBuZyddO1xcbiAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xcbiAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICB9KTtcXG4gICAgICAgIH07XFxuXFxuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IENPTkZJRy5DRUlMOyBqKyspIHtcXG4gICAgICAgICAgdmFyIF9yZXQgPSBfbG9vcChqKTtcXG5cXG4gICAgICAgICAgaWYgKF9yZXQgPT09ICdjb250aW51ZScpIGNvbnRpbnVlO1xcbiAgICAgICAgfVxcbiAgICAgIH1cXG4gICAgfSk7XFxuXFxuICAgIC8vNywzLDIxXFxuICB9LFxcbiAgX2NyZWF0ZUNoaWxkOiBmdW5jdGlvbiBfY3JlYXRlQ2hpbGQoKSB7XFxuXFxuICAgIHRoaXMuZWwuaW5uZXJIVE1MID0gJ1xcXFxuICAgICAgPGRpdiBjbGFzcz1cXFwic3dpcGVyLWNvbnRhaW5lciAnICsgdGhpcy5zd2lwZXJfY2xzICsgJ1xcXCI+XFxcXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcInN3aXBlci13cmFwcGVyXFxcIj5cXFxcbiAgICAgICAgXFxcXG4gICAgICAgIDwvZGl2PlxcXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzd2lwZXItcGFnaW5hdGlvbiAnICsgdGhpcy5zd2lwZXJfcGFnaW5hdGlvbl9jbHMgKyAnXFxcIj48L2Rpdj5cXFxcbiAgICAgIDwvZGl2PlxcXFxuICAgICc7XFxuICB9LFxcbiAgZWw6IG51bGxcXG59KTsvLyMgc291cmNlVVJMPVttb2R1bGVdXFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk4dkxpOXpjbU12YzIxcGJHVXVhbk0vWkRVMlpTSmRMQ0p1WVcxbGN5STZXeUpsZUhSbGJtUWlMQ0pwYm1sMElpd2ljSEp2Y0hNaUxDSmZjM1Z3WlhJaUxDSlBZbXBsWTNRaUxDSmhjM05wWjI0aUxDSmpiMjUwWVdsdVpYSWlMQ0p3WVdSa2FXNW5JaXdpWW05MGRHOXRJaXdpYjNCMGFXOXVjeUlzSW1Wc0lpd2laRzlqZFcxbGJuUWlMQ0pqY21WaGRHVkZiR1Z0Wlc1MElpd2lYMlJsYkdGNVgyaGhibVJzWlhNaUxDSmZhWFIyWDJOb1pXTnJJaXdpZFdsa0lpd2lUV0YwYUNJc0luSmhibVJ2YlNJc0luTnNhV05sSWl3aWMzZHBjR1Z5WDJOc2N5SXNJbk4zYVhCbGNsOXdZV2RwYm1GMGFXOXVYMk5zY3lJc0lsOWpjbVZoZEdWRGFHbHNaQ0lzSWlRaUxDSmhjSEJsYm1RaUxDSmZZM0psWVhSbFUyMXBiR1VpTENKZllYQndiSGxUZDJsd1pYSWlMQ0pmWTJobFkydEVaV3hoZVVoaGJtUnNaU0lzSW1ocFpHVWlMQ0p6ZEhsc1pTSXNJbVJwYzNCc1lYa2lMQ0p6YUc5M0lpd2ljR0ZuYVc1aGRHbHZiaUlzSW05dVUyeHBaR1ZEYUdGdVoyVkZibVFpTENKemQybHdaWElpTENKdmJsQmhaMmx1WVhScGIyNVNaVzVrWlhKbFpDSXNJbkJoWjJsdVlYUnBiMjVEYjI1MFlXbHVaWElpTENJa2NHRm5hVzVoZEdsdmJpSXNJbTl5YVdkcGJtRnNVR0Z5WVcxeklpd2lZM056SWl3aWIyNUpibWwwSWl3aUpHTnZiblJoYVc1bGNpSXNJbTkyWlhKbWJHOTNJaXdpWlNJc0ltRnNaWEowSWl3aVgyRmtaRVJsYkdGNVNHRnVaR3hsSWl3aWJYTWlMQ0pvWVc1a2JHVWlMQ0p3ZFhOb0lpd2lkR2hoZENJc0ltTm9aV05ySWl3aWMyVjBWR2x0Wlc5MWRDSXNJbXhsYm1kMGFDSXNJbThpTENKemFHbG1kQ0lzSW1OaGJHd2lMQ0lrZDNKaGNIQmxjaUlzSW5GMVpYSjVVMlZzWldOMGIzSWlMQ0pEVDA1R1NVY2lMQ0pYSWl3aVNDSXNJa05GU1V3aUxDSlNUMWNpTENKRFRGTmZVMDFKVEVVaUxDSkRURk5mUjFKUFZWQlRJaXdpUjFKUFZWQlRJaXdpVkU5VVFVd2lMQ0pIVWs5VlVGOU9WVTBpTENKalpXbHNJaXdpUVhKeVlYa2lMQ0p0WVhBaUxDSjJJaXdpYVNJc0luVnNJaXdpWVhCd1pXNWtRMmhwYkdRaUxDSmpiR0Z6YzA1aGJXVWlMQ0p6ZEdGeWRGOXBJaXdpYWlJc0lteHBJaXdpWTI5MWJuUWlMQ0p6WlhSQmRIUnlhV0oxZEdVaUxDSmlZV05yWjNKdmRXNWtVRzl6YVhScGIyNGlMQ0p6Yldsc1pWOXBaSGdpTENKcGRIWmZJaXdpWVdSa1JYWmxiblJNYVhOMFpXNWxjaUlzSW01MWJWOXZabDl3YVdNaUxDSnBiV2NpTENKdmJteHZZV1FpTENKMGNtbG5aMlZ5SWl3aWMzSmpJaXdpY0hKbGRtVnVkRVJsWm1GMWJIUWlMQ0pwYm01bGNraFVUVXdpWFN3aWJXRndjR2x1WjNNaU9pSTdPenM3T3p0QlFVRkJPenRCUVVWQk96czdPMEZCUTBFN08wRkJRMEU3T3pzN096dHJRa0ZIWlN4WlFVRk5RU3hOUVVGT0xFTkJRV0U3UVVGRE1VSkRMRTFCUkRCQ0xHZENRVU55UWtNc1MwRkVjVUlzUlVGRFpqdEJRVU5VTEZOQlFVdERMRTFCUVV3N08wRkJSVUZFTEZsQlFWRkZMRTlCUVU5RExFMUJRVkFzUTBGQll5eEZRVUZrTEVWQlFXbENMRVZCUVVORExGZEJRVlVzUlVGQldDeEZRVUZqUXl4VFFVRlJMRWxCUVhSQ0xFVkJRVEpDUXl4UlFVRlBMRTFCUVd4RExFVkJRV3BDTEVWQlFUSkVUaXhMUVVFelJDeERRVUZTT3p0QlFVVkJMRk5CUVV0UExFOUJRVXdzUjBGQlpWQXNTMEZCWmp0QlFVTkJPenRCUVVWQkxGTkJRVXRSTEVWQlFVd3NSMEZCVlVNc1UwRkJVME1zWVVGQlZDeERRVUYxUWl4aFFVRjJRaXhEUVVGV08wRkJRMEVzVTBGQlMwTXNZMEZCVEN4SFFVRnpRaXhGUVVGMFFqdEJRVU5CTEZOQlFVdERMRlZCUVV3N1FVRkRRU3hUUVVGTFF5eEhRVUZNTEVkQlFWY3NRMEZCUTBNc1MwRkJTME1zVFVGQlRDeExRVUZqTEVWQlFXWXNSVUZCYlVKRExFdEJRVzVDTEVOQlFYbENMRU5CUVhwQ0xFTkJRVmc3TzBGQlJVRXNVMEZCUzBNc1ZVRkJUQ3hyUWtGQkswSXNTMEZCUzBvc1IwRkJjRU03UVVGRFFTeFRRVUZMU3l4eFFrRkJUQ3cyUWtGQmNVUXNTMEZCUzB3c1IwRkJNVVE3TzBGQlJVRXNVMEZCUzAwc1dVRkJURHM3UVVGRlFVTXNUVUZCUlhCQ0xFMUJRVTFKTEZOQlFWSXNSVUZCYlVKcFFpeE5RVUZ1UWl4RFFVRXdRaXhMUVVGTFlpeEZRVUV2UWpzN1FVRkZRU3hUUVVGTFl5eFpRVUZNT3p0QlFVVkJMRk5CUVV0RExGbEJRVXc3TzBGQlJVRTdPMEZCUlVFc1UwRkJTME1zYVVKQlFVdzdPMEZCUlVFc1YwRkJUeXhKUVVGUU8wRkJSVVFzUjBFdlFubENPMEZCWjBONlFrTXNUVUZvUTNsQ0xHdENRV2REYmtJN1FVRkRUQ3hUUVVGTGFrSXNSVUZCVEN4RFFVRlJhMElzUzBGQlVpeERRVUZqUXl4UFFVRmtMRWRCUVhkQ0xFMUJRWGhDTzBGQlEwRTdRVUZEUkN4SFFXNURlVUk3UVVGdlEzcENReXhOUVhCRGVVSXNhMEpCYjBOdVFqdEJRVU5NTEZOQlFVdHdRaXhGUVVGTUxFTkJRVkZyUWl4TFFVRlNMRU5CUVdORExFOUJRV1FzUjBGQmQwSXNUMEZCZUVJN1FVRkRRVHRCUVVORUxFZEJka041UWp0QlFYZERla0pLTEdOQmVFTjVRaXd3UWtGM1ExZzdRVUZCUVN4UlFVTlNha0lzVFVGRVVTeEhRVU5GTEV0QlFVdERMRTlCUkZBc1EwRkRVa1FzVFVGRVVUczdRVUZGWWl4UlFVRkhPMEZCUTBRc01rSkJRVmNzVFVGQlNTeExRVUZMVnl4VlFVRndRaXhGUVVGblF6dEJRVU01UWxrc2IwSkJRV0VzVFVGQlNTeExRVUZMV0N4eFFrRkVVVHRCUVVVM1Fsa3NNRUpCUVd0Q0xEQkNRVUZUUXl4TlFVRlVMRVZCUVdkQ096dEJRVVZxUXp0QlFVTkVMRk5CVERaQ08wRkJUVGRDUXl3NFFrRkJjVUlzT0VKQlFWTkVMRTFCUVZRc1JVRkJhVUpGTEcxQ1FVRnFRaXhGUVVGeFF6dEJRVU42UkN4alFVRkpReXhqUVVGalpDeEZRVUZGVnl4UFFVRlBTU3hqUVVGUUxFTkJRWE5DVGl4VlFVRjRRaXhEUVVGc1FqdEJRVU5CU3l4elFrRkJXVVVzUjBGQldpeERRVUZuUWl4RlFVRkRMR05CUVdFc1RVRkJaQ3hGUVVGelFqbENMR05CUVhSQ0xFVkJRV2hDTzBGQlJVUXNVMEZXTmtJN1FVRlhOMElyUWl4blFrRkJVU3huUWtGQlUwNHNUVUZCVkN4RlFVRm5RanM3UVVGSGRrSTdRVUZEUVN4alFVRkpUeXhoUVVGaGJFSXNSVUZCUlZjc1QwRkJUek5DTEZOQlFWUXNRMEZCYWtJN08wRkJSVUZyUXl4eFFrRkJWMFlzUjBGQldDeERRVUZsTzBGQlEySkhMSE5DUVVGVE8wRkJRMVE3UVVGRFFUdEJRVWhoTEZkQlFXWTdRVUZOUkR0QlFYWkNOa0lzVDBGQmFFTTdRVUY1UWtRc1MwRXhRa1FzUTBFd1FrTXNUMEZCVFVNc1EwRkJUaXhGUVVGUk8wRkJRMUJETEZsQlFVMUVMRU5CUVU0N1FVRkRSRHRCUVVWR0xFZEJlRVY1UWp0QlFYbEZla0pGTEdsQ1FYcEZlVUlzTmtKQmVVVkxPMEZCUVVFc1VVRkJaRU1zUlVGQll5eDFSVUZCV0N4SFFVRlhPMEZCUVVFc1VVRkJVRU1zVFVGQlR6czdRVUZETjBJc1UwRkJTMnBETEdOQlFVd3NRMEZCYjBKclF5eEpRVUZ3UWl4RFFVRjVRaXhGUVVGRFJpeE5RVUZFTEVWQlFVbERMR05CUVVvc1JVRkJla0k3UVVGRlJDeEhRVFZGZVVJN1FVRTJSWHBDY0VJc2JVSkJOMFY1UWl3clFrRTJSVUU3UVVGQlFTeFJRVUZRYlVJc1JVRkJUeXgxUlVGQlNpeEhRVUZKT3p0QlFVTjRRaXhSUVVGSlJ5eFBRVUZQTEVsQlFWZzdRVUZEUVN4TFFVRkRMRU5CUVVNc1UwRkJVME1zUzBGQlZDeEhRVUZuUWp0QlFVTm9Ra1FzVjBGQlMyeERMRlZCUVV3c1IwRkJhMEp2UXl4WFFVRlhSQ3hMUVVGWUxFVkJRV2xDU2l4RlFVRnFRaXhEUVVGc1FqdEJRVU5CTEZWQlFVY3NRMEZCUTBjc1MwRkJTMjVETEdOQlFVd3NRMEZCYjBKelF5eE5RVUY0UWl4RlFVRm5RenRCUVVOb1F5eFZRVUZKUXl4SlFVRkpTaXhMUVVGTGJrTXNZMEZCVEN4RFFVRnZRbmRETEV0QlFYQkNMRVZCUVZJN1FVRkRRVHRCUVVOQlJDeFJRVUZGVGl4TlFVRkdMRU5CUVZOUkxFbEJRVlFzUTBGQlkwNHNTVUZCWkR0QlFVVkVMRXRCVUVFN1FVRlRSaXhIUVhoR2VVSTdRVUY1Um5wQ2VFSXNZMEY2Um5sQ0xEQkNRWGxHV0R0QlFVRkJPenRCUVVOaUxGRkJRVWtyUWl4WFFVRlhMRXRCUVVzM1F5eEZRVUZNTEVOQlFWRTRReXhoUVVGU0xFTkJRWE5DTEdsQ1FVRjBRaXhEUVVGbU96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxGRkJRVTFETEZOQlFWTTdRVUZEWWtNc1UwRkJSU3hGUVVSWExFVkJRMUpETEVkQlFVVXNTVUZFVFN4RlFVTkVReXhOUVVGTExFTkJSRW9zUlVGRFRVTXNTMEZCU1N4RFFVUldPMEZCUlZwRExHbENRVUZWTEZkQlJrVTdRVUZIV2tNc2EwSkJRVmM3UVVGSVF5eExRVUZtTzBGQlMwRk9MRmRCUVU5UExFMUJRVkFzUjBGQlowSlFMRTlCUVU5SExFbEJRVkFzUjBGQldVZ3NUMEZCVDBrc1IwRkJia003TzBGQlJVRXNVVUZCVFVrc1VVRkJVVklzVDBGQlQwVXNRMEZCVUN4SFFVRlRSaXhQUVVGUFF5eERRVUU1UWp0QlFVTkJMRkZCUVUxUkxGbEJRVmxzUkN4TFFVRkxiVVFzU1VGQlRDeERRVUZWUml4UlFVRlJVaXhQUVVGUFR5eE5RVUY2UWl4RFFVRnNRanM3UVVGRlFTeHBRMEZCU1Vrc1RVRkJUVVlzVTBGQlRpeERRVUZLTEVkQlFYTkNSeXhIUVVGMFFpeERRVUV3UWl4VlFVRkRReXhEUVVGRUxFVkJRVWRETEVOQlFVZ3NSVUZCVHpzN1FVRkZMMElzVlVGQlNVTXNTMEZCU3pkRUxGTkJRVk5ETEdGQlFWUXNRMEZCZFVJc1NVRkJka0lzUTBGQlZEdEJRVU5CTWtNc1pVRkJVMnRDTEZkQlFWUXNRMEZCY1VKRUxFVkJRWEpDTzBGQlEwRTdRVUZEUVR0QlFVTkJRU3hUUVVGSFJTeFRRVUZJTEVkQlFXVnFRaXhQUVVGUFRTeFZRVUYwUWp0QlFVTkdPenRCUVVWRkxGVkJRVWxaTEZWQlFWVktMRWxCUVVWa0xFOUJRVTlQTEUxQlFYWkNPMEZCUTBFN1FVRkRRU3hYUVVGSkxFbEJRVWxQTEV0QlFVa3NRMEZCV2l4RlFVRmpRU3hMUVVGRlpDeFBRVUZQU1N4SFFVRjJRaXhGUVVFeVFsVXNTVUZCTTBJc1JVRkJLMEk3UVVGQlFTeHRRMEZEY2tKTExFTkJSSEZDT3p0QlFVY3pRaXhqUVVGSlF5eExRVUZMYkVVc1UwRkJVME1zWVVGQlZDeERRVUYxUWl4SlFVRjJRaXhEUVVGVU8wRkJRMEVzWTBGQlNXdEZMRkZCUVZGSUxGVkJRVlZLTEV0QlFVVmtMRTlCUVU5SExFbEJRVzVDTEVkQlFYZENaMElzUTBGQmNFTTdRVUZEUVN4alFVRkhSU3hUUVVGVFlpeExRVUZhTEVWQlFXMUNPenRCUVVWdVFqdEJRVU5CTzBGQlEwRlpMR0ZCUVVkRkxGbEJRVWdzUTBGQlowSXNaMEpCUVdoQ0xFVkJRVzlEVWl4RlFVRndReXhUUVVGNVEwc3NRMEZCZWtNc1UwRkJPRU5GTEV0QlFUbERPMEZCUTBFN1FVRkRRVTRzWVVGQlIwTXNWMEZCU0N4RFFVRmxTU3hGUVVGbU8wRkJRMEU3UVVGRFFVRXNZVUZCUjJwRUxFdEJRVWdzUTBGQlUyOUVMR3RDUVVGVUxGVkJRVzFEUml4UlFVRk5ja0lzVDBGQlQwTXNRMEZCWWl4SFFVRmxMRU5CUVVNc1EwRkJia1E3UVVGRFFYUkVMR2xDUVVGUFF5eE5RVUZRTEVOQlFXTjNSU3hGUVVGa0xFVkJRV2xDTEVWQlFVTkpMRmRCUVZWSUxFdEJRVmdzUlVGQmFrSTdPMEZCUjBGRUxHRkJRVWRMTEVsQlFVZzdPMEZCUlVGTUxHRkJRVWROTEdkQ1FVRklMRU5CUVc5Q0xFOUJRWEJDTEVWQlFUUkNMRlZCUVVONlF5eERRVUZFTEVWQlFVczdPMEZCUlM5Q0xHdENRVUZMUlN4bFFVRk1MRU5CUVhGQ0xFZEJRWEpDTEVWQlFYbENMRmxCUVZVN1FVRkJRVHM3UVVGRGFrTXNhMEpCUVVsM1F5eGhRVUZoVGl4UlFVRk5MRU5CUVhaQ08wRkJRMEZOTERKQ1FVRlhMRVZCUVZnc1MwRkJaMEpCTEdGQlFWY3NUVUZCU1VFc1ZVRkJMMEk3UVVGRFJqdEJRVU5GTEd0Q1FVRkpReXhOUVVGTk1VVXNVMEZCVTBNc1lVRkJWQ3hEUVVGMVFpeExRVUYyUWl4RFFVRldPMEZCUTBGNVJTeHJRa0ZCU1Znc1UwRkJTaXhIUVVGcFFtcENMRTlCUVU5TExGTkJRWGhDTzBGQlEwRjFRaXhyUWtGQlNVTXNUVUZCU2l4SFFVRmhPMEZCUVVFc2RVSkJRVXNzVDBGQlMwTXNUMEZCVEN4RFFVRmhMRTFCUVdJc1JVRkJiMElzUlVGQlF6ZEZMRWxCUVVjeVJTeEhRVUZLTEVWQlFWRktMRmRCUVZWSUxFdEJRV3hDTEVWQlFYQkNMRU5CUVV3N1FVRkJRU3hsUVVGaU96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJUeXhyUWtGQlNVY3NSMEZCU2l4SFFVRlZMR2REUVVGM1Frb3NWVUZCZUVJc1ZVRkJWanRCUVVOQk1VTXNaMEpCUVVVclF5eGpRVUZHTzBGQlJVUXNZVUZrUkR0QlFXbENSQ3hYUVc1Q1JEdEJRVzVDTWtJN08wRkJRemRDTEdGQlFVa3NTVUZCU1dJc1NVRkJTU3hEUVVGYUxFVkJRV05CTEVsQlFVVnVRaXhQUVVGUFJ5eEpRVUYyUWl4RlFVRTBRbWRDTEVkQlFUVkNMRVZCUVdkRE8wRkJRVUVzTWtKQlFYaENRU3hEUVVGM1FqczdRVUZCUVN4dFEwRkpXRHRCUVcxRGNFSTdRVUZEUmp0QlFVVkdMRXRCZEVSRU96dEJRWGRFUVR0QlFVTkVMRWRCY2t0NVFqdEJRWE5MZWtKMlJDeGpRWFJMZVVJc01FSkJjMHRZT3p0QlFVVmlMRk5CUVV0WUxFVkJRVXdzUTBGQlVXZEdMRk5CUVZJc05rTkJRMmxETEV0QlFVdDJSU3hWUVVSMFF5eHJTRUZMYjBNc1MwRkJTME1zY1VKQlRIcERPMEZCVVVRc1IwRm9USGxDTzBGQmFVeDZRbFlzVFVGQlJ6dEJRV3BNYzBJc1EwRkJZaXhESWl3aVptbHNaU0k2SWpZeUxtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpYVcxd2IzSjBJSHRGZG1WdWRDeERZV05vWlgwZ1puSnZiU0FuTGk5amIzSmxKenRjY2x4dVhISmNibWx0Y0c5eWRDQlRkMmx3WlhJZ1puSnZiU0FuTGk5emQybHdaWEl1YldsdUp6dGNjbHh1YVcxd2IzSjBJQ2N1TDNOM2FYQmxjaTV0YVc0dVkzTnpKenRjY2x4dWFXMXdiM0owSUNjdUwzTnRhV3hsTG14bGMzTW5PMXh5WEc1Y2NseHVYSEpjYm1WNGNHOXlkQ0JrWldaaGRXeDBJRVYyWlc1MExtVjRkR1Z1WkNoN1hISmNiaUFnYVc1cGRDaHdjbTl3Y3lsN1hISmNiaUFnSUNCMGFHbHpMbDl6ZFhCbGNpZ3BPMXh5WEc1Y2NseHVJQ0FnSUhCeWIzQnpJRDBnVDJKcVpXTjBMbUZ6YzJsbmJpaDdmU3g3WTI5dWRHRnBibVZ5T2ljbkxIQmhaR1JwYm1jNkp6QWxKeXhpYjNSMGIyMDZKeTB5TXlVbmZTeHdjbTl3Y3lrN1hISmNibHh5WEc0Z0lDQWdkR2hwY3k1dmNIUnBiMjV6SUQwZ2NISnZjSE03WEhKY2JpQWdJQ0F2TDJSbFluVm5aMlZ5TzF4eVhHNWNjbHh1SUNBZ0lIUm9hWE11Wld3Z1BTQmtiMk4xYldWdWRDNWpjbVZoZEdWRmJHVnRaVzUwS0NkemJXbHNaUzF3WVc1bGJDY3BPMXh5WEc0Z0lDQWdkR2hwY3k1ZlpHVnNZWGxmYUdGdVpHeGxjeUE5SUZ0ZE8xeHlYRzRnSUNBZ2RHaHBjeTVmYVhSMlgyTm9aV05yTzF4eVhHNGdJQ0FnZEdocGN5NTFhV1FnUFNBb1RXRjBhQzV5WVc1a2IyMG9LU3NuSnlrdWMyeHBZMlVvTWlrN1hISmNiaUFnSUNCY2NseHVJQ0FnSUhSb2FYTXVjM2RwY0dWeVgyTnNjeUE5SUdCemQybHdaWEl0ZFdsa0pIdDBhR2x6TG5WcFpIMWdPMXh5WEc0Z0lDQWdkR2hwY3k1emQybHdaWEpmY0dGbmFXNWhkR2x2Ymw5amJITWdQU0JnYzNkcGNHVnlMWEJoWjJsdVlYUnBiMjR0ZFdsa0pIdDBhR2x6TG5WcFpIMWdPMXh5WEc1Y2NseHVJQ0FnSUhSb2FYTXVYMk55WldGMFpVTm9hV3hrS0NrN1hISmNibHh5WEc0Z0lDQWdKQ2h3Y205d2N5NWpiMjUwWVdsdVpYSXBMbUZ3Y0dWdVpDaDBhR2x6TG1Wc0tWeHlYRzVjY2x4dUlDQWdJSFJvYVhNdVgyTnlaV0YwWlZOdGFXeGxLQ2s3WEhKY2JseHlYRzRnSUNBZ2RHaHBjeTVmWVhCd2JIbFRkMmx3WlhJb0tUdGNjbHh1SUNBZ0lGeHlYRzRnSUNBZ0x5OTBhR2x6TG1ocFpHVW9LVHRjY2x4dVhISmNiaUFnSUNCMGFHbHpMbDlqYUdWamEwUmxiR0Y1U0dGdVpHeGxLQ2s3WEhKY2JseHlYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTTdYSEpjYmx4eVhHNGdJSDFjY2x4dUlDQXNhR2xrWlNncGUxeHlYRzRnSUNBZ2RHaHBjeTVsYkM1emRIbHNaUzVrYVhOd2JHRjVJRDBnSjI1dmJtVW5PMXh5WEc0Z0lDQWdMeTlqYjI1emIyeGxMbXh2WnloMGFHbHpMbVZzS1R0Y2NseHVJQ0I5WEhKY2JpQWdMSE5vYjNjb0tYdGNjbHh1SUNBZ0lIUm9hWE11Wld3dWMzUjViR1V1WkdsemNHeGhlU0E5SUNkaWJHOWpheWM3WEhKY2JpQWdJQ0F2TDJOdmJuTnZiR1V1Ykc5bktIUm9hWE11Wld3cE8xeHlYRzRnSUgxY2NseHVJQ0FzWDJGd2NHeDVVM2RwY0dWeUtDbDdYSEpjYmlBZ0lDQjJZWElnZTJKdmRIUnZiWDBnUFNCMGFHbHpMbTl3ZEdsdmJuTTdYSEpjYmlBZ0lDQjBjbmw3WEhKY2JpQWdJQ0FnSUc1bGR5QlRkMmx3WlhJb0p5NG5LM1JvYVhNdWMzZHBjR1Z5WDJOc2N5d2dlMXh5WEc0Z0lDQWdJQ0FnSUhCaFoybHVZWFJwYjI0Z09pQW5MaWNyZEdocGN5NXpkMmx3WlhKZmNHRm5hVzVoZEdsdmJsOWpiSE5jY2x4dUlDQWdJQ0FnSUNBc2IyNVRiR2xrWlVOb1lXNW5aVVZ1WkRvZ1puVnVZM1JwYjI0b2MzZHBjR1Z5S1h0Y2NseHVJQ0FnSUNBZ0lDQWdJRnh5WEc0Z0lDQWdJQ0FnSUNBZ0x5OWpiMjV6YjJ4bExteHZaeWh6ZDJsd1pYSXVZV04wYVhabFNXNWtaWGdwTzF4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0FzYjI1UVlXZHBibUYwYVc5dVVtVnVaR1Z5WldRNlpuVnVZM1JwYjI0b2MzZHBjR1Z5TENCd1lXZHBibUYwYVc5dVEyOXVkR0ZwYm1WeUtYdGNjbHh1SUNBZ0lDQWdJQ0FnSUhaaGNpQWtjR0ZuYVc1aGRHbHZiaUE5SUNRb2MzZHBjR1Z5TG05eWFXZHBibUZzVUdGeVlXMXpMbkJoWjJsdVlYUnBiMjRwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdKSEJoWjJsdVlYUnBiMjR1WTNOektIc25kSEpoYm5OcGRHbHZiaWM2SjI1dmJtVW5MQ0JpYjNSMGIyMTlLVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUN4dmJrbHVhWFE2SUdaMWJtTjBhVzl1S0hOM2FYQmxjaWw3WEhKY2JpQWdJQ0FnSUNBZ0lDQmNjbHh1SUNBZ0lDQWdJQ0FnSUZ4eVhHNGdJQ0FnSUNBZ0lDQWdMeTkyWVhJZ1pXd2dQU0JrYjJOMWJXVnVkQzV4ZFdWeWVWTmxiR1ZqZEc5eUtITjNhWEJsY2k1dmNtbG5hVzVoYkZCaGNtRnRjeTV3WVdkcGJtRjBhVzl1S1R0Y2NseHVJQ0FnSUNBZ0lDQWdJSFpoY2lBa1kyOXVkR0ZwYm1WeUlEMGdKQ2h6ZDJsd1pYSXVZMjl1ZEdGcGJtVnlLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lGeHlYRzRnSUNBZ0lDQWdJQ0FnSkdOdmJuUmhhVzVsY2k1amMzTW9lMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnZkbVZ5Wm14dmR6b25kbWx6YVdKc1pTZGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OXZkbVZ5Wm14dmR6b25hR2xrWkdWdUoxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5eHZkbVZ5Wm14dmQxazZKMkYxZEc4blhISmNiaUFnSUNBZ0lDQWdJQ0I5S1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNCOUtWeHlYRzRnSUNBZ2ZXTmhkR05vS0dVcGUxeHlYRzRnSUNBZ0lDQmhiR1Z5ZENobEtUdGNjbHh1SUNBZ0lIMWNjbHh1SUNBZ0lDQmNjbHh1SUNCOVhISmNiaUFnTEY5aFpHUkVaV3hoZVVoaGJtUnNaU2h0Y3owek16TXNhR0Z1Wkd4bEtYdGNjbHh1SUNBZ0lIUm9hWE11WDJSbGJHRjVYMmhoYm1Sc1pYTXVjSFZ6YUNoN2JYTXNhR0Z1Wkd4bGZTazdYSEpjYmx4eVhHNGdJSDFjY2x4dUlDQXNYMk5vWldOclJHVnNZWGxJWVc1a2JHVW9iWE05TlRZMktYdGNjbHh1SUNBZ0lIWmhjaUIwYUdGMElEMGdkR2hwY3p0Y2NseHVJQ0FnSURzb1puVnVZM1JwYjI0Z1kyaGxZMnNvS1h0Y2NseHVJQ0FnSUNBZ2RHaGhkQzVmYVhSMlgyTm9aV05ySUQwZ2MyVjBWR2x0Wlc5MWRDaGphR1ZqYXl4dGN5azdYSEpjYmlBZ0lDQWdJR2xtS0NGMGFHRjBMbDlrWld4aGVWOW9ZVzVrYkdWekxteGxibWQwYUNrZ2NtVjBkWEp1TzF4eVhHNGdJQ0FnSUNCMllYSWdieUE5SUhSb1lYUXVYMlJsYkdGNVgyaGhibVJzWlhNdWMyaHBablFvS1R0Y2NseHVJQ0FnSUNBZ0x5OWpiMjV6YjJ4bExteHZaeWduWkdWc1lYa2pKeXhvWVc1a2JHVXBPMXh5WEc0Z0lDQWdJQ0J2TG1oaGJtUnNaUzVqWVd4c0tIUm9ZWFFwTzF4eVhHNWNjbHh1SUNBZ0lIMHBLQ2s3WEhKY2JseHlYRzRnSUgxY2NseHVJQ0FzWDJOeVpXRjBaVk50YVd4bEtDbDdYSEpjYmlBZ0lDQjJZWElnSkhkeVlYQndaWElnUFNCMGFHbHpMbVZzTG5GMVpYSjVVMlZzWldOMGIzSW9KeTV6ZDJsd1pYSXRkM0poY0hCbGNpY3BPMXh5WEc1Y2NseHVJQ0FnSUM4dlpHVmlkV2RuWlhJN1hISmNiaUFnSUNBdkx5QmpiMjV6ZENCRFQwNUdTVWNnUFNCN1hISmNiaUFnSUNBdkx5QmNkRmM2TXpBc1NEb3hOVEF3TEVORlNVdzZOeXhTVDFjNk0xeHlYRzRnSUNBZ0x5OGdYSFFzUTB4VFgxTk5TVXhGT2lkemJXbHNaUzF2ZG04blhISmNiaUFnSUNBdkx5QmNkQ3hEVEZOZlIxSlBWVkJUT2lkemJXbHNaUzF3WVc1bGJGOWZaM0p2ZFhCeklITjNhWEJsY2kxemJHbGtaU2RjY2x4dUlDQWdJQzh2SUgxY2NseHVJQ0FnSUdOdmJuTjBJRU5QVGtaSlJ5QTlJSHRjY2x4dUlDQWdJQ0FnVnpvek1DeElPakUxTURBc1EwVkpURG8yTEZKUFZ6b3pYSEpjYmlBZ0lDQWdJQ3hEVEZOZlUwMUpURVU2SjNOdGFXeGxMVzkyYnlkY2NseHVJQ0FnSUNBZ0xFTk1VMTlIVWs5VlVGTTZKM050YVd4bExYQmhibVZzWDE5bmNtOTFjSE1nYzNkcGNHVnlMWE5zYVdSbEoxeHlYRzRnSUNBZ2ZWeHlYRzRnSUNBZ1EwOU9Sa2xITGtkU1QxVlFVeUE5SUVOUFRrWkpSeTVEUlVsTUtrTlBUa1pKUnk1U1QxYzdYSEpjYmx4eVhHNGdJQ0FnWTI5dWMzUWdWRTlVUVV3Z1BTQkRUMDVHU1VjdVNDOURUMDVHU1VjdVZ6dGNjbHh1SUNBZ0lHTnZibk4wSUVkU1QxVlFYMDVWVFNBOUlFMWhkR2d1WTJWcGJDaFVUMVJCVEM4Z0tFTlBUa1pKUnk1SFVrOVZVRk1wSUNrN1hISmNibHh5WEc0Z0lDQWdXeTR1TGtGeWNtRjVLRWRTVDFWUVgwNVZUU2xkTG0xaGNDZ29kaXhwS1QwK2UxeHlYRzRnSUNBZ0lDQmNjbHh1SUNBZ0lDQWdkbUZ5SUhWc0lEMGdaRzlqZFcxbGJuUXVZM0psWVhSbFJXeGxiV1Z1ZENnbmRXd25LVHRjY2x4dUlDQWdJQ0FnSkhkeVlYQndaWEl1WVhCd1pXNWtRMmhwYkdRb2RXd3BPMXh5WEc0Z0lDQWdJQ0F2TDJOdmJuTnZiR1V1Ykc5bktDUjNjbUZ3Y0dWeUtUdGNjbHh1SUNBZ0lDQWdMeTlrWldKMVoyZGxjanRjY2x4dUlDQWdJQ0FnZFd3dVkyeGhjM05PWVcxbElEMGdRMDlPUmtsSExrTk1VMTlIVWs5VlVGTTdYSEpjYmlBZ0lDQXZMMXgwZFd3dWMzUjViR1V1Y0dGa1pHbHVaeUE5SUhCaFpHUnBibWM3WEhKY2JseHlYRzRnSUNBZ0lDQnNaWFFnYzNSaGNuUmZhU0E5SUdrcVEwOU9Sa2xITGtkU1QxVlFVenRjY2x4dUlDQWdJQ0FnTHk5amIyNXpiMnhsTG14dlp5aHpkR0Z5ZEY5cEtUdGNjbHh1SUNBZ0lDQWdabTl5S0d4bGRDQnBJRDBnTUR0cFBFTlBUa1pKUnk1U1QxYzdhU3NyS1h0Y2NseHVJQ0FnSUNBZ0lDQm1iM0lvYkdWMElHb2dQU0F3TzJvOFEwOU9Sa2xITGtORlNVdzdhaXNyS1h0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNCc1pYUWdiR2tnUFNCa2IyTjFiV1Z1ZEM1amNtVmhkR1ZGYkdWdFpXNTBLQ2RzYVNjcE8xeDBYSEpjYmlBZ0lDQWdJQ0FnSUNCc1pYUWdZMjkxYm5RZ1BTQnpkR0Z5ZEY5cElDc2dhU3BEVDA1R1NVY3VRMFZKVEN0cU8xeHlYRzRnSUNBZ0lDQWdJQ0FnYVdZb1kyOTFiblFnUGowZ1ZFOVVRVXdwSUdOdmJuUnBiblZsTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUM4dk5EbGNjbHh1SUNBZ0lDQWdJQ0FnSUM4dlkyOXVjMjlzWlM1c2IyY29WRTlVUVV3c0lDQmpiM1Z1ZENrN1hISmNiaUFnSUNBZ0lDQWdJQ0JzYVM1elpYUkJkSFJ5YVdKMWRHVW9KMlJoZEdFdGMyMXBiR1V0YVdSNEp5eGdKSHRwZlN3a2UycDlMQ1I3WTI5MWJuUjlZQ2s3SUZ4eVhHNGdJQ0FnSUNBZ0lDQWdMeTlzYVM1elpYUkJkSFJ5YVdKMWRHVW9KM1Z1YzJWc1pXTjBZV0pzWlNjc0oyOXVKeWs3SUZ4eVhHNGdJQ0FnSUNBZ0lDQWdkV3d1WVhCd1pXNWtRMmhwYkdRb2JHa3BPeUJjY2x4dUlDQWdJQ0FnSUNBZ0lDOHZiR2t1WTJ4aGMzTk9ZVzFsSUQwZ0ozTnRhV3hsTFc5MmJ5YzdYSEpjYmlBZ0lDQWdJQ0FnSUNCc2FTNXpkSGxzWlM1aVlXTnJaM0p2ZFc1a1VHOXphWFJwYjI0Z1BTQmdNQ0FrZTJOdmRXNTBLa05QVGtaSlJ5NVhLaTB4ZlhCNFlEdGNjbHh1SUNBZ0lDQWdJQ0FnSUU5aWFtVmpkQzVoYzNOcFoyNG9iR2tzZTNOdGFXeGxYMmxrZURwamIzVnVkSDBwTzF4MFhISmNibHh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJR3hwTG1sMGRsODdYSFJjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0JzYVM1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NkamJHbGpheWNzS0dVcFBUNTdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOWhaR1JFWld4aGVVaGhibVJzWlNnek16TXNablZ1WTNScGIyNG9LWHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2JuVnRYMjltWDNCcFl6MGdJR052ZFc1MEt6RTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdiblZ0WDI5bVgzQnBZend4TUNZbUtHNTFiVjl2Wmw5d2FXTTlKekFuSzI1MWJWOXZabDl3YVdNcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBdkwxeDBZMjl1YzI5c1pTNXNiMmNvYkdrc2JuVnRYMjltWDNCcFl5azdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdsdFp5QTlJR1J2WTNWdFpXNTBMbU55WldGMFpVVnNaVzFsYm5Rb0oybHRaeWNwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdsdFp5NWpiR0Z6YzA1aGJXVWdQU0FnUTA5T1JrbEhMa05NVTE5VFRVbE1SVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JwYldjdWIyNXNiMkZrSUQwZ0tDazlQaUIwYUdsekxuUnlhV2RuWlhJb0ozQnBZMnNuTEh0bGJEcHBiV2NzYzIxcGJHVmZhV1I0T21OdmRXNTBmU2s3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZRMkZqYUdWYllIQnZjRzlmTW1Ga1pXWmxaRjhrZTI1MWJWOXZabDl3YVdOOUxuQnVaMkJkWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk5cGJXY3VjM0pqSUQwZ1lDNHZjM0pqTDJOdmJXMXZiaTlwYldjdmNHOXdiMTh5WVdSbFptVmtMM0J2Y0c5Zk1tRmtaV1psWkY4a2UyNTFiVjl2Wmw5d2FXTjlMbkJ1WjJBN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0x5OWpiMjV6YjJ4bExteHZaeWhEWVdOb1pTa3NRMkZqYUdWYllDNHZjRzl3YjE4eVlXUmxabVZrWHlSN2JuVnRYMjltWDNCcFkzMHVjRzVuWUYwN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2FXMW5Mbk55WXlBOUlFTmhZMmhsVzJBdUwzQnZjRzlmTW1Ga1pXWmxaRjhrZTI1MWJWOXZabDl3YVdOOUxuQnVaMkJkTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdVdWNISmxkbVZ1ZEVSbFptRjFiSFFvS1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh5WEc1Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNCOUtWeHlYRzVjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0I5S1Z4eVhHNWNjbHh1SUNBZ0lDOHZOeXd6TERJeFhISmNiaUFnZlZ4eVhHNGdJQ3hmWTNKbFlYUmxRMmhwYkdRb0tYdGNjbHh1WEhKY2JpQWdJQ0IwYUdsekxtVnNMbWx1Ym1WeVNGUk5UQ0E5SUdCY2NseHVJQ0FnSUNBZ1BHUnBkaUJqYkdGemN6MWNJbk4zYVhCbGNpMWpiMjUwWVdsdVpYSWdKSHQwYUdsekxuTjNhWEJsY2w5amJITjlYQ0krWEhKY2JpQWdJQ0FnSUNBZ1BHUnBkaUJqYkdGemN6MWNJbk4zYVhCbGNpMTNjbUZ3Y0dWeVhDSStYSEpjYmlBZ0lDQWdJQ0FnWEhKY2JpQWdJQ0FnSUNBZ1BDOWthWFkrWEhKY2JpQWdJQ0FnSUNBZ1BHUnBkaUJqYkdGemN6MWNJbk4zYVhCbGNpMXdZV2RwYm1GMGFXOXVJQ1I3ZEdocGN5NXpkMmx3WlhKZmNHRm5hVzVoZEdsdmJsOWpiSE45WENJK1BDOWthWFkrWEhKY2JpQWdJQ0FnSUR3dlpHbDJQbHh5WEc0Z0lDQWdZRHRjY2x4dUlDQjlYSEpjYmlBZ0xHVnNPbTUxYkd4Y2NseHVmU2s3WEhKY2JseHVYRzVjYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTSUM4dlhHNHZMeUF1TDNOeVl5OXpiV2xzWlM1cWN5SmRMQ0p6YjNWeVkyVlNiMjkwSWpvaUluMD1cXG4vLyMgc291cmNlVVJMPXdlYnBhY2staW50ZXJuYWw6Ly8vNjJcXG5cIik7XG5cbi8qKiovIH0pLFxuLyogNjMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5ldmFsKFwiXFxuXFxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcXFwiZnVuY3Rpb25cXFwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFxcXCJzeW1ib2xcXFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcXFwiZnVuY3Rpb25cXFwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFxcXCJzeW1ib2xcXFwiIDogdHlwZW9mIG9iajsgfTtcXG5cXG4vKipcXHJcXG4gKiBTd2lwZXIgMy40LjJcXHJcXG4gKiBNb3N0IG1vZGVybiBtb2JpbGUgdG91Y2ggc2xpZGVyIGFuZCBmcmFtZXdvcmsgd2l0aCBoYXJkd2FyZSBhY2NlbGVyYXRlZCB0cmFuc2l0aW9uc1xcclxcbiAqIFxcclxcbiAqIGh0dHA6Ly93d3cuaWRhbmdlcm8udXMvc3dpcGVyL1xcclxcbiAqIFxcclxcbiAqIENvcHlyaWdodCAyMDE3LCBWbGFkaW1pciBLaGFybGFtcGlkaVxcclxcbiAqIFRoZSBpRGFuZ2Vyby51c1xcclxcbiAqIGh0dHA6Ly93d3cuaWRhbmdlcm8udXMvXFxyXFxuICogXFxyXFxuICogTGljZW5zZWQgdW5kZXIgTUlUXFxyXFxuICogXFxyXFxuICogUmVsZWFzZWQgb246IE1hcmNoIDEwLCAyMDE3XFxyXFxuICovXFxuIWZ1bmN0aW9uICgpIHtcXG4gIFxcXCJ1c2Ugc3RyaWN0XFxcIjtcXG4gIHZhciBlLFxcbiAgICAgIGEgPSBmdW5jdGlvbiBhKHMsIGkpIHtcXG4gICAgZnVuY3Rpb24gcihlKSB7XFxuICAgICAgcmV0dXJuIE1hdGguZmxvb3IoZSk7XFxuICAgIH1mdW5jdGlvbiBuKCkge1xcbiAgICAgIHZhciBlID0gVC5wYXJhbXMuYXV0b3BsYXksXFxuICAgICAgICAgIGEgPSBULnNsaWRlcy5lcShULmFjdGl2ZUluZGV4KTthLmF0dHIoXFxcImRhdGEtc3dpcGVyLWF1dG9wbGF5XFxcIikgJiYgKGUgPSBhLmF0dHIoXFxcImRhdGEtc3dpcGVyLWF1dG9wbGF5XFxcIikgfHwgVC5wYXJhbXMuYXV0b3BsYXkpLCBULmF1dG9wbGF5VGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XFxuICAgICAgICBULnBhcmFtcy5sb29wID8gKFQuZml4TG9vcCgpLCBULl9zbGlkZU5leHQoKSwgVC5lbWl0KFxcXCJvbkF1dG9wbGF5XFxcIiwgVCkpIDogVC5pc0VuZCA/IGkuYXV0b3BsYXlTdG9wT25MYXN0ID8gVC5zdG9wQXV0b3BsYXkoKSA6IChULl9zbGlkZVRvKDApLCBULmVtaXQoXFxcIm9uQXV0b3BsYXlcXFwiLCBUKSkgOiAoVC5fc2xpZGVOZXh0KCksIFQuZW1pdChcXFwib25BdXRvcGxheVxcXCIsIFQpKTtcXG4gICAgICB9LCBlKTtcXG4gICAgfWZ1bmN0aW9uIG8oYSwgdCkge1xcbiAgICAgIHZhciBzID0gZShhLnRhcmdldCk7aWYgKCFzLmlzKHQpKSBpZiAoXFxcInN0cmluZ1xcXCIgPT0gdHlwZW9mIHQpIHMgPSBzLnBhcmVudHModCk7ZWxzZSBpZiAodC5ub2RlVHlwZSkge1xcbiAgICAgICAgdmFyIGk7cmV0dXJuIHMucGFyZW50cygpLmVhY2goZnVuY3Rpb24gKGUsIGEpIHtcXG4gICAgICAgICAgYSA9PT0gdCAmJiAoaSA9IHQpO1xcbiAgICAgICAgfSksIGkgPyB0IDogdm9pZCAwO1xcbiAgICAgIH1pZiAoMCAhPT0gcy5sZW5ndGgpIHJldHVybiBzWzBdO1xcbiAgICB9ZnVuY3Rpb24gbChlLCBhKSB7XFxuICAgICAgYSA9IGEgfHwge307dmFyIHQgPSB3aW5kb3cuTXV0YXRpb25PYnNlcnZlciB8fCB3aW5kb3cuV2Via2l0TXV0YXRpb25PYnNlcnZlcixcXG4gICAgICAgICAgcyA9IG5ldyB0KGZ1bmN0aW9uIChlKSB7XFxuICAgICAgICBlLmZvckVhY2goZnVuY3Rpb24gKGUpIHtcXG4gICAgICAgICAgVC5vblJlc2l6ZSghMCksIFQuZW1pdChcXFwib25PYnNlcnZlclVwZGF0ZVxcXCIsIFQsIGUpO1xcbiAgICAgICAgfSk7XFxuICAgICAgfSk7cy5vYnNlcnZlKGUsIHsgYXR0cmlidXRlczogdm9pZCAwID09PSBhLmF0dHJpYnV0ZXMgfHwgYS5hdHRyaWJ1dGVzLCBjaGlsZExpc3Q6IHZvaWQgMCA9PT0gYS5jaGlsZExpc3QgfHwgYS5jaGlsZExpc3QsIGNoYXJhY3RlckRhdGE6IHZvaWQgMCA9PT0gYS5jaGFyYWN0ZXJEYXRhIHx8IGEuY2hhcmFjdGVyRGF0YSB9KSwgVC5vYnNlcnZlcnMucHVzaChzKTtcXG4gICAgfWZ1bmN0aW9uIHAoZSkge1xcbiAgICAgIGUub3JpZ2luYWxFdmVudCAmJiAoZSA9IGUub3JpZ2luYWxFdmVudCk7dmFyIGEgPSBlLmtleUNvZGUgfHwgZS5jaGFyQ29kZTtpZiAoIVQucGFyYW1zLmFsbG93U3dpcGVUb05leHQgJiYgKFQuaXNIb3Jpem9udGFsKCkgJiYgMzkgPT09IGEgfHwgIVQuaXNIb3Jpem9udGFsKCkgJiYgNDAgPT09IGEpKSByZXR1cm4gITE7aWYgKCFULnBhcmFtcy5hbGxvd1N3aXBlVG9QcmV2ICYmIChULmlzSG9yaXpvbnRhbCgpICYmIDM3ID09PSBhIHx8ICFULmlzSG9yaXpvbnRhbCgpICYmIDM4ID09PSBhKSkgcmV0dXJuICExO2lmICghKGUuc2hpZnRLZXkgfHwgZS5hbHRLZXkgfHwgZS5jdHJsS2V5IHx8IGUubWV0YUtleSB8fCBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQubm9kZU5hbWUgJiYgKFxcXCJpbnB1dFxcXCIgPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSB8fCBcXFwidGV4dGFyZWFcXFwiID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpKSkge1xcbiAgICAgICAgaWYgKDM3ID09PSBhIHx8IDM5ID09PSBhIHx8IDM4ID09PSBhIHx8IDQwID09PSBhKSB7XFxuICAgICAgICAgIHZhciB0ID0gITE7aWYgKFQuY29udGFpbmVyLnBhcmVudHMoXFxcIi5cXFwiICsgVC5wYXJhbXMuc2xpZGVDbGFzcykubGVuZ3RoID4gMCAmJiAwID09PSBULmNvbnRhaW5lci5wYXJlbnRzKFxcXCIuXFxcIiArIFQucGFyYW1zLnNsaWRlQWN0aXZlQ2xhc3MpLmxlbmd0aCkgcmV0dXJuO3ZhciBzID0geyBsZWZ0OiB3aW5kb3cucGFnZVhPZmZzZXQsIHRvcDogd2luZG93LnBhZ2VZT2Zmc2V0IH0sXFxuICAgICAgICAgICAgICBpID0gd2luZG93LmlubmVyV2lkdGgsXFxuICAgICAgICAgICAgICByID0gd2luZG93LmlubmVySGVpZ2h0LFxcbiAgICAgICAgICAgICAgbiA9IFQuY29udGFpbmVyLm9mZnNldCgpO1QucnRsICYmIChuLmxlZnQgPSBuLmxlZnQgLSBULmNvbnRhaW5lclswXS5zY3JvbGxMZWZ0KTtmb3IgKHZhciBvID0gW1tuLmxlZnQsIG4udG9wXSwgW24ubGVmdCArIFQud2lkdGgsIG4udG9wXSwgW24ubGVmdCwgbi50b3AgKyBULmhlaWdodF0sIFtuLmxlZnQgKyBULndpZHRoLCBuLnRvcCArIFQuaGVpZ2h0XV0sIGwgPSAwOyBsIDwgby5sZW5ndGg7IGwrKykge1xcbiAgICAgICAgICAgIHZhciBwID0gb1tsXTtwWzBdID49IHMubGVmdCAmJiBwWzBdIDw9IHMubGVmdCArIGkgJiYgcFsxXSA+PSBzLnRvcCAmJiBwWzFdIDw9IHMudG9wICsgciAmJiAodCA9ICEwKTtcXG4gICAgICAgICAgfWlmICghdCkgcmV0dXJuO1xcbiAgICAgICAgfVQuaXNIb3Jpem9udGFsKCkgPyAoMzcgIT09IGEgJiYgMzkgIT09IGEgfHwgKGUucHJldmVudERlZmF1bHQgPyBlLnByZXZlbnREZWZhdWx0KCkgOiBlLnJldHVyblZhbHVlID0gITEpLCAoMzkgPT09IGEgJiYgIVQucnRsIHx8IDM3ID09PSBhICYmIFQucnRsKSAmJiBULnNsaWRlTmV4dCgpLCAoMzcgPT09IGEgJiYgIVQucnRsIHx8IDM5ID09PSBhICYmIFQucnRsKSAmJiBULnNsaWRlUHJldigpKSA6ICgzOCAhPT0gYSAmJiA0MCAhPT0gYSB8fCAoZS5wcmV2ZW50RGVmYXVsdCA/IGUucHJldmVudERlZmF1bHQoKSA6IGUucmV0dXJuVmFsdWUgPSAhMSksIDQwID09PSBhICYmIFQuc2xpZGVOZXh0KCksIDM4ID09PSBhICYmIFQuc2xpZGVQcmV2KCkpLCBULmVtaXQoXFxcIm9uS2V5UHJlc3NcXFwiLCBULCBhKTtcXG4gICAgICB9XFxuICAgIH1mdW5jdGlvbiBkKGUpIHtcXG4gICAgICB2YXIgYSA9IDAsXFxuICAgICAgICAgIHQgPSAwLFxcbiAgICAgICAgICBzID0gMCxcXG4gICAgICAgICAgaSA9IDA7cmV0dXJuIFxcXCJkZXRhaWxcXFwiIGluIGUgJiYgKHQgPSBlLmRldGFpbCksIFxcXCJ3aGVlbERlbHRhXFxcIiBpbiBlICYmICh0ID0gLWUud2hlZWxEZWx0YSAvIDEyMCksIFxcXCJ3aGVlbERlbHRhWVxcXCIgaW4gZSAmJiAodCA9IC1lLndoZWVsRGVsdGFZIC8gMTIwKSwgXFxcIndoZWVsRGVsdGFYXFxcIiBpbiBlICYmIChhID0gLWUud2hlZWxEZWx0YVggLyAxMjApLCBcXFwiYXhpc1xcXCIgaW4gZSAmJiBlLmF4aXMgPT09IGUuSE9SSVpPTlRBTF9BWElTICYmIChhID0gdCwgdCA9IDApLCBzID0gMTAgKiBhLCBpID0gMTAgKiB0LCBcXFwiZGVsdGFZXFxcIiBpbiBlICYmIChpID0gZS5kZWx0YVkpLCBcXFwiZGVsdGFYXFxcIiBpbiBlICYmIChzID0gZS5kZWx0YVgpLCAocyB8fCBpKSAmJiBlLmRlbHRhTW9kZSAmJiAoMSA9PT0gZS5kZWx0YU1vZGUgPyAocyAqPSA0MCwgaSAqPSA0MCkgOiAocyAqPSA4MDAsIGkgKj0gODAwKSksIHMgJiYgIWEgJiYgKGEgPSBzIDwgMSA/IC0xIDogMSksIGkgJiYgIXQgJiYgKHQgPSBpIDwgMSA/IC0xIDogMSksIHsgc3Bpblg6IGEsIHNwaW5ZOiB0LCBwaXhlbFg6IHMsIHBpeGVsWTogaSB9O1xcbiAgICB9ZnVuY3Rpb24gdShlKSB7XFxuICAgICAgZS5vcmlnaW5hbEV2ZW50ICYmIChlID0gZS5vcmlnaW5hbEV2ZW50KTt2YXIgYSA9IDAsXFxuICAgICAgICAgIHQgPSBULnJ0bCA/IC0xIDogMSxcXG4gICAgICAgICAgcyA9IGQoZSk7aWYgKFQucGFyYW1zLm1vdXNld2hlZWxGb3JjZVRvQXhpcykge1xcbiAgICAgICAgaWYgKFQuaXNIb3Jpem9udGFsKCkpIHtcXG4gICAgICAgICAgaWYgKCEoTWF0aC5hYnMocy5waXhlbFgpID4gTWF0aC5hYnMocy5waXhlbFkpKSkgcmV0dXJuO2EgPSBzLnBpeGVsWCAqIHQ7XFxuICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICBpZiAoIShNYXRoLmFicyhzLnBpeGVsWSkgPiBNYXRoLmFicyhzLnBpeGVsWCkpKSByZXR1cm47YSA9IHMucGl4ZWxZO1xcbiAgICAgICAgfVxcbiAgICAgIH0gZWxzZSBhID0gTWF0aC5hYnMocy5waXhlbFgpID4gTWF0aC5hYnMocy5waXhlbFkpID8gLXMucGl4ZWxYICogdCA6IC1zLnBpeGVsWTtpZiAoMCAhPT0gYSkge1xcbiAgICAgICAgaWYgKFQucGFyYW1zLm1vdXNld2hlZWxJbnZlcnQgJiYgKGEgPSAtYSksIFQucGFyYW1zLmZyZWVNb2RlKSB7XFxuICAgICAgICAgIHZhciBpID0gVC5nZXRXcmFwcGVyVHJhbnNsYXRlKCkgKyBhICogVC5wYXJhbXMubW91c2V3aGVlbFNlbnNpdGl2aXR5LFxcbiAgICAgICAgICAgICAgciA9IFQuaXNCZWdpbm5pbmcsXFxuICAgICAgICAgICAgICBuID0gVC5pc0VuZDtpZiAoaSA+PSBULm1pblRyYW5zbGF0ZSgpICYmIChpID0gVC5taW5UcmFuc2xhdGUoKSksIGkgPD0gVC5tYXhUcmFuc2xhdGUoKSAmJiAoaSA9IFQubWF4VHJhbnNsYXRlKCkpLCBULnNldFdyYXBwZXJUcmFuc2l0aW9uKDApLCBULnNldFdyYXBwZXJUcmFuc2xhdGUoaSksIFQudXBkYXRlUHJvZ3Jlc3MoKSwgVC51cGRhdGVBY3RpdmVJbmRleCgpLCAoIXIgJiYgVC5pc0JlZ2lubmluZyB8fCAhbiAmJiBULmlzRW5kKSAmJiBULnVwZGF0ZUNsYXNzZXMoKSwgVC5wYXJhbXMuZnJlZU1vZGVTdGlja3kgPyAoY2xlYXJUaW1lb3V0KFQubW91c2V3aGVlbC50aW1lb3V0KSwgVC5tb3VzZXdoZWVsLnRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcXG4gICAgICAgICAgICBULnNsaWRlUmVzZXQoKTtcXG4gICAgICAgICAgfSwgMzAwKSkgOiBULnBhcmFtcy5sYXp5TG9hZGluZyAmJiBULmxhenkgJiYgVC5sYXp5LmxvYWQoKSwgVC5lbWl0KFxcXCJvblNjcm9sbFxcXCIsIFQsIGUpLCBULnBhcmFtcy5hdXRvcGxheSAmJiBULnBhcmFtcy5hdXRvcGxheURpc2FibGVPbkludGVyYWN0aW9uICYmIFQuc3RvcEF1dG9wbGF5KCksIDAgPT09IGkgfHwgaSA9PT0gVC5tYXhUcmFuc2xhdGUoKSkgcmV0dXJuO1xcbiAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgaWYgKG5ldyB3aW5kb3cuRGF0ZSgpLmdldFRpbWUoKSAtIFQubW91c2V3aGVlbC5sYXN0U2Nyb2xsVGltZSA+IDYwKSBpZiAoYSA8IDApIHtcXG4gICAgICAgICAgICBpZiAoVC5pc0VuZCAmJiAhVC5wYXJhbXMubG9vcCB8fCBULmFuaW1hdGluZykge1xcbiAgICAgICAgICAgICAgaWYgKFQucGFyYW1zLm1vdXNld2hlZWxSZWxlYXNlT25FZGdlcykgcmV0dXJuICEwO1xcbiAgICAgICAgICAgIH0gZWxzZSBULnNsaWRlTmV4dCgpLCBULmVtaXQoXFxcIm9uU2Nyb2xsXFxcIiwgVCwgZSk7XFxuICAgICAgICAgIH0gZWxzZSBpZiAoVC5pc0JlZ2lubmluZyAmJiAhVC5wYXJhbXMubG9vcCB8fCBULmFuaW1hdGluZykge1xcbiAgICAgICAgICAgIGlmIChULnBhcmFtcy5tb3VzZXdoZWVsUmVsZWFzZU9uRWRnZXMpIHJldHVybiAhMDtcXG4gICAgICAgICAgfSBlbHNlIFQuc2xpZGVQcmV2KCksIFQuZW1pdChcXFwib25TY3JvbGxcXFwiLCBULCBlKTtULm1vdXNld2hlZWwubGFzdFNjcm9sbFRpbWUgPSBuZXcgd2luZG93LkRhdGUoKS5nZXRUaW1lKCk7XFxuICAgICAgICB9cmV0dXJuIGUucHJldmVudERlZmF1bHQgPyBlLnByZXZlbnREZWZhdWx0KCkgOiBlLnJldHVyblZhbHVlID0gITEsICExO1xcbiAgICAgIH1cXG4gICAgfWZ1bmN0aW9uIGMoYSwgdCkge1xcbiAgICAgIGEgPSBlKGEpO3ZhciBzLFxcbiAgICAgICAgICBpLFxcbiAgICAgICAgICByLFxcbiAgICAgICAgICBuID0gVC5ydGwgPyAtMSA6IDE7cyA9IGEuYXR0cihcXFwiZGF0YS1zd2lwZXItcGFyYWxsYXhcXFwiKSB8fCBcXFwiMFxcXCIsIGkgPSBhLmF0dHIoXFxcImRhdGEtc3dpcGVyLXBhcmFsbGF4LXhcXFwiKSwgciA9IGEuYXR0cihcXFwiZGF0YS1zd2lwZXItcGFyYWxsYXgteVxcXCIpLCBpIHx8IHIgPyAoaSA9IGkgfHwgXFxcIjBcXFwiLCByID0gciB8fCBcXFwiMFxcXCIpIDogVC5pc0hvcml6b250YWwoKSA/IChpID0gcywgciA9IFxcXCIwXFxcIikgOiAociA9IHMsIGkgPSBcXFwiMFxcXCIpLCBpID0gaS5pbmRleE9mKFxcXCIlXFxcIikgPj0gMCA/IHBhcnNlSW50KGksIDEwKSAqIHQgKiBuICsgXFxcIiVcXFwiIDogaSAqIHQgKiBuICsgXFxcInB4XFxcIiwgciA9IHIuaW5kZXhPZihcXFwiJVxcXCIpID49IDAgPyBwYXJzZUludChyLCAxMCkgKiB0ICsgXFxcIiVcXFwiIDogciAqIHQgKyBcXFwicHhcXFwiLCBhLnRyYW5zZm9ybShcXFwidHJhbnNsYXRlM2QoXFxcIiArIGkgKyBcXFwiLCBcXFwiICsgciArIFxcXCIsMHB4KVxcXCIpO1xcbiAgICB9ZnVuY3Rpb24gbShlKSB7XFxuICAgICAgcmV0dXJuIDAgIT09IGUuaW5kZXhPZihcXFwib25cXFwiKSAmJiAoZSA9IGVbMF0gIT09IGVbMF0udG9VcHBlckNhc2UoKSA/IFxcXCJvblxcXCIgKyBlWzBdLnRvVXBwZXJDYXNlKCkgKyBlLnN1YnN0cmluZygxKSA6IFxcXCJvblxcXCIgKyBlKSwgZTtcXG4gICAgfWlmICghKHRoaXMgaW5zdGFuY2VvZiBhKSkgcmV0dXJuIG5ldyBhKHMsIGkpO3ZhciBoID0geyBkaXJlY3Rpb246IFxcXCJob3Jpem9udGFsXFxcIiwgdG91Y2hFdmVudHNUYXJnZXQ6IFxcXCJjb250YWluZXJcXFwiLCBpbml0aWFsU2xpZGU6IDAsIHNwZWVkOiAzMDAsIGF1dG9wbGF5OiAhMSwgYXV0b3BsYXlEaXNhYmxlT25JbnRlcmFjdGlvbjogITAsIGF1dG9wbGF5U3RvcE9uTGFzdDogITEsIGlPU0VkZ2VTd2lwZURldGVjdGlvbjogITEsIGlPU0VkZ2VTd2lwZVRocmVzaG9sZDogMjAsIGZyZWVNb2RlOiAhMSwgZnJlZU1vZGVNb21lbnR1bTogITAsIGZyZWVNb2RlTW9tZW50dW1SYXRpbzogMSwgZnJlZU1vZGVNb21lbnR1bUJvdW5jZTogITAsIGZyZWVNb2RlTW9tZW50dW1Cb3VuY2VSYXRpbzogMSwgZnJlZU1vZGVNb21lbnR1bVZlbG9jaXR5UmF0aW86IDEsIGZyZWVNb2RlU3RpY2t5OiAhMSwgZnJlZU1vZGVNaW5pbXVtVmVsb2NpdHk6IC4wMiwgYXV0b0hlaWdodDogITEsIHNldFdyYXBwZXJTaXplOiAhMSwgdmlydHVhbFRyYW5zbGF0ZTogITEsIGVmZmVjdDogXFxcInNsaWRlXFxcIiwgY292ZXJmbG93OiB7IHJvdGF0ZTogNTAsIHN0cmV0Y2g6IDAsIGRlcHRoOiAxMDAsIG1vZGlmaWVyOiAxLCBzbGlkZVNoYWRvd3M6ICEwIH0sIGZsaXA6IHsgc2xpZGVTaGFkb3dzOiAhMCwgbGltaXRSb3RhdGlvbjogITAgfSwgY3ViZTogeyBzbGlkZVNoYWRvd3M6ICEwLCBzaGFkb3c6ICEwLCBzaGFkb3dPZmZzZXQ6IDIwLCBzaGFkb3dTY2FsZTogLjk0IH0sIGZhZGU6IHsgY3Jvc3NGYWRlOiAhMSB9LCBwYXJhbGxheDogITEsIHpvb206ICExLCB6b29tTWF4OiAzLCB6b29tTWluOiAxLCB6b29tVG9nZ2xlOiAhMCwgc2Nyb2xsYmFyOiBudWxsLCBzY3JvbGxiYXJIaWRlOiAhMCwgc2Nyb2xsYmFyRHJhZ2dhYmxlOiAhMSwgc2Nyb2xsYmFyU25hcE9uUmVsZWFzZTogITEsIGtleWJvYXJkQ29udHJvbDogITEsIG1vdXNld2hlZWxDb250cm9sOiAhMSwgbW91c2V3aGVlbFJlbGVhc2VPbkVkZ2VzOiAhMSwgbW91c2V3aGVlbEludmVydDogITEsIG1vdXNld2hlZWxGb3JjZVRvQXhpczogITEsIG1vdXNld2hlZWxTZW5zaXRpdml0eTogMSwgbW91c2V3aGVlbEV2ZW50c1RhcmdlZDogXFxcImNvbnRhaW5lclxcXCIsIGhhc2huYXY6ICExLCBoYXNobmF2V2F0Y2hTdGF0ZTogITEsIGhpc3Rvcnk6ICExLCByZXBsYWNlU3RhdGU6ICExLCBicmVha3BvaW50czogdm9pZCAwLCBzcGFjZUJldHdlZW46IDAsIHNsaWRlc1BlclZpZXc6IDEsIHNsaWRlc1BlckNvbHVtbjogMSwgc2xpZGVzUGVyQ29sdW1uRmlsbDogXFxcImNvbHVtblxcXCIsIHNsaWRlc1Blckdyb3VwOiAxLCBjZW50ZXJlZFNsaWRlczogITEsIHNsaWRlc09mZnNldEJlZm9yZTogMCwgc2xpZGVzT2Zmc2V0QWZ0ZXI6IDAsIHJvdW5kTGVuZ3RoczogITEsIHRvdWNoUmF0aW86IDEsIHRvdWNoQW5nbGU6IDQ1LCBzaW11bGF0ZVRvdWNoOiAhMCwgc2hvcnRTd2lwZXM6ICEwLCBsb25nU3dpcGVzOiAhMCwgbG9uZ1N3aXBlc1JhdGlvOiAuNSwgbG9uZ1N3aXBlc01zOiAzMDAsIGZvbGxvd0ZpbmdlcjogITAsIG9ubHlFeHRlcm5hbDogITEsIHRocmVzaG9sZDogMCwgdG91Y2hNb3ZlU3RvcFByb3BhZ2F0aW9uOiAhMCwgdG91Y2hSZWxlYXNlT25FZGdlczogITEsIHVuaXF1ZU5hdkVsZW1lbnRzOiAhMCwgcGFnaW5hdGlvbjogbnVsbCwgcGFnaW5hdGlvbkVsZW1lbnQ6IFxcXCJzcGFuXFxcIiwgcGFnaW5hdGlvbkNsaWNrYWJsZTogITEsIHBhZ2luYXRpb25IaWRlOiAhMSwgcGFnaW5hdGlvbkJ1bGxldFJlbmRlcjogbnVsbCwgcGFnaW5hdGlvblByb2dyZXNzUmVuZGVyOiBudWxsLCBwYWdpbmF0aW9uRnJhY3Rpb25SZW5kZXI6IG51bGwsIHBhZ2luYXRpb25DdXN0b21SZW5kZXI6IG51bGwsIHBhZ2luYXRpb25UeXBlOiBcXFwiYnVsbGV0c1xcXCIsIHJlc2lzdGFuY2U6ICEwLCByZXNpc3RhbmNlUmF0aW86IC44NSwgbmV4dEJ1dHRvbjogbnVsbCwgcHJldkJ1dHRvbjogbnVsbCwgd2F0Y2hTbGlkZXNQcm9ncmVzczogITEsIHdhdGNoU2xpZGVzVmlzaWJpbGl0eTogITEsIGdyYWJDdXJzb3I6ICExLCBwcmV2ZW50Q2xpY2tzOiAhMCwgcHJldmVudENsaWNrc1Byb3BhZ2F0aW9uOiAhMCwgc2xpZGVUb0NsaWNrZWRTbGlkZTogITEsIGxhenlMb2FkaW5nOiAhMSwgbGF6eUxvYWRpbmdJblByZXZOZXh0OiAhMSwgbGF6eUxvYWRpbmdJblByZXZOZXh0QW1vdW50OiAxLCBsYXp5TG9hZGluZ09uVHJhbnNpdGlvblN0YXJ0OiAhMSwgcHJlbG9hZEltYWdlczogITAsIHVwZGF0ZU9uSW1hZ2VzUmVhZHk6ICEwLCBsb29wOiAhMSwgbG9vcEFkZGl0aW9uYWxTbGlkZXM6IDAsIGxvb3BlZFNsaWRlczogbnVsbCwgY29udHJvbDogdm9pZCAwLCBjb250cm9sSW52ZXJzZTogITEsIGNvbnRyb2xCeTogXFxcInNsaWRlXFxcIiwgbm9ybWFsaXplU2xpZGVJbmRleDogITAsIGFsbG93U3dpcGVUb1ByZXY6ICEwLCBhbGxvd1N3aXBlVG9OZXh0OiAhMCwgc3dpcGVIYW5kbGVyOiBudWxsLCBub1N3aXBpbmc6ICEwLCBub1N3aXBpbmdDbGFzczogXFxcInN3aXBlci1uby1zd2lwaW5nXFxcIiwgcGFzc2l2ZUxpc3RlbmVyczogITAsIGNvbnRhaW5lck1vZGlmaWVyQ2xhc3M6IFxcXCJzd2lwZXItY29udGFpbmVyLVxcXCIsIHNsaWRlQ2xhc3M6IFxcXCJzd2lwZXItc2xpZGVcXFwiLCBzbGlkZUFjdGl2ZUNsYXNzOiBcXFwic3dpcGVyLXNsaWRlLWFjdGl2ZVxcXCIsIHNsaWRlRHVwbGljYXRlQWN0aXZlQ2xhc3M6IFxcXCJzd2lwZXItc2xpZGUtZHVwbGljYXRlLWFjdGl2ZVxcXCIsIHNsaWRlVmlzaWJsZUNsYXNzOiBcXFwic3dpcGVyLXNsaWRlLXZpc2libGVcXFwiLCBzbGlkZUR1cGxpY2F0ZUNsYXNzOiBcXFwic3dpcGVyLXNsaWRlLWR1cGxpY2F0ZVxcXCIsIHNsaWRlTmV4dENsYXNzOiBcXFwic3dpcGVyLXNsaWRlLW5leHRcXFwiLCBzbGlkZUR1cGxpY2F0ZU5leHRDbGFzczogXFxcInN3aXBlci1zbGlkZS1kdXBsaWNhdGUtbmV4dFxcXCIsIHNsaWRlUHJldkNsYXNzOiBcXFwic3dpcGVyLXNsaWRlLXByZXZcXFwiLCBzbGlkZUR1cGxpY2F0ZVByZXZDbGFzczogXFxcInN3aXBlci1zbGlkZS1kdXBsaWNhdGUtcHJldlxcXCIsIHdyYXBwZXJDbGFzczogXFxcInN3aXBlci13cmFwcGVyXFxcIiwgYnVsbGV0Q2xhc3M6IFxcXCJzd2lwZXItcGFnaW5hdGlvbi1idWxsZXRcXFwiLCBidWxsZXRBY3RpdmVDbGFzczogXFxcInN3aXBlci1wYWdpbmF0aW9uLWJ1bGxldC1hY3RpdmVcXFwiLCBidXR0b25EaXNhYmxlZENsYXNzOiBcXFwic3dpcGVyLWJ1dHRvbi1kaXNhYmxlZFxcXCIsIHBhZ2luYXRpb25DdXJyZW50Q2xhc3M6IFxcXCJzd2lwZXItcGFnaW5hdGlvbi1jdXJyZW50XFxcIiwgcGFnaW5hdGlvblRvdGFsQ2xhc3M6IFxcXCJzd2lwZXItcGFnaW5hdGlvbi10b3RhbFxcXCIsIHBhZ2luYXRpb25IaWRkZW5DbGFzczogXFxcInN3aXBlci1wYWdpbmF0aW9uLWhpZGRlblxcXCIsIHBhZ2luYXRpb25Qcm9ncmVzc2JhckNsYXNzOiBcXFwic3dpcGVyLXBhZ2luYXRpb24tcHJvZ3Jlc3NiYXJcXFwiLCBwYWdpbmF0aW9uQ2xpY2thYmxlQ2xhc3M6IFxcXCJzd2lwZXItcGFnaW5hdGlvbi1jbGlja2FibGVcXFwiLCBwYWdpbmF0aW9uTW9kaWZpZXJDbGFzczogXFxcInN3aXBlci1wYWdpbmF0aW9uLVxcXCIsIGxhenlMb2FkaW5nQ2xhc3M6IFxcXCJzd2lwZXItbGF6eVxcXCIsIGxhenlTdGF0dXNMb2FkaW5nQ2xhc3M6IFxcXCJzd2lwZXItbGF6eS1sb2FkaW5nXFxcIiwgbGF6eVN0YXR1c0xvYWRlZENsYXNzOiBcXFwic3dpcGVyLWxhenktbG9hZGVkXFxcIiwgbGF6eVByZWxvYWRlckNsYXNzOiBcXFwic3dpcGVyLWxhenktcHJlbG9hZGVyXFxcIiwgbm90aWZpY2F0aW9uQ2xhc3M6IFxcXCJzd2lwZXItbm90aWZpY2F0aW9uXFxcIiwgcHJlbG9hZGVyQ2xhc3M6IFxcXCJwcmVsb2FkZXJcXFwiLCB6b29tQ29udGFpbmVyQ2xhc3M6IFxcXCJzd2lwZXItem9vbS1jb250YWluZXJcXFwiLCBvYnNlcnZlcjogITEsIG9ic2VydmVQYXJlbnRzOiAhMSwgYTExeTogITEsIHByZXZTbGlkZU1lc3NhZ2U6IFxcXCJQcmV2aW91cyBzbGlkZVxcXCIsIG5leHRTbGlkZU1lc3NhZ2U6IFxcXCJOZXh0IHNsaWRlXFxcIiwgZmlyc3RTbGlkZU1lc3NhZ2U6IFxcXCJUaGlzIGlzIHRoZSBmaXJzdCBzbGlkZVxcXCIsIGxhc3RTbGlkZU1lc3NhZ2U6IFxcXCJUaGlzIGlzIHRoZSBsYXN0IHNsaWRlXFxcIiwgcGFnaW5hdGlvbkJ1bGxldE1lc3NhZ2U6IFxcXCJHbyB0byBzbGlkZSB7e2luZGV4fX1cXFwiLCBydW5DYWxsYmFja3NPbkluaXQ6ICEwIH0sXFxuICAgICAgICBnID0gaSAmJiBpLnZpcnR1YWxUcmFuc2xhdGU7aSA9IGkgfHwge307dmFyIGYgPSB7fTtmb3IgKHZhciB2IGluIGkpIHtcXG4gICAgICBpZiAoXFxcIm9iamVjdFxcXCIgIT0gX3R5cGVvZihpW3ZdKSB8fCBudWxsID09PSBpW3ZdIHx8IGlbdl0ubm9kZVR5cGUgfHwgaVt2XSA9PT0gd2luZG93IHx8IGlbdl0gPT09IGRvY3VtZW50IHx8IHZvaWQgMCAhPT0gdCAmJiBpW3ZdIGluc3RhbmNlb2YgdCB8fCBcXFwidW5kZWZpbmVkXFxcIiAhPSB0eXBlb2YgalF1ZXJ5ICYmIGlbdl0gaW5zdGFuY2VvZiBqUXVlcnkpIGZbdl0gPSBpW3ZdO2Vsc2Uge1xcbiAgICAgICAgZlt2XSA9IHt9O2ZvciAodmFyIHcgaW4gaVt2XSkge1xcbiAgICAgICAgICBmW3ZdW3ddID0gaVt2XVt3XTtcXG4gICAgICAgIH1cXG4gICAgICB9XFxuICAgIH1mb3IgKHZhciB5IGluIGgpIHtcXG4gICAgICBpZiAodm9pZCAwID09PSBpW3ldKSBpW3ldID0gaFt5XTtlbHNlIGlmIChcXFwib2JqZWN0XFxcIiA9PSBfdHlwZW9mKGlbeV0pKSBmb3IgKHZhciB4IGluIGhbeV0pIHtcXG4gICAgICAgIHZvaWQgMCA9PT0gaVt5XVt4XSAmJiAoaVt5XVt4XSA9IGhbeV1beF0pO1xcbiAgICAgIH1cXG4gICAgfXZhciBUID0gdGhpcztpZiAoVC5wYXJhbXMgPSBpLCBULm9yaWdpbmFsUGFyYW1zID0gZiwgVC5jbGFzc05hbWVzID0gW10sIHZvaWQgMCAhPT0gZSAmJiB2b2lkIDAgIT09IHQgJiYgKGUgPSB0KSwgKHZvaWQgMCAhPT0gZSB8fCAoZSA9IHZvaWQgMCA9PT0gdCA/IHdpbmRvdy5Eb203IHx8IHdpbmRvdy5aZXB0byB8fCB3aW5kb3cualF1ZXJ5IDogdCkpICYmIChULiQgPSBlLCBULmN1cnJlbnRCcmVha3BvaW50ID0gdm9pZCAwLCBULmdldEFjdGl2ZUJyZWFrcG9pbnQgPSBmdW5jdGlvbiAoKSB7XFxuICAgICAgaWYgKCFULnBhcmFtcy5icmVha3BvaW50cykgcmV0dXJuICExO3ZhciBlLFxcbiAgICAgICAgICBhID0gITEsXFxuICAgICAgICAgIHQgPSBbXTtmb3IgKGUgaW4gVC5wYXJhbXMuYnJlYWtwb2ludHMpIHtcXG4gICAgICAgIFQucGFyYW1zLmJyZWFrcG9pbnRzLmhhc093blByb3BlcnR5KGUpICYmIHQucHVzaChlKTtcXG4gICAgICB9dC5zb3J0KGZ1bmN0aW9uIChlLCBhKSB7XFxuICAgICAgICByZXR1cm4gcGFyc2VJbnQoZSwgMTApID4gcGFyc2VJbnQoYSwgMTApO1xcbiAgICAgIH0pO2ZvciAodmFyIHMgPSAwOyBzIDwgdC5sZW5ndGg7IHMrKykge1xcbiAgICAgICAgKGUgPSB0W3NdKSA+PSB3aW5kb3cuaW5uZXJXaWR0aCAmJiAhYSAmJiAoYSA9IGUpO1xcbiAgICAgIH1yZXR1cm4gYSB8fCBcXFwibWF4XFxcIjtcXG4gICAgfSwgVC5zZXRCcmVha3BvaW50ID0gZnVuY3Rpb24gKCkge1xcbiAgICAgIHZhciBlID0gVC5nZXRBY3RpdmVCcmVha3BvaW50KCk7aWYgKGUgJiYgVC5jdXJyZW50QnJlYWtwb2ludCAhPT0gZSkge1xcbiAgICAgICAgdmFyIGEgPSBlIGluIFQucGFyYW1zLmJyZWFrcG9pbnRzID8gVC5wYXJhbXMuYnJlYWtwb2ludHNbZV0gOiBULm9yaWdpbmFsUGFyYW1zLFxcbiAgICAgICAgICAgIHQgPSBULnBhcmFtcy5sb29wICYmIGEuc2xpZGVzUGVyVmlldyAhPT0gVC5wYXJhbXMuc2xpZGVzUGVyVmlldztmb3IgKHZhciBzIGluIGEpIHtcXG4gICAgICAgICAgVC5wYXJhbXNbc10gPSBhW3NdO1xcbiAgICAgICAgfVQuY3VycmVudEJyZWFrcG9pbnQgPSBlLCB0ICYmIFQuZGVzdHJveUxvb3AgJiYgVC5yZUxvb3AoITApO1xcbiAgICAgIH1cXG4gICAgfSwgVC5wYXJhbXMuYnJlYWtwb2ludHMgJiYgVC5zZXRCcmVha3BvaW50KCksIFQuY29udGFpbmVyID0gZShzKSwgMCAhPT0gVC5jb250YWluZXIubGVuZ3RoKSkge1xcbiAgICAgIGlmIChULmNvbnRhaW5lci5sZW5ndGggPiAxKSB7XFxuICAgICAgICB2YXIgYiA9IFtdO3JldHVybiBULmNvbnRhaW5lci5lYWNoKGZ1bmN0aW9uICgpIHtcXG4gICAgICAgICAgYi5wdXNoKG5ldyBhKHRoaXMsIGkpKTtcXG4gICAgICAgIH0pLCBiO1xcbiAgICAgIH1ULmNvbnRhaW5lclswXS5zd2lwZXIgPSBULCBULmNvbnRhaW5lci5kYXRhKFxcXCJzd2lwZXJcXFwiLCBUKSwgVC5jbGFzc05hbWVzLnB1c2goVC5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcyArIFQucGFyYW1zLmRpcmVjdGlvbiksIFQucGFyYW1zLmZyZWVNb2RlICYmIFQuY2xhc3NOYW1lcy5wdXNoKFQucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MgKyBcXFwiZnJlZS1tb2RlXFxcIiksIFQuc3VwcG9ydC5mbGV4Ym94IHx8IChULmNsYXNzTmFtZXMucHVzaChULnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzICsgXFxcIm5vLWZsZXhib3hcXFwiKSwgVC5wYXJhbXMuc2xpZGVzUGVyQ29sdW1uID0gMSksIFQucGFyYW1zLmF1dG9IZWlnaHQgJiYgVC5jbGFzc05hbWVzLnB1c2goVC5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcyArIFxcXCJhdXRvaGVpZ2h0XFxcIiksIChULnBhcmFtcy5wYXJhbGxheCB8fCBULnBhcmFtcy53YXRjaFNsaWRlc1Zpc2liaWxpdHkpICYmIChULnBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzID0gITApLCBULnBhcmFtcy50b3VjaFJlbGVhc2VPbkVkZ2VzICYmIChULnBhcmFtcy5yZXNpc3RhbmNlUmF0aW8gPSAwKSwgW1xcXCJjdWJlXFxcIiwgXFxcImNvdmVyZmxvd1xcXCIsIFxcXCJmbGlwXFxcIl0uaW5kZXhPZihULnBhcmFtcy5lZmZlY3QpID49IDAgJiYgKFQuc3VwcG9ydC50cmFuc2Zvcm1zM2QgPyAoVC5wYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcyA9ICEwLCBULmNsYXNzTmFtZXMucHVzaChULnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzICsgXFxcIjNkXFxcIikpIDogVC5wYXJhbXMuZWZmZWN0ID0gXFxcInNsaWRlXFxcIiksIFxcXCJzbGlkZVxcXCIgIT09IFQucGFyYW1zLmVmZmVjdCAmJiBULmNsYXNzTmFtZXMucHVzaChULnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzICsgVC5wYXJhbXMuZWZmZWN0KSwgXFxcImN1YmVcXFwiID09PSBULnBhcmFtcy5lZmZlY3QgJiYgKFQucGFyYW1zLnJlc2lzdGFuY2VSYXRpbyA9IDAsIFQucGFyYW1zLnNsaWRlc1BlclZpZXcgPSAxLCBULnBhcmFtcy5zbGlkZXNQZXJDb2x1bW4gPSAxLCBULnBhcmFtcy5zbGlkZXNQZXJHcm91cCA9IDEsIFQucGFyYW1zLmNlbnRlcmVkU2xpZGVzID0gITEsIFQucGFyYW1zLnNwYWNlQmV0d2VlbiA9IDAsIFQucGFyYW1zLnZpcnR1YWxUcmFuc2xhdGUgPSAhMCksIFxcXCJmYWRlXFxcIiAhPT0gVC5wYXJhbXMuZWZmZWN0ICYmIFxcXCJmbGlwXFxcIiAhPT0gVC5wYXJhbXMuZWZmZWN0IHx8IChULnBhcmFtcy5zbGlkZXNQZXJWaWV3ID0gMSwgVC5wYXJhbXMuc2xpZGVzUGVyQ29sdW1uID0gMSwgVC5wYXJhbXMuc2xpZGVzUGVyR3JvdXAgPSAxLCBULnBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzID0gITAsIFQucGFyYW1zLnNwYWNlQmV0d2VlbiA9IDAsIHZvaWQgMCA9PT0gZyAmJiAoVC5wYXJhbXMudmlydHVhbFRyYW5zbGF0ZSA9ICEwKSksIFQucGFyYW1zLmdyYWJDdXJzb3IgJiYgVC5zdXBwb3J0LnRvdWNoICYmIChULnBhcmFtcy5ncmFiQ3Vyc29yID0gITEpLCBULndyYXBwZXIgPSBULmNvbnRhaW5lci5jaGlsZHJlbihcXFwiLlxcXCIgKyBULnBhcmFtcy53cmFwcGVyQ2xhc3MpLCBULnBhcmFtcy5wYWdpbmF0aW9uICYmIChULnBhZ2luYXRpb25Db250YWluZXIgPSBlKFQucGFyYW1zLnBhZ2luYXRpb24pLCBULnBhcmFtcy51bmlxdWVOYXZFbGVtZW50cyAmJiBcXFwic3RyaW5nXFxcIiA9PSB0eXBlb2YgVC5wYXJhbXMucGFnaW5hdGlvbiAmJiBULnBhZ2luYXRpb25Db250YWluZXIubGVuZ3RoID4gMSAmJiAxID09PSBULmNvbnRhaW5lci5maW5kKFQucGFyYW1zLnBhZ2luYXRpb24pLmxlbmd0aCAmJiAoVC5wYWdpbmF0aW9uQ29udGFpbmVyID0gVC5jb250YWluZXIuZmluZChULnBhcmFtcy5wYWdpbmF0aW9uKSksIFxcXCJidWxsZXRzXFxcIiA9PT0gVC5wYXJhbXMucGFnaW5hdGlvblR5cGUgJiYgVC5wYXJhbXMucGFnaW5hdGlvbkNsaWNrYWJsZSA/IFQucGFnaW5hdGlvbkNvbnRhaW5lci5hZGRDbGFzcyhULnBhcmFtcy5wYWdpbmF0aW9uTW9kaWZpZXJDbGFzcyArIFxcXCJjbGlja2FibGVcXFwiKSA6IFQucGFyYW1zLnBhZ2luYXRpb25DbGlja2FibGUgPSAhMSwgVC5wYWdpbmF0aW9uQ29udGFpbmVyLmFkZENsYXNzKFQucGFyYW1zLnBhZ2luYXRpb25Nb2RpZmllckNsYXNzICsgVC5wYXJhbXMucGFnaW5hdGlvblR5cGUpKSwgKFQucGFyYW1zLm5leHRCdXR0b24gfHwgVC5wYXJhbXMucHJldkJ1dHRvbikgJiYgKFQucGFyYW1zLm5leHRCdXR0b24gJiYgKFQubmV4dEJ1dHRvbiA9IGUoVC5wYXJhbXMubmV4dEJ1dHRvbiksIFQucGFyYW1zLnVuaXF1ZU5hdkVsZW1lbnRzICYmIFxcXCJzdHJpbmdcXFwiID09IHR5cGVvZiBULnBhcmFtcy5uZXh0QnV0dG9uICYmIFQubmV4dEJ1dHRvbi5sZW5ndGggPiAxICYmIDEgPT09IFQuY29udGFpbmVyLmZpbmQoVC5wYXJhbXMubmV4dEJ1dHRvbikubGVuZ3RoICYmIChULm5leHRCdXR0b24gPSBULmNvbnRhaW5lci5maW5kKFQucGFyYW1zLm5leHRCdXR0b24pKSksIFQucGFyYW1zLnByZXZCdXR0b24gJiYgKFQucHJldkJ1dHRvbiA9IGUoVC5wYXJhbXMucHJldkJ1dHRvbiksIFQucGFyYW1zLnVuaXF1ZU5hdkVsZW1lbnRzICYmIFxcXCJzdHJpbmdcXFwiID09IHR5cGVvZiBULnBhcmFtcy5wcmV2QnV0dG9uICYmIFQucHJldkJ1dHRvbi5sZW5ndGggPiAxICYmIDEgPT09IFQuY29udGFpbmVyLmZpbmQoVC5wYXJhbXMucHJldkJ1dHRvbikubGVuZ3RoICYmIChULnByZXZCdXR0b24gPSBULmNvbnRhaW5lci5maW5kKFQucGFyYW1zLnByZXZCdXR0b24pKSkpLCBULmlzSG9yaXpvbnRhbCA9IGZ1bmN0aW9uICgpIHtcXG4gICAgICAgIHJldHVybiBcXFwiaG9yaXpvbnRhbFxcXCIgPT09IFQucGFyYW1zLmRpcmVjdGlvbjtcXG4gICAgICB9LCBULnJ0bCA9IFQuaXNIb3Jpem9udGFsKCkgJiYgKFxcXCJydGxcXFwiID09PSBULmNvbnRhaW5lclswXS5kaXIudG9Mb3dlckNhc2UoKSB8fCBcXFwicnRsXFxcIiA9PT0gVC5jb250YWluZXIuY3NzKFxcXCJkaXJlY3Rpb25cXFwiKSksIFQucnRsICYmIFQuY2xhc3NOYW1lcy5wdXNoKFQucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MgKyBcXFwicnRsXFxcIiksIFQucnRsICYmIChULndyb25nUlRMID0gXFxcIi13ZWJraXQtYm94XFxcIiA9PT0gVC53cmFwcGVyLmNzcyhcXFwiZGlzcGxheVxcXCIpKSwgVC5wYXJhbXMuc2xpZGVzUGVyQ29sdW1uID4gMSAmJiBULmNsYXNzTmFtZXMucHVzaChULnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzICsgXFxcIm11bHRpcm93XFxcIiksIFQuZGV2aWNlLmFuZHJvaWQgJiYgVC5jbGFzc05hbWVzLnB1c2goVC5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcyArIFxcXCJhbmRyb2lkXFxcIiksIFQuY29udGFpbmVyLmFkZENsYXNzKFQuY2xhc3NOYW1lcy5qb2luKFxcXCIgXFxcIikpLCBULnRyYW5zbGF0ZSA9IDAsIFQucHJvZ3Jlc3MgPSAwLCBULnZlbG9jaXR5ID0gMCwgVC5sb2NrU3dpcGVUb05leHQgPSBmdW5jdGlvbiAoKSB7XFxuICAgICAgICBULnBhcmFtcy5hbGxvd1N3aXBlVG9OZXh0ID0gITEsIFQucGFyYW1zLmFsbG93U3dpcGVUb1ByZXYgPT09ICExICYmIFQucGFyYW1zLmdyYWJDdXJzb3IgJiYgVC51bnNldEdyYWJDdXJzb3IoKTtcXG4gICAgICB9LCBULmxvY2tTd2lwZVRvUHJldiA9IGZ1bmN0aW9uICgpIHtcXG4gICAgICAgIFQucGFyYW1zLmFsbG93U3dpcGVUb1ByZXYgPSAhMSwgVC5wYXJhbXMuYWxsb3dTd2lwZVRvTmV4dCA9PT0gITEgJiYgVC5wYXJhbXMuZ3JhYkN1cnNvciAmJiBULnVuc2V0R3JhYkN1cnNvcigpO1xcbiAgICAgIH0sIFQubG9ja1N3aXBlcyA9IGZ1bmN0aW9uICgpIHtcXG4gICAgICAgIFQucGFyYW1zLmFsbG93U3dpcGVUb05leHQgPSBULnBhcmFtcy5hbGxvd1N3aXBlVG9QcmV2ID0gITEsIFQucGFyYW1zLmdyYWJDdXJzb3IgJiYgVC51bnNldEdyYWJDdXJzb3IoKTtcXG4gICAgICB9LCBULnVubG9ja1N3aXBlVG9OZXh0ID0gZnVuY3Rpb24gKCkge1xcbiAgICAgICAgVC5wYXJhbXMuYWxsb3dTd2lwZVRvTmV4dCA9ICEwLCBULnBhcmFtcy5hbGxvd1N3aXBlVG9QcmV2ID09PSAhMCAmJiBULnBhcmFtcy5ncmFiQ3Vyc29yICYmIFQuc2V0R3JhYkN1cnNvcigpO1xcbiAgICAgIH0sIFQudW5sb2NrU3dpcGVUb1ByZXYgPSBmdW5jdGlvbiAoKSB7XFxuICAgICAgICBULnBhcmFtcy5hbGxvd1N3aXBlVG9QcmV2ID0gITAsIFQucGFyYW1zLmFsbG93U3dpcGVUb05leHQgPT09ICEwICYmIFQucGFyYW1zLmdyYWJDdXJzb3IgJiYgVC5zZXRHcmFiQ3Vyc29yKCk7XFxuICAgICAgfSwgVC51bmxvY2tTd2lwZXMgPSBmdW5jdGlvbiAoKSB7XFxuICAgICAgICBULnBhcmFtcy5hbGxvd1N3aXBlVG9OZXh0ID0gVC5wYXJhbXMuYWxsb3dTd2lwZVRvUHJldiA9ICEwLCBULnBhcmFtcy5ncmFiQ3Vyc29yICYmIFQuc2V0R3JhYkN1cnNvcigpO1xcbiAgICAgIH0sIFQuc2V0R3JhYkN1cnNvciA9IGZ1bmN0aW9uIChlKSB7XFxuICAgICAgICBULmNvbnRhaW5lclswXS5zdHlsZS5jdXJzb3IgPSBcXFwibW92ZVxcXCIsIFQuY29udGFpbmVyWzBdLnN0eWxlLmN1cnNvciA9IGUgPyBcXFwiLXdlYmtpdC1ncmFiYmluZ1xcXCIgOiBcXFwiLXdlYmtpdC1ncmFiXFxcIiwgVC5jb250YWluZXJbMF0uc3R5bGUuY3Vyc29yID0gZSA/IFxcXCItbW96LWdyYWJiaW5cXFwiIDogXFxcIi1tb3otZ3JhYlxcXCIsIFQuY29udGFpbmVyWzBdLnN0eWxlLmN1cnNvciA9IGUgPyBcXFwiZ3JhYmJpbmdcXFwiIDogXFxcImdyYWJcXFwiO1xcbiAgICAgIH0sIFQudW5zZXRHcmFiQ3Vyc29yID0gZnVuY3Rpb24gKCkge1xcbiAgICAgICAgVC5jb250YWluZXJbMF0uc3R5bGUuY3Vyc29yID0gXFxcIlxcXCI7XFxuICAgICAgfSwgVC5wYXJhbXMuZ3JhYkN1cnNvciAmJiBULnNldEdyYWJDdXJzb3IoKSwgVC5pbWFnZXNUb0xvYWQgPSBbXSwgVC5pbWFnZXNMb2FkZWQgPSAwLCBULmxvYWRJbWFnZSA9IGZ1bmN0aW9uIChlLCBhLCB0LCBzLCBpLCByKSB7XFxuICAgICAgICBmdW5jdGlvbiBuKCkge1xcbiAgICAgICAgICByICYmIHIoKTtcXG4gICAgICAgIH12YXIgbztlLmNvbXBsZXRlICYmIGkgPyBuKCkgOiBhID8gKG8gPSBuZXcgd2luZG93LkltYWdlKCksIG8ub25sb2FkID0gbiwgby5vbmVycm9yID0gbiwgcyAmJiAoby5zaXplcyA9IHMpLCB0ICYmIChvLnNyY3NldCA9IHQpLCBhICYmIChvLnNyYyA9IGEpKSA6IG4oKTtcXG4gICAgICB9LCBULnByZWxvYWRJbWFnZXMgPSBmdW5jdGlvbiAoKSB7XFxuICAgICAgICBmdW5jdGlvbiBlKCkge1xcbiAgICAgICAgICB2b2lkIDAgIT09IFQgJiYgbnVsbCAhPT0gVCAmJiBUICYmICh2b2lkIDAgIT09IFQuaW1hZ2VzTG9hZGVkICYmIFQuaW1hZ2VzTG9hZGVkKyssIFQuaW1hZ2VzTG9hZGVkID09PSBULmltYWdlc1RvTG9hZC5sZW5ndGggJiYgKFQucGFyYW1zLnVwZGF0ZU9uSW1hZ2VzUmVhZHkgJiYgVC51cGRhdGUoKSwgVC5lbWl0KFxcXCJvbkltYWdlc1JlYWR5XFxcIiwgVCkpKTtcXG4gICAgICAgIH1ULmltYWdlc1RvTG9hZCA9IFQuY29udGFpbmVyLmZpbmQoXFxcImltZ1xcXCIpO2ZvciAodmFyIGEgPSAwOyBhIDwgVC5pbWFnZXNUb0xvYWQubGVuZ3RoOyBhKyspIHtcXG4gICAgICAgICAgVC5sb2FkSW1hZ2UoVC5pbWFnZXNUb0xvYWRbYV0sIFQuaW1hZ2VzVG9Mb2FkW2FdLmN1cnJlbnRTcmMgfHwgVC5pbWFnZXNUb0xvYWRbYV0uZ2V0QXR0cmlidXRlKFxcXCJzcmNcXFwiKSwgVC5pbWFnZXNUb0xvYWRbYV0uc3Jjc2V0IHx8IFQuaW1hZ2VzVG9Mb2FkW2FdLmdldEF0dHJpYnV0ZShcXFwic3Jjc2V0XFxcIiksIFQuaW1hZ2VzVG9Mb2FkW2FdLnNpemVzIHx8IFQuaW1hZ2VzVG9Mb2FkW2FdLmdldEF0dHJpYnV0ZShcXFwic2l6ZXNcXFwiKSwgITAsIGUpO1xcbiAgICAgICAgfVxcbiAgICAgIH0sIFQuYXV0b3BsYXlUaW1lb3V0SWQgPSB2b2lkIDAsIFQuYXV0b3BsYXlpbmcgPSAhMSwgVC5hdXRvcGxheVBhdXNlZCA9ICExLCBULnN0YXJ0QXV0b3BsYXkgPSBmdW5jdGlvbiAoKSB7XFxuICAgICAgICByZXR1cm4gdm9pZCAwID09PSBULmF1dG9wbGF5VGltZW91dElkICYmICEhVC5wYXJhbXMuYXV0b3BsYXkgJiYgIVQuYXV0b3BsYXlpbmcgJiYgKFQuYXV0b3BsYXlpbmcgPSAhMCwgVC5lbWl0KFxcXCJvbkF1dG9wbGF5U3RhcnRcXFwiLCBUKSwgdm9pZCBuKCkpO1xcbiAgICAgIH0sIFQuc3RvcEF1dG9wbGF5ID0gZnVuY3Rpb24gKGUpIHtcXG4gICAgICAgIFQuYXV0b3BsYXlUaW1lb3V0SWQgJiYgKFQuYXV0b3BsYXlUaW1lb3V0SWQgJiYgY2xlYXJUaW1lb3V0KFQuYXV0b3BsYXlUaW1lb3V0SWQpLCBULmF1dG9wbGF5aW5nID0gITEsIFQuYXV0b3BsYXlUaW1lb3V0SWQgPSB2b2lkIDAsIFQuZW1pdChcXFwib25BdXRvcGxheVN0b3BcXFwiLCBUKSk7XFxuICAgICAgfSwgVC5wYXVzZUF1dG9wbGF5ID0gZnVuY3Rpb24gKGUpIHtcXG4gICAgICAgIFQuYXV0b3BsYXlQYXVzZWQgfHwgKFQuYXV0b3BsYXlUaW1lb3V0SWQgJiYgY2xlYXJUaW1lb3V0KFQuYXV0b3BsYXlUaW1lb3V0SWQpLCBULmF1dG9wbGF5UGF1c2VkID0gITAsIDAgPT09IGUgPyAoVC5hdXRvcGxheVBhdXNlZCA9ICExLCBuKCkpIDogVC53cmFwcGVyLnRyYW5zaXRpb25FbmQoZnVuY3Rpb24gKCkge1xcbiAgICAgICAgICBUICYmIChULmF1dG9wbGF5UGF1c2VkID0gITEsIFQuYXV0b3BsYXlpbmcgPyBuKCkgOiBULnN0b3BBdXRvcGxheSgpKTtcXG4gICAgICAgIH0pKTtcXG4gICAgICB9LCBULm1pblRyYW5zbGF0ZSA9IGZ1bmN0aW9uICgpIHtcXG4gICAgICAgIHJldHVybiAtVC5zbmFwR3JpZFswXTtcXG4gICAgICB9LCBULm1heFRyYW5zbGF0ZSA9IGZ1bmN0aW9uICgpIHtcXG4gICAgICAgIHJldHVybiAtVC5zbmFwR3JpZFtULnNuYXBHcmlkLmxlbmd0aCAtIDFdO1xcbiAgICAgIH0sIFQudXBkYXRlQXV0b0hlaWdodCA9IGZ1bmN0aW9uICgpIHtcXG4gICAgICAgIHZhciBlLFxcbiAgICAgICAgICAgIGEgPSBbXSxcXG4gICAgICAgICAgICB0ID0gMDtpZiAoXFxcImF1dG9cXFwiICE9PSBULnBhcmFtcy5zbGlkZXNQZXJWaWV3ICYmIFQucGFyYW1zLnNsaWRlc1BlclZpZXcgPiAxKSBmb3IgKGUgPSAwOyBlIDwgTWF0aC5jZWlsKFQucGFyYW1zLnNsaWRlc1BlclZpZXcpOyBlKyspIHtcXG4gICAgICAgICAgdmFyIHMgPSBULmFjdGl2ZUluZGV4ICsgZTtpZiAocyA+IFQuc2xpZGVzLmxlbmd0aCkgYnJlYWs7YS5wdXNoKFQuc2xpZGVzLmVxKHMpWzBdKTtcXG4gICAgICAgIH0gZWxzZSBhLnB1c2goVC5zbGlkZXMuZXEoVC5hY3RpdmVJbmRleClbMF0pO2ZvciAoZSA9IDA7IGUgPCBhLmxlbmd0aDsgZSsrKSB7XFxuICAgICAgICAgIGlmICh2b2lkIDAgIT09IGFbZV0pIHtcXG4gICAgICAgICAgICB2YXIgaSA9IGFbZV0ub2Zmc2V0SGVpZ2h0O3QgPSBpID4gdCA/IGkgOiB0O1xcbiAgICAgICAgICB9XFxuICAgICAgICB9dCAmJiBULndyYXBwZXIuY3NzKFxcXCJoZWlnaHRcXFwiLCB0ICsgXFxcInB4XFxcIik7XFxuICAgICAgfSwgVC51cGRhdGVDb250YWluZXJTaXplID0gZnVuY3Rpb24gKCkge1xcbiAgICAgICAgdmFyIGUsIGE7ZSA9IHZvaWQgMCAhPT0gVC5wYXJhbXMud2lkdGggPyBULnBhcmFtcy53aWR0aCA6IFQuY29udGFpbmVyWzBdLmNsaWVudFdpZHRoLCBhID0gdm9pZCAwICE9PSBULnBhcmFtcy5oZWlnaHQgPyBULnBhcmFtcy5oZWlnaHQgOiBULmNvbnRhaW5lclswXS5jbGllbnRIZWlnaHQsIDAgPT09IGUgJiYgVC5pc0hvcml6b250YWwoKSB8fCAwID09PSBhICYmICFULmlzSG9yaXpvbnRhbCgpIHx8IChlID0gZSAtIHBhcnNlSW50KFQuY29udGFpbmVyLmNzcyhcXFwicGFkZGluZy1sZWZ0XFxcIiksIDEwKSAtIHBhcnNlSW50KFQuY29udGFpbmVyLmNzcyhcXFwicGFkZGluZy1yaWdodFxcXCIpLCAxMCksIGEgPSBhIC0gcGFyc2VJbnQoVC5jb250YWluZXIuY3NzKFxcXCJwYWRkaW5nLXRvcFxcXCIpLCAxMCkgLSBwYXJzZUludChULmNvbnRhaW5lci5jc3MoXFxcInBhZGRpbmctYm90dG9tXFxcIiksIDEwKSwgVC53aWR0aCA9IGUsIFQuaGVpZ2h0ID0gYSwgVC5zaXplID0gVC5pc0hvcml6b250YWwoKSA/IFQud2lkdGggOiBULmhlaWdodCk7XFxuICAgICAgfSwgVC51cGRhdGVTbGlkZXNTaXplID0gZnVuY3Rpb24gKCkge1xcbiAgICAgICAgVC5zbGlkZXMgPSBULndyYXBwZXIuY2hpbGRyZW4oXFxcIi5cXFwiICsgVC5wYXJhbXMuc2xpZGVDbGFzcyksIFQuc25hcEdyaWQgPSBbXSwgVC5zbGlkZXNHcmlkID0gW10sIFQuc2xpZGVzU2l6ZXNHcmlkID0gW107dmFyIGUsXFxuICAgICAgICAgICAgYSA9IFQucGFyYW1zLnNwYWNlQmV0d2VlbixcXG4gICAgICAgICAgICB0ID0gLVQucGFyYW1zLnNsaWRlc09mZnNldEJlZm9yZSxcXG4gICAgICAgICAgICBzID0gMCxcXG4gICAgICAgICAgICBpID0gMDtpZiAodm9pZCAwICE9PSBULnNpemUpIHtcXG4gICAgICAgICAgXFxcInN0cmluZ1xcXCIgPT0gdHlwZW9mIGEgJiYgYS5pbmRleE9mKFxcXCIlXFxcIikgPj0gMCAmJiAoYSA9IHBhcnNlRmxvYXQoYS5yZXBsYWNlKFxcXCIlXFxcIiwgXFxcIlxcXCIpKSAvIDEwMCAqIFQuc2l6ZSksIFQudmlydHVhbFNpemUgPSAtYSwgVC5ydGwgPyBULnNsaWRlcy5jc3MoeyBtYXJnaW5MZWZ0OiBcXFwiXFxcIiwgbWFyZ2luVG9wOiBcXFwiXFxcIiB9KSA6IFQuc2xpZGVzLmNzcyh7IG1hcmdpblJpZ2h0OiBcXFwiXFxcIiwgbWFyZ2luQm90dG9tOiBcXFwiXFxcIiB9KTt2YXIgbjtULnBhcmFtcy5zbGlkZXNQZXJDb2x1bW4gPiAxICYmIChuID0gTWF0aC5mbG9vcihULnNsaWRlcy5sZW5ndGggLyBULnBhcmFtcy5zbGlkZXNQZXJDb2x1bW4pID09PSBULnNsaWRlcy5sZW5ndGggLyBULnBhcmFtcy5zbGlkZXNQZXJDb2x1bW4gPyBULnNsaWRlcy5sZW5ndGggOiBNYXRoLmNlaWwoVC5zbGlkZXMubGVuZ3RoIC8gVC5wYXJhbXMuc2xpZGVzUGVyQ29sdW1uKSAqIFQucGFyYW1zLnNsaWRlc1BlckNvbHVtbiwgXFxcImF1dG9cXFwiICE9PSBULnBhcmFtcy5zbGlkZXNQZXJWaWV3ICYmIFxcXCJyb3dcXFwiID09PSBULnBhcmFtcy5zbGlkZXNQZXJDb2x1bW5GaWxsICYmIChuID0gTWF0aC5tYXgobiwgVC5wYXJhbXMuc2xpZGVzUGVyVmlldyAqIFQucGFyYW1zLnNsaWRlc1BlckNvbHVtbikpKTt2YXIgbyxcXG4gICAgICAgICAgICAgIGwgPSBULnBhcmFtcy5zbGlkZXNQZXJDb2x1bW4sXFxuICAgICAgICAgICAgICBwID0gbiAvIGwsXFxuICAgICAgICAgICAgICBkID0gcCAtIChULnBhcmFtcy5zbGlkZXNQZXJDb2x1bW4gKiBwIC0gVC5zbGlkZXMubGVuZ3RoKTtmb3IgKGUgPSAwOyBlIDwgVC5zbGlkZXMubGVuZ3RoOyBlKyspIHtcXG4gICAgICAgICAgICBvID0gMDt2YXIgdSA9IFQuc2xpZGVzLmVxKGUpO2lmIChULnBhcmFtcy5zbGlkZXNQZXJDb2x1bW4gPiAxKSB7XFxuICAgICAgICAgICAgICB2YXIgYywgbSwgaDtcXFwiY29sdW1uXFxcIiA9PT0gVC5wYXJhbXMuc2xpZGVzUGVyQ29sdW1uRmlsbCA/IChtID0gTWF0aC5mbG9vcihlIC8gbCksIGggPSBlIC0gbSAqIGwsIChtID4gZCB8fCBtID09PSBkICYmIGggPT09IGwgLSAxKSAmJiArK2ggPj0gbCAmJiAoaCA9IDAsIG0rKyksIGMgPSBtICsgaCAqIG4gLyBsLCB1LmNzcyh7IFxcXCItd2Via2l0LWJveC1vcmRpbmFsLWdyb3VwXFxcIjogYywgXFxcIi1tb3otYm94LW9yZGluYWwtZ3JvdXBcXFwiOiBjLCBcXFwiLW1zLWZsZXgtb3JkZXJcXFwiOiBjLCBcXFwiLXdlYmtpdC1vcmRlclxcXCI6IGMsIG9yZGVyOiBjIH0pKSA6IChoID0gTWF0aC5mbG9vcihlIC8gcCksIG0gPSBlIC0gaCAqIHApLCB1LmNzcyhcXFwibWFyZ2luLVxcXCIgKyAoVC5pc0hvcml6b250YWwoKSA/IFxcXCJ0b3BcXFwiIDogXFxcImxlZnRcXFwiKSwgMCAhPT0gaCAmJiBULnBhcmFtcy5zcGFjZUJldHdlZW4gJiYgVC5wYXJhbXMuc3BhY2VCZXR3ZWVuICsgXFxcInB4XFxcIikuYXR0cihcXFwiZGF0YS1zd2lwZXItY29sdW1uXFxcIiwgbSkuYXR0cihcXFwiZGF0YS1zd2lwZXItcm93XFxcIiwgaCk7XFxuICAgICAgICAgICAgfVxcXCJub25lXFxcIiAhPT0gdS5jc3MoXFxcImRpc3BsYXlcXFwiKSAmJiAoXFxcImF1dG9cXFwiID09PSBULnBhcmFtcy5zbGlkZXNQZXJWaWV3ID8gKG8gPSBULmlzSG9yaXpvbnRhbCgpID8gdS5vdXRlcldpZHRoKCEwKSA6IHUub3V0ZXJIZWlnaHQoITApLCBULnBhcmFtcy5yb3VuZExlbmd0aHMgJiYgKG8gPSByKG8pKSkgOiAobyA9IChULnNpemUgLSAoVC5wYXJhbXMuc2xpZGVzUGVyVmlldyAtIDEpICogYSkgLyBULnBhcmFtcy5zbGlkZXNQZXJWaWV3LCBULnBhcmFtcy5yb3VuZExlbmd0aHMgJiYgKG8gPSByKG8pKSwgVC5pc0hvcml6b250YWwoKSA/IFQuc2xpZGVzW2VdLnN0eWxlLndpZHRoID0gbyArIFxcXCJweFxcXCIgOiBULnNsaWRlc1tlXS5zdHlsZS5oZWlnaHQgPSBvICsgXFxcInB4XFxcIiksIFQuc2xpZGVzW2VdLnN3aXBlclNsaWRlU2l6ZSA9IG8sIFQuc2xpZGVzU2l6ZXNHcmlkLnB1c2gobyksIFQucGFyYW1zLmNlbnRlcmVkU2xpZGVzID8gKHQgPSB0ICsgbyAvIDIgKyBzIC8gMiArIGEsIDAgPT09IHMgJiYgMCAhPT0gZSAmJiAodCA9IHQgLSBULnNpemUgLyAyIC0gYSksIDAgPT09IGUgJiYgKHQgPSB0IC0gVC5zaXplIC8gMiAtIGEpLCBNYXRoLmFicyh0KSA8IC4wMDEgJiYgKHQgPSAwKSwgaSAlIFQucGFyYW1zLnNsaWRlc1Blckdyb3VwID09IDAgJiYgVC5zbmFwR3JpZC5wdXNoKHQpLCBULnNsaWRlc0dyaWQucHVzaCh0KSkgOiAoaSAlIFQucGFyYW1zLnNsaWRlc1Blckdyb3VwID09IDAgJiYgVC5zbmFwR3JpZC5wdXNoKHQpLCBULnNsaWRlc0dyaWQucHVzaCh0KSwgdCA9IHQgKyBvICsgYSksIFQudmlydHVhbFNpemUgKz0gbyArIGEsIHMgPSBvLCBpKyspO1xcbiAgICAgICAgICB9VC52aXJ0dWFsU2l6ZSA9IE1hdGgubWF4KFQudmlydHVhbFNpemUsIFQuc2l6ZSkgKyBULnBhcmFtcy5zbGlkZXNPZmZzZXRBZnRlcjt2YXIgZztpZiAoVC5ydGwgJiYgVC53cm9uZ1JUTCAmJiAoXFxcInNsaWRlXFxcIiA9PT0gVC5wYXJhbXMuZWZmZWN0IHx8IFxcXCJjb3ZlcmZsb3dcXFwiID09PSBULnBhcmFtcy5lZmZlY3QpICYmIFQud3JhcHBlci5jc3MoeyB3aWR0aDogVC52aXJ0dWFsU2l6ZSArIFQucGFyYW1zLnNwYWNlQmV0d2VlbiArIFxcXCJweFxcXCIgfSksIFQuc3VwcG9ydC5mbGV4Ym94ICYmICFULnBhcmFtcy5zZXRXcmFwcGVyU2l6ZSB8fCAoVC5pc0hvcml6b250YWwoKSA/IFQud3JhcHBlci5jc3MoeyB3aWR0aDogVC52aXJ0dWFsU2l6ZSArIFQucGFyYW1zLnNwYWNlQmV0d2VlbiArIFxcXCJweFxcXCIgfSkgOiBULndyYXBwZXIuY3NzKHsgaGVpZ2h0OiBULnZpcnR1YWxTaXplICsgVC5wYXJhbXMuc3BhY2VCZXR3ZWVuICsgXFxcInB4XFxcIiB9KSksIFQucGFyYW1zLnNsaWRlc1BlckNvbHVtbiA+IDEgJiYgKFQudmlydHVhbFNpemUgPSAobyArIFQucGFyYW1zLnNwYWNlQmV0d2VlbikgKiBuLCBULnZpcnR1YWxTaXplID0gTWF0aC5jZWlsKFQudmlydHVhbFNpemUgLyBULnBhcmFtcy5zbGlkZXNQZXJDb2x1bW4pIC0gVC5wYXJhbXMuc3BhY2VCZXR3ZWVuLCBULmlzSG9yaXpvbnRhbCgpID8gVC53cmFwcGVyLmNzcyh7IHdpZHRoOiBULnZpcnR1YWxTaXplICsgVC5wYXJhbXMuc3BhY2VCZXR3ZWVuICsgXFxcInB4XFxcIiB9KSA6IFQud3JhcHBlci5jc3MoeyBoZWlnaHQ6IFQudmlydHVhbFNpemUgKyBULnBhcmFtcy5zcGFjZUJldHdlZW4gKyBcXFwicHhcXFwiIH0pLCBULnBhcmFtcy5jZW50ZXJlZFNsaWRlcykpIHtcXG4gICAgICAgICAgICBmb3IgKGcgPSBbXSwgZSA9IDA7IGUgPCBULnNuYXBHcmlkLmxlbmd0aDsgZSsrKSB7XFxuICAgICAgICAgICAgICBULnNuYXBHcmlkW2VdIDwgVC52aXJ0dWFsU2l6ZSArIFQuc25hcEdyaWRbMF0gJiYgZy5wdXNoKFQuc25hcEdyaWRbZV0pO1xcbiAgICAgICAgICAgIH1ULnNuYXBHcmlkID0gZztcXG4gICAgICAgICAgfWlmICghVC5wYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcXG4gICAgICAgICAgICBmb3IgKGcgPSBbXSwgZSA9IDA7IGUgPCBULnNuYXBHcmlkLmxlbmd0aDsgZSsrKSB7XFxuICAgICAgICAgICAgICBULnNuYXBHcmlkW2VdIDw9IFQudmlydHVhbFNpemUgLSBULnNpemUgJiYgZy5wdXNoKFQuc25hcEdyaWRbZV0pO1xcbiAgICAgICAgICAgIH1ULnNuYXBHcmlkID0gZywgTWF0aC5mbG9vcihULnZpcnR1YWxTaXplIC0gVC5zaXplKSAtIE1hdGguZmxvb3IoVC5zbmFwR3JpZFtULnNuYXBHcmlkLmxlbmd0aCAtIDFdKSA+IDEgJiYgVC5zbmFwR3JpZC5wdXNoKFQudmlydHVhbFNpemUgLSBULnNpemUpO1xcbiAgICAgICAgICB9MCA9PT0gVC5zbmFwR3JpZC5sZW5ndGggJiYgKFQuc25hcEdyaWQgPSBbMF0pLCAwICE9PSBULnBhcmFtcy5zcGFjZUJldHdlZW4gJiYgKFQuaXNIb3Jpem9udGFsKCkgPyBULnJ0bCA/IFQuc2xpZGVzLmNzcyh7IG1hcmdpbkxlZnQ6IGEgKyBcXFwicHhcXFwiIH0pIDogVC5zbGlkZXMuY3NzKHsgbWFyZ2luUmlnaHQ6IGEgKyBcXFwicHhcXFwiIH0pIDogVC5zbGlkZXMuY3NzKHsgbWFyZ2luQm90dG9tOiBhICsgXFxcInB4XFxcIiB9KSksIFQucGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3MgJiYgVC51cGRhdGVTbGlkZXNPZmZzZXQoKTtcXG4gICAgICAgIH1cXG4gICAgICB9LCBULnVwZGF0ZVNsaWRlc09mZnNldCA9IGZ1bmN0aW9uICgpIHtcXG4gICAgICAgIGZvciAodmFyIGUgPSAwOyBlIDwgVC5zbGlkZXMubGVuZ3RoOyBlKyspIHtcXG4gICAgICAgICAgVC5zbGlkZXNbZV0uc3dpcGVyU2xpZGVPZmZzZXQgPSBULmlzSG9yaXpvbnRhbCgpID8gVC5zbGlkZXNbZV0ub2Zmc2V0TGVmdCA6IFQuc2xpZGVzW2VdLm9mZnNldFRvcDtcXG4gICAgICAgIH1cXG4gICAgICB9LCBULmN1cnJlbnRTbGlkZXNQZXJWaWV3ID0gZnVuY3Rpb24gKCkge1xcbiAgICAgICAgdmFyIGUsXFxuICAgICAgICAgICAgYSxcXG4gICAgICAgICAgICB0ID0gMTtpZiAoVC5wYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcXG4gICAgICAgICAgdmFyIHMsXFxuICAgICAgICAgICAgICBpID0gVC5zbGlkZXNbVC5hY3RpdmVJbmRleF0uc3dpcGVyU2xpZGVTaXplO2ZvciAoZSA9IFQuYWN0aXZlSW5kZXggKyAxOyBlIDwgVC5zbGlkZXMubGVuZ3RoOyBlKyspIHtcXG4gICAgICAgICAgICBULnNsaWRlc1tlXSAmJiAhcyAmJiAoaSArPSBULnNsaWRlc1tlXS5zd2lwZXJTbGlkZVNpemUsIHQrKywgaSA+IFQuc2l6ZSAmJiAocyA9ICEwKSk7XFxuICAgICAgICAgIH1mb3IgKGEgPSBULmFjdGl2ZUluZGV4IC0gMTsgYSA+PSAwOyBhLS0pIHtcXG4gICAgICAgICAgICBULnNsaWRlc1thXSAmJiAhcyAmJiAoaSArPSBULnNsaWRlc1thXS5zd2lwZXJTbGlkZVNpemUsIHQrKywgaSA+IFQuc2l6ZSAmJiAocyA9ICEwKSk7XFxuICAgICAgICAgIH1cXG4gICAgICAgIH0gZWxzZSBmb3IgKGUgPSBULmFjdGl2ZUluZGV4ICsgMTsgZSA8IFQuc2xpZGVzLmxlbmd0aDsgZSsrKSB7XFxuICAgICAgICAgIFQuc2xpZGVzR3JpZFtlXSAtIFQuc2xpZGVzR3JpZFtULmFjdGl2ZUluZGV4XSA8IFQuc2l6ZSAmJiB0Kys7XFxuICAgICAgICB9cmV0dXJuIHQ7XFxuICAgICAgfSwgVC51cGRhdGVTbGlkZXNQcm9ncmVzcyA9IGZ1bmN0aW9uIChlKSB7XFxuICAgICAgICBpZiAodm9pZCAwID09PSBlICYmIChlID0gVC50cmFuc2xhdGUgfHwgMCksIDAgIT09IFQuc2xpZGVzLmxlbmd0aCkge1xcbiAgICAgICAgICB2b2lkIDAgPT09IFQuc2xpZGVzWzBdLnN3aXBlclNsaWRlT2Zmc2V0ICYmIFQudXBkYXRlU2xpZGVzT2Zmc2V0KCk7dmFyIGEgPSAtZTtULnJ0bCAmJiAoYSA9IGUpLCBULnNsaWRlcy5yZW1vdmVDbGFzcyhULnBhcmFtcy5zbGlkZVZpc2libGVDbGFzcyk7Zm9yICh2YXIgdCA9IDA7IHQgPCBULnNsaWRlcy5sZW5ndGg7IHQrKykge1xcbiAgICAgICAgICAgIHZhciBzID0gVC5zbGlkZXNbdF0sXFxuICAgICAgICAgICAgICAgIGkgPSAoYSArIChULnBhcmFtcy5jZW50ZXJlZFNsaWRlcyA/IFQubWluVHJhbnNsYXRlKCkgOiAwKSAtIHMuc3dpcGVyU2xpZGVPZmZzZXQpIC8gKHMuc3dpcGVyU2xpZGVTaXplICsgVC5wYXJhbXMuc3BhY2VCZXR3ZWVuKTtpZiAoVC5wYXJhbXMud2F0Y2hTbGlkZXNWaXNpYmlsaXR5KSB7XFxuICAgICAgICAgICAgICB2YXIgciA9IC0oYSAtIHMuc3dpcGVyU2xpZGVPZmZzZXQpLFxcbiAgICAgICAgICAgICAgICAgIG4gPSByICsgVC5zbGlkZXNTaXplc0dyaWRbdF07KHIgPj0gMCAmJiByIDwgVC5zaXplIHx8IG4gPiAwICYmIG4gPD0gVC5zaXplIHx8IHIgPD0gMCAmJiBuID49IFQuc2l6ZSkgJiYgVC5zbGlkZXMuZXEodCkuYWRkQ2xhc3MoVC5wYXJhbXMuc2xpZGVWaXNpYmxlQ2xhc3MpO1xcbiAgICAgICAgICAgIH1zLnByb2dyZXNzID0gVC5ydGwgPyAtaSA6IGk7XFxuICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICB9LCBULnVwZGF0ZVByb2dyZXNzID0gZnVuY3Rpb24gKGUpIHtcXG4gICAgICAgIHZvaWQgMCA9PT0gZSAmJiAoZSA9IFQudHJhbnNsYXRlIHx8IDApO3ZhciBhID0gVC5tYXhUcmFuc2xhdGUoKSAtIFQubWluVHJhbnNsYXRlKCksXFxuICAgICAgICAgICAgdCA9IFQuaXNCZWdpbm5pbmcsXFxuICAgICAgICAgICAgcyA9IFQuaXNFbmQ7MCA9PT0gYSA/IChULnByb2dyZXNzID0gMCwgVC5pc0JlZ2lubmluZyA9IFQuaXNFbmQgPSAhMCkgOiAoVC5wcm9ncmVzcyA9IChlIC0gVC5taW5UcmFuc2xhdGUoKSkgLyBhLCBULmlzQmVnaW5uaW5nID0gVC5wcm9ncmVzcyA8PSAwLCBULmlzRW5kID0gVC5wcm9ncmVzcyA+PSAxKSwgVC5pc0JlZ2lubmluZyAmJiAhdCAmJiBULmVtaXQoXFxcIm9uUmVhY2hCZWdpbm5pbmdcXFwiLCBUKSwgVC5pc0VuZCAmJiAhcyAmJiBULmVtaXQoXFxcIm9uUmVhY2hFbmRcXFwiLCBUKSwgVC5wYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcyAmJiBULnVwZGF0ZVNsaWRlc1Byb2dyZXNzKGUpLCBULmVtaXQoXFxcIm9uUHJvZ3Jlc3NcXFwiLCBULCBULnByb2dyZXNzKTtcXG4gICAgICB9LCBULnVwZGF0ZUFjdGl2ZUluZGV4ID0gZnVuY3Rpb24gKCkge1xcbiAgICAgICAgdmFyIGUsXFxuICAgICAgICAgICAgYSxcXG4gICAgICAgICAgICB0LFxcbiAgICAgICAgICAgIHMgPSBULnJ0bCA/IFQudHJhbnNsYXRlIDogLVQudHJhbnNsYXRlO2ZvciAoYSA9IDA7IGEgPCBULnNsaWRlc0dyaWQubGVuZ3RoOyBhKyspIHtcXG4gICAgICAgICAgdm9pZCAwICE9PSBULnNsaWRlc0dyaWRbYSArIDFdID8gcyA+PSBULnNsaWRlc0dyaWRbYV0gJiYgcyA8IFQuc2xpZGVzR3JpZFthICsgMV0gLSAoVC5zbGlkZXNHcmlkW2EgKyAxXSAtIFQuc2xpZGVzR3JpZFthXSkgLyAyID8gZSA9IGEgOiBzID49IFQuc2xpZGVzR3JpZFthXSAmJiBzIDwgVC5zbGlkZXNHcmlkW2EgKyAxXSAmJiAoZSA9IGEgKyAxKSA6IHMgPj0gVC5zbGlkZXNHcmlkW2FdICYmIChlID0gYSk7XFxuICAgICAgICB9VC5wYXJhbXMubm9ybWFsaXplU2xpZGVJbmRleCAmJiAoZSA8IDAgfHwgdm9pZCAwID09PSBlKSAmJiAoZSA9IDApLCB0ID0gTWF0aC5mbG9vcihlIC8gVC5wYXJhbXMuc2xpZGVzUGVyR3JvdXApLCB0ID49IFQuc25hcEdyaWQubGVuZ3RoICYmICh0ID0gVC5zbmFwR3JpZC5sZW5ndGggLSAxKSwgZSAhPT0gVC5hY3RpdmVJbmRleCAmJiAoVC5zbmFwSW5kZXggPSB0LCBULnByZXZpb3VzSW5kZXggPSBULmFjdGl2ZUluZGV4LCBULmFjdGl2ZUluZGV4ID0gZSwgVC51cGRhdGVDbGFzc2VzKCksIFQudXBkYXRlUmVhbEluZGV4KCkpO1xcbiAgICAgIH0sIFQudXBkYXRlUmVhbEluZGV4ID0gZnVuY3Rpb24gKCkge1xcbiAgICAgICAgVC5yZWFsSW5kZXggPSBwYXJzZUludChULnNsaWRlcy5lcShULmFjdGl2ZUluZGV4KS5hdHRyKFxcXCJkYXRhLXN3aXBlci1zbGlkZS1pbmRleFxcXCIpIHx8IFQuYWN0aXZlSW5kZXgsIDEwKTtcXG4gICAgICB9LCBULnVwZGF0ZUNsYXNzZXMgPSBmdW5jdGlvbiAoKSB7XFxuICAgICAgICBULnNsaWRlcy5yZW1vdmVDbGFzcyhULnBhcmFtcy5zbGlkZUFjdGl2ZUNsYXNzICsgXFxcIiBcXFwiICsgVC5wYXJhbXMuc2xpZGVOZXh0Q2xhc3MgKyBcXFwiIFxcXCIgKyBULnBhcmFtcy5zbGlkZVByZXZDbGFzcyArIFxcXCIgXFxcIiArIFQucGFyYW1zLnNsaWRlRHVwbGljYXRlQWN0aXZlQ2xhc3MgKyBcXFwiIFxcXCIgKyBULnBhcmFtcy5zbGlkZUR1cGxpY2F0ZU5leHRDbGFzcyArIFxcXCIgXFxcIiArIFQucGFyYW1zLnNsaWRlRHVwbGljYXRlUHJldkNsYXNzKTt2YXIgYSA9IFQuc2xpZGVzLmVxKFQuYWN0aXZlSW5kZXgpO2EuYWRkQ2xhc3MoVC5wYXJhbXMuc2xpZGVBY3RpdmVDbGFzcyksIGkubG9vcCAmJiAoYS5oYXNDbGFzcyhULnBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSA/IFQud3JhcHBlci5jaGlsZHJlbihcXFwiLlxcXCIgKyBULnBhcmFtcy5zbGlkZUNsYXNzICsgXFxcIjpub3QoLlxcXCIgKyBULnBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzICsgJylbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XFxcIicgKyBULnJlYWxJbmRleCArICdcXFwiXScpLmFkZENsYXNzKFQucGFyYW1zLnNsaWRlRHVwbGljYXRlQWN0aXZlQ2xhc3MpIDogVC53cmFwcGVyLmNoaWxkcmVuKFxcXCIuXFxcIiArIFQucGFyYW1zLnNsaWRlQ2xhc3MgKyBcXFwiLlxcXCIgKyBULnBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzICsgJ1tkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cXFwiJyArIFQucmVhbEluZGV4ICsgJ1xcXCJdJykuYWRkQ2xhc3MoVC5wYXJhbXMuc2xpZGVEdXBsaWNhdGVBY3RpdmVDbGFzcykpO3ZhciB0ID0gYS5uZXh0KFxcXCIuXFxcIiArIFQucGFyYW1zLnNsaWRlQ2xhc3MpLmFkZENsYXNzKFQucGFyYW1zLnNsaWRlTmV4dENsYXNzKTtULnBhcmFtcy5sb29wICYmIDAgPT09IHQubGVuZ3RoICYmICh0ID0gVC5zbGlkZXMuZXEoMCksIHQuYWRkQ2xhc3MoVC5wYXJhbXMuc2xpZGVOZXh0Q2xhc3MpKTt2YXIgcyA9IGEucHJldihcXFwiLlxcXCIgKyBULnBhcmFtcy5zbGlkZUNsYXNzKS5hZGRDbGFzcyhULnBhcmFtcy5zbGlkZVByZXZDbGFzcyk7aWYgKFQucGFyYW1zLmxvb3AgJiYgMCA9PT0gcy5sZW5ndGggJiYgKHMgPSBULnNsaWRlcy5lcSgtMSksIHMuYWRkQ2xhc3MoVC5wYXJhbXMuc2xpZGVQcmV2Q2xhc3MpKSwgaS5sb29wICYmICh0Lmhhc0NsYXNzKFQucGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpID8gVC53cmFwcGVyLmNoaWxkcmVuKFxcXCIuXFxcIiArIFQucGFyYW1zLnNsaWRlQ2xhc3MgKyBcXFwiOm5vdCguXFxcIiArIFQucGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MgKyAnKVtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cXFwiJyArIHQuYXR0cihcXFwiZGF0YS1zd2lwZXItc2xpZGUtaW5kZXhcXFwiKSArICdcXFwiXScpLmFkZENsYXNzKFQucGFyYW1zLnNsaWRlRHVwbGljYXRlTmV4dENsYXNzKSA6IFQud3JhcHBlci5jaGlsZHJlbihcXFwiLlxcXCIgKyBULnBhcmFtcy5zbGlkZUNsYXNzICsgXFxcIi5cXFwiICsgVC5wYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcyArICdbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XFxcIicgKyB0LmF0dHIoXFxcImRhdGEtc3dpcGVyLXNsaWRlLWluZGV4XFxcIikgKyAnXFxcIl0nKS5hZGRDbGFzcyhULnBhcmFtcy5zbGlkZUR1cGxpY2F0ZU5leHRDbGFzcyksIHMuaGFzQ2xhc3MoVC5wYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcykgPyBULndyYXBwZXIuY2hpbGRyZW4oXFxcIi5cXFwiICsgVC5wYXJhbXMuc2xpZGVDbGFzcyArIFxcXCI6bm90KC5cXFwiICsgVC5wYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcyArICcpW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVxcXCInICsgcy5hdHRyKFxcXCJkYXRhLXN3aXBlci1zbGlkZS1pbmRleFxcXCIpICsgJ1xcXCJdJykuYWRkQ2xhc3MoVC5wYXJhbXMuc2xpZGVEdXBsaWNhdGVQcmV2Q2xhc3MpIDogVC53cmFwcGVyLmNoaWxkcmVuKFxcXCIuXFxcIiArIFQucGFyYW1zLnNsaWRlQ2xhc3MgKyBcXFwiLlxcXCIgKyBULnBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzICsgJ1tkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cXFwiJyArIHMuYXR0cihcXFwiZGF0YS1zd2lwZXItc2xpZGUtaW5kZXhcXFwiKSArICdcXFwiXScpLmFkZENsYXNzKFQucGFyYW1zLnNsaWRlRHVwbGljYXRlUHJldkNsYXNzKSksIFQucGFnaW5hdGlvbkNvbnRhaW5lciAmJiBULnBhZ2luYXRpb25Db250YWluZXIubGVuZ3RoID4gMCkge1xcbiAgICAgICAgICB2YXIgcixcXG4gICAgICAgICAgICAgIG4gPSBULnBhcmFtcy5sb29wID8gTWF0aC5jZWlsKChULnNsaWRlcy5sZW5ndGggLSAyICogVC5sb29wZWRTbGlkZXMpIC8gVC5wYXJhbXMuc2xpZGVzUGVyR3JvdXApIDogVC5zbmFwR3JpZC5sZW5ndGg7aWYgKFQucGFyYW1zLmxvb3AgPyAociA9IE1hdGguY2VpbCgoVC5hY3RpdmVJbmRleCAtIFQubG9vcGVkU2xpZGVzKSAvIFQucGFyYW1zLnNsaWRlc1Blckdyb3VwKSwgciA+IFQuc2xpZGVzLmxlbmd0aCAtIDEgLSAyICogVC5sb29wZWRTbGlkZXMgJiYgKHIgLT0gVC5zbGlkZXMubGVuZ3RoIC0gMiAqIFQubG9vcGVkU2xpZGVzKSwgciA+IG4gLSAxICYmIChyIC09IG4pLCByIDwgMCAmJiBcXFwiYnVsbGV0c1xcXCIgIT09IFQucGFyYW1zLnBhZ2luYXRpb25UeXBlICYmIChyID0gbiArIHIpKSA6IHIgPSB2b2lkIDAgIT09IFQuc25hcEluZGV4ID8gVC5zbmFwSW5kZXggOiBULmFjdGl2ZUluZGV4IHx8IDAsIFxcXCJidWxsZXRzXFxcIiA9PT0gVC5wYXJhbXMucGFnaW5hdGlvblR5cGUgJiYgVC5idWxsZXRzICYmIFQuYnVsbGV0cy5sZW5ndGggPiAwICYmIChULmJ1bGxldHMucmVtb3ZlQ2xhc3MoVC5wYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MpLCBULnBhZ2luYXRpb25Db250YWluZXIubGVuZ3RoID4gMSA/IFQuYnVsbGV0cy5lYWNoKGZ1bmN0aW9uICgpIHtcXG4gICAgICAgICAgICBlKHRoaXMpLmluZGV4KCkgPT09IHIgJiYgZSh0aGlzKS5hZGRDbGFzcyhULnBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyk7XFxuICAgICAgICAgIH0pIDogVC5idWxsZXRzLmVxKHIpLmFkZENsYXNzKFQucGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzKSksIFxcXCJmcmFjdGlvblxcXCIgPT09IFQucGFyYW1zLnBhZ2luYXRpb25UeXBlICYmIChULnBhZ2luYXRpb25Db250YWluZXIuZmluZChcXFwiLlxcXCIgKyBULnBhcmFtcy5wYWdpbmF0aW9uQ3VycmVudENsYXNzKS50ZXh0KHIgKyAxKSwgVC5wYWdpbmF0aW9uQ29udGFpbmVyLmZpbmQoXFxcIi5cXFwiICsgVC5wYXJhbXMucGFnaW5hdGlvblRvdGFsQ2xhc3MpLnRleHQobikpLCBcXFwicHJvZ3Jlc3NcXFwiID09PSBULnBhcmFtcy5wYWdpbmF0aW9uVHlwZSkge1xcbiAgICAgICAgICAgIHZhciBvID0gKHIgKyAxKSAvIG4sXFxuICAgICAgICAgICAgICAgIGwgPSBvLFxcbiAgICAgICAgICAgICAgICBwID0gMTtULmlzSG9yaXpvbnRhbCgpIHx8IChwID0gbywgbCA9IDEpLCBULnBhZ2luYXRpb25Db250YWluZXIuZmluZChcXFwiLlxcXCIgKyBULnBhcmFtcy5wYWdpbmF0aW9uUHJvZ3Jlc3NiYXJDbGFzcykudHJhbnNmb3JtKFxcXCJ0cmFuc2xhdGUzZCgwLDAsMCkgc2NhbGVYKFxcXCIgKyBsICsgXFxcIikgc2NhbGVZKFxcXCIgKyBwICsgXFxcIilcXFwiKS50cmFuc2l0aW9uKFQucGFyYW1zLnNwZWVkKTtcXG4gICAgICAgICAgfVxcXCJjdXN0b21cXFwiID09PSBULnBhcmFtcy5wYWdpbmF0aW9uVHlwZSAmJiBULnBhcmFtcy5wYWdpbmF0aW9uQ3VzdG9tUmVuZGVyICYmIChULnBhZ2luYXRpb25Db250YWluZXIuaHRtbChULnBhcmFtcy5wYWdpbmF0aW9uQ3VzdG9tUmVuZGVyKFQsIHIgKyAxLCBuKSksIFQuZW1pdChcXFwib25QYWdpbmF0aW9uUmVuZGVyZWRcXFwiLCBULCBULnBhZ2luYXRpb25Db250YWluZXJbMF0pKTtcXG4gICAgICAgIH1ULnBhcmFtcy5sb29wIHx8IChULnBhcmFtcy5wcmV2QnV0dG9uICYmIFQucHJldkJ1dHRvbiAmJiBULnByZXZCdXR0b24ubGVuZ3RoID4gMCAmJiAoVC5pc0JlZ2lubmluZyA/IChULnByZXZCdXR0b24uYWRkQ2xhc3MoVC5wYXJhbXMuYnV0dG9uRGlzYWJsZWRDbGFzcyksIFQucGFyYW1zLmExMXkgJiYgVC5hMTF5ICYmIFQuYTExeS5kaXNhYmxlKFQucHJldkJ1dHRvbikpIDogKFQucHJldkJ1dHRvbi5yZW1vdmVDbGFzcyhULnBhcmFtcy5idXR0b25EaXNhYmxlZENsYXNzKSwgVC5wYXJhbXMuYTExeSAmJiBULmExMXkgJiYgVC5hMTF5LmVuYWJsZShULnByZXZCdXR0b24pKSksIFQucGFyYW1zLm5leHRCdXR0b24gJiYgVC5uZXh0QnV0dG9uICYmIFQubmV4dEJ1dHRvbi5sZW5ndGggPiAwICYmIChULmlzRW5kID8gKFQubmV4dEJ1dHRvbi5hZGRDbGFzcyhULnBhcmFtcy5idXR0b25EaXNhYmxlZENsYXNzKSwgVC5wYXJhbXMuYTExeSAmJiBULmExMXkgJiYgVC5hMTF5LmRpc2FibGUoVC5uZXh0QnV0dG9uKSkgOiAoVC5uZXh0QnV0dG9uLnJlbW92ZUNsYXNzKFQucGFyYW1zLmJ1dHRvbkRpc2FibGVkQ2xhc3MpLCBULnBhcmFtcy5hMTF5ICYmIFQuYTExeSAmJiBULmExMXkuZW5hYmxlKFQubmV4dEJ1dHRvbikpKSk7XFxuICAgICAgfSwgVC51cGRhdGVQYWdpbmF0aW9uID0gZnVuY3Rpb24gKCkge1xcbiAgICAgICAgaWYgKFQucGFyYW1zLnBhZ2luYXRpb24gJiYgVC5wYWdpbmF0aW9uQ29udGFpbmVyICYmIFQucGFnaW5hdGlvbkNvbnRhaW5lci5sZW5ndGggPiAwKSB7XFxuICAgICAgICAgIHZhciBlID0gXFxcIlxcXCI7aWYgKFxcXCJidWxsZXRzXFxcIiA9PT0gVC5wYXJhbXMucGFnaW5hdGlvblR5cGUpIHtcXG4gICAgICAgICAgICBmb3IgKHZhciBhID0gVC5wYXJhbXMubG9vcCA/IE1hdGguY2VpbCgoVC5zbGlkZXMubGVuZ3RoIC0gMiAqIFQubG9vcGVkU2xpZGVzKSAvIFQucGFyYW1zLnNsaWRlc1Blckdyb3VwKSA6IFQuc25hcEdyaWQubGVuZ3RoLCB0ID0gMDsgdCA8IGE7IHQrKykge1xcbiAgICAgICAgICAgICAgZSArPSBULnBhcmFtcy5wYWdpbmF0aW9uQnVsbGV0UmVuZGVyID8gVC5wYXJhbXMucGFnaW5hdGlvbkJ1bGxldFJlbmRlcihULCB0LCBULnBhcmFtcy5idWxsZXRDbGFzcykgOiBcXFwiPFxcXCIgKyBULnBhcmFtcy5wYWdpbmF0aW9uRWxlbWVudCArICcgY2xhc3M9XFxcIicgKyBULnBhcmFtcy5idWxsZXRDbGFzcyArICdcXFwiPjwvJyArIFQucGFyYW1zLnBhZ2luYXRpb25FbGVtZW50ICsgXFxcIj5cXFwiO1xcbiAgICAgICAgICAgIH1ULnBhZ2luYXRpb25Db250YWluZXIuaHRtbChlKSwgVC5idWxsZXRzID0gVC5wYWdpbmF0aW9uQ29udGFpbmVyLmZpbmQoXFxcIi5cXFwiICsgVC5wYXJhbXMuYnVsbGV0Q2xhc3MpLCBULnBhcmFtcy5wYWdpbmF0aW9uQ2xpY2thYmxlICYmIFQucGFyYW1zLmExMXkgJiYgVC5hMTF5ICYmIFQuYTExeS5pbml0UGFnaW5hdGlvbigpO1xcbiAgICAgICAgICB9XFxcImZyYWN0aW9uXFxcIiA9PT0gVC5wYXJhbXMucGFnaW5hdGlvblR5cGUgJiYgKGUgPSBULnBhcmFtcy5wYWdpbmF0aW9uRnJhY3Rpb25SZW5kZXIgPyBULnBhcmFtcy5wYWdpbmF0aW9uRnJhY3Rpb25SZW5kZXIoVCwgVC5wYXJhbXMucGFnaW5hdGlvbkN1cnJlbnRDbGFzcywgVC5wYXJhbXMucGFnaW5hdGlvblRvdGFsQ2xhc3MpIDogJzxzcGFuIGNsYXNzPVxcXCInICsgVC5wYXJhbXMucGFnaW5hdGlvbkN1cnJlbnRDbGFzcyArICdcXFwiPjwvc3Bhbj4gLyA8c3BhbiBjbGFzcz1cXFwiJyArIFQucGFyYW1zLnBhZ2luYXRpb25Ub3RhbENsYXNzICsgJ1xcXCI+PC9zcGFuPicsIFQucGFnaW5hdGlvbkNvbnRhaW5lci5odG1sKGUpKSwgXFxcInByb2dyZXNzXFxcIiA9PT0gVC5wYXJhbXMucGFnaW5hdGlvblR5cGUgJiYgKGUgPSBULnBhcmFtcy5wYWdpbmF0aW9uUHJvZ3Jlc3NSZW5kZXIgPyBULnBhcmFtcy5wYWdpbmF0aW9uUHJvZ3Jlc3NSZW5kZXIoVCwgVC5wYXJhbXMucGFnaW5hdGlvblByb2dyZXNzYmFyQ2xhc3MpIDogJzxzcGFuIGNsYXNzPVxcXCInICsgVC5wYXJhbXMucGFnaW5hdGlvblByb2dyZXNzYmFyQ2xhc3MgKyAnXFxcIj48L3NwYW4+JywgVC5wYWdpbmF0aW9uQ29udGFpbmVyLmh0bWwoZSkpLCBcXFwiY3VzdG9tXFxcIiAhPT0gVC5wYXJhbXMucGFnaW5hdGlvblR5cGUgJiYgVC5lbWl0KFxcXCJvblBhZ2luYXRpb25SZW5kZXJlZFxcXCIsIFQsIFQucGFnaW5hdGlvbkNvbnRhaW5lclswXSk7XFxuICAgICAgICB9XFxuICAgICAgfSwgVC51cGRhdGUgPSBmdW5jdGlvbiAoZSkge1xcbiAgICAgICAgZnVuY3Rpb24gYSgpIHtcXG4gICAgICAgICAgVC5ydGwsIFQudHJhbnNsYXRlO3QgPSBNYXRoLm1pbihNYXRoLm1heChULnRyYW5zbGF0ZSwgVC5tYXhUcmFuc2xhdGUoKSksIFQubWluVHJhbnNsYXRlKCkpLCBULnNldFdyYXBwZXJUcmFuc2xhdGUodCksIFQudXBkYXRlQWN0aXZlSW5kZXgoKSwgVC51cGRhdGVDbGFzc2VzKCk7XFxuICAgICAgICB9aWYgKFQpIHtcXG4gICAgICAgICAgVC51cGRhdGVDb250YWluZXJTaXplKCksIFQudXBkYXRlU2xpZGVzU2l6ZSgpLCBULnVwZGF0ZVByb2dyZXNzKCksIFQudXBkYXRlUGFnaW5hdGlvbigpLCBULnVwZGF0ZUNsYXNzZXMoKSwgVC5wYXJhbXMuc2Nyb2xsYmFyICYmIFQuc2Nyb2xsYmFyICYmIFQuc2Nyb2xsYmFyLnNldCgpO3ZhciB0O2lmIChlKSB7XFxuICAgICAgICAgICAgVC5jb250cm9sbGVyICYmIFQuY29udHJvbGxlci5zcGxpbmUgJiYgKFQuY29udHJvbGxlci5zcGxpbmUgPSB2b2lkIDApLCBULnBhcmFtcy5mcmVlTW9kZSA/IChhKCksIFQucGFyYW1zLmF1dG9IZWlnaHQgJiYgVC51cGRhdGVBdXRvSGVpZ2h0KCkpIDogKChcXFwiYXV0b1xcXCIgPT09IFQucGFyYW1zLnNsaWRlc1BlclZpZXcgfHwgVC5wYXJhbXMuc2xpZGVzUGVyVmlldyA+IDEpICYmIFQuaXNFbmQgJiYgIVQucGFyYW1zLmNlbnRlcmVkU2xpZGVzID8gVC5zbGlkZVRvKFQuc2xpZGVzLmxlbmd0aCAtIDEsIDAsICExLCAhMCkgOiBULnNsaWRlVG8oVC5hY3RpdmVJbmRleCwgMCwgITEsICEwKSkgfHwgYSgpO1xcbiAgICAgICAgICB9IGVsc2UgVC5wYXJhbXMuYXV0b0hlaWdodCAmJiBULnVwZGF0ZUF1dG9IZWlnaHQoKTtcXG4gICAgICAgIH1cXG4gICAgICB9LCBULm9uUmVzaXplID0gZnVuY3Rpb24gKGUpIHtcXG4gICAgICAgIFQucGFyYW1zLm9uQmVmb3JlUmVzaXplICYmIFQucGFyYW1zLm9uQmVmb3JlUmVzaXplKFQpLCBULnBhcmFtcy5icmVha3BvaW50cyAmJiBULnNldEJyZWFrcG9pbnQoKTt2YXIgYSA9IFQucGFyYW1zLmFsbG93U3dpcGVUb1ByZXYsXFxuICAgICAgICAgICAgdCA9IFQucGFyYW1zLmFsbG93U3dpcGVUb05leHQ7VC5wYXJhbXMuYWxsb3dTd2lwZVRvUHJldiA9IFQucGFyYW1zLmFsbG93U3dpcGVUb05leHQgPSAhMCwgVC51cGRhdGVDb250YWluZXJTaXplKCksIFQudXBkYXRlU2xpZGVzU2l6ZSgpLCAoXFxcImF1dG9cXFwiID09PSBULnBhcmFtcy5zbGlkZXNQZXJWaWV3IHx8IFQucGFyYW1zLmZyZWVNb2RlIHx8IGUpICYmIFQudXBkYXRlUGFnaW5hdGlvbigpLCBULnBhcmFtcy5zY3JvbGxiYXIgJiYgVC5zY3JvbGxiYXIgJiYgVC5zY3JvbGxiYXIuc2V0KCksIFQuY29udHJvbGxlciAmJiBULmNvbnRyb2xsZXIuc3BsaW5lICYmIChULmNvbnRyb2xsZXIuc3BsaW5lID0gdm9pZCAwKTt2YXIgcyA9ICExO2lmIChULnBhcmFtcy5mcmVlTW9kZSkge1xcbiAgICAgICAgICB2YXIgaSA9IE1hdGgubWluKE1hdGgubWF4KFQudHJhbnNsYXRlLCBULm1heFRyYW5zbGF0ZSgpKSwgVC5taW5UcmFuc2xhdGUoKSk7VC5zZXRXcmFwcGVyVHJhbnNsYXRlKGkpLCBULnVwZGF0ZUFjdGl2ZUluZGV4KCksIFQudXBkYXRlQ2xhc3NlcygpLCBULnBhcmFtcy5hdXRvSGVpZ2h0ICYmIFQudXBkYXRlQXV0b0hlaWdodCgpO1xcbiAgICAgICAgfSBlbHNlIFQudXBkYXRlQ2xhc3NlcygpLCBzID0gKFxcXCJhdXRvXFxcIiA9PT0gVC5wYXJhbXMuc2xpZGVzUGVyVmlldyB8fCBULnBhcmFtcy5zbGlkZXNQZXJWaWV3ID4gMSkgJiYgVC5pc0VuZCAmJiAhVC5wYXJhbXMuY2VudGVyZWRTbGlkZXMgPyBULnNsaWRlVG8oVC5zbGlkZXMubGVuZ3RoIC0gMSwgMCwgITEsICEwKSA6IFQuc2xpZGVUbyhULmFjdGl2ZUluZGV4LCAwLCAhMSwgITApO1QucGFyYW1zLmxhenlMb2FkaW5nICYmICFzICYmIFQubGF6eSAmJiBULmxhenkubG9hZCgpLCBULnBhcmFtcy5hbGxvd1N3aXBlVG9QcmV2ID0gYSwgVC5wYXJhbXMuYWxsb3dTd2lwZVRvTmV4dCA9IHQsIFQucGFyYW1zLm9uQWZ0ZXJSZXNpemUgJiYgVC5wYXJhbXMub25BZnRlclJlc2l6ZShUKTtcXG4gICAgICB9LCBULnRvdWNoRXZlbnRzRGVza3RvcCA9IHsgc3RhcnQ6IFxcXCJtb3VzZWRvd25cXFwiLCBtb3ZlOiBcXFwibW91c2Vtb3ZlXFxcIiwgZW5kOiBcXFwibW91c2V1cFxcXCIgfSwgd2luZG93Lm5hdmlnYXRvci5wb2ludGVyRW5hYmxlZCA/IFQudG91Y2hFdmVudHNEZXNrdG9wID0geyBzdGFydDogXFxcInBvaW50ZXJkb3duXFxcIiwgbW92ZTogXFxcInBvaW50ZXJtb3ZlXFxcIiwgZW5kOiBcXFwicG9pbnRlcnVwXFxcIiB9IDogd2luZG93Lm5hdmlnYXRvci5tc1BvaW50ZXJFbmFibGVkICYmIChULnRvdWNoRXZlbnRzRGVza3RvcCA9IHsgc3RhcnQ6IFxcXCJNU1BvaW50ZXJEb3duXFxcIiwgbW92ZTogXFxcIk1TUG9pbnRlck1vdmVcXFwiLCBlbmQ6IFxcXCJNU1BvaW50ZXJVcFxcXCIgfSksIFQudG91Y2hFdmVudHMgPSB7IHN0YXJ0OiBULnN1cHBvcnQudG91Y2ggfHwgIVQucGFyYW1zLnNpbXVsYXRlVG91Y2ggPyBcXFwidG91Y2hzdGFydFxcXCIgOiBULnRvdWNoRXZlbnRzRGVza3RvcC5zdGFydCwgbW92ZTogVC5zdXBwb3J0LnRvdWNoIHx8ICFULnBhcmFtcy5zaW11bGF0ZVRvdWNoID8gXFxcInRvdWNobW92ZVxcXCIgOiBULnRvdWNoRXZlbnRzRGVza3RvcC5tb3ZlLCBlbmQ6IFQuc3VwcG9ydC50b3VjaCB8fCAhVC5wYXJhbXMuc2ltdWxhdGVUb3VjaCA/IFxcXCJ0b3VjaGVuZFxcXCIgOiBULnRvdWNoRXZlbnRzRGVza3RvcC5lbmQgfSwgKHdpbmRvdy5uYXZpZ2F0b3IucG9pbnRlckVuYWJsZWQgfHwgd2luZG93Lm5hdmlnYXRvci5tc1BvaW50ZXJFbmFibGVkKSAmJiAoXFxcImNvbnRhaW5lclxcXCIgPT09IFQucGFyYW1zLnRvdWNoRXZlbnRzVGFyZ2V0ID8gVC5jb250YWluZXIgOiBULndyYXBwZXIpLmFkZENsYXNzKFxcXCJzd2lwZXItd3A4LVxcXCIgKyBULnBhcmFtcy5kaXJlY3Rpb24pLCBULmluaXRFdmVudHMgPSBmdW5jdGlvbiAoZSkge1xcbiAgICAgICAgdmFyIGEgPSBlID8gXFxcIm9mZlxcXCIgOiBcXFwib25cXFwiLFxcbiAgICAgICAgICAgIHQgPSBlID8gXFxcInJlbW92ZUV2ZW50TGlzdGVuZXJcXFwiIDogXFxcImFkZEV2ZW50TGlzdGVuZXJcXFwiLFxcbiAgICAgICAgICAgIHMgPSBcXFwiY29udGFpbmVyXFxcIiA9PT0gVC5wYXJhbXMudG91Y2hFdmVudHNUYXJnZXQgPyBULmNvbnRhaW5lclswXSA6IFQud3JhcHBlclswXSxcXG4gICAgICAgICAgICByID0gVC5zdXBwb3J0LnRvdWNoID8gcyA6IGRvY3VtZW50LFxcbiAgICAgICAgICAgIG4gPSAhIVQucGFyYW1zLm5lc3RlZDtpZiAoVC5icm93c2VyLmllKSBzW3RdKFQudG91Y2hFdmVudHMuc3RhcnQsIFQub25Ub3VjaFN0YXJ0LCAhMSksIHJbdF0oVC50b3VjaEV2ZW50cy5tb3ZlLCBULm9uVG91Y2hNb3ZlLCBuKSwgclt0XShULnRvdWNoRXZlbnRzLmVuZCwgVC5vblRvdWNoRW5kLCAhMSk7ZWxzZSB7XFxuICAgICAgICAgIGlmIChULnN1cHBvcnQudG91Y2gpIHtcXG4gICAgICAgICAgICB2YXIgbyA9ICEoXFxcInRvdWNoc3RhcnRcXFwiICE9PSBULnRvdWNoRXZlbnRzLnN0YXJ0IHx8ICFULnN1cHBvcnQucGFzc2l2ZUxpc3RlbmVyIHx8ICFULnBhcmFtcy5wYXNzaXZlTGlzdGVuZXJzKSAmJiB7IHBhc3NpdmU6ICEwLCBjYXB0dXJlOiAhMSB9O3NbdF0oVC50b3VjaEV2ZW50cy5zdGFydCwgVC5vblRvdWNoU3RhcnQsIG8pLCBzW3RdKFQudG91Y2hFdmVudHMubW92ZSwgVC5vblRvdWNoTW92ZSwgbiksIHNbdF0oVC50b3VjaEV2ZW50cy5lbmQsIFQub25Ub3VjaEVuZCwgbyk7XFxuICAgICAgICAgIH0oaS5zaW11bGF0ZVRvdWNoICYmICFULmRldmljZS5pb3MgJiYgIVQuZGV2aWNlLmFuZHJvaWQgfHwgaS5zaW11bGF0ZVRvdWNoICYmICFULnN1cHBvcnQudG91Y2ggJiYgVC5kZXZpY2UuaW9zKSAmJiAoc1t0XShcXFwibW91c2Vkb3duXFxcIiwgVC5vblRvdWNoU3RhcnQsICExKSwgZG9jdW1lbnRbdF0oXFxcIm1vdXNlbW92ZVxcXCIsIFQub25Ub3VjaE1vdmUsIG4pLCBkb2N1bWVudFt0XShcXFwibW91c2V1cFxcXCIsIFQub25Ub3VjaEVuZCwgITEpKTtcXG4gICAgICAgIH13aW5kb3dbdF0oXFxcInJlc2l6ZVxcXCIsIFQub25SZXNpemUpLCBULnBhcmFtcy5uZXh0QnV0dG9uICYmIFQubmV4dEJ1dHRvbiAmJiBULm5leHRCdXR0b24ubGVuZ3RoID4gMCAmJiAoVC5uZXh0QnV0dG9uW2FdKFxcXCJjbGlja1xcXCIsIFQub25DbGlja05leHQpLCBULnBhcmFtcy5hMTF5ICYmIFQuYTExeSAmJiBULm5leHRCdXR0b25bYV0oXFxcImtleWRvd25cXFwiLCBULmExMXkub25FbnRlcktleSkpLCBULnBhcmFtcy5wcmV2QnV0dG9uICYmIFQucHJldkJ1dHRvbiAmJiBULnByZXZCdXR0b24ubGVuZ3RoID4gMCAmJiAoVC5wcmV2QnV0dG9uW2FdKFxcXCJjbGlja1xcXCIsIFQub25DbGlja1ByZXYpLCBULnBhcmFtcy5hMTF5ICYmIFQuYTExeSAmJiBULnByZXZCdXR0b25bYV0oXFxcImtleWRvd25cXFwiLCBULmExMXkub25FbnRlcktleSkpLCBULnBhcmFtcy5wYWdpbmF0aW9uICYmIFQucGFyYW1zLnBhZ2luYXRpb25DbGlja2FibGUgJiYgKFQucGFnaW5hdGlvbkNvbnRhaW5lclthXShcXFwiY2xpY2tcXFwiLCBcXFwiLlxcXCIgKyBULnBhcmFtcy5idWxsZXRDbGFzcywgVC5vbkNsaWNrSW5kZXgpLCBULnBhcmFtcy5hMTF5ICYmIFQuYTExeSAmJiBULnBhZ2luYXRpb25Db250YWluZXJbYV0oXFxcImtleWRvd25cXFwiLCBcXFwiLlxcXCIgKyBULnBhcmFtcy5idWxsZXRDbGFzcywgVC5hMTF5Lm9uRW50ZXJLZXkpKSwgKFQucGFyYW1zLnByZXZlbnRDbGlja3MgfHwgVC5wYXJhbXMucHJldmVudENsaWNrc1Byb3BhZ2F0aW9uKSAmJiBzW3RdKFxcXCJjbGlja1xcXCIsIFQucHJldmVudENsaWNrcywgITApO1xcbiAgICAgIH0sIFQuYXR0YWNoRXZlbnRzID0gZnVuY3Rpb24gKCkge1xcbiAgICAgICAgVC5pbml0RXZlbnRzKCk7XFxuICAgICAgfSwgVC5kZXRhY2hFdmVudHMgPSBmdW5jdGlvbiAoKSB7XFxuICAgICAgICBULmluaXRFdmVudHMoITApO1xcbiAgICAgIH0sIFQuYWxsb3dDbGljayA9ICEwLCBULnByZXZlbnRDbGlja3MgPSBmdW5jdGlvbiAoZSkge1xcbiAgICAgICAgVC5hbGxvd0NsaWNrIHx8IChULnBhcmFtcy5wcmV2ZW50Q2xpY2tzICYmIGUucHJldmVudERlZmF1bHQoKSwgVC5wYXJhbXMucHJldmVudENsaWNrc1Byb3BhZ2F0aW9uICYmIFQuYW5pbWF0aW5nICYmIChlLnN0b3BQcm9wYWdhdGlvbigpLCBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpKSk7XFxuICAgICAgfSwgVC5vbkNsaWNrTmV4dCA9IGZ1bmN0aW9uIChlKSB7XFxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCksIFQuaXNFbmQgJiYgIVQucGFyYW1zLmxvb3AgfHwgVC5zbGlkZU5leHQoKTtcXG4gICAgICB9LCBULm9uQ2xpY2tQcmV2ID0gZnVuY3Rpb24gKGUpIHtcXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKSwgVC5pc0JlZ2lubmluZyAmJiAhVC5wYXJhbXMubG9vcCB8fCBULnNsaWRlUHJldigpO1xcbiAgICAgIH0sIFQub25DbGlja0luZGV4ID0gZnVuY3Rpb24gKGEpIHtcXG4gICAgICAgIGEucHJldmVudERlZmF1bHQoKTt2YXIgdCA9IGUodGhpcykuaW5kZXgoKSAqIFQucGFyYW1zLnNsaWRlc1Blckdyb3VwO1QucGFyYW1zLmxvb3AgJiYgKHQgKz0gVC5sb29wZWRTbGlkZXMpLCBULnNsaWRlVG8odCk7XFxuICAgICAgfSwgVC51cGRhdGVDbGlja2VkU2xpZGUgPSBmdW5jdGlvbiAoYSkge1xcbiAgICAgICAgdmFyIHQgPSBvKGEsIFxcXCIuXFxcIiArIFQucGFyYW1zLnNsaWRlQ2xhc3MpLFxcbiAgICAgICAgICAgIHMgPSAhMTtpZiAodCkgZm9yICh2YXIgaSA9IDA7IGkgPCBULnNsaWRlcy5sZW5ndGg7IGkrKykge1xcbiAgICAgICAgICBULnNsaWRlc1tpXSA9PT0gdCAmJiAocyA9ICEwKTtcXG4gICAgICAgIH1pZiAoIXQgfHwgIXMpIHJldHVybiBULmNsaWNrZWRTbGlkZSA9IHZvaWQgMCwgdm9pZCAoVC5jbGlja2VkSW5kZXggPSB2b2lkIDApO2lmIChULmNsaWNrZWRTbGlkZSA9IHQsIFQuY2xpY2tlZEluZGV4ID0gZSh0KS5pbmRleCgpLCBULnBhcmFtcy5zbGlkZVRvQ2xpY2tlZFNsaWRlICYmIHZvaWQgMCAhPT0gVC5jbGlja2VkSW5kZXggJiYgVC5jbGlja2VkSW5kZXggIT09IFQuYWN0aXZlSW5kZXgpIHtcXG4gICAgICAgICAgdmFyIHIsXFxuICAgICAgICAgICAgICBuID0gVC5jbGlja2VkSW5kZXgsXFxuICAgICAgICAgICAgICBsID0gXFxcImF1dG9cXFwiID09PSBULnBhcmFtcy5zbGlkZXNQZXJWaWV3ID8gVC5jdXJyZW50U2xpZGVzUGVyVmlldygpIDogVC5wYXJhbXMuc2xpZGVzUGVyVmlldztpZiAoVC5wYXJhbXMubG9vcCkge1xcbiAgICAgICAgICAgIGlmIChULmFuaW1hdGluZykgcmV0dXJuO3IgPSBwYXJzZUludChlKFQuY2xpY2tlZFNsaWRlKS5hdHRyKFxcXCJkYXRhLXN3aXBlci1zbGlkZS1pbmRleFxcXCIpLCAxMCksIFQucGFyYW1zLmNlbnRlcmVkU2xpZGVzID8gbiA8IFQubG9vcGVkU2xpZGVzIC0gbCAvIDIgfHwgbiA+IFQuc2xpZGVzLmxlbmd0aCAtIFQubG9vcGVkU2xpZGVzICsgbCAvIDIgPyAoVC5maXhMb29wKCksIG4gPSBULndyYXBwZXIuY2hpbGRyZW4oXFxcIi5cXFwiICsgVC5wYXJhbXMuc2xpZGVDbGFzcyArICdbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XFxcIicgKyByICsgJ1xcXCJdOm5vdCguJyArIFQucGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MgKyBcXFwiKVxcXCIpLmVxKDApLmluZGV4KCksIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xcbiAgICAgICAgICAgICAgVC5zbGlkZVRvKG4pO1xcbiAgICAgICAgICAgIH0sIDApKSA6IFQuc2xpZGVUbyhuKSA6IG4gPiBULnNsaWRlcy5sZW5ndGggLSBsID8gKFQuZml4TG9vcCgpLCBuID0gVC53cmFwcGVyLmNoaWxkcmVuKFxcXCIuXFxcIiArIFQucGFyYW1zLnNsaWRlQ2xhc3MgKyAnW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVxcXCInICsgciArICdcXFwiXTpub3QoLicgKyBULnBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzICsgXFxcIilcXFwiKS5lcSgwKS5pbmRleCgpLCBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcXG4gICAgICAgICAgICAgIFQuc2xpZGVUbyhuKTtcXG4gICAgICAgICAgICB9LCAwKSkgOiBULnNsaWRlVG8obik7XFxuICAgICAgICAgIH0gZWxzZSBULnNsaWRlVG8obik7XFxuICAgICAgICB9XFxuICAgICAgfTt2YXIgUyxcXG4gICAgICAgICAgQyxcXG4gICAgICAgICAgeixcXG4gICAgICAgICAgTSxcXG4gICAgICAgICAgRSxcXG4gICAgICAgICAgUCxcXG4gICAgICAgICAgSSxcXG4gICAgICAgICAgayxcXG4gICAgICAgICAgTCxcXG4gICAgICAgICAgRCxcXG4gICAgICAgICAgQiA9IFxcXCJpbnB1dCwgc2VsZWN0LCB0ZXh0YXJlYSwgYnV0dG9uLCB2aWRlb1xcXCIsXFxuICAgICAgICAgIEggPSBEYXRlLm5vdygpLFxcbiAgICAgICAgICBHID0gW107VC5hbmltYXRpbmcgPSAhMSwgVC50b3VjaGVzID0geyBzdGFydFg6IDAsIHN0YXJ0WTogMCwgY3VycmVudFg6IDAsIGN1cnJlbnRZOiAwLCBkaWZmOiAwIH07dmFyIFgsIEE7VC5vblRvdWNoU3RhcnQgPSBmdW5jdGlvbiAoYSkge1xcbiAgICAgICAgaWYgKGEub3JpZ2luYWxFdmVudCAmJiAoYSA9IGEub3JpZ2luYWxFdmVudCksIChYID0gXFxcInRvdWNoc3RhcnRcXFwiID09PSBhLnR5cGUpIHx8ICEoXFxcIndoaWNoXFxcIiBpbiBhKSB8fCAzICE9PSBhLndoaWNoKSB7XFxuICAgICAgICAgIGlmIChULnBhcmFtcy5ub1N3aXBpbmcgJiYgbyhhLCBcXFwiLlxcXCIgKyBULnBhcmFtcy5ub1N3aXBpbmdDbGFzcykpIHJldHVybiB2b2lkIChULmFsbG93Q2xpY2sgPSAhMCk7aWYgKCFULnBhcmFtcy5zd2lwZUhhbmRsZXIgfHwgbyhhLCBULnBhcmFtcy5zd2lwZUhhbmRsZXIpKSB7XFxuICAgICAgICAgICAgdmFyIHQgPSBULnRvdWNoZXMuY3VycmVudFggPSBcXFwidG91Y2hzdGFydFxcXCIgPT09IGEudHlwZSA/IGEudGFyZ2V0VG91Y2hlc1swXS5wYWdlWCA6IGEucGFnZVgsXFxuICAgICAgICAgICAgICAgIHMgPSBULnRvdWNoZXMuY3VycmVudFkgPSBcXFwidG91Y2hzdGFydFxcXCIgPT09IGEudHlwZSA/IGEudGFyZ2V0VG91Y2hlc1swXS5wYWdlWSA6IGEucGFnZVk7aWYgKCEoVC5kZXZpY2UuaW9zICYmIFQucGFyYW1zLmlPU0VkZ2VTd2lwZURldGVjdGlvbiAmJiB0IDw9IFQucGFyYW1zLmlPU0VkZ2VTd2lwZVRocmVzaG9sZCkpIHtcXG4gICAgICAgICAgICAgIGlmIChTID0gITAsIEMgPSAhMSwgeiA9ICEwLCBFID0gdm9pZCAwLCBBID0gdm9pZCAwLCBULnRvdWNoZXMuc3RhcnRYID0gdCwgVC50b3VjaGVzLnN0YXJ0WSA9IHMsIE0gPSBEYXRlLm5vdygpLCBULmFsbG93Q2xpY2sgPSAhMCwgVC51cGRhdGVDb250YWluZXJTaXplKCksIFQuc3dpcGVEaXJlY3Rpb24gPSB2b2lkIDAsIFQucGFyYW1zLnRocmVzaG9sZCA+IDAgJiYgKGsgPSAhMSksIFxcXCJ0b3VjaHN0YXJ0XFxcIiAhPT0gYS50eXBlKSB7XFxuICAgICAgICAgICAgICAgIHZhciBpID0gITA7ZShhLnRhcmdldCkuaXMoQikgJiYgKGkgPSAhMSksIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgZShkb2N1bWVudC5hY3RpdmVFbGVtZW50KS5pcyhCKSAmJiBkb2N1bWVudC5hY3RpdmVFbGVtZW50LmJsdXIoKSwgaSAmJiBhLnByZXZlbnREZWZhdWx0KCk7XFxuICAgICAgICAgICAgICB9VC5lbWl0KFxcXCJvblRvdWNoU3RhcnRcXFwiLCBULCBhKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICB9LCBULm9uVG91Y2hNb3ZlID0gZnVuY3Rpb24gKGEpIHtcXG4gICAgICAgIGlmIChhLm9yaWdpbmFsRXZlbnQgJiYgKGEgPSBhLm9yaWdpbmFsRXZlbnQpLCAhWCB8fCBcXFwibW91c2Vtb3ZlXFxcIiAhPT0gYS50eXBlKSB7XFxuICAgICAgICAgIGlmIChhLnByZXZlbnRlZEJ5TmVzdGVkU3dpcGVyKSByZXR1cm4gVC50b3VjaGVzLnN0YXJ0WCA9IFxcXCJ0b3VjaG1vdmVcXFwiID09PSBhLnR5cGUgPyBhLnRhcmdldFRvdWNoZXNbMF0ucGFnZVggOiBhLnBhZ2VYLCB2b2lkIChULnRvdWNoZXMuc3RhcnRZID0gXFxcInRvdWNobW92ZVxcXCIgPT09IGEudHlwZSA/IGEudGFyZ2V0VG91Y2hlc1swXS5wYWdlWSA6IGEucGFnZVkpO2lmIChULnBhcmFtcy5vbmx5RXh0ZXJuYWwpIHJldHVybiBULmFsbG93Q2xpY2sgPSAhMSwgdm9pZCAoUyAmJiAoVC50b3VjaGVzLnN0YXJ0WCA9IFQudG91Y2hlcy5jdXJyZW50WCA9IFxcXCJ0b3VjaG1vdmVcXFwiID09PSBhLnR5cGUgPyBhLnRhcmdldFRvdWNoZXNbMF0ucGFnZVggOiBhLnBhZ2VYLCBULnRvdWNoZXMuc3RhcnRZID0gVC50b3VjaGVzLmN1cnJlbnRZID0gXFxcInRvdWNobW92ZVxcXCIgPT09IGEudHlwZSA/IGEudGFyZ2V0VG91Y2hlc1swXS5wYWdlWSA6IGEucGFnZVksIE0gPSBEYXRlLm5vdygpKSk7aWYgKFggJiYgVC5wYXJhbXMudG91Y2hSZWxlYXNlT25FZGdlcyAmJiAhVC5wYXJhbXMubG9vcCkgaWYgKFQuaXNIb3Jpem9udGFsKCkpIHtcXG4gICAgICAgICAgICBpZiAoVC50b3VjaGVzLmN1cnJlbnRYIDwgVC50b3VjaGVzLnN0YXJ0WCAmJiBULnRyYW5zbGF0ZSA8PSBULm1heFRyYW5zbGF0ZSgpIHx8IFQudG91Y2hlcy5jdXJyZW50WCA+IFQudG91Y2hlcy5zdGFydFggJiYgVC50cmFuc2xhdGUgPj0gVC5taW5UcmFuc2xhdGUoKSkgcmV0dXJuO1xcbiAgICAgICAgICB9IGVsc2UgaWYgKFQudG91Y2hlcy5jdXJyZW50WSA8IFQudG91Y2hlcy5zdGFydFkgJiYgVC50cmFuc2xhdGUgPD0gVC5tYXhUcmFuc2xhdGUoKSB8fCBULnRvdWNoZXMuY3VycmVudFkgPiBULnRvdWNoZXMuc3RhcnRZICYmIFQudHJhbnNsYXRlID49IFQubWluVHJhbnNsYXRlKCkpIHJldHVybjtpZiAoWCAmJiBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmIGEudGFyZ2V0ID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmIGUoYS50YXJnZXQpLmlzKEIpKSByZXR1cm4gQyA9ICEwLCB2b2lkIChULmFsbG93Q2xpY2sgPSAhMSk7aWYgKHogJiYgVC5lbWl0KFxcXCJvblRvdWNoTW92ZVxcXCIsIFQsIGEpLCAhKGEudGFyZ2V0VG91Y2hlcyAmJiBhLnRhcmdldFRvdWNoZXMubGVuZ3RoID4gMSkpIHtcXG4gICAgICAgICAgICBpZiAoVC50b3VjaGVzLmN1cnJlbnRYID0gXFxcInRvdWNobW92ZVxcXCIgPT09IGEudHlwZSA/IGEudGFyZ2V0VG91Y2hlc1swXS5wYWdlWCA6IGEucGFnZVgsIFQudG91Y2hlcy5jdXJyZW50WSA9IFxcXCJ0b3VjaG1vdmVcXFwiID09PSBhLnR5cGUgPyBhLnRhcmdldFRvdWNoZXNbMF0ucGFnZVkgOiBhLnBhZ2VZLCB2b2lkIDAgPT09IEUpIHtcXG4gICAgICAgICAgICAgIHZhciB0O1QuaXNIb3Jpem9udGFsKCkgJiYgVC50b3VjaGVzLmN1cnJlbnRZID09PSBULnRvdWNoZXMuc3RhcnRZIHx8ICFULmlzSG9yaXpvbnRhbCgpICYmIFQudG91Y2hlcy5jdXJyZW50WCA9PT0gVC50b3VjaGVzLnN0YXJ0WCA/IEUgPSAhMSA6ICh0ID0gMTgwICogTWF0aC5hdGFuMihNYXRoLmFicyhULnRvdWNoZXMuY3VycmVudFkgLSBULnRvdWNoZXMuc3RhcnRZKSwgTWF0aC5hYnMoVC50b3VjaGVzLmN1cnJlbnRYIC0gVC50b3VjaGVzLnN0YXJ0WCkpIC8gTWF0aC5QSSwgRSA9IFQuaXNIb3Jpem9udGFsKCkgPyB0ID4gVC5wYXJhbXMudG91Y2hBbmdsZSA6IDkwIC0gdCA+IFQucGFyYW1zLnRvdWNoQW5nbGUpO1xcbiAgICAgICAgICAgIH1pZiAoRSAmJiBULmVtaXQoXFxcIm9uVG91Y2hNb3ZlT3Bwb3NpdGVcXFwiLCBULCBhKSwgdm9pZCAwID09PSBBICYmIChULnRvdWNoZXMuY3VycmVudFggPT09IFQudG91Y2hlcy5zdGFydFggJiYgVC50b3VjaGVzLmN1cnJlbnRZID09PSBULnRvdWNoZXMuc3RhcnRZIHx8IChBID0gITApKSwgUykge1xcbiAgICAgICAgICAgICAgaWYgKEUpIHJldHVybiB2b2lkIChTID0gITEpO2lmIChBKSB7XFxuICAgICAgICAgICAgICAgIFQuYWxsb3dDbGljayA9ICExLCBULmVtaXQoXFxcIm9uU2xpZGVyTW92ZVxcXCIsIFQsIGEpLCBhLnByZXZlbnREZWZhdWx0KCksIFQucGFyYW1zLnRvdWNoTW92ZVN0b3BQcm9wYWdhdGlvbiAmJiAhVC5wYXJhbXMubmVzdGVkICYmIGEuc3RvcFByb3BhZ2F0aW9uKCksIEMgfHwgKGkubG9vcCAmJiBULmZpeExvb3AoKSwgSSA9IFQuZ2V0V3JhcHBlclRyYW5zbGF0ZSgpLCBULnNldFdyYXBwZXJUcmFuc2l0aW9uKDApLCBULmFuaW1hdGluZyAmJiBULndyYXBwZXIudHJpZ2dlcihcXFwid2Via2l0VHJhbnNpdGlvbkVuZCB0cmFuc2l0aW9uZW5kIG9UcmFuc2l0aW9uRW5kIE1TVHJhbnNpdGlvbkVuZCBtc1RyYW5zaXRpb25FbmRcXFwiKSwgVC5wYXJhbXMuYXV0b3BsYXkgJiYgVC5hdXRvcGxheWluZyAmJiAoVC5wYXJhbXMuYXV0b3BsYXlEaXNhYmxlT25JbnRlcmFjdGlvbiA/IFQuc3RvcEF1dG9wbGF5KCkgOiBULnBhdXNlQXV0b3BsYXkoKSksIEQgPSAhMSwgIVQucGFyYW1zLmdyYWJDdXJzb3IgfHwgVC5wYXJhbXMuYWxsb3dTd2lwZVRvTmV4dCAhPT0gITAgJiYgVC5wYXJhbXMuYWxsb3dTd2lwZVRvUHJldiAhPT0gITAgfHwgVC5zZXRHcmFiQ3Vyc29yKCEwKSksIEMgPSAhMDt2YXIgcyA9IFQudG91Y2hlcy5kaWZmID0gVC5pc0hvcml6b250YWwoKSA/IFQudG91Y2hlcy5jdXJyZW50WCAtIFQudG91Y2hlcy5zdGFydFggOiBULnRvdWNoZXMuY3VycmVudFkgLSBULnRvdWNoZXMuc3RhcnRZO3MgKj0gVC5wYXJhbXMudG91Y2hSYXRpbywgVC5ydGwgJiYgKHMgPSAtcyksIFQuc3dpcGVEaXJlY3Rpb24gPSBzID4gMCA/IFxcXCJwcmV2XFxcIiA6IFxcXCJuZXh0XFxcIiwgUCA9IHMgKyBJO3ZhciByID0gITA7aWYgKHMgPiAwICYmIFAgPiBULm1pblRyYW5zbGF0ZSgpID8gKHIgPSAhMSwgVC5wYXJhbXMucmVzaXN0YW5jZSAmJiAoUCA9IFQubWluVHJhbnNsYXRlKCkgLSAxICsgTWF0aC5wb3coLVQubWluVHJhbnNsYXRlKCkgKyBJICsgcywgVC5wYXJhbXMucmVzaXN0YW5jZVJhdGlvKSkpIDogcyA8IDAgJiYgUCA8IFQubWF4VHJhbnNsYXRlKCkgJiYgKHIgPSAhMSwgVC5wYXJhbXMucmVzaXN0YW5jZSAmJiAoUCA9IFQubWF4VHJhbnNsYXRlKCkgKyAxIC0gTWF0aC5wb3coVC5tYXhUcmFuc2xhdGUoKSAtIEkgLSBzLCBULnBhcmFtcy5yZXNpc3RhbmNlUmF0aW8pKSksIHIgJiYgKGEucHJldmVudGVkQnlOZXN0ZWRTd2lwZXIgPSAhMCksICFULnBhcmFtcy5hbGxvd1N3aXBlVG9OZXh0ICYmIFxcXCJuZXh0XFxcIiA9PT0gVC5zd2lwZURpcmVjdGlvbiAmJiBQIDwgSSAmJiAoUCA9IEkpLCAhVC5wYXJhbXMuYWxsb3dTd2lwZVRvUHJldiAmJiBcXFwicHJldlxcXCIgPT09IFQuc3dpcGVEaXJlY3Rpb24gJiYgUCA+IEkgJiYgKFAgPSBJKSwgVC5wYXJhbXMudGhyZXNob2xkID4gMCkge1xcbiAgICAgICAgICAgICAgICAgIGlmICghKE1hdGguYWJzKHMpID4gVC5wYXJhbXMudGhyZXNob2xkIHx8IGspKSByZXR1cm4gdm9pZCAoUCA9IEkpO2lmICghaykgcmV0dXJuIGsgPSAhMCwgVC50b3VjaGVzLnN0YXJ0WCA9IFQudG91Y2hlcy5jdXJyZW50WCwgVC50b3VjaGVzLnN0YXJ0WSA9IFQudG91Y2hlcy5jdXJyZW50WSwgUCA9IEksIHZvaWQgKFQudG91Y2hlcy5kaWZmID0gVC5pc0hvcml6b250YWwoKSA/IFQudG91Y2hlcy5jdXJyZW50WCAtIFQudG91Y2hlcy5zdGFydFggOiBULnRvdWNoZXMuY3VycmVudFkgLSBULnRvdWNoZXMuc3RhcnRZKTtcXG4gICAgICAgICAgICAgICAgfVQucGFyYW1zLmZvbGxvd0ZpbmdlciAmJiAoKFQucGFyYW1zLmZyZWVNb2RlIHx8IFQucGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3MpICYmIFQudXBkYXRlQWN0aXZlSW5kZXgoKSwgVC5wYXJhbXMuZnJlZU1vZGUgJiYgKDAgPT09IEcubGVuZ3RoICYmIEcucHVzaCh7IHBvc2l0aW9uOiBULnRvdWNoZXNbVC5pc0hvcml6b250YWwoKSA/IFxcXCJzdGFydFhcXFwiIDogXFxcInN0YXJ0WVxcXCJdLCB0aW1lOiBNIH0pLCBHLnB1c2goeyBwb3NpdGlvbjogVC50b3VjaGVzW1QuaXNIb3Jpem9udGFsKCkgPyBcXFwiY3VycmVudFhcXFwiIDogXFxcImN1cnJlbnRZXFxcIl0sIHRpbWU6IG5ldyB3aW5kb3cuRGF0ZSgpLmdldFRpbWUoKSB9KSksIFQudXBkYXRlUHJvZ3Jlc3MoUCksIFQuc2V0V3JhcHBlclRyYW5zbGF0ZShQKSk7XFxuICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgICAgfSwgVC5vblRvdWNoRW5kID0gZnVuY3Rpb24gKGEpIHtcXG4gICAgICAgIGlmIChhLm9yaWdpbmFsRXZlbnQgJiYgKGEgPSBhLm9yaWdpbmFsRXZlbnQpLCB6ICYmIFQuZW1pdChcXFwib25Ub3VjaEVuZFxcXCIsIFQsIGEpLCB6ID0gITEsIFMpIHtcXG4gICAgICAgICAgVC5wYXJhbXMuZ3JhYkN1cnNvciAmJiBDICYmIFMgJiYgKFQucGFyYW1zLmFsbG93U3dpcGVUb05leHQgPT09ICEwIHx8IFQucGFyYW1zLmFsbG93U3dpcGVUb1ByZXYgPT09ICEwKSAmJiBULnNldEdyYWJDdXJzb3IoITEpO3ZhciB0ID0gRGF0ZS5ub3coKSxcXG4gICAgICAgICAgICAgIHMgPSB0IC0gTTtpZiAoVC5hbGxvd0NsaWNrICYmIChULnVwZGF0ZUNsaWNrZWRTbGlkZShhKSwgVC5lbWl0KFxcXCJvblRhcFxcXCIsIFQsIGEpLCBzIDwgMzAwICYmIHQgLSBIID4gMzAwICYmIChMICYmIGNsZWFyVGltZW91dChMKSwgTCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xcbiAgICAgICAgICAgIFQgJiYgKFQucGFyYW1zLnBhZ2luYXRpb25IaWRlICYmIFQucGFnaW5hdGlvbkNvbnRhaW5lci5sZW5ndGggPiAwICYmICFlKGEudGFyZ2V0KS5oYXNDbGFzcyhULnBhcmFtcy5idWxsZXRDbGFzcykgJiYgVC5wYWdpbmF0aW9uQ29udGFpbmVyLnRvZ2dsZUNsYXNzKFQucGFyYW1zLnBhZ2luYXRpb25IaWRkZW5DbGFzcyksIFQuZW1pdChcXFwib25DbGlja1xcXCIsIFQsIGEpKTtcXG4gICAgICAgICAgfSwgMzAwKSksIHMgPCAzMDAgJiYgdCAtIEggPCAzMDAgJiYgKEwgJiYgY2xlYXJUaW1lb3V0KEwpLCBULmVtaXQoXFxcIm9uRG91YmxlVGFwXFxcIiwgVCwgYSkpKSwgSCA9IERhdGUubm93KCksIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xcbiAgICAgICAgICAgIFQgJiYgKFQuYWxsb3dDbGljayA9ICEwKTtcXG4gICAgICAgICAgfSwgMCksICFTIHx8ICFDIHx8ICFULnN3aXBlRGlyZWN0aW9uIHx8IDAgPT09IFQudG91Y2hlcy5kaWZmIHx8IFAgPT09IEkpIHJldHVybiB2b2lkIChTID0gQyA9ICExKTtTID0gQyA9ICExO3ZhciBpO2lmIChpID0gVC5wYXJhbXMuZm9sbG93RmluZ2VyID8gVC5ydGwgPyBULnRyYW5zbGF0ZSA6IC1ULnRyYW5zbGF0ZSA6IC1QLCBULnBhcmFtcy5mcmVlTW9kZSkge1xcbiAgICAgICAgICAgIGlmIChpIDwgLVQubWluVHJhbnNsYXRlKCkpIHJldHVybiB2b2lkIFQuc2xpZGVUbyhULmFjdGl2ZUluZGV4KTtpZiAoaSA+IC1ULm1heFRyYW5zbGF0ZSgpKSByZXR1cm4gdm9pZCAoVC5zbGlkZXMubGVuZ3RoIDwgVC5zbmFwR3JpZC5sZW5ndGggPyBULnNsaWRlVG8oVC5zbmFwR3JpZC5sZW5ndGggLSAxKSA6IFQuc2xpZGVUbyhULnNsaWRlcy5sZW5ndGggLSAxKSk7aWYgKFQucGFyYW1zLmZyZWVNb2RlTW9tZW50dW0pIHtcXG4gICAgICAgICAgICAgIGlmIChHLmxlbmd0aCA+IDEpIHtcXG4gICAgICAgICAgICAgICAgdmFyIHIgPSBHLnBvcCgpLFxcbiAgICAgICAgICAgICAgICAgICAgbiA9IEcucG9wKCksXFxuICAgICAgICAgICAgICAgICAgICBvID0gci5wb3NpdGlvbiAtIG4ucG9zaXRpb24sXFxuICAgICAgICAgICAgICAgICAgICBsID0gci50aW1lIC0gbi50aW1lO1QudmVsb2NpdHkgPSBvIC8gbCwgVC52ZWxvY2l0eSA9IFQudmVsb2NpdHkgLyAyLCBNYXRoLmFicyhULnZlbG9jaXR5KSA8IFQucGFyYW1zLmZyZWVNb2RlTWluaW11bVZlbG9jaXR5ICYmIChULnZlbG9jaXR5ID0gMCksIChsID4gMTUwIHx8IG5ldyB3aW5kb3cuRGF0ZSgpLmdldFRpbWUoKSAtIHIudGltZSA+IDMwMCkgJiYgKFQudmVsb2NpdHkgPSAwKTtcXG4gICAgICAgICAgICAgIH0gZWxzZSBULnZlbG9jaXR5ID0gMDtULnZlbG9jaXR5ID0gVC52ZWxvY2l0eSAqIFQucGFyYW1zLmZyZWVNb2RlTW9tZW50dW1WZWxvY2l0eVJhdGlvLCBHLmxlbmd0aCA9IDA7dmFyIHAgPSAxZTMgKiBULnBhcmFtcy5mcmVlTW9kZU1vbWVudHVtUmF0aW8sXFxuICAgICAgICAgICAgICAgICAgZCA9IFQudmVsb2NpdHkgKiBwLFxcbiAgICAgICAgICAgICAgICAgIHUgPSBULnRyYW5zbGF0ZSArIGQ7VC5ydGwgJiYgKHUgPSAtdSk7dmFyIGMsXFxuICAgICAgICAgICAgICAgICAgbSA9ICExLFxcbiAgICAgICAgICAgICAgICAgIGggPSAyMCAqIE1hdGguYWJzKFQudmVsb2NpdHkpICogVC5wYXJhbXMuZnJlZU1vZGVNb21lbnR1bUJvdW5jZVJhdGlvO2lmICh1IDwgVC5tYXhUcmFuc2xhdGUoKSkgVC5wYXJhbXMuZnJlZU1vZGVNb21lbnR1bUJvdW5jZSA/ICh1ICsgVC5tYXhUcmFuc2xhdGUoKSA8IC1oICYmICh1ID0gVC5tYXhUcmFuc2xhdGUoKSAtIGgpLCBjID0gVC5tYXhUcmFuc2xhdGUoKSwgbSA9ICEwLCBEID0gITApIDogdSA9IFQubWF4VHJhbnNsYXRlKCk7ZWxzZSBpZiAodSA+IFQubWluVHJhbnNsYXRlKCkpIFQucGFyYW1zLmZyZWVNb2RlTW9tZW50dW1Cb3VuY2UgPyAodSAtIFQubWluVHJhbnNsYXRlKCkgPiBoICYmICh1ID0gVC5taW5UcmFuc2xhdGUoKSArIGgpLCBjID0gVC5taW5UcmFuc2xhdGUoKSwgbSA9ICEwLCBEID0gITApIDogdSA9IFQubWluVHJhbnNsYXRlKCk7ZWxzZSBpZiAoVC5wYXJhbXMuZnJlZU1vZGVTdGlja3kpIHtcXG4gICAgICAgICAgICAgICAgdmFyIGcsXFxuICAgICAgICAgICAgICAgICAgICBmID0gMDtmb3IgKGYgPSAwOyBmIDwgVC5zbmFwR3JpZC5sZW5ndGg7IGYgKz0gMSkge1xcbiAgICAgICAgICAgICAgICAgIGlmIChULnNuYXBHcmlkW2ZdID4gLXUpIHtcXG4gICAgICAgICAgICAgICAgICAgIGcgPSBmO2JyZWFrO1xcbiAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgfXUgPSBNYXRoLmFicyhULnNuYXBHcmlkW2ddIC0gdSkgPCBNYXRoLmFicyhULnNuYXBHcmlkW2cgLSAxXSAtIHUpIHx8IFxcXCJuZXh0XFxcIiA9PT0gVC5zd2lwZURpcmVjdGlvbiA/IFQuc25hcEdyaWRbZ10gOiBULnNuYXBHcmlkW2cgLSAxXSwgVC5ydGwgfHwgKHUgPSAtdSk7XFxuICAgICAgICAgICAgICB9aWYgKDAgIT09IFQudmVsb2NpdHkpIHAgPSBULnJ0bCA/IE1hdGguYWJzKCgtdSAtIFQudHJhbnNsYXRlKSAvIFQudmVsb2NpdHkpIDogTWF0aC5hYnMoKHUgLSBULnRyYW5zbGF0ZSkgLyBULnZlbG9jaXR5KTtlbHNlIGlmIChULnBhcmFtcy5mcmVlTW9kZVN0aWNreSkgcmV0dXJuIHZvaWQgVC5zbGlkZVJlc2V0KCk7VC5wYXJhbXMuZnJlZU1vZGVNb21lbnR1bUJvdW5jZSAmJiBtID8gKFQudXBkYXRlUHJvZ3Jlc3MoYyksIFQuc2V0V3JhcHBlclRyYW5zaXRpb24ocCksIFQuc2V0V3JhcHBlclRyYW5zbGF0ZSh1KSwgVC5vblRyYW5zaXRpb25TdGFydCgpLCBULmFuaW1hdGluZyA9ICEwLCBULndyYXBwZXIudHJhbnNpdGlvbkVuZChmdW5jdGlvbiAoKSB7XFxuICAgICAgICAgICAgICAgIFQgJiYgRCAmJiAoVC5lbWl0KFxcXCJvbk1vbWVudHVtQm91bmNlXFxcIiwgVCksIFQuc2V0V3JhcHBlclRyYW5zaXRpb24oVC5wYXJhbXMuc3BlZWQpLCBULnNldFdyYXBwZXJUcmFuc2xhdGUoYyksIFQud3JhcHBlci50cmFuc2l0aW9uRW5kKGZ1bmN0aW9uICgpIHtcXG4gICAgICAgICAgICAgICAgICBUICYmIFQub25UcmFuc2l0aW9uRW5kKCk7XFxuICAgICAgICAgICAgICAgIH0pKTtcXG4gICAgICAgICAgICAgIH0pKSA6IFQudmVsb2NpdHkgPyAoVC51cGRhdGVQcm9ncmVzcyh1KSwgVC5zZXRXcmFwcGVyVHJhbnNpdGlvbihwKSwgVC5zZXRXcmFwcGVyVHJhbnNsYXRlKHUpLCBULm9uVHJhbnNpdGlvblN0YXJ0KCksIFQuYW5pbWF0aW5nIHx8IChULmFuaW1hdGluZyA9ICEwLCBULndyYXBwZXIudHJhbnNpdGlvbkVuZChmdW5jdGlvbiAoKSB7XFxuICAgICAgICAgICAgICAgIFQgJiYgVC5vblRyYW5zaXRpb25FbmQoKTtcXG4gICAgICAgICAgICAgIH0pKSkgOiBULnVwZGF0ZVByb2dyZXNzKHUpLCBULnVwZGF0ZUFjdGl2ZUluZGV4KCk7XFxuICAgICAgICAgICAgfXJldHVybiB2b2lkICgoIVQucGFyYW1zLmZyZWVNb2RlTW9tZW50dW0gfHwgcyA+PSBULnBhcmFtcy5sb25nU3dpcGVzTXMpICYmIChULnVwZGF0ZVByb2dyZXNzKCksIFQudXBkYXRlQWN0aXZlSW5kZXgoKSkpO1xcbiAgICAgICAgICB9dmFyIHYsXFxuICAgICAgICAgICAgICB3ID0gMCxcXG4gICAgICAgICAgICAgIHkgPSBULnNsaWRlc1NpemVzR3JpZFswXTtmb3IgKHYgPSAwOyB2IDwgVC5zbGlkZXNHcmlkLmxlbmd0aDsgdiArPSBULnBhcmFtcy5zbGlkZXNQZXJHcm91cCkge1xcbiAgICAgICAgICAgIHZvaWQgMCAhPT0gVC5zbGlkZXNHcmlkW3YgKyBULnBhcmFtcy5zbGlkZXNQZXJHcm91cF0gPyBpID49IFQuc2xpZGVzR3JpZFt2XSAmJiBpIDwgVC5zbGlkZXNHcmlkW3YgKyBULnBhcmFtcy5zbGlkZXNQZXJHcm91cF0gJiYgKHcgPSB2LCB5ID0gVC5zbGlkZXNHcmlkW3YgKyBULnBhcmFtcy5zbGlkZXNQZXJHcm91cF0gLSBULnNsaWRlc0dyaWRbdl0pIDogaSA+PSBULnNsaWRlc0dyaWRbdl0gJiYgKHcgPSB2LCB5ID0gVC5zbGlkZXNHcmlkW1Quc2xpZGVzR3JpZC5sZW5ndGggLSAxXSAtIFQuc2xpZGVzR3JpZFtULnNsaWRlc0dyaWQubGVuZ3RoIC0gMl0pO1xcbiAgICAgICAgICB9dmFyIHggPSAoaSAtIFQuc2xpZGVzR3JpZFt3XSkgLyB5O2lmIChzID4gVC5wYXJhbXMubG9uZ1N3aXBlc01zKSB7XFxuICAgICAgICAgICAgaWYgKCFULnBhcmFtcy5sb25nU3dpcGVzKSByZXR1cm4gdm9pZCBULnNsaWRlVG8oVC5hY3RpdmVJbmRleCk7XFxcIm5leHRcXFwiID09PSBULnN3aXBlRGlyZWN0aW9uICYmICh4ID49IFQucGFyYW1zLmxvbmdTd2lwZXNSYXRpbyA/IFQuc2xpZGVUbyh3ICsgVC5wYXJhbXMuc2xpZGVzUGVyR3JvdXApIDogVC5zbGlkZVRvKHcpKSwgXFxcInByZXZcXFwiID09PSBULnN3aXBlRGlyZWN0aW9uICYmICh4ID4gMSAtIFQucGFyYW1zLmxvbmdTd2lwZXNSYXRpbyA/IFQuc2xpZGVUbyh3ICsgVC5wYXJhbXMuc2xpZGVzUGVyR3JvdXApIDogVC5zbGlkZVRvKHcpKTtcXG4gICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICBpZiAoIVQucGFyYW1zLnNob3J0U3dpcGVzKSByZXR1cm4gdm9pZCBULnNsaWRlVG8oVC5hY3RpdmVJbmRleCk7XFxcIm5leHRcXFwiID09PSBULnN3aXBlRGlyZWN0aW9uICYmIFQuc2xpZGVUbyh3ICsgVC5wYXJhbXMuc2xpZGVzUGVyR3JvdXApLCBcXFwicHJldlxcXCIgPT09IFQuc3dpcGVEaXJlY3Rpb24gJiYgVC5zbGlkZVRvKHcpO1xcbiAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgICAgfSwgVC5fc2xpZGVUbyA9IGZ1bmN0aW9uIChlLCBhKSB7XFxuICAgICAgICByZXR1cm4gVC5zbGlkZVRvKGUsIGEsICEwLCAhMCk7XFxuICAgICAgfSwgVC5zbGlkZVRvID0gZnVuY3Rpb24gKGUsIGEsIHQsIHMpIHtcXG4gICAgICAgIHZvaWQgMCA9PT0gdCAmJiAodCA9ICEwKSwgdm9pZCAwID09PSBlICYmIChlID0gMCksIGUgPCAwICYmIChlID0gMCksIFQuc25hcEluZGV4ID0gTWF0aC5mbG9vcihlIC8gVC5wYXJhbXMuc2xpZGVzUGVyR3JvdXApLCBULnNuYXBJbmRleCA+PSBULnNuYXBHcmlkLmxlbmd0aCAmJiAoVC5zbmFwSW5kZXggPSBULnNuYXBHcmlkLmxlbmd0aCAtIDEpO3ZhciBpID0gLVQuc25hcEdyaWRbVC5zbmFwSW5kZXhdO2lmIChULnBhcmFtcy5hdXRvcGxheSAmJiBULmF1dG9wbGF5aW5nICYmIChzIHx8ICFULnBhcmFtcy5hdXRvcGxheURpc2FibGVPbkludGVyYWN0aW9uID8gVC5wYXVzZUF1dG9wbGF5KGEpIDogVC5zdG9wQXV0b3BsYXkoKSksIFQudXBkYXRlUHJvZ3Jlc3MoaSksIFQucGFyYW1zLm5vcm1hbGl6ZVNsaWRlSW5kZXgpIGZvciAodmFyIHIgPSAwOyByIDwgVC5zbGlkZXNHcmlkLmxlbmd0aDsgcisrKSB7XFxuICAgICAgICAgIC1NYXRoLmZsb29yKDEwMCAqIGkpID49IE1hdGguZmxvb3IoMTAwICogVC5zbGlkZXNHcmlkW3JdKSAmJiAoZSA9IHIpO1xcbiAgICAgICAgfXJldHVybiAhKCFULnBhcmFtcy5hbGxvd1N3aXBlVG9OZXh0ICYmIGkgPCBULnRyYW5zbGF0ZSAmJiBpIDwgVC5taW5UcmFuc2xhdGUoKSkgJiYgISghVC5wYXJhbXMuYWxsb3dTd2lwZVRvUHJldiAmJiBpID4gVC50cmFuc2xhdGUgJiYgaSA+IFQubWF4VHJhbnNsYXRlKCkgJiYgKFQuYWN0aXZlSW5kZXggfHwgMCkgIT09IGUpICYmICh2b2lkIDAgPT09IGEgJiYgKGEgPSBULnBhcmFtcy5zcGVlZCksIFQucHJldmlvdXNJbmRleCA9IFQuYWN0aXZlSW5kZXggfHwgMCwgVC5hY3RpdmVJbmRleCA9IGUsIFQudXBkYXRlUmVhbEluZGV4KCksIFQucnRsICYmIC1pID09PSBULnRyYW5zbGF0ZSB8fCAhVC5ydGwgJiYgaSA9PT0gVC50cmFuc2xhdGUgPyAoVC5wYXJhbXMuYXV0b0hlaWdodCAmJiBULnVwZGF0ZUF1dG9IZWlnaHQoKSwgVC51cGRhdGVDbGFzc2VzKCksIFxcXCJzbGlkZVxcXCIgIT09IFQucGFyYW1zLmVmZmVjdCAmJiBULnNldFdyYXBwZXJUcmFuc2xhdGUoaSksICExKSA6IChULnVwZGF0ZUNsYXNzZXMoKSwgVC5vblRyYW5zaXRpb25TdGFydCh0KSwgMCA9PT0gYSB8fCBULmJyb3dzZXIubHRlSUU5ID8gKFQuc2V0V3JhcHBlclRyYW5zbGF0ZShpKSwgVC5zZXRXcmFwcGVyVHJhbnNpdGlvbigwKSwgVC5vblRyYW5zaXRpb25FbmQodCkpIDogKFQuc2V0V3JhcHBlclRyYW5zbGF0ZShpKSwgVC5zZXRXcmFwcGVyVHJhbnNpdGlvbihhKSwgVC5hbmltYXRpbmcgfHwgKFQuYW5pbWF0aW5nID0gITAsIFQud3JhcHBlci50cmFuc2l0aW9uRW5kKGZ1bmN0aW9uICgpIHtcXG4gICAgICAgICAgVCAmJiBULm9uVHJhbnNpdGlvbkVuZCh0KTtcXG4gICAgICAgIH0pKSksICEwKSk7XFxuICAgICAgfSwgVC5vblRyYW5zaXRpb25TdGFydCA9IGZ1bmN0aW9uIChlKSB7XFxuICAgICAgICB2b2lkIDAgPT09IGUgJiYgKGUgPSAhMCksIFQucGFyYW1zLmF1dG9IZWlnaHQgJiYgVC51cGRhdGVBdXRvSGVpZ2h0KCksIFQubGF6eSAmJiBULmxhenkub25UcmFuc2l0aW9uU3RhcnQoKSwgZSAmJiAoVC5lbWl0KFxcXCJvblRyYW5zaXRpb25TdGFydFxcXCIsIFQpLCBULmFjdGl2ZUluZGV4ICE9PSBULnByZXZpb3VzSW5kZXggJiYgKFQuZW1pdChcXFwib25TbGlkZUNoYW5nZVN0YXJ0XFxcIiwgVCksIFQuYWN0aXZlSW5kZXggPiBULnByZXZpb3VzSW5kZXggPyBULmVtaXQoXFxcIm9uU2xpZGVOZXh0U3RhcnRcXFwiLCBUKSA6IFQuZW1pdChcXFwib25TbGlkZVByZXZTdGFydFxcXCIsIFQpKSk7XFxuICAgICAgfSwgVC5vblRyYW5zaXRpb25FbmQgPSBmdW5jdGlvbiAoZSkge1xcbiAgICAgICAgVC5hbmltYXRpbmcgPSAhMSwgVC5zZXRXcmFwcGVyVHJhbnNpdGlvbigwKSwgdm9pZCAwID09PSBlICYmIChlID0gITApLCBULmxhenkgJiYgVC5sYXp5Lm9uVHJhbnNpdGlvbkVuZCgpLCBlICYmIChULmVtaXQoXFxcIm9uVHJhbnNpdGlvbkVuZFxcXCIsIFQpLCBULmFjdGl2ZUluZGV4ICE9PSBULnByZXZpb3VzSW5kZXggJiYgKFQuZW1pdChcXFwib25TbGlkZUNoYW5nZUVuZFxcXCIsIFQpLCBULmFjdGl2ZUluZGV4ID4gVC5wcmV2aW91c0luZGV4ID8gVC5lbWl0KFxcXCJvblNsaWRlTmV4dEVuZFxcXCIsIFQpIDogVC5lbWl0KFxcXCJvblNsaWRlUHJldkVuZFxcXCIsIFQpKSksIFQucGFyYW1zLmhpc3RvcnkgJiYgVC5oaXN0b3J5ICYmIFQuaGlzdG9yeS5zZXRIaXN0b3J5KFQucGFyYW1zLmhpc3RvcnksIFQuYWN0aXZlSW5kZXgpLCBULnBhcmFtcy5oYXNobmF2ICYmIFQuaGFzaG5hdiAmJiBULmhhc2huYXYuc2V0SGFzaCgpO1xcbiAgICAgIH0sIFQuc2xpZGVOZXh0ID0gZnVuY3Rpb24gKGUsIGEsIHQpIHtcXG4gICAgICAgIGlmIChULnBhcmFtcy5sb29wKSB7XFxuICAgICAgICAgIGlmIChULmFuaW1hdGluZykgcmV0dXJuICExO1QuZml4TG9vcCgpO1QuY29udGFpbmVyWzBdLmNsaWVudExlZnQ7cmV0dXJuIFQuc2xpZGVUbyhULmFjdGl2ZUluZGV4ICsgVC5wYXJhbXMuc2xpZGVzUGVyR3JvdXAsIGEsIGUsIHQpO1xcbiAgICAgICAgfXJldHVybiBULnNsaWRlVG8oVC5hY3RpdmVJbmRleCArIFQucGFyYW1zLnNsaWRlc1Blckdyb3VwLCBhLCBlLCB0KTtcXG4gICAgICB9LCBULl9zbGlkZU5leHQgPSBmdW5jdGlvbiAoZSkge1xcbiAgICAgICAgcmV0dXJuIFQuc2xpZGVOZXh0KCEwLCBlLCAhMCk7XFxuICAgICAgfSwgVC5zbGlkZVByZXYgPSBmdW5jdGlvbiAoZSwgYSwgdCkge1xcbiAgICAgICAgaWYgKFQucGFyYW1zLmxvb3ApIHtcXG4gICAgICAgICAgaWYgKFQuYW5pbWF0aW5nKSByZXR1cm4gITE7VC5maXhMb29wKCk7VC5jb250YWluZXJbMF0uY2xpZW50TGVmdDtyZXR1cm4gVC5zbGlkZVRvKFQuYWN0aXZlSW5kZXggLSAxLCBhLCBlLCB0KTtcXG4gICAgICAgIH1yZXR1cm4gVC5zbGlkZVRvKFQuYWN0aXZlSW5kZXggLSAxLCBhLCBlLCB0KTtcXG4gICAgICB9LCBULl9zbGlkZVByZXYgPSBmdW5jdGlvbiAoZSkge1xcbiAgICAgICAgcmV0dXJuIFQuc2xpZGVQcmV2KCEwLCBlLCAhMCk7XFxuICAgICAgfSwgVC5zbGlkZVJlc2V0ID0gZnVuY3Rpb24gKGUsIGEsIHQpIHtcXG4gICAgICAgIHJldHVybiBULnNsaWRlVG8oVC5hY3RpdmVJbmRleCwgYSwgZSk7XFxuICAgICAgfSwgVC5kaXNhYmxlVG91Y2hDb250cm9sID0gZnVuY3Rpb24gKCkge1xcbiAgICAgICAgcmV0dXJuIFQucGFyYW1zLm9ubHlFeHRlcm5hbCA9ICEwLCAhMDtcXG4gICAgICB9LCBULmVuYWJsZVRvdWNoQ29udHJvbCA9IGZ1bmN0aW9uICgpIHtcXG4gICAgICAgIHJldHVybiBULnBhcmFtcy5vbmx5RXh0ZXJuYWwgPSAhMSwgITA7XFxuICAgICAgfSwgVC5zZXRXcmFwcGVyVHJhbnNpdGlvbiA9IGZ1bmN0aW9uIChlLCBhKSB7XFxuICAgICAgICBULndyYXBwZXIudHJhbnNpdGlvbihlKSwgXFxcInNsaWRlXFxcIiAhPT0gVC5wYXJhbXMuZWZmZWN0ICYmIFQuZWZmZWN0c1tULnBhcmFtcy5lZmZlY3RdICYmIFQuZWZmZWN0c1tULnBhcmFtcy5lZmZlY3RdLnNldFRyYW5zaXRpb24oZSksIFQucGFyYW1zLnBhcmFsbGF4ICYmIFQucGFyYWxsYXggJiYgVC5wYXJhbGxheC5zZXRUcmFuc2l0aW9uKGUpLCBULnBhcmFtcy5zY3JvbGxiYXIgJiYgVC5zY3JvbGxiYXIgJiYgVC5zY3JvbGxiYXIuc2V0VHJhbnNpdGlvbihlKSwgVC5wYXJhbXMuY29udHJvbCAmJiBULmNvbnRyb2xsZXIgJiYgVC5jb250cm9sbGVyLnNldFRyYW5zaXRpb24oZSwgYSksIFQuZW1pdChcXFwib25TZXRUcmFuc2l0aW9uXFxcIiwgVCwgZSk7XFxuICAgICAgfSwgVC5zZXRXcmFwcGVyVHJhbnNsYXRlID0gZnVuY3Rpb24gKGUsIGEsIHQpIHtcXG4gICAgICAgIHZhciBzID0gMCxcXG4gICAgICAgICAgICBpID0gMDtULmlzSG9yaXpvbnRhbCgpID8gcyA9IFQucnRsID8gLWUgOiBlIDogaSA9IGUsIFQucGFyYW1zLnJvdW5kTGVuZ3RocyAmJiAocyA9IHIocyksIGkgPSByKGkpKSwgVC5wYXJhbXMudmlydHVhbFRyYW5zbGF0ZSB8fCAoVC5zdXBwb3J0LnRyYW5zZm9ybXMzZCA/IFQud3JhcHBlci50cmFuc2Zvcm0oXFxcInRyYW5zbGF0ZTNkKFxcXCIgKyBzICsgXFxcInB4LCBcXFwiICsgaSArIFxcXCJweCwgMHB4KVxcXCIpIDogVC53cmFwcGVyLnRyYW5zZm9ybShcXFwidHJhbnNsYXRlKFxcXCIgKyBzICsgXFxcInB4LCBcXFwiICsgaSArIFxcXCJweClcXFwiKSksIFQudHJhbnNsYXRlID0gVC5pc0hvcml6b250YWwoKSA/IHMgOiBpO3ZhciBuLFxcbiAgICAgICAgICAgIG8gPSBULm1heFRyYW5zbGF0ZSgpIC0gVC5taW5UcmFuc2xhdGUoKTtuID0gMCA9PT0gbyA/IDAgOiAoZSAtIFQubWluVHJhbnNsYXRlKCkpIC8gbywgbiAhPT0gVC5wcm9ncmVzcyAmJiBULnVwZGF0ZVByb2dyZXNzKGUpLCBhICYmIFQudXBkYXRlQWN0aXZlSW5kZXgoKSwgXFxcInNsaWRlXFxcIiAhPT0gVC5wYXJhbXMuZWZmZWN0ICYmIFQuZWZmZWN0c1tULnBhcmFtcy5lZmZlY3RdICYmIFQuZWZmZWN0c1tULnBhcmFtcy5lZmZlY3RdLnNldFRyYW5zbGF0ZShULnRyYW5zbGF0ZSksIFQucGFyYW1zLnBhcmFsbGF4ICYmIFQucGFyYWxsYXggJiYgVC5wYXJhbGxheC5zZXRUcmFuc2xhdGUoVC50cmFuc2xhdGUpLCBULnBhcmFtcy5zY3JvbGxiYXIgJiYgVC5zY3JvbGxiYXIgJiYgVC5zY3JvbGxiYXIuc2V0VHJhbnNsYXRlKFQudHJhbnNsYXRlKSwgVC5wYXJhbXMuY29udHJvbCAmJiBULmNvbnRyb2xsZXIgJiYgVC5jb250cm9sbGVyLnNldFRyYW5zbGF0ZShULnRyYW5zbGF0ZSwgdCksIFQuZW1pdChcXFwib25TZXRUcmFuc2xhdGVcXFwiLCBULCBULnRyYW5zbGF0ZSk7XFxuICAgICAgfSwgVC5nZXRUcmFuc2xhdGUgPSBmdW5jdGlvbiAoZSwgYSkge1xcbiAgICAgICAgdmFyIHQsIHMsIGksIHI7cmV0dXJuIHZvaWQgMCA9PT0gYSAmJiAoYSA9IFxcXCJ4XFxcIiksIFQucGFyYW1zLnZpcnR1YWxUcmFuc2xhdGUgPyBULnJ0bCA/IC1ULnRyYW5zbGF0ZSA6IFQudHJhbnNsYXRlIDogKGkgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlLCBudWxsKSwgd2luZG93LldlYktpdENTU01hdHJpeCA/IChzID0gaS50cmFuc2Zvcm0gfHwgaS53ZWJraXRUcmFuc2Zvcm0sIHMuc3BsaXQoXFxcIixcXFwiKS5sZW5ndGggPiA2ICYmIChzID0gcy5zcGxpdChcXFwiLCBcXFwiKS5tYXAoZnVuY3Rpb24gKGUpIHtcXG4gICAgICAgICAgcmV0dXJuIGUucmVwbGFjZShcXFwiLFxcXCIsIFxcXCIuXFxcIik7XFxuICAgICAgICB9KS5qb2luKFxcXCIsIFxcXCIpKSwgciA9IG5ldyB3aW5kb3cuV2ViS2l0Q1NTTWF0cml4KFxcXCJub25lXFxcIiA9PT0gcyA/IFxcXCJcXFwiIDogcykpIDogKHIgPSBpLk1velRyYW5zZm9ybSB8fCBpLk9UcmFuc2Zvcm0gfHwgaS5Nc1RyYW5zZm9ybSB8fCBpLm1zVHJhbnNmb3JtIHx8IGkudHJhbnNmb3JtIHx8IGkuZ2V0UHJvcGVydHlWYWx1ZShcXFwidHJhbnNmb3JtXFxcIikucmVwbGFjZShcXFwidHJhbnNsYXRlKFxcXCIsIFxcXCJtYXRyaXgoMSwgMCwgMCwgMSxcXFwiKSwgdCA9IHIudG9TdHJpbmcoKS5zcGxpdChcXFwiLFxcXCIpKSwgXFxcInhcXFwiID09PSBhICYmIChzID0gd2luZG93LldlYktpdENTU01hdHJpeCA/IHIubTQxIDogMTYgPT09IHQubGVuZ3RoID8gcGFyc2VGbG9hdCh0WzEyXSkgOiBwYXJzZUZsb2F0KHRbNF0pKSwgXFxcInlcXFwiID09PSBhICYmIChzID0gd2luZG93LldlYktpdENTU01hdHJpeCA/IHIubTQyIDogMTYgPT09IHQubGVuZ3RoID8gcGFyc2VGbG9hdCh0WzEzXSkgOiBwYXJzZUZsb2F0KHRbNV0pKSwgVC5ydGwgJiYgcyAmJiAocyA9IC1zKSwgcyB8fCAwKTtcXG4gICAgICB9LCBULmdldFdyYXBwZXJUcmFuc2xhdGUgPSBmdW5jdGlvbiAoZSkge1xcbiAgICAgICAgcmV0dXJuIHZvaWQgMCA9PT0gZSAmJiAoZSA9IFQuaXNIb3Jpem9udGFsKCkgPyBcXFwieFxcXCIgOiBcXFwieVxcXCIpLCBULmdldFRyYW5zbGF0ZShULndyYXBwZXJbMF0sIGUpO1xcbiAgICAgIH0sIFQub2JzZXJ2ZXJzID0gW10sIFQuaW5pdE9ic2VydmVycyA9IGZ1bmN0aW9uICgpIHtcXG4gICAgICAgIGlmIChULnBhcmFtcy5vYnNlcnZlUGFyZW50cykgZm9yICh2YXIgZSA9IFQuY29udGFpbmVyLnBhcmVudHMoKSwgYSA9IDA7IGEgPCBlLmxlbmd0aDsgYSsrKSB7XFxuICAgICAgICAgIGwoZVthXSk7XFxuICAgICAgICB9bChULmNvbnRhaW5lclswXSwgeyBjaGlsZExpc3Q6ICExIH0pLCBsKFQud3JhcHBlclswXSwgeyBhdHRyaWJ1dGVzOiAhMSB9KTtcXG4gICAgICB9LCBULmRpc2Nvbm5lY3RPYnNlcnZlcnMgPSBmdW5jdGlvbiAoKSB7XFxuICAgICAgICBmb3IgKHZhciBlID0gMDsgZSA8IFQub2JzZXJ2ZXJzLmxlbmd0aDsgZSsrKSB7XFxuICAgICAgICAgIFQub2JzZXJ2ZXJzW2VdLmRpc2Nvbm5lY3QoKTtcXG4gICAgICAgIH1ULm9ic2VydmVycyA9IFtdO1xcbiAgICAgIH0sIFQuY3JlYXRlTG9vcCA9IGZ1bmN0aW9uICgpIHtcXG4gICAgICAgIFQud3JhcHBlci5jaGlsZHJlbihcXFwiLlxcXCIgKyBULnBhcmFtcy5zbGlkZUNsYXNzICsgXFxcIi5cXFwiICsgVC5wYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcykucmVtb3ZlKCk7dmFyIGEgPSBULndyYXBwZXIuY2hpbGRyZW4oXFxcIi5cXFwiICsgVC5wYXJhbXMuc2xpZGVDbGFzcyk7XFxcImF1dG9cXFwiICE9PSBULnBhcmFtcy5zbGlkZXNQZXJWaWV3IHx8IFQucGFyYW1zLmxvb3BlZFNsaWRlcyB8fCAoVC5wYXJhbXMubG9vcGVkU2xpZGVzID0gYS5sZW5ndGgpLCBULmxvb3BlZFNsaWRlcyA9IHBhcnNlSW50KFQucGFyYW1zLmxvb3BlZFNsaWRlcyB8fCBULnBhcmFtcy5zbGlkZXNQZXJWaWV3LCAxMCksIFQubG9vcGVkU2xpZGVzID0gVC5sb29wZWRTbGlkZXMgKyBULnBhcmFtcy5sb29wQWRkaXRpb25hbFNsaWRlcywgVC5sb29wZWRTbGlkZXMgPiBhLmxlbmd0aCAmJiAoVC5sb29wZWRTbGlkZXMgPSBhLmxlbmd0aCk7dmFyIHQsXFxuICAgICAgICAgICAgcyA9IFtdLFxcbiAgICAgICAgICAgIGkgPSBbXTtmb3IgKGEuZWFjaChmdW5jdGlvbiAodCwgcikge1xcbiAgICAgICAgICB2YXIgbiA9IGUodGhpcyk7dCA8IFQubG9vcGVkU2xpZGVzICYmIGkucHVzaChyKSwgdCA8IGEubGVuZ3RoICYmIHQgPj0gYS5sZW5ndGggLSBULmxvb3BlZFNsaWRlcyAmJiBzLnB1c2gociksIG4uYXR0cihcXFwiZGF0YS1zd2lwZXItc2xpZGUtaW5kZXhcXFwiLCB0KTtcXG4gICAgICAgIH0pLCB0ID0gMDsgdCA8IGkubGVuZ3RoOyB0KyspIHtcXG4gICAgICAgICAgVC53cmFwcGVyLmFwcGVuZChlKGlbdF0uY2xvbmVOb2RlKCEwKSkuYWRkQ2xhc3MoVC5wYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcykpO1xcbiAgICAgICAgfWZvciAodCA9IHMubGVuZ3RoIC0gMTsgdCA+PSAwOyB0LS0pIHtcXG4gICAgICAgICAgVC53cmFwcGVyLnByZXBlbmQoZShzW3RdLmNsb25lTm9kZSghMCkpLmFkZENsYXNzKFQucGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpKTtcXG4gICAgICAgIH1cXG4gICAgICB9LCBULmRlc3Ryb3lMb29wID0gZnVuY3Rpb24gKCkge1xcbiAgICAgICAgVC53cmFwcGVyLmNoaWxkcmVuKFxcXCIuXFxcIiArIFQucGFyYW1zLnNsaWRlQ2xhc3MgKyBcXFwiLlxcXCIgKyBULnBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKS5yZW1vdmUoKSwgVC5zbGlkZXMucmVtb3ZlQXR0cihcXFwiZGF0YS1zd2lwZXItc2xpZGUtaW5kZXhcXFwiKTtcXG4gICAgICB9LCBULnJlTG9vcCA9IGZ1bmN0aW9uIChlKSB7XFxuICAgICAgICB2YXIgYSA9IFQuYWN0aXZlSW5kZXggLSBULmxvb3BlZFNsaWRlcztULmRlc3Ryb3lMb29wKCksIFQuY3JlYXRlTG9vcCgpLCBULnVwZGF0ZVNsaWRlc1NpemUoKSwgZSAmJiBULnNsaWRlVG8oYSArIFQubG9vcGVkU2xpZGVzLCAwLCAhMSk7XFxuICAgICAgfSwgVC5maXhMb29wID0gZnVuY3Rpb24gKCkge1xcbiAgICAgICAgdmFyIGU7VC5hY3RpdmVJbmRleCA8IFQubG9vcGVkU2xpZGVzID8gKGUgPSBULnNsaWRlcy5sZW5ndGggLSAzICogVC5sb29wZWRTbGlkZXMgKyBULmFjdGl2ZUluZGV4LCBlICs9IFQubG9vcGVkU2xpZGVzLCBULnNsaWRlVG8oZSwgMCwgITEsICEwKSkgOiAoXFxcImF1dG9cXFwiID09PSBULnBhcmFtcy5zbGlkZXNQZXJWaWV3ICYmIFQuYWN0aXZlSW5kZXggPj0gMiAqIFQubG9vcGVkU2xpZGVzIHx8IFQuYWN0aXZlSW5kZXggPiBULnNsaWRlcy5sZW5ndGggLSAyICogVC5wYXJhbXMuc2xpZGVzUGVyVmlldykgJiYgKGUgPSAtVC5zbGlkZXMubGVuZ3RoICsgVC5hY3RpdmVJbmRleCArIFQubG9vcGVkU2xpZGVzLCBlICs9IFQubG9vcGVkU2xpZGVzLCBULnNsaWRlVG8oZSwgMCwgITEsICEwKSk7XFxuICAgICAgfSwgVC5hcHBlbmRTbGlkZSA9IGZ1bmN0aW9uIChlKSB7XFxuICAgICAgICBpZiAoVC5wYXJhbXMubG9vcCAmJiBULmRlc3Ryb3lMb29wKCksIFxcXCJvYmplY3RcXFwiID09ICh0eXBlb2YgZSA9PT0gXFxcInVuZGVmaW5lZFxcXCIgPyBcXFwidW5kZWZpbmVkXFxcIiA6IF90eXBlb2YoZSkpICYmIGUubGVuZ3RoKSBmb3IgKHZhciBhID0gMDsgYSA8IGUubGVuZ3RoOyBhKyspIHtcXG4gICAgICAgICAgZVthXSAmJiBULndyYXBwZXIuYXBwZW5kKGVbYV0pO1xcbiAgICAgICAgfSBlbHNlIFQud3JhcHBlci5hcHBlbmQoZSk7VC5wYXJhbXMubG9vcCAmJiBULmNyZWF0ZUxvb3AoKSwgVC5wYXJhbXMub2JzZXJ2ZXIgJiYgVC5zdXBwb3J0Lm9ic2VydmVyIHx8IFQudXBkYXRlKCEwKTtcXG4gICAgICB9LCBULnByZXBlbmRTbGlkZSA9IGZ1bmN0aW9uIChlKSB7XFxuICAgICAgICBULnBhcmFtcy5sb29wICYmIFQuZGVzdHJveUxvb3AoKTt2YXIgYSA9IFQuYWN0aXZlSW5kZXggKyAxO2lmIChcXFwib2JqZWN0XFxcIiA9PSAodHlwZW9mIGUgPT09IFxcXCJ1bmRlZmluZWRcXFwiID8gXFxcInVuZGVmaW5lZFxcXCIgOiBfdHlwZW9mKGUpKSAmJiBlLmxlbmd0aCkge1xcbiAgICAgICAgICBmb3IgKHZhciB0ID0gMDsgdCA8IGUubGVuZ3RoOyB0KyspIHtcXG4gICAgICAgICAgICBlW3RdICYmIFQud3JhcHBlci5wcmVwZW5kKGVbdF0pO1xcbiAgICAgICAgICB9YSA9IFQuYWN0aXZlSW5kZXggKyBlLmxlbmd0aDtcXG4gICAgICAgIH0gZWxzZSBULndyYXBwZXIucHJlcGVuZChlKTtULnBhcmFtcy5sb29wICYmIFQuY3JlYXRlTG9vcCgpLCBULnBhcmFtcy5vYnNlcnZlciAmJiBULnN1cHBvcnQub2JzZXJ2ZXIgfHwgVC51cGRhdGUoITApLCBULnNsaWRlVG8oYSwgMCwgITEpO1xcbiAgICAgIH0sIFQucmVtb3ZlU2xpZGUgPSBmdW5jdGlvbiAoZSkge1xcbiAgICAgICAgVC5wYXJhbXMubG9vcCAmJiAoVC5kZXN0cm95TG9vcCgpLCBULnNsaWRlcyA9IFQud3JhcHBlci5jaGlsZHJlbihcXFwiLlxcXCIgKyBULnBhcmFtcy5zbGlkZUNsYXNzKSk7dmFyIGEsXFxuICAgICAgICAgICAgdCA9IFQuYWN0aXZlSW5kZXg7aWYgKFxcXCJvYmplY3RcXFwiID09ICh0eXBlb2YgZSA9PT0gXFxcInVuZGVmaW5lZFxcXCIgPyBcXFwidW5kZWZpbmVkXFxcIiA6IF90eXBlb2YoZSkpICYmIGUubGVuZ3RoKSB7XFxuICAgICAgICAgIGZvciAodmFyIHMgPSAwOyBzIDwgZS5sZW5ndGg7IHMrKykge1xcbiAgICAgICAgICAgIGEgPSBlW3NdLCBULnNsaWRlc1thXSAmJiBULnNsaWRlcy5lcShhKS5yZW1vdmUoKSwgYSA8IHQgJiYgdC0tO1xcbiAgICAgICAgICB9dCA9IE1hdGgubWF4KHQsIDApO1xcbiAgICAgICAgfSBlbHNlIGEgPSBlLCBULnNsaWRlc1thXSAmJiBULnNsaWRlcy5lcShhKS5yZW1vdmUoKSwgYSA8IHQgJiYgdC0tLCB0ID0gTWF0aC5tYXgodCwgMCk7VC5wYXJhbXMubG9vcCAmJiBULmNyZWF0ZUxvb3AoKSwgVC5wYXJhbXMub2JzZXJ2ZXIgJiYgVC5zdXBwb3J0Lm9ic2VydmVyIHx8IFQudXBkYXRlKCEwKSwgVC5wYXJhbXMubG9vcCA/IFQuc2xpZGVUbyh0ICsgVC5sb29wZWRTbGlkZXMsIDAsICExKSA6IFQuc2xpZGVUbyh0LCAwLCAhMSk7XFxuICAgICAgfSwgVC5yZW1vdmVBbGxTbGlkZXMgPSBmdW5jdGlvbiAoKSB7XFxuICAgICAgICBmb3IgKHZhciBlID0gW10sIGEgPSAwOyBhIDwgVC5zbGlkZXMubGVuZ3RoOyBhKyspIHtcXG4gICAgICAgICAgZS5wdXNoKGEpO1xcbiAgICAgICAgfVQucmVtb3ZlU2xpZGUoZSk7XFxuICAgICAgfSwgVC5lZmZlY3RzID0geyBmYWRlOiB7IHNldFRyYW5zbGF0ZTogZnVuY3Rpb24gc2V0VHJhbnNsYXRlKCkge1xcbiAgICAgICAgICAgIGZvciAodmFyIGUgPSAwOyBlIDwgVC5zbGlkZXMubGVuZ3RoOyBlKyspIHtcXG4gICAgICAgICAgICAgIHZhciBhID0gVC5zbGlkZXMuZXEoZSksXFxuICAgICAgICAgICAgICAgICAgdCA9IGFbMF0uc3dpcGVyU2xpZGVPZmZzZXQsXFxuICAgICAgICAgICAgICAgICAgcyA9IC10O1QucGFyYW1zLnZpcnR1YWxUcmFuc2xhdGUgfHwgKHMgLT0gVC50cmFuc2xhdGUpO3ZhciBpID0gMDtULmlzSG9yaXpvbnRhbCgpIHx8IChpID0gcywgcyA9IDApO3ZhciByID0gVC5wYXJhbXMuZmFkZS5jcm9zc0ZhZGUgPyBNYXRoLm1heCgxIC0gTWF0aC5hYnMoYVswXS5wcm9ncmVzcyksIDApIDogMSArIE1hdGgubWluKE1hdGgubWF4KGFbMF0ucHJvZ3Jlc3MsIC0xKSwgMCk7YS5jc3MoeyBvcGFjaXR5OiByIH0pLnRyYW5zZm9ybShcXFwidHJhbnNsYXRlM2QoXFxcIiArIHMgKyBcXFwicHgsIFxcXCIgKyBpICsgXFxcInB4LCAwcHgpXFxcIik7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9LCBzZXRUcmFuc2l0aW9uOiBmdW5jdGlvbiBzZXRUcmFuc2l0aW9uKGUpIHtcXG4gICAgICAgICAgICBpZiAoVC5zbGlkZXMudHJhbnNpdGlvbihlKSwgVC5wYXJhbXMudmlydHVhbFRyYW5zbGF0ZSAmJiAwICE9PSBlKSB7XFxuICAgICAgICAgICAgICB2YXIgYSA9ICExO1Quc2xpZGVzLnRyYW5zaXRpb25FbmQoZnVuY3Rpb24gKCkge1xcbiAgICAgICAgICAgICAgICBpZiAoIWEgJiYgVCkge1xcbiAgICAgICAgICAgICAgICAgIGEgPSAhMCwgVC5hbmltYXRpbmcgPSAhMTtmb3IgKHZhciBlID0gW1xcXCJ3ZWJraXRUcmFuc2l0aW9uRW5kXFxcIiwgXFxcInRyYW5zaXRpb25lbmRcXFwiLCBcXFwib1RyYW5zaXRpb25FbmRcXFwiLCBcXFwiTVNUcmFuc2l0aW9uRW5kXFxcIiwgXFxcIm1zVHJhbnNpdGlvbkVuZFxcXCJdLCB0ID0gMDsgdCA8IGUubGVuZ3RoOyB0KyspIHtcXG4gICAgICAgICAgICAgICAgICAgIFQud3JhcHBlci50cmlnZ2VyKGVbdF0pO1xcbiAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9IH0sIGZsaXA6IHsgc2V0VHJhbnNsYXRlOiBmdW5jdGlvbiBzZXRUcmFuc2xhdGUoKSB7XFxuICAgICAgICAgICAgZm9yICh2YXIgYSA9IDA7IGEgPCBULnNsaWRlcy5sZW5ndGg7IGErKykge1xcbiAgICAgICAgICAgICAgdmFyIHQgPSBULnNsaWRlcy5lcShhKSxcXG4gICAgICAgICAgICAgICAgICBzID0gdFswXS5wcm9ncmVzcztULnBhcmFtcy5mbGlwLmxpbWl0Um90YXRpb24gJiYgKHMgPSBNYXRoLm1heChNYXRoLm1pbih0WzBdLnByb2dyZXNzLCAxKSwgLTEpKTt2YXIgaSA9IHRbMF0uc3dpcGVyU2xpZGVPZmZzZXQsXFxuICAgICAgICAgICAgICAgICAgciA9IC0xODAgKiBzLFxcbiAgICAgICAgICAgICAgICAgIG4gPSByLFxcbiAgICAgICAgICAgICAgICAgIG8gPSAwLFxcbiAgICAgICAgICAgICAgICAgIGwgPSAtaSxcXG4gICAgICAgICAgICAgICAgICBwID0gMDtpZiAoVC5pc0hvcml6b250YWwoKSA/IFQucnRsICYmIChuID0gLW4pIDogKHAgPSBsLCBsID0gMCwgbyA9IC1uLCBuID0gMCksIHRbMF0uc3R5bGUuekluZGV4ID0gLU1hdGguYWJzKE1hdGgucm91bmQocykpICsgVC5zbGlkZXMubGVuZ3RoLCBULnBhcmFtcy5mbGlwLnNsaWRlU2hhZG93cykge1xcbiAgICAgICAgICAgICAgICB2YXIgZCA9IFQuaXNIb3Jpem9udGFsKCkgPyB0LmZpbmQoXFxcIi5zd2lwZXItc2xpZGUtc2hhZG93LWxlZnRcXFwiKSA6IHQuZmluZChcXFwiLnN3aXBlci1zbGlkZS1zaGFkb3ctdG9wXFxcIiksXFxuICAgICAgICAgICAgICAgICAgICB1ID0gVC5pc0hvcml6b250YWwoKSA/IHQuZmluZChcXFwiLnN3aXBlci1zbGlkZS1zaGFkb3ctcmlnaHRcXFwiKSA6IHQuZmluZChcXFwiLnN3aXBlci1zbGlkZS1zaGFkb3ctYm90dG9tXFxcIik7MCA9PT0gZC5sZW5ndGggJiYgKGQgPSBlKCc8ZGl2IGNsYXNzPVxcXCJzd2lwZXItc2xpZGUtc2hhZG93LScgKyAoVC5pc0hvcml6b250YWwoKSA/IFxcXCJsZWZ0XFxcIiA6IFxcXCJ0b3BcXFwiKSArICdcXFwiPjwvZGl2PicpLCB0LmFwcGVuZChkKSksIDAgPT09IHUubGVuZ3RoICYmICh1ID0gZSgnPGRpdiBjbGFzcz1cXFwic3dpcGVyLXNsaWRlLXNoYWRvdy0nICsgKFQuaXNIb3Jpem9udGFsKCkgPyBcXFwicmlnaHRcXFwiIDogXFxcImJvdHRvbVxcXCIpICsgJ1xcXCI+PC9kaXY+JyksIHQuYXBwZW5kKHUpKSwgZC5sZW5ndGggJiYgKGRbMF0uc3R5bGUub3BhY2l0eSA9IE1hdGgubWF4KC1zLCAwKSksIHUubGVuZ3RoICYmICh1WzBdLnN0eWxlLm9wYWNpdHkgPSBNYXRoLm1heChzLCAwKSk7XFxuICAgICAgICAgICAgICB9dC50cmFuc2Zvcm0oXFxcInRyYW5zbGF0ZTNkKFxcXCIgKyBsICsgXFxcInB4LCBcXFwiICsgcCArIFxcXCJweCwgMHB4KSByb3RhdGVYKFxcXCIgKyBvICsgXFxcImRlZykgcm90YXRlWShcXFwiICsgbiArIFxcXCJkZWcpXFxcIik7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9LCBzZXRUcmFuc2l0aW9uOiBmdW5jdGlvbiBzZXRUcmFuc2l0aW9uKGEpIHtcXG4gICAgICAgICAgICBpZiAoVC5zbGlkZXMudHJhbnNpdGlvbihhKS5maW5kKFxcXCIuc3dpcGVyLXNsaWRlLXNoYWRvdy10b3AsIC5zd2lwZXItc2xpZGUtc2hhZG93LXJpZ2h0LCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1ib3R0b20sIC5zd2lwZXItc2xpZGUtc2hhZG93LWxlZnRcXFwiKS50cmFuc2l0aW9uKGEpLCBULnBhcmFtcy52aXJ0dWFsVHJhbnNsYXRlICYmIDAgIT09IGEpIHtcXG4gICAgICAgICAgICAgIHZhciB0ID0gITE7VC5zbGlkZXMuZXEoVC5hY3RpdmVJbmRleCkudHJhbnNpdGlvbkVuZChmdW5jdGlvbiAoKSB7XFxuICAgICAgICAgICAgICAgIGlmICghdCAmJiBUICYmIGUodGhpcykuaGFzQ2xhc3MoVC5wYXJhbXMuc2xpZGVBY3RpdmVDbGFzcykpIHtcXG4gICAgICAgICAgICAgICAgICB0ID0gITAsIFQuYW5pbWF0aW5nID0gITE7Zm9yICh2YXIgYSA9IFtcXFwid2Via2l0VHJhbnNpdGlvbkVuZFxcXCIsIFxcXCJ0cmFuc2l0aW9uZW5kXFxcIiwgXFxcIm9UcmFuc2l0aW9uRW5kXFxcIiwgXFxcIk1TVHJhbnNpdGlvbkVuZFxcXCIsIFxcXCJtc1RyYW5zaXRpb25FbmRcXFwiXSwgcyA9IDA7IHMgPCBhLmxlbmd0aDsgcysrKSB7XFxuICAgICAgICAgICAgICAgICAgICBULndyYXBwZXIudHJpZ2dlcihhW3NdKTtcXG4gICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgfSB9LCBjdWJlOiB7IHNldFRyYW5zbGF0ZTogZnVuY3Rpb24gc2V0VHJhbnNsYXRlKCkge1xcbiAgICAgICAgICAgIHZhciBhLFxcbiAgICAgICAgICAgICAgICB0ID0gMDtULnBhcmFtcy5jdWJlLnNoYWRvdyAmJiAoVC5pc0hvcml6b250YWwoKSA/IChhID0gVC53cmFwcGVyLmZpbmQoXFxcIi5zd2lwZXItY3ViZS1zaGFkb3dcXFwiKSwgMCA9PT0gYS5sZW5ndGggJiYgKGEgPSBlKCc8ZGl2IGNsYXNzPVxcXCJzd2lwZXItY3ViZS1zaGFkb3dcXFwiPjwvZGl2PicpLCBULndyYXBwZXIuYXBwZW5kKGEpKSwgYS5jc3MoeyBoZWlnaHQ6IFQud2lkdGggKyBcXFwicHhcXFwiIH0pKSA6IChhID0gVC5jb250YWluZXIuZmluZChcXFwiLnN3aXBlci1jdWJlLXNoYWRvd1xcXCIpLCAwID09PSBhLmxlbmd0aCAmJiAoYSA9IGUoJzxkaXYgY2xhc3M9XFxcInN3aXBlci1jdWJlLXNoYWRvd1xcXCI+PC9kaXY+JyksIFQuY29udGFpbmVyLmFwcGVuZChhKSkpKTtmb3IgKHZhciBzID0gMDsgcyA8IFQuc2xpZGVzLmxlbmd0aDsgcysrKSB7XFxuICAgICAgICAgICAgICB2YXIgaSA9IFQuc2xpZGVzLmVxKHMpLFxcbiAgICAgICAgICAgICAgICAgIHIgPSA5MCAqIHMsXFxuICAgICAgICAgICAgICAgICAgbiA9IE1hdGguZmxvb3IociAvIDM2MCk7VC5ydGwgJiYgKHIgPSAtciwgbiA9IE1hdGguZmxvb3IoLXIgLyAzNjApKTt2YXIgbyA9IE1hdGgubWF4KE1hdGgubWluKGlbMF0ucHJvZ3Jlc3MsIDEpLCAtMSksXFxuICAgICAgICAgICAgICAgICAgbCA9IDAsXFxuICAgICAgICAgICAgICAgICAgcCA9IDAsXFxuICAgICAgICAgICAgICAgICAgZCA9IDA7cyAlIDQgPT0gMCA/IChsID0gNCAqIC1uICogVC5zaXplLCBkID0gMCkgOiAocyAtIDEpICUgNCA9PSAwID8gKGwgPSAwLCBkID0gNCAqIC1uICogVC5zaXplKSA6IChzIC0gMikgJSA0ID09IDAgPyAobCA9IFQuc2l6ZSArIDQgKiBuICogVC5zaXplLCBkID0gVC5zaXplKSA6IChzIC0gMykgJSA0ID09IDAgJiYgKGwgPSAtVC5zaXplLCBkID0gMyAqIFQuc2l6ZSArIDQgKiBULnNpemUgKiBuKSwgVC5ydGwgJiYgKGwgPSAtbCksIFQuaXNIb3Jpem9udGFsKCkgfHwgKHAgPSBsLCBsID0gMCk7dmFyIHUgPSBcXFwicm90YXRlWChcXFwiICsgKFQuaXNIb3Jpem9udGFsKCkgPyAwIDogLXIpICsgXFxcImRlZykgcm90YXRlWShcXFwiICsgKFQuaXNIb3Jpem9udGFsKCkgPyByIDogMCkgKyBcXFwiZGVnKSB0cmFuc2xhdGUzZChcXFwiICsgbCArIFxcXCJweCwgXFxcIiArIHAgKyBcXFwicHgsIFxcXCIgKyBkICsgXFxcInB4KVxcXCI7aWYgKG8gPD0gMSAmJiBvID4gLTEgJiYgKHQgPSA5MCAqIHMgKyA5MCAqIG8sIFQucnRsICYmICh0ID0gOTAgKiAtcyAtIDkwICogbykpLCBpLnRyYW5zZm9ybSh1KSwgVC5wYXJhbXMuY3ViZS5zbGlkZVNoYWRvd3MpIHtcXG4gICAgICAgICAgICAgICAgdmFyIGMgPSBULmlzSG9yaXpvbnRhbCgpID8gaS5maW5kKFxcXCIuc3dpcGVyLXNsaWRlLXNoYWRvdy1sZWZ0XFxcIikgOiBpLmZpbmQoXFxcIi5zd2lwZXItc2xpZGUtc2hhZG93LXRvcFxcXCIpLFxcbiAgICAgICAgICAgICAgICAgICAgbSA9IFQuaXNIb3Jpem9udGFsKCkgPyBpLmZpbmQoXFxcIi5zd2lwZXItc2xpZGUtc2hhZG93LXJpZ2h0XFxcIikgOiBpLmZpbmQoXFxcIi5zd2lwZXItc2xpZGUtc2hhZG93LWJvdHRvbVxcXCIpOzAgPT09IGMubGVuZ3RoICYmIChjID0gZSgnPGRpdiBjbGFzcz1cXFwic3dpcGVyLXNsaWRlLXNoYWRvdy0nICsgKFQuaXNIb3Jpem9udGFsKCkgPyBcXFwibGVmdFxcXCIgOiBcXFwidG9wXFxcIikgKyAnXFxcIj48L2Rpdj4nKSwgaS5hcHBlbmQoYykpLCAwID09PSBtLmxlbmd0aCAmJiAobSA9IGUoJzxkaXYgY2xhc3M9XFxcInN3aXBlci1zbGlkZS1zaGFkb3ctJyArIChULmlzSG9yaXpvbnRhbCgpID8gXFxcInJpZ2h0XFxcIiA6IFxcXCJib3R0b21cXFwiKSArICdcXFwiPjwvZGl2PicpLCBpLmFwcGVuZChtKSksIGMubGVuZ3RoICYmIChjWzBdLnN0eWxlLm9wYWNpdHkgPSBNYXRoLm1heCgtbywgMCkpLCBtLmxlbmd0aCAmJiAobVswXS5zdHlsZS5vcGFjaXR5ID0gTWF0aC5tYXgobywgMCkpO1xcbiAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH1pZiAoVC53cmFwcGVyLmNzcyh7IFxcXCItd2Via2l0LXRyYW5zZm9ybS1vcmlnaW5cXFwiOiBcXFwiNTAlIDUwJSAtXFxcIiArIFQuc2l6ZSAvIDIgKyBcXFwicHhcXFwiLCBcXFwiLW1vei10cmFuc2Zvcm0tb3JpZ2luXFxcIjogXFxcIjUwJSA1MCUgLVxcXCIgKyBULnNpemUgLyAyICsgXFxcInB4XFxcIiwgXFxcIi1tcy10cmFuc2Zvcm0tb3JpZ2luXFxcIjogXFxcIjUwJSA1MCUgLVxcXCIgKyBULnNpemUgLyAyICsgXFxcInB4XFxcIiwgXFxcInRyYW5zZm9ybS1vcmlnaW5cXFwiOiBcXFwiNTAlIDUwJSAtXFxcIiArIFQuc2l6ZSAvIDIgKyBcXFwicHhcXFwiIH0pLCBULnBhcmFtcy5jdWJlLnNoYWRvdykgaWYgKFQuaXNIb3Jpem9udGFsKCkpIGEudHJhbnNmb3JtKFxcXCJ0cmFuc2xhdGUzZCgwcHgsIFxcXCIgKyAoVC53aWR0aCAvIDIgKyBULnBhcmFtcy5jdWJlLnNoYWRvd09mZnNldCkgKyBcXFwicHgsIFxcXCIgKyAtVC53aWR0aCAvIDIgKyBcXFwicHgpIHJvdGF0ZVgoOTBkZWcpIHJvdGF0ZVooMGRlZykgc2NhbGUoXFxcIiArIFQucGFyYW1zLmN1YmUuc2hhZG93U2NhbGUgKyBcXFwiKVxcXCIpO2Vsc2Uge1xcbiAgICAgICAgICAgICAgdmFyIGggPSBNYXRoLmFicyh0KSAtIDkwICogTWF0aC5mbG9vcihNYXRoLmFicyh0KSAvIDkwKSxcXG4gICAgICAgICAgICAgICAgICBnID0gMS41IC0gKE1hdGguc2luKDIgKiBoICogTWF0aC5QSSAvIDM2MCkgLyAyICsgTWF0aC5jb3MoMiAqIGggKiBNYXRoLlBJIC8gMzYwKSAvIDIpLFxcbiAgICAgICAgICAgICAgICAgIGYgPSBULnBhcmFtcy5jdWJlLnNoYWRvd1NjYWxlLFxcbiAgICAgICAgICAgICAgICAgIHYgPSBULnBhcmFtcy5jdWJlLnNoYWRvd1NjYWxlIC8gZyxcXG4gICAgICAgICAgICAgICAgICB3ID0gVC5wYXJhbXMuY3ViZS5zaGFkb3dPZmZzZXQ7YS50cmFuc2Zvcm0oXFxcInNjYWxlM2QoXFxcIiArIGYgKyBcXFwiLCAxLCBcXFwiICsgdiArIFxcXCIpIHRyYW5zbGF0ZTNkKDBweCwgXFxcIiArIChULmhlaWdodCAvIDIgKyB3KSArIFxcXCJweCwgXFxcIiArIC1ULmhlaWdodCAvIDIgLyB2ICsgXFxcInB4KSByb3RhdGVYKC05MGRlZylcXFwiKTtcXG4gICAgICAgICAgICB9dmFyIHkgPSBULmlzU2FmYXJpIHx8IFQuaXNVaVdlYlZpZXcgPyAtVC5zaXplIC8gMiA6IDA7VC53cmFwcGVyLnRyYW5zZm9ybShcXFwidHJhbnNsYXRlM2QoMHB4LDAsXFxcIiArIHkgKyBcXFwicHgpIHJvdGF0ZVgoXFxcIiArIChULmlzSG9yaXpvbnRhbCgpID8gMCA6IHQpICsgXFxcImRlZykgcm90YXRlWShcXFwiICsgKFQuaXNIb3Jpem9udGFsKCkgPyAtdCA6IDApICsgXFxcImRlZylcXFwiKTtcXG4gICAgICAgICAgfSwgc2V0VHJhbnNpdGlvbjogZnVuY3Rpb24gc2V0VHJhbnNpdGlvbihlKSB7XFxuICAgICAgICAgICAgVC5zbGlkZXMudHJhbnNpdGlvbihlKS5maW5kKFxcXCIuc3dpcGVyLXNsaWRlLXNoYWRvdy10b3AsIC5zd2lwZXItc2xpZGUtc2hhZG93LXJpZ2h0LCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1ib3R0b20sIC5zd2lwZXItc2xpZGUtc2hhZG93LWxlZnRcXFwiKS50cmFuc2l0aW9uKGUpLCBULnBhcmFtcy5jdWJlLnNoYWRvdyAmJiAhVC5pc0hvcml6b250YWwoKSAmJiBULmNvbnRhaW5lci5maW5kKFxcXCIuc3dpcGVyLWN1YmUtc2hhZG93XFxcIikudHJhbnNpdGlvbihlKTtcXG4gICAgICAgICAgfSB9LCBjb3ZlcmZsb3c6IHsgc2V0VHJhbnNsYXRlOiBmdW5jdGlvbiBzZXRUcmFuc2xhdGUoKSB7XFxuICAgICAgICAgICAgZm9yICh2YXIgYSA9IFQudHJhbnNsYXRlLCB0ID0gVC5pc0hvcml6b250YWwoKSA/IC1hICsgVC53aWR0aCAvIDIgOiAtYSArIFQuaGVpZ2h0IC8gMiwgcyA9IFQuaXNIb3Jpem9udGFsKCkgPyBULnBhcmFtcy5jb3ZlcmZsb3cucm90YXRlIDogLVQucGFyYW1zLmNvdmVyZmxvdy5yb3RhdGUsIGkgPSBULnBhcmFtcy5jb3ZlcmZsb3cuZGVwdGgsIHIgPSAwLCBuID0gVC5zbGlkZXMubGVuZ3RoOyByIDwgbjsgcisrKSB7XFxuICAgICAgICAgICAgICB2YXIgbyA9IFQuc2xpZGVzLmVxKHIpLFxcbiAgICAgICAgICAgICAgICAgIGwgPSBULnNsaWRlc1NpemVzR3JpZFtyXSxcXG4gICAgICAgICAgICAgICAgICBwID0gb1swXS5zd2lwZXJTbGlkZU9mZnNldCxcXG4gICAgICAgICAgICAgICAgICBkID0gKHQgLSBwIC0gbCAvIDIpIC8gbCAqIFQucGFyYW1zLmNvdmVyZmxvdy5tb2RpZmllcixcXG4gICAgICAgICAgICAgICAgICB1ID0gVC5pc0hvcml6b250YWwoKSA/IHMgKiBkIDogMCxcXG4gICAgICAgICAgICAgICAgICBjID0gVC5pc0hvcml6b250YWwoKSA/IDAgOiBzICogZCxcXG4gICAgICAgICAgICAgICAgICBtID0gLWkgKiBNYXRoLmFicyhkKSxcXG4gICAgICAgICAgICAgICAgICBoID0gVC5pc0hvcml6b250YWwoKSA/IDAgOiBULnBhcmFtcy5jb3ZlcmZsb3cuc3RyZXRjaCAqIGQsXFxuICAgICAgICAgICAgICAgICAgZyA9IFQuaXNIb3Jpem9udGFsKCkgPyBULnBhcmFtcy5jb3ZlcmZsb3cuc3RyZXRjaCAqIGQgOiAwO01hdGguYWJzKGcpIDwgLjAwMSAmJiAoZyA9IDApLCBNYXRoLmFicyhoKSA8IC4wMDEgJiYgKGggPSAwKSwgTWF0aC5hYnMobSkgPCAuMDAxICYmIChtID0gMCksIE1hdGguYWJzKHUpIDwgLjAwMSAmJiAodSA9IDApLCBNYXRoLmFicyhjKSA8IC4wMDEgJiYgKGMgPSAwKTt2YXIgZiA9IFxcXCJ0cmFuc2xhdGUzZChcXFwiICsgZyArIFxcXCJweCxcXFwiICsgaCArIFxcXCJweCxcXFwiICsgbSArIFxcXCJweCkgIHJvdGF0ZVgoXFxcIiArIGMgKyBcXFwiZGVnKSByb3RhdGVZKFxcXCIgKyB1ICsgXFxcImRlZylcXFwiO2lmIChvLnRyYW5zZm9ybShmKSwgb1swXS5zdHlsZS56SW5kZXggPSAxIC0gTWF0aC5hYnMoTWF0aC5yb3VuZChkKSksIFQucGFyYW1zLmNvdmVyZmxvdy5zbGlkZVNoYWRvd3MpIHtcXG4gICAgICAgICAgICAgICAgdmFyIHYgPSBULmlzSG9yaXpvbnRhbCgpID8gby5maW5kKFxcXCIuc3dpcGVyLXNsaWRlLXNoYWRvdy1sZWZ0XFxcIikgOiBvLmZpbmQoXFxcIi5zd2lwZXItc2xpZGUtc2hhZG93LXRvcFxcXCIpLFxcbiAgICAgICAgICAgICAgICAgICAgdyA9IFQuaXNIb3Jpem9udGFsKCkgPyBvLmZpbmQoXFxcIi5zd2lwZXItc2xpZGUtc2hhZG93LXJpZ2h0XFxcIikgOiBvLmZpbmQoXFxcIi5zd2lwZXItc2xpZGUtc2hhZG93LWJvdHRvbVxcXCIpOzAgPT09IHYubGVuZ3RoICYmICh2ID0gZSgnPGRpdiBjbGFzcz1cXFwic3dpcGVyLXNsaWRlLXNoYWRvdy0nICsgKFQuaXNIb3Jpem9udGFsKCkgPyBcXFwibGVmdFxcXCIgOiBcXFwidG9wXFxcIikgKyAnXFxcIj48L2Rpdj4nKSwgby5hcHBlbmQodikpLCAwID09PSB3Lmxlbmd0aCAmJiAodyA9IGUoJzxkaXYgY2xhc3M9XFxcInN3aXBlci1zbGlkZS1zaGFkb3ctJyArIChULmlzSG9yaXpvbnRhbCgpID8gXFxcInJpZ2h0XFxcIiA6IFxcXCJib3R0b21cXFwiKSArICdcXFwiPjwvZGl2PicpLCBvLmFwcGVuZCh3KSksIHYubGVuZ3RoICYmICh2WzBdLnN0eWxlLm9wYWNpdHkgPSBkID4gMCA/IGQgOiAwKSwgdy5sZW5ndGggJiYgKHdbMF0uc3R5bGUub3BhY2l0eSA9IC1kID4gMCA/IC1kIDogMCk7XFxuICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfWlmIChULmJyb3dzZXIuaWUpIHtcXG4gICAgICAgICAgICAgIFQud3JhcHBlclswXS5zdHlsZS5wZXJzcGVjdGl2ZU9yaWdpbiA9IHQgKyBcXFwicHggNTAlXFxcIjtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgIH0sIHNldFRyYW5zaXRpb246IGZ1bmN0aW9uIHNldFRyYW5zaXRpb24oZSkge1xcbiAgICAgICAgICAgIFQuc2xpZGVzLnRyYW5zaXRpb24oZSkuZmluZChcXFwiLnN3aXBlci1zbGlkZS1zaGFkb3ctdG9wLCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1yaWdodCwgLnN3aXBlci1zbGlkZS1zaGFkb3ctYm90dG9tLCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1sZWZ0XFxcIikudHJhbnNpdGlvbihlKTtcXG4gICAgICAgICAgfSB9IH0sIFQubGF6eSA9IHsgaW5pdGlhbEltYWdlTG9hZGVkOiAhMSwgbG9hZEltYWdlSW5TbGlkZTogZnVuY3Rpb24gbG9hZEltYWdlSW5TbGlkZShhLCB0KSB7XFxuICAgICAgICAgIGlmICh2b2lkIDAgIT09IGEgJiYgKHZvaWQgMCA9PT0gdCAmJiAodCA9ICEwKSwgMCAhPT0gVC5zbGlkZXMubGVuZ3RoKSkge1xcbiAgICAgICAgICAgIHZhciBzID0gVC5zbGlkZXMuZXEoYSksXFxuICAgICAgICAgICAgICAgIGkgPSBzLmZpbmQoXFxcIi5cXFwiICsgVC5wYXJhbXMubGF6eUxvYWRpbmdDbGFzcyArIFxcXCI6bm90KC5cXFwiICsgVC5wYXJhbXMubGF6eVN0YXR1c0xvYWRlZENsYXNzICsgXFxcIik6bm90KC5cXFwiICsgVC5wYXJhbXMubGF6eVN0YXR1c0xvYWRpbmdDbGFzcyArIFxcXCIpXFxcIik7IXMuaGFzQ2xhc3MoVC5wYXJhbXMubGF6eUxvYWRpbmdDbGFzcykgfHwgcy5oYXNDbGFzcyhULnBhcmFtcy5sYXp5U3RhdHVzTG9hZGVkQ2xhc3MpIHx8IHMuaGFzQ2xhc3MoVC5wYXJhbXMubGF6eVN0YXR1c0xvYWRpbmdDbGFzcykgfHwgKGkgPSBpLmFkZChzWzBdKSksIDAgIT09IGkubGVuZ3RoICYmIGkuZWFjaChmdW5jdGlvbiAoKSB7XFxuICAgICAgICAgICAgICB2YXIgYSA9IGUodGhpcyk7YS5hZGRDbGFzcyhULnBhcmFtcy5sYXp5U3RhdHVzTG9hZGluZ0NsYXNzKTt2YXIgaSA9IGEuYXR0cihcXFwiZGF0YS1iYWNrZ3JvdW5kXFxcIiksXFxuICAgICAgICAgICAgICAgICAgciA9IGEuYXR0cihcXFwiZGF0YS1zcmNcXFwiKSxcXG4gICAgICAgICAgICAgICAgICBuID0gYS5hdHRyKFxcXCJkYXRhLXNyY3NldFxcXCIpLFxcbiAgICAgICAgICAgICAgICAgIG8gPSBhLmF0dHIoXFxcImRhdGEtc2l6ZXNcXFwiKTtULmxvYWRJbWFnZShhWzBdLCByIHx8IGksIG4sIG8sICExLCBmdW5jdGlvbiAoKSB7XFxuICAgICAgICAgICAgICAgIGlmICh2b2lkIDAgIT09IFQgJiYgbnVsbCAhPT0gVCAmJiBUKSB7XFxuICAgICAgICAgICAgICAgICAgaWYgKGkgPyAoYS5jc3MoXFxcImJhY2tncm91bmQtaW1hZ2VcXFwiLCAndXJsKFxcXCInICsgaSArICdcXFwiKScpLCBhLnJlbW92ZUF0dHIoXFxcImRhdGEtYmFja2dyb3VuZFxcXCIpKSA6IChuICYmIChhLmF0dHIoXFxcInNyY3NldFxcXCIsIG4pLCBhLnJlbW92ZUF0dHIoXFxcImRhdGEtc3Jjc2V0XFxcIikpLCBvICYmIChhLmF0dHIoXFxcInNpemVzXFxcIiwgbyksIGEucmVtb3ZlQXR0cihcXFwiZGF0YS1zaXplc1xcXCIpKSwgciAmJiAoYS5hdHRyKFxcXCJzcmNcXFwiLCByKSwgYS5yZW1vdmVBdHRyKFxcXCJkYXRhLXNyY1xcXCIpKSksIGEuYWRkQ2xhc3MoVC5wYXJhbXMubGF6eVN0YXR1c0xvYWRlZENsYXNzKS5yZW1vdmVDbGFzcyhULnBhcmFtcy5sYXp5U3RhdHVzTG9hZGluZ0NsYXNzKSwgcy5maW5kKFxcXCIuXFxcIiArIFQucGFyYW1zLmxhenlQcmVsb2FkZXJDbGFzcyArIFxcXCIsIC5cXFwiICsgVC5wYXJhbXMucHJlbG9hZGVyQ2xhc3MpLnJlbW92ZSgpLCBULnBhcmFtcy5sb29wICYmIHQpIHtcXG4gICAgICAgICAgICAgICAgICAgIHZhciBlID0gcy5hdHRyKFxcXCJkYXRhLXN3aXBlci1zbGlkZS1pbmRleFxcXCIpO2lmIChzLmhhc0NsYXNzKFQucGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpKSB7XFxuICAgICAgICAgICAgICAgICAgICAgIHZhciBsID0gVC53cmFwcGVyLmNoaWxkcmVuKCdbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XFxcIicgKyBlICsgJ1xcXCJdOm5vdCguJyArIFQucGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MgKyBcXFwiKVxcXCIpO1QubGF6eS5sb2FkSW1hZ2VJblNsaWRlKGwuaW5kZXgoKSwgITEpO1xcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgICAgICAgdmFyIHAgPSBULndyYXBwZXIuY2hpbGRyZW4oXFxcIi5cXFwiICsgVC5wYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcyArICdbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XFxcIicgKyBlICsgJ1xcXCJdJyk7VC5sYXp5LmxvYWRJbWFnZUluU2xpZGUocC5pbmRleCgpLCAhMSk7XFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgfVQuZW1pdChcXFwib25MYXp5SW1hZ2VSZWFkeVxcXCIsIFQsIHNbMF0sIGFbMF0pO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICB9KSwgVC5lbWl0KFxcXCJvbkxhenlJbWFnZUxvYWRcXFwiLCBULCBzWzBdLCBhWzBdKTtcXG4gICAgICAgICAgICB9KTtcXG4gICAgICAgICAgfVxcbiAgICAgICAgfSwgbG9hZDogZnVuY3Rpb24gbG9hZCgpIHtcXG4gICAgICAgICAgdmFyIGEsXFxuICAgICAgICAgICAgICB0ID0gVC5wYXJhbXMuc2xpZGVzUGVyVmlldztpZiAoXFxcImF1dG9cXFwiID09PSB0ICYmICh0ID0gMCksIFQubGF6eS5pbml0aWFsSW1hZ2VMb2FkZWQgfHwgKFQubGF6eS5pbml0aWFsSW1hZ2VMb2FkZWQgPSAhMCksIFQucGFyYW1zLndhdGNoU2xpZGVzVmlzaWJpbGl0eSkgVC53cmFwcGVyLmNoaWxkcmVuKFxcXCIuXFxcIiArIFQucGFyYW1zLnNsaWRlVmlzaWJsZUNsYXNzKS5lYWNoKGZ1bmN0aW9uICgpIHtcXG4gICAgICAgICAgICBULmxhenkubG9hZEltYWdlSW5TbGlkZShlKHRoaXMpLmluZGV4KCkpO1xcbiAgICAgICAgICB9KTtlbHNlIGlmICh0ID4gMSkgZm9yIChhID0gVC5hY3RpdmVJbmRleDsgYSA8IFQuYWN0aXZlSW5kZXggKyB0OyBhKyspIHtcXG4gICAgICAgICAgICBULnNsaWRlc1thXSAmJiBULmxhenkubG9hZEltYWdlSW5TbGlkZShhKTtcXG4gICAgICAgICAgfSBlbHNlIFQubGF6eS5sb2FkSW1hZ2VJblNsaWRlKFQuYWN0aXZlSW5kZXgpO2lmIChULnBhcmFtcy5sYXp5TG9hZGluZ0luUHJldk5leHQpIGlmICh0ID4gMSB8fCBULnBhcmFtcy5sYXp5TG9hZGluZ0luUHJldk5leHRBbW91bnQgJiYgVC5wYXJhbXMubGF6eUxvYWRpbmdJblByZXZOZXh0QW1vdW50ID4gMSkge1xcbiAgICAgICAgICAgIHZhciBzID0gVC5wYXJhbXMubGF6eUxvYWRpbmdJblByZXZOZXh0QW1vdW50LFxcbiAgICAgICAgICAgICAgICBpID0gdCxcXG4gICAgICAgICAgICAgICAgciA9IE1hdGgubWluKFQuYWN0aXZlSW5kZXggKyBpICsgTWF0aC5tYXgocywgaSksIFQuc2xpZGVzLmxlbmd0aCksXFxuICAgICAgICAgICAgICAgIG4gPSBNYXRoLm1heChULmFjdGl2ZUluZGV4IC0gTWF0aC5tYXgoaSwgcyksIDApO2ZvciAoYSA9IFQuYWN0aXZlSW5kZXggKyB0OyBhIDwgcjsgYSsrKSB7XFxuICAgICAgICAgICAgICBULnNsaWRlc1thXSAmJiBULmxhenkubG9hZEltYWdlSW5TbGlkZShhKTtcXG4gICAgICAgICAgICB9Zm9yIChhID0gbjsgYSA8IFQuYWN0aXZlSW5kZXg7IGErKykge1xcbiAgICAgICAgICAgICAgVC5zbGlkZXNbYV0gJiYgVC5sYXp5LmxvYWRJbWFnZUluU2xpZGUoYSk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgIHZhciBvID0gVC53cmFwcGVyLmNoaWxkcmVuKFxcXCIuXFxcIiArIFQucGFyYW1zLnNsaWRlTmV4dENsYXNzKTtvLmxlbmd0aCA+IDAgJiYgVC5sYXp5LmxvYWRJbWFnZUluU2xpZGUoby5pbmRleCgpKTt2YXIgbCA9IFQud3JhcHBlci5jaGlsZHJlbihcXFwiLlxcXCIgKyBULnBhcmFtcy5zbGlkZVByZXZDbGFzcyk7bC5sZW5ndGggPiAwICYmIFQubGF6eS5sb2FkSW1hZ2VJblNsaWRlKGwuaW5kZXgoKSk7XFxuICAgICAgICAgIH1cXG4gICAgICAgIH0sIG9uVHJhbnNpdGlvblN0YXJ0OiBmdW5jdGlvbiBvblRyYW5zaXRpb25TdGFydCgpIHtcXG4gICAgICAgICAgVC5wYXJhbXMubGF6eUxvYWRpbmcgJiYgKFQucGFyYW1zLmxhenlMb2FkaW5nT25UcmFuc2l0aW9uU3RhcnQgfHwgIVQucGFyYW1zLmxhenlMb2FkaW5nT25UcmFuc2l0aW9uU3RhcnQgJiYgIVQubGF6eS5pbml0aWFsSW1hZ2VMb2FkZWQpICYmIFQubGF6eS5sb2FkKCk7XFxuICAgICAgICB9LCBvblRyYW5zaXRpb25FbmQ6IGZ1bmN0aW9uIG9uVHJhbnNpdGlvbkVuZCgpIHtcXG4gICAgICAgICAgVC5wYXJhbXMubGF6eUxvYWRpbmcgJiYgIVQucGFyYW1zLmxhenlMb2FkaW5nT25UcmFuc2l0aW9uU3RhcnQgJiYgVC5sYXp5LmxvYWQoKTtcXG4gICAgICAgIH0gfSwgVC5zY3JvbGxiYXIgPSB7IGlzVG91Y2hlZDogITEsIHNldERyYWdQb3NpdGlvbjogZnVuY3Rpb24gc2V0RHJhZ1Bvc2l0aW9uKGUpIHtcXG4gICAgICAgICAgdmFyIGEgPSBULnNjcm9sbGJhcixcXG4gICAgICAgICAgICAgIHQgPSBULmlzSG9yaXpvbnRhbCgpID8gXFxcInRvdWNoc3RhcnRcXFwiID09PSBlLnR5cGUgfHwgXFxcInRvdWNobW92ZVxcXCIgPT09IGUudHlwZSA/IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWCA6IGUucGFnZVggfHwgZS5jbGllbnRYIDogXFxcInRvdWNoc3RhcnRcXFwiID09PSBlLnR5cGUgfHwgXFxcInRvdWNobW92ZVxcXCIgPT09IGUudHlwZSA/IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWSA6IGUucGFnZVkgfHwgZS5jbGllbnRZLFxcbiAgICAgICAgICAgICAgcyA9IHQgLSBhLnRyYWNrLm9mZnNldCgpW1QuaXNIb3Jpem9udGFsKCkgPyBcXFwibGVmdFxcXCIgOiBcXFwidG9wXFxcIl0gLSBhLmRyYWdTaXplIC8gMixcXG4gICAgICAgICAgICAgIGkgPSAtVC5taW5UcmFuc2xhdGUoKSAqIGEubW92ZURpdmlkZXIsXFxuICAgICAgICAgICAgICByID0gLVQubWF4VHJhbnNsYXRlKCkgKiBhLm1vdmVEaXZpZGVyO3MgPCBpID8gcyA9IGkgOiBzID4gciAmJiAocyA9IHIpLCBzID0gLXMgLyBhLm1vdmVEaXZpZGVyLCBULnVwZGF0ZVByb2dyZXNzKHMpLCBULnNldFdyYXBwZXJUcmFuc2xhdGUocywgITApO1xcbiAgICAgICAgfSwgZHJhZ1N0YXJ0OiBmdW5jdGlvbiBkcmFnU3RhcnQoZSkge1xcbiAgICAgICAgICB2YXIgYSA9IFQuc2Nyb2xsYmFyO2EuaXNUb3VjaGVkID0gITAsIGUucHJldmVudERlZmF1bHQoKSwgZS5zdG9wUHJvcGFnYXRpb24oKSwgYS5zZXREcmFnUG9zaXRpb24oZSksIGNsZWFyVGltZW91dChhLmRyYWdUaW1lb3V0KSwgYS50cmFjay50cmFuc2l0aW9uKDApLCBULnBhcmFtcy5zY3JvbGxiYXJIaWRlICYmIGEudHJhY2suY3NzKFxcXCJvcGFjaXR5XFxcIiwgMSksIFQud3JhcHBlci50cmFuc2l0aW9uKDEwMCksIGEuZHJhZy50cmFuc2l0aW9uKDEwMCksIFQuZW1pdChcXFwib25TY3JvbGxiYXJEcmFnU3RhcnRcXFwiLCBUKTtcXG4gICAgICAgIH0sIGRyYWdNb3ZlOiBmdW5jdGlvbiBkcmFnTW92ZShlKSB7XFxuICAgICAgICAgIHZhciBhID0gVC5zY3JvbGxiYXI7YS5pc1RvdWNoZWQgJiYgKGUucHJldmVudERlZmF1bHQgPyBlLnByZXZlbnREZWZhdWx0KCkgOiBlLnJldHVyblZhbHVlID0gITEsIGEuc2V0RHJhZ1Bvc2l0aW9uKGUpLCBULndyYXBwZXIudHJhbnNpdGlvbigwKSwgYS50cmFjay50cmFuc2l0aW9uKDApLCBhLmRyYWcudHJhbnNpdGlvbigwKSwgVC5lbWl0KFxcXCJvblNjcm9sbGJhckRyYWdNb3ZlXFxcIiwgVCkpO1xcbiAgICAgICAgfSwgZHJhZ0VuZDogZnVuY3Rpb24gZHJhZ0VuZChlKSB7XFxuICAgICAgICAgIHZhciBhID0gVC5zY3JvbGxiYXI7YS5pc1RvdWNoZWQgJiYgKGEuaXNUb3VjaGVkID0gITEsIFQucGFyYW1zLnNjcm9sbGJhckhpZGUgJiYgKGNsZWFyVGltZW91dChhLmRyYWdUaW1lb3V0KSwgYS5kcmFnVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xcbiAgICAgICAgICAgIGEudHJhY2suY3NzKFxcXCJvcGFjaXR5XFxcIiwgMCksIGEudHJhY2sudHJhbnNpdGlvbig0MDApO1xcbiAgICAgICAgICB9LCAxZTMpKSwgVC5lbWl0KFxcXCJvblNjcm9sbGJhckRyYWdFbmRcXFwiLCBUKSwgVC5wYXJhbXMuc2Nyb2xsYmFyU25hcE9uUmVsZWFzZSAmJiBULnNsaWRlUmVzZXQoKSk7XFxuICAgICAgICB9LCBkcmFnZ2FibGVFdmVudHM6IGZ1bmN0aW9uICgpIHtcXG4gICAgICAgICAgcmV0dXJuIFQucGFyYW1zLnNpbXVsYXRlVG91Y2ggIT09ICExIHx8IFQuc3VwcG9ydC50b3VjaCA/IFQudG91Y2hFdmVudHMgOiBULnRvdWNoRXZlbnRzRGVza3RvcDtcXG4gICAgICAgIH0oKSwgZW5hYmxlRHJhZ2dhYmxlOiBmdW5jdGlvbiBlbmFibGVEcmFnZ2FibGUoKSB7XFxuICAgICAgICAgIHZhciBhID0gVC5zY3JvbGxiYXIsXFxuICAgICAgICAgICAgICB0ID0gVC5zdXBwb3J0LnRvdWNoID8gYS50cmFjayA6IGRvY3VtZW50O2UoYS50cmFjaykub24oYS5kcmFnZ2FibGVFdmVudHMuc3RhcnQsIGEuZHJhZ1N0YXJ0KSwgZSh0KS5vbihhLmRyYWdnYWJsZUV2ZW50cy5tb3ZlLCBhLmRyYWdNb3ZlKSwgZSh0KS5vbihhLmRyYWdnYWJsZUV2ZW50cy5lbmQsIGEuZHJhZ0VuZCk7XFxuICAgICAgICB9LCBkaXNhYmxlRHJhZ2dhYmxlOiBmdW5jdGlvbiBkaXNhYmxlRHJhZ2dhYmxlKCkge1xcbiAgICAgICAgICB2YXIgYSA9IFQuc2Nyb2xsYmFyLFxcbiAgICAgICAgICAgICAgdCA9IFQuc3VwcG9ydC50b3VjaCA/IGEudHJhY2sgOiBkb2N1bWVudDtlKGEudHJhY2spLm9mZihhLmRyYWdnYWJsZUV2ZW50cy5zdGFydCwgYS5kcmFnU3RhcnQpLCBlKHQpLm9mZihhLmRyYWdnYWJsZUV2ZW50cy5tb3ZlLCBhLmRyYWdNb3ZlKSwgZSh0KS5vZmYoYS5kcmFnZ2FibGVFdmVudHMuZW5kLCBhLmRyYWdFbmQpO1xcbiAgICAgICAgfSwgc2V0OiBmdW5jdGlvbiBzZXQoKSB7XFxuICAgICAgICAgIGlmIChULnBhcmFtcy5zY3JvbGxiYXIpIHtcXG4gICAgICAgICAgICB2YXIgYSA9IFQuc2Nyb2xsYmFyO2EudHJhY2sgPSBlKFQucGFyYW1zLnNjcm9sbGJhciksIFQucGFyYW1zLnVuaXF1ZU5hdkVsZW1lbnRzICYmIFxcXCJzdHJpbmdcXFwiID09IHR5cGVvZiBULnBhcmFtcy5zY3JvbGxiYXIgJiYgYS50cmFjay5sZW5ndGggPiAxICYmIDEgPT09IFQuY29udGFpbmVyLmZpbmQoVC5wYXJhbXMuc2Nyb2xsYmFyKS5sZW5ndGggJiYgKGEudHJhY2sgPSBULmNvbnRhaW5lci5maW5kKFQucGFyYW1zLnNjcm9sbGJhcikpLCBhLmRyYWcgPSBhLnRyYWNrLmZpbmQoXFxcIi5zd2lwZXItc2Nyb2xsYmFyLWRyYWdcXFwiKSwgMCA9PT0gYS5kcmFnLmxlbmd0aCAmJiAoYS5kcmFnID0gZSgnPGRpdiBjbGFzcz1cXFwic3dpcGVyLXNjcm9sbGJhci1kcmFnXFxcIj48L2Rpdj4nKSwgYS50cmFjay5hcHBlbmQoYS5kcmFnKSksIGEuZHJhZ1swXS5zdHlsZS53aWR0aCA9IFxcXCJcXFwiLCBhLmRyYWdbMF0uc3R5bGUuaGVpZ2h0ID0gXFxcIlxcXCIsIGEudHJhY2tTaXplID0gVC5pc0hvcml6b250YWwoKSA/IGEudHJhY2tbMF0ub2Zmc2V0V2lkdGggOiBhLnRyYWNrWzBdLm9mZnNldEhlaWdodCwgYS5kaXZpZGVyID0gVC5zaXplIC8gVC52aXJ0dWFsU2l6ZSwgYS5tb3ZlRGl2aWRlciA9IGEuZGl2aWRlciAqIChhLnRyYWNrU2l6ZSAvIFQuc2l6ZSksIGEuZHJhZ1NpemUgPSBhLnRyYWNrU2l6ZSAqIGEuZGl2aWRlciwgVC5pc0hvcml6b250YWwoKSA/IGEuZHJhZ1swXS5zdHlsZS53aWR0aCA9IGEuZHJhZ1NpemUgKyBcXFwicHhcXFwiIDogYS5kcmFnWzBdLnN0eWxlLmhlaWdodCA9IGEuZHJhZ1NpemUgKyBcXFwicHhcXFwiLCBhLmRpdmlkZXIgPj0gMSA/IGEudHJhY2tbMF0uc3R5bGUuZGlzcGxheSA9IFxcXCJub25lXFxcIiA6IGEudHJhY2tbMF0uc3R5bGUuZGlzcGxheSA9IFxcXCJcXFwiLCBULnBhcmFtcy5zY3JvbGxiYXJIaWRlICYmIChhLnRyYWNrWzBdLnN0eWxlLm9wYWNpdHkgPSAwKTtcXG4gICAgICAgICAgfVxcbiAgICAgICAgfSwgc2V0VHJhbnNsYXRlOiBmdW5jdGlvbiBzZXRUcmFuc2xhdGUoKSB7XFxuICAgICAgICAgIGlmIChULnBhcmFtcy5zY3JvbGxiYXIpIHtcXG4gICAgICAgICAgICB2YXIgZSxcXG4gICAgICAgICAgICAgICAgYSA9IFQuc2Nyb2xsYmFyLFxcbiAgICAgICAgICAgICAgICB0ID0gKFQudHJhbnNsYXRlLCBhLmRyYWdTaXplKTtlID0gKGEudHJhY2tTaXplIC0gYS5kcmFnU2l6ZSkgKiBULnByb2dyZXNzLCBULnJ0bCAmJiBULmlzSG9yaXpvbnRhbCgpID8gKGUgPSAtZSwgZSA+IDAgPyAodCA9IGEuZHJhZ1NpemUgLSBlLCBlID0gMCkgOiAtZSArIGEuZHJhZ1NpemUgPiBhLnRyYWNrU2l6ZSAmJiAodCA9IGEudHJhY2tTaXplICsgZSkpIDogZSA8IDAgPyAodCA9IGEuZHJhZ1NpemUgKyBlLCBlID0gMCkgOiBlICsgYS5kcmFnU2l6ZSA+IGEudHJhY2tTaXplICYmICh0ID0gYS50cmFja1NpemUgLSBlKSwgVC5pc0hvcml6b250YWwoKSA/IChULnN1cHBvcnQudHJhbnNmb3JtczNkID8gYS5kcmFnLnRyYW5zZm9ybShcXFwidHJhbnNsYXRlM2QoXFxcIiArIGUgKyBcXFwicHgsIDAsIDApXFxcIikgOiBhLmRyYWcudHJhbnNmb3JtKFxcXCJ0cmFuc2xhdGVYKFxcXCIgKyBlICsgXFxcInB4KVxcXCIpLCBhLmRyYWdbMF0uc3R5bGUud2lkdGggPSB0ICsgXFxcInB4XFxcIikgOiAoVC5zdXBwb3J0LnRyYW5zZm9ybXMzZCA/IGEuZHJhZy50cmFuc2Zvcm0oXFxcInRyYW5zbGF0ZTNkKDBweCwgXFxcIiArIGUgKyBcXFwicHgsIDApXFxcIikgOiBhLmRyYWcudHJhbnNmb3JtKFxcXCJ0cmFuc2xhdGVZKFxcXCIgKyBlICsgXFxcInB4KVxcXCIpLCBhLmRyYWdbMF0uc3R5bGUuaGVpZ2h0ID0gdCArIFxcXCJweFxcXCIpLCBULnBhcmFtcy5zY3JvbGxiYXJIaWRlICYmIChjbGVhclRpbWVvdXQoYS50aW1lb3V0KSwgYS50cmFja1swXS5zdHlsZS5vcGFjaXR5ID0gMSwgYS50aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XFxuICAgICAgICAgICAgICBhLnRyYWNrWzBdLnN0eWxlLm9wYWNpdHkgPSAwLCBhLnRyYWNrLnRyYW5zaXRpb24oNDAwKTtcXG4gICAgICAgICAgICB9LCAxZTMpKTtcXG4gICAgICAgICAgfVxcbiAgICAgICAgfSwgc2V0VHJhbnNpdGlvbjogZnVuY3Rpb24gc2V0VHJhbnNpdGlvbihlKSB7XFxuICAgICAgICAgIFQucGFyYW1zLnNjcm9sbGJhciAmJiBULnNjcm9sbGJhci5kcmFnLnRyYW5zaXRpb24oZSk7XFxuICAgICAgICB9IH0sIFQuY29udHJvbGxlciA9IHsgTGluZWFyU3BsaW5lOiBmdW5jdGlvbiBMaW5lYXJTcGxpbmUoZSwgYSkge1xcbiAgICAgICAgICB2YXIgdCA9IGZ1bmN0aW9uICgpIHtcXG4gICAgICAgICAgICB2YXIgZSwgYSwgdDtyZXR1cm4gZnVuY3Rpb24gKHMsIGkpIHtcXG4gICAgICAgICAgICAgIGZvciAoYSA9IC0xLCBlID0gcy5sZW5ndGg7IGUgLSBhID4gMTspIHtcXG4gICAgICAgICAgICAgICAgc1t0ID0gZSArIGEgPj4gMV0gPD0gaSA/IGEgPSB0IDogZSA9IHQ7XFxuICAgICAgICAgICAgICB9cmV0dXJuIGU7XFxuICAgICAgICAgICAgfTtcXG4gICAgICAgICAgfSgpO3RoaXMueCA9IGUsIHRoaXMueSA9IGEsIHRoaXMubGFzdEluZGV4ID0gZS5sZW5ndGggLSAxO3ZhciBzLCBpO3RoaXMueC5sZW5ndGg7dGhpcy5pbnRlcnBvbGF0ZSA9IGZ1bmN0aW9uIChlKSB7XFxuICAgICAgICAgICAgcmV0dXJuIGUgPyAoaSA9IHQodGhpcy54LCBlKSwgcyA9IGkgLSAxLCAoZSAtIHRoaXMueFtzXSkgKiAodGhpcy55W2ldIC0gdGhpcy55W3NdKSAvICh0aGlzLnhbaV0gLSB0aGlzLnhbc10pICsgdGhpcy55W3NdKSA6IDA7XFxuICAgICAgICAgIH07XFxuICAgICAgICB9LCBnZXRJbnRlcnBvbGF0ZUZ1bmN0aW9uOiBmdW5jdGlvbiBnZXRJbnRlcnBvbGF0ZUZ1bmN0aW9uKGUpIHtcXG4gICAgICAgICAgVC5jb250cm9sbGVyLnNwbGluZSB8fCAoVC5jb250cm9sbGVyLnNwbGluZSA9IFQucGFyYW1zLmxvb3AgPyBuZXcgVC5jb250cm9sbGVyLkxpbmVhclNwbGluZShULnNsaWRlc0dyaWQsIGUuc2xpZGVzR3JpZCkgOiBuZXcgVC5jb250cm9sbGVyLkxpbmVhclNwbGluZShULnNuYXBHcmlkLCBlLnNuYXBHcmlkKSk7XFxuICAgICAgICB9LCBzZXRUcmFuc2xhdGU6IGZ1bmN0aW9uIHNldFRyYW5zbGF0ZShlLCB0KSB7XFxuICAgICAgICAgIGZ1bmN0aW9uIHMoYSkge1xcbiAgICAgICAgICAgIGUgPSBhLnJ0bCAmJiBcXFwiaG9yaXpvbnRhbFxcXCIgPT09IGEucGFyYW1zLmRpcmVjdGlvbiA/IC1ULnRyYW5zbGF0ZSA6IFQudHJhbnNsYXRlLCBcXFwic2xpZGVcXFwiID09PSBULnBhcmFtcy5jb250cm9sQnkgJiYgKFQuY29udHJvbGxlci5nZXRJbnRlcnBvbGF0ZUZ1bmN0aW9uKGEpLCByID0gLVQuY29udHJvbGxlci5zcGxpbmUuaW50ZXJwb2xhdGUoLWUpKSwgciAmJiBcXFwiY29udGFpbmVyXFxcIiAhPT0gVC5wYXJhbXMuY29udHJvbEJ5IHx8IChpID0gKGEubWF4VHJhbnNsYXRlKCkgLSBhLm1pblRyYW5zbGF0ZSgpKSAvIChULm1heFRyYW5zbGF0ZSgpIC0gVC5taW5UcmFuc2xhdGUoKSksIHIgPSAoZSAtIFQubWluVHJhbnNsYXRlKCkpICogaSArIGEubWluVHJhbnNsYXRlKCkpLCBULnBhcmFtcy5jb250cm9sSW52ZXJzZSAmJiAociA9IGEubWF4VHJhbnNsYXRlKCkgLSByKSwgYS51cGRhdGVQcm9ncmVzcyhyKSwgYS5zZXRXcmFwcGVyVHJhbnNsYXRlKHIsICExLCBUKSwgYS51cGRhdGVBY3RpdmVJbmRleCgpO1xcbiAgICAgICAgICB9dmFyIGksXFxuICAgICAgICAgICAgICByLFxcbiAgICAgICAgICAgICAgbiA9IFQucGFyYW1zLmNvbnRyb2w7aWYgKEFycmF5LmlzQXJyYXkobikpIGZvciAodmFyIG8gPSAwOyBvIDwgbi5sZW5ndGg7IG8rKykge1xcbiAgICAgICAgICAgIG5bb10gIT09IHQgJiYgbltvXSBpbnN0YW5jZW9mIGEgJiYgcyhuW29dKTtcXG4gICAgICAgICAgfSBlbHNlIG4gaW5zdGFuY2VvZiBhICYmIHQgIT09IG4gJiYgcyhuKTtcXG4gICAgICAgIH0sIHNldFRyYW5zaXRpb246IGZ1bmN0aW9uIHNldFRyYW5zaXRpb24oZSwgdCkge1xcbiAgICAgICAgICBmdW5jdGlvbiBzKGEpIHtcXG4gICAgICAgICAgICBhLnNldFdyYXBwZXJUcmFuc2l0aW9uKGUsIFQpLCAwICE9PSBlICYmIChhLm9uVHJhbnNpdGlvblN0YXJ0KCksIGEud3JhcHBlci50cmFuc2l0aW9uRW5kKGZ1bmN0aW9uICgpIHtcXG4gICAgICAgICAgICAgIHIgJiYgKGEucGFyYW1zLmxvb3AgJiYgXFxcInNsaWRlXFxcIiA9PT0gVC5wYXJhbXMuY29udHJvbEJ5ICYmIGEuZml4TG9vcCgpLCBhLm9uVHJhbnNpdGlvbkVuZCgpKTtcXG4gICAgICAgICAgICB9KSk7XFxuICAgICAgICAgIH12YXIgaSxcXG4gICAgICAgICAgICAgIHIgPSBULnBhcmFtcy5jb250cm9sO2lmIChBcnJheS5pc0FycmF5KHIpKSBmb3IgKGkgPSAwOyBpIDwgci5sZW5ndGg7IGkrKykge1xcbiAgICAgICAgICAgIHJbaV0gIT09IHQgJiYgcltpXSBpbnN0YW5jZW9mIGEgJiYgcyhyW2ldKTtcXG4gICAgICAgICAgfSBlbHNlIHIgaW5zdGFuY2VvZiBhICYmIHQgIT09IHIgJiYgcyhyKTtcXG4gICAgICAgIH0gfSwgVC5oYXNobmF2ID0geyBvbkhhc2hDYW5nZTogZnVuY3Rpb24gb25IYXNoQ2FuZ2UoZSwgYSkge1xcbiAgICAgICAgICB2YXIgdCA9IGRvY3VtZW50LmxvY2F0aW9uLmhhc2gucmVwbGFjZShcXFwiI1xcXCIsIFxcXCJcXFwiKTt0ICE9PSBULnNsaWRlcy5lcShULmFjdGl2ZUluZGV4KS5hdHRyKFxcXCJkYXRhLWhhc2hcXFwiKSAmJiBULnNsaWRlVG8oVC53cmFwcGVyLmNoaWxkcmVuKFxcXCIuXFxcIiArIFQucGFyYW1zLnNsaWRlQ2xhc3MgKyAnW2RhdGEtaGFzaD1cXFwiJyArIHQgKyAnXFxcIl0nKS5pbmRleCgpKTtcXG4gICAgICAgIH0sIGF0dGFjaEV2ZW50czogZnVuY3Rpb24gYXR0YWNoRXZlbnRzKGEpIHtcXG4gICAgICAgICAgdmFyIHQgPSBhID8gXFxcIm9mZlxcXCIgOiBcXFwib25cXFwiO2Uod2luZG93KVt0XShcXFwiaGFzaGNoYW5nZVxcXCIsIFQuaGFzaG5hdi5vbkhhc2hDYW5nZSk7XFxuICAgICAgICB9LCBzZXRIYXNoOiBmdW5jdGlvbiBzZXRIYXNoKCkge1xcbiAgICAgICAgICBpZiAoVC5oYXNobmF2LmluaXRpYWxpemVkICYmIFQucGFyYW1zLmhhc2huYXYpIGlmIChULnBhcmFtcy5yZXBsYWNlU3RhdGUgJiYgd2luZG93Lmhpc3RvcnkgJiYgd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKSB3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUobnVsbCwgbnVsbCwgXFxcIiNcXFwiICsgVC5zbGlkZXMuZXEoVC5hY3RpdmVJbmRleCkuYXR0cihcXFwiZGF0YS1oYXNoXFxcIikgfHwgXFxcIlxcXCIpO2Vsc2Uge1xcbiAgICAgICAgICAgIHZhciBlID0gVC5zbGlkZXMuZXEoVC5hY3RpdmVJbmRleCksXFxuICAgICAgICAgICAgICAgIGEgPSBlLmF0dHIoXFxcImRhdGEtaGFzaFxcXCIpIHx8IGUuYXR0cihcXFwiZGF0YS1oaXN0b3J5XFxcIik7ZG9jdW1lbnQubG9jYXRpb24uaGFzaCA9IGEgfHwgXFxcIlxcXCI7XFxuICAgICAgICAgIH1cXG4gICAgICAgIH0sIGluaXQ6IGZ1bmN0aW9uIGluaXQoKSB7XFxuICAgICAgICAgIGlmIChULnBhcmFtcy5oYXNobmF2ICYmICFULnBhcmFtcy5oaXN0b3J5KSB7XFxuICAgICAgICAgICAgVC5oYXNobmF2LmluaXRpYWxpemVkID0gITA7dmFyIGUgPSBkb2N1bWVudC5sb2NhdGlvbi5oYXNoLnJlcGxhY2UoXFxcIiNcXFwiLCBcXFwiXFxcIik7aWYgKGUpIGZvciAodmFyIGEgPSAwLCB0ID0gVC5zbGlkZXMubGVuZ3RoOyBhIDwgdDsgYSsrKSB7XFxuICAgICAgICAgICAgICB2YXIgcyA9IFQuc2xpZGVzLmVxKGEpLFxcbiAgICAgICAgICAgICAgICAgIGkgPSBzLmF0dHIoXFxcImRhdGEtaGFzaFxcXCIpIHx8IHMuYXR0cihcXFwiZGF0YS1oaXN0b3J5XFxcIik7aWYgKGkgPT09IGUgJiYgIXMuaGFzQ2xhc3MoVC5wYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcykpIHtcXG4gICAgICAgICAgICAgICAgdmFyIHIgPSBzLmluZGV4KCk7VC5zbGlkZVRvKHIsIDAsIFQucGFyYW1zLnJ1bkNhbGxiYWNrc09uSW5pdCwgITApO1xcbiAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH1ULnBhcmFtcy5oYXNobmF2V2F0Y2hTdGF0ZSAmJiBULmhhc2huYXYuYXR0YWNoRXZlbnRzKCk7XFxuICAgICAgICAgIH1cXG4gICAgICAgIH0sIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XFxuICAgICAgICAgIFQucGFyYW1zLmhhc2huYXZXYXRjaFN0YXRlICYmIFQuaGFzaG5hdi5hdHRhY2hFdmVudHMoITApO1xcbiAgICAgICAgfSB9LCBULmhpc3RvcnkgPSB7IGluaXQ6IGZ1bmN0aW9uIGluaXQoKSB7XFxuICAgICAgICAgIGlmIChULnBhcmFtcy5oaXN0b3J5KSB7XFxuICAgICAgICAgICAgaWYgKCF3aW5kb3cuaGlzdG9yeSB8fCAhd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKSByZXR1cm4gVC5wYXJhbXMuaGlzdG9yeSA9ICExLCB2b2lkIChULnBhcmFtcy5oYXNobmF2ID0gITApO1QuaGlzdG9yeS5pbml0aWFsaXplZCA9ICEwLCB0aGlzLnBhdGhzID0gdGhpcy5nZXRQYXRoVmFsdWVzKCksICh0aGlzLnBhdGhzLmtleSB8fCB0aGlzLnBhdGhzLnZhbHVlKSAmJiAodGhpcy5zY3JvbGxUb1NsaWRlKDAsIHRoaXMucGF0aHMudmFsdWUsIFQucGFyYW1zLnJ1bkNhbGxiYWNrc09uSW5pdCksIFQucGFyYW1zLnJlcGxhY2VTdGF0ZSB8fCB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcXFwicG9wc3RhdGVcXFwiLCB0aGlzLnNldEhpc3RvcnlQb3BTdGF0ZSkpO1xcbiAgICAgICAgICB9XFxuICAgICAgICB9LCBzZXRIaXN0b3J5UG9wU3RhdGU6IGZ1bmN0aW9uIHNldEhpc3RvcnlQb3BTdGF0ZSgpIHtcXG4gICAgICAgICAgVC5oaXN0b3J5LnBhdGhzID0gVC5oaXN0b3J5LmdldFBhdGhWYWx1ZXMoKSwgVC5oaXN0b3J5LnNjcm9sbFRvU2xpZGUoVC5wYXJhbXMuc3BlZWQsIFQuaGlzdG9yeS5wYXRocy52YWx1ZSwgITEpO1xcbiAgICAgICAgfSwgZ2V0UGF0aFZhbHVlczogZnVuY3Rpb24gZ2V0UGF0aFZhbHVlcygpIHtcXG4gICAgICAgICAgdmFyIGUgPSB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUuc2xpY2UoMSkuc3BsaXQoXFxcIi9cXFwiKSxcXG4gICAgICAgICAgICAgIGEgPSBlLmxlbmd0aDtyZXR1cm4geyBrZXk6IGVbYSAtIDJdLCB2YWx1ZTogZVthIC0gMV0gfTtcXG4gICAgICAgIH0sIHNldEhpc3Rvcnk6IGZ1bmN0aW9uIHNldEhpc3RvcnkoZSwgYSkge1xcbiAgICAgICAgICBpZiAoVC5oaXN0b3J5LmluaXRpYWxpemVkICYmIFQucGFyYW1zLmhpc3RvcnkpIHtcXG4gICAgICAgICAgICB2YXIgdCA9IFQuc2xpZGVzLmVxKGEpLFxcbiAgICAgICAgICAgICAgICBzID0gdGhpcy5zbHVnaWZ5KHQuYXR0cihcXFwiZGF0YS1oaXN0b3J5XFxcIikpO3dpbmRvdy5sb2NhdGlvbi5wYXRobmFtZS5pbmNsdWRlcyhlKSB8fCAocyA9IGUgKyBcXFwiL1xcXCIgKyBzKSwgVC5wYXJhbXMucmVwbGFjZVN0YXRlID8gd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKG51bGwsIG51bGwsIHMpIDogd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKG51bGwsIG51bGwsIHMpO1xcbiAgICAgICAgICB9XFxuICAgICAgICB9LCBzbHVnaWZ5OiBmdW5jdGlvbiBzbHVnaWZ5KGUpIHtcXG4gICAgICAgICAgcmV0dXJuIGUudG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1xcXFxzKy9nLCBcXFwiLVxcXCIpLnJlcGxhY2UoL1teXFxcXHdcXFxcLV0rL2csIFxcXCJcXFwiKS5yZXBsYWNlKC9cXFxcLVxcXFwtKy9nLCBcXFwiLVxcXCIpLnJlcGxhY2UoL14tKy8sIFxcXCJcXFwiKS5yZXBsYWNlKC8tKyQvLCBcXFwiXFxcIik7XFxuICAgICAgICB9LCBzY3JvbGxUb1NsaWRlOiBmdW5jdGlvbiBzY3JvbGxUb1NsaWRlKGUsIGEsIHQpIHtcXG4gICAgICAgICAgaWYgKGEpIGZvciAodmFyIHMgPSAwLCBpID0gVC5zbGlkZXMubGVuZ3RoOyBzIDwgaTsgcysrKSB7XFxuICAgICAgICAgICAgdmFyIHIgPSBULnNsaWRlcy5lcShzKSxcXG4gICAgICAgICAgICAgICAgbiA9IHRoaXMuc2x1Z2lmeShyLmF0dHIoXFxcImRhdGEtaGlzdG9yeVxcXCIpKTtpZiAobiA9PT0gYSAmJiAhci5oYXNDbGFzcyhULnBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSkge1xcbiAgICAgICAgICAgICAgdmFyIG8gPSByLmluZGV4KCk7VC5zbGlkZVRvKG8sIGUsIHQpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgfSBlbHNlIFQuc2xpZGVUbygwLCBlLCB0KTtcXG4gICAgICAgIH0gfSwgVC5kaXNhYmxlS2V5Ym9hcmRDb250cm9sID0gZnVuY3Rpb24gKCkge1xcbiAgICAgICAgVC5wYXJhbXMua2V5Ym9hcmRDb250cm9sID0gITEsIGUoZG9jdW1lbnQpLm9mZihcXFwia2V5ZG93blxcXCIsIHApO1xcbiAgICAgIH0sIFQuZW5hYmxlS2V5Ym9hcmRDb250cm9sID0gZnVuY3Rpb24gKCkge1xcbiAgICAgICAgVC5wYXJhbXMua2V5Ym9hcmRDb250cm9sID0gITAsIGUoZG9jdW1lbnQpLm9uKFxcXCJrZXlkb3duXFxcIiwgcCk7XFxuICAgICAgfSwgVC5tb3VzZXdoZWVsID0geyBldmVudDogITEsIGxhc3RTY3JvbGxUaW1lOiBuZXcgd2luZG93LkRhdGUoKS5nZXRUaW1lKCkgfSwgVC5wYXJhbXMubW91c2V3aGVlbENvbnRyb2wgJiYgKFQubW91c2V3aGVlbC5ldmVudCA9IG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZihcXFwiZmlyZWZveFxcXCIpID4gLTEgPyBcXFwiRE9NTW91c2VTY3JvbGxcXFwiIDogZnVuY3Rpb24gKCkge1xcbiAgICAgICAgdmFyIGUgPSBcXFwib253aGVlbFxcXCIgaW4gZG9jdW1lbnQ7aWYgKCFlKSB7XFxuICAgICAgICAgIHZhciBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcXFwiZGl2XFxcIik7YS5zZXRBdHRyaWJ1dGUoXFxcIm9ud2hlZWxcXFwiLCBcXFwicmV0dXJuO1xcXCIpLCBlID0gXFxcImZ1bmN0aW9uXFxcIiA9PSB0eXBlb2YgYS5vbndoZWVsO1xcbiAgICAgICAgfXJldHVybiAhZSAmJiBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbiAmJiBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlICYmIGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmhhc0ZlYXR1cmUoXFxcIlxcXCIsIFxcXCJcXFwiKSAhPT0gITAgJiYgKGUgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlKFxcXCJFdmVudHMud2hlZWxcXFwiLCBcXFwiMy4wXFxcIikpLCBlO1xcbiAgICAgIH0oKSA/IFxcXCJ3aGVlbFxcXCIgOiBcXFwibW91c2V3aGVlbFxcXCIpLCBULmRpc2FibGVNb3VzZXdoZWVsQ29udHJvbCA9IGZ1bmN0aW9uICgpIHtcXG4gICAgICAgIGlmICghVC5tb3VzZXdoZWVsLmV2ZW50KSByZXR1cm4gITE7dmFyIGEgPSBULmNvbnRhaW5lcjtyZXR1cm4gXFxcImNvbnRhaW5lclxcXCIgIT09IFQucGFyYW1zLm1vdXNld2hlZWxFdmVudHNUYXJnZWQgJiYgKGEgPSBlKFQucGFyYW1zLm1vdXNld2hlZWxFdmVudHNUYXJnZWQpKSwgYS5vZmYoVC5tb3VzZXdoZWVsLmV2ZW50LCB1KSwgVC5wYXJhbXMubW91c2V3aGVlbENvbnRyb2wgPSAhMSwgITA7XFxuICAgICAgfSwgVC5lbmFibGVNb3VzZXdoZWVsQ29udHJvbCA9IGZ1bmN0aW9uICgpIHtcXG4gICAgICAgIGlmICghVC5tb3VzZXdoZWVsLmV2ZW50KSByZXR1cm4gITE7dmFyIGEgPSBULmNvbnRhaW5lcjtyZXR1cm4gXFxcImNvbnRhaW5lclxcXCIgIT09IFQucGFyYW1zLm1vdXNld2hlZWxFdmVudHNUYXJnZWQgJiYgKGEgPSBlKFQucGFyYW1zLm1vdXNld2hlZWxFdmVudHNUYXJnZWQpKSwgYS5vbihULm1vdXNld2hlZWwuZXZlbnQsIHUpLCBULnBhcmFtcy5tb3VzZXdoZWVsQ29udHJvbCA9ICEwLCAhMDtcXG4gICAgICB9LCBULnBhcmFsbGF4ID0geyBzZXRUcmFuc2xhdGU6IGZ1bmN0aW9uIHNldFRyYW5zbGF0ZSgpIHtcXG4gICAgICAgICAgVC5jb250YWluZXIuY2hpbGRyZW4oXFxcIltkYXRhLXN3aXBlci1wYXJhbGxheF0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC14XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LXldXFxcIikuZWFjaChmdW5jdGlvbiAoKSB7XFxuICAgICAgICAgICAgYyh0aGlzLCBULnByb2dyZXNzKTtcXG4gICAgICAgICAgfSksIFQuc2xpZGVzLmVhY2goZnVuY3Rpb24gKCkge1xcbiAgICAgICAgICAgIHZhciBhID0gZSh0aGlzKTthLmZpbmQoXFxcIltkYXRhLXN3aXBlci1wYXJhbGxheF0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC14XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LXldXFxcIikuZWFjaChmdW5jdGlvbiAoKSB7XFxuICAgICAgICAgICAgICBjKHRoaXMsIE1hdGgubWluKE1hdGgubWF4KGFbMF0ucHJvZ3Jlc3MsIC0xKSwgMSkpO1xcbiAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICB9KTtcXG4gICAgICAgIH0sIHNldFRyYW5zaXRpb246IGZ1bmN0aW9uIHNldFRyYW5zaXRpb24oYSkge1xcbiAgICAgICAgICB2b2lkIDAgPT09IGEgJiYgKGEgPSBULnBhcmFtcy5zcGVlZCksIFQuY29udGFpbmVyLmZpbmQoXFxcIltkYXRhLXN3aXBlci1wYXJhbGxheF0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC14XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LXldXFxcIikuZWFjaChmdW5jdGlvbiAoKSB7XFxuICAgICAgICAgICAgdmFyIHQgPSBlKHRoaXMpLFxcbiAgICAgICAgICAgICAgICBzID0gcGFyc2VJbnQodC5hdHRyKFxcXCJkYXRhLXN3aXBlci1wYXJhbGxheC1kdXJhdGlvblxcXCIpLCAxMCkgfHwgYTswID09PSBhICYmIChzID0gMCksIHQudHJhbnNpdGlvbihzKTtcXG4gICAgICAgICAgfSk7XFxuICAgICAgICB9IH0sIFQuem9vbSA9IHsgc2NhbGU6IDEsIGN1cnJlbnRTY2FsZTogMSwgaXNTY2FsaW5nOiAhMSwgZ2VzdHVyZTogeyBzbGlkZTogdm9pZCAwLCBzbGlkZVdpZHRoOiB2b2lkIDAsIHNsaWRlSGVpZ2h0OiB2b2lkIDAsIGltYWdlOiB2b2lkIDAsIGltYWdlV3JhcDogdm9pZCAwLCB6b29tTWF4OiBULnBhcmFtcy56b29tTWF4IH0sIGltYWdlOiB7IGlzVG91Y2hlZDogdm9pZCAwLCBpc01vdmVkOiB2b2lkIDAsIGN1cnJlbnRYOiB2b2lkIDAsIGN1cnJlbnRZOiB2b2lkIDAsIG1pblg6IHZvaWQgMCwgbWluWTogdm9pZCAwLCBtYXhYOiB2b2lkIDAsIG1heFk6IHZvaWQgMCwgd2lkdGg6IHZvaWQgMCwgaGVpZ2h0OiB2b2lkIDAsIHN0YXJ0WDogdm9pZCAwLCBzdGFydFk6IHZvaWQgMCwgdG91Y2hlc1N0YXJ0OiB7fSwgdG91Y2hlc0N1cnJlbnQ6IHt9IH0sIHZlbG9jaXR5OiB7IHg6IHZvaWQgMCwgeTogdm9pZCAwLCBwcmV2UG9zaXRpb25YOiB2b2lkIDAsIHByZXZQb3NpdGlvblk6IHZvaWQgMCwgcHJldlRpbWU6IHZvaWQgMCB9LCBnZXREaXN0YW5jZUJldHdlZW5Ub3VjaGVzOiBmdW5jdGlvbiBnZXREaXN0YW5jZUJldHdlZW5Ub3VjaGVzKGUpIHtcXG4gICAgICAgICAgaWYgKGUudGFyZ2V0VG91Y2hlcy5sZW5ndGggPCAyKSByZXR1cm4gMTt2YXIgYSA9IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWCxcXG4gICAgICAgICAgICAgIHQgPSBlLnRhcmdldFRvdWNoZXNbMF0ucGFnZVksXFxuICAgICAgICAgICAgICBzID0gZS50YXJnZXRUb3VjaGVzWzFdLnBhZ2VYLFxcbiAgICAgICAgICAgICAgaSA9IGUudGFyZ2V0VG91Y2hlc1sxXS5wYWdlWTtyZXR1cm4gTWF0aC5zcXJ0KE1hdGgucG93KHMgLSBhLCAyKSArIE1hdGgucG93KGkgLSB0LCAyKSk7XFxuICAgICAgICB9LCBvbkdlc3R1cmVTdGFydDogZnVuY3Rpb24gb25HZXN0dXJlU3RhcnQoYSkge1xcbiAgICAgICAgICB2YXIgdCA9IFQuem9vbTtpZiAoIVQuc3VwcG9ydC5nZXN0dXJlcykge1xcbiAgICAgICAgICAgIGlmIChcXFwidG91Y2hzdGFydFxcXCIgIT09IGEudHlwZSB8fCBcXFwidG91Y2hzdGFydFxcXCIgPT09IGEudHlwZSAmJiBhLnRhcmdldFRvdWNoZXMubGVuZ3RoIDwgMikgcmV0dXJuO3QuZ2VzdHVyZS5zY2FsZVN0YXJ0ID0gdC5nZXREaXN0YW5jZUJldHdlZW5Ub3VjaGVzKGEpO1xcbiAgICAgICAgICB9aWYgKCEodC5nZXN0dXJlLnNsaWRlICYmIHQuZ2VzdHVyZS5zbGlkZS5sZW5ndGggfHwgKHQuZ2VzdHVyZS5zbGlkZSA9IGUodGhpcyksIDAgPT09IHQuZ2VzdHVyZS5zbGlkZS5sZW5ndGggJiYgKHQuZ2VzdHVyZS5zbGlkZSA9IFQuc2xpZGVzLmVxKFQuYWN0aXZlSW5kZXgpKSwgdC5nZXN0dXJlLmltYWdlID0gdC5nZXN0dXJlLnNsaWRlLmZpbmQoXFxcImltZywgc3ZnLCBjYW52YXNcXFwiKSwgdC5nZXN0dXJlLmltYWdlV3JhcCA9IHQuZ2VzdHVyZS5pbWFnZS5wYXJlbnQoXFxcIi5cXFwiICsgVC5wYXJhbXMuem9vbUNvbnRhaW5lckNsYXNzKSwgdC5nZXN0dXJlLnpvb21NYXggPSB0Lmdlc3R1cmUuaW1hZ2VXcmFwLmF0dHIoXFxcImRhdGEtc3dpcGVyLXpvb21cXFwiKSB8fCBULnBhcmFtcy56b29tTWF4LCAwICE9PSB0Lmdlc3R1cmUuaW1hZ2VXcmFwLmxlbmd0aCkpKSByZXR1cm4gdm9pZCAodC5nZXN0dXJlLmltYWdlID0gdm9pZCAwKTt0Lmdlc3R1cmUuaW1hZ2UudHJhbnNpdGlvbigwKSwgdC5pc1NjYWxpbmcgPSAhMDtcXG4gICAgICAgIH0sIG9uR2VzdHVyZUNoYW5nZTogZnVuY3Rpb24gb25HZXN0dXJlQ2hhbmdlKGUpIHtcXG4gICAgICAgICAgdmFyIGEgPSBULnpvb207aWYgKCFULnN1cHBvcnQuZ2VzdHVyZXMpIHtcXG4gICAgICAgICAgICBpZiAoXFxcInRvdWNobW92ZVxcXCIgIT09IGUudHlwZSB8fCBcXFwidG91Y2htb3ZlXFxcIiA9PT0gZS50eXBlICYmIGUudGFyZ2V0VG91Y2hlcy5sZW5ndGggPCAyKSByZXR1cm47YS5nZXN0dXJlLnNjYWxlTW92ZSA9IGEuZ2V0RGlzdGFuY2VCZXR3ZWVuVG91Y2hlcyhlKTtcXG4gICAgICAgICAgfWEuZ2VzdHVyZS5pbWFnZSAmJiAwICE9PSBhLmdlc3R1cmUuaW1hZ2UubGVuZ3RoICYmIChULnN1cHBvcnQuZ2VzdHVyZXMgPyBhLnNjYWxlID0gZS5zY2FsZSAqIGEuY3VycmVudFNjYWxlIDogYS5zY2FsZSA9IGEuZ2VzdHVyZS5zY2FsZU1vdmUgLyBhLmdlc3R1cmUuc2NhbGVTdGFydCAqIGEuY3VycmVudFNjYWxlLCBhLnNjYWxlID4gYS5nZXN0dXJlLnpvb21NYXggJiYgKGEuc2NhbGUgPSBhLmdlc3R1cmUuem9vbU1heCAtIDEgKyBNYXRoLnBvdyhhLnNjYWxlIC0gYS5nZXN0dXJlLnpvb21NYXggKyAxLCAuNSkpLCBhLnNjYWxlIDwgVC5wYXJhbXMuem9vbU1pbiAmJiAoYS5zY2FsZSA9IFQucGFyYW1zLnpvb21NaW4gKyAxIC0gTWF0aC5wb3coVC5wYXJhbXMuem9vbU1pbiAtIGEuc2NhbGUgKyAxLCAuNSkpLCBhLmdlc3R1cmUuaW1hZ2UudHJhbnNmb3JtKFxcXCJ0cmFuc2xhdGUzZCgwLDAsMCkgc2NhbGUoXFxcIiArIGEuc2NhbGUgKyBcXFwiKVxcXCIpKTtcXG4gICAgICAgIH0sIG9uR2VzdHVyZUVuZDogZnVuY3Rpb24gb25HZXN0dXJlRW5kKGUpIHtcXG4gICAgICAgICAgdmFyIGEgPSBULnpvb207IVQuc3VwcG9ydC5nZXN0dXJlcyAmJiAoXFxcInRvdWNoZW5kXFxcIiAhPT0gZS50eXBlIHx8IFxcXCJ0b3VjaGVuZFxcXCIgPT09IGUudHlwZSAmJiBlLmNoYW5nZWRUb3VjaGVzLmxlbmd0aCA8IDIpIHx8IGEuZ2VzdHVyZS5pbWFnZSAmJiAwICE9PSBhLmdlc3R1cmUuaW1hZ2UubGVuZ3RoICYmIChhLnNjYWxlID0gTWF0aC5tYXgoTWF0aC5taW4oYS5zY2FsZSwgYS5nZXN0dXJlLnpvb21NYXgpLCBULnBhcmFtcy56b29tTWluKSwgYS5nZXN0dXJlLmltYWdlLnRyYW5zaXRpb24oVC5wYXJhbXMuc3BlZWQpLnRyYW5zZm9ybShcXFwidHJhbnNsYXRlM2QoMCwwLDApIHNjYWxlKFxcXCIgKyBhLnNjYWxlICsgXFxcIilcXFwiKSwgYS5jdXJyZW50U2NhbGUgPSBhLnNjYWxlLCBhLmlzU2NhbGluZyA9ICExLCAxID09PSBhLnNjYWxlICYmIChhLmdlc3R1cmUuc2xpZGUgPSB2b2lkIDApKTtcXG4gICAgICAgIH0sIG9uVG91Y2hTdGFydDogZnVuY3Rpb24gb25Ub3VjaFN0YXJ0KGUsIGEpIHtcXG4gICAgICAgICAgdmFyIHQgPSBlLnpvb207dC5nZXN0dXJlLmltYWdlICYmIDAgIT09IHQuZ2VzdHVyZS5pbWFnZS5sZW5ndGggJiYgKHQuaW1hZ2UuaXNUb3VjaGVkIHx8IChcXFwiYW5kcm9pZFxcXCIgPT09IGUuZGV2aWNlLm9zICYmIGEucHJldmVudERlZmF1bHQoKSwgdC5pbWFnZS5pc1RvdWNoZWQgPSAhMCwgdC5pbWFnZS50b3VjaGVzU3RhcnQueCA9IFxcXCJ0b3VjaHN0YXJ0XFxcIiA9PT0gYS50eXBlID8gYS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VYIDogYS5wYWdlWCwgdC5pbWFnZS50b3VjaGVzU3RhcnQueSA9IFxcXCJ0b3VjaHN0YXJ0XFxcIiA9PT0gYS50eXBlID8gYS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VZIDogYS5wYWdlWSkpO1xcbiAgICAgICAgfSwgb25Ub3VjaE1vdmU6IGZ1bmN0aW9uIG9uVG91Y2hNb3ZlKGUpIHtcXG4gICAgICAgICAgdmFyIGEgPSBULnpvb207aWYgKGEuZ2VzdHVyZS5pbWFnZSAmJiAwICE9PSBhLmdlc3R1cmUuaW1hZ2UubGVuZ3RoICYmIChULmFsbG93Q2xpY2sgPSAhMSwgYS5pbWFnZS5pc1RvdWNoZWQgJiYgYS5nZXN0dXJlLnNsaWRlKSkge1xcbiAgICAgICAgICAgIGEuaW1hZ2UuaXNNb3ZlZCB8fCAoYS5pbWFnZS53aWR0aCA9IGEuZ2VzdHVyZS5pbWFnZVswXS5vZmZzZXRXaWR0aCwgYS5pbWFnZS5oZWlnaHQgPSBhLmdlc3R1cmUuaW1hZ2VbMF0ub2Zmc2V0SGVpZ2h0LCBhLmltYWdlLnN0YXJ0WCA9IFQuZ2V0VHJhbnNsYXRlKGEuZ2VzdHVyZS5pbWFnZVdyYXBbMF0sIFxcXCJ4XFxcIikgfHwgMCwgYS5pbWFnZS5zdGFydFkgPSBULmdldFRyYW5zbGF0ZShhLmdlc3R1cmUuaW1hZ2VXcmFwWzBdLCBcXFwieVxcXCIpIHx8IDAsIGEuZ2VzdHVyZS5zbGlkZVdpZHRoID0gYS5nZXN0dXJlLnNsaWRlWzBdLm9mZnNldFdpZHRoLCBhLmdlc3R1cmUuc2xpZGVIZWlnaHQgPSBhLmdlc3R1cmUuc2xpZGVbMF0ub2Zmc2V0SGVpZ2h0LCBhLmdlc3R1cmUuaW1hZ2VXcmFwLnRyYW5zaXRpb24oMCksIFQucnRsICYmIChhLmltYWdlLnN0YXJ0WCA9IC1hLmltYWdlLnN0YXJ0WCksIFQucnRsICYmIChhLmltYWdlLnN0YXJ0WSA9IC1hLmltYWdlLnN0YXJ0WSkpO3ZhciB0ID0gYS5pbWFnZS53aWR0aCAqIGEuc2NhbGUsXFxuICAgICAgICAgICAgICAgIHMgPSBhLmltYWdlLmhlaWdodCAqIGEuc2NhbGU7aWYgKCEodCA8IGEuZ2VzdHVyZS5zbGlkZVdpZHRoICYmIHMgPCBhLmdlc3R1cmUuc2xpZGVIZWlnaHQpKSB7XFxuICAgICAgICAgICAgICBpZiAoYS5pbWFnZS5taW5YID0gTWF0aC5taW4oYS5nZXN0dXJlLnNsaWRlV2lkdGggLyAyIC0gdCAvIDIsIDApLCBhLmltYWdlLm1heFggPSAtYS5pbWFnZS5taW5YLCBhLmltYWdlLm1pblkgPSBNYXRoLm1pbihhLmdlc3R1cmUuc2xpZGVIZWlnaHQgLyAyIC0gcyAvIDIsIDApLCBhLmltYWdlLm1heFkgPSAtYS5pbWFnZS5taW5ZLCBhLmltYWdlLnRvdWNoZXNDdXJyZW50LnggPSBcXFwidG91Y2htb3ZlXFxcIiA9PT0gZS50eXBlID8gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VYIDogZS5wYWdlWCwgYS5pbWFnZS50b3VjaGVzQ3VycmVudC55ID0gXFxcInRvdWNobW92ZVxcXCIgPT09IGUudHlwZSA/IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWSA6IGUucGFnZVksICFhLmltYWdlLmlzTW92ZWQgJiYgIWEuaXNTY2FsaW5nKSB7XFxuICAgICAgICAgICAgICAgIGlmIChULmlzSG9yaXpvbnRhbCgpICYmIE1hdGguZmxvb3IoYS5pbWFnZS5taW5YKSA9PT0gTWF0aC5mbG9vcihhLmltYWdlLnN0YXJ0WCkgJiYgYS5pbWFnZS50b3VjaGVzQ3VycmVudC54IDwgYS5pbWFnZS50b3VjaGVzU3RhcnQueCB8fCBNYXRoLmZsb29yKGEuaW1hZ2UubWF4WCkgPT09IE1hdGguZmxvb3IoYS5pbWFnZS5zdGFydFgpICYmIGEuaW1hZ2UudG91Y2hlc0N1cnJlbnQueCA+IGEuaW1hZ2UudG91Y2hlc1N0YXJ0LngpIHJldHVybiB2b2lkIChhLmltYWdlLmlzVG91Y2hlZCA9ICExKTtpZiAoIVQuaXNIb3Jpem9udGFsKCkgJiYgTWF0aC5mbG9vcihhLmltYWdlLm1pblkpID09PSBNYXRoLmZsb29yKGEuaW1hZ2Uuc3RhcnRZKSAmJiBhLmltYWdlLnRvdWNoZXNDdXJyZW50LnkgPCBhLmltYWdlLnRvdWNoZXNTdGFydC55IHx8IE1hdGguZmxvb3IoYS5pbWFnZS5tYXhZKSA9PT0gTWF0aC5mbG9vcihhLmltYWdlLnN0YXJ0WSkgJiYgYS5pbWFnZS50b3VjaGVzQ3VycmVudC55ID4gYS5pbWFnZS50b3VjaGVzU3RhcnQueSkgcmV0dXJuIHZvaWQgKGEuaW1hZ2UuaXNUb3VjaGVkID0gITEpO1xcbiAgICAgICAgICAgICAgfWUucHJldmVudERlZmF1bHQoKSwgZS5zdG9wUHJvcGFnYXRpb24oKSwgYS5pbWFnZS5pc01vdmVkID0gITAsIGEuaW1hZ2UuY3VycmVudFggPSBhLmltYWdlLnRvdWNoZXNDdXJyZW50LnggLSBhLmltYWdlLnRvdWNoZXNTdGFydC54ICsgYS5pbWFnZS5zdGFydFgsIGEuaW1hZ2UuY3VycmVudFkgPSBhLmltYWdlLnRvdWNoZXNDdXJyZW50LnkgLSBhLmltYWdlLnRvdWNoZXNTdGFydC55ICsgYS5pbWFnZS5zdGFydFksIGEuaW1hZ2UuY3VycmVudFggPCBhLmltYWdlLm1pblggJiYgKGEuaW1hZ2UuY3VycmVudFggPSBhLmltYWdlLm1pblggKyAxIC0gTWF0aC5wb3coYS5pbWFnZS5taW5YIC0gYS5pbWFnZS5jdXJyZW50WCArIDEsIC44KSksIGEuaW1hZ2UuY3VycmVudFggPiBhLmltYWdlLm1heFggJiYgKGEuaW1hZ2UuY3VycmVudFggPSBhLmltYWdlLm1heFggLSAxICsgTWF0aC5wb3coYS5pbWFnZS5jdXJyZW50WCAtIGEuaW1hZ2UubWF4WCArIDEsIC44KSksIGEuaW1hZ2UuY3VycmVudFkgPCBhLmltYWdlLm1pblkgJiYgKGEuaW1hZ2UuY3VycmVudFkgPSBhLmltYWdlLm1pblkgKyAxIC0gTWF0aC5wb3coYS5pbWFnZS5taW5ZIC0gYS5pbWFnZS5jdXJyZW50WSArIDEsIC44KSksIGEuaW1hZ2UuY3VycmVudFkgPiBhLmltYWdlLm1heFkgJiYgKGEuaW1hZ2UuY3VycmVudFkgPSBhLmltYWdlLm1heFkgLSAxICsgTWF0aC5wb3coYS5pbWFnZS5jdXJyZW50WSAtIGEuaW1hZ2UubWF4WSArIDEsIC44KSksIGEudmVsb2NpdHkucHJldlBvc2l0aW9uWCB8fCAoYS52ZWxvY2l0eS5wcmV2UG9zaXRpb25YID0gYS5pbWFnZS50b3VjaGVzQ3VycmVudC54KSwgYS52ZWxvY2l0eS5wcmV2UG9zaXRpb25ZIHx8IChhLnZlbG9jaXR5LnByZXZQb3NpdGlvblkgPSBhLmltYWdlLnRvdWNoZXNDdXJyZW50LnkpLCBhLnZlbG9jaXR5LnByZXZUaW1lIHx8IChhLnZlbG9jaXR5LnByZXZUaW1lID0gRGF0ZS5ub3coKSksIGEudmVsb2NpdHkueCA9IChhLmltYWdlLnRvdWNoZXNDdXJyZW50LnggLSBhLnZlbG9jaXR5LnByZXZQb3NpdGlvblgpIC8gKERhdGUubm93KCkgLSBhLnZlbG9jaXR5LnByZXZUaW1lKSAvIDIsIGEudmVsb2NpdHkueSA9IChhLmltYWdlLnRvdWNoZXNDdXJyZW50LnkgLSBhLnZlbG9jaXR5LnByZXZQb3NpdGlvblkpIC8gKERhdGUubm93KCkgLSBhLnZlbG9jaXR5LnByZXZUaW1lKSAvIDIsIE1hdGguYWJzKGEuaW1hZ2UudG91Y2hlc0N1cnJlbnQueCAtIGEudmVsb2NpdHkucHJldlBvc2l0aW9uWCkgPCAyICYmIChhLnZlbG9jaXR5LnggPSAwKSwgTWF0aC5hYnMoYS5pbWFnZS50b3VjaGVzQ3VycmVudC55IC0gYS52ZWxvY2l0eS5wcmV2UG9zaXRpb25ZKSA8IDIgJiYgKGEudmVsb2NpdHkueSA9IDApLCBhLnZlbG9jaXR5LnByZXZQb3NpdGlvblggPSBhLmltYWdlLnRvdWNoZXNDdXJyZW50LngsIGEudmVsb2NpdHkucHJldlBvc2l0aW9uWSA9IGEuaW1hZ2UudG91Y2hlc0N1cnJlbnQueSwgYS52ZWxvY2l0eS5wcmV2VGltZSA9IERhdGUubm93KCksIGEuZ2VzdHVyZS5pbWFnZVdyYXAudHJhbnNmb3JtKFxcXCJ0cmFuc2xhdGUzZChcXFwiICsgYS5pbWFnZS5jdXJyZW50WCArIFxcXCJweCwgXFxcIiArIGEuaW1hZ2UuY3VycmVudFkgKyBcXFwicHgsMClcXFwiKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgIH1cXG4gICAgICAgIH0sIG9uVG91Y2hFbmQ6IGZ1bmN0aW9uIG9uVG91Y2hFbmQoZSwgYSkge1xcbiAgICAgICAgICB2YXIgdCA9IGUuem9vbTtpZiAodC5nZXN0dXJlLmltYWdlICYmIDAgIT09IHQuZ2VzdHVyZS5pbWFnZS5sZW5ndGgpIHtcXG4gICAgICAgICAgICBpZiAoIXQuaW1hZ2UuaXNUb3VjaGVkIHx8ICF0LmltYWdlLmlzTW92ZWQpIHJldHVybiB0LmltYWdlLmlzVG91Y2hlZCA9ICExLCB2b2lkICh0LmltYWdlLmlzTW92ZWQgPSAhMSk7dC5pbWFnZS5pc1RvdWNoZWQgPSAhMSwgdC5pbWFnZS5pc01vdmVkID0gITE7dmFyIHMgPSAzMDAsXFxuICAgICAgICAgICAgICAgIGkgPSAzMDAsXFxuICAgICAgICAgICAgICAgIHIgPSB0LnZlbG9jaXR5LnggKiBzLFxcbiAgICAgICAgICAgICAgICBuID0gdC5pbWFnZS5jdXJyZW50WCArIHIsXFxuICAgICAgICAgICAgICAgIG8gPSB0LnZlbG9jaXR5LnkgKiBpLFxcbiAgICAgICAgICAgICAgICBsID0gdC5pbWFnZS5jdXJyZW50WSArIG87MCAhPT0gdC52ZWxvY2l0eS54ICYmIChzID0gTWF0aC5hYnMoKG4gLSB0LmltYWdlLmN1cnJlbnRYKSAvIHQudmVsb2NpdHkueCkpLCAwICE9PSB0LnZlbG9jaXR5LnkgJiYgKGkgPSBNYXRoLmFicygobCAtIHQuaW1hZ2UuY3VycmVudFkpIC8gdC52ZWxvY2l0eS55KSk7dmFyIHAgPSBNYXRoLm1heChzLCBpKTt0LmltYWdlLmN1cnJlbnRYID0gbiwgdC5pbWFnZS5jdXJyZW50WSA9IGw7dmFyIGQgPSB0LmltYWdlLndpZHRoICogdC5zY2FsZSxcXG4gICAgICAgICAgICAgICAgdSA9IHQuaW1hZ2UuaGVpZ2h0ICogdC5zY2FsZTt0LmltYWdlLm1pblggPSBNYXRoLm1pbih0Lmdlc3R1cmUuc2xpZGVXaWR0aCAvIDIgLSBkIC8gMiwgMCksIHQuaW1hZ2UubWF4WCA9IC10LmltYWdlLm1pblgsIHQuaW1hZ2UubWluWSA9IE1hdGgubWluKHQuZ2VzdHVyZS5zbGlkZUhlaWdodCAvIDIgLSB1IC8gMiwgMCksIHQuaW1hZ2UubWF4WSA9IC10LmltYWdlLm1pblksIHQuaW1hZ2UuY3VycmVudFggPSBNYXRoLm1heChNYXRoLm1pbih0LmltYWdlLmN1cnJlbnRYLCB0LmltYWdlLm1heFgpLCB0LmltYWdlLm1pblgpLCB0LmltYWdlLmN1cnJlbnRZID0gTWF0aC5tYXgoTWF0aC5taW4odC5pbWFnZS5jdXJyZW50WSwgdC5pbWFnZS5tYXhZKSwgdC5pbWFnZS5taW5ZKSwgdC5nZXN0dXJlLmltYWdlV3JhcC50cmFuc2l0aW9uKHApLnRyYW5zZm9ybShcXFwidHJhbnNsYXRlM2QoXFxcIiArIHQuaW1hZ2UuY3VycmVudFggKyBcXFwicHgsIFxcXCIgKyB0LmltYWdlLmN1cnJlbnRZICsgXFxcInB4LDApXFxcIik7XFxuICAgICAgICAgIH1cXG4gICAgICAgIH0sIG9uVHJhbnNpdGlvbkVuZDogZnVuY3Rpb24gb25UcmFuc2l0aW9uRW5kKGUpIHtcXG4gICAgICAgICAgdmFyIGEgPSBlLnpvb207YS5nZXN0dXJlLnNsaWRlICYmIGUucHJldmlvdXNJbmRleCAhPT0gZS5hY3RpdmVJbmRleCAmJiAoYS5nZXN0dXJlLmltYWdlLnRyYW5zZm9ybShcXFwidHJhbnNsYXRlM2QoMCwwLDApIHNjYWxlKDEpXFxcIiksIGEuZ2VzdHVyZS5pbWFnZVdyYXAudHJhbnNmb3JtKFxcXCJ0cmFuc2xhdGUzZCgwLDAsMClcXFwiKSwgYS5nZXN0dXJlLnNsaWRlID0gYS5nZXN0dXJlLmltYWdlID0gYS5nZXN0dXJlLmltYWdlV3JhcCA9IHZvaWQgMCwgYS5zY2FsZSA9IGEuY3VycmVudFNjYWxlID0gMSk7XFxuICAgICAgICB9LCB0b2dnbGVab29tOiBmdW5jdGlvbiB0b2dnbGVab29tKGEsIHQpIHtcXG4gICAgICAgICAgdmFyIHMgPSBhLnpvb207aWYgKHMuZ2VzdHVyZS5zbGlkZSB8fCAocy5nZXN0dXJlLnNsaWRlID0gYS5jbGlja2VkU2xpZGUgPyBlKGEuY2xpY2tlZFNsaWRlKSA6IGEuc2xpZGVzLmVxKGEuYWN0aXZlSW5kZXgpLCBzLmdlc3R1cmUuaW1hZ2UgPSBzLmdlc3R1cmUuc2xpZGUuZmluZChcXFwiaW1nLCBzdmcsIGNhbnZhc1xcXCIpLCBzLmdlc3R1cmUuaW1hZ2VXcmFwID0gcy5nZXN0dXJlLmltYWdlLnBhcmVudChcXFwiLlxcXCIgKyBhLnBhcmFtcy56b29tQ29udGFpbmVyQ2xhc3MpKSwgcy5nZXN0dXJlLmltYWdlICYmIDAgIT09IHMuZ2VzdHVyZS5pbWFnZS5sZW5ndGgpIHtcXG4gICAgICAgICAgICB2YXIgaSwgciwgbiwgbywgbCwgcCwgZCwgdSwgYywgbSwgaCwgZywgZiwgdiwgdywgeSwgeCwgVDt2b2lkIDAgPT09IHMuaW1hZ2UudG91Y2hlc1N0YXJ0LnggJiYgdCA/IChpID0gXFxcInRvdWNoZW5kXFxcIiA9PT0gdC50eXBlID8gdC5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWCA6IHQucGFnZVgsIHIgPSBcXFwidG91Y2hlbmRcXFwiID09PSB0LnR5cGUgPyB0LmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VZIDogdC5wYWdlWSkgOiAoaSA9IHMuaW1hZ2UudG91Y2hlc1N0YXJ0LngsIHIgPSBzLmltYWdlLnRvdWNoZXNTdGFydC55KSwgcy5zY2FsZSAmJiAxICE9PSBzLnNjYWxlID8gKHMuc2NhbGUgPSBzLmN1cnJlbnRTY2FsZSA9IDEsIHMuZ2VzdHVyZS5pbWFnZVdyYXAudHJhbnNpdGlvbigzMDApLnRyYW5zZm9ybShcXFwidHJhbnNsYXRlM2QoMCwwLDApXFxcIiksIHMuZ2VzdHVyZS5pbWFnZS50cmFuc2l0aW9uKDMwMCkudHJhbnNmb3JtKFxcXCJ0cmFuc2xhdGUzZCgwLDAsMCkgc2NhbGUoMSlcXFwiKSwgcy5nZXN0dXJlLnNsaWRlID0gdm9pZCAwKSA6IChzLnNjYWxlID0gcy5jdXJyZW50U2NhbGUgPSBzLmdlc3R1cmUuaW1hZ2VXcmFwLmF0dHIoXFxcImRhdGEtc3dpcGVyLXpvb21cXFwiKSB8fCBhLnBhcmFtcy56b29tTWF4LCB0ID8gKHggPSBzLmdlc3R1cmUuc2xpZGVbMF0ub2Zmc2V0V2lkdGgsIFQgPSBzLmdlc3R1cmUuc2xpZGVbMF0ub2Zmc2V0SGVpZ2h0LCBuID0gcy5nZXN0dXJlLnNsaWRlLm9mZnNldCgpLmxlZnQsIG8gPSBzLmdlc3R1cmUuc2xpZGUub2Zmc2V0KCkudG9wLCBsID0gbiArIHggLyAyIC0gaSwgcCA9IG8gKyBUIC8gMiAtIHIsIGMgPSBzLmdlc3R1cmUuaW1hZ2VbMF0ub2Zmc2V0V2lkdGgsIG0gPSBzLmdlc3R1cmUuaW1hZ2VbMF0ub2Zmc2V0SGVpZ2h0LCBoID0gYyAqIHMuc2NhbGUsIGcgPSBtICogcy5zY2FsZSwgZiA9IE1hdGgubWluKHggLyAyIC0gaCAvIDIsIDApLCB2ID0gTWF0aC5taW4oVCAvIDIgLSBnIC8gMiwgMCksIHcgPSAtZiwgeSA9IC12LCBkID0gbCAqIHMuc2NhbGUsIHUgPSBwICogcy5zY2FsZSwgZCA8IGYgJiYgKGQgPSBmKSwgZCA+IHcgJiYgKGQgPSB3KSwgdSA8IHYgJiYgKHUgPSB2KSwgdSA+IHkgJiYgKHUgPSB5KSkgOiAoZCA9IDAsIHUgPSAwKSwgcy5nZXN0dXJlLmltYWdlV3JhcC50cmFuc2l0aW9uKDMwMCkudHJhbnNmb3JtKFxcXCJ0cmFuc2xhdGUzZChcXFwiICsgZCArIFxcXCJweCwgXFxcIiArIHUgKyBcXFwicHgsMClcXFwiKSwgcy5nZXN0dXJlLmltYWdlLnRyYW5zaXRpb24oMzAwKS50cmFuc2Zvcm0oXFxcInRyYW5zbGF0ZTNkKDAsMCwwKSBzY2FsZShcXFwiICsgcy5zY2FsZSArIFxcXCIpXFxcIikpO1xcbiAgICAgICAgICB9XFxuICAgICAgICB9LCBhdHRhY2hFdmVudHM6IGZ1bmN0aW9uIGF0dGFjaEV2ZW50cyhhKSB7XFxuICAgICAgICAgIHZhciB0ID0gYSA/IFxcXCJvZmZcXFwiIDogXFxcIm9uXFxcIjtpZiAoVC5wYXJhbXMuem9vbSkge1xcbiAgICAgICAgICAgIHZhciBzID0gKFQuc2xpZGVzLCAhKFxcXCJ0b3VjaHN0YXJ0XFxcIiAhPT0gVC50b3VjaEV2ZW50cy5zdGFydCB8fCAhVC5zdXBwb3J0LnBhc3NpdmVMaXN0ZW5lciB8fCAhVC5wYXJhbXMucGFzc2l2ZUxpc3RlbmVycykgJiYgeyBwYXNzaXZlOiAhMCwgY2FwdHVyZTogITEgfSk7VC5zdXBwb3J0Lmdlc3R1cmVzID8gKFQuc2xpZGVzW3RdKFxcXCJnZXN0dXJlc3RhcnRcXFwiLCBULnpvb20ub25HZXN0dXJlU3RhcnQsIHMpLCBULnNsaWRlc1t0XShcXFwiZ2VzdHVyZWNoYW5nZVxcXCIsIFQuem9vbS5vbkdlc3R1cmVDaGFuZ2UsIHMpLCBULnNsaWRlc1t0XShcXFwiZ2VzdHVyZWVuZFxcXCIsIFQuem9vbS5vbkdlc3R1cmVFbmQsIHMpKSA6IFxcXCJ0b3VjaHN0YXJ0XFxcIiA9PT0gVC50b3VjaEV2ZW50cy5zdGFydCAmJiAoVC5zbGlkZXNbdF0oVC50b3VjaEV2ZW50cy5zdGFydCwgVC56b29tLm9uR2VzdHVyZVN0YXJ0LCBzKSwgVC5zbGlkZXNbdF0oVC50b3VjaEV2ZW50cy5tb3ZlLCBULnpvb20ub25HZXN0dXJlQ2hhbmdlLCBzKSwgVC5zbGlkZXNbdF0oVC50b3VjaEV2ZW50cy5lbmQsIFQuem9vbS5vbkdlc3R1cmVFbmQsIHMpKSwgVFt0XShcXFwidG91Y2hTdGFydFxcXCIsIFQuem9vbS5vblRvdWNoU3RhcnQpLCBULnNsaWRlcy5lYWNoKGZ1bmN0aW9uIChhLCBzKSB7XFxuICAgICAgICAgICAgICBlKHMpLmZpbmQoXFxcIi5cXFwiICsgVC5wYXJhbXMuem9vbUNvbnRhaW5lckNsYXNzKS5sZW5ndGggPiAwICYmIGUocylbdF0oVC50b3VjaEV2ZW50cy5tb3ZlLCBULnpvb20ub25Ub3VjaE1vdmUpO1xcbiAgICAgICAgICAgIH0pLCBUW3RdKFxcXCJ0b3VjaEVuZFxcXCIsIFQuem9vbS5vblRvdWNoRW5kKSwgVFt0XShcXFwidHJhbnNpdGlvbkVuZFxcXCIsIFQuem9vbS5vblRyYW5zaXRpb25FbmQpLCBULnBhcmFtcy56b29tVG9nZ2xlICYmIFQub24oXFxcImRvdWJsZVRhcFxcXCIsIFQuem9vbS50b2dnbGVab29tKTtcXG4gICAgICAgICAgfVxcbiAgICAgICAgfSwgaW5pdDogZnVuY3Rpb24gaW5pdCgpIHtcXG4gICAgICAgICAgVC56b29tLmF0dGFjaEV2ZW50cygpO1xcbiAgICAgICAgfSwgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHtcXG4gICAgICAgICAgVC56b29tLmF0dGFjaEV2ZW50cyghMCk7XFxuICAgICAgICB9IH0sIFQuX3BsdWdpbnMgPSBbXTtmb3IgKHZhciBZIGluIFQucGx1Z2lucykge1xcbiAgICAgICAgdmFyIE8gPSBULnBsdWdpbnNbWV0oVCwgVC5wYXJhbXNbWV0pO08gJiYgVC5fcGx1Z2lucy5wdXNoKE8pO1xcbiAgICAgIH1yZXR1cm4gVC5jYWxsUGx1Z2lucyA9IGZ1bmN0aW9uIChlKSB7XFxuICAgICAgICBmb3IgKHZhciBhID0gMDsgYSA8IFQuX3BsdWdpbnMubGVuZ3RoOyBhKyspIHtcXG4gICAgICAgICAgZSBpbiBULl9wbHVnaW5zW2FdICYmIFQuX3BsdWdpbnNbYV1bZV0oYXJndW1lbnRzWzFdLCBhcmd1bWVudHNbMl0sIGFyZ3VtZW50c1szXSwgYXJndW1lbnRzWzRdLCBhcmd1bWVudHNbNV0pO1xcbiAgICAgICAgfVxcbiAgICAgIH0sIFQuZW1pdHRlckV2ZW50TGlzdGVuZXJzID0ge30sIFQuZW1pdCA9IGZ1bmN0aW9uIChlKSB7XFxuICAgICAgICBULnBhcmFtc1tlXSAmJiBULnBhcmFtc1tlXShhcmd1bWVudHNbMV0sIGFyZ3VtZW50c1syXSwgYXJndW1lbnRzWzNdLCBhcmd1bWVudHNbNF0sIGFyZ3VtZW50c1s1XSk7dmFyIGE7aWYgKFQuZW1pdHRlckV2ZW50TGlzdGVuZXJzW2VdKSBmb3IgKGEgPSAwOyBhIDwgVC5lbWl0dGVyRXZlbnRMaXN0ZW5lcnNbZV0ubGVuZ3RoOyBhKyspIHtcXG4gICAgICAgICAgVC5lbWl0dGVyRXZlbnRMaXN0ZW5lcnNbZV1bYV0oYXJndW1lbnRzWzFdLCBhcmd1bWVudHNbMl0sIGFyZ3VtZW50c1szXSwgYXJndW1lbnRzWzRdLCBhcmd1bWVudHNbNV0pO1xcbiAgICAgICAgfVQuY2FsbFBsdWdpbnMgJiYgVC5jYWxsUGx1Z2lucyhlLCBhcmd1bWVudHNbMV0sIGFyZ3VtZW50c1syXSwgYXJndW1lbnRzWzNdLCBhcmd1bWVudHNbNF0sIGFyZ3VtZW50c1s1XSk7XFxuICAgICAgfSwgVC5vbiA9IGZ1bmN0aW9uIChlLCBhKSB7XFxuICAgICAgICByZXR1cm4gZSA9IG0oZSksIFQuZW1pdHRlckV2ZW50TGlzdGVuZXJzW2VdIHx8IChULmVtaXR0ZXJFdmVudExpc3RlbmVyc1tlXSA9IFtdKSwgVC5lbWl0dGVyRXZlbnRMaXN0ZW5lcnNbZV0ucHVzaChhKSwgVDtcXG4gICAgICB9LCBULm9mZiA9IGZ1bmN0aW9uIChlLCBhKSB7XFxuICAgICAgICB2YXIgdDtpZiAoZSA9IG0oZSksIHZvaWQgMCA9PT0gYSkgcmV0dXJuIFQuZW1pdHRlckV2ZW50TGlzdGVuZXJzW2VdID0gW10sIFQ7aWYgKFQuZW1pdHRlckV2ZW50TGlzdGVuZXJzW2VdICYmIDAgIT09IFQuZW1pdHRlckV2ZW50TGlzdGVuZXJzW2VdLmxlbmd0aCkge1xcbiAgICAgICAgICBmb3IgKHQgPSAwOyB0IDwgVC5lbWl0dGVyRXZlbnRMaXN0ZW5lcnNbZV0ubGVuZ3RoOyB0KyspIHtcXG4gICAgICAgICAgICBULmVtaXR0ZXJFdmVudExpc3RlbmVyc1tlXVt0XSA9PT0gYSAmJiBULmVtaXR0ZXJFdmVudExpc3RlbmVyc1tlXS5zcGxpY2UodCwgMSk7XFxuICAgICAgICAgIH1yZXR1cm4gVDtcXG4gICAgICAgIH1cXG4gICAgICB9LCBULm9uY2UgPSBmdW5jdGlvbiAoZSwgYSkge1xcbiAgICAgICAgZSA9IG0oZSk7dmFyIHQgPSBmdW5jdGlvbiB0KCkge1xcbiAgICAgICAgICBhKGFyZ3VtZW50c1swXSwgYXJndW1lbnRzWzFdLCBhcmd1bWVudHNbMl0sIGFyZ3VtZW50c1szXSwgYXJndW1lbnRzWzRdKSwgVC5vZmYoZSwgdCk7XFxuICAgICAgICB9O3JldHVybiBULm9uKGUsIHQpLCBUO1xcbiAgICAgIH0sIFQuYTExeSA9IHsgbWFrZUZvY3VzYWJsZTogZnVuY3Rpb24gbWFrZUZvY3VzYWJsZShlKSB7XFxuICAgICAgICAgIHJldHVybiBlLmF0dHIoXFxcInRhYkluZGV4XFxcIiwgXFxcIjBcXFwiKSwgZTtcXG4gICAgICAgIH0sIGFkZFJvbGU6IGZ1bmN0aW9uIGFkZFJvbGUoZSwgYSkge1xcbiAgICAgICAgICByZXR1cm4gZS5hdHRyKFxcXCJyb2xlXFxcIiwgYSksIGU7XFxuICAgICAgICB9LCBhZGRMYWJlbDogZnVuY3Rpb24gYWRkTGFiZWwoZSwgYSkge1xcbiAgICAgICAgICByZXR1cm4gZS5hdHRyKFxcXCJhcmlhLWxhYmVsXFxcIiwgYSksIGU7XFxuICAgICAgICB9LCBkaXNhYmxlOiBmdW5jdGlvbiBkaXNhYmxlKGUpIHtcXG4gICAgICAgICAgcmV0dXJuIGUuYXR0cihcXFwiYXJpYS1kaXNhYmxlZFxcXCIsICEwKSwgZTtcXG4gICAgICAgIH0sIGVuYWJsZTogZnVuY3Rpb24gZW5hYmxlKGUpIHtcXG4gICAgICAgICAgcmV0dXJuIGUuYXR0cihcXFwiYXJpYS1kaXNhYmxlZFxcXCIsICExKSwgZTtcXG4gICAgICAgIH0sIG9uRW50ZXJLZXk6IGZ1bmN0aW9uIG9uRW50ZXJLZXkoYSkge1xcbiAgICAgICAgICAxMyA9PT0gYS5rZXlDb2RlICYmIChlKGEudGFyZ2V0KS5pcyhULnBhcmFtcy5uZXh0QnV0dG9uKSA/IChULm9uQ2xpY2tOZXh0KGEpLCBULmlzRW5kID8gVC5hMTF5Lm5vdGlmeShULnBhcmFtcy5sYXN0U2xpZGVNZXNzYWdlKSA6IFQuYTExeS5ub3RpZnkoVC5wYXJhbXMubmV4dFNsaWRlTWVzc2FnZSkpIDogZShhLnRhcmdldCkuaXMoVC5wYXJhbXMucHJldkJ1dHRvbikgJiYgKFQub25DbGlja1ByZXYoYSksIFQuaXNCZWdpbm5pbmcgPyBULmExMXkubm90aWZ5KFQucGFyYW1zLmZpcnN0U2xpZGVNZXNzYWdlKSA6IFQuYTExeS5ub3RpZnkoVC5wYXJhbXMucHJldlNsaWRlTWVzc2FnZSkpLCBlKGEudGFyZ2V0KS5pcyhcXFwiLlxcXCIgKyBULnBhcmFtcy5idWxsZXRDbGFzcykgJiYgZShhLnRhcmdldClbMF0uY2xpY2soKSk7XFxuICAgICAgICB9LCBsaXZlUmVnaW9uOiBlKCc8c3BhbiBjbGFzcz1cXFwiJyArIFQucGFyYW1zLm5vdGlmaWNhdGlvbkNsYXNzICsgJ1xcXCIgYXJpYS1saXZlPVxcXCJhc3NlcnRpdmVcXFwiIGFyaWEtYXRvbWljPVxcXCJ0cnVlXFxcIj48L3NwYW4+JyksIG5vdGlmeTogZnVuY3Rpb24gbm90aWZ5KGUpIHtcXG4gICAgICAgICAgdmFyIGEgPSBULmExMXkubGl2ZVJlZ2lvbjswICE9PSBhLmxlbmd0aCAmJiAoYS5odG1sKFxcXCJcXFwiKSwgYS5odG1sKGUpKTtcXG4gICAgICAgIH0sIGluaXQ6IGZ1bmN0aW9uIGluaXQoKSB7XFxuICAgICAgICAgIFQucGFyYW1zLm5leHRCdXR0b24gJiYgVC5uZXh0QnV0dG9uICYmIFQubmV4dEJ1dHRvbi5sZW5ndGggPiAwICYmIChULmExMXkubWFrZUZvY3VzYWJsZShULm5leHRCdXR0b24pLCBULmExMXkuYWRkUm9sZShULm5leHRCdXR0b24sIFxcXCJidXR0b25cXFwiKSwgVC5hMTF5LmFkZExhYmVsKFQubmV4dEJ1dHRvbiwgVC5wYXJhbXMubmV4dFNsaWRlTWVzc2FnZSkpLCBULnBhcmFtcy5wcmV2QnV0dG9uICYmIFQucHJldkJ1dHRvbiAmJiBULnByZXZCdXR0b24ubGVuZ3RoID4gMCAmJiAoVC5hMTF5Lm1ha2VGb2N1c2FibGUoVC5wcmV2QnV0dG9uKSwgVC5hMTF5LmFkZFJvbGUoVC5wcmV2QnV0dG9uLCBcXFwiYnV0dG9uXFxcIiksIFQuYTExeS5hZGRMYWJlbChULnByZXZCdXR0b24sIFQucGFyYW1zLnByZXZTbGlkZU1lc3NhZ2UpKSwgZShULmNvbnRhaW5lcikuYXBwZW5kKFQuYTExeS5saXZlUmVnaW9uKTtcXG4gICAgICAgIH0sIGluaXRQYWdpbmF0aW9uOiBmdW5jdGlvbiBpbml0UGFnaW5hdGlvbigpIHtcXG4gICAgICAgICAgVC5wYXJhbXMucGFnaW5hdGlvbiAmJiBULnBhcmFtcy5wYWdpbmF0aW9uQ2xpY2thYmxlICYmIFQuYnVsbGV0cyAmJiBULmJ1bGxldHMubGVuZ3RoICYmIFQuYnVsbGV0cy5lYWNoKGZ1bmN0aW9uICgpIHtcXG4gICAgICAgICAgICB2YXIgYSA9IGUodGhpcyk7VC5hMTF5Lm1ha2VGb2N1c2FibGUoYSksIFQuYTExeS5hZGRSb2xlKGEsIFxcXCJidXR0b25cXFwiKSwgVC5hMTF5LmFkZExhYmVsKGEsIFQucGFyYW1zLnBhZ2luYXRpb25CdWxsZXRNZXNzYWdlLnJlcGxhY2UoL3t7aW5kZXh9fS8sIGEuaW5kZXgoKSArIDEpKTtcXG4gICAgICAgICAgfSk7XFxuICAgICAgICB9LCBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkge1xcbiAgICAgICAgICBULmExMXkubGl2ZVJlZ2lvbiAmJiBULmExMXkubGl2ZVJlZ2lvbi5sZW5ndGggPiAwICYmIFQuYTExeS5saXZlUmVnaW9uLnJlbW92ZSgpO1xcbiAgICAgICAgfSB9LCBULmluaXQgPSBmdW5jdGlvbiAoKSB7XFxuICAgICAgICBULnBhcmFtcy5sb29wICYmIFQuY3JlYXRlTG9vcCgpLCBULnVwZGF0ZUNvbnRhaW5lclNpemUoKSwgVC51cGRhdGVTbGlkZXNTaXplKCksIFQudXBkYXRlUGFnaW5hdGlvbigpLCBULnBhcmFtcy5zY3JvbGxiYXIgJiYgVC5zY3JvbGxiYXIgJiYgKFQuc2Nyb2xsYmFyLnNldCgpLCBULnBhcmFtcy5zY3JvbGxiYXJEcmFnZ2FibGUgJiYgVC5zY3JvbGxiYXIuZW5hYmxlRHJhZ2dhYmxlKCkpLCBcXFwic2xpZGVcXFwiICE9PSBULnBhcmFtcy5lZmZlY3QgJiYgVC5lZmZlY3RzW1QucGFyYW1zLmVmZmVjdF0gJiYgKFQucGFyYW1zLmxvb3AgfHwgVC51cGRhdGVQcm9ncmVzcygpLCBULmVmZmVjdHNbVC5wYXJhbXMuZWZmZWN0XS5zZXRUcmFuc2xhdGUoKSksIFQucGFyYW1zLmxvb3AgPyBULnNsaWRlVG8oVC5wYXJhbXMuaW5pdGlhbFNsaWRlICsgVC5sb29wZWRTbGlkZXMsIDAsIFQucGFyYW1zLnJ1bkNhbGxiYWNrc09uSW5pdCkgOiAoVC5zbGlkZVRvKFQucGFyYW1zLmluaXRpYWxTbGlkZSwgMCwgVC5wYXJhbXMucnVuQ2FsbGJhY2tzT25Jbml0KSwgMCA9PT0gVC5wYXJhbXMuaW5pdGlhbFNsaWRlICYmIChULnBhcmFsbGF4ICYmIFQucGFyYW1zLnBhcmFsbGF4ICYmIFQucGFyYWxsYXguc2V0VHJhbnNsYXRlKCksIFQubGF6eSAmJiBULnBhcmFtcy5sYXp5TG9hZGluZyAmJiAoVC5sYXp5LmxvYWQoKSwgVC5sYXp5LmluaXRpYWxJbWFnZUxvYWRlZCA9ICEwKSkpLCBULmF0dGFjaEV2ZW50cygpLCBULnBhcmFtcy5vYnNlcnZlciAmJiBULnN1cHBvcnQub2JzZXJ2ZXIgJiYgVC5pbml0T2JzZXJ2ZXJzKCksIFQucGFyYW1zLnByZWxvYWRJbWFnZXMgJiYgIVQucGFyYW1zLmxhenlMb2FkaW5nICYmIFQucHJlbG9hZEltYWdlcygpLCBULnBhcmFtcy56b29tICYmIFQuem9vbSAmJiBULnpvb20uaW5pdCgpLCBULnBhcmFtcy5hdXRvcGxheSAmJiBULnN0YXJ0QXV0b3BsYXkoKSwgVC5wYXJhbXMua2V5Ym9hcmRDb250cm9sICYmIFQuZW5hYmxlS2V5Ym9hcmRDb250cm9sICYmIFQuZW5hYmxlS2V5Ym9hcmRDb250cm9sKCksIFQucGFyYW1zLm1vdXNld2hlZWxDb250cm9sICYmIFQuZW5hYmxlTW91c2V3aGVlbENvbnRyb2wgJiYgVC5lbmFibGVNb3VzZXdoZWVsQ29udHJvbCgpLCBULnBhcmFtcy5oYXNobmF2UmVwbGFjZVN0YXRlICYmIChULnBhcmFtcy5yZXBsYWNlU3RhdGUgPSBULnBhcmFtcy5oYXNobmF2UmVwbGFjZVN0YXRlKSwgVC5wYXJhbXMuaGlzdG9yeSAmJiBULmhpc3RvcnkgJiYgVC5oaXN0b3J5LmluaXQoKSwgVC5wYXJhbXMuaGFzaG5hdiAmJiBULmhhc2huYXYgJiYgVC5oYXNobmF2LmluaXQoKSwgVC5wYXJhbXMuYTExeSAmJiBULmExMXkgJiYgVC5hMTF5LmluaXQoKSwgVC5lbWl0KFxcXCJvbkluaXRcXFwiLCBUKTtcXG4gICAgICB9LCBULmNsZWFudXBTdHlsZXMgPSBmdW5jdGlvbiAoKSB7XFxuICAgICAgICBULmNvbnRhaW5lci5yZW1vdmVDbGFzcyhULmNsYXNzTmFtZXMuam9pbihcXFwiIFxcXCIpKS5yZW1vdmVBdHRyKFxcXCJzdHlsZVxcXCIpLCBULndyYXBwZXIucmVtb3ZlQXR0cihcXFwic3R5bGVcXFwiKSwgVC5zbGlkZXMgJiYgVC5zbGlkZXMubGVuZ3RoICYmIFQuc2xpZGVzLnJlbW92ZUNsYXNzKFtULnBhcmFtcy5zbGlkZVZpc2libGVDbGFzcywgVC5wYXJhbXMuc2xpZGVBY3RpdmVDbGFzcywgVC5wYXJhbXMuc2xpZGVOZXh0Q2xhc3MsIFQucGFyYW1zLnNsaWRlUHJldkNsYXNzXS5qb2luKFxcXCIgXFxcIikpLnJlbW92ZUF0dHIoXFxcInN0eWxlXFxcIikucmVtb3ZlQXR0cihcXFwiZGF0YS1zd2lwZXItY29sdW1uXFxcIikucmVtb3ZlQXR0cihcXFwiZGF0YS1zd2lwZXItcm93XFxcIiksIFQucGFnaW5hdGlvbkNvbnRhaW5lciAmJiBULnBhZ2luYXRpb25Db250YWluZXIubGVuZ3RoICYmIFQucGFnaW5hdGlvbkNvbnRhaW5lci5yZW1vdmVDbGFzcyhULnBhcmFtcy5wYWdpbmF0aW9uSGlkZGVuQ2xhc3MpLCBULmJ1bGxldHMgJiYgVC5idWxsZXRzLmxlbmd0aCAmJiBULmJ1bGxldHMucmVtb3ZlQ2xhc3MoVC5wYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MpLCBULnBhcmFtcy5wcmV2QnV0dG9uICYmIGUoVC5wYXJhbXMucHJldkJ1dHRvbikucmVtb3ZlQ2xhc3MoVC5wYXJhbXMuYnV0dG9uRGlzYWJsZWRDbGFzcyksIFQucGFyYW1zLm5leHRCdXR0b24gJiYgZShULnBhcmFtcy5uZXh0QnV0dG9uKS5yZW1vdmVDbGFzcyhULnBhcmFtcy5idXR0b25EaXNhYmxlZENsYXNzKSwgVC5wYXJhbXMuc2Nyb2xsYmFyICYmIFQuc2Nyb2xsYmFyICYmIChULnNjcm9sbGJhci50cmFjayAmJiBULnNjcm9sbGJhci50cmFjay5sZW5ndGggJiYgVC5zY3JvbGxiYXIudHJhY2sucmVtb3ZlQXR0cihcXFwic3R5bGVcXFwiKSwgVC5zY3JvbGxiYXIuZHJhZyAmJiBULnNjcm9sbGJhci5kcmFnLmxlbmd0aCAmJiBULnNjcm9sbGJhci5kcmFnLnJlbW92ZUF0dHIoXFxcInN0eWxlXFxcIikpO1xcbiAgICAgIH0sIFQuZGVzdHJveSA9IGZ1bmN0aW9uIChlLCBhKSB7XFxuICAgICAgICBULmRldGFjaEV2ZW50cygpLCBULnN0b3BBdXRvcGxheSgpLCBULnBhcmFtcy5zY3JvbGxiYXIgJiYgVC5zY3JvbGxiYXIgJiYgVC5wYXJhbXMuc2Nyb2xsYmFyRHJhZ2dhYmxlICYmIFQuc2Nyb2xsYmFyLmRpc2FibGVEcmFnZ2FibGUoKSwgVC5wYXJhbXMubG9vcCAmJiBULmRlc3Ryb3lMb29wKCksIGEgJiYgVC5jbGVhbnVwU3R5bGVzKCksIFQuZGlzY29ubmVjdE9ic2VydmVycygpLCBULnBhcmFtcy56b29tICYmIFQuem9vbSAmJiBULnpvb20uZGVzdHJveSgpLCBULnBhcmFtcy5rZXlib2FyZENvbnRyb2wgJiYgVC5kaXNhYmxlS2V5Ym9hcmRDb250cm9sICYmIFQuZGlzYWJsZUtleWJvYXJkQ29udHJvbCgpLCBULnBhcmFtcy5tb3VzZXdoZWVsQ29udHJvbCAmJiBULmRpc2FibGVNb3VzZXdoZWVsQ29udHJvbCAmJiBULmRpc2FibGVNb3VzZXdoZWVsQ29udHJvbCgpLCBULnBhcmFtcy5hMTF5ICYmIFQuYTExeSAmJiBULmExMXkuZGVzdHJveSgpLCBULnBhcmFtcy5oaXN0b3J5ICYmICFULnBhcmFtcy5yZXBsYWNlU3RhdGUgJiYgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXFxcInBvcHN0YXRlXFxcIiwgVC5oaXN0b3J5LnNldEhpc3RvcnlQb3BTdGF0ZSksIFQucGFyYW1zLmhhc2huYXYgJiYgVC5oYXNobmF2ICYmIFQuaGFzaG5hdi5kZXN0cm95KCksIFQuZW1pdChcXFwib25EZXN0cm95XFxcIiksIGUgIT09ICExICYmIChUID0gbnVsbCk7XFxuICAgICAgfSwgVC5pbml0KCksIFQ7XFxuICAgIH1cXG4gIH07YS5wcm90b3R5cGUgPSB7IGlzU2FmYXJpOiBmdW5jdGlvbiAoKSB7XFxuICAgICAgdmFyIGUgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpO3JldHVybiBlLmluZGV4T2YoXFxcInNhZmFyaVxcXCIpID49IDAgJiYgZS5pbmRleE9mKFxcXCJjaHJvbWVcXFwiKSA8IDAgJiYgZS5pbmRleE9mKFxcXCJhbmRyb2lkXFxcIikgPCAwO1xcbiAgICB9KCksIGlzVWlXZWJWaWV3OiAvKGlQaG9uZXxpUG9kfGlQYWQpLipBcHBsZVdlYktpdCg/IS4qU2FmYXJpKS9pLnRlc3Qod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpLCBpc0FycmF5OiBmdW5jdGlvbiBpc0FycmF5KGUpIHtcXG4gICAgICByZXR1cm4gXFxcIltvYmplY3QgQXJyYXldXFxcIiA9PT0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5hcHBseShlKTtcXG4gICAgfSwgYnJvd3NlcjogeyBpZTogd2luZG93Lm5hdmlnYXRvci5wb2ludGVyRW5hYmxlZCB8fCB3aW5kb3cubmF2aWdhdG9yLm1zUG9pbnRlckVuYWJsZWQsIGllVG91Y2g6IHdpbmRvdy5uYXZpZ2F0b3IubXNQb2ludGVyRW5hYmxlZCAmJiB3aW5kb3cubmF2aWdhdG9yLm1zTWF4VG91Y2hQb2ludHMgPiAxIHx8IHdpbmRvdy5uYXZpZ2F0b3IucG9pbnRlckVuYWJsZWQgJiYgd2luZG93Lm5hdmlnYXRvci5tYXhUb3VjaFBvaW50cyA+IDEsIGx0ZUlFOTogZnVuY3Rpb24gKCkge1xcbiAgICAgICAgdmFyIGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFxcXCJkaXZcXFwiKTtyZXR1cm4gZS5pbm5lckhUTUwgPSBcXFwiPCEtLVtpZiBsdGUgSUUgOV0+PGk+PC9pPjwhW2VuZGlmXS0tPlxcXCIsIDEgPT09IGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXFxcImlcXFwiKS5sZW5ndGg7XFxuICAgICAgfSgpIH0sIGRldmljZTogZnVuY3Rpb24gKCkge1xcbiAgICAgIHZhciBlID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQsXFxuICAgICAgICAgIGEgPSBlLm1hdGNoKC8oQW5kcm9pZCk7P1tcXFxcc1xcXFwvXSsoW1xcXFxkLl0rKT8vKSxcXG4gICAgICAgICAgdCA9IGUubWF0Y2goLyhpUGFkKS4qT1NcXFxccyhbXFxcXGRfXSspLyksXFxuICAgICAgICAgIHMgPSBlLm1hdGNoKC8oaVBvZCkoLipPU1xcXFxzKFtcXFxcZF9dKykpPy8pLFxcbiAgICAgICAgICBpID0gIXQgJiYgZS5tYXRjaCgvKGlQaG9uZVxcXFxzT1N8aU9TKVxcXFxzKFtcXFxcZF9dKykvKTtyZXR1cm4geyBpb3M6IHQgfHwgaSB8fCBzLCBhbmRyb2lkOiBhIH07XFxuICAgIH0oKSwgc3VwcG9ydDogeyB0b3VjaDogd2luZG93Lk1vZGVybml6ciAmJiBNb2Rlcm5penIudG91Y2ggPT09ICEwIHx8IGZ1bmN0aW9uICgpIHtcXG4gICAgICAgIHJldHVybiAhIShcXFwib250b3VjaHN0YXJ0XFxcIiBpbiB3aW5kb3cgfHwgd2luZG93LkRvY3VtZW50VG91Y2ggJiYgZG9jdW1lbnQgaW5zdGFuY2VvZiBEb2N1bWVudFRvdWNoKTtcXG4gICAgICB9KCksIHRyYW5zZm9ybXMzZDogd2luZG93Lk1vZGVybml6ciAmJiBNb2Rlcm5penIuY3NzdHJhbnNmb3JtczNkID09PSAhMCB8fCBmdW5jdGlvbiAoKSB7XFxuICAgICAgICB2YXIgZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXFxcImRpdlxcXCIpLnN0eWxlO3JldHVybiBcXFwid2Via2l0UGVyc3BlY3RpdmVcXFwiIGluIGUgfHwgXFxcIk1velBlcnNwZWN0aXZlXFxcIiBpbiBlIHx8IFxcXCJPUGVyc3BlY3RpdmVcXFwiIGluIGUgfHwgXFxcIk1zUGVyc3BlY3RpdmVcXFwiIGluIGUgfHwgXFxcInBlcnNwZWN0aXZlXFxcIiBpbiBlO1xcbiAgICAgIH0oKSwgZmxleGJveDogZnVuY3Rpb24gKCkge1xcbiAgICAgICAgZm9yICh2YXIgZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXFxcImRpdlxcXCIpLnN0eWxlLCBhID0gXFxcImFsaWduSXRlbXMgd2Via2l0QWxpZ25JdGVtcyB3ZWJraXRCb3hBbGlnbiBtc0ZsZXhBbGlnbiBtb3pCb3hBbGlnbiB3ZWJraXRGbGV4RGlyZWN0aW9uIG1zRmxleERpcmVjdGlvbiBtb3pCb3hEaXJlY3Rpb24gbW96Qm94T3JpZW50IHdlYmtpdEJveERpcmVjdGlvbiB3ZWJraXRCb3hPcmllbnRcXFwiLnNwbGl0KFxcXCIgXFxcIiksIHQgPSAwOyB0IDwgYS5sZW5ndGg7IHQrKykge1xcbiAgICAgICAgICBpZiAoYVt0XSBpbiBlKSByZXR1cm4gITA7XFxuICAgICAgICB9XFxuICAgICAgfSgpLCBvYnNlcnZlcjogZnVuY3Rpb24gKCkge1xcbiAgICAgICAgcmV0dXJuIFxcXCJNdXRhdGlvbk9ic2VydmVyXFxcIiBpbiB3aW5kb3cgfHwgXFxcIldlYmtpdE11dGF0aW9uT2JzZXJ2ZXJcXFwiIGluIHdpbmRvdztcXG4gICAgICB9KCksIHBhc3NpdmVMaXN0ZW5lcjogZnVuY3Rpb24gKCkge1xcbiAgICAgICAgdmFyIGUgPSAhMTt0cnkge1xcbiAgICAgICAgICB2YXIgYSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgXFxcInBhc3NpdmVcXFwiLCB7IGdldDogZnVuY3Rpb24gZ2V0KCkge1xcbiAgICAgICAgICAgICAgZSA9ICEwO1xcbiAgICAgICAgICAgIH0gfSk7d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXFxcInRlc3RQYXNzaXZlTGlzdGVuZXJcXFwiLCBudWxsLCBhKTtcXG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9cmV0dXJuIGU7XFxuICAgICAgfSgpLCBnZXN0dXJlczogZnVuY3Rpb24gKCkge1xcbiAgICAgICAgcmV0dXJuIFxcXCJvbmdlc3R1cmVzdGFydFxcXCIgaW4gd2luZG93O1xcbiAgICAgIH0oKSB9LCBwbHVnaW5zOiB7fSB9O2ZvciAodmFyIHQgPSBmdW5jdGlvbiAoKSB7XFxuICAgIHZhciBlID0gZnVuY3Rpb24gZShfZSkge1xcbiAgICAgIHZhciBhID0gdGhpcyxcXG4gICAgICAgICAgdCA9IDA7Zm9yICh0ID0gMDsgdCA8IF9lLmxlbmd0aDsgdCsrKSB7XFxuICAgICAgICBhW3RdID0gX2VbdF07XFxuICAgICAgfXJldHVybiBhLmxlbmd0aCA9IF9lLmxlbmd0aCwgdGhpcztcXG4gICAgfSxcXG4gICAgICAgIGEgPSBmdW5jdGlvbiBhKF9hLCB0KSB7XFxuICAgICAgdmFyIHMgPSBbXSxcXG4gICAgICAgICAgaSA9IDA7aWYgKF9hICYmICF0ICYmIF9hIGluc3RhbmNlb2YgZSkgcmV0dXJuIF9hO2lmIChfYSkgaWYgKFxcXCJzdHJpbmdcXFwiID09IHR5cGVvZiBfYSkge1xcbiAgICAgICAgdmFyIHIsXFxuICAgICAgICAgICAgbixcXG4gICAgICAgICAgICBvID0gX2EudHJpbSgpO2lmIChvLmluZGV4T2YoXFxcIjxcXFwiKSA+PSAwICYmIG8uaW5kZXhPZihcXFwiPlxcXCIpID49IDApIHtcXG4gICAgICAgICAgdmFyIGwgPSBcXFwiZGl2XFxcIjtmb3IgKDAgPT09IG8uaW5kZXhPZihcXFwiPGxpXFxcIikgJiYgKGwgPSBcXFwidWxcXFwiKSwgMCA9PT0gby5pbmRleE9mKFxcXCI8dHJcXFwiKSAmJiAobCA9IFxcXCJ0Ym9keVxcXCIpLCAwICE9PSBvLmluZGV4T2YoXFxcIjx0ZFxcXCIpICYmIDAgIT09IG8uaW5kZXhPZihcXFwiPHRoXFxcIikgfHwgKGwgPSBcXFwidHJcXFwiKSwgMCA9PT0gby5pbmRleE9mKFxcXCI8dGJvZHlcXFwiKSAmJiAobCA9IFxcXCJ0YWJsZVxcXCIpLCAwID09PSBvLmluZGV4T2YoXFxcIjxvcHRpb25cXFwiKSAmJiAobCA9IFxcXCJzZWxlY3RcXFwiKSwgbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQobCksIG4uaW5uZXJIVE1MID0gX2EsIGkgPSAwOyBpIDwgbi5jaGlsZE5vZGVzLmxlbmd0aDsgaSsrKSB7XFxuICAgICAgICAgICAgcy5wdXNoKG4uY2hpbGROb2Rlc1tpXSk7XFxuICAgICAgICAgIH1cXG4gICAgICAgIH0gZWxzZSBmb3IgKHIgPSB0IHx8IFxcXCIjXFxcIiAhPT0gX2FbMF0gfHwgX2EubWF0Y2goL1sgLjw+On5dLykgPyAodCB8fCBkb2N1bWVudCkucXVlcnlTZWxlY3RvckFsbChfYSkgOiBbZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoX2Euc3BsaXQoXFxcIiNcXFwiKVsxXSldLCBpID0gMDsgaSA8IHIubGVuZ3RoOyBpKyspIHtcXG4gICAgICAgICAgcltpXSAmJiBzLnB1c2gocltpXSk7XFxuICAgICAgICB9XFxuICAgICAgfSBlbHNlIGlmIChfYS5ub2RlVHlwZSB8fCBfYSA9PT0gd2luZG93IHx8IF9hID09PSBkb2N1bWVudCkgcy5wdXNoKF9hKTtlbHNlIGlmIChfYS5sZW5ndGggPiAwICYmIF9hWzBdLm5vZGVUeXBlKSBmb3IgKGkgPSAwOyBpIDwgX2EubGVuZ3RoOyBpKyspIHtcXG4gICAgICAgIHMucHVzaChfYVtpXSk7XFxuICAgICAgfXJldHVybiBuZXcgZShzKTtcXG4gICAgfTtyZXR1cm4gZS5wcm90b3R5cGUgPSB7IGFkZENsYXNzOiBmdW5jdGlvbiBhZGRDbGFzcyhlKSB7XFxuICAgICAgICBpZiAodm9pZCAwID09PSBlKSByZXR1cm4gdGhpcztmb3IgKHZhciBhID0gZS5zcGxpdChcXFwiIFxcXCIpLCB0ID0gMDsgdCA8IGEubGVuZ3RoOyB0KyspIHtcXG4gICAgICAgICAgZm9yICh2YXIgcyA9IDA7IHMgPCB0aGlzLmxlbmd0aDsgcysrKSB7XFxuICAgICAgICAgICAgdGhpc1tzXS5jbGFzc0xpc3QuYWRkKGFbdF0pO1xcbiAgICAgICAgICB9XFxuICAgICAgICB9cmV0dXJuIHRoaXM7XFxuICAgICAgfSwgcmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uIHJlbW92ZUNsYXNzKGUpIHtcXG4gICAgICAgIGZvciAodmFyIGEgPSBlLnNwbGl0KFxcXCIgXFxcIiksIHQgPSAwOyB0IDwgYS5sZW5ndGg7IHQrKykge1xcbiAgICAgICAgICBmb3IgKHZhciBzID0gMDsgcyA8IHRoaXMubGVuZ3RoOyBzKyspIHtcXG4gICAgICAgICAgICB0aGlzW3NdLmNsYXNzTGlzdC5yZW1vdmUoYVt0XSk7XFxuICAgICAgICAgIH1cXG4gICAgICAgIH1yZXR1cm4gdGhpcztcXG4gICAgICB9LCBoYXNDbGFzczogZnVuY3Rpb24gaGFzQ2xhc3MoZSkge1xcbiAgICAgICAgcmV0dXJuICEhdGhpc1swXSAmJiB0aGlzWzBdLmNsYXNzTGlzdC5jb250YWlucyhlKTtcXG4gICAgICB9LCB0b2dnbGVDbGFzczogZnVuY3Rpb24gdG9nZ2xlQ2xhc3MoZSkge1xcbiAgICAgICAgZm9yICh2YXIgYSA9IGUuc3BsaXQoXFxcIiBcXFwiKSwgdCA9IDA7IHQgPCBhLmxlbmd0aDsgdCsrKSB7XFxuICAgICAgICAgIGZvciAodmFyIHMgPSAwOyBzIDwgdGhpcy5sZW5ndGg7IHMrKykge1xcbiAgICAgICAgICAgIHRoaXNbc10uY2xhc3NMaXN0LnRvZ2dsZShhW3RdKTtcXG4gICAgICAgICAgfVxcbiAgICAgICAgfXJldHVybiB0aGlzO1xcbiAgICAgIH0sIGF0dHI6IGZ1bmN0aW9uIGF0dHIoZSwgYSkge1xcbiAgICAgICAgaWYgKDEgPT09IGFyZ3VtZW50cy5sZW5ndGggJiYgXFxcInN0cmluZ1xcXCIgPT0gdHlwZW9mIGUpIHJldHVybiB0aGlzWzBdID8gdGhpc1swXS5nZXRBdHRyaWJ1dGUoZSkgOiB2b2lkIDA7Zm9yICh2YXIgdCA9IDA7IHQgPCB0aGlzLmxlbmd0aDsgdCsrKSB7XFxuICAgICAgICAgIGlmICgyID09PSBhcmd1bWVudHMubGVuZ3RoKSB0aGlzW3RdLnNldEF0dHJpYnV0ZShlLCBhKTtlbHNlIGZvciAodmFyIHMgaW4gZSkge1xcbiAgICAgICAgICAgIHRoaXNbdF1bc10gPSBlW3NdLCB0aGlzW3RdLnNldEF0dHJpYnV0ZShzLCBlW3NdKTtcXG4gICAgICAgICAgfVxcbiAgICAgICAgfXJldHVybiB0aGlzO1xcbiAgICAgIH0sIHJlbW92ZUF0dHI6IGZ1bmN0aW9uIHJlbW92ZUF0dHIoZSkge1xcbiAgICAgICAgZm9yICh2YXIgYSA9IDA7IGEgPCB0aGlzLmxlbmd0aDsgYSsrKSB7XFxuICAgICAgICAgIHRoaXNbYV0ucmVtb3ZlQXR0cmlidXRlKGUpO1xcbiAgICAgICAgfXJldHVybiB0aGlzO1xcbiAgICAgIH0sIGRhdGE6IGZ1bmN0aW9uIGRhdGEoZSwgYSkge1xcbiAgICAgICAgaWYgKHZvaWQgMCAhPT0gYSkge1xcbiAgICAgICAgICBmb3IgKHZhciB0ID0gMDsgdCA8IHRoaXMubGVuZ3RoOyB0KyspIHtcXG4gICAgICAgICAgICB2YXIgcyA9IHRoaXNbdF07cy5kb203RWxlbWVudERhdGFTdG9yYWdlIHx8IChzLmRvbTdFbGVtZW50RGF0YVN0b3JhZ2UgPSB7fSksIHMuZG9tN0VsZW1lbnREYXRhU3RvcmFnZVtlXSA9IGE7XFxuICAgICAgICAgIH1yZXR1cm4gdGhpcztcXG4gICAgICAgIH1pZiAodGhpc1swXSkge1xcbiAgICAgICAgICB2YXIgaSA9IHRoaXNbMF0uZ2V0QXR0cmlidXRlKFxcXCJkYXRhLVxcXCIgKyBlKTtyZXR1cm4gaSA/IGkgOiB0aGlzWzBdLmRvbTdFbGVtZW50RGF0YVN0b3JhZ2UgJiYgKGUgaW4gdGhpc1swXS5kb203RWxlbWVudERhdGFTdG9yYWdlKSA/IHRoaXNbMF0uZG9tN0VsZW1lbnREYXRhU3RvcmFnZVtlXSA6IHZvaWQgMDtcXG4gICAgICAgIH1cXG4gICAgICB9LCB0cmFuc2Zvcm06IGZ1bmN0aW9uIHRyYW5zZm9ybShlKSB7XFxuICAgICAgICBmb3IgKHZhciBhID0gMDsgYSA8IHRoaXMubGVuZ3RoOyBhKyspIHtcXG4gICAgICAgICAgdmFyIHQgPSB0aGlzW2FdLnN0eWxlO3Qud2Via2l0VHJhbnNmb3JtID0gdC5Nc1RyYW5zZm9ybSA9IHQubXNUcmFuc2Zvcm0gPSB0Lk1velRyYW5zZm9ybSA9IHQuT1RyYW5zZm9ybSA9IHQudHJhbnNmb3JtID0gZTtcXG4gICAgICAgIH1yZXR1cm4gdGhpcztcXG4gICAgICB9LCB0cmFuc2l0aW9uOiBmdW5jdGlvbiB0cmFuc2l0aW9uKGUpIHtcXG4gICAgICAgIFxcXCJzdHJpbmdcXFwiICE9IHR5cGVvZiBlICYmIChlICs9IFxcXCJtc1xcXCIpO2ZvciAodmFyIGEgPSAwOyBhIDwgdGhpcy5sZW5ndGg7IGErKykge1xcbiAgICAgICAgICB2YXIgdCA9IHRoaXNbYV0uc3R5bGU7dC53ZWJraXRUcmFuc2l0aW9uRHVyYXRpb24gPSB0Lk1zVHJhbnNpdGlvbkR1cmF0aW9uID0gdC5tc1RyYW5zaXRpb25EdXJhdGlvbiA9IHQuTW96VHJhbnNpdGlvbkR1cmF0aW9uID0gdC5PVHJhbnNpdGlvbkR1cmF0aW9uID0gdC50cmFuc2l0aW9uRHVyYXRpb24gPSBlO1xcbiAgICAgICAgfXJldHVybiB0aGlzO1xcbiAgICAgIH0sIG9uOiBmdW5jdGlvbiBvbihlLCB0LCBzLCBpKSB7XFxuICAgICAgICBmdW5jdGlvbiByKGUpIHtcXG4gICAgICAgICAgdmFyIGkgPSBlLnRhcmdldDtpZiAoYShpKS5pcyh0KSkgcy5jYWxsKGksIGUpO2Vsc2UgZm9yICh2YXIgciA9IGEoaSkucGFyZW50cygpLCBuID0gMDsgbiA8IHIubGVuZ3RoOyBuKyspIHtcXG4gICAgICAgICAgICBhKHJbbl0pLmlzKHQpICYmIHMuY2FsbChyW25dLCBlKTtcXG4gICAgICAgICAgfVxcbiAgICAgICAgfXZhciBuLFxcbiAgICAgICAgICAgIG8sXFxuICAgICAgICAgICAgbCA9IGUuc3BsaXQoXFxcIiBcXFwiKTtmb3IgKG4gPSAwOyBuIDwgdGhpcy5sZW5ndGg7IG4rKykge1xcbiAgICAgICAgICBpZiAoXFxcImZ1bmN0aW9uXFxcIiA9PSB0eXBlb2YgdCB8fCB0ID09PSAhMSkgZm9yIChcXFwiZnVuY3Rpb25cXFwiID09IHR5cGVvZiB0ICYmIChzID0gYXJndW1lbnRzWzFdLCBpID0gYXJndW1lbnRzWzJdIHx8ICExKSwgbyA9IDA7IG8gPCBsLmxlbmd0aDsgbysrKSB7XFxuICAgICAgICAgICAgdGhpc1tuXS5hZGRFdmVudExpc3RlbmVyKGxbb10sIHMsIGkpO1xcbiAgICAgICAgICB9IGVsc2UgZm9yIChvID0gMDsgbyA8IGwubGVuZ3RoOyBvKyspIHtcXG4gICAgICAgICAgICB0aGlzW25dLmRvbTdMaXZlTGlzdGVuZXJzIHx8ICh0aGlzW25dLmRvbTdMaXZlTGlzdGVuZXJzID0gW10pLCB0aGlzW25dLmRvbTdMaXZlTGlzdGVuZXJzLnB1c2goeyBsaXN0ZW5lcjogcywgbGl2ZUxpc3RlbmVyOiByIH0pLCB0aGlzW25dLmFkZEV2ZW50TGlzdGVuZXIobFtvXSwgciwgaSk7XFxuICAgICAgICAgIH1cXG4gICAgICAgIH1yZXR1cm4gdGhpcztcXG4gICAgICB9LCBvZmY6IGZ1bmN0aW9uIG9mZihlLCBhLCB0LCBzKSB7XFxuICAgICAgICBmb3IgKHZhciBpID0gZS5zcGxpdChcXFwiIFxcXCIpLCByID0gMDsgciA8IGkubGVuZ3RoOyByKyspIHtcXG4gICAgICAgICAgZm9yICh2YXIgbiA9IDA7IG4gPCB0aGlzLmxlbmd0aDsgbisrKSB7XFxuICAgICAgICAgICAgaWYgKFxcXCJmdW5jdGlvblxcXCIgPT0gdHlwZW9mIGEgfHwgYSA9PT0gITEpIFxcXCJmdW5jdGlvblxcXCIgPT0gdHlwZW9mIGEgJiYgKHQgPSBhcmd1bWVudHNbMV0sIHMgPSBhcmd1bWVudHNbMl0gfHwgITEpLCB0aGlzW25dLnJlbW92ZUV2ZW50TGlzdGVuZXIoaVtyXSwgdCwgcyk7ZWxzZSBpZiAodGhpc1tuXS5kb203TGl2ZUxpc3RlbmVycykgZm9yICh2YXIgbyA9IDA7IG8gPCB0aGlzW25dLmRvbTdMaXZlTGlzdGVuZXJzLmxlbmd0aDsgbysrKSB7XFxuICAgICAgICAgICAgICB0aGlzW25dLmRvbTdMaXZlTGlzdGVuZXJzW29dLmxpc3RlbmVyID09PSB0ICYmIHRoaXNbbl0ucmVtb3ZlRXZlbnRMaXN0ZW5lcihpW3JdLCB0aGlzW25dLmRvbTdMaXZlTGlzdGVuZXJzW29dLmxpdmVMaXN0ZW5lciwgcyk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9XFxuICAgICAgICB9cmV0dXJuIHRoaXM7XFxuICAgICAgfSwgb25jZTogZnVuY3Rpb24gb25jZShlLCBhLCB0LCBzKSB7XFxuICAgICAgICBmdW5jdGlvbiBpKG4pIHtcXG4gICAgICAgICAgdChuKSwgci5vZmYoZSwgYSwgaSwgcyk7XFxuICAgICAgICB9dmFyIHIgPSB0aGlzO1xcXCJmdW5jdGlvblxcXCIgPT0gdHlwZW9mIGEgJiYgKGEgPSAhMSwgdCA9IGFyZ3VtZW50c1sxXSwgcyA9IGFyZ3VtZW50c1syXSksIHIub24oZSwgYSwgaSwgcyk7XFxuICAgICAgfSwgdHJpZ2dlcjogZnVuY3Rpb24gdHJpZ2dlcihlLCBhKSB7XFxuICAgICAgICBmb3IgKHZhciB0ID0gMDsgdCA8IHRoaXMubGVuZ3RoOyB0KyspIHtcXG4gICAgICAgICAgdmFyIHM7dHJ5IHtcXG4gICAgICAgICAgICBzID0gbmV3IHdpbmRvdy5DdXN0b21FdmVudChlLCB7IGRldGFpbDogYSwgYnViYmxlczogITAsIGNhbmNlbGFibGU6ICEwIH0pO1xcbiAgICAgICAgICB9IGNhdGNoICh0KSB7XFxuICAgICAgICAgICAgcyA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KFxcXCJFdmVudFxcXCIpLCBzLmluaXRFdmVudChlLCAhMCwgITApLCBzLmRldGFpbCA9IGE7XFxuICAgICAgICAgIH10aGlzW3RdLmRpc3BhdGNoRXZlbnQocyk7XFxuICAgICAgICB9cmV0dXJuIHRoaXM7XFxuICAgICAgfSwgdHJhbnNpdGlvbkVuZDogZnVuY3Rpb24gdHJhbnNpdGlvbkVuZChlKSB7XFxuICAgICAgICBmdW5jdGlvbiBhKHIpIHtcXG4gICAgICAgICAgaWYgKHIudGFyZ2V0ID09PSB0aGlzKSBmb3IgKGUuY2FsbCh0aGlzLCByKSwgdCA9IDA7IHQgPCBzLmxlbmd0aDsgdCsrKSB7XFxuICAgICAgICAgICAgaS5vZmYoc1t0XSwgYSk7XFxuICAgICAgICAgIH1cXG4gICAgICAgIH12YXIgdCxcXG4gICAgICAgICAgICBzID0gW1xcXCJ3ZWJraXRUcmFuc2l0aW9uRW5kXFxcIiwgXFxcInRyYW5zaXRpb25lbmRcXFwiLCBcXFwib1RyYW5zaXRpb25FbmRcXFwiLCBcXFwiTVNUcmFuc2l0aW9uRW5kXFxcIiwgXFxcIm1zVHJhbnNpdGlvbkVuZFxcXCJdLFxcbiAgICAgICAgICAgIGkgPSB0aGlzO2lmIChlKSBmb3IgKHQgPSAwOyB0IDwgcy5sZW5ndGg7IHQrKykge1xcbiAgICAgICAgICBpLm9uKHNbdF0sIGEpO1xcbiAgICAgICAgfXJldHVybiB0aGlzO1xcbiAgICAgIH0sIHdpZHRoOiBmdW5jdGlvbiB3aWR0aCgpIHtcXG4gICAgICAgIHJldHVybiB0aGlzWzBdID09PSB3aW5kb3cgPyB3aW5kb3cuaW5uZXJXaWR0aCA6IHRoaXMubGVuZ3RoID4gMCA/IHBhcnNlRmxvYXQodGhpcy5jc3MoXFxcIndpZHRoXFxcIikpIDogbnVsbDtcXG4gICAgICB9LCBvdXRlcldpZHRoOiBmdW5jdGlvbiBvdXRlcldpZHRoKGUpIHtcXG4gICAgICAgIHJldHVybiB0aGlzLmxlbmd0aCA+IDAgPyBlID8gdGhpc1swXS5vZmZzZXRXaWR0aCArIHBhcnNlRmxvYXQodGhpcy5jc3MoXFxcIm1hcmdpbi1yaWdodFxcXCIpKSArIHBhcnNlRmxvYXQodGhpcy5jc3MoXFxcIm1hcmdpbi1sZWZ0XFxcIikpIDogdGhpc1swXS5vZmZzZXRXaWR0aCA6IG51bGw7XFxuICAgICAgfSwgaGVpZ2h0OiBmdW5jdGlvbiBoZWlnaHQoKSB7XFxuICAgICAgICByZXR1cm4gdGhpc1swXSA9PT0gd2luZG93ID8gd2luZG93LmlubmVySGVpZ2h0IDogdGhpcy5sZW5ndGggPiAwID8gcGFyc2VGbG9hdCh0aGlzLmNzcyhcXFwiaGVpZ2h0XFxcIikpIDogbnVsbDtcXG4gICAgICB9LCBvdXRlckhlaWdodDogZnVuY3Rpb24gb3V0ZXJIZWlnaHQoZSkge1xcbiAgICAgICAgcmV0dXJuIHRoaXMubGVuZ3RoID4gMCA/IGUgPyB0aGlzWzBdLm9mZnNldEhlaWdodCArIHBhcnNlRmxvYXQodGhpcy5jc3MoXFxcIm1hcmdpbi10b3BcXFwiKSkgKyBwYXJzZUZsb2F0KHRoaXMuY3NzKFxcXCJtYXJnaW4tYm90dG9tXFxcIikpIDogdGhpc1swXS5vZmZzZXRIZWlnaHQgOiBudWxsO1xcbiAgICAgIH0sIG9mZnNldDogZnVuY3Rpb24gb2Zmc2V0KCkge1xcbiAgICAgICAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xcbiAgICAgICAgICB2YXIgZSA9IHRoaXNbMF0sXFxuICAgICAgICAgICAgICBhID0gZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcXG4gICAgICAgICAgICAgIHQgPSBkb2N1bWVudC5ib2R5LFxcbiAgICAgICAgICAgICAgcyA9IGUuY2xpZW50VG9wIHx8IHQuY2xpZW50VG9wIHx8IDAsXFxuICAgICAgICAgICAgICBpID0gZS5jbGllbnRMZWZ0IHx8IHQuY2xpZW50TGVmdCB8fCAwLFxcbiAgICAgICAgICAgICAgciA9IHdpbmRvdy5wYWdlWU9mZnNldCB8fCBlLnNjcm9sbFRvcCxcXG4gICAgICAgICAgICAgIG4gPSB3aW5kb3cucGFnZVhPZmZzZXQgfHwgZS5zY3JvbGxMZWZ0O3JldHVybiB7IHRvcDogYS50b3AgKyByIC0gcywgbGVmdDogYS5sZWZ0ICsgbiAtIGkgfTtcXG4gICAgICAgIH1yZXR1cm4gbnVsbDtcXG4gICAgICB9LCBjc3M6IGZ1bmN0aW9uIGNzcyhlLCBhKSB7XFxuICAgICAgICB2YXIgdDtpZiAoMSA9PT0gYXJndW1lbnRzLmxlbmd0aCkge1xcbiAgICAgICAgICBpZiAoXFxcInN0cmluZ1xcXCIgIT0gdHlwZW9mIGUpIHtcXG4gICAgICAgICAgICBmb3IgKHQgPSAwOyB0IDwgdGhpcy5sZW5ndGg7IHQrKykge1xcbiAgICAgICAgICAgICAgZm9yICh2YXIgcyBpbiBlKSB7XFxuICAgICAgICAgICAgICAgIHRoaXNbdF0uc3R5bGVbc10gPSBlW3NdO1xcbiAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH1yZXR1cm4gdGhpcztcXG4gICAgICAgICAgfWlmICh0aGlzWzBdKSByZXR1cm4gd2luZG93LmdldENvbXB1dGVkU3R5bGUodGhpc1swXSwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZShlKTtcXG4gICAgICAgIH1pZiAoMiA9PT0gYXJndW1lbnRzLmxlbmd0aCAmJiBcXFwic3RyaW5nXFxcIiA9PSB0eXBlb2YgZSkge1xcbiAgICAgICAgICBmb3IgKHQgPSAwOyB0IDwgdGhpcy5sZW5ndGg7IHQrKykge1xcbiAgICAgICAgICAgIHRoaXNbdF0uc3R5bGVbZV0gPSBhO1xcbiAgICAgICAgICB9cmV0dXJuIHRoaXM7XFxuICAgICAgICB9cmV0dXJuIHRoaXM7XFxuICAgICAgfSwgZWFjaDogZnVuY3Rpb24gZWFjaChlKSB7XFxuICAgICAgICBmb3IgKHZhciBhID0gMDsgYSA8IHRoaXMubGVuZ3RoOyBhKyspIHtcXG4gICAgICAgICAgZS5jYWxsKHRoaXNbYV0sIGEsIHRoaXNbYV0pO1xcbiAgICAgICAgfXJldHVybiB0aGlzO1xcbiAgICAgIH0sIGh0bWw6IGZ1bmN0aW9uIGh0bWwoZSkge1xcbiAgICAgICAgaWYgKHZvaWQgMCA9PT0gZSkgcmV0dXJuIHRoaXNbMF0gPyB0aGlzWzBdLmlubmVySFRNTCA6IHZvaWQgMDtmb3IgKHZhciBhID0gMDsgYSA8IHRoaXMubGVuZ3RoOyBhKyspIHtcXG4gICAgICAgICAgdGhpc1thXS5pbm5lckhUTUwgPSBlO1xcbiAgICAgICAgfXJldHVybiB0aGlzO1xcbiAgICAgIH0sIHRleHQ6IGZ1bmN0aW9uIHRleHQoZSkge1xcbiAgICAgICAgaWYgKHZvaWQgMCA9PT0gZSkgcmV0dXJuIHRoaXNbMF0gPyB0aGlzWzBdLnRleHRDb250ZW50LnRyaW0oKSA6IG51bGw7Zm9yICh2YXIgYSA9IDA7IGEgPCB0aGlzLmxlbmd0aDsgYSsrKSB7XFxuICAgICAgICAgIHRoaXNbYV0udGV4dENvbnRlbnQgPSBlO1xcbiAgICAgICAgfXJldHVybiB0aGlzO1xcbiAgICAgIH0sIGlzOiBmdW5jdGlvbiBpcyh0KSB7XFxuICAgICAgICBpZiAoIXRoaXNbMF0pIHJldHVybiAhMTt2YXIgcywgaTtpZiAoXFxcInN0cmluZ1xcXCIgPT0gdHlwZW9mIHQpIHtcXG4gICAgICAgICAgdmFyIHIgPSB0aGlzWzBdO2lmIChyID09PSBkb2N1bWVudCkgcmV0dXJuIHQgPT09IGRvY3VtZW50O2lmIChyID09PSB3aW5kb3cpIHJldHVybiB0ID09PSB3aW5kb3c7aWYgKHIubWF0Y2hlcykgcmV0dXJuIHIubWF0Y2hlcyh0KTtpZiAoci53ZWJraXRNYXRjaGVzU2VsZWN0b3IpIHJldHVybiByLndlYmtpdE1hdGNoZXNTZWxlY3Rvcih0KTtpZiAoci5tb3pNYXRjaGVzU2VsZWN0b3IpIHJldHVybiByLm1vek1hdGNoZXNTZWxlY3Rvcih0KTtpZiAoci5tc01hdGNoZXNTZWxlY3RvcikgcmV0dXJuIHIubXNNYXRjaGVzU2VsZWN0b3IodCk7Zm9yIChzID0gYSh0KSwgaSA9IDA7IGkgPCBzLmxlbmd0aDsgaSsrKSB7XFxuICAgICAgICAgICAgaWYgKHNbaV0gPT09IHRoaXNbMF0pIHJldHVybiAhMDtcXG4gICAgICAgICAgfXJldHVybiAhMTtcXG4gICAgICAgIH1pZiAodCA9PT0gZG9jdW1lbnQpIHJldHVybiB0aGlzWzBdID09PSBkb2N1bWVudDtpZiAodCA9PT0gd2luZG93KSByZXR1cm4gdGhpc1swXSA9PT0gd2luZG93O2lmICh0Lm5vZGVUeXBlIHx8IHQgaW5zdGFuY2VvZiBlKSB7XFxuICAgICAgICAgIGZvciAocyA9IHQubm9kZVR5cGUgPyBbdF0gOiB0LCBpID0gMDsgaSA8IHMubGVuZ3RoOyBpKyspIHtcXG4gICAgICAgICAgICBpZiAoc1tpXSA9PT0gdGhpc1swXSkgcmV0dXJuICEwO1xcbiAgICAgICAgICB9cmV0dXJuICExO1xcbiAgICAgICAgfXJldHVybiAhMTtcXG4gICAgICB9LCBpbmRleDogZnVuY3Rpb24gaW5kZXgoKSB7XFxuICAgICAgICBpZiAodGhpc1swXSkge1xcbiAgICAgICAgICBmb3IgKHZhciBlID0gdGhpc1swXSwgYSA9IDA7IG51bGwgIT09IChlID0gZS5wcmV2aW91c1NpYmxpbmcpOykge1xcbiAgICAgICAgICAgIDEgPT09IGUubm9kZVR5cGUgJiYgYSsrO1xcbiAgICAgICAgICB9cmV0dXJuIGE7XFxuICAgICAgICB9XFxuICAgICAgfSwgZXE6IGZ1bmN0aW9uIGVxKGEpIHtcXG4gICAgICAgIGlmICh2b2lkIDAgPT09IGEpIHJldHVybiB0aGlzO3ZhciB0LFxcbiAgICAgICAgICAgIHMgPSB0aGlzLmxlbmd0aDtyZXR1cm4gYSA+IHMgLSAxID8gbmV3IGUoW10pIDogYSA8IDAgPyAodCA9IHMgKyBhLCBuZXcgZSh0IDwgMCA/IFtdIDogW3RoaXNbdF1dKSkgOiBuZXcgZShbdGhpc1thXV0pO1xcbiAgICAgIH0sIGFwcGVuZDogZnVuY3Rpb24gYXBwZW5kKGEpIHtcXG4gICAgICAgIHZhciB0LCBzO2ZvciAodCA9IDA7IHQgPCB0aGlzLmxlbmd0aDsgdCsrKSB7XFxuICAgICAgICAgIGlmIChcXFwic3RyaW5nXFxcIiA9PSB0eXBlb2YgYSkge1xcbiAgICAgICAgICAgIHZhciBpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcXFwiZGl2XFxcIik7Zm9yIChpLmlubmVySFRNTCA9IGE7IGkuZmlyc3RDaGlsZDspIHtcXG4gICAgICAgICAgICAgIHRoaXNbdF0uYXBwZW5kQ2hpbGQoaS5maXJzdENoaWxkKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgIH0gZWxzZSBpZiAoYSBpbnN0YW5jZW9mIGUpIGZvciAocyA9IDA7IHMgPCBhLmxlbmd0aDsgcysrKSB7XFxuICAgICAgICAgICAgdGhpc1t0XS5hcHBlbmRDaGlsZChhW3NdKTtcXG4gICAgICAgICAgfSBlbHNlIHRoaXNbdF0uYXBwZW5kQ2hpbGQoYSk7XFxuICAgICAgICB9cmV0dXJuIHRoaXM7XFxuICAgICAgfSwgcHJlcGVuZDogZnVuY3Rpb24gcHJlcGVuZChhKSB7XFxuICAgICAgICB2YXIgdCwgcztmb3IgKHQgPSAwOyB0IDwgdGhpcy5sZW5ndGg7IHQrKykge1xcbiAgICAgICAgICBpZiAoXFxcInN0cmluZ1xcXCIgPT0gdHlwZW9mIGEpIHtcXG4gICAgICAgICAgICB2YXIgaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXFxcImRpdlxcXCIpO2ZvciAoaS5pbm5lckhUTUwgPSBhLCBzID0gaS5jaGlsZE5vZGVzLmxlbmd0aCAtIDE7IHMgPj0gMDsgcy0tKSB7XFxuICAgICAgICAgICAgICB0aGlzW3RdLmluc2VydEJlZm9yZShpLmNoaWxkTm9kZXNbc10sIHRoaXNbdF0uY2hpbGROb2Rlc1swXSk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9IGVsc2UgaWYgKGEgaW5zdGFuY2VvZiBlKSBmb3IgKHMgPSAwOyBzIDwgYS5sZW5ndGg7IHMrKykge1xcbiAgICAgICAgICAgIHRoaXNbdF0uaW5zZXJ0QmVmb3JlKGFbc10sIHRoaXNbdF0uY2hpbGROb2Rlc1swXSk7XFxuICAgICAgICAgIH0gZWxzZSB0aGlzW3RdLmluc2VydEJlZm9yZShhLCB0aGlzW3RdLmNoaWxkTm9kZXNbMF0pO1xcbiAgICAgICAgfXJldHVybiB0aGlzO1xcbiAgICAgIH0sIGluc2VydEJlZm9yZTogZnVuY3Rpb24gaW5zZXJ0QmVmb3JlKGUpIHtcXG4gICAgICAgIGZvciAodmFyIHQgPSBhKGUpLCBzID0gMDsgcyA8IHRoaXMubGVuZ3RoOyBzKyspIHtcXG4gICAgICAgICAgaWYgKDEgPT09IHQubGVuZ3RoKSB0WzBdLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXNbc10sIHRbMF0pO2Vsc2UgaWYgKHQubGVuZ3RoID4gMSkgZm9yICh2YXIgaSA9IDA7IGkgPCB0Lmxlbmd0aDsgaSsrKSB7XFxuICAgICAgICAgICAgdFtpXS5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzW3NdLmNsb25lTm9kZSghMCksIHRbaV0pO1xcbiAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgICAgfSwgaW5zZXJ0QWZ0ZXI6IGZ1bmN0aW9uIGluc2VydEFmdGVyKGUpIHtcXG4gICAgICAgIGZvciAodmFyIHQgPSBhKGUpLCBzID0gMDsgcyA8IHRoaXMubGVuZ3RoOyBzKyspIHtcXG4gICAgICAgICAgaWYgKDEgPT09IHQubGVuZ3RoKSB0WzBdLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXNbc10sIHRbMF0ubmV4dFNpYmxpbmcpO2Vsc2UgaWYgKHQubGVuZ3RoID4gMSkgZm9yICh2YXIgaSA9IDA7IGkgPCB0Lmxlbmd0aDsgaSsrKSB7XFxuICAgICAgICAgICAgdFtpXS5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzW3NdLmNsb25lTm9kZSghMCksIHRbaV0ubmV4dFNpYmxpbmcpO1xcbiAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgICAgfSwgbmV4dDogZnVuY3Rpb24gbmV4dCh0KSB7XFxuICAgICAgICByZXR1cm4gbmV3IGUodGhpcy5sZW5ndGggPiAwID8gdCA/IHRoaXNbMF0ubmV4dEVsZW1lbnRTaWJsaW5nICYmIGEodGhpc1swXS5uZXh0RWxlbWVudFNpYmxpbmcpLmlzKHQpID8gW3RoaXNbMF0ubmV4dEVsZW1lbnRTaWJsaW5nXSA6IFtdIDogdGhpc1swXS5uZXh0RWxlbWVudFNpYmxpbmcgPyBbdGhpc1swXS5uZXh0RWxlbWVudFNpYmxpbmddIDogW10gOiBbXSk7XFxuICAgICAgfSwgbmV4dEFsbDogZnVuY3Rpb24gbmV4dEFsbCh0KSB7XFxuICAgICAgICB2YXIgcyA9IFtdLFxcbiAgICAgICAgICAgIGkgPSB0aGlzWzBdO2lmICghaSkgcmV0dXJuIG5ldyBlKFtdKTtmb3IgKDsgaS5uZXh0RWxlbWVudFNpYmxpbmc7KSB7XFxuICAgICAgICAgIHZhciByID0gaS5uZXh0RWxlbWVudFNpYmxpbmc7dCA/IGEocikuaXModCkgJiYgcy5wdXNoKHIpIDogcy5wdXNoKHIpLCBpID0gcjtcXG4gICAgICAgIH1yZXR1cm4gbmV3IGUocyk7XFxuICAgICAgfSwgcHJldjogZnVuY3Rpb24gcHJldih0KSB7XFxuICAgICAgICByZXR1cm4gbmV3IGUodGhpcy5sZW5ndGggPiAwID8gdCA/IHRoaXNbMF0ucHJldmlvdXNFbGVtZW50U2libGluZyAmJiBhKHRoaXNbMF0ucHJldmlvdXNFbGVtZW50U2libGluZykuaXModCkgPyBbdGhpc1swXS5wcmV2aW91c0VsZW1lbnRTaWJsaW5nXSA6IFtdIDogdGhpc1swXS5wcmV2aW91c0VsZW1lbnRTaWJsaW5nID8gW3RoaXNbMF0ucHJldmlvdXNFbGVtZW50U2libGluZ10gOiBbXSA6IFtdKTtcXG4gICAgICB9LCBwcmV2QWxsOiBmdW5jdGlvbiBwcmV2QWxsKHQpIHtcXG4gICAgICAgIHZhciBzID0gW10sXFxuICAgICAgICAgICAgaSA9IHRoaXNbMF07aWYgKCFpKSByZXR1cm4gbmV3IGUoW10pO2ZvciAoOyBpLnByZXZpb3VzRWxlbWVudFNpYmxpbmc7KSB7XFxuICAgICAgICAgIHZhciByID0gaS5wcmV2aW91c0VsZW1lbnRTaWJsaW5nO3QgPyBhKHIpLmlzKHQpICYmIHMucHVzaChyKSA6IHMucHVzaChyKSwgaSA9IHI7XFxuICAgICAgICB9cmV0dXJuIG5ldyBlKHMpO1xcbiAgICAgIH0sIHBhcmVudDogZnVuY3Rpb24gcGFyZW50KGUpIHtcXG4gICAgICAgIGZvciAodmFyIHQgPSBbXSwgcyA9IDA7IHMgPCB0aGlzLmxlbmd0aDsgcysrKSB7XFxuICAgICAgICAgIGUgPyBhKHRoaXNbc10ucGFyZW50Tm9kZSkuaXMoZSkgJiYgdC5wdXNoKHRoaXNbc10ucGFyZW50Tm9kZSkgOiB0LnB1c2godGhpc1tzXS5wYXJlbnROb2RlKTtcXG4gICAgICAgIH1yZXR1cm4gYShhLnVuaXF1ZSh0KSk7XFxuICAgICAgfSwgcGFyZW50czogZnVuY3Rpb24gcGFyZW50cyhlKSB7XFxuICAgICAgICBmb3IgKHZhciB0ID0gW10sIHMgPSAwOyBzIDwgdGhpcy5sZW5ndGg7IHMrKykge1xcbiAgICAgICAgICBmb3IgKHZhciBpID0gdGhpc1tzXS5wYXJlbnROb2RlOyBpOykge1xcbiAgICAgICAgICAgIGUgPyBhKGkpLmlzKGUpICYmIHQucHVzaChpKSA6IHQucHVzaChpKSwgaSA9IGkucGFyZW50Tm9kZTtcXG4gICAgICAgICAgfVxcbiAgICAgICAgfXJldHVybiBhKGEudW5pcXVlKHQpKTtcXG4gICAgICB9LCBmaW5kOiBmdW5jdGlvbiBmaW5kKGEpIHtcXG4gICAgICAgIGZvciAodmFyIHQgPSBbXSwgcyA9IDA7IHMgPCB0aGlzLmxlbmd0aDsgcysrKSB7XFxuICAgICAgICAgIGZvciAodmFyIGkgPSB0aGlzW3NdLnF1ZXJ5U2VsZWN0b3JBbGwoYSksIHIgPSAwOyByIDwgaS5sZW5ndGg7IHIrKykge1xcbiAgICAgICAgICAgIHQucHVzaChpW3JdKTtcXG4gICAgICAgICAgfVxcbiAgICAgICAgfXJldHVybiBuZXcgZSh0KTtcXG4gICAgICB9LCBjaGlsZHJlbjogZnVuY3Rpb24gY2hpbGRyZW4odCkge1xcbiAgICAgICAgZm9yICh2YXIgcyA9IFtdLCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcXG4gICAgICAgICAgZm9yICh2YXIgciA9IHRoaXNbaV0uY2hpbGROb2RlcywgbiA9IDA7IG4gPCByLmxlbmd0aDsgbisrKSB7XFxuICAgICAgICAgICAgdCA/IDEgPT09IHJbbl0ubm9kZVR5cGUgJiYgYShyW25dKS5pcyh0KSAmJiBzLnB1c2gocltuXSkgOiAxID09PSByW25dLm5vZGVUeXBlICYmIHMucHVzaChyW25dKTtcXG4gICAgICAgICAgfVxcbiAgICAgICAgfXJldHVybiBuZXcgZShhLnVuaXF1ZShzKSk7XFxuICAgICAgfSwgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XFxuICAgICAgICBmb3IgKHZhciBlID0gMDsgZSA8IHRoaXMubGVuZ3RoOyBlKyspIHtcXG4gICAgICAgICAgdGhpc1tlXS5wYXJlbnROb2RlICYmIHRoaXNbZV0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzW2VdKTtcXG4gICAgICAgIH1yZXR1cm4gdGhpcztcXG4gICAgICB9LCBhZGQ6IGZ1bmN0aW9uIGFkZCgpIHtcXG4gICAgICAgIHZhciBlLFxcbiAgICAgICAgICAgIHQsXFxuICAgICAgICAgICAgcyA9IHRoaXM7Zm9yIChlID0gMDsgZSA8IGFyZ3VtZW50cy5sZW5ndGg7IGUrKykge1xcbiAgICAgICAgICB2YXIgaSA9IGEoYXJndW1lbnRzW2VdKTtmb3IgKHQgPSAwOyB0IDwgaS5sZW5ndGg7IHQrKykge1xcbiAgICAgICAgICAgIHNbcy5sZW5ndGhdID0gaVt0XSwgcy5sZW5ndGgrKztcXG4gICAgICAgICAgfVxcbiAgICAgICAgfXJldHVybiBzO1xcbiAgICAgIH0gfSwgYS5mbiA9IGUucHJvdG90eXBlLCBhLnVuaXF1ZSA9IGZ1bmN0aW9uIChlKSB7XFxuICAgICAgZm9yICh2YXIgYSA9IFtdLCB0ID0gMDsgdCA8IGUubGVuZ3RoOyB0KyspIHtcXG4gICAgICAgIGEuaW5kZXhPZihlW3RdKSA9PT0gLTEgJiYgYS5wdXNoKGVbdF0pO1xcbiAgICAgIH1yZXR1cm4gYTtcXG4gICAgfSwgYTtcXG4gIH0oKSwgcyA9IFtcXFwialF1ZXJ5XFxcIiwgXFxcIlplcHRvXFxcIiwgXFxcIkRvbTdcXFwiXSwgaSA9IDA7IGkgPCBzLmxlbmd0aDsgaSsrKSB7XFxuICAgIHdpbmRvd1tzW2ldXSAmJiBmdW5jdGlvbiAoZSkge1xcbiAgICAgIGUuZm4uc3dpcGVyID0gZnVuY3Rpb24gKHQpIHtcXG4gICAgICAgIHZhciBzO3JldHVybiBlKHRoaXMpLmVhY2goZnVuY3Rpb24gKCkge1xcbiAgICAgICAgICB2YXIgZSA9IG5ldyBhKHRoaXMsIHQpO3MgfHwgKHMgPSBlKTtcXG4gICAgICAgIH0pLCBzO1xcbiAgICAgIH07XFxuICAgIH0od2luZG93W3NbaV1dKTtcXG4gIH12YXIgcjtyID0gdm9pZCAwID09PSB0ID8gd2luZG93LkRvbTcgfHwgd2luZG93LlplcHRvIHx8IHdpbmRvdy5qUXVlcnkgOiB0LCByICYmIChcXFwidHJhbnNpdGlvbkVuZFxcXCIgaW4gci5mbiB8fCAoci5mbi50cmFuc2l0aW9uRW5kID0gZnVuY3Rpb24gKGUpIHtcXG4gICAgZnVuY3Rpb24gYShyKSB7XFxuICAgICAgaWYgKHIudGFyZ2V0ID09PSB0aGlzKSBmb3IgKGUuY2FsbCh0aGlzLCByKSwgdCA9IDA7IHQgPCBzLmxlbmd0aDsgdCsrKSB7XFxuICAgICAgICBpLm9mZihzW3RdLCBhKTtcXG4gICAgICB9XFxuICAgIH12YXIgdCxcXG4gICAgICAgIHMgPSBbXFxcIndlYmtpdFRyYW5zaXRpb25FbmRcXFwiLCBcXFwidHJhbnNpdGlvbmVuZFxcXCIsIFxcXCJvVHJhbnNpdGlvbkVuZFxcXCIsIFxcXCJNU1RyYW5zaXRpb25FbmRcXFwiLCBcXFwibXNUcmFuc2l0aW9uRW5kXFxcIl0sXFxuICAgICAgICBpID0gdGhpcztpZiAoZSkgZm9yICh0ID0gMDsgdCA8IHMubGVuZ3RoOyB0KyspIHtcXG4gICAgICBpLm9uKHNbdF0sIGEpO1xcbiAgICB9cmV0dXJuIHRoaXM7XFxuICB9KSwgXFxcInRyYW5zZm9ybVxcXCIgaW4gci5mbiB8fCAoci5mbi50cmFuc2Zvcm0gPSBmdW5jdGlvbiAoZSkge1xcbiAgICBmb3IgKHZhciBhID0gMDsgYSA8IHRoaXMubGVuZ3RoOyBhKyspIHtcXG4gICAgICB2YXIgdCA9IHRoaXNbYV0uc3R5bGU7dC53ZWJraXRUcmFuc2Zvcm0gPSB0Lk1zVHJhbnNmb3JtID0gdC5tc1RyYW5zZm9ybSA9IHQuTW96VHJhbnNmb3JtID0gdC5PVHJhbnNmb3JtID0gdC50cmFuc2Zvcm0gPSBlO1xcbiAgICB9cmV0dXJuIHRoaXM7XFxuICB9KSwgXFxcInRyYW5zaXRpb25cXFwiIGluIHIuZm4gfHwgKHIuZm4udHJhbnNpdGlvbiA9IGZ1bmN0aW9uIChlKSB7XFxuICAgIFxcXCJzdHJpbmdcXFwiICE9IHR5cGVvZiBlICYmIChlICs9IFxcXCJtc1xcXCIpO2ZvciAodmFyIGEgPSAwOyBhIDwgdGhpcy5sZW5ndGg7IGErKykge1xcbiAgICAgIHZhciB0ID0gdGhpc1thXS5zdHlsZTt0LndlYmtpdFRyYW5zaXRpb25EdXJhdGlvbiA9IHQuTXNUcmFuc2l0aW9uRHVyYXRpb24gPSB0Lm1zVHJhbnNpdGlvbkR1cmF0aW9uID0gdC5Nb3pUcmFuc2l0aW9uRHVyYXRpb24gPSB0Lk9UcmFuc2l0aW9uRHVyYXRpb24gPSB0LnRyYW5zaXRpb25EdXJhdGlvbiA9IGU7XFxuICAgIH1yZXR1cm4gdGhpcztcXG4gIH0pLCBcXFwib3V0ZXJXaWR0aFxcXCIgaW4gci5mbiB8fCAoci5mbi5vdXRlcldpZHRoID0gZnVuY3Rpb24gKGUpIHtcXG4gICAgcmV0dXJuIHRoaXMubGVuZ3RoID4gMCA/IGUgPyB0aGlzWzBdLm9mZnNldFdpZHRoICsgcGFyc2VGbG9hdCh0aGlzLmNzcyhcXFwibWFyZ2luLXJpZ2h0XFxcIikpICsgcGFyc2VGbG9hdCh0aGlzLmNzcyhcXFwibWFyZ2luLWxlZnRcXFwiKSkgOiB0aGlzWzBdLm9mZnNldFdpZHRoIDogbnVsbDtcXG4gIH0pKSwgd2luZG93LlN3aXBlciA9IGE7XFxufSgpLCAgdHJ1ZSA/IG1vZHVsZS5leHBvcnRzID0gd2luZG93LlN3aXBlciA6IFxcXCJmdW5jdGlvblxcXCIgPT0gdHlwZW9mIGRlZmluZSAmJiBkZWZpbmUuYW1kICYmIGRlZmluZShbXSwgZnVuY3Rpb24gKCkge1xcbiAgXFxcInVzZSBzdHJpY3RcXFwiO1xcbiAgcmV0dXJuIHdpbmRvdy5Td2lwZXI7XFxufSk7XFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWFwcy9zd2lwZXIubWluLmpzLm1hcC8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZjM2RwY0dWeUxtMXBiaTVxY3o4eFlXUm1JbDBzSW01aGJXVnpJanBiSW1VaUxDSmhJaXdpY3lJc0lta2lMQ0p5SWl3aVRXRjBhQ0lzSW1ac2IyOXlJaXdpYmlJc0lsUWlMQ0p3WVhKaGJYTWlMQ0poZFhSdmNHeGhlU0lzSW5Oc2FXUmxjeUlzSW1WeElpd2lZV04wYVhabFNXNWtaWGdpTENKaGRIUnlJaXdpWVhWMGIzQnNZWGxVYVcxbGIzVjBTV1FpTENKelpYUlVhVzFsYjNWMElpd2liRzl2Y0NJc0ltWnBlRXh2YjNBaUxDSmZjMnhwWkdWT1pYaDBJaXdpWlcxcGRDSXNJbWx6Ulc1a0lpd2lZWFYwYjNCc1lYbFRkRzl3VDI1TVlYTjBJaXdpYzNSdmNFRjFkRzl3YkdGNUlpd2lYM05zYVdSbFZHOGlMQ0p2SWl3aWRDSXNJblJoY21kbGRDSXNJbWx6SWl3aWNHRnlaVzUwY3lJc0ltNXZaR1ZVZVhCbElpd2laV0ZqYUNJc0lteGxibWQwYUNJc0ltd2lMQ0ozYVc1a2IzY2lMQ0pOZFhSaGRHbHZiazlpYzJWeWRtVnlJaXdpVjJWaWEybDBUWFYwWVhScGIyNVBZbk5sY25abGNpSXNJbVp2Y2tWaFkyZ2lMQ0p2YmxKbGMybDZaU0lzSW05aWMyVnlkbVVpTENKaGRIUnlhV0oxZEdWeklpd2lZMmhwYkdSTWFYTjBJaXdpWTJoaGNtRmpkR1Z5UkdGMFlTSXNJbTlpYzJWeWRtVnljeUlzSW5CMWMyZ2lMQ0p3SWl3aWIzSnBaMmx1WVd4RmRtVnVkQ0lzSW10bGVVTnZaR1VpTENKamFHRnlRMjlrWlNJc0ltRnNiRzkzVTNkcGNHVlViMDVsZUhRaUxDSnBjMGh2Y21sNmIyNTBZV3dpTENKaGJHeHZkMU4zYVhCbFZHOVFjbVYySWl3aWMyaHBablJMWlhraUxDSmhiSFJMWlhraUxDSmpkSEpzUzJWNUlpd2liV1YwWVV0bGVTSXNJbVJ2WTNWdFpXNTBJaXdpWVdOMGFYWmxSV3hsYldWdWRDSXNJbTV2WkdWT1lXMWxJaXdpZEc5TWIzZGxja05oYzJVaUxDSmpiMjUwWVdsdVpYSWlMQ0p6Ykdsa1pVTnNZWE56SWl3aWMyeHBaR1ZCWTNScGRtVkRiR0Z6Y3lJc0lteGxablFpTENKd1lXZGxXRTltWm5ObGRDSXNJblJ2Y0NJc0luQmhaMlZaVDJabWMyVjBJaXdpYVc1dVpYSlhhV1IwYUNJc0ltbHVibVZ5U0dWcFoyaDBJaXdpYjJabWMyVjBJaXdpY25Sc0lpd2ljMk55YjJ4c1RHVm1kQ0lzSW5kcFpIUm9JaXdpYUdWcFoyaDBJaXdpY0hKbGRtVnVkRVJsWm1GMWJIUWlMQ0p5WlhSMWNtNVdZV3gxWlNJc0luTnNhV1JsVG1WNGRDSXNJbk5zYVdSbFVISmxkaUlzSW1RaUxDSmtaWFJoYVd3aUxDSjNhR1ZsYkVSbGJIUmhJaXdpZDJobFpXeEVaV3gwWVZraUxDSjNhR1ZsYkVSbGJIUmhXQ0lzSW1GNGFYTWlMQ0pJVDFKSldrOU9WRUZNWDBGWVNWTWlMQ0prWld4MFlWa2lMQ0prWld4MFlWZ2lMQ0prWld4MFlVMXZaR1VpTENKemNHbHVXQ0lzSW5Od2FXNVpJaXdpY0dsNFpXeFlJaXdpY0dsNFpXeFpJaXdpZFNJc0ltMXZkWE5sZDJobFpXeEdiM0pqWlZSdlFYaHBjeUlzSW1GaWN5SXNJbTF2ZFhObGQyaGxaV3hKYm5abGNuUWlMQ0ptY21WbFRXOWtaU0lzSW1kbGRGZHlZWEJ3WlhKVWNtRnVjMnhoZEdVaUxDSnRiM1Z6Wlhkb1pXVnNVMlZ1YzJsMGFYWnBkSGtpTENKcGMwSmxaMmx1Ym1sdVp5SXNJbTFwYmxSeVlXNXpiR0YwWlNJc0ltMWhlRlJ5WVc1emJHRjBaU0lzSW5ObGRGZHlZWEJ3WlhKVWNtRnVjMmwwYVc5dUlpd2ljMlYwVjNKaGNIQmxjbFJ5WVc1emJHRjBaU0lzSW5Wd1pHRjBaVkJ5YjJkeVpYTnpJaXdpZFhCa1lYUmxRV04wYVhabFNXNWtaWGdpTENKMWNHUmhkR1ZEYkdGemMyVnpJaXdpWm5KbFpVMXZaR1ZUZEdsamEza2lMQ0pqYkdWaGNsUnBiV1Z2ZFhRaUxDSnRiM1Z6Wlhkb1pXVnNJaXdpZEdsdFpXOTFkQ0lzSW5Oc2FXUmxVbVZ6WlhRaUxDSnNZWHA1VEc5aFpHbHVaeUlzSW14aGVua2lMQ0pzYjJGa0lpd2lZWFYwYjNCc1lYbEVhWE5oWW14bFQyNUpiblJsY21GamRHbHZiaUlzSWtSaGRHVWlMQ0puWlhSVWFXMWxJaXdpYkdGemRGTmpjbTlzYkZScGJXVWlMQ0poYm1sdFlYUnBibWNpTENKdGIzVnpaWGRvWldWc1VtVnNaV0Z6WlU5dVJXUm5aWE1pTENKaklpd2lhVzVrWlhoUFppSXNJbkJoY25ObFNXNTBJaXdpZEhKaGJuTm1iM0p0SWl3aWJTSXNJblJ2VlhCd1pYSkRZWE5sSWl3aWMzVmljM1J5YVc1bklpd2lhQ0lzSW1ScGNtVmpkR2x2YmlJc0luUnZkV05vUlhabGJuUnpWR0Z5WjJWMElpd2lhVzVwZEdsaGJGTnNhV1JsSWl3aWMzQmxaV1FpTENKcFQxTkZaR2RsVTNkcGNHVkVaWFJsWTNScGIyNGlMQ0pwVDFORlpHZGxVM2RwY0dWVWFISmxjMmh2YkdRaUxDSm1jbVZsVFc5a1pVMXZiV1Z1ZEhWdElpd2labkpsWlUxdlpHVk5iMjFsYm5SMWJWSmhkR2x2SWl3aVpuSmxaVTF2WkdWTmIyMWxiblIxYlVKdmRXNWpaU0lzSW1aeVpXVk5iMlJsVFc5dFpXNTBkVzFDYjNWdVkyVlNZWFJwYnlJc0ltWnlaV1ZOYjJSbFRXOXRaVzUwZFcxV1pXeHZZMmwwZVZKaGRHbHZJaXdpWm5KbFpVMXZaR1ZOYVc1cGJYVnRWbVZzYjJOcGRIa2lMQ0poZFhSdlNHVnBaMmgwSWl3aWMyVjBWM0poY0hCbGNsTnBlbVVpTENKMmFYSjBkV0ZzVkhKaGJuTnNZWFJsSWl3aVpXWm1aV04wSWl3aVkyOTJaWEptYkc5M0lpd2ljbTkwWVhSbElpd2ljM1J5WlhSamFDSXNJbVJsY0hSb0lpd2liVzlrYVdacFpYSWlMQ0p6Ykdsa1pWTm9ZV1J2ZDNNaUxDSm1iR2x3SWl3aWJHbHRhWFJTYjNSaGRHbHZiaUlzSW1OMVltVWlMQ0p6YUdGa2IzY2lMQ0p6YUdGa2IzZFBabVp6WlhRaUxDSnphR0ZrYjNkVFkyRnNaU0lzSW1aaFpHVWlMQ0pqY205emMwWmhaR1VpTENKd1lYSmhiR3hoZUNJc0lucHZiMjBpTENKNmIyOXRUV0Y0SWl3aWVtOXZiVTFwYmlJc0lucHZiMjFVYjJkbmJHVWlMQ0p6WTNKdmJHeGlZWElpTENKelkzSnZiR3hpWVhKSWFXUmxJaXdpYzJOeWIyeHNZbUZ5UkhKaFoyZGhZbXhsSWl3aWMyTnliMnhzWW1GeVUyNWhjRTl1VW1Wc1pXRnpaU0lzSW10bGVXSnZZWEprUTI5dWRISnZiQ0lzSW0xdmRYTmxkMmhsWld4RGIyNTBjbTlzSWl3aWJXOTFjMlYzYUdWbGJFVjJaVzUwYzFSaGNtZGxaQ0lzSW1oaGMyaHVZWFlpTENKb1lYTm9ibUYyVjJGMFkyaFRkR0YwWlNJc0ltaHBjM1J2Y25raUxDSnlaWEJzWVdObFUzUmhkR1VpTENKaWNtVmhhM0J2YVc1MGN5SXNJbk53WVdObFFtVjBkMlZsYmlJc0luTnNhV1JsYzFCbGNsWnBaWGNpTENKemJHbGtaWE5RWlhKRGIyeDFiVzRpTENKemJHbGtaWE5RWlhKRGIyeDFiVzVHYVd4c0lpd2ljMnhwWkdWelVHVnlSM0p2ZFhBaUxDSmpaVzUwWlhKbFpGTnNhV1JsY3lJc0luTnNhV1JsYzA5bVpuTmxkRUpsWm05eVpTSXNJbk5zYVdSbGMwOW1abk5sZEVGbWRHVnlJaXdpY205MWJtUk1aVzVuZEdoeklpd2lkRzkxWTJoU1lYUnBieUlzSW5SdmRXTm9RVzVuYkdVaUxDSnphVzExYkdGMFpWUnZkV05vSWl3aWMyaHZjblJUZDJsd1pYTWlMQ0pzYjI1blUzZHBjR1Z6SWl3aWJHOXVaMU4zYVhCbGMxSmhkR2x2SWl3aWJHOXVaMU4zYVhCbGMwMXpJaXdpWm05c2JHOTNSbWx1WjJWeUlpd2liMjVzZVVWNGRHVnlibUZzSWl3aWRHaHlaWE5vYjJ4a0lpd2lkRzkxWTJoTmIzWmxVM1J2Y0ZCeWIzQmhaMkYwYVc5dUlpd2lkRzkxWTJoU1pXeGxZWE5sVDI1RlpHZGxjeUlzSW5WdWFYRjFaVTVoZGtWc1pXMWxiblJ6SWl3aWNHRm5hVzVoZEdsdmJpSXNJbkJoWjJsdVlYUnBiMjVGYkdWdFpXNTBJaXdpY0dGbmFXNWhkR2x2YmtOc2FXTnJZV0pzWlNJc0luQmhaMmx1WVhScGIyNUlhV1JsSWl3aWNHRm5hVzVoZEdsdmJrSjFiR3hsZEZKbGJtUmxjaUlzSW5CaFoybHVZWFJwYjI1UWNtOW5jbVZ6YzFKbGJtUmxjaUlzSW5CaFoybHVZWFJwYjI1R2NtRmpkR2x2YmxKbGJtUmxjaUlzSW5CaFoybHVZWFJwYjI1RGRYTjBiMjFTWlc1a1pYSWlMQ0p3WVdkcGJtRjBhVzl1Vkhsd1pTSXNJbkpsYzJsemRHRnVZMlVpTENKeVpYTnBjM1JoYm1ObFVtRjBhVzhpTENKdVpYaDBRblYwZEc5dUlpd2ljSEpsZGtKMWRIUnZiaUlzSW5kaGRHTm9VMnhwWkdWelVISnZaM0psYzNNaUxDSjNZWFJqYUZOc2FXUmxjMVpwYzJsaWFXeHBkSGtpTENKbmNtRmlRM1Z5YzI5eUlpd2ljSEpsZG1WdWRFTnNhV05yY3lJc0luQnlaWFpsYm5SRGJHbGphM05RY205d1lXZGhkR2x2YmlJc0luTnNhV1JsVkc5RGJHbGphMlZrVTJ4cFpHVWlMQ0pzWVhwNVRHOWhaR2x1WjBsdVVISmxkazVsZUhRaUxDSnNZWHA1VEc5aFpHbHVaMGx1VUhKbGRrNWxlSFJCYlc5MWJuUWlMQ0pzWVhwNVRHOWhaR2x1WjA5dVZISmhibk5wZEdsdmJsTjBZWEowSWl3aWNISmxiRzloWkVsdFlXZGxjeUlzSW5Wd1pHRjBaVTl1U1cxaFoyVnpVbVZoWkhraUxDSnNiMjl3UVdSa2FYUnBiMjVoYkZOc2FXUmxjeUlzSW14dmIzQmxaRk5zYVdSbGN5SXNJbU52Ym5SeWIyd2lMQ0pqYjI1MGNtOXNTVzUyWlhKelpTSXNJbU52Ym5SeWIyeENlU0lzSW01dmNtMWhiR2w2WlZOc2FXUmxTVzVrWlhnaUxDSnpkMmx3WlVoaGJtUnNaWElpTENKdWIxTjNhWEJwYm1jaUxDSnViMU4zYVhCcGJtZERiR0Z6Y3lJc0luQmhjM05wZG1WTWFYTjBaVzVsY25NaUxDSmpiMjUwWVdsdVpYSk5iMlJwWm1sbGNrTnNZWE56SWl3aWMyeHBaR1ZFZFhCc2FXTmhkR1ZCWTNScGRtVkRiR0Z6Y3lJc0luTnNhV1JsVm1semFXSnNaVU5zWVhOeklpd2ljMnhwWkdWRWRYQnNhV05oZEdWRGJHRnpjeUlzSW5Oc2FXUmxUbVY0ZEVOc1lYTnpJaXdpYzJ4cFpHVkVkWEJzYVdOaGRHVk9aWGgwUTJ4aGMzTWlMQ0p6Ykdsa1pWQnlaWFpEYkdGemN5SXNJbk5zYVdSbFJIVndiR2xqWVhSbFVISmxka05zWVhOeklpd2lkM0poY0hCbGNrTnNZWE56SWl3aVluVnNiR1YwUTJ4aGMzTWlMQ0ppZFd4c1pYUkJZM1JwZG1WRGJHRnpjeUlzSW1KMWRIUnZia1JwYzJGaWJHVmtRMnhoYzNNaUxDSndZV2RwYm1GMGFXOXVRM1Z5Y21WdWRFTnNZWE56SWl3aWNHRm5hVzVoZEdsdmJsUnZkR0ZzUTJ4aGMzTWlMQ0p3WVdkcGJtRjBhVzl1U0dsa1pHVnVRMnhoYzNNaUxDSndZV2RwYm1GMGFXOXVVSEp2WjNKbGMzTmlZWEpEYkdGemN5SXNJbkJoWjJsdVlYUnBiMjVEYkdsamEyRmliR1ZEYkdGemN5SXNJbkJoWjJsdVlYUnBiMjVOYjJScFptbGxja05zWVhOeklpd2liR0Y2ZVV4dllXUnBibWREYkdGemN5SXNJbXhoZW5sVGRHRjBkWE5NYjJGa2FXNW5RMnhoYzNNaUxDSnNZWHA1VTNSaGRIVnpURzloWkdWa1EyeGhjM01pTENKc1lYcDVVSEpsYkc5aFpHVnlRMnhoYzNNaUxDSnViM1JwWm1sallYUnBiMjVEYkdGemN5SXNJbkJ5Wld4dllXUmxja05zWVhOeklpd2llbTl2YlVOdmJuUmhhVzVsY2tOc1lYTnpJaXdpYjJKelpYSjJaWElpTENKdlluTmxjblpsVUdGeVpXNTBjeUlzSW1FeE1Ya2lMQ0p3Y21WMlUyeHBaR1ZOWlhOellXZGxJaXdpYm1WNGRGTnNhV1JsVFdWemMyRm5aU0lzSW1acGNuTjBVMnhwWkdWTlpYTnpZV2RsSWl3aWJHRnpkRk5zYVdSbFRXVnpjMkZuWlNJc0luQmhaMmx1WVhScGIyNUNkV3hzWlhSTlpYTnpZV2RsSWl3aWNuVnVRMkZzYkdKaFkydHpUMjVKYm1sMElpd2laeUlzSW1ZaUxDSjJJaXdpYWxGMVpYSjVJaXdpZHlJc0lua2lMQ0o0SWl3aWIzSnBaMmx1WVd4UVlYSmhiWE1pTENKamJHRnpjMDVoYldWeklpd2lSRzl0TnlJc0lscGxjSFJ2SWl3aUpDSXNJbU4xY25KbGJuUkNjbVZoYTNCdmFXNTBJaXdpWjJWMFFXTjBhWFpsUW5KbFlXdHdiMmx1ZENJc0ltaGhjMDkzYmxCeWIzQmxjblI1SWl3aWMyOXlkQ0lzSW5ObGRFSnlaV0ZyY0c5cGJuUWlMQ0prWlhOMGNtOTVURzl2Y0NJc0luSmxURzl2Y0NJc0ltSWlMQ0p6ZDJsd1pYSWlMQ0prWVhSaElpd2ljM1Z3Y0c5eWRDSXNJbVpzWlhoaWIzZ2lMQ0owY21GdWMyWnZjbTF6TTJRaUxDSjBiM1ZqYUNJc0luZHlZWEJ3WlhJaUxDSmphR2xzWkhKbGJpSXNJbkJoWjJsdVlYUnBiMjVEYjI1MFlXbHVaWElpTENKbWFXNWtJaXdpWVdSa1EyeGhjM01pTENKa2FYSWlMQ0pqYzNNaUxDSjNjbTl1WjFKVVRDSXNJbVJsZG1salpTSXNJbUZ1WkhKdmFXUWlMQ0pxYjJsdUlpd2lkSEpoYm5Oc1lYUmxJaXdpY0hKdlozSmxjM01pTENKMlpXeHZZMmwwZVNJc0lteHZZMnRUZDJsd1pWUnZUbVY0ZENJc0luVnVjMlYwUjNKaFlrTjFjbk52Y2lJc0lteHZZMnRUZDJsd1pWUnZVSEpsZGlJc0lteHZZMnRUZDJsd1pYTWlMQ0oxYm14dlkydFRkMmx3WlZSdlRtVjRkQ0lzSW5ObGRFZHlZV0pEZFhKemIzSWlMQ0oxYm14dlkydFRkMmx3WlZSdlVISmxkaUlzSW5WdWJHOWphMU4zYVhCbGN5SXNJbk4wZVd4bElpd2lZM1Z5YzI5eUlpd2lhVzFoWjJWelZHOU1iMkZrSWl3aWFXMWhaMlZ6VEc5aFpHVmtJaXdpYkc5aFpFbHRZV2RsSWl3aVkyOXRjR3hsZEdVaUxDSkpiV0ZuWlNJc0ltOXViRzloWkNJc0ltOXVaWEp5YjNJaUxDSnphWHBsY3lJc0luTnlZM05sZENJc0luTnlZeUlzSW5Wd1pHRjBaU0lzSW1OMWNuSmxiblJUY21NaUxDSm5aWFJCZEhSeWFXSjFkR1VpTENKaGRYUnZjR3hoZVdsdVp5SXNJbUYxZEc5d2JHRjVVR0YxYzJWa0lpd2ljM1JoY25SQmRYUnZjR3hoZVNJc0luQmhkWE5sUVhWMGIzQnNZWGtpTENKMGNtRnVjMmwwYVc5dVJXNWtJaXdpYzI1aGNFZHlhV1FpTENKMWNHUmhkR1ZCZFhSdlNHVnBaMmgwSWl3aVkyVnBiQ0lzSW05bVpuTmxkRWhsYVdkb2RDSXNJblZ3WkdGMFpVTnZiblJoYVc1bGNsTnBlbVVpTENKamJHbGxiblJYYVdSMGFDSXNJbU5zYVdWdWRFaGxhV2RvZENJc0luTnBlbVVpTENKMWNHUmhkR1ZUYkdsa1pYTlRhWHBsSWl3aWMyeHBaR1Z6UjNKcFpDSXNJbk5zYVdSbGMxTnBlbVZ6UjNKcFpDSXNJbkJoY25ObFJteHZZWFFpTENKeVpYQnNZV05sSWl3aWRtbHlkSFZoYkZOcGVtVWlMQ0p0WVhKbmFXNU1aV1owSWl3aWJXRnlaMmx1Vkc5d0lpd2liV0Z5WjJsdVVtbG5hSFFpTENKdFlYSm5hVzVDYjNSMGIyMGlMQ0p0WVhnaUxDSnZjbVJsY2lJc0ltOTFkR1Z5VjJsa2RHZ2lMQ0p2ZFhSbGNraGxhV2RvZENJc0luTjNhWEJsY2xOc2FXUmxVMmw2WlNJc0luVndaR0YwWlZOc2FXUmxjMDltWm5ObGRDSXNJbk4zYVhCbGNsTnNhV1JsVDJabWMyVjBJaXdpYjJabWMyVjBUR1ZtZENJc0ltOW1abk5sZEZSdmNDSXNJbU4xY25KbGJuUlRiR2xrWlhOUVpYSldhV1YzSWl3aWRYQmtZWFJsVTJ4cFpHVnpVSEp2WjNKbGMzTWlMQ0p5WlcxdmRtVkRiR0Z6Y3lJc0luTnVZWEJKYm1SbGVDSXNJbkJ5WlhacGIzVnpTVzVrWlhnaUxDSjFjR1JoZEdWU1pXRnNTVzVrWlhnaUxDSnlaV0ZzU1c1a1pYZ2lMQ0pvWVhORGJHRnpjeUlzSW01bGVIUWlMQ0p3Y21WMklpd2lZblZzYkdWMGN5SXNJbWx1WkdWNElpd2lkR1Y0ZENJc0luUnlZVzV6YVhScGIyNGlMQ0pvZEcxc0lpd2laR2x6WVdKc1pTSXNJbVZ1WVdKc1pTSXNJblZ3WkdGMFpWQmhaMmx1WVhScGIyNGlMQ0pwYm1sMFVHRm5hVzVoZEdsdmJpSXNJbTFwYmlJc0luTmxkQ0lzSW1OdmJuUnliMnhzWlhJaUxDSnpjR3hwYm1VaUxDSnpiR2xrWlZSdklpd2liMjVDWldadmNtVlNaWE5wZW1VaUxDSnZia0ZtZEdWeVVtVnphWHBsSWl3aWRHOTFZMmhGZG1WdWRITkVaWE5yZEc5d0lpd2ljM1JoY25RaUxDSnRiM1psSWl3aVpXNWtJaXdpYm1GMmFXZGhkRzl5SWl3aWNHOXBiblJsY2tWdVlXSnNaV1FpTENKdGMxQnZhVzUwWlhKRmJtRmliR1ZrSWl3aWRHOTFZMmhGZG1WdWRITWlMQ0pwYm1sMFJYWmxiblJ6SWl3aWJtVnpkR1ZrSWl3aVluSnZkM05sY2lJc0ltbGxJaXdpYjI1VWIzVmphRk4wWVhKMElpd2liMjVVYjNWamFFMXZkbVVpTENKdmJsUnZkV05vUlc1a0lpd2ljR0Z6YzJsMlpVeHBjM1JsYm1WeUlpd2ljR0Z6YzJsMlpTSXNJbU5oY0hSMWNtVWlMQ0pwYjNNaUxDSnZia05zYVdOclRtVjRkQ0lzSW05dVJXNTBaWEpMWlhraUxDSnZia05zYVdOclVISmxkaUlzSW05dVEyeHBZMnRKYm1SbGVDSXNJbUYwZEdGamFFVjJaVzUwY3lJc0ltUmxkR0ZqYUVWMlpXNTBjeUlzSW1Gc2JHOTNRMnhwWTJzaUxDSnpkRzl3VUhKdmNHRm5ZWFJwYjI0aUxDSnpkRzl3U1cxdFpXUnBZWFJsVUhKdmNHRm5ZWFJwYjI0aUxDSjFjR1JoZEdWRGJHbGphMlZrVTJ4cFpHVWlMQ0pqYkdsamEyVmtVMnhwWkdVaUxDSmpiR2xqYTJWa1NXNWtaWGdpTENKVElpd2lReUlzSW5vaUxDSk5JaXdpUlNJc0lsQWlMQ0pKSWl3aWF5SXNJa3dpTENKRUlpd2lRaUlzSWtnaUxDSnViM2NpTENKSElpd2lkRzkxWTJobGN5SXNJbk4wWVhKMFdDSXNJbk4wWVhKMFdTSXNJbU4xY25KbGJuUllJaXdpWTNWeWNtVnVkRmtpTENKa2FXWm1JaXdpV0NJc0lrRWlMQ0owZVhCbElpd2lkMmhwWTJnaUxDSjBZWEpuWlhSVWIzVmphR1Z6SWl3aWNHRm5aVmdpTENKd1lXZGxXU0lzSW5OM2FYQmxSR2x5WldOMGFXOXVJaXdpWW14MWNpSXNJbkJ5WlhabGJuUmxaRUo1VG1WemRHVmtVM2RwY0dWeUlpd2lZWFJoYmpJaUxDSlFTU0lzSW5SeWFXZG5aWElpTENKd2IzY2lMQ0p3YjNOcGRHbHZiaUlzSW5ScGJXVWlMQ0owYjJkbmJHVkRiR0Z6Y3lJc0luQnZjQ0lzSW05dVZISmhibk5wZEdsdmJsTjBZWEowSWl3aWIyNVVjbUZ1YzJsMGFXOXVSVzVrSWl3aWJIUmxTVVU1SWl3aWMyVjBTR2x6ZEc5eWVTSXNJbk5sZEVoaGMyZ2lMQ0pqYkdsbGJuUk1aV1owSWl3aVgzTnNhV1JsVUhKbGRpSXNJbVJwYzJGaWJHVlViM1ZqYUVOdmJuUnliMndpTENKbGJtRmliR1ZVYjNWamFFTnZiblJ5YjJ3aUxDSmxabVpsWTNSeklpd2ljMlYwVkhKaGJuTnBkR2x2YmlJc0luTmxkRlJ5WVc1emJHRjBaU0lzSW1kbGRGUnlZVzV6YkdGMFpTSXNJbWRsZEVOdmJYQjFkR1ZrVTNSNWJHVWlMQ0pYWldKTGFYUkRVMU5OWVhSeWFYZ2lMQ0ozWldKcmFYUlVjbUZ1YzJadmNtMGlMQ0p6Y0d4cGRDSXNJbTFoY0NJc0lrMXZlbFJ5WVc1elptOXliU0lzSWs5VWNtRnVjMlp2Y20waUxDSk5jMVJ5WVc1elptOXliU0lzSW0xelZISmhibk5tYjNKdElpd2laMlYwVUhKdmNHVnlkSGxXWVd4MVpTSXNJblJ2VTNSeWFXNW5JaXdpYlRReElpd2liVFF5SWl3aWFXNXBkRTlpYzJWeWRtVnljeUlzSW1ScGMyTnZibTVsWTNSUFluTmxjblpsY25NaUxDSmthWE5qYjI1dVpXTjBJaXdpWTNKbFlYUmxURzl2Y0NJc0luSmxiVzkyWlNJc0ltRndjR1Z1WkNJc0ltTnNiMjVsVG05a1pTSXNJbkJ5WlhCbGJtUWlMQ0p5WlcxdmRtVkJkSFJ5SWl3aVlYQndaVzVrVTJ4cFpHVWlMQ0p3Y21Wd1pXNWtVMnhwWkdVaUxDSnlaVzF2ZG1WVGJHbGtaU0lzSW5KbGJXOTJaVUZzYkZOc2FXUmxjeUlzSW05d1lXTnBkSGtpTENKNlNXNWtaWGdpTENKeWIzVnVaQ0lzSW5OcGJpSXNJbU52Y3lJc0ltbHpVMkZtWVhKcElpd2lhWE5WYVZkbFlsWnBaWGNpTENKd1pYSnpjR1ZqZEdsMlpVOXlhV2RwYmlJc0ltbHVhWFJwWVd4SmJXRm5aVXh2WVdSbFpDSXNJbXh2WVdSSmJXRm5aVWx1VTJ4cFpHVWlMQ0poWkdRaUxDSnBjMVJ2ZFdOb1pXUWlMQ0p6WlhSRWNtRm5VRzl6YVhScGIyNGlMQ0pqYkdsbGJuUllJaXdpWTJ4cFpXNTBXU0lzSW5SeVlXTnJJaXdpWkhKaFoxTnBlbVVpTENKdGIzWmxSR2wyYVdSbGNpSXNJbVJ5WVdkVGRHRnlkQ0lzSW1SeVlXZFVhVzFsYjNWMElpd2laSEpoWnlJc0ltUnlZV2ROYjNabElpd2laSEpoWjBWdVpDSXNJbVJ5WVdkbllXSnNaVVYyWlc1MGN5SXNJbVZ1WVdKc1pVUnlZV2RuWVdKc1pTSXNJbTl1SWl3aVpHbHpZV0pzWlVSeVlXZG5ZV0pzWlNJc0ltOW1aaUlzSW5SeVlXTnJVMmw2WlNJc0ltOW1abk5sZEZkcFpIUm9JaXdpWkdsMmFXUmxjaUlzSW1ScGMzQnNZWGtpTENKTWFXNWxZWEpUY0d4cGJtVWlMQ0pzWVhOMFNXNWtaWGdpTENKcGJuUmxjbkJ2YkdGMFpTSXNJbWRsZEVsdWRHVnljRzlzWVhSbFJuVnVZM1JwYjI0aUxDSkJjbkpoZVNJc0ltbHpRWEp5WVhraUxDSnZia2hoYzJoRFlXNW5aU0lzSW14dlkyRjBhVzl1SWl3aWFHRnphQ0lzSW1sdWFYUnBZV3hwZW1Wa0lpd2lhVzVwZENJc0ltUmxjM1J5YjNraUxDSndkWE5vVTNSaGRHVWlMQ0p3WVhSb2N5SXNJbWRsZEZCaGRHaFdZV3gxWlhNaUxDSnJaWGtpTENKMllXeDFaU0lzSW5OamNtOXNiRlJ2VTJ4cFpHVWlMQ0poWkdSRmRtVnVkRXhwYzNSbGJtVnlJaXdpYzJWMFNHbHpkRzl5ZVZCdmNGTjBZWFJsSWl3aWNHRjBhRzVoYldVaUxDSnpiR2xqWlNJc0luTnNkV2RwWm5raUxDSnBibU5zZFdSbGN5SXNJbVJwYzJGaWJHVkxaWGxpYjJGeVpFTnZiblJ5YjJ3aUxDSmxibUZpYkdWTFpYbGliMkZ5WkVOdmJuUnliMndpTENKbGRtVnVkQ0lzSW5WelpYSkJaMlZ1ZENJc0ltTnlaV0YwWlVWc1pXMWxiblFpTENKelpYUkJkSFJ5YVdKMWRHVWlMQ0p2Ym5kb1pXVnNJaXdpYVcxd2JHVnRaVzUwWVhScGIyNGlMQ0pvWVhOR1pXRjBkWEpsSWl3aVpHbHpZV0pzWlUxdmRYTmxkMmhsWld4RGIyNTBjbTlzSWl3aVpXNWhZbXhsVFc5MWMyVjNhR1ZsYkVOdmJuUnliMndpTENKelkyRnNaU0lzSW1OMWNuSmxiblJUWTJGc1pTSXNJbWx6VTJOaGJHbHVaeUlzSW1kbGMzUjFjbVVpTENKemJHbGtaU0lzSW5Oc2FXUmxWMmxrZEdnaUxDSnpiR2xrWlVobGFXZG9kQ0lzSW1sdFlXZGxJaXdpYVcxaFoyVlhjbUZ3SWl3aWFYTk5iM1psWkNJc0ltMXBibGdpTENKdGFXNVpJaXdpYldGNFdDSXNJbTFoZUZraUxDSjBiM1ZqYUdWelUzUmhjblFpTENKMGIzVmphR1Z6UTNWeWNtVnVkQ0lzSW5CeVpYWlFiM05wZEdsdmJsZ2lMQ0p3Y21WMlVHOXphWFJwYjI1Wklpd2ljSEpsZGxScGJXVWlMQ0puWlhSRWFYTjBZVzVqWlVKbGRIZGxaVzVVYjNWamFHVnpJaXdpYzNGeWRDSXNJbTl1UjJWemRIVnlaVk4wWVhKMElpd2laMlZ6ZEhWeVpYTWlMQ0p6WTJGc1pWTjBZWEowSWl3aWNHRnlaVzUwSWl3aWIyNUhaWE4wZFhKbFEyaGhibWRsSWl3aWMyTmhiR1ZOYjNabElpd2liMjVIWlhOMGRYSmxSVzVrSWl3aVkyaGhibWRsWkZSdmRXTm9aWE1pTENKdmN5SXNJblJ2WjJkc1pWcHZiMjBpTENKZmNHeDFaMmx1Y3lJc0lsa2lMQ0p3YkhWbmFXNXpJaXdpVHlJc0ltTmhiR3hRYkhWbmFXNXpJaXdpWVhKbmRXMWxiblJ6SWl3aVpXMXBkSFJsY2tWMlpXNTBUR2x6ZEdWdVpYSnpJaXdpYzNCc2FXTmxJaXdpYjI1alpTSXNJbTFoYTJWR2IyTjFjMkZpYkdVaUxDSmhaR1JTYjJ4bElpd2lZV1JrVEdGaVpXd2lMQ0p1YjNScFpua2lMQ0pqYkdsamF5SXNJbXhwZG1WU1pXZHBiMjRpTENKb1lYTm9ibUYyVW1Wd2JHRmpaVk4wWVhSbElpd2lZMnhsWVc1MWNGTjBlV3hsY3lJc0luSmxiVzkyWlVWMlpXNTBUR2x6ZEdWdVpYSWlMQ0p3Y205MGIzUjVjR1VpTENKMFpYTjBJaXdpVDJKcVpXTjBJaXdpWVhCd2JIa2lMQ0pwWlZSdmRXTm9JaXdpYlhOTllYaFViM1ZqYUZCdmFXNTBjeUlzSW0xaGVGUnZkV05vVUc5cGJuUnpJaXdpYVc1dVpYSklWRTFNSWl3aVoyVjBSV3hsYldWdWRITkNlVlJoWjA1aGJXVWlMQ0p0WVhSamFDSXNJazF2WkdWeWJtbDZjaUlzSWtSdlkzVnRaVzUwVkc5MVkyZ2lMQ0pqYzNOMGNtRnVjMlp2Y20xek0yUWlMQ0prWldacGJtVlFjbTl3WlhKMGVTSXNJbWRsZENJc0luUnlhVzBpTENKamFHbHNaRTV2WkdWeklpd2ljWFZsY25sVFpXeGxZM1J2Y2tGc2JDSXNJbWRsZEVWc1pXMWxiblJDZVVsa0lpd2lZMnhoYzNOTWFYTjBJaXdpWTI5dWRHRnBibk1pTENKMGIyZG5iR1VpTENKeVpXMXZkbVZCZEhSeWFXSjFkR1VpTENKa2IyMDNSV3hsYldWdWRFUmhkR0ZUZEc5eVlXZGxJaXdpZDJWaWEybDBWSEpoYm5OcGRHbHZia1IxY21GMGFXOXVJaXdpVFhOVWNtRnVjMmwwYVc5dVJIVnlZWFJwYjI0aUxDSnRjMVJ5WVc1emFYUnBiMjVFZFhKaGRHbHZiaUlzSWsxdmVsUnlZVzV6YVhScGIyNUVkWEpoZEdsdmJpSXNJazlVY21GdWMybDBhVzl1UkhWeVlYUnBiMjRpTENKMGNtRnVjMmwwYVc5dVJIVnlZWFJwYjI0aUxDSmpZV3hzSWl3aVpHOXROMHhwZG1WTWFYTjBaVzVsY25NaUxDSnNhWE4wWlc1bGNpSXNJbXhwZG1WTWFYTjBaVzVsY2lJc0lrTjFjM1J2YlVWMlpXNTBJaXdpWW5WaVlteGxjeUlzSW1OaGJtTmxiR0ZpYkdVaUxDSmpjbVZoZEdWRmRtVnVkQ0lzSW1sdWFYUkZkbVZ1ZENJc0ltUnBjM0JoZEdOb1JYWmxiblFpTENKblpYUkNiM1Z1WkdsdVowTnNhV1Z1ZEZKbFkzUWlMQ0ppYjJSNUlpd2lZMnhwWlc1MFZHOXdJaXdpYzJOeWIyeHNWRzl3SWl3aWRHVjRkRU52Ym5SbGJuUWlMQ0p0WVhSamFHVnpJaXdpZDJWaWEybDBUV0YwWTJobGMxTmxiR1ZqZEc5eUlpd2liVzk2VFdGMFkyaGxjMU5sYkdWamRHOXlJaXdpYlhOTllYUmphR1Z6VTJWc1pXTjBiM0lpTENKd2NtVjJhVzkxYzFOcFlteHBibWNpTENKbWFYSnpkRU5vYVd4a0lpd2lZWEJ3Wlc1a1EyaHBiR1FpTENKcGJuTmxjblJDWldadmNtVWlMQ0p3WVhKbGJuUk9iMlJsSWl3aWFXNXpaWEowUVdaMFpYSWlMQ0p1WlhoMFUybGliR2x1WnlJc0ltNWxlSFJGYkdWdFpXNTBVMmxpYkdsdVp5SXNJbTVsZUhSQmJHd2lMQ0p3Y21WMmFXOTFjMFZzWlcxbGJuUlRhV0pzYVc1bklpd2ljSEpsZGtGc2JDSXNJblZ1YVhGMVpTSXNJbkpsYlc5MlpVTm9hV3hrSWl3aVptNGlMQ0pUZDJsd1pYSWlMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJaXdpWkdWbWFXNWxJaXdpWVcxa0lsMHNJbTFoY0hCcGJtZHpJam9pT3pzN08wRkJRVUU3T3pzN096czdPenM3T3pzN08wRkJZMEVzUTBGQlF5eFpRVUZWTzBGQlFVTTdRVUZCWVN4TlFVRkpRU3hEUVVGS08wRkJRVUVzVFVGQlRVTXNTVUZCUlN4VFFVRkdRU3hEUVVGRkxFTkJRVk5ETEVOQlFWUXNSVUZCVjBNc1EwRkJXQ3hGUVVGaE8wRkJRVU1zWVVGQlUwTXNRMEZCVkN4RFFVRlhTaXhEUVVGWUxFVkJRV0U3UVVGQlF5eGhRVUZQU3l4TFFVRkxReXhMUVVGTUxFTkJRVmRPTEVOQlFWZ3NRMEZCVUR0QlFVRnhRaXhqUVVGVFR5eERRVUZVTEVkQlFWazdRVUZCUXl4VlFVRkpVQ3hKUVVGRlVTeEZRVUZGUXl4TlFVRkdMRU5CUVZORExGRkJRV1k3UVVGQlFTeFZRVUYzUWxRc1NVRkJSVThzUlVGQlJVY3NUVUZCUml4RFFVRlRReXhGUVVGVUxFTkJRVmxLTEVWQlFVVkxMRmRCUVdRc1EwRkJNVUlzUTBGQmNVUmFMRVZCUVVWaExFbEJRVVlzUTBGQlR5eHpRa0ZCVUN4TlFVRnBRMlFzU1VGQlJVTXNSVUZCUldFc1NVRkJSaXhEUVVGUExITkNRVUZRTEV0QlFXZERUaXhGUVVGRlF5eE5RVUZHTEVOQlFWTkRMRkZCUVRWRkxFZEJRWE5HUml4RlFVRkZUeXhwUWtGQlJpeEhRVUZ2UWtNc1YwRkJWeXhaUVVGVk8wRkJRVU5TTEZWQlFVVkRMRTFCUVVZc1EwRkJVMUVzU1VGQlZDeEpRVUZsVkN4RlFVRkZWU3hQUVVGR0xFbEJRVmxXTEVWQlFVVlhMRlZCUVVZc1JVRkJXaXhGUVVFeVFsZ3NSVUZCUlZrc1NVRkJSaXhEUVVGUExGbEJRVkFzUlVGQmIwSmFMRU5CUVhCQ0xFTkJRVEZETEVsQlFXdEZRU3hGUVVGRllTeExRVUZHTEVkQlFWRnNRaXhGUVVGRmJVSXNhMEpCUVVZc1IwRkJjVUprTEVWQlFVVmxMRmxCUVVZc1JVRkJja0lzU1VGQmRVTm1MRVZCUVVWblFpeFJRVUZHTEVOQlFWY3NRMEZCV0N4SFFVRmphRUlzUlVGQlJWa3NTVUZCUml4RFFVRlBMRmxCUVZBc1JVRkJiMEphTEVOQlFYQkNMRU5CUVhKRUxFTkJRVklzU1VGQmMwWkJMRVZCUVVWWExGVkJRVVlzU1VGQlpWZ3NSVUZCUlZrc1NVRkJSaXhEUVVGUExGbEJRVkFzUlVGQmIwSmFMRU5CUVhCQ0xFTkJRWEpITEVOQlFXeEZPMEZCUVN0TUxFOUJRWEpPTEVWQlFYTk9VaXhEUVVGMFRpeERRVUV4Unp0QlFVRnRWU3hqUVVGVGVVSXNRMEZCVkN4RFFVRlhlRUlzUTBGQldDeEZRVUZoZVVJc1EwRkJZaXhGUVVGbE8wRkJRVU1zVlVGQlNYaENMRWxCUVVWR0xFVkJRVVZETEVWQlFVVXdRaXhOUVVGS0xFTkJRVTRzUTBGQmEwSXNTVUZCUnl4RFFVRkRla0lzUlVGQlJUQkNMRVZCUVVZc1EwRkJTMFlzUTBGQlRDeERRVUZLTEVWQlFWa3NTVUZCUnl4WlFVRlZMRTlCUVU5QkxFTkJRWEJDTEVWQlFYTkNlRUlzU1VGQlJVRXNSVUZCUlRKQ0xFOUJRVVlzUTBGQlZVZ3NRMEZCVml4RFFVRkdMRU5CUVhSQ0xFdEJRVEJETEVsQlFVZEJMRVZCUVVWSkxGRkJRVXdzUlVGQll6dEJRVUZETEZsQlFVa3pRaXhEUVVGS0xFTkJRVTBzVDBGQlQwUXNSVUZCUlRKQ0xFOUJRVVlzUjBGQldVVXNTVUZCV2l4RFFVRnBRaXhWUVVGVEwwSXNRMEZCVkN4RlFVRlhReXhEUVVGWUxFVkJRV0U3UVVGQlEwRXNaMEpCUVVsNVFpeERRVUZLTEV0QlFWRjJRaXhKUVVGRmRVSXNRMEZCVmp0QlFVRmhMRk5CUVRWRExFZEJRVGhEZGtJc1NVRkJSWFZDTEVOQlFVWXNSMEZCU1N4TFFVRkxMRU5CUVRsRU8wRkJRV2RGTEZkQlFVY3NUVUZCU1hoQ0xFVkJRVVU0UWl4TlFVRlVMRVZCUVdkQ0xFOUJRVTg1UWl4RlFVRkZMRU5CUVVZc1EwRkJVRHRCUVVGWkxHTkJRVk1yUWl4RFFVRlVMRU5CUVZkcVF5eERRVUZZTEVWQlFXRkRMRU5CUVdJc1JVRkJaVHRCUVVGRFFTeFZRVUZGUVN4TFFVRkhMRVZCUVV3c1EwRkJVU3hKUVVGSmVVSXNTVUZCUlZFc1QwRkJUME1zWjBKQlFWQXNTVUZCZVVKRUxFOUJRVTlGTEhOQ1FVRjBRenRCUVVGQkxGVkJRVFpFYkVNc1NVRkJSU3hKUVVGSmQwSXNRMEZCU2l4RFFVRk5MRlZCUVZNeFFpeERRVUZVTEVWQlFWYzdRVUZCUTBFc1ZVRkJSWEZETEU5QlFVWXNRMEZCVlN4VlFVRlRja01zUTBGQlZDeEZRVUZYTzBGQlFVTlJMRmxCUVVVNFFpeFJRVUZHTEVOQlFWY3NRMEZCUXl4RFFVRmFMRWRCUVdVNVFpeEZRVUZGV1N4SlFVRkdMRU5CUVU4c2EwSkJRVkFzUlVGQk1FSmFMRU5CUVRGQ0xFVkJRVFJDVWl4RFFVRTFRaXhEUVVGbU8wRkJRVGhETEZOQlFYQkZPMEZCUVhORkxFOUJRWGhHTEVOQlFTOUVMRU5CUVhsS1JTeEZRVUZGY1VNc1QwRkJSaXhEUVVGVmRrTXNRMEZCVml4RlFVRlpMRVZCUVVOM1F5eFpRVUZYTEV0QlFVc3NRMEZCVEN4TFFVRlRka01zUlVGQlJYVkRMRlZCUVZnc1NVRkJkVUoyUXl4RlFVRkZkVU1zVlVGQmNrTXNSVUZCWjBSRExGZEJRVlVzUzBGQlN5eERRVUZNTEV0QlFWTjRReXhGUVVGRmQwTXNVMEZCV0N4SlFVRnpRbmhETEVWQlFVVjNReXhUUVVGc1JpeEZRVUUwUmtNc1pVRkJZeXhMUVVGTExFTkJRVXdzUzBGQlUzcERMRVZCUVVWNVF5eGhRVUZZTEVsQlFUQkNla01zUlVGQlJYbERMR0ZCUVhSSkxFVkJRVm9zUjBGQmEwdHNReXhGUVVGRmJVTXNVMEZCUml4RFFVRlpReXhKUVVGYUxFTkJRV2xDTVVNc1EwRkJha0lzUTBGQmJFczdRVUZCYzB3c1kwRkJVekpETEVOQlFWUXNRMEZCVnpkRExFTkJRVmdzUlVGQllUdEJRVUZEUVN4UlFVRkZPRU1zWVVGQlJpeExRVUZyUWpsRExFbEJRVVZCTEVWQlFVVTRReXhoUVVGMFFpeEZRVUZ4UXl4SlFVRkpOME1zU1VGQlJVUXNSVUZCUlN0RExFOUJRVVlzU1VGQlZ5OURMRVZCUVVWblJDeFJRVUZ1UWl4RFFVRTBRaXhKUVVGSExFTkJRVU40UXl4RlFVRkZReXhOUVVGR0xFTkJRVk4zUXl4blFrRkJWaXhMUVVFMlFucERMRVZCUVVVd1F5eFpRVUZHTEUxQlFXdENMRTlCUVV0cVJDeERRVUYyUWl4SlFVRXdRaXhEUVVGRFR5eEZRVUZGTUVNc1dVRkJSaXhGUVVGRUxFbEJRVzFDTEU5QlFVdHFSQ3hEUVVFdlJTeERRVUZJTEVWQlFYRkdMRTlCUVUwc1EwRkJReXhEUVVGUUxFTkJRVk1zU1VGQlJ5eERRVUZEVHl4RlFVRkZReXhOUVVGR0xFTkJRVk13UXl4blFrRkJWaXhMUVVFMlFqTkRMRVZCUVVVd1F5eFpRVUZHTEUxQlFXdENMRTlCUVV0cVJDeERRVUYyUWl4SlFVRXdRaXhEUVVGRFR5eEZRVUZGTUVNc1dVRkJSaXhGUVVGRUxFbEJRVzFDTEU5QlFVdHFSQ3hEUVVFdlJTeERRVUZJTEVWQlFYRkdMRTlCUVUwc1EwRkJReXhEUVVGUUxFTkJRVk1zU1VGQlJ5eEZRVUZGUkN4RlFVRkZiMFFzVVVGQlJpeEpRVUZaY0VRc1JVRkJSWEZFTEUxQlFXUXNTVUZCYzBKeVJDeEZRVUZGYzBRc1QwRkJlRUlzU1VGQmFVTjBSQ3hGUVVGRmRVUXNUMEZCYmtNc1NVRkJORU5ETEZOQlFWTkRMR0ZCUVZRc1NVRkJkMEpFTEZOQlFWTkRMR0ZCUVZRc1EwRkJkVUpETEZGQlFTOURMRXRCUVRCRUxGbEJRVlZHTEZOQlFWTkRMR0ZCUVZRc1EwRkJkVUpETEZGQlFYWkNMRU5CUVdkRFF5eFhRVUZvUXl4RlFVRldMRWxCUVhsRUxHVkJRV0ZJTEZOQlFWTkRMR0ZCUVZRc1EwRkJkVUpETEZGQlFYWkNMRU5CUVdkRFF5eFhRVUZvUXl4RlFVRm9TU3hEUVVFNVF5eERRVUZJTEVWQlFXbFBPMEZCUVVNc1dVRkJSeXhQUVVGTE1VUXNRMEZCVEN4SlFVRlJMRTlCUVV0QkxFTkJRV0lzU1VGQlowSXNUMEZCUzBFc1EwRkJja0lzU1VGQmQwSXNUMEZCUzBFc1EwRkJhRU1zUlVGQmEwTTdRVUZCUXl4alFVRkplVUlzU1VGQlJTeERRVUZETEVOQlFWQXNRMEZCVXl4SlFVRkhiRUlzUlVGQlJXOUVMRk5CUVVZc1EwRkJXUzlDTEU5QlFWb3NRMEZCYjBJc1RVRkJTWEpDTEVWQlFVVkRMRTFCUVVZc1EwRkJVMjlFTEZWQlFXcERMRVZCUVRaRE4wSXNUVUZCTjBNc1IwRkJiMFFzUTBGQmNFUXNTVUZCZFVRc1RVRkJTWGhDTEVWQlFVVnZSQ3hUUVVGR0xFTkJRVmt2UWl4UFFVRmFMRU5CUVc5Q0xFMUJRVWx5UWl4RlFVRkZReXhOUVVGR0xFTkJRVk54UkN4blFrRkJha01zUlVGQmJVUTVRaXhOUVVGcVNDeEZRVUYzU0N4UFFVRlBMRWxCUVVrNVFpeEpRVUZGTEVWQlFVTTJSQ3hOUVVGTE4wSXNUMEZCVHpoQ0xGZEJRV0lzUlVGQmVVSkRMRXRCUVVrdlFpeFBRVUZQWjBNc1YwRkJjRU1zUlVGQlRqdEJRVUZCTEdOQlFYVkVMMFFzU1VGQlJTdENMRTlCUVU5cFF5eFZRVUZvUlR0QlFVRkJMR05CUVRKRkwwUXNTVUZCUlRoQ0xFOUJRVTlyUXl4WFFVRndSanRCUVVGQkxHTkJRV2RITjBRc1NVRkJSVU1zUlVGQlJXOUVMRk5CUVVZc1EwRkJXVk1zVFVGQldpeEZRVUZzUnl4RFFVRjFTRGRFTEVWQlFVVTRSQ3hIUVVGR0xFdEJRVkV2UkN4RlFVRkZkMFFzU1VGQlJpeEhRVUZQZUVRc1JVRkJSWGRFTEVsQlFVWXNSMEZCVDNaRUxFVkJRVVZ2UkN4VFFVRkdMRU5CUVZrc1EwRkJXaXhGUVVGbFZ5eFZRVUZ5UXl4RlFVRnBSQ3hMUVVGSkxFbEJRVWs1UXl4SlFVRkZMRU5CUVVNc1EwRkJRMnhDTEVWQlFVVjNSQ3hKUVVGSUxFVkJRVkY0UkN4RlFVRkZNRVFzUjBGQlZpeERRVUZFTEVWQlFXZENMRU5CUVVNeFJDeEZRVUZGZDBRc1NVRkJSaXhIUVVGUGRrUXNSVUZCUldkRkxFdEJRVllzUlVGQlowSnFSU3hGUVVGRk1FUXNSMEZCYkVJc1EwRkJhRUlzUlVGQmRVTXNRMEZCUXpGRUxFVkJRVVYzUkN4SlFVRklMRVZCUVZGNFJDeEZRVUZGTUVRc1IwRkJSaXhIUVVGTmVrUXNSVUZCUldsRkxFMUJRV2hDTEVOQlFYWkRMRVZCUVN0RUxFTkJRVU5zUlN4RlFVRkZkMFFzU1VGQlJpeEhRVUZQZGtRc1JVRkJSV2RGTEV0QlFWWXNSVUZCWjBKcVJTeEZRVUZGTUVRc1IwRkJSaXhIUVVGTmVrUXNSVUZCUldsRkxFMUJRWGhDTEVOQlFTOUVMRU5CUVU0c1JVRkJjMGQ0UXl4SlFVRkZMRU5CUVRWSExFVkJRVGhIUVN4SlFVRkZVaXhGUVVGRlR5eE5RVUZzU0N4RlFVRjVTRU1zUjBGQmVrZ3NSVUZCTmtnN1FVRkJReXhuUWtGQlNWa3NTVUZCUlhCQ0xFVkJRVVZSTEVOQlFVWXNRMEZCVGl4RFFVRlhXU3hGUVVGRkxFTkJRVVlzUzBGQlRUTkRMRVZCUVVVMlJDeEpRVUZTTEVsQlFXTnNRaXhGUVVGRkxFTkJRVVlzUzBGQlRUTkRMRVZCUVVVMlJDeEpRVUZHTEVkQlFVODFSQ3hEUVVFelFpeEpRVUU0UWpCRExFVkJRVVVzUTBGQlJpeExRVUZOTTBNc1JVRkJSU3RFTEVkQlFYUkRMRWxCUVRKRGNFSXNSVUZCUlN4RFFVRkdMRXRCUVUwelF5eEZRVUZGSzBRc1IwRkJSaXhIUVVGTk4wUXNRMEZCZGtRc1MwRkJNa1J6UWl4SlFVRkZMRU5CUVVNc1EwRkJPVVE3UVVGQmFVVXNaVUZCUnl4RFFVRkRRU3hEUVVGS0xFVkJRVTA3UVVGQlR5eFhRVUZGZDBJc1dVRkJSaXhOUVVGclFpeFBRVUZMYWtRc1EwRkJUQ3hKUVVGUkxFOUJRVXRCTEVOQlFXSXNTMEZCYVVKRUxFVkJRVVV3UlN4alFVRkdMRWRCUVdsQ01VVXNSVUZCUlRCRkxHTkJRVVlzUlVGQmFrSXNSMEZCYjBNeFJTeEZRVUZGTWtVc1YwRkJSaXhIUVVGakxFTkJRVU1zUTBGQmNFVXNSMEZCZFVVc1EwRkJReXhQUVVGTE1VVXNRMEZCVEN4SlFVRlJMRU5CUVVOUExFVkJRVVU0UkN4SFFVRllMRWxCUVdkQ0xFOUJRVXR5UlN4RFFVRk1MRWxCUVZGUExFVkJRVVU0UkN4SFFVRXpRaXhMUVVGcFF6bEVMRVZCUVVWdlJTeFRRVUZHTEVWQlFYaEhMRVZCUVhOSUxFTkJRVU1zVDBGQlN6TkZMRU5CUVV3c1NVRkJVU3hEUVVGRFR5eEZRVUZGT0VRc1IwRkJXQ3hKUVVGblFpeFBRVUZMY2tVc1EwRkJUQ3hKUVVGUlR5eEZRVUZGT0VRc1IwRkJNMElzUzBGQmFVTTVSQ3hGUVVGRmNVVXNVMEZCUml4RlFVRjZTeXhMUVVGNVRDeFBRVUZMTlVVc1EwRkJUQ3hKUVVGUkxFOUJRVXRCTEVOQlFXSXNTMEZCYVVKRUxFVkJRVVV3UlN4alFVRkdMRWRCUVdsQ01VVXNSVUZCUlRCRkxHTkJRVVlzUlVGQmFrSXNSMEZCYjBNeFJTeEZRVUZGTWtVc1YwRkJSaXhIUVVGakxFTkJRVU1zUTBGQmNFVXNSMEZCZFVVc1QwRkJTekZGTEVOQlFVd3NTVUZCVVU4c1JVRkJSVzlGTEZOQlFVWXNSVUZCTDBVc1JVRkJOa1lzVDBGQlN6TkZMRU5CUVV3c1NVRkJVVThzUlVGQlJYRkZMRk5CUVVZc1JVRkJPVklzUjBGQk5sTnlSU3hGUVVGRldTeEpRVUZHTEVOQlFVOHNXVUZCVUN4RlFVRnZRbG9zUTBGQmNFSXNSVUZCYzBKUUxFTkJRWFJDTEVOQlFUZFRPMEZCUVhOVk8wRkJRVU1zWTBGQlV6WkZMRU5CUVZRc1EwRkJWemxGTEVOQlFWZ3NSVUZCWVR0QlFVRkRMRlZCUVVsRExFbEJRVVVzUTBGQlRqdEJRVUZCTEZWQlFWRjVRaXhKUVVGRkxFTkJRVlk3UVVGQlFTeFZRVUZaZUVJc1NVRkJSU3hEUVVGa08wRkJRVUVzVlVGQlowSkRMRWxCUVVVc1EwRkJiRUlzUTBGQmIwSXNUMEZCVFN4WlFVRlhTQ3hEUVVGWUxFdEJRV1V3UWl4SlFVRkZNVUlzUlVGQlJTdEZMRTFCUVc1Q0xFZEJRVEpDTEdkQ1FVRmxMMFVzUTBGQlppeExRVUZ0UWpCQ0xFbEJRVVVzUTBGQlF6RkNMRVZCUVVWblJpeFZRVUZJTEVkQlFXTXNSMEZCYmtNc1EwRkJNMElzUlVGQmJVVXNhVUpCUVdkQ2FFWXNRMEZCYUVJc1MwRkJiMEl3UWl4SlFVRkZMRU5CUVVNeFFpeEZRVUZGYVVZc1YwRkJTQ3hIUVVGbExFZEJRWEpETEVOQlFXNUZMRVZCUVRaSExHbENRVUZuUW1wR0xFTkJRV2hDTEV0QlFXOUNReXhKUVVGRkxFTkJRVU5FTEVWQlFVVnJSaXhYUVVGSUxFZEJRV1VzUjBGQmNrTXNRMEZCTjBjc1JVRkJkVW9zVlVGQlUyeEdMRU5CUVZRc1NVRkJXVUVzUlVGQlJXMUdMRWxCUVVZc1MwRkJVMjVHTEVWQlFVVnZSaXhsUVVGMlFpeExRVUY1UTI1R0xFbEJRVVY1UWl4RFFVRkdMRVZCUVVsQkxFbEJRVVVzUTBGQkwwTXNRMEZCZGtvc1JVRkJlVTE0UWl4SlFVRkZMRXRCUVVkRUxFTkJRVGxOTEVWQlFXZE9SU3hKUVVGRkxFdEJRVWQxUWl4RFFVRnlUaXhGUVVGMVRpeFpRVUZYTVVJc1EwRkJXQ3hMUVVGbFJ5eEpRVUZGU0N4RlFVRkZjVVlzVFVGQmJrSXNRMEZCZGs0c1JVRkJhMUFzV1VGQlYzSkdMRU5CUVZnc1MwRkJaVVVzU1VGQlJVWXNSVUZCUlhOR0xFMUJRVzVDTEVOQlFXeFFMRVZCUVRaUkxFTkJRVU53Uml4TFFVRkhReXhEUVVGS0xFdEJRVkZJTEVWQlFVVjFSaXhUUVVGV0xFdEJRWE5DTEUxQlFVbDJSaXhGUVVGRmRVWXNVMEZCVGl4SlFVRnBRbkpHTEV0QlFVY3NSVUZCU0N4RlFVRk5ReXhMUVVGSExFVkJRVEZDTEV0QlFTdENSQ3hMUVVGSExFZEJRVWdzUlVGQlQwTXNTMEZCUnl4SFFVRjZReXhEUVVGMFFpeERRVUUzVVN4RlFVRnJWa1FzUzBGQlJ5eERRVUZEUkN4RFFVRktMRXRCUVZGQkxFbEJRVVZETEVsQlFVVXNRMEZCUml4SFFVRkpMRU5CUVVNc1EwRkJUQ3hIUVVGUExFTkJRV3BDTEVOQlFXeFdMRVZCUVhOWFF5eExRVUZITEVOQlFVTjFRaXhEUVVGS0xFdEJRVkZCTEVsQlFVVjJRaXhKUVVGRkxFTkJRVVlzUjBGQlNTeERRVUZETEVOQlFVd3NSMEZCVHl4RFFVRnFRaXhEUVVGMFZ5eEZRVUV3V0N4RlFVRkRjVVlzVDBGQlRYWkdMRU5CUVZBc1JVRkJVM2RHTEU5QlFVMHZSQ3hEUVVGbUxFVkJRV2xDWjBVc1VVRkJUM2hHTEVOQlFYaENMRVZCUVRCQ2VVWXNVVUZCVDNoR0xFTkJRV3BETEVWQlFXaFpPMEZCUVc5aExHTkJRVk41Uml4RFFVRlVMRU5CUVZjMVJpeERRVUZZTEVWQlFXRTdRVUZCUTBFc1VVRkJSVGhETEdGQlFVWXNTMEZCYTBJNVF5eEpRVUZGUVN4RlFVRkZPRU1zWVVGQmRFSXNSVUZCY1VNc1NVRkJTVGRETEVsQlFVVXNRMEZCVGp0QlFVRkJMRlZCUVZGNVFpeEpRVUZGYkVJc1JVRkJSVGhFTEVkQlFVWXNSMEZCVFN4RFFVRkRMRU5CUVZBc1IwRkJVeXhEUVVGdVFqdEJRVUZCTEZWQlFYRkNjRVVzU1VGQlJUUkZMRVZCUVVVNVJTeERRVUZHTEVOQlFYWkNMRU5CUVRSQ0xFbEJRVWRSTEVWQlFVVkRMRTFCUVVZc1EwRkJVMjlHTEhGQ1FVRmFPMEZCUVd0RExGbEJRVWR5Uml4RlFVRkZNRU1zV1VGQlJpeEZRVUZJTEVWQlFXOUNPMEZCUVVNc1kwRkJSeXhGUVVGRk4wTXNTMEZCUzNsR0xFZEJRVXdzUTBGQlV6VkdMRVZCUVVWM1JpeE5RVUZZTEVsQlFXMUNja1lzUzBGQlMzbEdMRWRCUVV3c1EwRkJVelZHTEVWQlFVVjVSaXhOUVVGWUxFTkJRWEpDTEVOQlFVZ3NSVUZCTkVNc1QwRkJUekZHTEVsQlFVVkRMRVZCUVVWM1JpeE5RVUZHTEVkQlFWTm9SU3hEUVVGWU8wRkJRV0VzVTBGQmNrWXNUVUZCZVVZN1FVRkJReXhqUVVGSExFVkJRVVZ5UWl4TFFVRkxlVVlzUjBGQlRDeERRVUZUTlVZc1JVRkJSWGxHTEUxQlFWZ3NTVUZCYlVKMFJpeExRVUZMZVVZc1IwRkJUQ3hEUVVGVE5VWXNSVUZCUlhkR0xFMUJRVmdzUTBGQmNrSXNRMEZCU0N4RlFVRTBReXhQUVVGUGVrWXNTVUZCUlVNc1JVRkJSWGxHTEUxQlFVbzdRVUZCVnp0QlFVRXhUQ3hoUVVFclRERkdMRWxCUVVWSkxFdEJRVXQ1Uml4SFFVRk1MRU5CUVZNMVJpeEZRVUZGZDBZc1RVRkJXQ3hKUVVGdFFuSkdMRXRCUVV0NVJpeEhRVUZNTEVOQlFWTTFSaXhGUVVGRmVVWXNUVUZCV0N4RFFVRnVRaXhIUVVGelF5eERRVUZEZWtZc1JVRkJSWGRHTEUxQlFVZ3NSMEZCVldoRkxFTkJRV2hFTEVkQlFXdEVMRU5CUVVONFFpeEZRVUZGZVVZc1RVRkJka1FzUTBGQk9FUXNTVUZCUnl4TlFVRkpNVVlzUTBGQlVDeEZRVUZUTzBGQlFVTXNXVUZCUjA4c1JVRkJSVU1zVFVGQlJpeERRVUZUYzBZc1owSkJRVlFzUzBGQk5FSTVSaXhKUVVGRkxFTkJRVU5CTEVOQlFTOUNMRWRCUVd0RFR5eEZRVUZGUXl4TlFVRkdMRU5CUVZOMVJpeFJRVUU1UXl4RlFVRjFSRHRCUVVGRExHTkJRVWszUml4SlFVRkZTeXhGUVVGRmVVWXNiVUpCUVVZc1MwRkJkMEpvUnl4SlFVRkZUeXhGUVVGRlF5eE5RVUZHTEVOQlFWTjVSaXh4UWtGQmVrTTdRVUZCUVN4alFVRXJSRGxHTEVsQlFVVkpMRVZCUVVVeVJpeFhRVUZ1UlR0QlFVRkJMR05CUVN0Rk5VWXNTVUZCUlVNc1JVRkJSV0VzUzBGQmJrWXNRMEZCZVVZc1NVRkJSMnhDTEV0QlFVZExMRVZCUVVVMFJpeFpRVUZHTEVWQlFVZ3NTMEZCYzBKcVJ5eEpRVUZGU3l4RlFVRkZORVlzV1VGQlJpeEZRVUY0UWl4SFFVRXdRMnBITEV0QlFVZExMRVZCUVVVMlJpeFpRVUZHTEVWQlFVZ3NTMEZCYzBKc1J5eEpRVUZGU3l4RlFVRkZOa1lzV1VGQlJpeEZRVUY0UWl4RFFVRXhReXhGUVVGdlJqZEdMRVZCUVVVNFJpeHZRa0ZCUml4RFFVRjFRaXhEUVVGMlFpeERRVUZ3Uml4RlFVRTRSemxHTEVWQlFVVXJSaXh0UWtGQlJpeERRVUZ6UW5CSExFTkJRWFJDTEVOQlFUbEhMRVZCUVhWSlN5eEZRVUZGWjBjc1kwRkJSaXhGUVVGMlNTeEZRVUV3U21oSExFVkJRVVZwUnl4cFFrRkJSaXhGUVVFeFNpeEZRVUZuVEN4RFFVRkRMRU5CUVVOeVJ5eERRVUZFTEVsQlFVbEpMRVZCUVVVeVJpeFhRVUZPTEVsQlFXMUNMRU5CUVVNMVJpeERRVUZFTEVsQlFVbERMRVZCUVVWaExFdEJRVEZDTEV0QlFXdERZaXhGUVVGRmEwY3NZVUZCUml4RlFVRnNUaXhGUVVGdlQyeEhMRVZCUVVWRExFMUJRVVlzUTBGQlUydEhMR05CUVZRc1NVRkJlVUpETEdGQlFXRndSeXhGUVVGRmNVY3NWVUZCUml4RFFVRmhReXhQUVVFeFFpeEhRVUZ0UTNSSExFVkJRVVZ4Unl4VlFVRkdMRU5CUVdGRExFOUJRV0lzUjBGQmNVSTVSaXhYUVVGWExGbEJRVlU3UVVGQlExSXNZMEZCUlhWSExGVkJRVVk3UVVGQlpTeFhRVUZ5UXl4RlFVRnpReXhIUVVGMFF5eERRVUZxUml4SlFVRTJTSFpITEVWQlFVVkRMRTFCUVVZc1EwRkJVM1ZITEZkQlFWUXNTVUZCYzBKNFJ5eEZRVUZGZVVjc1NVRkJlRUlzU1VGQk9FSjZSeXhGUVVGRmVVY3NTVUZCUml4RFFVRlBReXhKUVVGUUxFVkJRUzlZTEVWQlFUWlpNVWNzUlVGQlJWa3NTVUZCUml4RFFVRlBMRlZCUVZBc1JVRkJhMEphTEVOQlFXeENMRVZCUVc5Q1VpeERRVUZ3UWl4RFFVRTNXU3hGUVVGdllWRXNSVUZCUlVNc1RVRkJSaXhEUVVGVFF5eFJRVUZVTEVsQlFXMUNSaXhGUVVGRlF5eE5RVUZHTEVOQlFWTXdSeXcwUWtGQk5VSXNTVUZCTUVRelJ5eEZRVUZGWlN4WlFVRkdMRVZCUVRsa0xFVkJRU3RsTEUxQlFVbHdRaXhEUVVGS0xFbEJRVTlCTEUxQlFVbExMRVZCUVVVMlJpeFpRVUZHTEVWQlFUZG1MRVZCUVRoblFqdEJRVUZQTEZOQlFYUnhRaXhOUVVFd2NVSTdRVUZCUXl4alFVRkpMRWxCUVVsdVJTeFBRVUZQYTBZc1NVRkJXQ3hGUVVGRUxFTkJRV3RDUXl4UFFVRnNRaXhMUVVFMFFqZEhMRVZCUVVWeFJ5eFZRVUZHTEVOQlFXRlRMR05CUVhwRExFZEJRWGRFTEVWQlFUTkVMRVZCUVRoRUxFbEJRVWR5U0N4SlFVRkZMRU5CUVV3N1FVRkJUeXhuUWtGQlIwOHNSVUZCUldFc1MwRkJSaXhKUVVGVExFTkJRVU5pTEVWQlFVVkRMRTFCUVVZc1EwRkJVMUVzU1VGQmJrSXNTVUZCZVVKVUxFVkJRVVVyUnl4VFFVRTVRaXhGUVVGM1F6dEJRVUZETEd0Q1FVRkhMMGNzUlVGQlJVTXNUVUZCUml4RFFVRlRLMGNzZDBKQlFWb3NSVUZCY1VNc1QwRkJUU3hEUVVGRExFTkJRVkE3UVVGQlV5eGhRVUYyUml4TlFVRTBSbWhJTEVWQlFVVnZSU3hUUVVGR0xFbEJRV053UlN4RlFVRkZXU3hKUVVGR0xFTkJRVThzVlVGQlVDeEZRVUZyUWxvc1EwRkJiRUlzUlVGQmIwSlNMRU5CUVhCQ0xFTkJRV1E3UVVGQmJrY3NhVUpCUVRaSkxFbEJRVWRSTEVWQlFVVXlSaXhYUVVGR0xFbEJRV1VzUTBGQlF6TkdMRVZCUVVWRExFMUJRVVlzUTBGQlUxRXNTVUZCZWtJc1NVRkJLMEpVTEVWQlFVVXJSeXhUUVVGd1F5eEZRVUU0UXp0QlFVRkRMR2RDUVVGSEwwY3NSVUZCUlVNc1RVRkJSaXhEUVVGVEswY3NkMEpCUVZvc1JVRkJjVU1zVDBGQlRTeERRVUZETEVOQlFWQTdRVUZCVXl4WFFVRTNSaXhOUVVGclIyaElMRVZCUVVWeFJTeFRRVUZHTEVsQlFXTnlSU3hGUVVGRldTeEpRVUZHTEVOQlFVOHNWVUZCVUN4RlFVRnJRbG9zUTBGQmJFSXNSVUZCYjBKU0xFTkJRWEJDTEVOQlFXUXNRMEZCY1VOUkxFVkJRVVZ4Unl4VlFVRkdMRU5CUVdGVExHTkJRV0lzUjBGQk5rSXNTVUZCU1hCR0xFOUJRVTlyUml4SlFVRllMRVZCUVVRc1EwRkJhMEpETEU5QlFXeENMRVZCUVRWQ08wRkJRWGRFTEdkQ1FVRlBja2dzUlVGQlJUQkZMR05CUVVZc1IwRkJhVUl4UlN4RlFVRkZNRVVzWTBGQlJpeEZRVUZxUWl4SFFVRnZRekZGTEVWQlFVVXlSU3hYUVVGR0xFZEJRV01zUTBGQlF5eERRVUZ1UkN4RlFVRnhSQ3hEUVVGRExFTkJRVGRFTzBGQlFTdEVPMEZCUVVNc1kwRkJVemhETEVOQlFWUXNRMEZCVjNoSUxFTkJRVmdzUlVGQllYbENMRU5CUVdJc1JVRkJaVHRCUVVGRGVrSXNWVUZCUlVRc1JVRkJSVU1zUTBGQlJpeERRVUZHTEVOQlFVOHNTVUZCU1VNc1EwRkJTanRCUVVGQkxGVkJRVTFETEVOQlFVNDdRVUZCUVN4VlFVRlJReXhEUVVGU08wRkJRVUVzVlVGQlZVY3NTVUZCUlVNc1JVRkJSVGhFTEVkQlFVWXNSMEZCVFN4RFFVRkRMRU5CUVZBc1IwRkJVeXhEUVVGeVFpeERRVUYxUW5CRkxFbEJRVVZFTEVWQlFVVmhMRWxCUVVZc1EwRkJUeXh6UWtGQlVDeExRVUZuUXl4SFFVRnNReXhGUVVGelExZ3NTVUZCUlVZc1JVRkJSV0VzU1VGQlJpeERRVUZQTEhkQ1FVRlFMRU5CUVhoRExFVkJRWGxGVml4SlFVRkZTQ3hGUVVGRllTeEpRVUZHTEVOQlFVOHNkMEpCUVZBc1EwRkJNMFVzUlVGQk5FZFlMRXRCUVVkRExFTkJRVWdzU1VGQlRVUXNTVUZCUlVFc1MwRkJSeXhIUVVGTUxFVkJRVk5ETEVsQlFVVkJMRXRCUVVjc1IwRkJjRUlzU1VGQmVVSkpMRVZCUVVVd1F5eFpRVUZHTEUxQlFXdENMME1zU1VGQlJVUXNRMEZCUml4RlFVRkpSU3hKUVVGRkxFZEJRWGhDTEV0QlFUaENRU3hKUVVGRlJpeERRVUZHTEVWQlFVbERMRWxCUVVVc1IwRkJjRU1zUTBGQmNra3NSVUZCT0V0QkxFbEJRVVZCTEVWQlFVVjFTQ3hQUVVGR0xFTkJRVlVzUjBGQlZpeExRVUZuUWl4RFFVRm9RaXhIUVVGclFrTXNVMEZCVTNoSUxFTkJRVlFzUlVGQlZ5eEZRVUZZTEVsQlFXVjFRaXhEUVVGbUxFZEJRV2xDYmtJc1EwRkJha0lzUjBGQmJVSXNSMEZCY2tNc1IwRkJlVU5LTEVsQlFVVjFRaXhEUVVGR0xFZEJRVWx1UWl4RFFVRktMRWRCUVUwc1NVRkJMMDRzUlVGQmIwOUlMRWxCUVVWQkxFVkJRVVZ6U0N4UFFVRkdMRU5CUVZVc1IwRkJWaXhMUVVGblFpeERRVUZvUWl4SFFVRnJRa01zVTBGQlUzWklMRU5CUVZRc1JVRkJWeXhGUVVGWUxFbEJRV1Z6UWl4RFFVRm1MRWRCUVdsQ0xFZEJRVzVETEVkQlFYVkRkRUlzU1VGQlJYTkNMRU5CUVVZc1IwRkJTU3hKUVVGcVVpeEZRVUZ6VW5wQ0xFVkJRVVV5U0N4VFFVRkdMRU5CUVZrc2FVSkJRV1Y2U0N4RFFVRm1MRWRCUVdsQ0xFbEJRV3BDTEVkQlFYTkNReXhEUVVGMFFpeEhRVUYzUWl4UFFVRndReXhEUVVGMFVqdEJRVUZ0VlN4alFVRlRlVWdzUTBGQlZDeERRVUZYTjBnc1EwRkJXQ3hGUVVGaE8wRkJRVU1zWVVGQlR5eE5RVUZKUVN4RlFVRkZNRWdzVDBGQlJpeERRVUZWTEVsQlFWWXNRMEZCU2l4TFFVRnpRakZJTEVsQlFVVkJMRVZCUVVVc1EwRkJSaXhOUVVGUFFTeEZRVUZGTEVOQlFVWXNSVUZCU3poSUxGZEJRVXdzUlVGQlVDeEhRVUV3UWl4UFFVRkxPVWdzUlVGQlJTeERRVUZHTEVWQlFVczRTQ3hYUVVGTUxFVkJRVXdzUjBGQmQwSTVTQ3hGUVVGRkswZ3NVMEZCUml4RFFVRlpMRU5CUVZvc1EwRkJiRVFzUjBGQmFVVXNUMEZCU3k5SUxFTkJRVGxHTEVkQlFXbEhRU3hEUVVGNFJ6dEJRVUV3Unl4VFFVRkhMRVZCUVVVc1owSkJRV2RDUXl4RFFVRnNRaXhEUVVGSUxFVkJRWGRDTEU5QlFVOHNTVUZCU1VFc1EwRkJTaXhEUVVGTlF5eERRVUZPTEVWQlFWRkRMRU5CUVZJc1EwRkJVQ3hEUVVGclFpeEpRVUZKTmtnc1NVRkJSU3hGUVVGRFF5eFhRVUZWTEZsQlFWZ3NSVUZCZDBKRExHMUNRVUZyUWl4WFFVRXhReXhGUVVGelJFTXNZMEZCWVN4RFFVRnVSU3hGUVVGeFJVTXNUMEZCVFN4SFFVRXpSU3hGUVVFclJURklMRlZCUVZNc1EwRkJReXhEUVVGNlJpeEZRVUV5Um5sSExEaENRVUUyUWl4RFFVRkRMRU5CUVhwSUxFVkJRVEpJTjBZc2IwSkJRVzFDTEVOQlFVTXNRMEZCTDBrc1JVRkJhVW9yUnl4MVFrRkJjMElzUTBGQlF5eERRVUY0U3l4RlFVRXdTME1zZFVKQlFYTkNMRVZCUVdoTkxFVkJRVzFOZEVNc1ZVRkJVeXhEUVVGRExFTkJRVGROTEVWQlFTdE5kVU1zYTBKQlFXbENMRU5CUVVNc1EwRkJhazhzUlVGQmJVOURMSFZDUVVGelFpeERRVUY2VUN4RlFVRXlVRU1zZDBKQlFYVkNMRU5CUVVNc1EwRkJibElzUlVGQmNWSkRMRFpDUVVFMFFpeERRVUZxVkN4RlFVRnRWRU1zSzBKQlFUaENMRU5CUVdwV0xFVkJRVzFXYUVNc1owSkJRV1VzUTBGQlF5eERRVUZ1Vnl4RlFVRnhWMmxETEhsQ1FVRjNRaXhIUVVFM1dDeEZRVUZwV1VNc1dVRkJWeXhEUVVGRExFTkJRVGRaTEVWQlFTdFpReXhuUWtGQlpTeERRVUZETEVOQlFTOWFMRVZCUVdsaFF5eHJRa0ZCYVVJc1EwRkJReXhEUVVGdVlpeEZRVUZ4WWtNc1VVRkJUeXhQUVVFMVlpeEZRVUZ2WTBNc1YwRkJWU3hGUVVGRFF5eFJRVUZQTEVWQlFWSXNSVUZCVjBNc1UwRkJVU3hEUVVGdVFpeEZRVUZ4UWtNc1QwRkJUU3hIUVVFelFpeEZRVUVyUWtNc1ZVRkJVeXhEUVVGNFF5eEZRVUV3UTBNc1kwRkJZU3hEUVVGRExFTkJRWGhFTEVWQlFUbGpMRVZCUVhsblFrTXNUVUZCU3l4RlFVRkRSQ3hqUVVGaExFTkJRVU1zUTBGQlppeEZRVUZwUWtVc1pVRkJZeXhEUVVGRExFTkJRV2hETEVWQlFUbG5RaXhGUVVGcGFrSkRMRTFCUVVzc1JVRkJRMGdzWTBGQllTeERRVUZETEVOQlFXWXNSVUZCYVVKSkxGRkJRVThzUTBGQlF5eERRVUY2UWl4RlFVRXlRa01zWTBGQllTeEZRVUY0UXl4RlFVRXlRME1zWVVGQldTeEhRVUYyUkN4RlFVRjBha0lzUlVGQmEyNUNReXhOUVVGTExFVkJRVU5ETEZkQlFWVXNRMEZCUXl4RFFVRmFMRVZCUVhadVFpeEZRVUZ6YjBKRExGVkJRVk1zUTBGQlF5eERRVUZvY0VJc1JVRkJhM0JDUXl4TlFVRkxMRU5CUVVNc1EwRkJlSEJDTEVWQlFUQndRa01zVTBGQlVTeERRVUZzY1VJc1JVRkJiM0ZDUXl4VFFVRlJMRU5CUVRWeFFpeEZRVUU0Y1VKRExGbEJRVmNzUTBGQlF5eERRVUV4Y2tJc1JVRkJOSEpDUXl4WFFVRlZMRWxCUVhSelFpeEZRVUV5YzBKRExHVkJRV01zUTBGQlF5eERRVUV4ZEVJc1JVRkJOSFJDUXl4dlFrRkJiVUlzUTBGQlF5eERRVUZvZGtJc1JVRkJhM1pDUXl4M1FrRkJkVUlzUTBGQlF5eERRVUV4ZDBJc1JVRkJOSGRDUXl4cFFrRkJaMElzUTBGQlF5eERRVUUzZUVJc1JVRkJLM2hDUXl4dFFrRkJhMElzUTBGQlF5eERRVUZzZWtJc1JVRkJiM3BDYWtRc01FSkJRWGxDTEVOQlFVTXNRMEZCT1RCQ0xFVkJRV2N4UW5wQ0xHdENRVUZwUWl4RFFVRkRMRU5CUVd3eVFpeEZRVUZ2TWtKR0xIVkNRVUZ6UWl4RFFVRkRMRU5CUVRNelFpeEZRVUUyTTBKTExIVkNRVUZ6UWl4RFFVRnVOVUlzUlVGQmNUVkNkMFVzZDBKQlFYVkNMRmRCUVRVMlFpeEZRVUYzTjBKRExGTkJRVkVzUTBGQlF5eERRVUZxT0VJc1JVRkJiVGhDUXl4dFFrRkJhMElzUTBGQlF5eERRVUYwT1VJc1JVRkJkemxDUXl4VFFVRlJMRU5CUVVNc1EwRkJhaXRDTEVWQlFXMHJRa01zWTBGQllTeERRVUZETEVOQlFXb3ZRaXhGUVVGdEwwSkRMR0ZCUVZrc1MwRkJTeXhEUVVGd1owTXNSVUZCYzJkRFF5eGpRVUZoTEVOQlFXNW9ReXhGUVVGeGFFTkRMR1ZCUVdNc1EwRkJibWxETEVWQlFYRnBRME1zYVVKQlFXZENMRU5CUVhKcVF5eEZRVUYxYWtORExIRkNRVUZ2UWl4UlFVRXphME1zUlVGQmIyeERReXhuUWtGQlpTeERRVUZ1YlVNc1JVRkJjVzFEUXl4blFrRkJaU3hEUVVGRExFTkJRWEp1UXl4RlFVRjFia05ETEc5Q1FVRnRRaXhEUVVFeGIwTXNSVUZCTkc5RFF5eHRRa0ZCYTBJc1EwRkJPWEJETEVWQlFXZHhRME1zWTBGQllTeERRVUZETEVOQlFUbHhReXhGUVVGbmNrTkRMRmxCUVZjc1EwRkJNM0pETEVWQlFUWnlRME1zV1VGQlZ5eEZRVUY0YzBNc1JVRkJNbk5EUXl4bFFVRmpMRU5CUVVNc1EwRkJNWFJETEVWQlFUUjBRME1zWVVGQldTeERRVUZETEVOQlFYcDFReXhGUVVFeWRVTkRMRmxCUVZjc1EwRkJReXhEUVVGMmRrTXNSVUZCZVhaRFF5eHBRa0ZCWjBJc1JVRkJlbmRETEVWQlFUUjNRME1zWTBGQllTeEhRVUY2ZUVNc1JVRkJObmhEUXl4alFVRmhMRU5CUVVNc1EwRkJNM2xETEVWQlFUWjVRME1zWTBGQllTeERRVUZETEVOQlFUTjZReXhGUVVFMmVrTkRMRmRCUVZVc1EwRkJkakJETEVWQlFYa3dRME1zTUVKQlFYbENMRU5CUVVNc1EwRkJiakpETEVWQlFYRXlRME1zY1VKQlFXOUNMRU5CUVVNc1EwRkJNVE5ETEVWQlFUUXpRME1zYlVKQlFXdENMRU5CUVVNc1EwRkJMelJETEVWQlFXazFRME1zV1VGQlZ5eEpRVUUxTlVNc1JVRkJhVFpEUXl4dFFrRkJhMElzVFVGQmJqZERMRVZCUVRBM1EwTXNjVUpCUVc5Q0xFTkJRVU1zUTBGQkx6aERMRVZCUVdrNVEwTXNaMEpCUVdVc1EwRkJReXhEUVVGcUswTXNSVUZCYlN0RFF5eDNRa0ZCZFVJc1NVRkJNUzlETEVWQlFTc3ZRME1zTUVKQlFYbENMRWxCUVhob1JDeEZRVUUyYUVSRExEQkNRVUY1UWl4SlFVRjBha1FzUlVGQk1tcEVReXgzUWtGQmRVSXNTVUZCYkd4RUxFVkJRWFZzUkVNc1owSkJRV1VzVTBGQmRHMUVMRVZCUVdkdVJFTXNXVUZCVnl4RFFVRkRMRU5CUVRWdVJDeEZRVUU0YmtSRExHbENRVUZuUWl4SFFVRTViMFFzUlVGQmEzQkVReXhaUVVGWExFbEJRVGR3UkN4RlFVRnJjVVJETEZsQlFWY3NTVUZCTjNGRUxFVkJRV3R5UkVNc2NVSkJRVzlDTEVOQlFVTXNRMEZCZG5ORUxFVkJRWGx6UkVNc2RVSkJRWE5DTEVOQlFVTXNRMEZCYUhWRUxFVkJRV3QxUkVNc1dVRkJWeXhEUVVGRExFTkJRVGwxUkN4RlFVRm5ka1JETEdWQlFXTXNRMEZCUXl4RFFVRXZka1FzUlVGQmFYZEVReXd3UWtGQmVVSXNRMEZCUXl4RFFVRXplRVFzUlVGQk5uaEVReXh4UWtGQmIwSXNRMEZCUXl4RFFVRnNla1FzUlVGQmIzcEVlRWNzWVVGQldTeERRVUZETEVOQlFXb3dSQ3hGUVVGdE1FUjVSeXgxUWtGQmMwSXNRMEZCUXl4RFFVRXhNVVFzUlVGQk5ERkVReXcyUWtGQk5FSXNRMEZCZURORUxFVkJRVEF6UkVNc09FSkJRVFpDTEVOQlFVTXNRMEZCZURWRUxFVkJRVEExUkVNc1pVRkJZeXhEUVVGRExFTkJRWG8yUkN4RlFVRXlOa1JETEhGQ1FVRnZRaXhEUVVGRExFTkJRV2c0UkN4RlFVRnJPRVExVFN4TlFVRkxMRU5CUVVNc1EwRkJlRGhFTEVWQlFUQTRSRFpOTEhOQ1FVRnhRaXhEUVVFdk9VUXNSVUZCYVN0RVF5eGpRVUZoTEVsQlFUa3JSQ3hGUVVGdEwwUkRMRk5CUVZFc1MwRkJTeXhEUVVGb1owVXNSVUZCYTJkRlF5eG5Ra0ZCWlN4RFFVRkRMRU5CUVd4b1JTeEZRVUZ2YUVWRExGZEJRVlVzVDBGQk9XaEZMRVZCUVhOcFJVTXNjVUpCUVc5Q0xFTkJRVU1zUTBGQk0ycEZMRVZCUVRacVJXaE1MR3RDUVVGcFFpeERRVUZETEVOQlFTOXJSU3hGUVVGcGJFVkdMR3RDUVVGcFFpeERRVUZETEVOQlFXNXRSU3hGUVVGeGJVVnRUQ3hqUVVGaExFbEJRV3h1UlN4RlFVRjFia1ZETEZkQlFWVXNRMEZCUXl4RFFVRnNiMFVzUlVGQmIyOUZReXhuUWtGQlpTeHRRa0ZCYm5CRkxFVkJRWFZ4UlVNc2EwSkJRV2xDTEVOQlFVTXNRMEZCZW5KRkxFVkJRVEp5UlVNc2QwSkJRWFZDTEcxQ1FVRnNkRVVzUlVGQmMzVkZNMHNzV1VGQlZ5eGpRVUZxZGtVc1JVRkJaM2RGUXl4clFrRkJhVUlzY1VKQlFXcDRSU3hGUVVGMWVVVXlTeXd5UWtGQk1FSXNLMEpCUVdvd1JTeEZRVUZwTWtWRExHMUNRVUZyUWl4elFrRkJiak5GTEVWQlFUQTBSVU1zY1VKQlFXOUNMSGRDUVVFNU5VVXNSVUZCZFRkRlF5eG5Ra0ZCWlN4dFFrRkJkRGhGTEVWQlFUQTVSVU1zZVVKQlFYZENMRFpDUVVGc0wwVXNSVUZCWjJoR1F5eG5Ra0ZCWlN4dFFrRkJMMmhHTEVWQlFXMXFSa01zZVVKQlFYZENMRFpDUVVFemEwWXNSVUZCZVcxR1F5eGpRVUZoTEdkQ1FVRjBia1lzUlVGQmRXOUdReXhoUVVGWkxEQkNRVUZ1Y0VZc1JVRkJPSEZHUXl4dFFrRkJhMElzYVVOQlFXaHpSaXhGUVVGcmRVWkRMSEZDUVVGdlFpeDNRa0ZCZEhaR0xFVkJRU3QzUmtNc2QwSkJRWFZDTERKQ1FVRjBlVVlzUlVGQmF6QkdReXh6UWtGQmNVSXNlVUpCUVhZeFJpeEZRVUZwTTBaRExIVkNRVUZ6UWl3d1FrRkJkalJHTEVWQlFXczJSa01zTkVKQlFUSkNMQ3RDUVVFM04wWXNSVUZCTmpsR1F5d3dRa0ZCZVVJc05rSkJRWFF2Uml4RlFVRnZhRWRETEhsQ1FVRjNRaXh2UWtGQk5XbEhMRVZCUVdsclIwTXNhMEpCUVdsQ0xHRkJRV3hzUnl4RlFVRm5iVWRETEhkQ1FVRjFRaXh4UWtGQmRtNUhMRVZCUVRadlIwTXNkVUpCUVhOQ0xHOUNRVUZ1Y1Vjc1JVRkJkM0pIUXl4dlFrRkJiVUlzZFVKQlFUTnpSeXhGUVVGdGRVZERMRzFDUVVGclFpeHhRa0ZCY25aSExFVkJRVEozUjBNc1owSkJRV1VzVjBGQk1YaEhMRVZCUVhONVIwTXNiMEpCUVcxQ0xIVkNRVUY2ZWtjc1JVRkJhVEZIUXl4VlFVRlRMRU5CUVVNc1EwRkJNekZITEVWQlFUWXhSME1zWjBKQlFXVXNRMEZCUXl4RFFVRTNNa2NzUlVGQkt6SkhReXhOUVVGTExFTkJRVU1zUTBGQmNqTkhMRVZCUVhVelIwTXNhMEpCUVdsQ0xHZENRVUY0TkVjc1JVRkJlVFZIUXl4clFrRkJhVUlzV1VGQk1UWkhMRVZCUVhVM1IwTXNiVUpCUVd0Q0xIbENRVUY2T0Vjc1JVRkJiU3RIUXl4clFrRkJhVUlzZDBKQlFYQXZSeXhGUVVFMlowaERMSGxDUVVGM1FpeDFRa0ZCY21sSUxFVkJRVFpxU0VNc2IwSkJRVzFDTEVOQlFVTXNRMEZCYW14SUxFVkJRVTQ3UVVGQlFTeFJRVUV3YkVoRExFbEJRVVYyVVN4TFFVRkhRU3hGUVVGRk5Fa3NaMEpCUVdwdFNDeERRVUZyYmtnMVNTeEpRVUZGUVN4TFFVRkhMRVZCUVV3c1EwRkJVU3hKUVVGSmQxRXNTVUZCUlN4RlFVRk9MRU5CUVZNc1MwRkJTU3hKUVVGSlF5eERRVUZTTEVsQlFXRjZVU3hEUVVGaU8wRkJRV1VzVlVGQlJ5eHZRa0ZCYVVKQkxFVkJRVVY1VVN4RFFVRkdMRU5CUVdwQ0xFdEJRWFZDTEZOQlFVOTZVU3hGUVVGRmVWRXNRMEZCUml4RFFVRTVRaXhKUVVGeFEzcFJMRVZCUVVWNVVTeERRVUZHTEVWQlFVczVUeXhSUVVGTUxFbEJRV1V6UWl4RlFVRkZlVkVzUTBGQlJpeE5RVUZQTVU4c1RVRkJkRUlzU1VGQk9FSXZRaXhGUVVGRmVWRXNRMEZCUml4TlFVRlBjRTRzVVVGQmNrTXNTVUZCSzBNc1MwRkJTeXhEUVVGTUxFdEJRVk01UWl4RFFVRlVMRWxCUVZsMlFpeEZRVUZGZVZFc1EwRkJSaXhoUVVGbGJGQXNRMEZCTVVVc1NVRkJOa1VzWlVGQllTeFBRVUZQYlZBc1RVRkJjRUlzU1VGQk5FSXhVU3hGUVVGRmVWRXNRMEZCUml4aFFVRmxReXhOUVVGb1N5eEZRVUYzUzBZc1JVRkJSVU1zUTBGQlJpeEpRVUZMZWxFc1JVRkJSWGxSTEVOQlFVWXNRMEZCVEN4RFFVRjRTeXhMUVVGelREdEJRVUZEUkN4VlFVRkZReXhEUVVGR0xFbEJRVXNzUlVGQlRDeERRVUZSTEV0QlFVa3NTVUZCU1VVc1EwRkJVaXhKUVVGaE0xRXNSVUZCUlhsUkxFTkJRVVlzUTBGQllqdEJRVUZyUWtRc1dVRkJSVU1zUTBGQlJpeEZRVUZMUlN4RFFVRk1MRWxCUVZFelVTeEZRVUZGZVZFc1EwRkJSaXhGUVVGTFJTeERRVUZNTEVOQlFWSTdRVUZCYkVJN1FVRkJhME03UVVGQmFGQXNTMEZCWjFBc1MwRkJTU3hKUVVGSlF5eERRVUZTTEVsQlFXRXZTU3hEUVVGaU8wRkJRV1VzVlVGQlJ5eExRVUZMTEVOQlFVd3NTMEZCVXpkSUxFVkJRVVUwVVN4RFFVRkdMRU5CUVZvc1JVRkJhVUkxVVN4RlFVRkZORkVzUTBGQlJpeEpRVUZMTDBrc1JVRkJSU3RKTEVOQlFVWXNRMEZCVEN4RFFVRnFRaXhMUVVGblF5eEpRVUZITEc5Q1FVRnBRalZSTEVWQlFVVTBVU3hEUVVGR0xFTkJRV3BDTEVOQlFVZ3NSVUZCZVVJc1MwRkJTU3hKUVVGSlF5eERRVUZTTEVsQlFXRm9TaXhGUVVGRkswa3NRMEZCUml4RFFVRmlPMEZCUVd0Q0xHRkJRVXNzUTBGQlRDeExRVUZUTlZFc1JVRkJSVFJSTEVOQlFVWXNSVUZCUzBNc1EwRkJUQ3hEUVVGVUxFdEJRVzFDTjFFc1JVRkJSVFJSTEVOQlFVWXNSVUZCUzBNc1EwRkJUQ3hKUVVGUmFFb3NSVUZCUlN0SkxFTkJRVVlzUlVGQlMwTXNRMEZCVEN4RFFVRXpRanRCUVVGc1FqdEJRVUY0UlN4TFFVRTRTQ3hKUVVGSmVGRXNTVUZCUlN4SlFVRk9MRU5CUVZjc1NVRkJSMEVzUlVGQlJVTXNUVUZCUml4SFFVRlRUaXhEUVVGVUxFVkJRVmRMTEVWQlFVVjVVU3hqUVVGR0xFZEJRV2xDVGl4RFFVRTFRaXhGUVVFNFFtNVJMRVZCUVVVd1VTeFZRVUZHTEVkQlFXRXNSVUZCTTBNc1JVRkJPRU1zUzBGQlN5eERRVUZNTEV0QlFWTnNVaXhEUVVGVUxFbEJRVmtzUzBGQlN5eERRVUZNTEV0QlFWTXdRaXhEUVVGeVFpeExRVUY1UWpGQ0xFbEJRVVV3UWl4RFFVRXpRaXhEUVVFNVF5eEZRVUUwUlN4RFFVRkRMRXRCUVVzc1EwRkJUQ3hMUVVGVE1VSXNRMEZCVkN4TFFVRmhRU3hKUVVGRkxFdEJRVXNzUTBGQlRDeExRVUZUTUVJc1EwRkJWQ3hIUVVGWFVTeFBRVUZQYVZBc1NVRkJVQ3hKUVVGaGFsQXNUMEZCVDJ0UUxFdEJRWEJDTEVsQlFUSkNiRkFzVDBGQlR6SlBMRTFCUVRkRExFZEJRVzlFYmxBc1EwRkJia1VzUTBGQlJDeE5RVUV3Uld4Q0xFVkJRVVUyVVN4RFFVRkdMRWRCUVVseVVpeERRVUZLTEVWQlFVMVJMRVZCUVVVNFVTeHBRa0ZCUml4SFFVRnZRaXhMUVVGTExFTkJRUzlDTEVWQlFXbERPVkVzUlVGQlJTdFJMRzFDUVVGR0xFZEJRWE5DTEZsQlFWVTdRVUZCUXl4VlFVRkhMRU5CUVVNdlVTeEZRVUZGUXl4TlFVRkdMRU5CUVZOelN5eFhRVUZpTEVWQlFYbENMRTlCUVUwc1EwRkJReXhEUVVGUUxFTkJRVk1zU1VGQlNTOUxMRU5CUVVvN1FVRkJRU3hWUVVGTlF5eEpRVUZGTEVOQlFVTXNRMEZCVkR0QlFVRkJMRlZCUVZkNVFpeEpRVUZGTEVWQlFXSXNRMEZCWjBJc1MwRkJTVEZDTEVOQlFVb3NTVUZCVTFFc1JVRkJSVU1zVFVGQlJpeERRVUZUYzBzc1YwRkJiRUk3UVVGQk9FSjJTeXhWUVVGRlF5eE5RVUZHTEVOQlFWTnpTeXhYUVVGVUxFTkJRWEZDZVVjc1kwRkJja0lzUTBGQmIwTjRVaXhEUVVGd1F5eExRVUYzUXpCQ0xFVkJRVVZyUWl4SlFVRkdMRU5CUVU4MVF5eERRVUZRTEVOQlFYaERPMEZCUVRsQ0xFOUJRV2RHTUVJc1JVRkJSU3RRTEVsQlFVWXNRMEZCVHl4VlFVRlRlbElzUTBGQlZDeEZRVUZYUXl4RFFVRllMRVZCUVdFN1FVRkJReXhsUVVGUE1FZ3NVMEZCVXpOSUxFTkJRVlFzUlVGQlZ5eEZRVUZZTEVsQlFXVXlTQ3hUUVVGVE1VZ3NRMEZCVkN4RlFVRlhMRVZCUVZnc1EwRkJkRUk3UVVGQmNVTXNUMEZCTVVRc1JVRkJORVFzUzBGQlNTeEpRVUZKUXl4SlFVRkZMRU5CUVZZc1JVRkJXVUVzU1VGQlJYZENMRVZCUVVWTkxFMUJRV2hDTEVWQlFYVkNPVUlzUjBGQmRrSTdRVUZCTWtJc1UwRkJRMFlzU1VGQlJUQkNMRVZCUVVWNFFpeERRVUZHTEVOQlFVZ3NTMEZCVldkRExFOUJRVTlwUXl4VlFVRnFRaXhKUVVFMlFpeERRVUZEYkVVc1EwRkJPVUlzUzBGQmEwTkJMRWxCUVVWRUxFTkJRWEJETzBGQlFUTkNMRTlCUVd0RkxFOUJRVTlETEV0QlFVY3NTMEZCVmp0QlFVRm5RaXhMUVVGc1ZpeEZRVUZ0Vms4c1JVRkJSV3RTTEdGQlFVWXNSMEZCWjBJc1dVRkJWVHRCUVVGRExGVkJRVWt4VWl4SlFVRkZVU3hGUVVGRksxRXNiVUpCUVVZc1JVRkJUaXhEUVVFNFFpeEpRVUZIZGxJc1MwRkJSMUVzUlVGQlJUaFJMR2xDUVVGR0xFdEJRWE5DZEZJc1EwRkJOVUlzUlVGQk9FSTdRVUZCUXl4WlFVRkpReXhKUVVGRlJDeExRVUZMVVN4RlFVRkZReXhOUVVGR0xFTkJRVk56U3l4WFFVRmtMRWRCUVRCQ2Rrc3NSVUZCUlVNc1RVRkJSaXhEUVVGVGMwc3NWMEZCVkN4RFFVRnhRaTlMTEVOQlFYSkNMRU5CUVRGQ0xFZEJRV3RFVVN4RlFVRkZlVkVzWTBGQk1VUTdRVUZCUVN4WlFVRjVSWFpRTEVsQlFVVnNRaXhGUVVGRlF5eE5RVUZHTEVOQlFWTlJMRWxCUVZRc1NVRkJaV2hDTEVWQlFVVm5UQ3hoUVVGR0xFdEJRV3RDZWtzc1JVRkJSVU1zVFVGQlJpeERRVUZUZDBzc1lVRkJja2dzUTBGQmJVa3NTMEZCU1N4SlFVRkpMMHNzUTBGQlVpeEpRVUZoUkN4RFFVRmlPMEZCUVdWUExGbEJRVVZETEUxQlFVWXNRMEZCVTFBc1EwRkJWQ3hKUVVGWlJDeEZRVUZGUXl4RFFVRkdMRU5CUVZvN1FVRkJaaXhUUVVGblEwMHNSVUZCUlRoUkxHbENRVUZHTEVkQlFXOUNkRklzUTBGQmNFSXNSVUZCYzBJd1FpeExRVUZIYkVJc1JVRkJSVzFTTEZkQlFVd3NTVUZCYTBKdVVpeEZRVUZGYjFJc1RVRkJSaXhEUVVGVExFTkJRVU1zUTBGQlZpeERRVUY0UXp0QlFVRnhSRHRCUVVGRExFdEJRWEJ2UWl4RlFVRnhiMEp3VWl4RlFVRkZReXhOUVVGR0xFTkJRVk56U3l4WFFVRlVMRWxCUVhOQ2Rrc3NSVUZCUld0U0xHRkJRVVlzUlVGQk0zQkNMRVZCUVRaeFFteFNMRVZCUVVWdlJDeFRRVUZHTEVkQlFWazFSQ3hGUVVGRlJTeERRVUZHTEVOQlFYcHlRaXhGUVVFNGNrSXNUVUZCU1Uwc1JVRkJSVzlFTEZOQlFVWXNRMEZCV1RWQ0xFMUJRWGg0UWl4RFFVRXZSU3hGUVVFck1rSTdRVUZCUXl4VlFVRkhlRUlzUlVGQlJXOUVMRk5CUVVZc1EwRkJXVFZDTEUxQlFWb3NSMEZCYlVJc1EwRkJkRUlzUlVGQmQwSTdRVUZCUXl4WlFVRkpObEFzU1VGQlJTeEZRVUZPTEVOQlFWTXNUMEZCVDNKU0xFVkJRVVZ2UkN4VFFVRkdMRU5CUVZrM1FpeEpRVUZhTEVOQlFXbENMRmxCUVZVN1FVRkJRemhRTEZsQlFVVnFVQ3hKUVVGR0xFTkJRVThzU1VGQlNUTkRMRU5CUVVvc1EwRkJUU3hKUVVGT0xFVkJRVmRGTEVOQlFWZ3NRMEZCVUR0QlFVRnpRaXhUUVVGc1JDeEhRVUZ2UkRCU0xFTkJRVE5FTzBGQlFUWkVMRk5CUVVWcVR5eFRRVUZHTEVOQlFWa3NRMEZCV2l4RlFVRmxhMDhzVFVGQlppeEhRVUZ6UW5SU0xFTkJRWFJDTEVWQlFYZENRU3hGUVVGRmIwUXNVMEZCUml4RFFVRlpiVThzU1VGQldpeERRVUZwUWl4UlFVRnFRaXhGUVVFd1FuWlNMRU5CUVRGQ0xFTkJRWGhDTEVWQlFYRkVRU3hGUVVGRk1GRXNWVUZCUml4RFFVRmhkRThzU1VGQllpeERRVUZyUW5CRExFVkJRVVZETEUxQlFVWXNRMEZCVXl0T0xITkNRVUZVTEVkQlFXZERhRThzUlVGQlJVTXNUVUZCUml4RFFVRlRkMGdzVTBGQk0wUXNRMEZCY2tRc1JVRkJNa2g2U0N4RlFVRkZReXhOUVVGR0xFTkJRVk4xUml4UlFVRlVMRWxCUVcxQ2VFWXNSVUZCUlRCUkxGVkJRVVlzUTBGQllYUlBMRWxCUVdJc1EwRkJhMEp3UXl4RlFVRkZReXhOUVVGR0xFTkJRVk1yVGl4elFrRkJWQ3hIUVVGblF5eFhRVUZzUkN4RFFVRTVTU3hGUVVFMlRXaFBMRVZCUVVWM1VpeFBRVUZHTEVOQlFWVkRMRTlCUVZZc1MwRkJiMEo2VWl4RlFVRkZNRkVzVlVGQlJpeERRVUZoZEU4c1NVRkJZaXhEUVVGclFuQkRMRVZCUVVWRExFMUJRVVlzUTBGQlV5dE9MSE5DUVVGVUxFZEJRV2RETEZsQlFXeEVMRWRCUVdkRmFFOHNSVUZCUlVNc1RVRkJSaXhEUVVGVGVVc3NaVUZCVkN4SFFVRjVRaXhEUVVFM1J5eERRVUUzVFN4RlFVRTJWREZMTEVWQlFVVkRMRTFCUVVZc1EwRkJVMjlKTEZWQlFWUXNTVUZCY1VKeVNTeEZRVUZGTUZFc1ZVRkJSaXhEUVVGaGRFOHNTVUZCWWl4RFFVRnJRbkJETEVWQlFVVkRMRTFCUVVZc1EwRkJVeXRPTEhOQ1FVRlVMRWRCUVdkRExGbEJRV3hFTEVOQlFXeFdMRVZCUVd0YUxFTkJRVU5vVHl4RlFVRkZReXhOUVVGR0xFTkJRVk56U2l4UlFVRlVMRWxCUVcxQ2Rrb3NSVUZCUlVNc1RVRkJSaXhEUVVGVE1rMHNjVUpCUVRkQ0xFMUJRWE5FTlUwc1JVRkJSVU1zVFVGQlJpeERRVUZUTUUwc2JVSkJRVlFzUjBGQk5rSXNRMEZCUXl4RFFVRndSaXhEUVVGc1dpeEZRVUY1WlROTkxFVkJRVVZETEUxQlFVWXNRMEZCVXpKTUxHMUNRVUZVTEV0QlFTdENOVXdzUlVGQlJVTXNUVUZCUml4RFFVRlRkVTBzWlVGQlZDeEhRVUY1UWl4RFFVRjRSQ3hEUVVGNlpTeEZRVUZ2YVVJc1EwRkJReXhOUVVGRUxFVkJRVkVzVjBGQlVpeEZRVUZ2UWl4TlFVRndRaXhGUVVFMFFuUkdMRTlCUVRWQ0xFTkJRVzlEYkVnc1JVRkJSVU1zVFVGQlJpeERRVUZUZFVrc1RVRkJOME1zUzBGQmMwUXNRMEZCZEVRc1MwRkJNRVI0U1N4RlFVRkZkMUlzVDBGQlJpeERRVUZWUlN4WlFVRldMRWxCUVhkQ01WSXNSVUZCUlVNc1RVRkJSaXhEUVVGVE1FMHNiVUpCUVZRc1IwRkJOa0lzUTBGQlF5eERRVUU1UWl4RlFVRm5Rek5OTEVWQlFVVXdVU3hWUVVGR0xFTkJRV0YwVHl4SlFVRmlMRU5CUVd0Q2NFTXNSVUZCUlVNc1RVRkJSaXhEUVVGVEswNHNjMEpCUVZRc1IwRkJaME1zU1VGQmJFUXNRMEZCZUVRc1NVRkJhVWhvVHl4RlFVRkZReXhOUVVGR0xFTkJRVk4xU1N4TlFVRlVMRWRCUVdkQ0xFOUJRVE5NTEVOQlFYQnBRaXhGUVVGM2RVSXNXVUZCVlhoSkxFVkJRVVZETEUxQlFVWXNRMEZCVTNWSkxFMUJRVzVDTEVsQlFUSkNlRWtzUlVGQlJUQlJMRlZCUVVZc1EwRkJZWFJQTEVsQlFXSXNRMEZCYTBKd1F5eEZRVUZGUXl4TlFVRkdMRU5CUVZNclRpeHpRa0ZCVkN4SFFVRm5RMmhQTEVWQlFVVkRMRTFCUVVZc1EwRkJVM1ZKTEUxQlFUTkVMRU5CUVc1M1FpeEZRVUZ6TUVJc1YwRkJVM2hKTEVWQlFVVkRMRTFCUVVZc1EwRkJVM1ZKTEUxQlFXeENMRXRCUVRKQ2VFa3NSVUZCUlVNc1RVRkJSaXhEUVVGVGRVMHNaVUZCVkN4SFFVRjVRaXhEUVVGNlFpeEZRVUV5UW5oTkxFVkJRVVZETEUxQlFVWXNRMEZCVTNkTExHRkJRVlFzUjBGQmRVSXNRMEZCYkVRc1JVRkJiMFI2U3l4RlFVRkZReXhOUVVGR0xFTkJRVk41U3l4bFFVRlVMRWRCUVhsQ0xFTkJRVGRGTEVWQlFTdEZNVXNzUlVGQlJVTXNUVUZCUml4RFFVRlRNa3NzWTBGQlZDeEhRVUYzUWl4RFFVRjJSeXhGUVVGNVJ6VkxMRVZCUVVWRExFMUJRVVlzUTBGQlV6UkxMR05CUVZRc1IwRkJkMElzUTBGQlF5eERRVUZzU1N4RlFVRnZTVGRMTEVWQlFVVkRMRTFCUVVZc1EwRkJVM1ZMTEZsQlFWUXNSMEZCYzBJc1EwRkJNVW9zUlVGQk5FcDRTeXhGUVVGRlF5eE5RVUZHTEVOQlFWTnpTU3huUWtGQlZDeEhRVUV3UWl4RFFVRkRMRU5CUVd4T0xFTkJRWFF3UWl4RlFVRXlhRU1zVjBGQlUzWkpMRVZCUVVWRExFMUJRVVlzUTBGQlUzVkpMRTFCUVd4Q0xFbEJRVEJDTEZkQlFWTjRTU3hGUVVGRlF5eE5RVUZHTEVOQlFWTjFTU3hOUVVFMVF5eExRVUZ4UkhoSkxFVkJRVVZETEUxQlFVWXNRMEZCVTNkTExHRkJRVlFzUjBGQmRVSXNRMEZCZGtJc1JVRkJlVUo2U3l4RlFVRkZReXhOUVVGR0xFTkJRVk41U3l4bFFVRlVMRWRCUVhsQ0xFTkJRV3hFTEVWQlFXOUVNVXNzUlVGQlJVTXNUVUZCUml4RFFVRlRNa3NzWTBGQlZDeEhRVUYzUWl4RFFVRTFSU3hGUVVFNFJUVkxMRVZCUVVWRExFMUJRVVlzUTBGQlV6Qk5MRzFDUVVGVUxFZEJRVFpDTEVOQlFVTXNRMEZCTlVjc1JVRkJPRWN6VFN4RlFVRkZReXhOUVVGR0xFTkJRVk4xU3l4WlFVRlVMRWRCUVhOQ0xFTkJRWEJKTEVWQlFYTkpMRXRCUVVzc1EwRkJUQ3hMUVVGVE1FWXNRMEZCVkN4TFFVRmhiRkVzUlVGQlJVTXNUVUZCUml4RFFVRlRjMGtzWjBKQlFWUXNSMEZCTUVJc1EwRkJReXhEUVVGNFF5eERRVUV6VEN4RFFVRXphRU1zUlVGQmEzZERka2tzUlVGQlJVTXNUVUZCUml4RFFVRlRORTBzVlVGQlZDeEpRVUZ4UWpkTkxFVkJRVVYzVWl4UFFVRkdMRU5CUVZWSExFdEJRUzlDTEV0QlFYVkRNMUlzUlVGQlJVTXNUVUZCUml4RFFVRlRORTBzVlVGQlZDeEhRVUZ2UWl4RFFVRkRMRU5CUVRWRUxFTkJRV3gzUXl4RlFVRnBNRU0zVFN4RlFVRkZORklzVDBGQlJpeEhRVUZWTlZJc1JVRkJSVzlFTEZOQlFVWXNRMEZCV1hsUExGRkJRVm9zUTBGQmNVSXNUVUZCU1RkU0xFVkJRVVZETEUxQlFVWXNRMEZCVTNWUExGbEJRV3hETEVOQlFUTXdReXhGUVVFeU0wTjRUeXhGUVVGRlF5eE5RVUZHTEVOQlFWTTJUQ3hWUVVGVUxFdEJRWE5DT1V3c1JVRkJSVGhTTEcxQ1FVRkdMRWRCUVhOQ2RGTXNSVUZCUlZFc1JVRkJSVU1zVFVGQlJpeERRVUZUTmt3c1ZVRkJXQ3hEUVVGMFFpeEZRVUUyUXpsTUxFVkJRVVZETEUxQlFVWXNRMEZCVXpSTUxHbENRVUZVTEVsQlFUUkNMRmxCUVZVc1QwRkJUemRNTEVWQlFVVkRMRTFCUVVZc1EwRkJVelpNTEZWQlFYUkVMRWxCUVd0Rk9Vd3NSVUZCUlRoU0xHMUNRVUZHTEVOQlFYTkNkRkVzVFVGQmRFSXNSMEZCTmtJc1EwRkJMMFlzU1VGQmEwY3NUVUZCU1hoQ0xFVkJRVVZ2UkN4VFFVRkdMRU5CUVZreVR5eEpRVUZhTEVOQlFXbENMMUlzUlVGQlJVTXNUVUZCUml4RFFVRlROa3dzVlVGQk1VSXNSVUZCYzBOMFN5eE5RVUUxU1N4TFFVRnhTbmhDTEVWQlFVVTRVaXh0UWtGQlJpeEhRVUZ6UWpsU0xFVkJRVVZ2UkN4VFFVRkdMRU5CUVZreVR5eEpRVUZhTEVOQlFXbENMMUlzUlVGQlJVTXNUVUZCUml4RFFVRlROa3dzVlVGQk1VSXNRMEZCTTBzc1EwRkJOME1zUlVGQksxQXNZMEZCV1RsTUxFVkJRVVZETEUxQlFVWXNRMEZCVTNGTkxHTkJRWEpDTEVsQlFYRkRkRTBzUlVGQlJVTXNUVUZCUml4RFFVRlRLMHdzYlVKQlFUbERMRWRCUVd0RmFFMHNSVUZCUlRoU0xHMUNRVUZHTEVOQlFYTkNSU3hSUVVGMFFpeERRVUVyUW1oVExFVkJRVVZETEUxQlFVWXNRMEZCVTJkUUxIVkNRVUZVTEVkQlFXbERMRmRCUVdoRkxFTkJRV3hGTEVkQlFTdEphbEFzUlVGQlJVTXNUVUZCUml4RFFVRlRLMHdzYlVKQlFWUXNSMEZCTmtJc1EwRkJReXhEUVVFMVlTeEZRVUU0WVdoTkxFVkJRVVU0VWl4dFFrRkJSaXhEUVVGelFrVXNVVUZCZEVJc1EwRkJLMEpvVXl4RlFVRkZReXhOUVVGR0xFTkJRVk5uVUN4MVFrRkJWQ3hIUVVGcFEycFFMRVZCUVVWRExFMUJRVVlzUTBGQlUzRk5MR05CUVhwRkxFTkJRWEJqTEVOQlFUTXpReXhGUVVGNU5VUXNRMEZCUTNSTkxFVkJRVVZETEUxQlFVWXNRMEZCVTNkTkxGVkJRVlFzU1VGQmNVSjZUU3hGUVVGRlF5eE5RVUZHTEVOQlFWTjVUU3hWUVVFdlFpeE5RVUUyUXpGTkxFVkJRVVZETEUxQlFVWXNRMEZCVTNkTkxGVkJRVlFzUzBGQmMwSjZUU3hGUVVGRmVVMHNWVUZCUml4SFFVRmhhazRzUlVGQlJWRXNSVUZCUlVNc1RVRkJSaXhEUVVGVGQwMHNWVUZCV0N4RFFVRmlMRVZCUVc5RGVrMHNSVUZCUlVNc1RVRkJSaXhEUVVGVE5Fd3NhVUpCUVZRc1NVRkJORUlzV1VGQlZTeFBRVUZQTjB3c1JVRkJSVU1zVFVGQlJpeERRVUZUZDAwc1ZVRkJkRVFzU1VGQmEwVjZUU3hGUVVGRmVVMHNWVUZCUml4RFFVRmhha3dzVFVGQllpeEhRVUZ2UWl4RFFVRjBSaXhKUVVGNVJpeE5RVUZKZUVJc1JVRkJSVzlFTEZOQlFVWXNRMEZCV1RKUExFbEJRVm9zUTBGQmFVSXZVaXhGUVVGRlF5eE5RVUZHTEVOQlFWTjNUU3hWUVVFeFFpeEZRVUZ6UTJwTUxFMUJRVzVKTEV0QlFUUkplRUlzUlVGQlJYbE5MRlZCUVVZc1IwRkJZWHBOTEVWQlFVVnZSQ3hUUVVGR0xFTkJRVmt5VHl4SlFVRmFMRU5CUVdsQ0wxSXNSVUZCUlVNc1RVRkJSaXhEUVVGVGQwMHNWVUZCTVVJc1EwRkJla29zUTBGQk1VUXNSMEZCTWxCNlRTeEZRVUZGUXl4TlFVRkdMRU5CUVZONVRTeFZRVUZVTEV0QlFYTkNNVTBzUlVGQlJUQk5MRlZCUVVZc1IwRkJZV3hPTEVWQlFVVlJMRVZCUVVWRExFMUJRVVlzUTBGQlUzbE5MRlZCUVZnc1EwRkJZaXhGUVVGdlF6Rk5MRVZCUVVWRExFMUJRVVlzUTBGQlV6Uk1MR2xDUVVGVUxFbEJRVFJDTEZsQlFWVXNUMEZCVHpkTUxFVkJRVVZETEUxQlFVWXNRMEZCVTNsTkxGVkJRWFJFTEVsQlFXdEZNVTBzUlVGQlJUQk5MRlZCUVVZc1EwRkJZV3hNTEUxQlFXSXNSMEZCYjBJc1EwRkJkRVlzU1VGQmVVWXNUVUZCU1hoQ0xFVkJRVVZ2UkN4VFFVRkdMRU5CUVZreVR5eEpRVUZhTEVOQlFXbENMMUlzUlVGQlJVTXNUVUZCUml4RFFVRlRlVTBzVlVGQk1VSXNSVUZCYzBOc1RDeE5RVUZ1U1N4TFFVRTBTWGhDTEVWQlFVVXdUU3hWUVVGR0xFZEJRV0V4VFN4RlFVRkZiMFFzVTBGQlJpeERRVUZaTWs4c1NVRkJXaXhEUVVGcFFpOVNMRVZCUVVWRExFMUJRVVlzUTBGQlUzbE5MRlZCUVRGQ0xFTkJRWHBLTEVOQlFURkVMRU5CUVhoVExFTkJRWG8xUkN4RlFVRTJOMFV4VFN4RlFVRkZNRU1zV1VGQlJpeEhRVUZsTEZsQlFWVTdRVUZCUXl4bFFVRk5MR2xDUVVGbE1VTXNSVUZCUlVNc1RVRkJSaXhEUVVGVGQwZ3NVMEZCT1VJN1FVRkJkME1zVDBGQkx5OUZMRVZCUVdkblJucElMRVZCUVVVNFJDeEhRVUZHTEVkQlFVMDVSQ3hGUVVGRk1FTXNXVUZCUml4UFFVRnRRaXhWUVVGUk1VTXNSVUZCUlc5RUxGTkJRVVlzUTBGQldTeERRVUZhTEVWQlFXVTJUeXhIUVVGbUxFTkJRVzFDT1U4c1YwRkJia0lzUlVGQlVpeEpRVUV3UXl4VlFVRlJia1FzUlVGQlJXOUVMRk5CUVVZc1EwRkJXVGhQTEVkQlFWb3NRMEZCWjBJc1YwRkJhRUlzUTBGQmNrVXNRMEZCZEdkR0xFVkJRWGx0Um14VExFVkJRVVU0UkN4SFFVRkdMRWxCUVU4NVJDeEZRVUZGTUZFc1ZVRkJSaXhEUVVGaGRFOHNTVUZCWWl4RFFVRnJRbkJETEVWQlFVVkRMRTFCUVVZc1EwRkJVeXRPTEhOQ1FVRlVMRWRCUVdkRExFdEJRV3hFTEVOQlFXaHVSaXhGUVVGNWNVWm9UeXhGUVVGRk9FUXNSMEZCUml4TFFVRlJPVVFzUlVGQlJXMVRMRkZCUVVZc1IwRkJWeXhyUWtGQlowSnVVeXhGUVVGRk5GSXNUMEZCUml4RFFVRlZUU3hIUVVGV0xFTkJRV01zVTBGQlpDeERRVUZ1UXl4RFFVRjZjVVlzUlVGQmMzVkdiRk1zUlVGQlJVTXNUVUZCUml4RFFVRlRlVXNzWlVGQlZDeEhRVUY1UWl4RFFVRjZRaXhKUVVFMFFqRkxMRVZCUVVVd1VTeFZRVUZHTEVOQlFXRjBUeXhKUVVGaUxFTkJRV3RDY0VNc1JVRkJSVU1zVFVGQlJpeERRVUZUSzA0c2MwSkJRVlFzUjBGQlowTXNWVUZCYkVRc1EwRkJiSGRHTEVWQlFXY3dSbWhQTEVWQlFVVnZVeXhOUVVGR0xFTkJRVk5ETEU5QlFWUXNTVUZCYTBKeVV5eEZRVUZGTUZFc1ZVRkJSaXhEUVVGaGRFOHNTVUZCWWl4RFFVRnJRbkJETEVWQlFVVkRMRTFCUVVZc1EwRkJVeXRPTEhOQ1FVRlVMRWRCUVdkRExGTkJRV3hFTEVOQlFXd3hSaXhGUVVFck5FWm9UeXhGUVVGRmIwUXNVMEZCUml4RFFVRlpORThzVVVGQldpeERRVUZ4UW1oVExFVkJRVVV3VVN4VlFVRkdMRU5CUVdFMFFpeEpRVUZpTEVOQlFXdENMRWRCUVd4Q0xFTkJRWEpDTEVOQlFTODBSaXhGUVVFME4wWjBVeXhGUVVGRmRWTXNVMEZCUml4SFFVRlpMRU5CUVhnNFJpeEZRVUV3T0VaMlV5eEZRVUZGZDFNc1VVRkJSaXhIUVVGWExFTkJRWEk1Uml4RlFVRjFPVVo0VXl4RlFVRkZlVk1zVVVGQlJpeEhRVUZYTEVOQlFXd3JSaXhGUVVGdkswWjZVeXhGUVVGRk1GTXNaVUZCUml4SFFVRnJRaXhaUVVGVk8wRkJRVU14VXl4VlFVRkZReXhOUVVGR0xFTkJRVk4zUXl4blFrRkJWQ3hIUVVFd1FpeERRVUZETEVOQlFUTkNMRVZCUVRaQ2VrTXNSVUZCUlVNc1RVRkJSaXhEUVVGVE1FTXNaMEpCUVZRc1MwRkJORUlzUTBGQlF5eERRVUUzUWl4SlFVRm5Rek5ETEVWQlFVVkRMRTFCUVVZc1EwRkJVelJOTEZWQlFYcERMRWxCUVhGRU4wMHNSVUZCUlRKVExHVkJRVVlzUlVGQmJFWTdRVUZCYzBjc1QwRkJkbTFITEVWQlFYZHRSek5UTEVWQlFVVTBVeXhsUVVGR0xFZEJRV3RDTEZsQlFWVTdRVUZCUXpWVExGVkJRVVZETEUxQlFVWXNRMEZCVXpCRExHZENRVUZVTEVkQlFUQkNMRU5CUVVNc1EwRkJNMElzUlVGQk5rSXpReXhGUVVGRlF5eE5RVUZHTEVOQlFWTjNReXhuUWtGQlZDeExRVUUwUWl4RFFVRkRMRU5CUVRkQ0xFbEJRV2REZWtNc1JVRkJSVU1zVFVGQlJpeERRVUZUTkUwc1ZVRkJla01zU1VGQmNVUTNUU3hGUVVGRk1sTXNaVUZCUml4RlFVRnNSanRCUVVGelJ5eFBRVUV6ZFVjc1JVRkJOSFZITTFNc1JVRkJSVFpUTEZWQlFVWXNSMEZCWVN4WlFVRlZPMEZCUVVNM1V5eFZRVUZGUXl4TlFVRkdMRU5CUVZOM1F5eG5Ra0ZCVkN4SFFVRXdRbnBETEVWQlFVVkRMRTFCUVVZc1EwRkJVekJETEdkQ1FVRlVMRWRCUVRCQ0xFTkJRVU1zUTBGQmNrUXNSVUZCZFVRelF5eEZRVUZGUXl4TlFVRkdMRU5CUVZNMFRTeFZRVUZVTEVsQlFYRkNOMDBzUlVGQlJUSlRMR1ZCUVVZc1JVRkJOVVU3UVVGQlowY3NUMEZCY0RKSExFVkJRWEV5UnpOVExFVkJRVVU0VXl4cFFrRkJSaXhIUVVGdlFpeFpRVUZWTzBGQlFVTTVVeXhWUVVGRlF5eE5RVUZHTEVOQlFWTjNReXhuUWtGQlZDeEhRVUV3UWl4RFFVRkRMRU5CUVROQ0xFVkJRVFpDZWtNc1JVRkJSVU1zVFVGQlJpeERRVUZUTUVNc1owSkJRVlFzUzBGQk5FSXNRMEZCUXl4RFFVRTNRaXhKUVVGblF6TkRMRVZCUVVWRExFMUJRVVlzUTBGQlV6Uk5MRlZCUVhwRExFbEJRWEZFTjAwc1JVRkJSU3RUTEdGQlFVWXNSVUZCYkVZN1FVRkJiMGNzVDBGQmVDdEhMRVZCUVhrclJ5OVRMRVZCUVVWblZDeHBRa0ZCUml4SFFVRnZRaXhaUVVGVk8wRkJRVU5vVkN4VlFVRkZReXhOUVVGR0xFTkJRVk13UXl4blFrRkJWQ3hIUVVFd1FpeERRVUZETEVOQlFUTkNMRVZCUVRaQ00wTXNSVUZCUlVNc1RVRkJSaXhEUVVGVGQwTXNaMEpCUVZRc1MwRkJORUlzUTBGQlF5eERRVUUzUWl4SlFVRm5RM3BETEVWQlFVVkRMRTFCUVVZc1EwRkJVelJOTEZWQlFYcERMRWxCUVhGRU4wMHNSVUZCUlN0VExHRkJRVVlzUlVGQmJFWTdRVUZCYjBjc1QwRkJOVzFJTEVWQlFUWnRTQzlUTEVWQlFVVnBWQ3haUVVGR0xFZEJRV1VzV1VGQlZUdEJRVUZEYWxRc1ZVRkJSVU1zVFVGQlJpeERRVUZUZDBNc1owSkJRVlFzUjBGQk1FSjZReXhGUVVGRlF5eE5RVUZHTEVOQlFWTXdReXhuUWtGQlZDeEhRVUV3UWl4RFFVRkRMRU5CUVhKRUxFVkJRWFZFTTBNc1JVRkJSVU1zVFVGQlJpeERRVUZUTkUwc1ZVRkJWQ3hKUVVGeFFqZE5MRVZCUVVVclV5eGhRVUZHTEVWQlFUVkZPMEZCUVRoR0xFOUJRWEoxU0N4RlFVRnpkVWd2VXl4RlFVRkZLMU1zWVVGQlJpeEhRVUZuUWl4VlFVRlRkbFFzUTBGQlZDeEZRVUZYTzBGQlFVTlJMRlZCUVVWdlJDeFRRVUZHTEVOQlFWa3NRMEZCV2l4RlFVRmxPRkFzUzBGQlppeERRVUZ4UWtNc1RVRkJja0lzUjBGQk5FSXNUVUZCTlVJc1JVRkJiVU51VkN4RlFVRkZiMFFzVTBGQlJpeERRVUZaTEVOQlFWb3NSVUZCWlRoUUxFdEJRV1lzUTBGQmNVSkRMRTFCUVhKQ0xFZEJRVFJDTTFRc1NVRkJSU3hyUWtGQlJpeEhRVUZ4UWl4alFVRndSaXhGUVVGdFIxRXNSVUZCUlc5RUxGTkJRVVlzUTBGQldTeERRVUZhTEVWQlFXVTRVQ3hMUVVGbUxFTkJRWEZDUXl4TlFVRnlRaXhIUVVFMFFqTlVMRWxCUVVVc1kwRkJSaXhIUVVGcFFpeFhRVUZvU2l4RlFVRTBTbEVzUlVGQlJXOUVMRk5CUVVZc1EwRkJXU3hEUVVGYUxFVkJRV1U0VUN4TFFVRm1MRU5CUVhGQ1F5eE5RVUZ5UWl4SFFVRTBRak5VTEVsQlFVVXNWVUZCUml4SFFVRmhMRTFCUVhKTk8wRkJRVFJOTEU5QlFUazRTQ3hGUVVFck9FaFJMRVZCUVVVeVV5eGxRVUZHTEVkQlFXdENMRmxCUVZVN1FVRkJRek5UTEZWQlFVVnZSQ3hUUVVGR0xFTkJRVmtzUTBGQldpeEZRVUZsT0ZBc1MwRkJaaXhEUVVGeFFrTXNUVUZCY2tJc1IwRkJORUlzUlVGQk5VSTdRVUZCSzBJc1QwRkJNMmRKTEVWQlFUUm5TVzVVTEVWQlFVVkRMRTFCUVVZc1EwRkJVelJOTEZWQlFWUXNTVUZCY1VJM1RTeEZRVUZGSzFNc1lVRkJSaXhGUVVGcWFVa3NSVUZCYldwSkwxTXNSVUZCUlc5VUxGbEJRVVlzUjBGQlpTeEZRVUZzYTBrc1JVRkJjV3RKY0ZRc1JVRkJSWEZVTEZsQlFVWXNSMEZCWlN4RFFVRndiRWtzUlVGQmMyeEpjbFFzUlVGQlJYTlVMRk5CUVVZc1IwRkJXU3hWUVVGVE9WUXNRMEZCVkN4RlFVRlhReXhEUVVGWUxFVkJRV0Y1UWl4RFFVRmlMRVZCUVdWNFFpeERRVUZtTEVWQlFXbENReXhEUVVGcVFpeEZRVUZ0UWtNc1EwRkJia0lzUlVGQmNVSTdRVUZCUXl4cFFrRkJVMGNzUTBGQlZDeEhRVUZaTzBGQlFVTklMR1ZCUVVkQkxFZEJRVWc3UVVGQlR5eGhRVUZKY1VJc1EwRkJTaXhEUVVGTmVrSXNSVUZCUlN0VUxGRkJRVVlzU1VGQldUVlVMRU5CUVZvc1IwRkJZMGtzUjBGQlpDeEhRVUZyUWs0c1MwRkJSM2RDTEVsQlFVVXNTVUZCU1ZNc1QwRkJUemhTTEV0QlFWZ3NSVUZCUml4RlFVRnRRblpUTEVWQlFVVjNVeXhOUVVGR0xFZEJRVk14VkN4RFFVRTFRaXhGUVVFNFFtdENMRVZCUVVWNVV5eFBRVUZHTEVkQlFWVXpWQ3hEUVVGNFF5eEZRVUV3UTB3c1RVRkJTWFZDTEVWQlFVVXdVeXhMUVVGR0xFZEJRVkZxVlN4RFFVRmFMRU5CUVRGRExFVkJRWGxFZDBJc1RVRkJTVVFzUlVGQlJUSlRMRTFCUVVZc1IwRkJVekZUTEVOQlFXSXNRMEZCZWtRc1JVRkJlVVY2UWl4TlFVRkpkMElzUlVGQlJUUlRMRWRCUVVZc1IwRkJUWEJWTEVOQlFWWXNRMEZCTlVVc1NVRkJNRVpOTEVkQlFUVkhPMEZCUVdkSUxFOUJRV3gzU1N4RlFVRnRkMGxETEVWQlFVVnZUaXhoUVVGR0xFZEJRV2RDTEZsQlFWVTdRVUZCUXl4cFFrRkJVelZPTEVOQlFWUXNSMEZCV1R0QlFVRkRMR1ZCUVVzc1EwRkJUQ3hMUVVGVFVTeERRVUZVTEVsQlFWa3NVMEZCVDBFc1EwRkJia0lzU1VGQmMwSkJMRU5CUVhSQ0xFdEJRVEJDTEV0QlFVc3NRMEZCVEN4TFFVRlRRU3hGUVVGRmNWUXNXVUZCV0N4SlFVRjVRbkpVTEVWQlFVVnhWQ3haUVVGR0xFVkJRWHBDTEVWQlFUQkRjbFFzUlVGQlJYRlVMRmxCUVVZc1MwRkJhVUp5VkN4RlFVRkZiMVFzV1VGQlJpeERRVUZsTlZJc1RVRkJhRU1zUzBGQmVVTjRRaXhGUVVGRlF5eE5RVUZHTEVOQlFWTnZUaXh0UWtGQlZDeEpRVUU0UW5KT0xFVkJRVVU0VkN4TlFVRkdMRVZCUVRsQ0xFVkJRWGxET1ZRc1JVRkJSVmtzU1VGQlJpeERRVUZQTEdWQlFWQXNSVUZCZFVKYUxFTkJRWFpDTEVOQlFXeEdMRU5CUVhCRk8wRkJRV3RNTEZkQlFVVnZWQ3haUVVGR0xFZEJRV1Z3VkN4RlFVRkZiMFFzVTBGQlJpeERRVUZaTWs4c1NVRkJXaXhEUVVGcFFpeExRVUZxUWl4RFFVRm1MRU5CUVhWRExFdEJRVWtzU1VGQlNYUlRMRWxCUVVVc1EwRkJWaXhGUVVGWlFTeEpRVUZGVHl4RlFVRkZiMVFzV1VGQlJpeERRVUZsTlZJc1RVRkJOMElzUlVGQmIwTXZRaXhIUVVGd1F6dEJRVUYzUTA4c1dVRkJSWE5VTEZOQlFVWXNRMEZCV1hSVUxFVkJRVVZ2VkN4WlFVRkdMRU5CUVdVelZDeERRVUZtTEVOQlFWb3NSVUZCT0VKUExFVkJRVVZ2VkN4WlFVRkdMRU5CUVdVelZDeERRVUZtTEVWQlFXdENjMVVzVlVGQmJFSXNTVUZCT0VJdlZDeEZRVUZGYjFRc1dVRkJSaXhEUVVGbE0xUXNRMEZCWml4RlFVRnJRblZWTEZsQlFXeENMRU5CUVN0Q0xFdEJRUzlDTEVOQlFUVkVMRVZCUVd0SGFGVXNSVUZCUlc5VUxGbEJRVVlzUTBGQlpUTlVMRU5CUVdZc1JVRkJhMEp0VlN4TlFVRnNRaXhKUVVFd1FqVlVMRVZCUVVWdlZDeFpRVUZHTEVOQlFXVXpWQ3hEUVVGbUxFVkJRV3RDZFZVc1dVRkJiRUlzUTBGQkswSXNVVUZCTDBJc1EwRkJOVWdzUlVGQmNVdG9WU3hGUVVGRmIxUXNXVUZCUml4RFFVRmxNMVFzUTBGQlppeEZRVUZyUW10VkxFdEJRV3hDTEVsQlFYbENNMVFzUlVGQlJXOVVMRmxCUVVZc1EwRkJaVE5VTEVOQlFXWXNSVUZCYTBKMVZTeFpRVUZzUWl4RFFVRXJRaXhQUVVFdlFpeERRVUU1VEN4RlFVRnpUeXhEUVVGRExFTkJRWFpQTEVWQlFYbFBlRlVzUTBGQmVrODdRVUZCZUVNN1FVRkJiMUlzVDBGQmVIaEtMRVZCUVhsNFNsRXNSVUZCUlU4c2FVSkJRVVlzUjBGQmIwSXNTMEZCU3l4RFFVRnNla29zUlVGQmIzcEtVQ3hGUVVGRmFWVXNWMEZCUml4SFFVRmpMRU5CUVVNc1EwRkJiakJLTEVWQlFYRXdTbXBWTEVWQlFVVnJWU3hqUVVGR0xFZEJRV2xDTEVOQlFVTXNRMEZCZGpGS0xFVkJRWGt4U214VkxFVkJRVVZ0VlN4aFFVRkdMRWRCUVdkQ0xGbEJRVlU3UVVGQlF5eGxRVUZQTEV0QlFVc3NRMEZCVEN4TFFVRlRibFVzUlVGQlJVOHNhVUpCUVZnc1NVRkJLMElzUTBGQlF5eERRVUZEVUN4RlFVRkZReXhOUVVGR0xFTkJRVk5ETEZGQlFWZ3NTVUZCYzBJc1EwRkJRMFlzUlVGQlJXbFZMRmRCUVVnc1MwRkJhVUpxVlN4RlFVRkZhVlVzVjBGQlJpeEhRVUZqTEVOQlFVTXNRMEZCWml4RlFVRnBRbXBWTEVWQlFVVlpMRWxCUVVZc1EwRkJUeXhwUWtGQlVDeEZRVUY1UWxvc1EwRkJla0lzUTBGQmFrSXNSVUZCTmtNc1MwRkJTMFFzUjBGQmJrVXNRMEZCTlVRN1FVRkJjMGtzVDBGQk1TOUtMRVZCUVRJdlNrTXNSVUZCUldVc1dVRkJSaXhIUVVGbExGVkJRVk4yUWl4RFFVRlVMRVZCUVZjN1FVRkJRMUVzVlVGQlJVOHNhVUpCUVVZc1MwRkJjMEpRTEVWQlFVVlBMR2xDUVVGR0xFbEJRWEZDTmtZc1lVRkJZWEJITEVWQlFVVlBMR2xDUVVGbUxFTkJRWEpDTEVWQlFYVkVVQ3hGUVVGRmFWVXNWMEZCUml4SFFVRmpMRU5CUVVNc1EwRkJkRVVzUlVGQmQwVnFWU3hGUVVGRlR5eHBRa0ZCUml4SFFVRnZRaXhMUVVGTExFTkJRV3BITEVWQlFXMUhVQ3hGUVVGRldTeEpRVUZHTEVOQlFVOHNaMEpCUVZBc1JVRkJkMEphTEVOQlFYaENMRU5CUVhwSU8wRkJRWEZLTEU5QlFUTnhTeXhGUVVFMGNVdEJMRVZCUVVWdlZTeGhRVUZHTEVkQlFXZENMRlZCUVZNMVZTeERRVUZVTEVWQlFWYzdRVUZCUTFFc1ZVRkJSV3RWTEdOQlFVWXNTMEZCYlVKc1ZTeEZRVUZGVHl4cFFrRkJSaXhKUVVGeFFqWkdMR0ZCUVdGd1J5eEZRVUZGVHl4cFFrRkJaaXhEUVVGeVFpeEZRVUYxUkZBc1JVRkJSV3RWTEdOQlFVWXNSMEZCYVVJc1EwRkJReXhEUVVGNlJTeEZRVUV5UlN4TlFVRkpNVlVzUTBGQlNpeEpRVUZQVVN4RlFVRkZhMVVzWTBGQlJpeEhRVUZwUWl4RFFVRkRMRU5CUVd4Q0xFVkJRVzlDYmxVc1IwRkJNMElzU1VGQlowTkRMRVZCUVVVMFVpeFBRVUZHTEVOQlFWVjVReXhoUVVGV0xFTkJRWGRDTEZsQlFWVTdRVUZCUTNKVkxHZENRVUZKUVN4RlFVRkZhMVVzWTBGQlJpeEhRVUZwUWl4RFFVRkRMRU5CUVd4Q0xFVkJRVzlDYkZVc1JVRkJSV2xWTEZkQlFVWXNSMEZCWTJ4VkxFZEJRV1FzUjBGQmEwSkRMRVZCUVVWbExGbEJRVVlzUlVGQk1VTTdRVUZCTkVRc1UwRkJMMFlzUTBGQk9VZzdRVUZCWjA4c1QwRkJlRFpMTEVWQlFYazJTMllzUlVGQlJUUkdMRmxCUVVZc1IwRkJaU3haUVVGVk8wRkJRVU1zWlVGQlRTeERRVUZETlVZc1JVRkJSWE5WTEZGQlFVWXNRMEZCVnl4RFFVRllMRU5CUVZBN1FVRkJjVUlzVDBGQmVEbExMRVZCUVhrNVMzUlZMRVZCUVVVMlJpeFpRVUZHTEVkQlFXVXNXVUZCVlR0QlFVRkRMR1ZCUVUwc1EwRkJRemRHTEVWQlFVVnpWU3hSUVVGR0xFTkJRVmQwVlN4RlFVRkZjMVVzVVVGQlJpeERRVUZYT1ZNc1RVRkJXQ3hIUVVGclFpeERRVUUzUWl4RFFVRlFPMEZCUVhWRExFOUJRVEZvVEN4RlFVRXlhRXg0UWl4RlFVRkZkVlVzWjBKQlFVWXNSMEZCYlVJc1dVRkJWVHRCUVVGRExGbEJRVWt2VlN4RFFVRktPMEZCUVVFc1dVRkJUVU1zU1VGQlJTeEZRVUZTTzBGQlFVRXNXVUZCVjNsQ0xFbEJRVVVzUTBGQllpeERRVUZsTEVsQlFVY3NWMEZCVTJ4Q0xFVkJRVVZETEUxQlFVWXNRMEZCVTNkTExHRkJRV3hDTEVsQlFXbERla3NzUlVGQlJVTXNUVUZCUml4RFFVRlRkMHNzWVVGQlZDeEhRVUYxUWl4RFFVRXpSQ3hGUVVFMlJDeExRVUZKYWt3c1NVRkJSU3hEUVVGT0xFVkJRVkZCTEVsQlFVVkxMRXRCUVVzeVZTeEpRVUZNTEVOQlFWVjRWU3hGUVVGRlF5eE5RVUZHTEVOQlFWTjNTeXhoUVVGdVFpeERRVUZXTEVWQlFUUkRha3dzUjBGQk5VTXNSVUZCWjBRN1FVRkJReXhqUVVGSlJTeEpRVUZGVFN4RlFVRkZTeXhYUVVGR0xFZEJRV05pTEVOQlFYQkNMRU5CUVhOQ0xFbEJRVWRGTEVsQlFVVk5MRVZCUVVWSExFMUJRVVlzUTBGQlUzRkNMRTFCUVdRc1JVRkJjVUlzVFVGQlRTOUNMRVZCUVVVeVF5eEpRVUZHTEVOQlFVOXdReXhGUVVGRlJ5eE5RVUZHTEVOQlFWTkRMRVZCUVZRc1EwRkJXVllzUTBGQldpeEZRVUZsTEVOQlFXWXNRMEZCVUR0QlFVRXdRaXhUUVVGNlRDeE5RVUU0VEVRc1JVRkJSVEpETEVsQlFVWXNRMEZCVDNCRExFVkJRVVZITEUxQlFVWXNRMEZCVTBNc1JVRkJWQ3hEUVVGWlNpeEZRVUZGU3l4WFFVRmtMRVZCUVRKQ0xFTkJRVE5DTEVOQlFWQXNSVUZCYzBNc1MwRkJTV0lzU1VGQlJTeERRVUZPTEVWQlFWRkJMRWxCUVVWRExFVkJRVVVyUWl4TlFVRmFMRVZCUVcxQ2FFTXNSMEZCYmtJN1FVRkJkVUlzWTBGQlJ5eExRVUZMTEVOQlFVd3NTMEZCVTBNc1JVRkJSVVFzUTBGQlJpeERRVUZhTEVWQlFXbENPMEZCUVVNc1owSkJRVWxITEVsQlFVVkdMRVZCUVVWRUxFTkJRVVlzUlVGQlMybFdMRmxCUVZnc1EwRkJkMEoyVkN4SlFVRkZka0lzU1VGQlJYVkNMRU5CUVVZc1IwRkJTWFpDTEVOQlFVb3NSMEZCVFhWQ0xFTkJRVkk3UVVGQlZUdEJRVUV6UlN4VFFVRXlSVUVzUzBGQlIyeENMRVZCUVVVMFVpeFBRVUZHTEVOQlFWVk5MRWRCUVZZc1EwRkJZeXhSUVVGa0xFVkJRWFZDYUZJc1NVRkJSU3hKUVVGNlFpeERRVUZJTzBGQlFXdERMRTlCUVhvMVRDeEZRVUV3TlV4c1FpeEZRVUZGTUZVc2JVSkJRVVlzUjBGQmMwSXNXVUZCVlR0QlFVRkRMRmxCUVVsc1ZpeERRVUZLTEVWQlFVMURMRU5CUVU0c1EwRkJVVVFzU1VGQlJTeExRVUZMTEVOQlFVd3NTMEZCVTFFc1JVRkJSVU1zVFVGQlJpeERRVUZUSzBRc1MwRkJiRUlzUjBGQmQwSm9SU3hGUVVGRlF5eE5RVUZHTEVOQlFWTXJSQ3hMUVVGcVF5eEhRVUYxUTJoRkxFVkJRVVZ2UkN4VFFVRkdMRU5CUVZrc1EwRkJXaXhGUVVGbGRWSXNWMEZCZUVRc1JVRkJiMFZzVml4SlFVRkZMRXRCUVVzc1EwRkJUQ3hMUVVGVFR5eEZRVUZGUXl4TlFVRkdMRU5CUVZOblJTeE5RVUZzUWl4SFFVRjVRbXBGTEVWQlFVVkRMRTFCUVVZc1EwRkJVMmRGTEUxQlFXeERMRWRCUVhsRGFrVXNSVUZCUlc5RUxGTkJRVVlzUTBGQldTeERRVUZhTEVWQlFXVjNVaXhaUVVFNVNDeEZRVUV5U1N4TlFVRkpjRllzUTBGQlNpeEpRVUZQVVN4RlFVRkZNRU1zV1VGQlJpeEZRVUZRTEVsQlFYbENMRTFCUVVscVJDeERRVUZLTEVsQlFVOHNRMEZCUTA4c1JVRkJSVEJETEZsQlFVWXNSVUZCYWtNc1MwRkJiMFJzUkN4SlFVRkZRU3hKUVVGRk1rZ3NVMEZCVTI1SUxFVkJRVVZ2UkN4VFFVRkdMRU5CUVZrNFR5eEhRVUZhTEVOQlFXZENMR05CUVdoQ0xFTkJRVlFzUlVGQmVVTXNSVUZCZWtNc1EwRkJSaXhIUVVFclF5OUxMRk5CUVZOdVNDeEZRVUZGYjBRc1UwRkJSaXhEUVVGWk9FOHNSMEZCV2l4RFFVRm5RaXhsUVVGb1FpeERRVUZVTEVWQlFUQkRMRVZCUVRGRExFTkJRV3BFTEVWQlFTdEdlbE1zU1VGQlJVRXNTVUZCUlRCSUxGTkJRVk51U0N4RlFVRkZiMFFzVTBGQlJpeERRVUZaT0U4c1IwRkJXaXhEUVVGblFpeGhRVUZvUWl4RFFVRlVMRVZCUVhkRExFVkJRWGhETEVOQlFVWXNSMEZCT0VNdlN5eFRRVUZUYmtnc1JVRkJSVzlFTEZOQlFVWXNRMEZCV1RoUExFZEJRVm9zUTBGQlowSXNaMEpCUVdoQ0xFTkJRVlFzUlVGQk1rTXNSVUZCTTBNc1EwRkJMMGtzUlVGQk9FeHNVeXhGUVVGRlowVXNTMEZCUml4SFFVRlJlRVVzUTBGQmRFMHNSVUZCZDAxUkxFVkJRVVZwUlN4TlFVRkdMRWRCUVZONFJTeERRVUZxVGl4RlFVRnRUazhzUlVGQlJUWlZMRWxCUVVZc1IwRkJUemRWTEVWQlFVVXdReXhaUVVGR0xFdEJRV2xDTVVNc1JVRkJSV2RGTEV0QlFXNUNMRWRCUVhsQ2FFVXNSVUZCUldsRkxFMUJRWHBUTEVOQlFUTkpPMEZCUVRSaUxFOUJRUzh6VFN4RlFVRm5ORTFxUlN4RlFVRkZPRlVzWjBKQlFVWXNSMEZCYlVJc1dVRkJWVHRCUVVGRE9WVXNWVUZCUlVjc1RVRkJSaXhIUVVGVFNDeEZRVUZGTkZJc1QwRkJSaXhEUVVGVlF5eFJRVUZXTEVOQlFXMUNMRTFCUVVrM1VpeEZRVUZGUXl4TlFVRkdMRU5CUVZOdlJDeFZRVUZvUXl4RFFVRlVMRVZCUVhGRWNrUXNSVUZCUlhOVkxGRkJRVVlzUjBGQlZ5eEZRVUZvUlN4RlFVRnRSWFJWTEVWQlFVVXJWU3hWUVVGR0xFZEJRV0VzUlVGQmFFWXNSVUZCYlVZdlZTeEZRVUZGWjFZc1pVRkJSaXhIUVVGclFpeEZRVUZ5Unl4RFFVRjNSeXhKUVVGSmVGWXNRMEZCU2p0QlFVRkJMRmxCUVUxRExFbEJRVVZQTEVWQlFVVkRMRTFCUVVZc1EwRkJVM1ZMTEZsQlFXcENPMEZCUVVFc1dVRkJPRUowU2l4SlFVRkZMRU5CUVVOc1FpeEZRVUZGUXl4TlFVRkdMRU5CUVZNMlN5eHJRa0ZCTVVNN1FVRkJRU3haUVVFMlJIQk1MRWxCUVVVc1EwRkJMMFE3UVVGQlFTeFpRVUZwUlVNc1NVRkJSU3hEUVVGdVJTeERRVUZ4UlN4SlFVRkhMRXRCUVVzc1EwRkJUQ3hMUVVGVFN5eEZRVUZGTmxVc1NVRkJaQ3hGUVVGdFFqdEJRVUZETEhOQ1FVRlZMRTlCUVU5d1ZpeERRVUZxUWl4SlFVRnZRa0VzUlVGQlJYbElMRTlCUVVZc1EwRkJWU3hIUVVGV0xFdEJRV2RDTEVOQlFYQkRMRXRCUVhkRGVrZ3NTVUZCUlhkV0xGZEJRVmQ0Vml4RlFVRkZlVllzVDBGQlJpeERRVUZWTEVkQlFWWXNSVUZCWXl4RlFVRmtMRU5CUVZnc1NVRkJPRUlzUjBGQk9VSXNSMEZCYTBOc1ZpeEZRVUZGTmxVc1NVRkJPVVVzUjBGQmIwWTNWU3hGUVVGRmJWWXNWMEZCUml4SFFVRmpMRU5CUVVNeFZpeERRVUZ1Unl4RlFVRnhSMDhzUlVGQlJUaEVMRWRCUVVZc1IwRkJUVGxFTEVWQlFVVkhMRTFCUVVZc1EwRkJVeXRTTEVkQlFWUXNRMEZCWVN4RlFVRkRhMFFzV1VGQlZ5eEZRVUZhTEVWQlFXVkRMRmRCUVZVc1JVRkJla0lzUlVGQllpeERRVUZPTEVkQlFXbEVjbFlzUlVGQlJVY3NUVUZCUml4RFFVRlRLMUlzUjBGQlZDeERRVUZoTEVWQlFVTnZSQ3hoUVVGWkxFVkJRV0lzUlVGQlowSkRMR05CUVdFc1JVRkJOMElzUlVGQllpeERRVUYwU2l4RFFVRnhUU3hKUVVGSmVGWXNRMEZCU2l4RFFVRk5ReXhGUVVGRlF5eE5RVUZHTEVOQlFWTjVTeXhsUVVGVUxFZEJRWGxDTEVOQlFYcENMRXRCUVRaQ00wc3NTVUZCUlVZc1MwRkJTME1zUzBGQlRDeERRVUZYUlN4RlFVRkZSeXhOUVVGR0xFTkJRVk54UWl4TlFVRlVMRWRCUVdkQ2VFSXNSVUZCUlVNc1RVRkJSaXhEUVVGVGVVc3NaVUZCY0VNc1RVRkJkVVF4U3l4RlFVRkZSeXhOUVVGR0xFTkJRVk54UWl4TlFVRlVMRWRCUVdkQ2VFSXNSVUZCUlVNc1RVRkJSaXhEUVVGVGVVc3NaVUZCYUVZc1IwRkJaMGN4U3l4RlFVRkZSeXhOUVVGR0xFTkJRVk54UWl4TlFVRjZSeXhIUVVGblNETkNMRXRCUVVzeVZTeEpRVUZNTEVOQlFWVjRWU3hGUVVGRlJ5eE5RVUZHTEVOQlFWTnhRaXhOUVVGVUxFZEJRV2RDZUVJc1JVRkJSVU1zVFVGQlJpeERRVUZUZVVzc1pVRkJia01zU1VGQmIwUXhTeXhGUVVGRlF5eE5RVUZHTEVOQlFWTjVTeXhsUVVFdlN5eEZRVUVyVEN4WFFVRlRNVXNzUlVGQlJVTXNUVUZCUml4RFFVRlRkMHNzWVVGQmJFSXNTVUZCYVVNc1ZVRkJVWHBMTEVWQlFVVkRMRTFCUVVZc1EwRkJVekJMTEcxQ1FVRnNSQ3hMUVVGM1JUVkxMRWxCUVVWR0xFdEJRVXN5Vml4SFFVRk1MRU5CUVZONlZpeERRVUZVTEVWQlFWZERMRVZCUVVWRExFMUJRVVlzUTBGQlUzZExMR0ZCUVZRc1IwRkJkVUo2U3l4RlFVRkZReXhOUVVGR0xFTkJRVk41U3l4bFFVRXpReXhEUVVFeFJTeERRVUUxVGl4RlFVRnZWeXhKUVVGSmVrb3NRMEZCU2p0QlFVRkJMR05CUVUxUkxFbEJRVVY2UWl4RlFVRkZReXhOUVVGR0xFTkJRVk41U3l4bFFVRnFRanRCUVVGQkxHTkJRV2xEY2trc1NVRkJSWFJETEVsQlFVVXdRaXhEUVVGeVF6dEJRVUZCTEdOQlFYVkROa01zU1VGQlJXcERMRXRCUVVkeVF5eEZRVUZGUXl4TlFVRkdMRU5CUVZONVN5eGxRVUZVTEVkQlFYbENja2tzUTBGQmVrSXNSMEZCTWtKeVF5eEZRVUZGUnl4TlFVRkdMRU5CUVZOeFFpeE5RVUYyUXl4RFFVRjZReXhEUVVGM1JpeExRVUZKYUVNc1NVRkJSU3hEUVVGT0xFVkJRVkZCTEVsQlFVVlJMRVZCUVVWSExFMUJRVVlzUTBGQlUzRkNMRTFCUVc1Q0xFVkJRVEJDYUVNc1IwRkJNVUlzUlVGQk9FSTdRVUZCUTNsQ0xHZENRVUZGTEVOQlFVWXNRMEZCU1N4SlFVRkpiVVVzU1VGQlJYQkdMRVZCUVVWSExFMUJRVVlzUTBGQlUwTXNSVUZCVkN4RFFVRlpXaXhEUVVGYUxFTkJRVTRzUTBGQmNVSXNTVUZCUjFFc1JVRkJSVU1zVFVGQlJpeERRVUZUZVVzc1pVRkJWQ3hIUVVGNVFpeERRVUUxUWl4RlFVRTRRanRCUVVGRExHdENRVUZKZWtRc1EwRkJTaXhGUVVGTlNTeERRVUZPTEVWQlFWRkhMRU5CUVZJc1EwRkJWU3hoUVVGWGVFZ3NSVUZCUlVNc1RVRkJSaXhEUVVGVE1Fc3NiVUpCUVhCQ0xFbEJRWGxEZEVRc1NVRkJSWGhJTEV0QlFVdERMRXRCUVV3c1EwRkJWMDRzU1VGQlJXbERMRU5CUVdJc1EwRkJSaXhGUVVGclFpdEdMRWxCUVVWb1NTeEpRVUZGTmtnc1NVRkJSVFZHTEVOQlFYaENMRVZCUVRCQ0xFTkJRVU0wUml4SlFVRkZMME1zUTBGQlJpeEpRVUZMSzBNc1RVRkJTUzlETEVOQlFVb3NTVUZCVDJ0RUxFMUJRVWt2Uml4SlFVRkZMRU5CUVc1Q0xFdEJRWFZDTEVWQlFVVXJSaXhEUVVGR0xFbEJRVXN2Uml4RFFVRTFRaXhMUVVGblF5dEdMRWxCUVVVc1EwRkJSaXhGUVVGSlNDeEhRVUZ3UXl4RFFVRXhRaXhGUVVGdFJVb3NTVUZCUlVrc1NVRkJSVWNzU1VGQlJYcElMRU5CUVVZc1IwRkJTVEJDTEVOQlFUTkZMRVZCUVRaRk1rUXNSVUZCUlRoTkxFZEJRVVlzUTBGQlRTeEZRVUZETERaQ1FVRTBRbXBNTEVOQlFUZENMRVZCUVN0Q0xEQkNRVUY1UWtFc1EwRkJlRVFzUlVGQk1FUXNhMEpCUVdsQ1FTeERRVUV6UlN4RlFVRTJSU3hwUWtGQlowSkJMRU5CUVRkR0xFVkJRU3RHZDA4c1QwRkJUWGhQTEVOQlFYSkhMRVZCUVU0c1EwRkJkRWdzUzBGQmRVOVBMRWxCUVVVelNDeExRVUZMUXl4TFFVRk1MRU5CUVZkT0xFbEJRVVUyUXl4RFFVRmlMRU5CUVVZc1JVRkJhMEpuUml4SlFVRkZOMGdzU1VGQlJXZEpMRWxCUVVWdVJpeERRVUV2VUN4SFFVRnJVU3RETEVWQlFVVTRUU3hIUVVGR0xFTkJRVTBzWVVGQlYyeFRMRVZCUVVVd1F5eFpRVUZHTEV0QlFXbENMRXRCUVdwQ0xFZEJRWFZDTEUxQlFXeERMRU5CUVU0c1JVRkJaMFFzVFVGQlNUaEZMRU5CUVVvc1NVRkJUM2hJTEVWQlFVVkRMRTFCUVVZc1EwRkJVM1ZMTEZsQlFXaENMRWxCUVRoQ2VFc3NSVUZCUlVNc1RVRkJSaXhEUVVGVGRVc3NXVUZCVkN4SFFVRnpRaXhKUVVGd1J5eEZRVUV3UjJ4TExFbEJRVEZITEVOQlFTdEhMRzlDUVVFdlJ5eEZRVUZ2U1N0SExFTkJRWEJKTEVWQlFYVkpMMGNzU1VGQmRra3NRMEZCTkVrc2FVSkJRVFZKTEVWQlFUaEthMGdzUTBGQk9Vb3NRMEZCYkZFN1FVRkJiV0VzZDBKQlFWTndReXhGUVVGRk9FMHNSMEZCUml4RFFVRk5MRk5CUVU0c1EwRkJWQ3hMUVVFMFFpeFhRVUZUYkZNc1JVRkJSVU1zVFVGQlJpeERRVUZUZDBzc1lVRkJiRUlzU1VGQmFVTjRTaXhKUVVGRmFrSXNSVUZCUlRCRExGbEJRVVlzUzBGQmFVSXdReXhGUVVGRmMxRXNWVUZCUml4RFFVRmhMRU5CUVVNc1EwRkJaQ3hEUVVGcVFpeEhRVUZyUTNSUkxFVkJRVVYxVVN4WFFVRkdMRU5CUVdNc1EwRkJReXhEUVVGbUxFTkJRWEJETEVWQlFYTkVNMVlzUlVGQlJVTXNUVUZCUml4RFFVRlRLMHNzV1VGQlZDeExRVUYzUWk5S0xFbEJRVVZ5UWl4RlFVRkZjVUlzUTBGQlJpeERRVUV4UWl4RFFVRjJSaXhMUVVGNVNFRXNTVUZCUlN4RFFVRkRha0lzUlVGQlJUWlZMRWxCUVVZc1IwRkJUeXhEUVVGRE4xVXNSVUZCUlVNc1RVRkJSaXhEUVVGVGQwc3NZVUZCVkN4SFFVRjFRaXhEUVVGNFFpeEpRVUV5UW1oTUxFTkJRVzVETEVsQlFYTkRUeXhGUVVGRlF5eE5RVUZHTEVOQlFWTjNTeXhoUVVGcVJDeEZRVUVyUkhwTExFVkJRVVZETEUxQlFVWXNRMEZCVXl0TExGbEJRVlFzUzBGQmQwSXZTaXhKUVVGRmNrSXNSVUZCUlhGQ0xFTkJRVVlzUTBGQk1VSXNRMEZCTDBRc1JVRkJLMFpxUWl4RlFVRkZNRU1zV1VGQlJpeExRVUZwUWpGRExFVkJRVVZITEUxQlFVWXNRMEZCVTFnc1EwRkJWQ3hGUVVGWk1GUXNTMEZCV2l4RFFVRnJRbXhRTEV0QlFXeENMRWRCUVhkQ0wwTXNTVUZCUlN4SlFVRXpReXhIUVVGblJHcENMRVZCUVVWSExFMUJRVVlzUTBGQlUxZ3NRMEZCVkN4RlFVRlpNRlFzUzBGQldpeERRVUZyUW1wUUxFMUJRV3hDTEVkQlFYbENhRVFzU1VGQlJTeEpRVUZ1VXl4SFFVRjVVMnBDTEVWQlFVVkhMRTFCUVVZc1EwRkJVMWdzUTBGQlZDeEZRVUZaYjFjc1pVRkJXaXhIUVVFMFFqTlZMRU5CUVhKVkxFVkJRWFZWYWtJc1JVRkJSV2RXTEdWQlFVWXNRMEZCYTBJMVV5eEpRVUZzUWl4RFFVRjFRbTVDTEVOQlFYWkNMRU5CUVhaVkxFVkJRV2xYYWtJc1JVRkJSVU1zVFVGQlJpeERRVUZUTkVzc1kwRkJWQ3hKUVVGNVFqTktMRWxCUVVWQkxFbEJRVVZFTEVsQlFVVXNRMEZCU2l4SFFVRk5ka0lzU1VGQlJTeERRVUZTTEVkQlFWVkVMRU5CUVZvc1JVRkJZeXhOUVVGSlF5eERRVUZLTEVsQlFVOHNUVUZCU1VZc1EwRkJXQ3hMUVVGbE1FSXNTVUZCUlVFc1NVRkJSV3hDTEVWQlFVVTJWU3hKUVVGR0xFZEJRVThzUTBGQlZDeEhRVUZYY0ZZc1EwRkJOVUlzUTBGQlpDeEZRVUUyUXl4TlFVRkpSQ3hEUVVGS0xFdEJRVkV3UWl4SlFVRkZRU3hKUVVGRmJFSXNSVUZCUlRaVkxFbEJRVVlzUjBGQlR5eERRVUZVTEVkQlFWZHdWaXhEUVVGeVFpeERRVUUzUXl4RlFVRnhSVWtzUzBGQlMzbEdMRWRCUVV3c1EwRkJVM0JGTEVOQlFWUXNTVUZCV1N4SlFVRmFMRXRCUVcxQ1FTeEpRVUZGTEVOQlFYSkNMRU5CUVhKRkxFVkJRVFpHZGtJc1NVRkJSVXNzUlVGQlJVTXNUVUZCUml4RFFVRlRNa3NzWTBGQldDeEpRVUV5UWl4RFFVRXpRaXhKUVVFNFFqVkxMRVZCUVVWelZTeFJRVUZHTEVOQlFWZHNVeXhKUVVGWUxFTkJRV2RDYkVJc1EwRkJhRUlzUTBGQk0wZ3NSVUZCT0Vsc1FpeEZRVUZGSzFVc1ZVRkJSaXhEUVVGaE0xTXNTVUZCWWl4RFFVRnJRbXhDTEVOQlFXeENMRU5CUVhaTExFdEJRVGhNZGtJc1NVRkJSVXNzUlVGQlJVTXNUVUZCUml4RFFVRlRNa3NzWTBGQldDeEpRVUV5UWl4RFFVRXpRaXhKUVVFNFFqVkxMRVZCUVVWelZTeFJRVUZHTEVOQlFWZHNVeXhKUVVGWUxFTkJRV2RDYkVJc1EwRkJhRUlzUTBGQk9VSXNSVUZCYVVSc1FpeEZRVUZGSzFVc1ZVRkJSaXhEUVVGaE0xTXNTVUZCWWl4RFFVRnJRbXhDTEVOQlFXeENMRU5CUVdwRUxFVkJRWE5GUVN4SlFVRkZRU3hKUVVGRlJDeERRVUZHTEVkQlFVbDRRaXhEUVVFeFVTeERRVUZxVnl4RlFVRTRiVUpQTEVWQlFVVnRWaXhYUVVGR0xFbEJRV1ZzVlN4SlFVRkZlRUlzUTBGQkwyNUNMRVZCUVdsdlFrTXNTVUZCUlhWQ0xFTkJRVzV2UWl4RlFVRnhiMEowUWl4SFFVRnFjVUk3UVVGQmMzRkNMR0ZCUVVWM1ZpeFhRVUZHTEVkQlFXTjBWaXhMUVVGTE1sWXNSMEZCVEN4RFFVRlRlRllzUlVGQlJXMVdMRmRCUVZnc1JVRkJkVUp1Vml4RlFVRkZObFVzU1VGQmVrSXNTVUZCSzBJM1ZTeEZRVUZGUXl4TlFVRkdMRU5CUVZNNFN5eHBRa0ZCZEVRc1EwRkJkMFVzU1VGQlNXMUdMRU5CUVVvc1EwRkJUU3hKUVVGSGJGRXNSVUZCUlRoRUxFZEJRVVlzU1VGQlR6bEVMRVZCUVVWdFV5eFJRVUZVTEV0QlFXOUNMRmxCUVZWdVV5eEZRVUZGUXl4TlFVRkdMRU5CUVZOMVNTeE5RVUZ1UWl4SlFVRXlRaXhuUWtGQlkzaEpMRVZCUVVWRExFMUJRVVlzUTBGQlUzVkpMRTFCUVhSRkxFdEJRU3RGZUVrc1JVRkJSVFJTTEU5QlFVWXNRMEZCVlUwc1IwRkJWaXhEUVVGakxFVkJRVU5zVHl4UFFVRk5hRVVzUlVGQlJXMVdMRmRCUVVZc1IwRkJZMjVXTEVWQlFVVkRMRTFCUVVZc1EwRkJVM1ZMTEZsQlFYWkNMRWRCUVc5RExFbEJRVE5ETEVWQlFXUXNRMEZCTDBVc1JVRkJLMGw0U3l4RlFVRkZkMUlzVDBGQlJpeERRVUZWUXl4UFFVRldMRWxCUVcxQ0xFTkJRVU42VWl4RlFVRkZReXhOUVVGR0xFTkJRVk54U1N4alFVRTNRaXhMUVVFNFEzUkpMRVZCUVVVd1F5eFpRVUZHTEV0QlFXbENNVU1zUlVGQlJUUlNMRTlCUVVZc1EwRkJWVTBzUjBGQlZpeERRVUZqTEVWQlFVTnNUeXhQUVVGTmFFVXNSVUZCUlcxV0xGZEJRVVlzUjBGQlkyNVdMRVZCUVVWRExFMUJRVVlzUTBGQlUzVkxMRmxCUVhaQ0xFZEJRVzlETEVsQlFUTkRMRVZCUVdRc1EwRkJha0lzUjBGQmFVWjRTeXhGUVVGRk5GSXNUMEZCUml4RFFVRlZUU3hIUVVGV0xFTkJRV01zUlVGQlEycFBMRkZCUVU5cVJTeEZRVUZGYlZZc1YwRkJSaXhIUVVGamJsWXNSVUZCUlVNc1RVRkJSaXhEUVVGVGRVc3NXVUZCZGtJc1IwRkJiME1zU1VGQk5VTXNSVUZCWkN4RFFVRXZTQ3hEUVVFdlNTeEZRVUZuVm5oTExFVkJRVVZETEUxQlFVWXNRMEZCVTNsTExHVkJRVlFzUjBGQmVVSXNRMEZCZWtJc1MwRkJOa0l4U3l4RlFVRkZiVllzVjBGQlJpeEhRVUZqTEVOQlFVTnNWU3hKUVVGRmFrSXNSVUZCUlVNc1RVRkJSaXhEUVVGVGRVc3NXVUZCV2l4SlFVRXdRbnBMTEVOQlFYaERMRVZCUVRCRFF5eEZRVUZGYlZZc1YwRkJSaXhIUVVGamRGWXNTMEZCU3pKVkxFbEJRVXdzUTBGQlZYaFZMRVZCUVVWdFZpeFhRVUZHTEVkQlFXTnVWaXhGUVVGRlF5eE5RVUZHTEVOQlFWTjVTeXhsUVVGcVF5eEpRVUZyUkRGTExFVkJRVVZETEUxQlFVWXNRMEZCVTNWTExGbEJRVzVJTEVWQlFXZEplRXNzUlVGQlJUQkRMRmxCUVVZc1MwRkJhVUl4UXl4RlFVRkZORklzVDBGQlJpeERRVUZWVFN4SFFVRldMRU5CUVdNc1JVRkJRMnhQTEU5QlFVMW9SU3hGUVVGRmJWWXNWMEZCUml4SFFVRmpibFlzUlVGQlJVTXNUVUZCUml4RFFVRlRkVXNzV1VGQmRrSXNSMEZCYjBNc1NVRkJNME1zUlVGQlpDeERRVUZxUWl4SFFVRnBSbmhMTEVWQlFVVTBVaXhQUVVGR0xFTkJRVlZOTEVkQlFWWXNRMEZCWXl4RlFVRkRhazhzVVVGQlQycEZMRVZCUVVWdFZpeFhRVUZHTEVkQlFXTnVWaXhGUVVGRlF5eE5RVUZHTEVOQlFWTjFTeXhaUVVGMlFpeEhRVUZ2UXl4SlFVRTFReXhGUVVGa0xFTkJRV3BPTEVWQlFXdFNlRXNzUlVGQlJVTXNUVUZCUml4RFFVRlRORXNzWTBGQmVGUXNRMEZCYmxZc1JVRkJNbkJDTzBGQlFVTXNhVUpCUVVseFJpeEpRVUZGTEVWQlFVWXNSVUZCU3pGUkxFbEJRVVVzUTBGQldDeEZRVUZoUVN4SlFVRkZVU3hGUVVGRmMxVXNVVUZCUml4RFFVRlhPVk1zVFVGQk1VSXNSVUZCYVVOb1F5eEhRVUZxUXp0QlFVRnhRMUVzWjBKQlFVVnpWU3hSUVVGR0xFTkJRVmM1VlN4RFFVRllMRWxCUVdOUkxFVkJRVVZ0Vml4WFFVRkdMRWRCUVdOdVZpeEZRVUZGYzFVc1VVRkJSaXhEUVVGWExFTkJRVmdzUTBGQk5VSXNTVUZCTWtOd1JTeEZRVUZGT1U0c1NVRkJSaXhEUVVGUGNFTXNSVUZCUlhOVkxGRkJRVVlzUTBGQlZ6bFZMRU5CUVZnc1EwRkJVQ3hEUVVFelF6dEJRVUZ5UXl4aFFVRnpSMUVzUlVGQlJYTlZMRkZCUVVZc1IwRkJWM0JGTEVOQlFWZzdRVUZCWVN4bFFVRkhMRU5CUVVOc1VTeEZRVUZGUXl4TlFVRkdMRU5CUVZNMFN5eGpRVUZpTEVWQlFUUkNPMEZCUVVNc2FVSkJRVWx4Uml4SlFVRkZMRVZCUVVZc1JVRkJTekZSTEVsQlFVVXNRMEZCV0N4RlFVRmhRU3hKUVVGRlVTeEZRVUZGYzFVc1VVRkJSaXhEUVVGWE9WTXNUVUZCTVVJc1JVRkJhVU5vUXl4SFFVRnFRenRCUVVGeFExRXNaMEpCUVVWelZTeFJRVUZHTEVOQlFWYzVWU3hEUVVGWUxFdEJRV1ZSTEVWQlFVVnRWaXhYUVVGR0xFZEJRV051Vml4RlFVRkZObFVzU1VGQkwwSXNTVUZCY1VNelJTeEZRVUZGT1U0c1NVRkJSaXhEUVVGUGNFTXNSVUZCUlhOVkxGRkJRVVlzUTBGQlZ6bFZMRU5CUVZnc1EwRkJVQ3hEUVVGeVF6dEJRVUZ5UXl4aFFVRm5SMUVzUlVGQlJYTlZMRkZCUVVZc1IwRkJWM0JGTEVOQlFWZ3NSVUZCWVhKUkxFdEJRVXRETEV0QlFVd3NRMEZCVjBVc1JVRkJSVzFXTEZkQlFVWXNSMEZCWTI1V0xFVkJRVVUyVlN4SlFVRXpRaXhKUVVGcFEyaFdMRXRCUVV0RExFdEJRVXdzUTBGQlYwVXNSVUZCUlhOVkxGRkJRVVlzUTBGQlYzUlZMRVZCUVVWelZTeFJRVUZHTEVOQlFWYzVVeXhOUVVGWUxFZEJRV3RDTEVOQlFUZENMRU5CUVZnc1EwRkJha01zUjBGQk5rVXNRMEZCTjBVc1NVRkJaMFo0UWl4RlFVRkZjMVVzVVVGQlJpeERRVUZYYkZNc1NVRkJXQ3hEUVVGblFuQkRMRVZCUVVWdFZpeFhRVUZHTEVkQlFXTnVWaXhGUVVGRk5sVXNTVUZCYUVNc1EwRkJOMFk3UVVGQmJVa3NhVUpCUVVrM1ZTeEZRVUZGYzFVc1VVRkJSaXhEUVVGWE9WTXNUVUZCWml4TFFVRjNRbmhDTEVWQlFVVnpWU3hSUVVGR0xFZEJRVmNzUTBGQlF5eERRVUZFTEVOQlFXNURMRWRCUVhkRExFMUJRVWwwVlN4RlFVRkZReXhOUVVGR0xFTkJRVk4xU3l4WlFVRmlMRXRCUVRSQ2VFc3NSVUZCUlRCRExGbEJRVVlzUzBGQmFVSXhReXhGUVVGRk9FUXNSMEZCUml4SFFVRk5PVVFzUlVGQlJVY3NUVUZCUml4RFFVRlRLMUlzUjBGQlZDeERRVUZoTEVWQlFVTnJSQ3haUVVGWE0xWXNTVUZCUlN4SlFVRmtMRVZCUVdJc1EwRkJUaXhIUVVGM1EwOHNSVUZCUlVjc1RVRkJSaXhEUVVGVEsxSXNSMEZCVkN4RFFVRmhMRVZCUVVOdlJDeGhRVUZaTjFZc1NVRkJSU3hKUVVGbUxFVkJRV0lzUTBGQmVrUXNSMEZCTkVaUExFVkJRVVZITEUxQlFVWXNRMEZCVXl0U0xFZEJRVlFzUTBGQllTeEZRVUZEY1VRc1kwRkJZVGxXTEVsQlFVVXNTVUZCYUVJc1JVRkJZaXhEUVVGNFNDeERRVUY0UXl4RlFVRnhUVThzUlVGQlJVTXNUVUZCUml4RFFVRlRNRTBzYlVKQlFWUXNTVUZCT0VJelRTeEZRVUZGTmxZc2EwSkJRVVlzUlVGQmJrODdRVUZCTUZBN1FVRkJReXhQUVVGNGRWUXNSVUZCZVhWVU4xWXNSVUZCUlRaV0xHdENRVUZHTEVkQlFYRkNMRmxCUVZVN1FVRkJReXhoUVVGSkxFbEJRVWx5Vnl4SlFVRkZMRU5CUVZZc1JVRkJXVUVzU1VGQlJWRXNSVUZCUlVjc1RVRkJSaXhEUVVGVGNVSXNUVUZCZGtJc1JVRkJPRUpvUXl4SFFVRTVRanRCUVVGclExRXNXVUZCUlVjc1RVRkJSaXhEUVVGVFdDeERRVUZVTEVWQlFWbHpWeXhwUWtGQldpeEhRVUU0UWpsV0xFVkJRVVV3UXl4WlFVRkdMRXRCUVdsQ01VTXNSVUZCUlVjc1RVRkJSaXhEUVVGVFdDeERRVUZVTEVWQlFWbDFWeXhWUVVFM1FpeEhRVUYzUXk5V0xFVkJRVVZITEUxQlFVWXNRMEZCVTFnc1EwRkJWQ3hGUVVGWmQxY3NVMEZCYkVZN1FVRkJiRU03UVVGQk9FZ3NUMEZCZGpSVUxFVkJRWGMwVkdoWExFVkJRVVZwVnl4dlFrRkJSaXhIUVVGMVFpeFpRVUZWTzBGQlFVTXNXVUZCU1hwWExFTkJRVW83UVVGQlFTeFpRVUZOUXl4RFFVRk9PMEZCUVVFc1dVRkJVWGxDTEVsQlFVVXNRMEZCVml4RFFVRlpMRWxCUVVkc1FpeEZRVUZGUXl4TlFVRkdMRU5CUVZNMFN5eGpRVUZhTEVWQlFUSkNPMEZCUVVNc1kwRkJTVzVNTEVOQlFVbzdRVUZCUVN4alFVRk5ReXhKUVVGRlN5eEZRVUZGUnl4TlFVRkdMRU5CUVZOSUxFVkJRVVZMTEZkQlFWZ3NSVUZCZDBKMVZpeGxRVUZvUXl4RFFVRm5SQ3hMUVVGSmNGY3NTVUZCUlZFc1JVRkJSVXNzVjBGQlJpeEhRVUZqTEVOQlFYQkNMRVZCUVhOQ1lpeEpRVUZGVVN4RlFVRkZSeXhOUVVGR0xFTkJRVk54UWl4TlFVRnFReXhGUVVGM1EyaERMRWRCUVhoRE8wRkJRVFJEVVN4alFVRkZSeXhOUVVGR0xFTkJRVk5ZTEVOQlFWUXNTMEZCWVN4RFFVRkRSU3hEUVVGa0xFdEJRV3RDUXl4TFFVRkhTeXhGUVVGRlJ5eE5RVUZHTEVOQlFWTllMRU5CUVZRc1JVRkJXVzlYTEdWQlFXWXNSVUZCSzBJeFZTeEhRVUV2UWl4RlFVRnRRM1pDTEVsQlFVVkxMRVZCUVVVMlZTeEpRVUZLTEV0QlFWZHVWaXhKUVVGRkxFTkJRVU1zUTBGQlpDeERRVUZ5UkR0QlFVRTFReXhYUVVGdFNDeExRVUZKUkN4SlFVRkZUeXhGUVVGRlN5eFhRVUZHTEVkQlFXTXNRMEZCY0VJc1JVRkJjMEphTEV0QlFVY3NRMEZCZWtJc1JVRkJNa0pCTEVkQlFUTkNPMEZCUVN0Q1R5eGpRVUZGUnl4TlFVRkdMRU5CUVZOV0xFTkJRVlFzUzBGQllTeERRVUZEUXl4RFFVRmtMRXRCUVd0Q1F5eExRVUZIU3l4RlFVRkZSeXhOUVVGR0xFTkJRVk5XTEVOQlFWUXNSVUZCV1cxWExHVkJRV1lzUlVGQkswSXhWU3hIUVVFdlFpeEZRVUZ0UTNaQ0xFbEJRVVZMTEVWQlFVVTJWU3hKUVVGS0xFdEJRVmR1Vml4SlFVRkZMRU5CUVVNc1EwRkJaQ3hEUVVGeVJEdEJRVUV2UWp0QlFVRnpSeXhUUVVGeVV5eE5RVUV3VXl4TFFVRkpSaXhKUVVGRlVTeEZRVUZGU3l4WFFVRkdMRWRCUVdNc1EwRkJjRUlzUlVGQmMwSmlMRWxCUVVWUkxFVkJRVVZITEUxQlFVWXNRMEZCVTNGQ0xFMUJRV3BETEVWQlFYZERhRU1zUjBGQmVFTTdRVUZCTkVOUkxGbEJRVVVyVlN4VlFVRkdMRU5CUVdGMlZpeERRVUZpTEVsQlFXZENVU3hGUVVGRksxVXNWVUZCUml4RFFVRmhMMVVzUlVGQlJVc3NWMEZCWml4RFFVRm9RaXhIUVVFMFEwd3NSVUZCUlRaVkxFbEJRVGxETEVsQlFXOUVNMVFzUjBGQmNFUTdRVUZCTlVNc1UwRkJiMGNzVDBGQlQwRXNRMEZCVUR0QlFVRlRMRTlCUVRjd1ZTeEZRVUU0TUZWc1FpeEZRVUZGYTFjc2IwSkJRVVlzUjBGQmRVSXNWVUZCVXpGWExFTkJRVlFzUlVGQlZ6dEJRVUZETEZsQlFVY3NTMEZCU3l4RFFVRk1MRXRCUVZOQkxFTkJRVlFzUzBGQllVRXNTVUZCUlZFc1JVRkJSWFZUTEZOQlFVWXNTVUZCWVN4RFFVRTFRaXhIUVVFclFpeE5RVUZKZGxNc1JVRkJSVWNzVFVGQlJpeERRVUZUY1VJc1RVRkJMME1zUlVGQmMwUTdRVUZCUXl4bFFVRkxMRU5CUVV3c1MwRkJVM2hDTEVWQlFVVkhMRTFCUVVZc1EwRkJVeXhEUVVGVUxFVkJRVmt5Vml4cFFrRkJja0lzU1VGQmQwTTVWaXhGUVVGRk5sWXNhMEpCUVVZc1JVRkJlRU1zUTBGQkswUXNTVUZCU1hCWExFbEJRVVVzUTBGQlEwUXNRMEZCVUN4RFFVRlRVU3hGUVVGRk9FUXNSMEZCUml4TFFVRlJja1VzU1VGQlJVUXNRMEZCVml4SFFVRmhVU3hGUVVGRlJ5eE5RVUZHTEVOQlFWTm5WeXhYUVVGVUxFTkJRWEZDYmxjc1JVRkJSVU1zVFVGQlJpeERRVUZUYVU4c2FVSkJRVGxDTEVOQlFXSXNRMEZCT0VRc1MwRkJTU3hKUVVGSmFFNHNTVUZCUlN4RFFVRldMRVZCUVZsQkxFbEJRVVZzUWl4RlFVRkZSeXhOUVVGR0xFTkJRVk54UWl4TlFVRjJRaXhGUVVFNFFrNHNSMEZCT1VJc1JVRkJhME03UVVGQlF5eG5Ra0ZCU1hoQ0xFbEJRVVZOTEVWQlFVVkhMRTFCUVVZc1EwRkJVMlVzUTBGQlZDeERRVUZPTzBGQlFVRXNaMEpCUVd0Q2RrSXNTVUZCUlN4RFFVRkRSaXhMUVVGSFR5eEZRVUZGUXl4TlFVRkdMRU5CUVZNMFN5eGpRVUZVTEVkQlFYZENOMHNzUlVGQlJUUkdMRmxCUVVZc1JVRkJlRUlzUjBGQmVVTXNRMEZCTlVNc1NVRkJLME5zUnl4RlFVRkZiMWNzYVVKQlFXeEVMRXRCUVhORmNGY3NSVUZCUld0WExHVkJRVVlzUjBGQmEwSTFWaXhGUVVGRlF5eE5RVUZHTEVOQlFWTjFTeXhaUVVGcVJ5eERRVUZ3UWl4RFFVRnRTU3hKUVVGSGVFc3NSVUZCUlVNc1RVRkJSaXhEUVVGVE1rMHNjVUpCUVZvc1JVRkJhME03UVVGQlF5eHJRa0ZCU1doT0xFbEJRVVVzUlVGQlJVZ3NTVUZCUlVNc1JVRkJSVzlYTEdsQ1FVRk9MRU5CUVU0N1FVRkJRU3hyUWtGQkswSXZWaXhKUVVGRlNDeEpRVUZGU1N4RlFVRkZaMVlzWlVGQlJpeERRVUZyUWpsVUxFTkJRV3hDTEVOQlFXNURMRU5CUVhkRUxFTkJRVU4wUWl4TFFVRkhMRU5CUVVnc1NVRkJUVUVzU1VGQlJVa3NSVUZCUlRaVkxFbEJRVllzU1VGQlowSTVWU3hKUVVGRkxFTkJRVVlzU1VGQlMwRXNTMEZCUjBNc1JVRkJSVFpWTEVsQlFURkNMRWxCUVdkRGFsWXNTMEZCUnl4RFFVRklMRWxCUVUxSExFdEJRVWRETEVWQlFVVTJWU3hKUVVFMVF5eExRVUZ0UkRkVkxFVkJRVVZITEUxQlFVWXNRMEZCVTBNc1JVRkJWQ3hEUVVGWll5eERRVUZhTEVWQlFXVTRVU3hSUVVGbUxFTkJRWGRDYUZNc1JVRkJSVU1zVFVGQlJpeERRVUZUYVU4c2FVSkJRV3BETEVOQlFXNUVPMEZCUVhWSExHVkJRVVZ6UlN4UlFVRkdMRWRCUVZkNFV5eEZRVUZGT0VRc1IwRkJSaXhIUVVGTkxFTkJRVU51UlN4RFFVRlFMRWRCUVZOQkxFTkJRWEJDTzBGQlFYTkNPMEZCUVVNN1FVRkJReXhQUVVFNU5sWXNSVUZCS3paV1N5eEZRVUZGWjBjc1kwRkJSaXhIUVVGcFFpeFZRVUZUZUVjc1EwRkJWQ3hGUVVGWE8wRkJRVU1zWVVGQlN5eERRVUZNTEV0QlFWTkJMRU5CUVZRc1MwRkJZVUVzU1VGQlJWRXNSVUZCUlhWVExGTkJRVVlzU1VGQllTeERRVUUxUWl4RlFVRXJRaXhKUVVGSk9WTXNTVUZCUlU4c1JVRkJSVFpHTEZsQlFVWXNTMEZCYVVJM1JpeEZRVUZGTkVZc1dVRkJSaXhGUVVGMlFqdEJRVUZCTEZsQlFYZERNVVVzU1VGQlJXeENMRVZCUVVVeVJpeFhRVUUxUXp0QlFVRkJMRmxCUVhkRWFrY3NTVUZCUlUwc1JVRkJSV0VzUzBGQk5VUXNRMEZCYTBVc1RVRkJTWEJDTEVOQlFVb3NTVUZCVDA4c1JVRkJSWGRUTEZGQlFVWXNSMEZCVnl4RFFVRllMRVZCUVdGNFV5eEZRVUZGTWtZc1YwRkJSaXhIUVVGak0wWXNSVUZCUldFc1MwRkJSaXhIUVVGUkxFTkJRVU1zUTBGQk0wTXNTMEZCSzBOaUxFVkJRVVYzVXl4UlFVRkdMRWRCUVZjc1EwRkJRMmhVTEVsQlFVVlJMRVZCUVVVMFJpeFpRVUZHTEVWQlFVZ3NTVUZCY1VKdVJ5eERRVUZvUXl4RlFVRnJRMDhzUlVGQlJUSkdMRmRCUVVZc1IwRkJZek5HTEVWQlFVVjNVeXhSUVVGR0xFbEJRVmtzUTBGQk5VUXNSVUZCT0VSNFV5eEZRVUZGWVN4TFFVRkdMRWRCUVZGaUxFVkJRVVYzVXl4UlFVRkdMRWxCUVZrc1EwRkJha2tzUjBGQmIwbDRVeXhGUVVGRk1rWXNWMEZCUml4SlFVRmxMRU5CUVVONlJTeERRVUZvUWl4SlFVRnRRbXhDTEVWQlFVVlpMRWxCUVVZc1EwRkJUeXhyUWtGQlVDeEZRVUV3UWxvc1EwRkJNVUlzUTBGQmRrb3NSVUZCYjB4QkxFVkJRVVZoTEV0QlFVWXNTVUZCVXl4RFFVRkRia0lzUTBGQlZpeEpRVUZoVFN4RlFVRkZXU3hKUVVGR0xFTkJRVThzV1VGQlVDeEZRVUZ2UWxvc1EwRkJjRUlzUTBGQmFrMHNSVUZCZDA1QkxFVkJRVVZETEUxQlFVWXNRMEZCVXpCTkxHMUNRVUZVTEVsQlFUaENNMDBzUlVGQlJXdFhMRzlDUVVGR0xFTkJRWFZDTVZjc1EwRkJka0lzUTBGQmRGQXNSVUZCWjFKUkxFVkJRVVZaTEVsQlFVWXNRMEZCVHl4WlFVRlFMRVZCUVc5Q1dpeERRVUZ3UWl4RlFVRnpRa0VzUlVGQlJYZFRMRkZCUVhoQ0xFTkJRV2hTTzBGQlFXdFVMRTlCUVM4eFZ5eEZRVUZuTWxkNFV5eEZRVUZGYVVjc2FVSkJRVVlzUjBGQmIwSXNXVUZCVlR0QlFVRkRMRmxCUVVsNlJ5eERRVUZLTzBGQlFVRXNXVUZCVFVNc1EwRkJUanRCUVVGQkxGbEJRVkY1UWl4RFFVRlNPMEZCUVVFc1dVRkJWWGhDTEVsQlFVVk5MRVZCUVVVNFJDeEhRVUZHTEVkQlFVMDVSQ3hGUVVGRmRWTXNVMEZCVWl4SFFVRnJRaXhEUVVGRGRsTXNSVUZCUlhWVExGTkJRV3BETEVOQlFUSkRMRXRCUVVrNVV5eEpRVUZGTEVOQlFVNHNSVUZCVVVFc1NVRkJSVThzUlVGQlJTdFZMRlZCUVVZc1EwRkJZWFpVTEUxQlFYWkNMRVZCUVRoQ0wwSXNSMEZCT1VJN1FVRkJhME1zWlVGQlN5eERRVUZNTEV0QlFWTlBMRVZCUVVVclZTeFZRVUZHTEVOQlFXRjBWaXhKUVVGRkxFTkJRV1lzUTBGQlZDeEhRVUV5UWtNc1MwRkJSMDBzUlVGQlJTdFZMRlZCUVVZc1EwRkJZWFJXTEVOQlFXSXNRMEZCU0N4SlFVRnZRa01zU1VGQlJVMHNSVUZCUlN0VkxGVkJRVVlzUTBGQllYUldMRWxCUVVVc1EwRkJaaXhKUVVGclFpeERRVUZEVHl4RlFVRkZLMVVzVlVGQlJpeERRVUZoZEZZc1NVRkJSU3hEUVVGbUxFbEJRV3RDVHl4RlFVRkZLMVVzVlVGQlJpeERRVUZoZEZZc1EwRkJZaXhEUVVGdVFpeEpRVUZ2UXl4RFFVRTFSU3hIUVVFNFJVUXNTVUZCUlVNc1EwRkJhRVlzUjBGQmEwWkRMRXRCUVVkTkxFVkJRVVVyVlN4VlFVRkdMRU5CUVdGMFZpeERRVUZpTEVOQlFVZ3NTVUZCYjBKRExFbEJRVVZOTEVWQlFVVXJWU3hWUVVGR0xFTkJRV0YwVml4SlFVRkZMRU5CUVdZc1EwRkJkRUlzUzBGQk1FTkVMRWxCUVVWRExFbEJRVVVzUTBGQk9VTXNRMEZCTjBjc1IwRkJPRXBETEV0QlFVZE5MRVZCUVVVclZTeFZRVUZHTEVOQlFXRjBWaXhEUVVGaUxFTkJRVWdzUzBGQmNVSkVMRWxCUVVWRExFTkJRWFpDTEVOQlFUbEtPMEZCUVd4RExGTkJRVEJPVHl4RlFVRkZReXhOUVVGR0xFTkJRVk13VGl4dFFrRkJWQ3hMUVVFclFtNVBMRWxCUVVVc1EwRkJSaXhKUVVGTExFdEJRVXNzUTBGQlRDeExRVUZUUVN4RFFVRTNReXhOUVVGclJFRXNTVUZCUlN4RFFVRndSQ3hIUVVGMVJEQkNMRWxCUVVWeVFpeExRVUZMUXl4TFFVRk1MRU5CUVZkT0xFbEJRVVZSTEVWQlFVVkRMRTFCUVVZc1EwRkJVekpMTEdOQlFYUkNMRU5CUVhwRUxFVkJRU3RHTVVvc1MwRkJSMnhDTEVWQlFVVnpWU3hSUVVGR0xFTkJRVmM1VXl4TlFVRmtMRXRCUVhWQ1RpeEpRVUZGYkVJc1JVRkJSWE5WTEZGQlFVWXNRMEZCVnpsVExFMUJRVmdzUjBGQmEwSXNRMEZCTTBNc1EwRkJMMFlzUlVGQk5rbG9ReXhOUVVGSlVTeEZRVUZGU3l4WFFVRk9MRXRCUVc5Q1RDeEZRVUZGYjFjc1UwRkJSaXhIUVVGWmJGWXNRMEZCV2l4RlFVRmpiRUlzUlVGQlJYRlhMR0ZCUVVZc1IwRkJaMEp5Vnl4RlFVRkZTeXhYUVVGb1F5eEZRVUUwUTB3c1JVRkJSVXNzVjBGQlJpeEhRVUZqWWl4RFFVRXhSQ3hGUVVFMFJGRXNSVUZCUld0SExHRkJRVVlzUlVGQk5VUXNSVUZCT0VWc1J5eEZRVUZGYzFjc1pVRkJSaXhGUVVGc1J5eERRVUUzU1R0QlFVRnZVU3hQUVVGNE5GZ3NSVUZCZVRSWWRGY3NSVUZCUlhOWExHVkJRVVlzUjBGQmEwSXNXVUZCVlR0QlFVRkRkRmNzVlVGQlJYVlhMRk5CUVVZc1IwRkJXWEJRTEZOQlFWTnVTQ3hGUVVGRlJ5eE5RVUZHTEVOQlFWTkRMRVZCUVZRc1EwRkJXVW9zUlVGQlJVc3NWMEZCWkN4RlFVRXlRa01zU1VGQk0wSXNRMEZCWjBNc2VVSkJRV2hETEV0QlFUUkVUaXhGUVVGRlN5eFhRVUYyUlN4RlFVRnRSaXhGUVVGdVJpeERRVUZhTzBGQlFXMUhMRTlCUVhwbldTeEZRVUV3WjFsTUxFVkJRVVZyUnl4aFFVRkdMRWRCUVdkQ0xGbEJRVlU3UVVGQlEyeEhMRlZCUVVWSExFMUJRVVlzUTBGQlUyZFhMRmRCUVZRc1EwRkJjVUp1Vnl4RlFVRkZReXhOUVVGR0xFTkJRVk54UkN4blFrRkJWQ3hIUVVFd1FpeEhRVUV4UWl4SFFVRTRRblJFTEVWQlFVVkRMRTFCUVVZc1EwRkJVMjFQTEdOQlFYWkRMRWRCUVhORUxFZEJRWFJFTEVkQlFUQkVjRThzUlVGQlJVTXNUVUZCUml4RFFVRlRjVThzWTBGQmJrVXNSMEZCYTBZc1IwRkJiRVlzUjBGQmMwWjBUeXhGUVVGRlF5eE5RVUZHTEVOQlFWTm5UeXg1UWtGQkwwWXNSMEZCZVVnc1IwRkJla2dzUjBGQk5raHFUeXhGUVVGRlF5eE5RVUZHTEVOQlFWTnZUeXgxUWtGQmRFa3NSMEZCT0Vvc1IwRkJPVW9zUjBGQmEwdHlUeXhGUVVGRlF5eE5RVUZHTEVOQlFWTnpUeXgxUWtGQmFFMHNSVUZCZVU0c1NVRkJTVGxQTEVsQlFVVlBMRVZCUVVWSExFMUJRVVlzUTBGQlUwTXNSVUZCVkN4RFFVRlpTaXhGUVVGRlN5eFhRVUZrTEVOQlFVNHNRMEZCYVVOYUxFVkJRVVYxVXl4UlFVRkdMRU5CUVZkb1V5eEZRVUZGUXl4TlFVRkdMRU5CUVZOeFJDeG5Ra0ZCY0VJc1IwRkJjME16UkN4RlFVRkZZeXhKUVVGR0xFdEJRVk5vUWl4RlFVRkZLMWNzVVVGQlJpeERRVUZYZUZjc1JVRkJSVU1zVFVGQlJpeERRVUZUYTA4c2JVSkJRWEJDTEVsQlFYbERiazhzUlVGQlJUUlNMRTlCUVVZc1EwRkJWVU1zVVVGQlZpeERRVUZ0UWl4TlFVRkpOMUlzUlVGQlJVTXNUVUZCUml4RFFVRlRiMFFzVlVGQllpeEhRVUYzUWl4UlFVRjRRaXhIUVVGcFEzSkVMRVZCUVVWRExFMUJRVVlzUTBGQlUydFBMRzFDUVVFeFF5eEhRVUU0UkN3MlFrRkJPVVFzUjBGQk5FWnVUeXhGUVVGRmRWY3NVMEZCT1VZc1IwRkJkMGNzU1VGQk0wZ3NSVUZCYVVsMlJTeFJRVUZxU1N4RFFVRXdTV2hUTEVWQlFVVkRMRTFCUVVZc1EwRkJVMmRQTEhsQ1FVRnVTaXhEUVVGNlF5eEhRVUYxVG1wUExFVkJRVVUwVWl4UFFVRkdMRU5CUVZWRExGRkJRVllzUTBGQmJVSXNUVUZCU1RkU0xFVkJRVVZETEUxQlFVWXNRMEZCVTI5RUxGVkJRV0lzUjBGQmQwSXNSMEZCZUVJc1IwRkJORUp5UkN4RlFVRkZReXhOUVVGR0xFTkJRVk5yVHl4dFFrRkJja01zUjBGQmVVUXNORUpCUVhwRUxFZEJRWE5HYms4c1JVRkJSWFZYTEZOQlFYaEdMRWRCUVd0SExFbEJRWEpJTEVWQlFUSklka1VzVVVGQk0wZ3NRMEZCYjBsb1V5eEZRVUZGUXl4TlFVRkdMRU5CUVZOblR5eDVRa0ZCTjBrc1EwRkJhRThzUTBGQmRFTXNRMEZCSzJFc1NVRkJTUzlOTEVsQlFVVjZRaXhGUVVGRloxZ3NTVUZCUml4RFFVRlBMRTFCUVVsNlZ5eEZRVUZGUXl4TlFVRkdMRU5CUVZOdlJDeFZRVUZ3UWl4RlFVRm5RekpQTEZGQlFXaERMRU5CUVhsRGFGTXNSVUZCUlVNc1RVRkJSaXhEUVVGVGJVOHNZMEZCYkVRc1EwRkJUaXhEUVVGM1JYQlBMRVZCUVVWRExFMUJRVVlzUTBGQlUxRXNTVUZCVkN4SlFVRmxMRTFCUVVsVExFVkJRVVZOTEUxQlFYSkNMRXRCUVRoQ1RpeEpRVUZGYkVJc1JVRkJSVWNzVFVGQlJpeERRVUZUUXl4RlFVRlVMRU5CUVZrc1EwRkJXaXhEUVVGR0xFVkJRV2xDWXl4RlFVRkZPRkVzVVVGQlJpeERRVUZYYUZNc1JVRkJSVU1zVFVGQlJpeERRVUZUYlU4c1kwRkJjRUlzUTBGQkwwTXNSVUZCYjBZc1NVRkJTVEZQTEVsQlFVVkVMRVZCUVVWcFdDeEpRVUZHTEVOQlFVOHNUVUZCU1RGWExFVkJRVVZETEUxQlFVWXNRMEZCVTI5RUxGVkJRWEJDTEVWQlFXZERNazhzVVVGQmFFTXNRMEZCZVVOb1V5eEZRVUZGUXl4TlFVRkdMRU5CUVZOeFR5eGpRVUZzUkN4RFFVRk9MRU5CUVhkRkxFbEJRVWQwVHl4RlFVRkZReXhOUVVGR0xFTkJRVk5STEVsQlFWUXNTVUZCWlN4TlFVRkpaaXhGUVVGRk9FSXNUVUZCY2tJc1MwRkJPRUk1UWl4SlFVRkZUU3hGUVVGRlJ5eE5RVUZHTEVOQlFWTkRMRVZCUVZRc1EwRkJXU3hEUVVGRExFTkJRV0lzUTBGQlJpeEZRVUZyUWxZc1JVRkJSWE5UTEZGQlFVWXNRMEZCVjJoVExFVkJRVVZETEUxQlFVWXNRMEZCVTNGUExHTkJRWEJDTEVOQlFXaEVMRWRCUVhGR00wOHNSVUZCUldNc1NVRkJSaXhMUVVGVFV5eEZRVUZGYzFZc1VVRkJSaXhEUVVGWGVGY3NSVUZCUlVNc1RVRkJSaXhEUVVGVGEwOHNiVUpCUVhCQ0xFbEJRWGxEYms4c1JVRkJSVFJTTEU5QlFVWXNRMEZCVlVNc1VVRkJWaXhEUVVGdFFpeE5RVUZKTjFJc1JVRkJSVU1zVFVGQlJpeERRVUZUYjBRc1ZVRkJZaXhIUVVGM1FpeFJRVUY0UWl4SFFVRnBRM0pFTEVWQlFVVkRMRTFCUVVZc1EwRkJVMnRQTEcxQ1FVRXhReXhIUVVFNFJDdzJRa0ZCT1VRc1IwRkJORVpxVGl4RlFVRkZXaXhKUVVGR0xFTkJRVThzZVVKQlFWQXNRMEZCTlVZc1IwRkJPRWdzU1VGQmFrb3NSVUZCZFVvd1VpeFJRVUYyU2l4RFFVRm5TMmhUTEVWQlFVVkRMRTFCUVVZc1EwRkJVMjlQTEhWQ1FVRjZTeXhEUVVGNlF5eEhRVUV5VDNKUExFVkJRVVUwVWl4UFFVRkdMRU5CUVZWRExGRkJRVllzUTBGQmJVSXNUVUZCU1RkU0xFVkJRVVZETEUxQlFVWXNRMEZCVTI5RUxGVkJRV0lzUjBGQmQwSXNSMEZCZUVJc1IwRkJORUp5UkN4RlFVRkZReXhOUVVGR0xFTkJRVk5yVHl4dFFrRkJja01zUjBGQmVVUXNORUpCUVhwRUxFZEJRWE5HYWs0c1JVRkJSVm9zU1VGQlJpeERRVUZQTEhsQ1FVRlFMRU5CUVhSR0xFZEJRWGRJTEVsQlFUTkpMRVZCUVdsS01GSXNVVUZCYWtvc1EwRkJNRXBvVXl4RlFVRkZReXhOUVVGR0xFTkJRVk52VHl4MVFrRkJia3NzUTBGQk0wOHNSVUZCZFdFelR5eEZRVUZGT0Zjc1VVRkJSaXhEUVVGWGVGY3NSVUZCUlVNc1RVRkJSaXhEUVVGVGEwOHNiVUpCUVhCQ0xFbEJRWGxEYms4c1JVRkJSVFJTTEU5QlFVWXNRMEZCVlVNc1VVRkJWaXhEUVVGdFFpeE5RVUZKTjFJc1JVRkJSVU1zVFVGQlJpeERRVUZUYjBRc1ZVRkJZaXhIUVVGM1FpeFJRVUY0UWl4SFFVRnBRM0pFTEVWQlFVVkRMRTFCUVVZc1EwRkJVMnRQTEcxQ1FVRXhReXhIUVVFNFJDdzJRa0ZCT1VRc1IwRkJORVo2VHl4RlFVRkZXU3hKUVVGR0xFTkJRVThzZVVKQlFWQXNRMEZCTlVZc1IwRkJPRWdzU1VGQmFrb3NSVUZCZFVvd1VpeFJRVUYyU2l4RFFVRm5TMmhUTEVWQlFVVkRMRTFCUVVZc1EwRkJVM05QTEhWQ1FVRjZTeXhEUVVGNlF5eEhRVUV5VDNaUExFVkJRVVUwVWl4UFFVRkdMRU5CUVZWRExGRkJRVllzUTBGQmJVSXNUVUZCU1RkU0xFVkJRVVZETEUxQlFVWXNRMEZCVTI5RUxGVkJRV0lzUjBGQmQwSXNSMEZCZUVJc1IwRkJORUp5UkN4RlFVRkZReXhOUVVGR0xFTkJRVk5yVHl4dFFrRkJja01zUjBGQmVVUXNORUpCUVhwRUxFZEJRWE5HZWs4c1JVRkJSVmtzU1VGQlJpeERRVUZQTEhsQ1FVRlFMRU5CUVhSR0xFZEJRWGRJTEVsQlFUTkpMRVZCUVdsS01GSXNVVUZCYWtvc1EwRkJNRXBvVXl4RlFVRkZReXhOUVVGR0xFTkJRVk56VHl4MVFrRkJia3NzUTBGQk0zQkNMRU5CUVhKR0xFVkJRVFkyUW5aUExFVkJRVVU0VWl4dFFrRkJSaXhKUVVGMVFqbFNMRVZCUVVVNFVpeHRRa0ZCUml4RFFVRnpRblJSTEUxQlFYUkNMRWRCUVRaQ0xFTkJRWEFyUWl4RlFVRnpLMEk3UVVGQlF5eGpRVUZKTlVJc1EwRkJTanRCUVVGQkxHTkJRVTFITEVsQlFVVkRMRVZCUVVWRExFMUJRVVlzUTBGQlUxRXNTVUZCVkN4SFFVRmpXaXhMUVVGTE1sVXNTVUZCVEN4RFFVRlZMRU5CUVVONFZTeEZRVUZGUnl4TlFVRkdMRU5CUVZOeFFpeE5RVUZVTEVkQlFXZENMRWxCUVVWNFFpeEZRVUZGZFU0c1dVRkJja0lzU1VGQmJVTjJUaXhGUVVGRlF5eE5RVUZHTEVOQlFWTXlTeXhqUVVGMFJDeERRVUZrTEVkQlFXOUdOVXNzUlVGQlJYTlZMRkZCUVVZc1EwRkJWemxUTEUxQlFYWkhMRU5CUVRoSExFbEJRVWQ0UWl4RlFVRkZReXhOUVVGR0xFTkJRVk5STEVsQlFWUXNTVUZCWldJc1NVRkJSVU1zUzBGQlN6SlZMRWxCUVV3c1EwRkJWU3hEUVVGRGVGVXNSVUZCUlVzc1YwRkJSaXhIUVVGalRDeEZRVUZGZFU0c1dVRkJha0lzU1VGQkswSjJUaXhGUVVGRlF5eE5RVUZHTEVOQlFWTXlTeXhqUVVGc1JDeERRVUZHTEVWQlFXOUZhRXdzU1VGQlJVa3NSVUZCUlVjc1RVRkJSaXhEUVVGVGNVSXNUVUZCVkN4SFFVRm5RaXhEUVVGb1FpeEhRVUZyUWl4SlFVRkZlRUlzUlVGQlJYVk9MRmxCUVhoQ0xFdEJRWFZETTA0c1MwRkJSMGtzUlVGQlJVY3NUVUZCUml4RFFVRlRjVUlzVFVGQlZDeEhRVUZuUWl4SlFVRkZlRUlzUlVGQlJYVk9MRmxCUVRsRUxFTkJRWEJGTEVWQlFXZEtNMDRzU1VGQlJVY3NTVUZCUlN4RFFVRktMRXRCUVZGSUxFdEJRVWRITEVOQlFWZ3NRMEZCYUVvc1JVRkJPRXBJTEVsQlFVVXNRMEZCUml4SlFVRkxMR05CUVZsSkxFVkJRVVZETEUxQlFVWXNRMEZCVTNGTkxHTkJRVEZDTEV0QlFUSkRNVTBzU1VGQlJVY3NTVUZCUlVnc1EwRkJMME1zUTBGQk4wc3NTVUZCWjA5QkxFbEJRVVVzUzBGQlN5eERRVUZNTEV0QlFWTkpMRVZCUVVWdlZ5eFRRVUZZTEVkQlFYRkNjRmNzUlVGQlJXOVhMRk5CUVhaQ0xFZEJRV2xEY0Zjc1JVRkJSVXNzVjBGQlJpeEpRVUZsTEVOQlFXeFNMRVZCUVc5U0xHTkJRVmxNTEVWQlFVVkRMRTFCUVVZc1EwRkJVM0ZOTEdOQlFYSkNMRWxCUVhGRGRFMHNSVUZCUlRKWExFOUJRWFpETEVsQlFXZEVNMWNzUlVGQlJUSlhMRTlCUVVZc1EwRkJWVzVXTEUxQlFWWXNSMEZCYVVJc1EwRkJha1VzUzBGQmNVVjRRaXhGUVVGRk1sY3NUMEZCUml4RFFVRlZVaXhYUVVGV0xFTkJRWE5DYmxjc1JVRkJSVU1zVFVGQlJpeERRVUZUZVU4c2FVSkJRUzlDTEVkQlFXdEVNVThzUlVGQlJUaFNMRzFDUVVGR0xFTkJRWE5DZEZFc1RVRkJkRUlzUjBGQk5rSXNRMEZCTjBJc1IwRkJLMEo0UWl4RlFVRkZNbGNzVDBGQlJpeERRVUZWY0ZZc1NVRkJWaXhEUVVGbExGbEJRVlU3UVVGQlF5OUNMR05CUVVVc1NVRkJSaXhGUVVGUmIxZ3NTMEZCVWl4UFFVRnJRbWhZTEVOQlFXeENMRWxCUVhGQ1NpeEZRVUZGTEVsQlFVWXNSVUZCVVhkVExGRkJRVklzUTBGQmFVSm9VeXhGUVVGRlF5eE5RVUZHTEVOQlFWTjVUeXhwUWtGQk1VSXNRMEZCY2tJN1FVRkJhMFVzVjBGQk5VWXNRMEZCTDBJc1IwRkJOa2d4VHl4RlFVRkZNbGNzVDBGQlJpeERRVUZWZGxjc1JVRkJWaXhEUVVGaFVpeERRVUZpTEVWQlFXZENiMU1zVVVGQmFFSXNRMEZCZVVKb1V5eEZRVUZGUXl4TlFVRkdMRU5CUVZONVR5eHBRa0ZCYkVNc1EwRkJjRkFzUTBGQmNGSXNSVUZCT0dwQ0xHVkJRV0V4VHl4RlFVRkZReXhOUVVGR0xFTkJRVk54VFN4alFVRjBRaXhMUVVGMVEzUk5MRVZCUVVVNFVpeHRRa0ZCUml4RFFVRnpRa01zU1VGQmRFSXNRMEZCTWtJc1RVRkJTUzlTTEVWQlFVVkRMRTFCUVVZc1EwRkJVekpQTEhOQ1FVRjRReXhGUVVGblJXbEpMRWxCUVdoRkxFTkJRWEZGYWxnc1NVRkJSU3hEUVVGMlJTeEhRVUV3UlVrc1JVRkJSVGhTTEcxQ1FVRkdMRU5CUVhOQ1F5eEpRVUYwUWl4RFFVRXlRaXhOUVVGSkwxSXNSVUZCUlVNc1RVRkJSaXhEUVVGVE5FOHNiMEpCUVhoRExFVkJRVGhFWjBrc1NVRkJPVVFzUTBGQmJVVTVWeXhEUVVGdVJTeERRVUZxU0N4RFFVRTVha0lzUlVGQmMzWkNMR1ZCUVdGRExFVkJRVVZETEUxQlFVWXNRMEZCVTNGTkxHTkJRUzkzUWl4RlFVRTRlRUk3UVVGQlF5eG5Ra0ZCU1hKTUxFbEJRVVVzUTBGQlEzSkNMRWxCUVVVc1EwRkJTQ3hKUVVGTlJ5eERRVUZhTzBGQlFVRXNaMEpCUVdNd1FpeEpRVUZGVWl4RFFVRm9RanRCUVVGQkxHZENRVUZyUW05Q0xFbEJRVVVzUTBGQmNFSXNRMEZCYzBKeVF5eEZRVUZGTUVNc1dVRkJSaXhQUVVGdFFrd3NTVUZCUlhCQ0xFTkJRVVlzUlVGQlNWRXNTVUZCUlN4RFFVRjZRaXhIUVVFMFFucENMRVZCUVVVNFVpeHRRa0ZCUml4RFFVRnpRa01zU1VGQmRFSXNRMEZCTWtJc1RVRkJTUzlTTEVWQlFVVkRMRTFCUVVZc1EwRkJVemhQTERCQ1FVRjRReXhGUVVGdlJUTklMRk5CUVhCRkxFTkJRVGhGTEN0Q1FVRTJRak5HTEVOQlFUZENMRWRCUVN0Q0xGZEJRUzlDTEVkQlFUSkRXU3hEUVVFelF5eEhRVUUyUXl4SFFVRXpTQ3hGUVVGblNYbFZMRlZCUVdoSkxFTkJRVEpKT1Zjc1JVRkJSVU1zVFVGQlJpeERRVUZUTWtnc1MwRkJjRW9zUTBGQk5VSTdRVUZCZFV3c2QwSkJRVmMxU0N4RlFVRkZReXhOUVVGR0xFTkJRVk54VFN4alFVRndRaXhKUVVGdlEzUk5MRVZCUVVWRExFMUJRVVlzUTBGQlUyOU5MSE5DUVVFM1F5eExRVUZ6UlhKTkxFVkJRVVU0VWl4dFFrRkJSaXhEUVVGelFtbEdMRWxCUVhSQ0xFTkJRVEpDTDFjc1JVRkJSVU1zVFVGQlJpeERRVUZUYjAwc2MwSkJRVlFzUTBGQlowTnlUU3hEUVVGb1F5eEZRVUZyUTBvc1NVRkJSU3hEUVVGd1F5eEZRVUZ6UTBjc1EwRkJkRU1zUTBGQk0wSXNSMEZCY1VWRExFVkJRVVZaTEVsQlFVWXNRMEZCVHl4elFrRkJVQ3hGUVVFNFFsb3NRMEZCT1VJc1JVRkJaME5CTEVWQlFVVTRVaXh0UWtGQlJpeERRVUZ6UWl4RFFVRjBRaXhEUVVGb1F5eERRVUV6U1R0QlFVRnpUU3hYUVVGRk4xSXNUVUZCUml4RFFVRlRVU3hKUVVGVUxFdEJRV2RDVkN4RlFVRkZReXhOUVVGR0xFTkJRVk41VFN4VlFVRlVMRWxCUVhGQ01VMHNSVUZCUlRCTkxGVkJRWFpDTEVsQlFXMURNVTBzUlVGQlJUQk5MRlZCUVVZc1EwRkJZV3hNTEUxQlFXSXNSMEZCYjBJc1EwRkJka1FzUzBGQk1rUjRRaXhGUVVGRk1rWXNWMEZCUml4SlFVRmxNMFlzUlVGQlJUQk5MRlZCUVVZc1EwRkJZWE5HTEZGQlFXSXNRMEZCYzBKb1V5eEZRVUZGUXl4TlFVRkdMRU5CUVZNd1R5eHRRa0ZCTDBJc1IwRkJiMFF6VHl4RlFVRkZReXhOUVVGR0xFTkJRVk13VUN4SlFVRlVMRWxCUVdVelVDeEZRVUZGTWxBc1NVRkJha0lzU1VGQmRVSXpVQ3hGUVVGRk1sQXNTVUZCUml4RFFVRlBjVWdzVDBGQlVDeERRVUZsYUZnc1JVRkJSVEJOTEZWQlFXcENMRU5CUVRGR0xFdEJRWGxJTVUwc1JVRkJSVEJOTEZWQlFVWXNRMEZCWVhsS0xGZEJRV0lzUTBGQmVVSnVWeXhGUVVGRlF5eE5RVUZHTEVOQlFWTXdUeXh0UWtGQmJFTXNSMEZCZFVRelR5eEZRVUZGUXl4TlFVRkdMRU5CUVZNd1VDeEpRVUZVTEVsQlFXVXpVQ3hGUVVGRk1sQXNTVUZCYWtJc1NVRkJkVUl6VUN4RlFVRkZNbEFzU1VGQlJpeERRVUZQYzBnc1RVRkJVQ3hEUVVGamFsZ3NSVUZCUlRCTkxGVkJRV2hDTEVOQlFYWk5MRU5CUVRORUxFZEJRV2RUTVUwc1JVRkJSVU1zVFVGQlJpeERRVUZUZDAwc1ZVRkJWQ3hKUVVGeFFucE5MRVZCUVVWNVRTeFZRVUYyUWl4SlFVRnRRM3BOTEVWQlFVVjVUU3hWUVVGR0xFTkJRV0ZxVEN4TlFVRmlMRWRCUVc5Q0xFTkJRWFpFTEV0QlFUSkVlRUlzUlVGQlJXRXNTMEZCUml4SlFVRlRZaXhGUVVGRmVVMHNWVUZCUml4RFFVRmhkVVlzVVVGQllpeERRVUZ6UW1oVExFVkJRVVZETEUxQlFVWXNRMEZCVXpCUExHMUNRVUV2UWl4SFFVRnZSRE5QTEVWQlFVVkRMRTFCUVVZc1EwRkJVekJRTEVsQlFWUXNTVUZCWlROUUxFVkJRVVV5VUN4SlFVRnFRaXhKUVVGMVFqTlFMRVZCUVVVeVVDeEpRVUZHTEVOQlFVOXhTQ3hQUVVGUUxFTkJRV1ZvV0N4RlFVRkZlVTBzVlVGQmFrSXNRMEZCY0VZc1MwRkJiVWg2VFN4RlFVRkZlVTBzVlVGQlJpeERRVUZoTUVvc1YwRkJZaXhEUVVGNVFtNVhMRVZCUVVWRExFMUJRVVlzUTBGQlV6QlBMRzFDUVVGc1F5eEhRVUYxUkROUExFVkJRVVZETEUxQlFVWXNRMEZCVXpCUUxFbEJRVlFzU1VGQlpUTlFMRVZCUVVVeVVDeEpRVUZxUWl4SlFVRjFRak5RTEVWQlFVVXlVQ3hKUVVGR0xFTkJRVTl6U0N4TlFVRlFMRU5CUVdOcVdDeEZRVUZGZVUwc1ZVRkJhRUlzUTBGQmFrMHNRMEZCTTBRc1EwRkJhRlE3UVVGQk1tdENMRTlCUVhCM1ppeEZRVUZ4ZDJaNlRTeEZRVUZGYTFnc1owSkJRVVlzUjBGQmJVSXNXVUZCVlR0QlFVRkRMRmxCUVVkc1dDeEZRVUZGUXl4TlFVRkdMRU5CUVZNMlRDeFZRVUZVTEVsQlFYRkNPVXdzUlVGQlJUaFNMRzFDUVVGMlFpeEpRVUUwUXpsU0xFVkJRVVU0VWl4dFFrRkJSaXhEUVVGelFuUlJMRTFCUVhSQ0xFZEJRVFpDTEVOQlFUVkZMRVZCUVRoRk8wRkJRVU1zWTBGQlNXaERMRWxCUVVVc1JVRkJUaXhEUVVGVExFbEJRVWNzWTBGQldWRXNSVUZCUlVNc1RVRkJSaXhEUVVGVGNVMHNZMEZCZUVJc1JVRkJkVU03UVVGQlF5eHBRa0ZCU1N4SlFVRkpOMDBzU1VGQlJVOHNSVUZCUlVNc1RVRkJSaXhEUVVGVFVTeEpRVUZVTEVkQlFXTmFMRXRCUVVzeVZTeEpRVUZNTEVOQlFWVXNRMEZCUTNoVkxFVkJRVVZITEUxQlFVWXNRMEZCVTNGQ0xFMUJRVlFzUjBGQlowSXNTVUZCUlhoQ0xFVkJRVVYxVGl4WlFVRnlRaXhKUVVGdFEzWk9MRVZCUVVWRExFMUJRVVlzUTBGQlV6SkxMR05CUVhSRUxFTkJRV1FzUjBGQmIwWTFTeXhGUVVGRmMxVXNVVUZCUml4RFFVRlhPVk1zVFVGQmNrY3NSVUZCTkVkT0xFbEJRVVVzUTBGQmJFZ3NSVUZCYjBoQkxFbEJRVVY2UWl4RFFVRjBTQ3hGUVVGM1NIbENMRWRCUVhoSU8wRkJRVFJJTVVJc2JVSkJRVWRSTEVWQlFVVkRMRTFCUVVZc1EwRkJVMmxOTEhOQ1FVRlVMRWRCUVdkRGJFMHNSVUZCUlVNc1RVRkJSaXhEUVVGVGFVMHNjMEpCUVZRc1EwRkJaME5zVFN4RFFVRm9ReXhGUVVGclEydENMRU5CUVd4RExFVkJRVzlEYkVJc1JVRkJSVU1zVFVGQlJpeERRVUZUZDA4c1YwRkJOME1zUTBGQmFFTXNSMEZCTUVZc1RVRkJTWHBQTEVWQlFVVkRMRTFCUVVZc1EwRkJVemhNTEdsQ1FVRmlMRWRCUVN0Q0xGVkJRUzlDTEVkQlFUQkRMMHdzUlVGQlJVTXNUVUZCUml4RFFVRlRkMDhzVjBGQmJrUXNSMEZCSzBRc1RVRkJMMFFzUjBGQmMwVjZUeXhGUVVGRlF5eE5RVUZHTEVOQlFWTTRUQ3hwUWtGQkwwVXNSMEZCYVVjc1IwRkJPVXc3UVVGQk5VZ3NZVUZCT0ZRdlRDeEZRVUZGT0ZJc2JVSkJRVVlzUTBGQmMwSnBSaXhKUVVGMFFpeERRVUV5UW5aWUxFTkJRVE5DTEVkQlFUaENVU3hGUVVGRk1sY3NUMEZCUml4SFFVRlZNMWNzUlVGQlJUaFNMRzFDUVVGR0xFTkJRWE5DUXl4SlFVRjBRaXhEUVVFeVFpeE5RVUZKTDFJc1JVRkJSVU1zVFVGQlJpeERRVUZUZDA4c1YwRkJlRU1zUTBGQmVFTXNSVUZCTmtaNlR5eEZRVUZGUXl4TlFVRkdMRU5CUVZNclRDeHRRa0ZCVkN4SlFVRTRRbWhOTEVWQlFVVkRMRTFCUVVZc1EwRkJVekJRTEVsQlFYWkRMRWxCUVRaRE0xQXNSVUZCUlRKUUxFbEJRUzlETEVsQlFYRkVNMUFzUlVGQlJUSlFMRWxCUVVZc1EwRkJUM2RJTEdOQlFWQXNSVUZCYkVvN1FVRkJNRXNzTUVKQlFXRnVXQ3hGUVVGRlF5eE5RVUZHTEVOQlFWTnhUU3hqUVVGMFFpeExRVUYxUXpsTkxFbEJRVVZSTEVWQlFVVkRMRTFCUVVZc1EwRkJVMjFOTEhkQ1FVRlVMRWRCUVd0RGNFMHNSVUZCUlVNc1RVRkJSaXhEUVVGVGJVMHNkMEpCUVZRc1EwRkJhME53VFN4RFFVRnNReXhGUVVGdlEwRXNSVUZCUlVNc1RVRkJSaXhEUVVGVE1rOHNjMEpCUVRkRExFVkJRVzlGTlU4c1JVRkJSVU1zVFVGQlJpeERRVUZUTkU4c2IwSkJRVGRGTEVOQlFXeERMRWRCUVhGSkxHdENRVUZuUWpkUExFVkJRVVZETEUxQlFVWXNRMEZCVXpKUExITkNRVUY2UWl4SFFVRm5SQ3d5UWtGQmFFUXNSMEZCTkVVMVR5eEZRVUZGUXl4TlFVRkdMRU5CUVZNMFR5eHZRa0ZCY2tZc1IwRkJNRWNzVjBGQmFsQXNSVUZCTmxBM1R5eEZRVUZGT0ZJc2JVSkJRVVlzUTBGQmMwSnBSaXhKUVVGMFFpeERRVUV5UW5aWUxFTkJRVE5DTEVOQlFYQlRMRWRCUVcxVkxHVkJRV0ZSTEVWQlFVVkRMRTFCUVVZc1EwRkJVM0ZOTEdOQlFYUkNMRXRCUVhWRE9VMHNTVUZCUlZFc1JVRkJSVU1zVFVGQlJpeERRVUZUYTAwc2QwSkJRVlFzUjBGQmEwTnVUU3hGUVVGRlF5eE5RVUZHTEVOQlFWTnJUU3gzUWtGQlZDeERRVUZyUTI1TkxFTkJRV3hETEVWQlFXOURRU3hGUVVGRlF5eE5RVUZHTEVOQlFWTTRUeXd3UWtGQk4wTXNRMEZCYkVNc1IwRkJNa2NzYTBKQlFXZENMMDhzUlVGQlJVTXNUVUZCUml4RFFVRlRPRThzTUVKQlFYcENMRWRCUVc5RUxGZEJRV3BMTEVWQlFUWkxMMDhzUlVGQlJUaFNMRzFDUVVGR0xFTkJRWE5DYVVZc1NVRkJkRUlzUTBGQk1rSjJXQ3hEUVVFelFpeERRVUZ3VGl4RFFVRnVWU3hGUVVGemFrSXNZVUZCVjFFc1JVRkJSVU1zVFVGQlJpeERRVUZUY1Uwc1kwRkJjRUlzU1VGQmIwTjBUU3hGUVVGRldTeEpRVUZHTEVOQlFVOHNjMEpCUVZBc1JVRkJPRUphTEVOQlFUbENMRVZCUVdkRFFTeEZRVUZGT0ZJc2JVSkJRVVlzUTBGQmMwSXNRMEZCZEVJc1EwRkJhRU1zUTBGQk1XeENPMEZCUVc5d1FqdEJRVUZETEU5QlFXaHBhVUlzUlVGQmFXbHBRamxTTEVWQlFVVTRWQ3hOUVVGR0xFZEJRVk1zVlVGQlUzUlZMRU5CUVZRc1JVRkJWenRCUVVGRExHbENRVUZUUXl4RFFVRlVMRWRCUVZrN1FVRkJRMDhzV1VGQlJUaEVMRWRCUVVZc1JVRkJUVGxFTEVWQlFVVjFVeXhUUVVGU0xFTkJRV3RDY2xJc1NVRkJSWEpDTEV0QlFVdDFXQ3hIUVVGTUxFTkJRVk4yV0N4TFFVRkxNbFlzUjBGQlRDeERRVUZUZUZZc1JVRkJSWFZUTEZOQlFWZ3NSVUZCY1VKMlV5eEZRVUZGTmtZc1dVRkJSaXhGUVVGeVFpeERRVUZVTEVWQlFXZEVOMFlzUlVGQlJUUkdMRmxCUVVZc1JVRkJhRVFzUTBGQlJpeEZRVUZ2UlRWR0xFVkJRVVVyUml4dFFrRkJSaXhEUVVGelFqZEZMRU5CUVhSQ0xFTkJRWEJGTEVWQlFUWkdiRUlzUlVGQlJXbEhMR2xDUVVGR0xFVkJRVGRHTEVWQlFXMUlha2NzUlVGQlJXdEhMR0ZCUVVZc1JVRkJia2c3UVVGQmNVa3NZVUZCUjJ4SExFTkJRVWdzUlVGQlN6dEJRVUZEUVN4WlFVRkZNRlVzYlVKQlFVWXNTVUZCZDBJeFZTeEZRVUZGT0ZVc1owSkJRVVlzUlVGQmVFSXNSVUZCTmtNNVZTeEZRVUZGWjBjc1kwRkJSaXhGUVVFM1F5eEZRVUZuUldoSExFVkJRVVZyV0N4blFrRkJSaXhGUVVGb1JTeEZRVUZ4Um14WUxFVkJRVVZyUnl4aFFVRkdMRVZCUVhKR0xFVkJRWFZIYkVjc1JVRkJSVU1zVFVGQlJpeERRVUZUTWtvc1UwRkJWQ3hKUVVGdlFqVktMRVZCUVVVMFNpeFRRVUYwUWl4SlFVRnBRelZLTEVWQlFVVTBTaXhUUVVGR0xFTkJRVmw1VGl4SFFVRmFMRVZCUVhoSkxFTkJRVEJLTEVsQlFVbHVWeXhEUVVGS0xFTkJRVTBzU1VGQlJ6RkNMRU5CUVVnc1JVRkJTenRCUVVGRFVTeGpRVUZGYzFnc1ZVRkJSaXhKUVVGamRGZ3NSVUZCUlhOWUxGVkJRVVlzUTBGQllVTXNUVUZCTTBJc1MwRkJiME4yV0N4RlFVRkZjMWdzVlVGQlJpeERRVUZoUXl4TlFVRmlMRWRCUVc5Q0xFdEJRVXNzUTBGQk4wUXNSMEZCWjBWMldDeEZRVUZGUXl4TlFVRkdMRU5CUVZOMVJpeFJRVUZVTEVsQlFXMUNMMFlzUzBGQlNVOHNSVUZCUlVNc1RVRkJSaXhEUVVGVGIwa3NWVUZCVkN4SlFVRnhRbkpKTEVWQlFVVjFWU3huUWtGQlJpeEZRVUUxUXl4SlFVRnJSU3hEUVVGRExFTkJRVU1zVjBGQlUzWlZMRVZCUVVWRExFMUJRVVlzUTBGQlUzZExMR0ZCUVd4Q0xFbEJRV2xEZWtzc1JVRkJSVU1zVFVGQlJpeERRVUZUZDBzc1lVRkJWQ3hIUVVGMVFpeERRVUY2UkN4TFFVRTJSSHBMTEVWQlFVVmhMRXRCUVM5RUxFbEJRWE5GTEVOQlFVTmlMRVZCUVVWRExFMUJRVVlzUTBGQlV6UkxMR05CUVdoR0xFZEJRU3RHTjBzc1JVRkJSWGRZTEU5QlFVWXNRMEZCVlhoWUxFVkJRVVZITEUxQlFVWXNRMEZCVTNGQ0xFMUJRVlFzUjBGQlowSXNRMEZCTVVJc1JVRkJORUlzUTBGQk5VSXNSVUZCT0VJc1EwRkJReXhEUVVFdlFpeEZRVUZwUXl4RFFVRkRMRU5CUVd4RExFTkJRUzlHTEVkQlFXOUplRUlzUlVGQlJYZFlMRTlCUVVZc1EwRkJWWGhZTEVWQlFVVkxMRmRCUVZvc1JVRkJkMElzUTBGQmVFSXNSVUZCTUVJc1EwRkJReXhEUVVFelFpeEZRVUUyUWl4RFFVRkRMRU5CUVRsQ0xFTkJRWEpKTEV0QlFYZExXaXhIUVVFeFV6dEJRVUU0VXl4WFFVRndWQ3hOUVVGNVZFOHNSVUZCUlVNc1RVRkJSaXhEUVVGVGIwa3NWVUZCVkN4SlFVRnhRbkpKTEVWQlFVVjFWU3huUWtGQlJpeEZRVUZ5UWp0QlFVRXdRenRCUVVGRExFOUJRWEIxYWtJc1JVRkJjWFZxUW5aVkxFVkJRVVU0UWl4UlFVRkdMRWRCUVZjc1ZVRkJVM1JETEVOQlFWUXNSVUZCVnp0QlFVRkRVU3hWUVVGRlF5eE5RVUZHTEVOQlFWTjNXQ3hqUVVGVUxFbEJRWGxDZWxnc1JVRkJSVU1zVFVGQlJpeERRVUZUZDFnc1kwRkJWQ3hEUVVGM1FucFlMRU5CUVhoQ0xFTkJRWHBDTEVWQlFXOUVRU3hGUVVGRlF5eE5RVUZHTEVOQlFWTnpTeXhYUVVGVUxFbEJRWE5DZGtzc1JVRkJSV3RTTEdGQlFVWXNSVUZCTVVVc1EwRkJORVlzU1VGQlNYcFNMRWxCUVVWUExFVkJRVVZETEUxQlFVWXNRMEZCVXpCRExHZENRVUZtTzBGQlFVRXNXVUZCWjBONlFpeEpRVUZGYkVJc1JVRkJSVU1zVFVGQlJpeERRVUZUZDBNc1owSkJRVE5ETEVOQlFUUkVla01zUlVGQlJVTXNUVUZCUml4RFFVRlRNRU1zWjBKQlFWUXNSMEZCTUVJelF5eEZRVUZGUXl4TlFVRkdMRU5CUVZOM1F5eG5Ra0ZCVkN4SFFVRXdRaXhEUVVGRExFTkJRWEpFTEVWQlFYVkVla01zUlVGQlJUQlZMRzFDUVVGR0xFVkJRWFpFTEVWQlFTdEZNVlVzUlVGQlJUaFZMR2RDUVVGR0xFVkJRUzlGTEVWQlFXOUhMRU5CUVVNc1YwRkJVemxWTEVWQlFVVkRMRTFCUVVZc1EwRkJVM2RMTEdGQlFXeENMRWxCUVdsRGVrc3NSVUZCUlVNc1RVRkJSaXhEUVVGVGRVWXNVVUZCTVVNc1NVRkJiMFJvUnl4RFFVRnlSQ3hMUVVGNVJGRXNSVUZCUld0WUxHZENRVUZHTEVWQlFUZEtMRVZCUVd0TWJGZ3NSVUZCUlVNc1RVRkJSaXhEUVVGVE1rb3NVMEZCVkN4SlFVRnZRalZLTEVWQlFVVTBTaXhUUVVGMFFpeEpRVUZwUXpWS0xFVkJRVVUwU2l4VFFVRkdMRU5CUVZsNVRpeEhRVUZhTEVWQlFXNU9MRVZCUVhGUGNsZ3NSVUZCUlhOWUxGVkJRVVlzU1VGQlkzUllMRVZCUVVWeldDeFZRVUZHTEVOQlFXRkRMRTFCUVROQ0xFdEJRVzlEZGxnc1JVRkJSWE5ZTEZWQlFVWXNRMEZCWVVNc1RVRkJZaXhIUVVGdlFpeExRVUZMTEVOQlFUZEVMRU5CUVhKUExFTkJRWEZUTEVsQlFVazNXQ3hKUVVGRkxFTkJRVU1zUTBGQlVDeERRVUZUTEVsQlFVZE5MRVZCUVVWRExFMUJRVVlzUTBGQlUzVkdMRkZCUVZvc1JVRkJjVUk3UVVGQlF5eGpRVUZKTjBZc1NVRkJSVVVzUzBGQlMzVllMRWRCUVV3c1EwRkJVM1pZTEV0QlFVc3lWaXhIUVVGTUxFTkJRVk40Vml4RlFVRkZkVk1zVTBGQldDeEZRVUZ4UW5aVExFVkJRVVUyUml4WlFVRkdMRVZCUVhKQ0xFTkJRVlFzUlVGQlowUTNSaXhGUVVGRk5FWXNXVUZCUml4RlFVRm9SQ3hEUVVGT0xFTkJRWGRGTlVZc1JVRkJSU3RHTEcxQ1FVRkdMRU5CUVhOQ2NFY3NRMEZCZEVJc1IwRkJlVUpMTEVWQlFVVnBSeXhwUWtGQlJpeEZRVUY2UWl4RlFVRXJRMnBITEVWQlFVVnJSeXhoUVVGR0xFVkJRUzlETEVWQlFXbEZiRWNzUlVGQlJVTXNUVUZCUml4RFFVRlRiMGtzVlVGQlZDeEpRVUZ4UW5KSkxFVkJRVVYxVlN4blFrRkJSaXhGUVVGMFJqdEJRVUV5Unl4VFFVRjZUU3hOUVVFNFRYWlZMRVZCUVVWclJ5eGhRVUZHTEVsQlFXdENlRWNzU1VGQlJTeERRVUZETEZkQlFWTk5MRVZCUVVWRExFMUJRVVlzUTBGQlUzZExMR0ZCUVd4Q0xFbEJRV2xEZWtzc1JVRkJSVU1zVFVGQlJpeERRVUZUZDBzc1lVRkJWQ3hIUVVGMVFpeERRVUY2UkN4TFFVRTJSSHBMTEVWQlFVVmhMRXRCUVM5RUxFbEJRWE5GTEVOQlFVTmlMRVZCUVVWRExFMUJRVVlzUTBGQlV6UkxMR05CUVdoR0xFZEJRU3RHTjBzc1JVRkJSWGRZTEU5QlFVWXNRMEZCVlhoWUxFVkJRVVZITEUxQlFVWXNRMEZCVTNGQ0xFMUJRVlFzUjBGQlowSXNRMEZCTVVJc1JVRkJORUlzUTBGQk5VSXNSVUZCT0VJc1EwRkJReXhEUVVFdlFpeEZRVUZwUXl4RFFVRkRMRU5CUVd4RExFTkJRUzlHTEVkQlFXOUplRUlzUlVGQlJYZFlMRTlCUVVZc1EwRkJWWGhZTEVWQlFVVkxMRmRCUVZvc1JVRkJkMElzUTBGQmVFSXNSVUZCTUVJc1EwRkJReXhEUVVFelFpeEZRVUUyUWl4RFFVRkRMRU5CUVRsQ0xFTkJRWGhLTEVOQlFYbE1UQ3hGUVVGRlF5eE5RVUZHTEVOQlFWTjFSeXhYUVVGVUxFbEJRWE5DTEVOQlFVTTVSeXhEUVVGMlFpeEpRVUV3UWswc1JVRkJSWGxITEVsQlFUVkNMRWxCUVd0RGVrY3NSVUZCUlhsSExFbEJRVVlzUTBGQlQwTXNTVUZCVUN4RlFVRnNReXhGUVVGblJERkhMRVZCUVVWRExFMUJRVVlzUTBGQlV6QkRMR2RDUVVGVUxFZEJRVEJDYkVRc1EwRkJNVVVzUlVGQk5FVlBMRVZCUVVWRExFMUJRVVlzUTBGQlUzZERMR2RDUVVGVUxFZEJRVEJDZGtJc1EwRkJkRWNzUlVGQmQwZHNRaXhGUVVGRlF5eE5RVUZHTEVOQlFWTjVXQ3hoUVVGVUxFbEJRWGRDTVZnc1JVRkJSVU1zVFVGQlJpeERRVUZUZVZnc1lVRkJWQ3hEUVVGMVFqRllMRU5CUVhaQ0xFTkJRV2hKTzBGQlFUQktMRTlCUVc1MWJFSXNSVUZCYjNWc1FrRXNSVUZCUlRKWUxHdENRVUZHTEVkQlFYRkNMRVZCUVVORExFOUJRVTBzVjBGQlVDeEZRVUZ0UWtNc1RVRkJTeXhYUVVGNFFpeEZRVUZ2UTBNc1MwRkJTU3hUUVVGNFF5eEZRVUY2ZG14Q0xFVkJRVFI1YkVKd1Z5eFBRVUZQY1Zjc1UwRkJVQ3hEUVVGcFFrTXNZMEZCYWtJc1IwRkJaME5vV1N4RlFVRkZNbGdzYTBKQlFVWXNSMEZCY1VJc1JVRkJRME1zVDBGQlRTeGhRVUZRTEVWQlFYRkNReXhOUVVGTExHRkJRVEZDTEVWQlFYZERReXhMUVVGSkxGZEJRVFZETEVWQlFYSkVMRWRCUVRoSGNGY3NUMEZCVDNGWExGTkJRVkFzUTBGQmFVSkZMR2RDUVVGcVFpeExRVUZ2UTJwWkxFVkJRVVV5V0N4clFrRkJSaXhIUVVGeFFpeEZRVUZEUXl4UFFVRk5MR1ZCUVZBc1JVRkJkVUpETEUxQlFVc3NaVUZCTlVJc1JVRkJORU5ETEV0QlFVa3NZVUZCYUVRc1JVRkJla1FzUTBGQk1UVnNRaXhGUVVGdGFHMUNPVmdzUlVGQlJXdFpMRmRCUVVZc1IwRkJZeXhGUVVGRFRpeFBRVUZOTlZnc1JVRkJSWGRTTEU5QlFVWXNRMEZCVlVjc1MwRkJWaXhKUVVGcFFpeERRVUZETTFJc1JVRkJSVU1zVFVGQlJpeERRVUZUYTB3c1lVRkJNMElzUjBGQmVVTXNXVUZCZWtNc1IwRkJjMFJ1VEN4RlFVRkZNbGdzYTBKQlFVWXNRMEZCY1VKRExFdEJRV3hHTEVWQlFYZEdReXhOUVVGTE4xZ3NSVUZCUlhkU0xFOUJRVVlzUTBGQlZVY3NTMEZCVml4SlFVRnBRaXhEUVVGRE0xSXNSVUZCUlVNc1RVRkJSaXhEUVVGVGEwd3NZVUZCTTBJc1IwRkJlVU1zVjBGQmVrTXNSMEZCY1VSdVRDeEZRVUZGTWxnc2EwSkJRVVlzUTBGQmNVSkZMRWxCUVhaTExFVkJRVFJMUXl4TFFVRkpPVmdzUlVGQlJYZFNMRTlCUVVZc1EwRkJWVWNzUzBGQlZpeEpRVUZwUWl4RFFVRkRNMUlzUlVGQlJVTXNUVUZCUml4RFFVRlRhMHdzWVVGQk0wSXNSMEZCZVVNc1ZVRkJla01zUjBGQmIwUnVUQ3hGUVVGRk1sZ3NhMEpCUVVZc1EwRkJjVUpITEVkQlFYcFFMRVZCUVdwcGJVSXNSVUZCSzNodFFpeERRVUZEY0Zjc1QwRkJUM0ZYTEZOQlFWQXNRMEZCYVVKRExHTkJRV3BDTEVsQlFXbERkRmNzVDBGQlQzRlhMRk5CUVZBc1EwRkJhVUpGTEdkQ1FVRnVSQ3hMUVVGelJTeERRVUZETEdkQ1FVRmphbGtzUlVGQlJVTXNUVUZCUml4RFFVRlRlVWdzYVVKQlFYWkNMRWRCUVhsRE1VZ3NSVUZCUlc5RUxGTkJRVE5ETEVkQlFYRkVjRVFzUlVGQlJUUlNMRTlCUVhoRUxFVkJRV2xGU1N4UlFVRnFSU3hEUVVFd1JTeG5Ra0ZCWTJoVExFVkJRVVZETEUxQlFVWXNRMEZCVTNkSUxGTkJRV3BITEVOQlFYSXliVUlzUlVGQmFUbHRRbnBJTEVWQlFVVnRXU3hWUVVGR0xFZEJRV0VzVlVGQlV6TlpMRU5CUVZRc1JVRkJWenRCUVVGRExGbEJRVWxETEVsQlFVVkVMRWxCUVVVc1MwRkJSaXhIUVVGUkxFbEJRV1E3UVVGQlFTeFpRVUZ0UWpCQ0xFbEJRVVV4UWl4SlFVRkZMSEZDUVVGR0xFZEJRWGRDTEd0Q1FVRTNRenRCUVVGQkxGbEJRV2RGUlN4SlFVRkZMR2RDUVVGalRTeEZRVUZGUXl4TlFVRkdMRU5CUVZONVNDeHBRa0ZCZGtJc1IwRkJlVU14U0N4RlFVRkZiMFFzVTBGQlJpeERRVUZaTEVOQlFWb3NRMEZCZWtNc1IwRkJkMFJ3UkN4RlFVRkZORklzVDBGQlJpeERRVUZWTEVOQlFWWXNRMEZCTVVnN1FVRkJRU3haUVVGMVNXaFRMRWxCUVVWSkxFVkJRVVYzVWl4UFFVRkdMRU5CUVZWSExFdEJRVllzUjBGQlowSnFVeXhEUVVGb1FpeEhRVUZyUW5ORUxGRkJRVE5LTzBGQlFVRXNXVUZCYjB0cVJDeEpRVUZGTEVOQlFVTXNRMEZCUTBNc1JVRkJSVU1zVFVGQlJpeERRVUZUYlZrc1RVRkJha3dzUTBGQmQwd3NTVUZCUjNCWkxFVkJRVVZ4V1N4UFFVRkdMRU5CUVZWRExFVkJRV0lzUlVGQlowSTFXU3hGUVVGRmQwSXNRMEZCUml4RlFVRkxiRUlzUlVGQlJXdFpMRmRCUVVZc1EwRkJZMDRzUzBGQmJrSXNSVUZCZVVJMVdDeEZRVUZGZFZrc1dVRkJNMElzUlVGQmQwTXNRMEZCUXl4RFFVRjZReXhIUVVFMFF6TlpMRVZCUVVWelFpeERRVUZHTEVWQlFVdHNRaXhGUVVGRmExa3NWMEZCUml4RFFVRmpUQ3hKUVVGdVFpeEZRVUYzUWpkWUxFVkJRVVYzV1N4WFFVRXhRaXhGUVVGelEzcFpMRU5CUVhSRExFTkJRVFZETEVWQlFYRkdTQ3hGUVVGRmMwSXNRMEZCUml4RlFVRkxiRUlzUlVGQlJXdFpMRmRCUVVZc1EwRkJZMG9zUjBGQmJrSXNSVUZCZFVJNVdDeEZRVUZGZVZrc1ZVRkJla0lzUlVGQmIwTXNRMEZCUXl4RFFVRnlReXhEUVVGeVJpeERRVUZvUWl4TFFVRnBTanRCUVVGRExHTkJRVWQ2V1N4RlFVRkZkMUlzVDBGQlJpeERRVUZWUnl4TFFVRmlMRVZCUVcxQ08wRkJRVU1zWjBKQlFVa3hVU3hKUVVGRkxFVkJRVVVzYVVKQlFXVnFRaXhGUVVGRmExa3NWMEZCUml4RFFVRmpUaXhMUVVFM1FpeEpRVUZ2UXl4RFFVRkROVmdzUlVGQlJYZFNMRTlCUVVZc1EwRkJWV3RJTEdWQlFTOURMRWxCUVdkRkxFTkJRVU14V1N4RlFVRkZReXhOUVVGR0xFTkJRVk00VGl4blFrRkJOVVVzUzBGQkswWXNSVUZCUXpSTExGTkJRVkVzUTBGQlF5eERRVUZXTEVWQlFWbERMRk5CUVZFc1EwRkJReXhEUVVGeVFpeEZRVUZ5Unl4RFFVRTJTR3hhTEVWQlFVVjNRaXhEUVVGR0xFVkJRVXRzUWl4RlFVRkZhMWtzVjBGQlJpeERRVUZqVGl4TFFVRnVRaXhGUVVGNVFqVllMRVZCUVVWMVdTeFpRVUV6UWl4RlFVRjNRM1JZTEVOQlFYaERMRWRCUVRKRGRrSXNSVUZCUlhkQ0xFTkJRVVlzUlVGQlMyeENMRVZCUVVWcldTeFhRVUZHTEVOQlFXTk1MRWxCUVc1Q0xFVkJRWGRDTjFnc1JVRkJSWGRaTEZkQlFURkNMRVZCUVhORGVsa3NRMEZCZEVNc1EwRkJNME1zUlVGQmIwWk1MRVZCUVVWM1FpeERRVUZHTEVWQlFVdHNRaXhGUVVGRmExa3NWMEZCUml4RFFVRmpTaXhIUVVGdVFpeEZRVUYxUWpsWUxFVkJRVVY1V1N4VlFVRjZRaXhGUVVGdlEzaFlMRU5CUVhCRExFTkJRWEJHTzBGQlFUSklMRmxCUVVOMFFpeEZRVUZGZDB3c1lVRkJSaXhKUVVGcFFpeERRVUZEYmt3c1JVRkJSVzlUTEUxQlFVWXNRMEZCVTNsSExFZEJRVE5DTEVsQlFXZERMRU5CUVVNM1dTeEZRVUZGYjFNc1RVRkJSaXhEUVVGVFF5eFBRVUV4UXl4SlFVRnRSREZUTEVWQlFVVjNUQ3hoUVVGR0xFbEJRV2xDTEVOQlFVTnVUQ3hGUVVGRmQxSXNUMEZCUml4RFFVRlZSeXhMUVVFMVFpeEpRVUZ0UXpOU0xFVkJRVVZ2VXl4TlFVRkdMRU5CUVZONVJ5eEhRVUZvUnl4TlFVRjFSMjVhTEVWQlFVVjNRaXhEUVVGR0xFVkJRVXNzVjBGQlRDeEZRVUZwUW14Q0xFVkJRVVYxV1N4WlFVRnVRaXhGUVVGblF5eERRVUZETEVOQlFXcERMRWRCUVc5RGRsWXNVMEZCVXpsQ0xFTkJRVlFzUlVGQldTeFhRVUZhTEVWQlFYZENiRUlzUlVGQlJYZFpMRmRCUVRGQ0xFVkJRWE5EZWxrc1EwRkJkRU1zUTBGQmNFTXNSVUZCTmtWcFJDeFRRVUZUT1VJc1EwRkJWQ3hGUVVGWkxGTkJRVm9zUlVGQmMwSnNRaXhGUVVGRmVWa3NWVUZCZUVJc1JVRkJiVU1zUTBGQlF5eERRVUZ3UXl4RFFVRndURHRCUVVFMFRpeG5Ra0ZCVDNaWUxFTkJRVkFzUlVGQlZTeFJRVUZXTEVWQlFXMUNiRUlzUlVGQlJUaENMRkZCUVhKQ0xFZEJRU3RDT1VJc1JVRkJSVU1zVFVGQlJpeERRVUZUZDAwc1ZVRkJWQ3hKUVVGeFFucE5MRVZCUVVWNVRTeFZRVUYyUWl4SlFVRnRRM3BOTEVWQlFVVjVUU3hWUVVGR0xFTkJRV0ZxVEN4TlFVRmlMRWRCUVc5Q0xFTkJRWFpFTEV0QlFUSkVlRUlzUlVGQlJYbE5MRlZCUVVZc1EwRkJZV2hPTEVOQlFXSXNSVUZCWjBJc1QwRkJhRUlzUlVGQmQwSlBMRVZCUVVVNFdTeFhRVUV4UWl4SFFVRjFRemxaTEVWQlFVVkRMRTFCUVVZc1EwRkJVekJRTEVsQlFWUXNTVUZCWlROUUxFVkJRVVV5VUN4SlFVRnFRaXhKUVVGMVFqTlFMRVZCUVVWNVRTeFZRVUZHTEVOQlFXRm9UaXhEUVVGaUxFVkJRV2RDTEZOQlFXaENMRVZCUVRCQ1R5eEZRVUZGTWxBc1NVRkJSaXhEUVVGUGIwb3NWVUZCYWtNc1EwRkJla2dzUTBGQkwwSXNSVUZCYzAwdldTeEZRVUZGUXl4TlFVRkdMRU5CUVZONVRTeFZRVUZVTEVsQlFYRkNNVTBzUlVGQlJUQk5MRlZCUVhaQ0xFbEJRVzFETVUwc1JVRkJSVEJOTEZWQlFVWXNRMEZCWVd4TUxFMUJRV0lzUjBGQmIwSXNRMEZCZGtRc1MwRkJNa1I0UWl4RlFVRkZNRTBzVlVGQlJpeERRVUZoYWs0c1EwRkJZaXhGUVVGblFpeFBRVUZvUWl4RlFVRjNRazhzUlVGQlJXZGFMRmRCUVRGQ0xFZEJRWFZEYUZvc1JVRkJSVU1zVFVGQlJpeERRVUZUTUZBc1NVRkJWQ3hKUVVGbE0xQXNSVUZCUlRKUUxFbEJRV3BDTEVsQlFYVkNNMUFzUlVGQlJUQk5MRlZCUVVZc1EwRkJZV3BPTEVOQlFXSXNSVUZCWjBJc1UwRkJhRUlzUlVGQk1FSlBMRVZCUVVVeVVDeEpRVUZHTEVOQlFVOXZTaXhWUVVGcVF5eERRVUY2U0N4RFFVRjBUU3hGUVVFMlZ5OVpMRVZCUVVWRExFMUJRVVlzUTBGQlV6Wk1MRlZCUVZRc1NVRkJjVUk1VEN4RlFVRkZReXhOUVVGR0xFTkJRVk1yVEN4dFFrRkJPVUlzUzBGQmIwUm9UU3hGUVVGRk9GSXNiVUpCUVVZc1EwRkJjMEp5VXl4RFFVRjBRaXhGUVVGNVFpeFBRVUY2UWl4RlFVRnBReXhOUVVGSlR5eEZRVUZGUXl4TlFVRkdMRU5CUVZOM1R5eFhRVUU1UXl4RlFVRXdSSHBQTEVWQlFVVnBXaXhaUVVFMVJDeEhRVUV3UldwYUxFVkJRVVZETEUxQlFVWXNRMEZCVXpCUUxFbEJRVlFzU1VGQlpUTlFMRVZCUVVVeVVDeEpRVUZxUWl4SlFVRjFRak5RTEVWQlFVVTRVaXh0UWtGQlJpeERRVUZ6UW5KVExFTkJRWFJDTEVWQlFYbENMRk5CUVhwQ0xFVkJRVzFETEUxQlFVbFBMRVZCUVVWRExFMUJRVVlzUTBGQlUzZFBMRmRCUVdoRUxFVkJRVFJFZWs4c1JVRkJSVEpRTEVsQlFVWXNRMEZCVDI5S0xGVkJRVzVGTEVOQlFYSktMRU5CUVRkWExFVkJRV3RzUWl4RFFVRkRMMWtzUlVGQlJVTXNUVUZCUml4RFFVRlROazBzWVVGQlZDeEpRVUYzUWpsTkxFVkJRVVZETEUxQlFVWXNRMEZCVXpoTkxIZENRVUZzUXl4TFFVRTJSSEpPTEVWQlFVVjNRaXhEUVVGR0xFVkJRVXNzVDBGQlRDeEZRVUZoYkVJc1JVRkJSVGhOTEdGQlFXWXNSVUZCTmtJc1EwRkJReXhEUVVFNVFpeERRVUV2YjBJN1FVRkJaM0pDTEU5QlFUVTRjRUlzUlVGQk5qaHdRamxOTEVWQlFVVnJXaXhaUVVGR0xFZEJRV1VzV1VGQlZUdEJRVUZEYkZvc1ZVRkJSVzFaTEZWQlFVWTdRVUZCWlN4UFFVRjBMM0JDTEVWQlFYVXZjRUp1V1N4RlFVRkZiVm9zV1VGQlJpeEhRVUZsTEZsQlFWVTdRVUZCUTI1YUxGVkJRVVZ0V1N4VlFVRkdMRU5CUVdFc1EwRkJReXhEUVVGa08wRkJRV2xDTEU5QlFXeHBjVUlzUlVGQmJXbHhRbTVaTEVWQlFVVnZXaXhWUVVGR0xFZEJRV0VzUTBGQlF5eERRVUZxYW5GQ0xFVkJRVzFxY1VKd1dpeEZRVUZGT0Uwc1lVRkJSaXhIUVVGblFpeFZRVUZUZEU0c1EwRkJWQ3hGUVVGWE8wRkJRVU5STEZWQlFVVnZXaXhWUVVGR0xFdEJRV1Z3V2l4RlFVRkZReXhOUVVGR0xFTkJRVk0yVFN4aFFVRlVMRWxCUVhkQ2RFNHNSVUZCUlRCRkxHTkJRVVlzUlVGQmVFSXNSVUZCTWtOc1JTeEZRVUZGUXl4TlFVRkdMRU5CUVZNNFRTeDNRa0ZCVkN4SlFVRnRReTlOTEVWQlFVVXJSeXhUUVVGeVF5eExRVUZwUkhaSUxFVkJRVVUyV2l4bFFVRkdMRWxCUVc5Q04xb3NSVUZCUlRoYUxIZENRVUZHTEVWQlFYSkZMRU5CUVRGRU8wRkJRVGhLTEU5QlFUZDFjVUlzUlVGQk9IVnhRblJhTEVWQlFVVTRXU3hYUVVGR0xFZEJRV01zVlVGQlUzUmFMRU5CUVZRc1JVRkJWenRCUVVGRFFTeFZRVUZGTUVVc1kwRkJSaXhKUVVGdFFteEZMRVZCUVVWaExFdEJRVVlzU1VGQlV5eERRVUZEWWl4RlFVRkZReXhOUVVGR0xFTkJRVk5STEVsQlFXNUNMRWxCUVhsQ1ZDeEZRVUZGYjBVc1UwRkJSaXhGUVVFMVF6dEJRVUV3UkN4UFFVRnNNSEZDTEVWQlFXMHdjVUp3UlN4RlFVRkZaMW9zVjBGQlJpeEhRVUZqTEZWQlFWTjRXaXhEUVVGVUxFVkJRVmM3UVVGQlEwRXNWVUZCUlRCRkxHTkJRVVlzU1VGQmJVSnNSU3hGUVVGRk1rWXNWMEZCUml4SlFVRmxMRU5CUVVNelJpeEZRVUZGUXl4TlFVRkdMRU5CUVZOUkxFbEJRWHBDTEVsQlFTdENWQ3hGUVVGRmNVVXNVMEZCUml4RlFVRnNSRHRCUVVGblJTeFBRVUUzTlhGQ0xFVkJRVGcxY1VKeVJTeEZRVUZGYVZvc1dVRkJSaXhIUVVGbExGVkJRVk40V2l4RFFVRlVMRVZCUVZjN1FVRkJRMEVzVlVGQlJYbEZMR05CUVVZc1IwRkJiVUlzU1VGQlNXaEVMRWxCUVVVeFFpeEZRVUZGTEVsQlFVWXNSVUZCVVc5WUxFdEJRVklzUzBGQlowSTFWeXhGUVVGRlF5eE5RVUZHTEVOQlFWTXlTeXhqUVVFdlFpeERRVUU0UXpWTExFVkJRVVZETEUxQlFVWXNRMEZCVTFFc1NVRkJWQ3hMUVVGblFsTXNTMEZCUjJ4Q0xFVkJRVVYxVGl4WlFVRnlRaXhIUVVGdFEzWk9MRVZCUVVWM1dDeFBRVUZHTEVOQlFWVjBWeXhEUVVGV0xFTkJRVzVETzBGQlFXZEVMRTlCUVRGcGNrSXNSVUZEY0hSVWJFSXNSVUZCUlhWYUxHdENRVUZHTEVkQlFYRkNMRlZCUVZNNVdpeERRVUZVTEVWQlFWYzdRVUZCUXl4WlFVRkplVUlzU1VGQlJVUXNSVUZCUlhoQ0xFTkJRVVlzUlVGQlNTeE5RVUZKVHl4RlFVRkZReXhOUVVGR0xFTkJRVk52UkN4VlFVRnFRaXhEUVVGT08wRkJRVUVzV1VGQmJVTXpSQ3hKUVVGRkxFTkJRVU1zUTBGQmRFTXNRMEZCZDBNc1NVRkJSM2RDTEVOQlFVZ3NSVUZCU3l4TFFVRkpMRWxCUVVsMlFpeEpRVUZGTEVOQlFWWXNSVUZCV1VFc1NVRkJSVXNzUlVGQlJVY3NUVUZCUml4RFFVRlRjVUlzVFVGQmRrSXNSVUZCT0VJM1FpeEhRVUU1UWp0QlFVRnJRMHNzV1VGQlJVY3NUVUZCUml4RFFVRlRVaXhEUVVGVUxFMUJRV04xUWl4RFFVRmtMRXRCUVd0Q2VFSXNTVUZCUlN4RFFVRkRMRU5CUVhKQ08wRkJRV3hETEZOQlFUQkVMRWxCUVVjc1EwRkJRM2RDTEVOQlFVUXNTVUZCU1N4RFFVRkRlRUlzUTBGQlVpeEZRVUZWTEU5QlFVOU5MRVZCUVVWM1dpeFpRVUZHTEVkQlFXVXNTMEZCU3l4RFFVRndRaXhGUVVGelFpeE5RVUZMZUZvc1JVRkJSWGxhTEZsQlFVWXNSMEZCWlN4TFFVRkxMRU5CUVhwQ0xFTkJRVGRDTEVOQlFYbEVMRWxCUVVkNldpeEZRVUZGZDFvc1dVRkJSaXhIUVVGbGRGa3NRMEZCWml4RlFVRnBRbXhDTEVWQlFVVjVXaXhaUVVGR0xFZEJRV1ZxWVN4RlFVRkZNRUlzUTBGQlJpeEZRVUZMTUZZc1MwRkJUQ3hGUVVGb1F5eEZRVUUyUXpWWExFVkJRVVZETEUxQlFVWXNRMEZCVXl0TkxHMUNRVUZVTEVsQlFUaENMRXRCUVVzc1EwRkJUQ3hMUVVGVGFFNHNSVUZCUlhsYUxGbEJRWHBETEVsQlFYVkVlbG9zUlVGQlJYbGFMRmxCUVVZc1MwRkJhVUo2V2l4RlFVRkZTeXhYUVVFeFNDeEZRVUZ6U1R0QlFVRkRMR05CUVVsVUxFTkJRVW83UVVGQlFTeGpRVUZOUnl4SlFVRkZReXhGUVVGRmVWb3NXVUZCVmp0QlFVRkJMR05CUVhWQ2FGa3NTVUZCUlN4WFFVRlRla0lzUlVGQlJVTXNUVUZCUml4RFFVRlRkMHNzWVVGQmJFSXNSMEZCWjBONlN5eEZRVUZGYVZjc2IwSkJRVVlzUlVGQmFFTXNSMEZCZVVScVZ5eEZRVUZGUXl4TlFVRkdMRU5CUVZOM1N5eGhRVUV6Uml4RFFVRjVSeXhKUVVGSGVrc3NSVUZCUlVNc1RVRkJSaXhEUVVGVFVTeEpRVUZhTEVWQlFXbENPMEZCUVVNc1owSkJRVWRVTEVWQlFVVXJSeXhUUVVGTUxFVkJRV1VzVDBGQlQyNUlMRWxCUVVWMVNDeFRRVUZUTTBnc1JVRkJSVkVzUlVGQlJYZGFMRmxCUVVvc1JVRkJhMEpzV2l4SlFVRnNRaXhEUVVGMVFpeDVRa0ZCZGtJc1EwRkJWQ3hGUVVFeVJDeEZRVUV6UkN4RFFVRkdMRVZCUVdsRlRpeEZRVUZGUXl4TlFVRkdMRU5CUVZNMFN5eGpRVUZVTEVkQlFYZENPVXNzU1VGQlJVTXNSVUZCUlhWT0xGbEJRVVlzUjBGQlpUbE1MRWxCUVVVc1EwRkJia0lzU1VGQmMwSXhRaXhKUVVGRlF5eEZRVUZGUnl4TlFVRkdMRU5CUVZOeFFpeE5RVUZVTEVkQlFXZENlRUlzUlVGQlJYVk9MRmxCUVd4Q0xFZEJRU3RDT1V3c1NVRkJSU3hEUVVGNlJDeEpRVUUwUkhwQ0xFVkJRVVZWTEU5QlFVWXNTVUZCV1Znc1NVRkJSVU1zUlVGQlJUUlNMRTlCUVVZc1EwRkJWVU1zVVVGQlZpeERRVUZ0UWl4TlFVRkpOMUlzUlVGQlJVTXNUVUZCUml4RFFVRlRiMFFzVlVGQllpeEhRVUYzUWl3MFFrRkJlRUlzUjBGQmNVUjZSQ3hEUVVGeVJDeEhRVUYxUkN4VlFVRjJSQ3hIUVVGclJVa3NSVUZCUlVNc1RVRkJSaXhEUVVGVGEwOHNiVUpCUVRORkxFZEJRU3RHTEVkQlFXeElMRVZCUVhWSUwwNHNSVUZCZGtnc1EwRkJNRWdzUTBGQk1VZ3NSVUZCTmtoM1Z5eExRVUUzU0N4RlFVRmtMRVZCUVcxS2NGY3NWMEZCVnl4WlFVRlZPMEZCUVVOU0xHZENRVUZGZDFnc1QwRkJSaXhEUVVGVmVsZ3NRMEZCVmp0QlFVRmhMR0ZCUVc1RExFVkJRVzlETEVOQlFYQkRMRU5CUVM5TkxFbEJRWFZRUXl4RlFVRkZkMWdzVDBGQlJpeERRVUZWZWxnc1EwRkJWaXhEUVVFdlVTeEhRVUUwVWtFc1NVRkJSVU1zUlVGQlJVY3NUVUZCUml4RFFVRlRjVUlzVFVGQlZDeEhRVUZuUWtNc1EwRkJiRUlzU1VGQmNVSjZRaXhGUVVGRlZTeFBRVUZHTEVsQlFWbFlMRWxCUVVWRExFVkJRVVUwVWl4UFFVRkdMRU5CUVZWRExGRkJRVllzUTBGQmJVSXNUVUZCU1RkU0xFVkJRVVZETEUxQlFVWXNRMEZCVTI5RUxGVkJRV0lzUjBGQmQwSXNORUpCUVhoQ0xFZEJRWEZFZWtRc1EwRkJja1FzUjBGQmRVUXNWVUZCZGtRc1IwRkJhMFZKTEVWQlFVVkRMRTFCUVVZc1EwRkJVMnRQTEcxQ1FVRXpSU3hIUVVFclJpeEhRVUZzU0N4RlFVRjFTQzlPTEVWQlFYWklMRU5CUVRCSUxFTkJRVEZJTEVWQlFUWklkMWNzUzBGQk4wZ3NSVUZCWkN4RlFVRnRTbkJYTEZkQlFWY3NXVUZCVlR0QlFVRkRVaXhuUWtGQlJYZFlMRTlCUVVZc1EwRkJWWHBZTEVOQlFWWTdRVUZCWVN4aFFVRnVReXhGUVVGdlF5eERRVUZ3UXl4RFFVRjRTeXhKUVVGblRrTXNSVUZCUlhkWUxFOUJRVVlzUTBGQlZYcFlMRU5CUVZZc1EwRkJOMmxDTzBGQlFUQnFRaXhYUVVGc2JVSXNUVUZCZFcxQ1F5eEZRVUZGZDFnc1QwRkJSaXhEUVVGVmVsZ3NRMEZCVmp0QlFVRmhPMEZCUVVNc1QwRkViM0ZTTEVOQlEyNXhVaXhKUVVGSk1sb3NRMEZCU2p0QlFVRkJMRlZCUVUxRExFTkJRVTQ3UVVGQlFTeFZRVUZSUXl4RFFVRlNPMEZCUVVFc1ZVRkJWVU1zUTBGQlZqdEJRVUZCTEZWQlFWbERMRU5CUVZvN1FVRkJRU3hWUVVGalF5eERRVUZrTzBGQlFVRXNWVUZCWjBKRExFTkJRV2hDTzBGQlFVRXNWVUZCYTBKRExFTkJRV3hDTzBGQlFVRXNWVUZCYjBKRExFTkJRWEJDTzBGQlFVRXNWVUZCYzBKRExFTkJRWFJDTzBGQlFVRXNWVUZCZDBKRExFbEJRVVVzZDBOQlFURkNPMEZCUVVFc1ZVRkJiVVZETEVsQlFVVjZWQ3hMUVVGTE1GUXNSMEZCVEN4RlFVRnlSVHRCUVVGQkxGVkJRV2RHUXl4SlFVRkZMRVZCUVd4R0xFTkJRWEZHZG1Fc1JVRkJSU3RITEZOQlFVWXNSMEZCV1N4RFFVRkRMRU5CUVdJc1JVRkJaUzlITEVWQlFVVjNZU3hQUVVGR0xFZEJRVlVzUlVGQlEwTXNVVUZCVHl4RFFVRlNMRVZCUVZWRExGRkJRVThzUTBGQmFrSXNSVUZCYlVKRExGVkJRVk1zUTBGQk5VSXNSVUZCT0VKRExGVkJRVk1zUTBGQmRrTXNSVUZCZVVORExFMUJRVXNzUTBGQk9VTXNSVUZCZWtJc1EwRkJNRVVzU1VGQlNVTXNRMEZCU2l4RlFVRk5ReXhEUVVGT0xFTkJRVkV2WVN4RlFVRkZkVmtzV1VGQlJpeEhRVUZsTEZWQlFWTTVXU3hEUVVGVUxFVkJRVmM3UVVGQlF5eFpRVUZIUVN4RlFVRkZOa01zWVVGQlJpeExRVUZyUWpkRExFbEJRVVZCTEVWQlFVVTJReXhoUVVGMFFpeEhRVUZ4UXl4RFFVRkRkMWtzU1VGQlJTeHBRa0ZCWlhKaUxFVkJRVVYxWWl4SlFVRndRaXhMUVVFeVFpeEZRVUZGTEZkQlFWVjJZaXhEUVVGYUxFTkJRVE5DTEVsQlFUSkRMRTFCUVVsQkxFVkJRVVYzWWl4TFFVRjZSaXhGUVVFclJqdEJRVUZETEdOQlFVZHFZaXhGUVVGRlF5eE5RVUZHTEVOQlFWTTBUaXhUUVVGVUxFbEJRVzlDTlUwc1JVRkJSWGhDTEVOQlFVWXNSVUZCU1N4TlFVRkpUeXhGUVVGRlF5eE5RVUZHTEVOQlFWTTJUaXhqUVVGcVFpeERRVUYyUWl4RlFVRjNSQ3hQUVVGUExFMUJRVXM1VGl4RlFVRkZiMW9zVlVGQlJpeEhRVUZoTEVOQlFVTXNRMEZCYmtJc1EwRkJVQ3hEUVVFMlFpeEpRVUZITEVOQlFVTndXaXhGUVVGRlF5eE5RVUZHTEVOQlFWTXlUaXhaUVVGV0xFbEJRWGRDTTAwc1JVRkJSWGhDTEVOQlFVWXNSVUZCU1U4c1JVRkJSVU1zVFVGQlJpeERRVUZUTWs0c1dVRkJZaXhEUVVFelFpeEZRVUZ6UkR0QlFVRkRMR2RDUVVGSk1VMHNTVUZCUld4Q0xFVkJRVVYzWVN4UFFVRkdMRU5CUVZWSExGRkJRVllzUjBGQmJVSXNhVUpCUVdWc1lpeEZRVUZGZFdJc1NVRkJha0lzUjBGQmMwSjJZaXhGUVVGRmVXSXNZVUZCUml4RFFVRm5RaXhEUVVGb1FpeEZRVUZ0UWtNc1MwRkJla01zUjBGQkswTXhZaXhGUVVGRk1HSXNTMEZCTVVVN1FVRkJRU3huUWtGQlowWjZZaXhKUVVGRlRTeEZRVUZGZDJFc1QwRkJSaXhEUVVGVlNTeFJRVUZXTEVkQlFXMUNMR2xDUVVGbGJtSXNSVUZCUlhWaUxFbEJRV3BDTEVkQlFYTkNkbUlzUlVGQlJYbGlMR0ZCUVVZc1EwRkJaMElzUTBGQmFFSXNSVUZCYlVKRkxFdEJRWHBETEVkQlFTdERNMklzUlVGQlJUSmlMRXRCUVhSS0xFTkJRVFJLTEVsQlFVY3NSVUZCUlhCaUxFVkJRVVZ2VXl4TlFVRkdMRU5CUVZONVJ5eEhRVUZVTEVsQlFXTTNXU3hGUVVGRlF5eE5RVUZHTEVOQlFWTTBTQ3h4UWtGQmRrSXNTVUZCT0VNelJ5eExRVUZIYkVJc1JVRkJSVU1zVFVGQlJpeERRVUZUTmtnc2NVSkJRVFZFTEVOQlFVZ3NSVUZCYzBZN1FVRkJReXhyUWtGQlJ6UlNMRWxCUVVVc1EwRkJReXhEUVVGSUxFVkJRVXRETEVsQlFVVXNRMEZCUXl4RFFVRlNMRVZCUVZWRExFbEJRVVVzUTBGQlF5eERRVUZpTEVWQlFXVkZMRWxCUVVVc1MwRkJTeXhEUVVGMFFpeEZRVUYzUW1sQ0xFbEJRVVVzUzBGQlN5eERRVUV2UWl4RlFVRnBReTloTEVWQlFVVjNZU3hQUVVGR0xFTkJRVlZETEUxQlFWWXNSMEZCYVVKMldpeERRVUZzUkN4RlFVRnZSR3hDTEVWQlFVVjNZU3hQUVVGR0xFTkJRVlZGTEUxQlFWWXNSMEZCYVVKb1lpeERRVUZ5UlN4RlFVRjFSVzFoTEVsQlFVVnFWQ3hMUVVGTE1GUXNSMEZCVEN4RlFVRjZSU3hGUVVGdlJuUmhMRVZCUVVWdldpeFZRVUZHTEVkQlFXRXNRMEZCUXl4RFFVRnNSeXhGUVVGdlIzQmFMRVZCUVVVd1ZTeHRRa0ZCUml4RlFVRndSeXhGUVVFMFNERlZMRVZCUVVWeFlpeGpRVUZHTEVkQlFXbENMRXRCUVVzc1EwRkJiRW9zUlVGQmIwcHlZaXhGUVVGRlF5eE5RVUZHTEVOQlFWTjVUQ3hUUVVGVUxFZEJRVzFDTEVOQlFXNUNMRXRCUVhWQ2RVOHNTVUZCUlN4RFFVRkRMRU5CUVRGQ0xFTkJRWEJLTEVWQlFXbE1MR2xDUVVGbGVHRXNSVUZCUlhWaUxFbEJRWEpOTEVWQlFUQk5PMEZCUVVNc2IwSkJRVWx5WWl4SlFVRkZMRU5CUVVNc1EwRkJVQ3hEUVVGVFNDeEZRVUZGUXl4RlFVRkZNRUlzVFVGQlNpeEZRVUZaUXl4RlFVRmFMRU5CUVdWbldpeERRVUZtTEUxQlFXOUNlbUVzU1VGQlJTeERRVUZETEVOQlFYWkNMRWRCUVRCQ2NVUXNVMEZCVTBNc1lVRkJWQ3hKUVVGM1FucEVMRVZCUVVWM1JDeFRRVUZUUXl4aFFVRllMRVZCUVRCQ04wSXNSVUZCTVVJc1EwRkJOa0puV2l4RFFVRTNRaXhEUVVGNFFpeEpRVUY1UkhCWUxGTkJRVk5ETEdGQlFWUXNRMEZCZFVKeFdTeEpRVUYyUWl4RlFVRnVSaXhGUVVGcFNETmlMRXRCUVVkR0xFVkJRVVY1UlN4alFVRkdMRVZCUVhCSU8wRkJRWFZKTEdsQ1FVRkZkRVFzU1VGQlJpeERRVUZQTEdOQlFWQXNSVUZCYzBKYUxFTkJRWFJDTEVWQlFYZENVQ3hEUVVGNFFqdEJRVUV5UWp0QlFVRkRPMEZCUVVNN1FVRkJReXhQUVVGdU0wSXNSVUZCYnpOQ1R5eEZRVUZGZDFrc1YwRkJSaXhIUVVGakxGVkJRVk12V1N4RFFVRlVMRVZCUVZjN1FVRkJReXhaUVVGSFFTeEZRVUZGTmtNc1lVRkJSaXhMUVVGclFqZERMRWxCUVVWQkxFVkJRVVUyUXl4aFFVRjBRaXhIUVVGeFF5eERRVUZEZDFrc1EwRkJSQ3hKUVVGSkxHZENRVUZqY21Jc1JVRkJSWFZpTEVsQlFUVkVMRVZCUVdsRk8wRkJRVU1zWTBGQlIzWmlMRVZCUVVVNFlpeDFRa0ZCVEN4RlFVRTJRaXhQUVVGUGRtSXNSVUZCUlhkaExFOUJRVVlzUTBGQlZVTXNUVUZCVml4SFFVRnBRaXhuUWtGQlkyaGlMRVZCUVVWMVlpeEpRVUZvUWl4SFFVRnhRblppTEVWQlFVVjVZaXhoUVVGR0xFTkJRV2RDTEVOQlFXaENMRVZCUVcxQ1F5eExRVUY0UXl4SFFVRTRRekZpTEVWQlFVVXdZaXhMUVVGcVJTeEZRVUYxUlN4TlFVRkxibUlzUlVGQlJYZGhMRTlCUVVZc1EwRkJWVVVzVFVGQlZpeEhRVUZwUWl4blFrRkJZMnBpTEVWQlFVVjFZaXhKUVVGb1FpeEhRVUZ4UW5aaUxFVkJRVVY1WWl4aFFVRkdMRU5CUVdkQ0xFTkJRV2hDTEVWQlFXMUNSU3hMUVVGNFF5eEhRVUU0UXpOaUxFVkJRVVV5WWl4TFFVRjBSU3hEUVVFNVJTeERRVUV5U2l4SlFVRkhjR0lzUlVGQlJVTXNUVUZCUml4RFFVRlRkMHdzV1VGQldpeEZRVUY1UWl4UFFVRlBla3dzUlVGQlJXOWFMRlZCUVVZc1IwRkJZU3hEUVVGRExFTkJRV1FzUlVGQlowSXNUVUZCUzAwc1RVRkJTVEZhTEVWQlFVVjNZU3hQUVVGR0xFTkJRVlZETEUxQlFWWXNSMEZCYVVKNllTeEZRVUZGZDJFc1QwRkJSaXhEUVVGVlJ5eFJRVUZXTEVkQlFXMUNMR2RDUVVGamJHSXNSVUZCUlhWaUxFbEJRV2hDTEVkQlFYRkNkbUlzUlVGQlJYbGlMR0ZCUVVZc1EwRkJaMElzUTBGQmFFSXNSVUZCYlVKRExFdEJRWGhETEVkQlFUaERNV0lzUlVGQlJUQmlMRXRCUVhCR0xFVkJRVEJHYm1Jc1JVRkJSWGRoTEU5QlFVWXNRMEZCVlVVc1RVRkJWaXhIUVVGcFFqRmhMRVZCUVVWM1lTeFBRVUZHTEVOQlFWVkpMRkZCUVZZc1IwRkJiVUlzWjBKQlFXTnVZaXhGUVVGRmRXSXNTVUZCYUVJc1IwRkJjVUoyWWl4RlFVRkZlV0lzWVVGQlJpeERRVUZuUWl4RFFVRm9RaXhGUVVGdFFrVXNTMEZCZUVNc1IwRkJPRU16WWl4RlFVRkZNbUlzUzBGQk9Vc3NSVUZCYjB4MlFpeEpRVUZGYWxRc1MwRkJTekJVTEVkQlFVd3NSVUZCTVV3c1EwRkJUQ3hEUVVGMlFpeERRVUZ0VHl4SlFVRkhVU3hMUVVGSE9XRXNSVUZCUlVNc1RVRkJSaXhEUVVGVE1rd3NiVUpCUVZvc1NVRkJhVU1zUTBGQlF6Vk1MRVZCUVVWRExFMUJRVVlzUTBGQlUxRXNTVUZCT1VNc1JVRkJiVVFzU1VGQlIxUXNSVUZCUlRCRExGbEJRVVlzUlVGQlNDeEZRVUZ2UWp0QlFVRkRMR2RDUVVGSE1VTXNSVUZCUlhkaExFOUJRVVlzUTBGQlZVY3NVVUZCVml4SFFVRnRRak5oTEVWQlFVVjNZU3hQUVVGR0xFTkJRVlZETEUxQlFUZENMRWxCUVhGRGVtRXNSVUZCUlhWVExGTkJRVVlzU1VGQllYWlRMRVZCUVVVMlJpeFpRVUZHTEVWQlFXeEVMRWxCUVc5Rk4wWXNSVUZCUlhkaExFOUJRVVlzUTBGQlZVY3NVVUZCVml4SFFVRnRRak5oTEVWQlFVVjNZU3hQUVVGR0xFTkJRVlZETEUxQlFUZENMRWxCUVhGRGVtRXNSVUZCUlhWVExGTkJRVVlzU1VGQllYWlRMRVZCUVVVMFJpeFpRVUZHTEVWQlFYcElMRVZCUVRCSk8wRkJRVThzVjBGQmRFc3NUVUZCTWtzc1NVRkJSelZHTEVWQlFVVjNZU3hQUVVGR0xFTkJRVlZKTEZGQlFWWXNSMEZCYlVJMVlTeEZRVUZGZDJFc1QwRkJSaXhEUVVGVlJTeE5RVUUzUWl4SlFVRnhRekZoTEVWQlFVVjFVeXhUUVVGR0xFbEJRV0YyVXl4RlFVRkZOa1lzV1VGQlJpeEZRVUZzUkN4SlFVRnZSVGRHTEVWQlFVVjNZU3hQUVVGR0xFTkJRVlZKTEZGQlFWWXNSMEZCYlVJMVlTeEZRVUZGZDJFc1QwRkJSaXhEUVVGVlJTeE5RVUUzUWl4SlFVRnhRekZoTEVWQlFVVjFVeXhUUVVGR0xFbEJRV0YyVXl4RlFVRkZORVlzV1VGQlJpeEZRVUY2U0N4RlFVRXdTU3hQUVVGUExFbEJRVWRyVml4TFFVRkhPVmdzVTBGQlUwTXNZVUZCV2l4SlFVRXlRbmhFTEVWQlFVVXdRaXhOUVVGR0xFdEJRVmMyUWl4VFFVRlRReXhoUVVFdlF5eEpRVUU0UkhwRUxFVkJRVVZETEVWQlFVVXdRaXhOUVVGS0xFVkJRVmxETEVWQlFWb3NRMEZCWldkYUxFTkJRV1lzUTBGQmFrVXNSVUZCYlVZc1QwRkJUMVFzU1VGQlJTeERRVUZETEVOQlFVZ3NSVUZCU3l4TlFVRkxNMW9zUlVGQlJXOWFMRlZCUVVZc1IwRkJZU3hEUVVGRExFTkJRVzVDTEVOQlFWb3NRMEZCYTBNc1NVRkJSMUVzUzBGQlJ6VmFMRVZCUVVWWkxFbEJRVVlzUTBGQlR5eGhRVUZRTEVWQlFYRkNXaXhEUVVGeVFpeEZRVUYxUWxBc1EwRkJka0lzUTBGQlNDeEZRVUUyUWl4RlFVRkZRU3hGUVVGRmVXSXNZVUZCUml4SlFVRnBRbnBpTEVWQlFVVjVZaXhoUVVGR0xFTkJRV2RDTVZvc1RVRkJhRUlzUjBGQmRVSXNRMEZCTVVNc1EwRkJhRU1zUlVGQk5rVTdRVUZCUXl4blFrRkJSM2hDTEVWQlFVVjNZU3hQUVVGR0xFTkJRVlZITEZGQlFWWXNSMEZCYlVJc1owSkJRV05zWWl4RlFVRkZkV0lzU1VGQmFFSXNSMEZCY1VKMllpeEZRVUZGZVdJc1lVRkJSaXhEUVVGblFpeERRVUZvUWl4RlFVRnRRa01zUzBGQmVFTXNSMEZCT0VNeFlpeEZRVUZGTUdJc1MwRkJia1VzUlVGQmVVVnVZaXhGUVVGRmQyRXNUMEZCUml4RFFVRlZTU3hSUVVGV0xFZEJRVzFDTEdkQ1FVRmpibUlzUlVGQlJYVmlMRWxCUVdoQ0xFZEJRWEZDZG1Jc1JVRkJSWGxpTEdGQlFVWXNRMEZCWjBJc1EwRkJhRUlzUlVGQmJVSkZMRXRCUVhoRExFZEJRVGhETTJJc1JVRkJSVEppTEV0QlFUVkpMRVZCUVd0S0xFdEJRVXNzUTBGQlRDeExRVUZUZEVJc1EwRkJPVW9zUlVGQlowczdRVUZCUXl4clFrRkJTVFZaTEVOQlFVb3NRMEZCVFd4Q0xFVkJRVVV3UXl4WlFVRkdMRTFCUVd0Q01VTXNSVUZCUlhkaExFOUJRVVlzUTBGQlZVa3NVVUZCVml4TFFVRnhRalZoTEVWQlFVVjNZU3hQUVVGR0xFTkJRVlZGTEUxQlFXcEVMRWxCUVhsRUxFTkJRVU14WVN4RlFVRkZNRU1zV1VGQlJpeEZRVUZFTEVsQlFXMUNNVU1zUlVGQlJYZGhMRTlCUVVZc1EwRkJWVWNzVVVGQlZpeExRVUZ4UWpOaExFVkJRVVYzWVN4UFFVRkdMRU5CUVZWRExFMUJRVE5ITEVkQlFXdElXQ3hKUVVGRkxFTkJRVU1zUTBGQmNrZ3NTVUZCZDBnMVdTeEpRVUZGTEUxQlFVbHlRaXhMUVVGTE1tSXNTMEZCVEN4RFFVRlhNMklzUzBGQlMzbEdMRWRCUVV3c1EwRkJVM1JHTEVWQlFVVjNZU3hQUVVGR0xFTkJRVlZKTEZGQlFWWXNSMEZCYlVJMVlTeEZRVUZGZDJFc1QwRkJSaXhEUVVGVlJTeE5RVUYwUXl4RFFVRllMRVZCUVhsRU4yRXNTMEZCUzNsR0xFZEJRVXdzUTBGQlUzUkdMRVZCUVVWM1lTeFBRVUZHTEVOQlFWVkhMRkZCUVZZc1IwRkJiVUl6WVN4RlFVRkZkMkVzVDBGQlJpeERRVUZWUXl4TlFVRjBReXhEUVVGNlJDeERRVUZLTEVkQlFUUkhOV0VzUzBGQlN6UmlMRVZCUVc1SUxFVkJRWE5JTTBJc1NVRkJSVGxhTEVWQlFVVXdReXhaUVVGR0xFdEJRV2xDZUVJc1NVRkJSV3hDTEVWQlFVVkRMRTFCUVVZc1EwRkJVMmxNTEZWQlFUVkNMRWRCUVhWRExFdEJRVWRvU3l4RFFVRklMRWRCUVV0c1FpeEZRVUZGUXl4TlFVRkdMRU5CUVZOcFRDeFZRVUZ5VXp0QlFVRnBWQ3hwUWtGQlJ6UlBMRXRCUVVjNVdpeEZRVUZGV1N4SlFVRkdMRU5CUVU4c2NVSkJRVkFzUlVGQk5rSmFMRU5CUVRkQ0xFVkJRU3RDVUN4RFFVRXZRaXhEUVVGSUxFVkJRWEZETEV0QlFVc3NRMEZCVEN4TFFVRlRjMklzUTBGQlZDeExRVUZoTDJFc1JVRkJSWGRoTEU5QlFVWXNRMEZCVlVjc1VVRkJWaXhMUVVGeFFqTmhMRVZCUVVWM1lTeFBRVUZHTEVOQlFWVkRMRTFCUVM5Q0xFbEJRWFZEZW1Fc1JVRkJSWGRoTEU5QlFVWXNRMEZCVlVrc1VVRkJWaXhMUVVGeFFqVmhMRVZCUVVWM1lTeFBRVUZHTEVOQlFWVkZMRTFCUVhSRkxFdEJRU3RGU3l4SlFVRkZMRU5CUVVNc1EwRkJiRVlzUTBGQllpeERRVUZ5UXl4RlFVRjNTWEpDTEVOQlFUTkpMRVZCUVRaSk8wRkJRVU1zYTBKQlFVZEpMRU5CUVVnc1JVRkJTeXhQUVVGUExFMUJRVXRLTEVsQlFVVXNRMEZCUXl4RFFVRlNMRU5CUVZBc1EwRkJhMElzU1VGQlIzRkNMRU5CUVVnc1JVRkJTenRCUVVGREwyRXNhMEpCUVVWdldpeFZRVUZHTEVkQlFXRXNRMEZCUXl4RFFVRmtMRVZCUVdkQ2NGb3NSVUZCUlZrc1NVRkJSaXhEUVVGUExHTkJRVkFzUlVGQmMwSmFMRU5CUVhSQ0xFVkJRWGRDVUN4RFFVRjRRaXhEUVVGb1FpeEZRVUV5UTBFc1JVRkJSWGxGTEdOQlFVWXNSVUZCTTBNc1JVRkJPRVJzUlN4RlFVRkZReXhOUVVGR0xFTkJRVk13VEN4M1FrRkJWQ3hKUVVGdFF5eERRVUZETTB3c1JVRkJSVU1zVFVGQlJpeERRVUZUYlZrc1RVRkJOME1zU1VGQmNVUXpXU3hGUVVGRk5Gb3NaVUZCUml4RlFVRnVTQ3hGUVVGMVNVMHNUVUZCU1doaExFVkJRVVZqTEVsQlFVWXNTVUZCVVZRc1JVRkJSVlVzVDBGQlJpeEZRVUZTTEVWQlFXOUNjMW9zU1VGQlJXaGhMRVZCUVVWNVJpeHRRa0ZCUml4RlFVRjBRaXhGUVVFNFEzcEdMRVZCUVVVNFJpeHZRa0ZCUml4RFFVRjFRaXhEUVVGMlFpeERRVUU1UXl4RlFVRjNSVGxHTEVWQlFVVXJSeXhUUVVGR0xFbEJRV0V2Unl4RlFVRkZORklzVDBGQlJpeERRVUZWT0Vvc1QwRkJWaXhEUVVGclFpeHJSa0ZCYkVJc1EwRkJja1lzUlVGQk1rd3hZaXhGUVVGRlF5eE5RVUZHTEVOQlFWTkRMRkZCUVZRc1NVRkJiVUpHTEVWQlFVVnBWU3hYUVVGeVFpeExRVUZ0UTJwVkxFVkJRVVZETEUxQlFVWXNRMEZCVXpCSExEUkNRVUZVTEVkQlFYTkRNMGNzUlVGQlJXVXNXVUZCUml4RlFVRjBReXhIUVVGMVJHWXNSVUZCUlc5VkxHRkJRVVlzUlVGQk1VWXNRMEZCTTB3c1JVRkJkMU1yUml4SlFVRkZMRU5CUVVNc1EwRkJNMU1zUlVGQk5sTXNRMEZCUTI1aExFVkJRVVZETEUxQlFVWXNRMEZCVXpSTkxGVkJRVllzU1VGQmMwSTNUU3hGUVVGRlF5eE5RVUZHTEVOQlFWTjNReXhuUWtGQlZDeExRVUUwUWl4RFFVRkRMRU5CUVRkQ0xFbEJRV2REZWtNc1JVRkJSVU1zVFVGQlJpeERRVUZUTUVNc1owSkJRVlFzUzBGQk5FSXNRMEZCUXl4RFFVRnVSaXhKUVVGelJqTkRMRVZCUVVVclV5eGhRVUZHTEVOQlFXZENMRU5CUVVNc1EwRkJha0lzUTBGQmRsa3NRMEZCZGtrc1JVRkJiV2xDTkVjc1NVRkJSU3hEUVVGRExFTkJRWFJwUWl4RFFVRjNhVUlzU1VGQlNXcGhMRWxCUVVWTkxFVkJRVVYzWVN4UFFVRkdMRU5CUVZWTExFbEJRVllzUjBGQlpUZGhMRVZCUVVVd1F5eFpRVUZHTEV0QlFXbENNVU1zUlVGQlJYZGhMRTlCUVVZc1EwRkJWVWNzVVVGQlZpeEhRVUZ0UWpOaExFVkJRVVYzWVN4UFFVRkdMRU5CUVZWRExFMUJRVGxETEVkQlFYRkVlbUVzUlVGQlJYZGhMRTlCUVVZc1EwRkJWVWtzVVVGQlZpeEhRVUZ0UWpWaExFVkJRVVYzWVN4UFFVRkdMRU5CUVZWRkxFMUJRWFpITEVOQlFUaEhhR0lzUzBGQlIwMHNSVUZCUlVNc1RVRkJSaXhEUVVGVFowd3NWVUZCV2l4RlFVRjFRbXBNTEVWQlFVVTRSQ3hIUVVGR0xFdEJRVkZ3UlN4SlFVRkZMRU5CUVVOQkxFTkJRVmdzUTBGQmRrSXNSVUZCY1VOTkxFVkJRVVZ4WWl4alFVRkdMRWRCUVdsQ00ySXNTVUZCUlN4RFFVRkdMRWRCUVVrc1RVRkJTaXhIUVVGWExFMUJRV3BGTEVWQlFYZEZjV0VzU1VGQlJYSmhMRWxCUVVWellTeERRVUUxUlN4RFFVRTRSU3hKUVVGSmNHRXNTVUZCUlN4RFFVRkRMRU5CUVZBc1EwRkJVeXhKUVVGSFJpeEpRVUZGTEVOQlFVWXNTVUZCUzNGaExFbEJRVVV2V2l4RlFVRkZORVlzV1VGQlJpeEZRVUZRTEVsQlFYbENhRWNzU1VGQlJTeERRVUZETEVOQlFVZ3NSVUZCUzBrc1JVRkJSVU1zVFVGQlJpeERRVUZUYzAwc1ZVRkJWQ3hMUVVGelFuZE9MRWxCUVVVdldpeEZRVUZGTkVZc1dVRkJSaXhMUVVGcFFpeERRVUZxUWl4SFFVRnRRaTlHTEV0QlFVczRZaXhIUVVGTUxFTkJRVk1zUTBGQlF6TmlMRVZCUVVVMFJpeFpRVUZHTEVWQlFVUXNSMEZCYTBKdlZTeERRVUZzUWl4SFFVRnZRblJoTEVOQlFUZENMRVZCUVN0Q1RTeEZRVUZGUXl4TlFVRkdMRU5CUVZOMVRTeGxRVUY0UXl4RFFVRXpReXhEUVVFNVFpeEpRVUZ2U1RsTkxFbEJRVVVzUTBGQlJpeEpRVUZMY1dFc1NVRkJSUzlhTEVWQlFVVTJSaXhaUVVGR0xFVkJRVkFzUzBGQk1FSnFSeXhKUVVGRkxFTkJRVU1zUTBGQlNDeEZRVUZMU1N4RlFVRkZReXhOUVVGR0xFTkJRVk56VFN4VlFVRlVMRXRCUVhOQ2QwNHNTVUZCUlM5YUxFVkJRVVUyUml4WlFVRkdMRXRCUVdsQ0xFTkJRV3BDTEVkQlFXMUNhRWNzUzBGQlN6aGlMRWRCUVV3c1EwRkJVek5pTEVWQlFVVTJSaXhaUVVGR0xFdEJRV2xDYlZVc1EwRkJha0lzUjBGQmJVSjBZU3hEUVVFMVFpeEZRVUU0UWswc1JVRkJSVU1zVFVGQlJpeERRVUZUZFUwc1pVRkJka01zUTBGQk0wTXNRMEZCTDBJc1EwRkJjRWtzUlVGQmQxRTFUU3hOUVVGSlNDeEZRVUZGT0dJc2RVSkJRVVlzUjBGQk1FSXNRMEZCUXl4RFFVRXZRaXhEUVVGNFVTeEZRVUV3VXl4RFFVRkRkbUlzUlVGQlJVTXNUVUZCUml4RFFVRlRkME1zWjBKQlFWWXNTVUZCTkVJc1YwRkJVM3BETEVWQlFVVnhZaXhqUVVGMlF5eEpRVUYxUkhSQ0xFbEJRVVZETEVOQlFYcEVMRXRCUVRaRVJDeEpRVUZGUXl4RFFVRXZSQ3hEUVVFeFV5eEZRVUUwVnl4RFFVRkRhR0VzUlVGQlJVTXNUVUZCUml4RFFVRlRNRU1zWjBKQlFWWXNTVUZCTkVJc1YwRkJVek5ETEVWQlFVVnhZaXhqUVVGMlF5eEpRVUYxUkhSQ0xFbEJRVVZETEVOQlFYcEVMRXRCUVRaRVJDeEpRVUZGUXl4RFFVRXZSQ3hEUVVFMVZ5eEZRVUU0WVdoaExFVkJRVVZETEUxQlFVWXNRMEZCVTNsTUxGTkJRVlFzUjBGQmJVSXNRMEZCY0dNc1JVRkJjMk03UVVGQlF5eHpRa0ZCUnl4RlFVRkZOMHdzUzBGQlMzbEdMRWRCUVV3c1EwRkJVelZHTEVOQlFWUXNTVUZCV1Uwc1JVRkJSVU1zVFVGQlJpeERRVUZUZVV3c1UwRkJja0lzU1VGQlowTjFUeXhEUVVGc1F5eERRVUZJTEVWQlFYZERMRTlCUVU4c1RVRkJTMFlzU1VGQlJVTXNRMEZCVUN4RFFVRlFMRU5CUVdsQ0xFbEJRVWNzUTBGQlEwTXNRMEZCU2l4RlFVRk5MRTlCUVU5QkxFbEJRVVVzUTBGQlF5eERRVUZJTEVWQlFVdHFZU3hGUVVGRmQyRXNUMEZCUml4RFFVRlZReXhOUVVGV0xFZEJRV2xDZW1Fc1JVRkJSWGRoTEU5QlFVWXNRMEZCVlVjc1VVRkJhRU1zUlVGQmVVTXpZU3hGUVVGRmQyRXNUMEZCUml4RFFVRlZSU3hOUVVGV0xFZEJRV2xDTVdFc1JVRkJSWGRoTEU5QlFVWXNRMEZCVlVrc1VVRkJjRVVzUlVGQk5rVmlMRWxCUVVWRExFTkJRUzlGTEVWQlFXbEdMRTFCUVV0b1lTeEZRVUZGZDJFc1QwRkJSaXhEUVVGVlN5eEpRVUZXTEVkQlFXVTNZU3hGUVVGRk1FTXNXVUZCUml4TFFVRnBRakZETEVWQlFVVjNZU3hQUVVGR0xFTkJRVlZITEZGQlFWWXNSMEZCYlVJellTeEZRVUZGZDJFc1QwRkJSaXhEUVVGVlF5eE5RVUU1UXl4SFFVRnhSSHBoTEVWQlFVVjNZU3hQUVVGR0xFTkJRVlZKTEZGQlFWWXNSMEZCYlVJMVlTeEZRVUZGZDJFc1QwRkJSaXhEUVVGVlJTeE5RVUYwUnl4RFFVRjRSanRCUVVGelRTeHRRa0ZCUlhwaExFMUJRVVlzUTBGQlUzVk1MRmxCUVZRc1MwRkJkMElzUTBGQlEzaE1MRVZCUVVWRExFMUJRVVlzUTBGQlUzVkdMRkZCUVZRc1NVRkJiVUo0Uml4RlFVRkZReXhOUVVGR0xFTkJRVk13VFN4dFFrRkJOMElzUzBGQmJVUXpUU3hGUVVGRmFVY3NhVUpCUVVZc1JVRkJia1FzUlVGQmVVVnFSeXhGUVVGRlF5eE5RVUZHTEVOQlFWTjFSaXhSUVVGVUxFdEJRVzlDTEUxQlFVa3JWU3hGUVVGRkwxa3NUVUZCVGl4SlFVRmpLMWtzUlVGQlJXNVpMRWxCUVVZc1EwRkJUeXhGUVVGRGQxb3NWVUZCVXpWaUxFVkJRVVYzWVN4UFFVRkdMRU5CUVZWNFlTeEZRVUZGTUVNc1dVRkJSaXhMUVVGcFFpeFJRVUZxUWl4SFFVRXdRaXhSUVVGd1F5eERRVUZXTEVWQlFYZEViVm9zVFVGQlMyaERMRU5CUVRkRUxFVkJRVkFzUTBGQlpDeEZRVUZ6UmxVc1JVRkJSVzVaTEVsQlFVWXNRMEZCVHl4RlFVRkRkMW9zVlVGQlV6VmlMRVZCUVVWM1lTeFBRVUZHTEVOQlFWVjRZU3hGUVVGRk1FTXNXVUZCUml4TFFVRnBRaXhWUVVGcVFpeEhRVUUwUWl4VlFVRjBReXhEUVVGV0xFVkJRVFJFYlZvc1RVRkJUU3hKUVVGSmJtRXNUMEZCVDJ0R0xFbEJRVmdzUlVGQlJDeERRVUZyUWtNc1QwRkJiRUlzUlVGQmFrVXNSVUZCVUN4RFFVRXhSeXhEUVVGNlJTeEZRVUV3VWpkSExFVkJRVVZuUnl4alFVRkdMRU5CUVdsQ0sxUXNRMEZCYWtJc1EwRkJNVklzUlVGQk9GTXZXaXhGUVVGRkswWXNiVUpCUVVZc1EwRkJjMEpuVlN4RFFVRjBRaXhEUVVGMFZUdEJRVUZuVnp0QlFVRkRPMEZCUVVNN1FVRkJRenRCUVVGRExFOUJRWFF4U1N4RlFVRjFNVWt2V2l4RlFVRkZlVmtzVlVGQlJpeEhRVUZoTEZWQlFWTm9XaXhEUVVGVUxFVkJRVmM3UVVGQlF5eFpRVUZIUVN4RlFVRkZOa01zWVVGQlJpeExRVUZyUWpkRExFbEJRVVZCTEVWQlFVVTJReXhoUVVGMFFpeEhRVUZ4UTNOWUxFdEJRVWMxV2l4RlFVRkZXU3hKUVVGR0xFTkJRVThzV1VGQlVDeEZRVUZ2UWxvc1EwRkJjRUlzUlVGQmMwSlFMRU5CUVhSQ0xFTkJRWGhETEVWQlFXbEZiV0VzU1VGQlJTeERRVUZETEVOQlFYQkZMRVZCUVhORlJpeERRVUY2UlN4RlFVRXlSVHRCUVVGRE1Wb3NXVUZCUlVNc1RVRkJSaXhEUVVGVE5FMHNWVUZCVkN4SlFVRnhRamhOTEVOQlFYSkNMRWxCUVhkQ1JDeERRVUY0UWl4TFFVRTBRakZhTEVWQlFVVkRMRTFCUVVZc1EwRkJVM2RETEdkQ1FVRlVMRXRCUVRSQ0xFTkJRVU1zUTBGQk4wSXNTVUZCWjBONlF5eEZRVUZGUXl4TlFVRkdMRU5CUVZNd1F5eG5Ra0ZCVkN4TFFVRTBRaXhEUVVGRExFTkJRWHBHTEV0QlFUWkdNME1zUlVGQlJTdFRMR0ZCUVVZc1EwRkJaMElzUTBGQlF5eERRVUZxUWl4RFFVRTNSaXhEUVVGcFNDeEpRVUZKTjFJc1NVRkJSVEJHTEV0QlFVc3dWQ3hIUVVGTUxFVkJRVTQ3UVVGQlFTeGpRVUZwUWpWaExFbEJRVVYzUWl4SlFVRkZNbGtzUTBGQmNrSXNRMEZCZFVJc1NVRkJSemRhTEVWQlFVVnZXaXhWUVVGR0xFdEJRV1Z3V2l4RlFVRkZkVm9zYTBKQlFVWXNRMEZCY1VJNVdpeERRVUZ5UWl4SFFVRjNRazhzUlVGQlJWa3NTVUZCUml4RFFVRlBMRTlCUVZBc1JVRkJaVm9zUTBGQlppeEZRVUZwUWxBc1EwRkJha0lzUTBGQmVFSXNSVUZCTkVORExFbEJRVVVzUjBGQlJpeEpRVUZQZDBJc1NVRkJSVzFhTEVOQlFVWXNSMEZCU1N4SFFVRllMRXRCUVdsQ1NDeExRVUZIT1ZRc1lVRkJZVGhVTEVOQlFXSXNRMEZCU0N4RlFVRnRRa0VzU1VGQlJURmFMRmRCUVZjc1dVRkJWVHRCUVVGRFVpeHJRa0ZCU1VFc1JVRkJSVU1zVFVGQlJpeERRVUZUWjAwc1kwRkJWQ3hKUVVGNVFtcE5MRVZCUVVVNFVpeHRRa0ZCUml4RFFVRnpRblJSTEUxQlFYUkNMRWRCUVRaQ0xFTkJRWFJFTEVsQlFYbEVMRU5CUVVOb1F5eEZRVUZGUXl4RlFVRkZNRUlzVFVGQlNpeEZRVUZaY1ZZc1VVRkJXaXhEUVVGeFFuaFhMRVZCUVVWRExFMUJRVVlzUTBGQlUzZFBMRmRCUVRsQ0xFTkJRVEZFTEVsQlFYTkhlazhzUlVGQlJUaFNMRzFDUVVGR0xFTkJRWE5DWjBzc1YwRkJkRUlzUTBGQmEwTTVZaXhGUVVGRlF5eE5RVUZHTEVOQlFWTTJUeXh4UWtGQk0wTXNRMEZCZEVjc1JVRkJkMHM1VHl4RlFVRkZXU3hKUVVGR0xFTkJRVThzVTBGQlVDeEZRVUZwUWxvc1EwRkJha0lzUlVGQmJVSlFMRU5CUVc1Q0xFTkJRVFZMTzBGQlFXMU5MRmRCUVhwT0xFVkJRVEJPTEVkQlFURk9MRU5CUVhSRExFTkJRVFZETEVWQlFXdFVReXhKUVVGRkxFZEJRVVlzU1VGQlQzZENMRWxCUVVWdFdpeERRVUZHTEVkQlFVa3NSMEZCV0N4TFFVRnBRa2dzUzBGQlJ6bFVMR0ZCUVdFNFZDeERRVUZpTEVOQlFVZ3NSVUZCYlVKc1lTeEZRVUZGV1N4SlFVRkdMRU5CUVU4c1lVRkJVQ3hGUVVGeFFsb3NRMEZCY2tJc1JVRkJkVUpRTEVOQlFYWkNMRU5CUVhCRExFTkJRV3BWTEVkQlFXbFpOR0VzU1VGQlJYcFVMRXRCUVVzd1ZDeEhRVUZNTEVWQlFXNVpMRVZCUVRoWk9Wb3NWMEZCVnl4WlFVRlZPMEZCUVVOU0xHdENRVUZKUVN4RlFVRkZiMW9zVlVGQlJpeEhRVUZoTEVOQlFVTXNRMEZCYkVJN1FVRkJjVUlzVjBGQk0wTXNSVUZCTkVNc1EwRkJOVU1zUTBGQk9Wa3NSVUZCTm1Jc1EwRkJRMDBzUTBGQlJDeEpRVUZKTEVOQlFVTkRMRU5CUVV3c1NVRkJVU3hEUVVGRE0xb3NSVUZCUlhGaUxHTkJRVmdzU1VGQk1rSXNUVUZCU1hKaUxFVkJRVVYzWVN4UFFVRkdMRU5CUVZWTExFbEJRWHBETEVsQlFTdERaQ3hOUVVGSlF5eERRVUZ1Wml4RlFVRnhaaXhQUVVGUExFMUJRVXRPTEVsQlFVVkRMRWxCUVVVc1EwRkJReXhEUVVGV0xFTkJRVkFzUTBGQmIwSkVMRWxCUVVWRExFbEJRVVVzUTBGQlF5eERRVUZNTEVOQlFVOHNTVUZCU1doaExFTkJRVW9zUTBGQlRTeEpRVUZIUVN4SlFVRkZTeXhGUVVGRlF5eE5RVUZHTEVOQlFWTjFUQ3haUVVGVUxFZEJRWE5DZUV3c1JVRkJSVGhFTEVkQlFVWXNSMEZCVFRsRUxFVkJRVVYxVXl4VFFVRlNMRWRCUVd0Q0xFTkJRVU4yVXl4RlFVRkZkVk1zVTBGQk0wTXNSMEZCY1VRc1EwRkJRM2RJTEVOQlFYaEVMRVZCUVRCRUwxb3NSVUZCUlVNc1RVRkJSaXhEUVVGVGRVWXNVVUZCZEVVc1JVRkJLMFU3UVVGQlF5eG5Ra0ZCUnpkR0xFbEJRVVVzUTBGQlEwc3NSVUZCUlRSR0xGbEJRVVlzUlVGQlRpeEZRVUYxUWl4UFFVRlBMRXRCUVVzMVJpeEZRVUZGZDFnc1QwRkJSaXhEUVVGVmVGZ3NSVUZCUlVzc1YwRkJXaXhEUVVGYUxFTkJRWEZETEVsQlFVZFdMRWxCUVVVc1EwRkJRMHNzUlVGQlJUWkdMRmxCUVVZc1JVRkJUaXhGUVVGMVFpeFBRVUZQTEUxQlFVczNSaXhGUVVGRlJ5eE5RVUZHTEVOQlFWTnhRaXhOUVVGVUxFZEJRV2RDZUVJc1JVRkJSWE5WTEZGQlFVWXNRMEZCVnpsVExFMUJRVE5DTEVkQlFXdERlRUlzUlVGQlJYZFlMRTlCUVVZc1EwRkJWWGhZTEVWQlFVVnpWU3hSUVVGR0xFTkJRVmM1VXl4TlFVRllMRWRCUVd0Q0xFTkJRVFZDTEVOQlFXeERMRWRCUVdsRmVFSXNSVUZCUlhkWUxFOUJRVVlzUTBGQlZYaFlMRVZCUVVWSExFMUJRVVlzUTBGQlUzRkNMRTFCUVZRc1IwRkJaMElzUTBGQk1VSXNRMEZCZEVVc1EwRkJVQ3hEUVVFeVJ5eEpRVUZIZUVJc1JVRkJSVU1zVFVGQlJpeERRVUZUT0Vnc1owSkJRVm9zUlVGQk5rSTdRVUZCUXl4clFrRkJSM2RUTEVWQlFVVXZXU3hOUVVGR0xFZEJRVk1zUTBGQldpeEZRVUZqTzBGQlFVTXNiMEpCUVVrMVFpeEpRVUZGTW1Fc1JVRkJSWGRDTEVkQlFVWXNSVUZCVGp0QlFVRkJMRzlDUVVGamFHTXNTVUZCUlhkaExFVkJRVVYzUWl4SFFVRkdMRVZCUVdoQ08wRkJRVUVzYjBKQlFYZENPV0VzU1VGQlJYSkNMRVZCUVVWbll5eFJRVUZHTEVkQlFWYzNZaXhGUVVGRk5tSXNVVUZCZGtNN1FVRkJRU3h2UWtGQlowUnVZU3hKUVVGRk4wSXNSVUZCUldsakxFbEJRVVlzUjBGQlR6bGlMRVZCUVVVNFlpeEpRVUV6UkN4RFFVRm5SVGRpTEVWQlFVVjVVeXhSUVVGR0xFZEJRVmQ0VWl4SlFVRkZVU3hEUVVGaUxFVkJRV1Y2UWl4RlFVRkZlVk1zVVVGQlJpeEhRVUZYZWxNc1JVRkJSWGxUTEZGQlFVWXNSMEZCVnl4RFFVRnlReXhGUVVGMVF6VlRMRXRCUVV0NVJpeEhRVUZNTEVOQlFWTjBSaXhGUVVGRmVWTXNVVUZCV0N4SlFVRnhRbnBUTEVWQlFVVkRMRTFCUVVZc1EwRkJVMjFKTEhWQ1FVRTVRaXhMUVVGM1JIQkpMRVZCUVVWNVV5eFJRVUZHTEVkQlFWY3NRMEZCYmtVc1EwRkJka01zUlVGQk5rY3NRMEZCUTJoU0xFbEJRVVVzUjBGQlJpeEpRVUZSTEVsQlFVbERMRTlCUVU5clJpeEpRVUZZTEVWQlFVUXNRMEZCYTBKRExFOUJRV3hDTEV0QlFUUkNha2dzUlVGQlJXbGpMRWxCUVRsQ0xFZEJRVzFETEVkQlFUTkRMRTFCUVd0RU4ySXNSVUZCUlhsVExGRkJRVVlzUjBGQlZ5eERRVUUzUkN4RFFVRTNSenRCUVVFMlN5eGxRVUUxVUN4TlFVRnBVWHBUTEVWQlFVVjVVeXhSUVVGR0xFZEJRVmNzUTBGQldDeERRVUZoZWxNc1JVRkJSWGxUTEZGQlFVWXNSMEZCVjNwVExFVkJRVVY1VXl4UlFVRkdMRWRCUVZkNlV5eEZRVUZGUXl4TlFVRkdMRU5CUVZOclNTdzJRa0ZCTDBJc1JVRkJOa1J2VXl4RlFVRkZMMWtzVFVGQlJpeEhRVUZUTEVOQlFYUkZMRU5CUVhkRkxFbEJRVWxoTEVsQlFVVXNUVUZCU1hKRExFVkJRVVZETEUxQlFVWXNRMEZCVXl0SUxIRkNRVUZ1UWp0QlFVRkJMR3RDUVVGNVF6RkVMRWxCUVVWMFJTeEZRVUZGZVZNc1VVRkJSaXhIUVVGWGNGRXNRMEZCZEVRN1FVRkJRU3hyUWtGQmQwUXJReXhKUVVGRmNFWXNSVUZCUlhWVExGTkJRVVlzUjBGQldXcFBMRU5CUVhSRkxFTkJRWGRGZEVVc1JVRkJSVGhFTEVkQlFVWXNTMEZCVVhOQ0xFbEJRVVVzUTBGQlEwRXNRMEZCV0N4RlFVRmpMRWxCUVVrMlFpeERRVUZLTzBGQlFVRXNhMEpCUVUxSkxFbEJRVVVzUTBGQlF5eERRVUZVTzBGQlFVRXNhMEpCUVZkSExFbEJRVVVzUzBGQlJ6TklMRXRCUVV0NVJpeEhRVUZNTEVOQlFWTjBSaXhGUVVGRmVWTXNVVUZCV0N4RFFVRklMRWRCUVhkQ2VsTXNSVUZCUlVNc1RVRkJSaXhEUVVGVGFVa3NNa0pCUVRsRExFTkJRVEJGTEVsQlFVYzVReXhKUVVGRmNFWXNSVUZCUlRaR0xGbEJRVVlzUlVGQlRDeEZRVUZ6UWpkR0xFVkJRVVZETEUxQlFVWXNRMEZCVTJkSkxITkNRVUZVTEVsQlFXbEROME1zU1VGQlJYQkdMRVZCUVVVMlJpeFpRVUZHTEVWQlFVWXNSMEZCYlVJc1EwRkJRekpDTEVOQlFYQkNMRXRCUVhkQ2NFTXNTVUZCUlhCR0xFVkJRVVUyUml4WlFVRkdMRXRCUVdsQ01rSXNRMEZCTTBNc1IwRkJPRU5RTEVsQlFVVnFTQ3hGUVVGRk5rWXNXVUZCUml4RlFVRm9SQ3hGUVVGcFJYZENMRWxCUVVVc1EwRkJReXhEUVVGd1JTeEZRVUZ6UlRoVExFbEJRVVVzUTBGQlF5eERRVUV4Unl4SlFVRTJSeTlWTEVsQlFVVndSaXhGUVVGRk5rWXNXVUZCUml4RlFVRXZSeXhEUVVGMFFpeExRVUV5U2l4SlFVRkhWQ3hKUVVGRmNFWXNSVUZCUlRSR0xGbEJRVVlzUlVGQlRDeEZRVUZ6UWpWR0xFVkJRVVZETEUxQlFVWXNRMEZCVTJkSkxITkNRVUZVTEVsQlFXbEROME1zU1VGQlJYQkdMRVZCUVVVMFJpeFpRVUZHTEVWQlFVWXNSMEZCYlVJMFFpeERRVUZ1UWl4TFFVRjFRbkJETEVsQlFVVndSaXhGUVVGRk5FWXNXVUZCUml4TFFVRnBRalJDTEVOQlFURkRMRWRCUVRaRFVDeEpRVUZGYWtnc1JVRkJSVFJHTEZsQlFVWXNSVUZCTDBNc1JVRkJaMFY1UWl4SlFVRkZMRU5CUVVNc1EwRkJia1VzUlVGQmNVVTRVeXhKUVVGRkxFTkJRVU1zUTBGQmVrY3NTVUZCTkVjdlZTeEpRVUZGY0VZc1JVRkJSVFJHTEZsQlFVWXNSVUZCT1Vjc1EwRkJkRUlzUzBGQk1Fb3NTVUZCUnpWR0xFVkJRVVZETEUxQlFVWXNRMEZCVTJ0SExHTkJRVm9zUlVGQk1rSTdRVUZCUXl4dlFrRkJTU3RLTEVOQlFVbzdRVUZCUVN4dlFrRkJUVU1zU1VGQlJTeERRVUZTTEVOQlFWVXNTMEZCU1VFc1NVRkJSU3hEUVVGT0xFVkJRVkZCTEVsQlFVVnVVU3hGUVVGRmMxVXNVVUZCUml4RFFVRlhPVk1zVFVGQmNrSXNSVUZCTkVJeVR5eExRVUZITEVOQlFTOUNPMEZCUVdsRExITkNRVUZIYmxFc1JVRkJSWE5WTEZGQlFVWXNRMEZCVjI1RkxFTkJRVmdzU1VGQll5eERRVUZETDBzc1EwRkJiRUlzUlVGQmIwSTdRVUZCUXpoTExIZENRVUZGUXl4RFFVRkdMRU5CUVVrN1FVRkJUVHRCUVVGb1JTeHBRa0ZCWjBVdlN5eEpRVUZGZGtZc1MwRkJTM2xHTEVkQlFVd3NRMEZCVTNSR0xFVkJRVVZ6VlN4UlFVRkdMRU5CUVZkd1JTeERRVUZZTEVsQlFXTTVTeXhEUVVGMlFpeEpRVUV3UW5aR0xFdEJRVXQ1Uml4SFFVRk1MRU5CUVZOMFJpeEZRVUZGYzFVc1VVRkJSaXhEUVVGWGNFVXNTVUZCUlN4RFFVRmlMRWxCUVdkQ09Vc3NRMEZCZWtJc1EwRkJNVUlzU1VGQmRVUXNWMEZCVTNCR0xFVkJRVVZ4WWl4alFVRnNSU3hIUVVGcFJuSmlMRVZCUVVWelZTeFJRVUZHTEVOQlFWZHdSU3hEUVVGWUxFTkJRV3BHTEVkQlFTdEdiRkVzUlVGQlJYTlZMRkZCUVVZc1EwRkJWM0JGTEVsQlFVVXNRMEZCWWl4RFFVRnFSeXhGUVVGcFNHeFJMRVZCUVVVNFJDeEhRVUZHTEV0QlFWRnpRaXhKUVVGRkxFTkJRVU5CTEVOQlFWZ3NRMEZCYWtnN1FVRkJLMGdzYlVKQlFVY3NUVUZCU1hCR0xFVkJRVVY1VXl4UlFVRlVMRVZCUVd0Q2NGRXNTVUZCUlhKRExFVkJRVVU0UkN4SFFVRkdMRWRCUVUxcVJTeExRVUZMZVVZc1IwRkJUQ3hEUVVGVExFTkJRVU1zUTBGQlEwWXNRMEZCUkN4SFFVRkhjRVlzUlVGQlJYVlRMRk5CUVU0c1NVRkJhVUoyVXl4RlFVRkZlVk1zVVVGQk5VSXNRMEZCVGl4SFFVRTBRelZUTEV0QlFVdDVSaXhIUVVGTUxFTkJRVk1zUTBGQlEwWXNTVUZCUlhCR0xFVkJRVVYxVXl4VFFVRk1MRWxCUVdkQ2RsTXNSVUZCUlhsVExGRkJRVE5DTEVOQlFUbERMRU5CUVd4Q0xFdEJRVEJITEVsQlFVZDZVeXhGUVVGRlF5eE5RVUZHTEVOQlFWTnJSeXhqUVVGYUxFVkJRVEpDTEU5QlFVOHNTMEZCUzI1SExFVkJRVVYxUnl4VlFVRkdMRVZCUVZvc1EwRkJNa0oyUnl4RlFVRkZReXhOUVVGR0xFTkJRVk5uU1N4elFrRkJWQ3hKUVVGcFExb3NRMEZCYWtNc1NVRkJiME55U0N4RlFVRkZaMGNzWTBGQlJpeERRVUZwUW1sQ0xFTkJRV3BDTEVkQlFXOUNha2dzUlVGQlJUaEdMRzlDUVVGR0xFTkJRWFZDZWtRc1EwRkJka0lzUTBGQmNFSXNSVUZCT0VOeVF5eEZRVUZGSzBZc2JVSkJRVVlzUTBGQmMwSllMRU5CUVhSQ0xFTkJRVGxETEVWQlFYVkZjRVlzUlVGQlJXZGpMR2xDUVVGR0xFVkJRWFpGTEVWQlFUWkdhR01zUlVGQlJTdEhMRk5CUVVZc1IwRkJXU3hEUVVGRExFTkJRVEZITEVWQlFUUkhMMGNzUlVGQlJUUlNMRTlCUVVZc1EwRkJWWGxETEdGQlFWWXNRMEZCZDBJc1dVRkJWVHRCUVVGRGNsVXNjVUpCUVVkdFlTeERRVUZJTEV0QlFVOXVZU3hGUVVGRldTeEpRVUZHTEVOQlFVOHNhMEpCUVZBc1JVRkJNRUphTEVOQlFURkNMRWRCUVRaQ1FTeEZRVUZGT0VZc2IwSkJRVVlzUTBGQmRVSTVSaXhGUVVGRlF5eE5RVUZHTEVOQlFWTXlTQ3hMUVVGb1F5eERRVUUzUWl4RlFVRnZSVFZJTEVWQlFVVXJSaXh0UWtGQlJpeERRVUZ6UW10Q0xFTkJRWFJDTEVOQlFYQkZMRVZCUVRaR2FrZ3NSVUZCUlRSU0xFOUJRVVlzUTBGQlZYbERMR0ZCUVZZc1EwRkJkMElzV1VGQlZUdEJRVUZEY2xVc2RVSkJRVWRCTEVWQlFVVnBZeXhsUVVGR0xFVkJRVWc3UVVGQmRVSXNhVUpCUVRGRUxFTkJRWEJITzBGQlFXbExMR1ZCUVhCTkxFTkJRV2hLTEVsQlFYVldhbU1zUlVGQlJYbFRMRkZCUVVZc1NVRkJXWHBUTEVWQlFVVm5SeXhqUVVGR0xFTkJRV2xDV2l4RFFVRnFRaXhIUVVGdlFuQkdMRVZCUVVVNFJpeHZRa0ZCUml4RFFVRjFRbnBFTEVOQlFYWkNMRU5CUVhCQ0xFVkJRVGhEY2tNc1JVRkJSU3RHTEcxQ1FVRkdMRU5CUVhOQ1dDeERRVUYwUWl4RFFVRTVReXhGUVVGMVJYQkdMRVZCUVVWbll5eHBRa0ZCUml4RlFVRjJSU3hGUVVFMlJtaGpMRVZCUVVVclJ5eFRRVUZHTEV0QlFXTXZSeXhGUVVGRkswY3NVMEZCUml4SFFVRlpMRU5CUVVNc1EwRkJZaXhGUVVGbEwwY3NSVUZCUlRSU0xFOUJRVVlzUTBGQlZYbERMR0ZCUVZZc1EwRkJkMElzV1VGQlZUdEJRVUZEY2xVc2NVSkJRVWRCTEVWQlFVVnBZeXhsUVVGR0xFVkJRVWc3UVVGQmRVSXNaVUZCTVVRc1EwRkJOMElzUTBGQmVrY3NTVUZCYjAxcVl5eEZRVUZGWjBjc1kwRkJSaXhEUVVGcFFsb3NRMEZCYWtJc1EwRkJNMmhDTEVWQlFTdHBRbkJHTEVWQlFVVnBSeXhwUWtGQlJpeEZRVUV2YVVJN1FVRkJjV3RDTEc5Q1FVRlBMRTFCUVVzc1EwRkJReXhEUVVGRGFrY3NSVUZCUlVNc1RVRkJSaXhEUVVGVE9FZ3NaMEpCUVZZc1NVRkJORUp5U1N4TFFVRkhUU3hGUVVGRlF5eE5RVUZHTEVOQlFWTnpUQ3haUVVGNlF5eE5RVUY1UkhaTUxFVkJRVVZuUnl4alFVRkdMRWxCUVcxQ2FFY3NSVUZCUldsSExHbENRVUZHTEVWQlFUVkZMRU5CUVV3c1EwRkJVRHRCUVVGblNDeGxRVUZKYlVzc1EwRkJTanRCUVVGQkxHTkJRVTFGTEVsQlFVVXNRMEZCVWp0QlFVRkJMR05CUVZWRExFbEJRVVYyVVN4RlFVRkZaMVlzWlVGQlJpeERRVUZyUWl4RFFVRnNRaXhEUVVGYUxFTkJRV2xETEV0QlFVazFSU3hKUVVGRkxFTkJRVTRzUlVGQlVVRXNTVUZCUlhCUkxFVkJRVVVyVlN4VlFVRkdMRU5CUVdGMlZDeE5RVUYyUWl4RlFVRTRRalJQTEV0QlFVZHdVU3hGUVVGRlF5eE5RVUZHTEVOQlFWTXlTeXhqUVVFeFF6dEJRVUY1UkN4cFFrRkJTeXhEUVVGTUxFdEJRVk0xU3l4RlFVRkZLMVVzVlVGQlJpeERRVUZoTTBVc1NVRkJSWEJSTEVWQlFVVkRMRTFCUVVZc1EwRkJVekpMTEdOQlFYaENMRU5CUVZRc1IwRkJhVVJxVEN4TFFVRkhTeXhGUVVGRksxVXNWVUZCUml4RFFVRmhNMFVzUTBGQllpeERRVUZJTEVsQlFXOUNlbEVzU1VGQlJVc3NSVUZCUlN0VkxGVkJRVVlzUTBGQllUTkZMRWxCUVVWd1VTeEZRVUZGUXl4TlFVRkdMRU5CUVZNeVN5eGpRVUY0UWl4RFFVRjBRaXhMUVVGblJUQkdMRWxCUVVWR0xFTkJRVVlzUlVGQlNVY3NTVUZCUlhaUkxFVkJRVVVyVlN4VlFVRkdMRU5CUVdFelJTeEpRVUZGY0ZFc1JVRkJSVU1zVFVGQlJpeERRVUZUTWtzc1kwRkJlRUlzU1VGQmQwTTFTeXhGUVVGRksxVXNWVUZCUml4RFFVRmhNMFVzUTBGQllpeERRVUU1Unl4RFFVRnFSQ3hIUVVGblRIcFJMRXRCUVVkTExFVkJRVVVyVlN4VlFVRkdMRU5CUVdFelJTeERRVUZpTEVOQlFVZ3NTMEZCY1VKRkxFbEJRVVZHTEVOQlFVWXNSVUZCU1Vjc1NVRkJSWFpSTEVWQlFVVXJWU3hWUVVGR0xFTkJRV0V2VlN4RlFVRkZLMVVzVlVGQlJpeERRVUZoZGxRc1RVRkJZaXhIUVVGdlFpeERRVUZxUXl4SlFVRnZRM2hDTEVWQlFVVXJWU3hWUVVGR0xFTkJRV0V2VlN4RlFVRkZLMVVzVlVGQlJpeERRVUZoZGxRc1RVRkJZaXhIUVVGdlFpeERRVUZxUXl4RFFVRXZSQ3hEUVVGb1REdEJRVUY2UkN4WFFVRTJWU3hKUVVGSloxQXNTVUZCUlN4RFFVRkROMUVzU1VGQlJVc3NSVUZCUlN0VkxGVkJRVVlzUTBGQllYcEZMRU5CUVdJc1EwRkJTQ3hKUVVGdlFrTXNRMEZCTVVJc1EwRkJORUlzU1VGQlJ6ZFJMRWxCUVVWTkxFVkJRVVZETEUxQlFVWXNRMEZCVTNOTUxGbEJRV1FzUlVGQk1rSTdRVUZCUXl4blFrRkJSeXhEUVVGRGRrd3NSVUZCUlVNc1RVRkJSaXhEUVVGVGIwd3NWVUZCWWl4RlFVRjNRaXhQUVVGUExFdEJRVXR5VEN4RlFVRkZkMWdzVDBGQlJpeERRVUZWZUZnc1JVRkJSVXNzVjBGQldpeERRVUZhTEVOQlFYRkRMRmRCUVZOTUxFVkJRVVZ4WWl4alFVRllMRXRCUVRSQ04wc3NTMEZCUjNoUkxFVkJRVVZETEUxQlFVWXNRMEZCVTNGTUxHVkJRVm9zUjBGQk5FSjBUQ3hGUVVGRmQxZ3NUMEZCUml4RFFVRlZiRWdzU1VGQlJYUlJMRVZCUVVWRExFMUJRVVlzUTBGQlV6SkxMR05CUVhKQ0xFTkJRVFZDTEVkQlFXbEZOVXNzUlVGQlJYZFlMRTlCUVVZc1EwRkJWV3hJTEVOQlFWWXNRMEZCTjBZc1IwRkJNa2NzVjBGQlUzUlJMRVZCUVVWeFlpeGpRVUZZTEV0QlFUUkNOMHNzU1VGQlJTeEpRVUZGZUZFc1JVRkJSVU1zVFVGQlJpeERRVUZUY1V3c1pVRkJZaXhIUVVFMlFuUk1MRVZCUVVWM1dDeFBRVUZHTEVOQlFWVnNTQ3hKUVVGRmRGRXNSVUZCUlVNc1RVRkJSaXhEUVVGVE1rc3NZMEZCY2tJc1EwRkJOMElzUjBGQmEwVTFTeXhGUVVGRmQxZ3NUMEZCUml4RFFVRlZiRWdzUTBGQlZpeERRVUU1Uml4RFFVRXpSenRCUVVGMVRpeFhRVUZvVkN4TlFVRnZWRHRCUVVGRExHZENRVUZITEVOQlFVTjBVU3hGUVVGRlF5eE5RVUZHTEVOQlFWTnRUQ3hYUVVGaUxFVkJRWGxDTEU5QlFVOHNTMEZCUzNCTUxFVkJRVVYzV0N4UFFVRkdMRU5CUVZWNFdDeEZRVUZGU3l4WFFVRmFMRU5CUVZvc1EwRkJjVU1zVjBGQlUwd3NSVUZCUlhGaUxHTkJRVmdzU1VGQk1rSnlZaXhGUVVGRmQxZ3NUMEZCUml4RFFVRlZiRWdzU1VGQlJYUlJMRVZCUVVWRExFMUJRVVlzUTBGQlV6SkxMR05CUVhKQ0xFTkJRVE5DTEVWQlFXZEZMRmRCUVZNMVN5eEZRVUZGY1dJc1kwRkJXQ3hKUVVFeVFuSmlMRVZCUVVWM1dDeFBRVUZHTEVOQlFWVnNTQ3hEUVVGV0xFTkJRVE5HTzBGQlFYZEhPMEZCUVVNN1FVRkJReXhQUVVGc2JGRXNSVUZCYld4UmRGRXNSVUZCUldkQ0xGRkJRVVlzUjBGQlZ5eFZRVUZUZUVJc1EwRkJWQ3hGUVVGWFF5eERRVUZZTEVWQlFXRTdRVUZCUXl4bFFVRlBUeXhGUVVGRmQxZ3NUMEZCUml4RFFVRlZhRmtzUTBGQlZpeEZRVUZaUXl4RFFVRmFMRVZCUVdNc1EwRkJReXhEUVVGbUxFVkJRV2xDTEVOQlFVTXNRMEZCYkVJc1EwRkJVRHRCUVVFMFFpeFBRVUY0YjFFc1JVRkJlVzlSVHl4RlFVRkZkMWdzVDBGQlJpeEhRVUZWTEZWQlFWTm9XU3hEUVVGVUxFVkJRVmRETEVOQlFWZ3NSVUZCWVhsQ0xFTkJRV0lzUlVGQlpYaENMRU5CUVdZc1JVRkJhVUk3UVVGQlF5eGhRVUZMTEVOQlFVd3NTMEZCVTNkQ0xFTkJRVlFzUzBGQllVRXNTVUZCUlN4RFFVRkRMRU5CUVdoQ0xFZEJRVzFDTEV0QlFVc3NRMEZCVEN4TFFVRlRNVUlzUTBGQlZDeExRVUZoUVN4SlFVRkZMRU5CUVdZc1EwRkJia0lzUlVGQmNVTkJMRWxCUVVVc1EwRkJSaXhMUVVGTlFTeEpRVUZGTEVOQlFWSXNRMEZCY2tNc1JVRkJaMFJSTEVWQlFVVnZWeXhUUVVGR0xFZEJRVmwyVnl4TFFVRkxReXhMUVVGTUxFTkJRVmRPTEVsQlFVVlJMRVZCUVVWRExFMUJRVVlzUTBGQlV6SkxMR05CUVhSQ0xFTkJRVFZFTEVWQlFXdEhOVXNzUlVGQlJXOVhMRk5CUVVZc1NVRkJZWEJYTEVWQlFVVnpWU3hSUVVGR0xFTkJRVmM1VXl4TlFVRjRRaXhMUVVGcFEzaENMRVZCUVVWdlZ5eFRRVUZHTEVkQlFWbHdWeXhGUVVGRmMxVXNVVUZCUml4RFFVRlhPVk1zVFVGQldDeEhRVUZyUWl4RFFVRXZSQ3hEUVVGc1J5eERRVUZ2U3l4SlFVRkpOMElzU1VGQlJTeERRVUZEU3l4RlFVRkZjMVVzVVVGQlJpeERRVUZYZEZVc1JVRkJSVzlYTEZOQlFXSXNRMEZCVUN4RFFVRXJRaXhKUVVGSGNGY3NSVUZCUlVNc1RVRkJSaXhEUVVGVFF5eFJRVUZVTEVsQlFXMUNSaXhGUVVGRmFWVXNWMEZCY2tJc1MwRkJiVU4yVlN4TFFVRkhMRU5CUVVOTkxFVkJRVVZETEUxQlFVWXNRMEZCVXpCSExEUkNRVUZpTEVkQlFUQkRNMGNzUlVGQlJXOVZMR0ZCUVVZc1EwRkJaMEl6VlN4RFFVRm9RaXhEUVVFeFF5eEhRVUUyUkU4c1JVRkJSV1VzV1VGQlJpeEZRVUZvUnl4SFFVRnJTR1lzUlVGQlJXZEhMR05CUVVZc1EwRkJhVUp5Unl4RFFVRnFRaXhEUVVGc1NDeEZRVUZ6U1Vzc1JVRkJSVU1zVFVGQlJpeERRVUZUTUU0c2JVSkJRV3hLTEVWQlFYTkxMRXRCUVVrc1NVRkJTUzlPTEVsQlFVVXNRMEZCVml4RlFVRlpRU3hKUVVGRlNTeEZRVUZGSzFVc1ZVRkJSaXhEUVVGaGRsUXNUVUZCTTBJc1JVRkJhME0xUWl4SFFVRnNRenRCUVVGelF5eFhRVUZEUXl4TFFVRkxReXhMUVVGTUxFTkJRVmNzVFVGQlNVZ3NRMEZCWml4RFFVRkVMRWxCUVc5Q1JTeExRVUZMUXl4TFFVRk1MRU5CUVZjc1RVRkJTVVVzUlVGQlJTdFZMRlZCUVVZc1EwRkJZVzVXTEVOQlFXSXNRMEZCWml4RFFVRndRaXhMUVVGelJFb3NTVUZCUlVrc1EwRkJlRVE3UVVGQmRFTXNVMEZCYVVjc1QwRkJUU3hGUVVGRkxFTkJRVU5KTEVWQlFVVkRMRTFCUVVZc1EwRkJVM2RETEdkQ1FVRldMRWxCUVRSQ09VTXNTVUZCUlVzc1JVRkJSWFZUTEZOQlFXaERMRWxCUVRKRE5WTXNTVUZCUlVzc1JVRkJSVFJHTEZsQlFVWXNSVUZCTDBNc1MwRkJiVVVzUlVGQlJTeERRVUZETlVZc1JVRkJSVU1zVFVGQlJpeERRVUZUTUVNc1owSkJRVllzU1VGQk5FSm9SQ3hKUVVGRlN5eEZRVUZGZFZNc1UwRkJhRU1zU1VGQk1rTTFVeXhKUVVGRlN5eEZRVUZGTmtZc1dVRkJSaXhGUVVFM1F5eEpRVUVyUkN4RFFVRkROMFlzUlVGQlJVc3NWMEZCUml4SlFVRmxMRU5CUVdoQ0xFMUJRWEZDWWl4RFFVRjBSaXhOUVVFeVJpeExRVUZMTEVOQlFVd3NTMEZCVTBNc1EwRkJWQ3hMUVVGaFFTeEpRVUZGVHl4RlFVRkZReXhOUVVGR0xFTkJRVk15U0N4TFFVRjRRaXhIUVVFclFqVklMRVZCUVVWeFZ5eGhRVUZHTEVkQlFXZENjbGNzUlVGQlJVc3NWMEZCUml4SlFVRmxMRU5CUVRsRUxFVkJRV2RGVEN4RlFVRkZTeXhYUVVGR0xFZEJRV05pTEVOQlFUbEZMRVZCUVdkR1VTeEZRVUZGYzFjc1pVRkJSaXhGUVVGb1JpeEZRVUZ2UjNSWExFVkJRVVU0UkN4SFFVRkdMRWxCUVU4c1EwRkJRMjVGTEVOQlFVUXNTMEZCUzBzc1JVRkJSWFZUTEZOQlFXUXNTVUZCZVVJc1EwRkJRM1pUTEVWQlFVVTRSQ3hIUVVGSUxFbEJRVkZ1UlN4TlFVRkpTeXhGUVVGRmRWTXNVMEZCZGtNc1NVRkJhMFIyVXl4RlFVRkZReXhOUVVGR0xFTkJRVk52U1N4VlFVRlVMRWxCUVhGQ2Nra3NSVUZCUlhWVkxHZENRVUZHTEVWQlFYSkNMRVZCUVRCRGRsVXNSVUZCUld0SExHRkJRVVlzUlVGQk1VTXNSVUZCTkVRc1dVRkJWV3hITEVWQlFVVkRMRTFCUVVZc1EwRkJVM1ZKTEUxQlFXNUNMRWxCUVRKQ2VFa3NSVUZCUlN0R0xHMUNRVUZHTEVOQlFYTkNjRWNzUTBGQmRFSXNRMEZCZGtZc1JVRkJaMGdzUTBGQlF5eERRVUZ1U3l4TFFVRjFTMHNzUlVGQlJXdEhMR0ZCUVVZc1NVRkJhMEpzUnl4RlFVRkZaMk1zYVVKQlFVWXNRMEZCYjBJNVlTeERRVUZ3UWl4RFFVRnNRaXhGUVVGNVF5eE5RVUZKZWtJc1EwRkJTaXhKUVVGUFR5eEZRVUZGY1Zrc1QwRkJSaXhEUVVGVk5rUXNUVUZCYWtJc1NVRkJlVUpzWXl4RlFVRkZLMFlzYlVKQlFVWXNRMEZCYzBKd1J5eERRVUYwUWl4SFFVRjVRa3NzUlVGQlJUaEdMRzlDUVVGR0xFTkJRWFZDTEVOQlFYWkNMRU5CUVhwQ0xFVkJRVzFFT1VZc1JVRkJSV2xqTEdWQlFVWXNRMEZCYTBJdllTeERRVUZzUWl4RFFVRTFSU3hMUVVGdFIyeENMRVZCUVVVclJpeHRRa0ZCUml4RFFVRnpRbkJITEVOQlFYUkNMRWRCUVhsQ1N5eEZRVUZGT0VZc2IwSkJRVVlzUTBGQmRVSnlSeXhEUVVGMlFpeERRVUY2UWl4RlFVRnRSRThzUlVGQlJTdEhMRk5CUVVZc1MwRkJZeTlITEVWQlFVVXJSeXhUUVVGR0xFZEJRVmtzUTBGQlF5eERRVUZpTEVWQlFXVXZSeXhGUVVGRk5GSXNUMEZCUml4RFFVRlZlVU1zWVVGQlZpeERRVUYzUWl4WlFVRlZPMEZCUVVOeVZTeGxRVUZIUVN4RlFVRkZhV01zWlVGQlJpeERRVUZyUWk5aExFTkJRV3hDTEVOQlFVZzdRVUZCZDBJc1UwRkJNMFFzUTBGQk4wSXNRMEZCZEVvc1EwRkJla01zUlVGQk1sSXNRMEZCUXl4RFFVRnVZeXhEUVVFdlRDeERRVUY2UlR0QlFVRm5kRUlzVDBGQkwzcFRMRVZCUVdjd1UyeENMRVZCUVVWbll5eHBRa0ZCUml4SFFVRnZRaXhWUVVGVGVHTXNRMEZCVkN4RlFVRlhPMEZCUVVNc1lVRkJTeXhEUVVGTUxFdEJRVk5CTEVOQlFWUXNTMEZCWVVFc1NVRkJSU3hEUVVGRExFTkJRV2hDTEVkQlFXMUNVU3hGUVVGRlF5eE5RVUZHTEVOQlFWTnZTU3hWUVVGVUxFbEJRWEZDY2trc1JVRkJSWFZWTEdkQ1FVRkdMRVZCUVhoRExFVkJRVFpFZGxVc1JVRkJSWGxITEVsQlFVWXNTVUZCVVhwSExFVkJRVVY1Unl4SlFVRkdMRU5CUVU5MVZpeHBRa0ZCVUN4RlFVRnlSU3hGUVVGblIzaGpMRTFCUVVsUkxFVkJRVVZaTEVsQlFVWXNRMEZCVHl4dFFrRkJVQ3hGUVVFeVFsb3NRMEZCTTBJc1IwRkJPRUpCTEVWQlFVVkxMRmRCUVVZc1MwRkJaMEpNTEVWQlFVVnhWeXhoUVVGc1FpeExRVUZyUTNKWExFVkJRVVZaTEVsQlFVWXNRMEZCVHl4dlFrRkJVQ3hGUVVFMFFsb3NRMEZCTlVJc1IwRkJLMEpCTEVWQlFVVkxMRmRCUVVZc1IwRkJZMHdzUlVGQlJYRlhMR0ZCUVdoQ0xFZEJRVGhDY2xjc1JVRkJSVmtzU1VGQlJpeERRVUZQTEd0Q1FVRlFMRVZCUVRCQ1dpeERRVUV4UWl4RFFVRTVRaXhIUVVFeVJFRXNSVUZCUlZrc1NVRkJSaXhEUVVGUExHdENRVUZRTEVWQlFUQkNXaXhEUVVFeFFpeERRVUUxU0N4RFFVRnNReXhEUVVGb1J6dEJRVUUyVWl4UFFVRTNibFFzUlVGQk9HNVVRU3hGUVVGRmFXTXNaVUZCUml4SFFVRnJRaXhWUVVGVGVtTXNRMEZCVkN4RlFVRlhPMEZCUVVOUkxGVkJRVVVyUnl4VFFVRkdMRWRCUVZrc1EwRkJReXhEUVVGaUxFVkJRV1V2Unl4RlFVRkZPRVlzYjBKQlFVWXNRMEZCZFVJc1EwRkJka0lzUTBGQlppeEZRVUY1UXl4TFFVRkxMRU5CUVV3c1MwRkJVM1JITEVOQlFWUXNTMEZCWVVFc1NVRkJSU3hEUVVGRExFTkJRV2hDTEVOQlFYcERMRVZCUVRSRVVTeEZRVUZGZVVjc1NVRkJSaXhKUVVGUmVrY3NSVUZCUlhsSExFbEJRVVlzUTBGQlQzZFdMR1ZCUVZBc1JVRkJjRVVzUlVGQk5rWjZZeXhOUVVGSlVTeEZRVUZGV1N4SlFVRkdMRU5CUVU4c2FVSkJRVkFzUlVGQmVVSmFMRU5CUVhwQ0xFZEJRVFJDUVN4RlFVRkZTeXhYUVVGR0xFdEJRV2RDVEN4RlFVRkZjVmNzWVVGQmJFSXNTMEZCYTBOeVZ5eEZRVUZGV1N4SlFVRkdMRU5CUVU4c2EwSkJRVkFzUlVGQk1FSmFMRU5CUVRGQ0xFZEJRVFpDUVN4RlFVRkZTeXhYUVVGR0xFZEJRV05NTEVWQlFVVnhWeXhoUVVGb1FpeEhRVUU0UW5KWExFVkJRVVZaTEVsQlFVWXNRMEZCVHl4blFrRkJVQ3hGUVVGM1Fsb3NRMEZCZUVJc1EwRkJPVUlzUjBGQmVVUkJMRVZCUVVWWkxFbEJRVVlzUTBGQlR5eG5Ra0ZCVUN4RlFVRjNRbG9zUTBGQmVFSXNRMEZCZUVnc1EwRkJhRU1zUTBGQk4wWXNSVUZCYTFKQkxFVkJRVVZETEUxQlFVWXNRMEZCVTI5TExFOUJRVlFzU1VGQmEwSnlTeXhGUVVGRmNVc3NUMEZCY0VJc1NVRkJOa0p5U3l4RlFVRkZjVXNzVDBGQlJpeERRVUZWT0ZJc1ZVRkJWaXhEUVVGeFFtNWpMRVZCUVVWRExFMUJRVVlzUTBGQlUyOUxMRTlCUVRsQ0xFVkJRWE5EY2tzc1JVRkJSVXNzVjBGQmVFTXNRMEZCTDFNc1JVRkJiMWRNTEVWQlFVVkRMRTFCUVVZc1EwRkJVMnRMTEU5QlFWUXNTVUZCYTBKdVN5eEZRVUZGYlVzc1QwRkJjRUlzU1VGQk5rSnVTeXhGUVVGRmJVc3NUMEZCUml4RFFVRlZhVk1zVDBGQlZpeEZRVUZxV1R0QlFVRnhXaXhQUVVGcWFsVXNSVUZCYTJwVmNHTXNSVUZCUlc5RkxGTkJRVVlzUjBGQldTeFZRVUZUTlVVc1EwRkJWQ3hGUVVGWFF5eERRVUZZTEVWQlFXRjVRaXhEUVVGaUxFVkJRV1U3UVVGQlF5eFpRVUZIYkVJc1JVRkJSVU1zVFVGQlJpeERRVUZUVVN4SlFVRmFMRVZCUVdsQ08wRkJRVU1zWTBGQlIxUXNSVUZCUlN0SExGTkJRVXdzUlVGQlpTeFBRVUZOTEVOQlFVTXNRMEZCVUN4RFFVRlRMMGNzUlVGQlJWVXNUMEZCUml4SFFVRlpWaXhGUVVGRmIwUXNVMEZCUml4RFFVRlpMRU5CUVZvc1JVRkJaV2xhTEZWQlFXWXNRMEZCTUVJc1QwRkJUM0pqTEVWQlFVVjNXQ3hQUVVGR0xFTkJRVlY0V0N4RlFVRkZTeXhYUVVGR0xFZEJRV05NTEVWQlFVVkRMRTFCUVVZc1EwRkJVekpMTEdOQlFXcERMRVZCUVdkRWJrd3NRMEZCYUVRc1JVRkJhMFJFTEVOQlFXeEVMRVZCUVc5RU1FSXNRMEZCY0VRc1EwRkJVRHRCUVVFNFJDeG5Ra0ZCVDJ4Q0xFVkJRVVYzV0N4UFFVRkdMRU5CUVZWNFdDeEZRVUZGU3l4WFFVRkdMRWRCUVdOTUxFVkJRVVZETEUxQlFVWXNRMEZCVXpKTExHTkJRV3BETEVWQlFXZEVia3dzUTBGQmFFUXNSVUZCYTBSRUxFTkJRV3hFTEVWQlFXOUVNRUlzUTBGQmNFUXNRMEZCVUR0QlFVRTRSQ3hQUVVFeGVGVXNSVUZCTW5oVmJFSXNSVUZCUlZjc1ZVRkJSaXhIUVVGaExGVkJRVk51UWl4RFFVRlVMRVZCUVZjN1FVRkJReXhsUVVGUFVTeEZRVUZGYjBVc1UwRkJSaXhEUVVGWkxFTkJRVU1zUTBGQllpeEZRVUZsTlVVc1EwRkJaaXhGUVVGcFFpeERRVUZETEVOQlFXeENMRU5CUVZBN1FVRkJORUlzVDBGQmFERlZMRVZCUVdreFZWRXNSVUZCUlhGRkxGTkJRVVlzUjBGQldTeFZRVUZUTjBVc1EwRkJWQ3hGUVVGWFF5eERRVUZZTEVWQlFXRjVRaXhEUVVGaUxFVkJRV1U3UVVGQlF5eFpRVUZIYkVJc1JVRkJSVU1zVFVGQlJpeERRVUZUVVN4SlFVRmFMRVZCUVdsQ08wRkJRVU1zWTBGQlIxUXNSVUZCUlN0SExGTkJRVXdzUlVGQlpTeFBRVUZOTEVOQlFVTXNRMEZCVUN4RFFVRlRMMGNzUlVGQlJWVXNUMEZCUml4SFFVRlpWaXhGUVVGRmIwUXNVMEZCUml4RFFVRlpMRU5CUVZvc1JVRkJaV2xhTEZWQlFXWXNRMEZCTUVJc1QwRkJUM0pqTEVWQlFVVjNXQ3hQUVVGR0xFTkJRVlY0V0N4RlFVRkZTeXhYUVVGR0xFZEJRV01zUTBGQmVFSXNSVUZCTUVKYUxFTkJRVEZDTEVWQlFUUkNSQ3hEUVVFMVFpeEZRVUU0UWpCQ0xFTkJRVGxDTEVOQlFWQTdRVUZCZDBNc1owSkJRVTlzUWl4RlFVRkZkMWdzVDBGQlJpeERRVUZWZUZnc1JVRkJSVXNzVjBGQlJpeEhRVUZqTEVOQlFYaENMRVZCUVRCQ1dpeERRVUV4UWl4RlFVRTBRa1FzUTBGQk5VSXNSVUZCT0VJd1FpeERRVUU1UWl4RFFVRlFPMEZCUVhkRExFOUJRVGRuVml4RlFVRTRaMVpzUWl4RlFVRkZjMk1zVlVGQlJpeEhRVUZoTEZWQlFWTTVZeXhEUVVGVUxFVkJRVmM3UVVGQlF5eGxRVUZQVVN4RlFVRkZjVVVzVTBGQlJpeERRVUZaTEVOQlFVTXNRMEZCWWl4RlFVRmxOMFVzUTBGQlppeEZRVUZwUWl4RFFVRkRMRU5CUVd4Q0xFTkJRVkE3UVVGQk5FSXNUMEZCYm10V0xFVkJRVzlyVmxFc1JVRkJSWFZITEZWQlFVWXNSMEZCWVN4VlFVRlRMMGNzUTBGQlZDeEZRVUZYUXl4RFFVRllMRVZCUVdGNVFpeERRVUZpTEVWQlFXVTdRVUZCUXl4bFFVRlBiRUlzUlVGQlJYZFlMRTlCUVVZc1EwRkJWWGhZTEVWQlFVVkxMRmRCUVZvc1JVRkJkMEphTEVOQlFYaENMRVZCUVRCQ1JDeERRVUV4UWl4RFFVRlFPMEZCUVc5RExFOUJRWEp2Vml4RlFVRnpiMVpSTEVWQlFVVjFZeXh0UWtGQlJpeEhRVUZ6UWl4WlFVRlZPMEZCUVVNc1pVRkJUM1pqTEVWQlFVVkRMRTFCUVVZc1EwRkJVM2RNTEZsQlFWUXNSMEZCYzBJc1EwRkJReXhEUVVGMlFpeEZRVUY1UWl4RFFVRkRMRU5CUVdwRE8wRkJRVzFETEU5QlFURnpWaXhGUVVFeWMxWjZUQ3hGUVVGRmQyTXNhMEpCUVVZc1IwRkJjVUlzV1VGQlZUdEJRVUZETEdWQlFVOTRZeXhGUVVGRlF5eE5RVUZHTEVOQlFWTjNUQ3haUVVGVUxFZEJRWE5DTEVOQlFVTXNRMEZCZGtJc1JVRkJlVUlzUTBGQlF5eERRVUZxUXp0QlFVRnRReXhQUVVFNWQxWXNSVUZCSzNkV2Vrd3NSVUZCUlRoR0xHOUNRVUZHTEVkQlFYVkNMRlZCUVZOMFJ5eERRVUZVTEVWQlFWZERMRU5CUVZnc1JVRkJZVHRCUVVGRFR5eFZRVUZGTkZJc1QwRkJSaXhEUVVGVmEwWXNWVUZCVml4RFFVRnhRblJZTEVOQlFYSkNMRWRCUVhkQ0xGbEJRVlZSTEVWQlFVVkRMRTFCUVVZc1EwRkJVM1ZKTEUxQlFXNUNMRWxCUVRKQ2VFa3NSVUZCUlhsakxFOUJRVVlzUTBGQlZYcGpMRVZCUVVWRExFMUJRVVlzUTBGQlUzVkpMRTFCUVc1Q0xFTkJRVE5DTEVsQlFYVkVlRWtzUlVGQlJYbGpMRTlCUVVZc1EwRkJWWHBqTEVWQlFVVkRMRTFCUVVZc1EwRkJVM1ZKTEUxQlFXNUNMRVZCUVRKQ2ExVXNZVUZCTTBJc1EwRkJlVU5zWkN4RFFVRjZReXhEUVVFdlJTeEZRVUV5U0ZFc1JVRkJSVU1zVFVGQlJpeERRVUZUYzBvc1VVRkJWQ3hKUVVGdFFuWktMRVZCUVVWMVNpeFJRVUZ5UWl4SlFVRXJRblpLTEVWQlFVVjFTaXhSUVVGR0xFTkJRVmR0VkN4aFFVRllMRU5CUVhsQ2JHUXNRMEZCZWtJc1EwRkJNVW9zUlVGQmMweFJMRVZCUVVWRExFMUJRVVlzUTBGQlV6SktMRk5CUVZRc1NVRkJiMEkxU2l4RlFVRkZORW9zVTBGQmRFSXNTVUZCYVVNMVNpeEZRVUZGTkVvc1UwRkJSaXhEUVVGWk9GTXNZVUZCV2l4RFFVRXdRbXhrTEVOQlFURkNMRU5CUVhaT0xFVkJRVzlRVVN4RlFVRkZReXhOUVVGR0xFTkJRVk4xVGl4UFFVRlVMRWxCUVd0Q2VFNHNSVUZCUlhOWUxGVkJRWEJDTEVsQlFXZERkRmdzUlVGQlJYTllMRlZCUVVZc1EwRkJZVzlHTEdGQlFXSXNRMEZCTWtKc1pDeERRVUV6UWl4RlFVRTJRa01zUTBGQk4wSXNRMEZCY0ZJc1JVRkJiMVJQTEVWQlFVVlpMRWxCUVVZc1EwRkJUeXhwUWtGQlVDeEZRVUY1UWxvc1EwRkJla0lzUlVGQk1rSlNMRU5CUVROQ0xFTkJRWEJVTzBGQlFXdFdMRTlCUVhSdlZ5eEZRVUYxYjFkUkxFVkJRVVVyUml4dFFrRkJSaXhIUVVGelFpeFZRVUZUZGtjc1EwRkJWQ3hGUVVGWFF5eERRVUZZTEVWQlFXRjVRaXhEUVVGaUxFVkJRV1U3UVVGQlF5eFpRVUZKZUVJc1NVRkJSU3hEUVVGT08wRkJRVUVzV1VGQlVVTXNTVUZCUlN4RFFVRldMRU5CUVZsTExFVkJRVVV3UXl4WlFVRkdMRXRCUVdsQ2FFUXNTVUZCUlUwc1JVRkJSVGhFTEVkQlFVWXNSMEZCVFN4RFFVRkRkRVVzUTBGQlVDeEhRVUZUUVN4RFFVRTFRaXhIUVVFNFFrY3NTVUZCUlVnc1EwRkJhRU1zUlVGQmEwTlJMRVZCUVVWRExFMUJRVVlzUTBGQlV5dExMRmxCUVZRc1MwRkJkMEowVEN4SlFVRkZSU3hGUVVGRlJpeERRVUZHTEVOQlFVWXNSVUZCVDBNc1NVRkJSVU1zUlVGQlJVUXNRMEZCUml4RFFVRnFReXhEUVVGc1F5eEZRVUY1UlVzc1JVRkJSVU1zVFVGQlJpeERRVUZUYzBrc1owSkJRVlFzUzBGQk5FSjJTU3hGUVVGRmQxSXNUMEZCUml4RFFVRlZSU3haUVVGV0xFZEJRWFZDTVZJc1JVRkJSVFJTTEU5QlFVWXNRMEZCVlhoTExGTkJRVllzUTBGQmIwSXNhVUpCUVdVeFNDeERRVUZtTEVkQlFXbENMRTFCUVdwQ0xFZEJRWGRDUXl4RFFVRjRRaXhIUVVFd1FpeFZRVUU1UXl4RFFVRjJRaXhIUVVGcFJrc3NSVUZCUlRSU0xFOUJRVVlzUTBGQlZYaExMRk5CUVZZc1EwRkJiMElzWlVGQllURklMRU5CUVdJc1IwRkJaU3hOUVVGbUxFZEJRWE5DUXl4RFFVRjBRaXhIUVVGM1FpeExRVUUxUXl4RFFVRTNSeXhEUVVGNlJTeEZRVUV3VDBzc1JVRkJSWFZUTEZOQlFVWXNSMEZCV1haVExFVkJRVVV3UXl4WlFVRkdMRXRCUVdsQ2FFUXNRMEZCYWtJc1IwRkJiVUpETEVOQlFYcFJMRU5CUVRKUkxFbEJRVWxKTEVOQlFVbzdRVUZCUVN4WlFVRk5hMElzU1VGQlJXcENMRVZCUVVVMlJpeFpRVUZHTEV0QlFXbENOMFlzUlVGQlJUUkdMRmxCUVVZc1JVRkJla0lzUTBGQk1FTTNSaXhKUVVGRkxFMUJRVWxyUWl4RFFVRktMRWRCUVUwc1EwRkJUaXhIUVVGUkxFTkJRVU42UWl4SlFVRkZVU3hGUVVGRk5FWXNXVUZCUml4RlFVRklMRWxCUVhGQ00wVXNRMEZCTDBJc1JVRkJhVU5zUWl4TlFVRkpReXhGUVVGRmQxTXNVVUZCVGl4SlFVRm5RbmhUTEVWQlFVVm5SeXhqUVVGR0xFTkJRV2xDZUVjc1EwRkJha0lzUTBGQmFrUXNSVUZCY1VWRExFdEJRVWRQTEVWQlFVVnBSeXhwUWtGQlJpeEZRVUY0UlN4RlFVRTRSaXhaUVVGVmFrY3NSVUZCUlVNc1RVRkJSaXhEUVVGVGRVa3NUVUZCYmtJc1NVRkJNa0o0U1N4RlFVRkZlV01zVDBGQlJpeERRVUZWZW1Nc1JVRkJSVU1zVFVGQlJpeERRVUZUZFVrc1RVRkJia0lzUTBGQk0wSXNTVUZCZFVSNFNTeEZRVUZGZVdNc1QwRkJSaXhEUVVGVmVtTXNSVUZCUlVNc1RVRkJSaXhEUVVGVGRVa3NUVUZCYmtJc1JVRkJNa0p0VlN4WlFVRXpRaXhEUVVGM1F6TmpMRVZCUVVWMVV5eFRRVUV4UXl4RFFVRnlTaXhGUVVFd1RYWlRMRVZCUVVWRExFMUJRVVlzUTBGQlUzTktMRkZCUVZRc1NVRkJiVUoyU2l4RlFVRkZkVW9zVVVGQmNrSXNTVUZCSzBKMlNpeEZRVUZGZFVvc1VVRkJSaXhEUVVGWGIxUXNXVUZCV0N4RFFVRjNRak5qTEVWQlFVVjFVeXhUUVVFeFFpeERRVUY2VHl4RlFVRTRVWFpUTEVWQlFVVkRMRTFCUVVZc1EwRkJVekpLTEZOQlFWUXNTVUZCYjBJMVNpeEZRVUZGTkVvc1UwRkJkRUlzU1VGQmFVTTFTaXhGUVVGRk5Fb3NVMEZCUml4RFFVRlpLMU1zV1VGQldpeERRVUY1UWpOakxFVkJRVVYxVXl4VFFVRXpRaXhEUVVFdlV5eEZRVUZ4Vm5aVExFVkJRVVZETEUxQlFVWXNRMEZCVTNWT0xFOUJRVlFzU1VGQmEwSjRUaXhGUVVGRmMxZ3NWVUZCY0VJc1NVRkJaME4wV0N4RlFVRkZjMWdzVlVGQlJpeERRVUZoY1VZc1dVRkJZaXhEUVVFd1FqTmpMRVZCUVVWMVV5eFRRVUUxUWl4RlFVRnpRM0pTTEVOQlFYUkRMRU5CUVhKWUxFVkJRVGhhYkVJc1JVRkJSVmtzU1VGQlJpeERRVUZQTEdkQ1FVRlFMRVZCUVhkQ1dpeERRVUY0UWl4RlFVRXdRa0VzUlVGQlJYVlRMRk5CUVRWQ0xFTkJRVGxhTzBGQlFYRmpMRTlCUVc0M1dDeEZRVUZ2TjFoMlV5eEZRVUZGTkdNc1dVRkJSaXhIUVVGbExGVkJRVk53WkN4RFFVRlVMRVZCUVZkRExFTkJRVmdzUlVGQllUdEJRVUZETEZsQlFVbDVRaXhEUVVGS0xFVkJRVTE0UWl4RFFVRk9MRVZCUVZGRExFTkJRVklzUlVGQlZVTXNRMEZCVml4RFFVRlpMRTlCUVU4c1MwRkJTeXhEUVVGTUxFdEJRVk5JTEVOQlFWUXNTMEZCWVVFc1NVRkJSU3hIUVVGbUxFZEJRVzlDVHl4RlFVRkZReXhOUVVGR0xFTkJRVk56U1N4blFrRkJWQ3hIUVVFd1FuWkpMRVZCUVVVNFJDeEhRVUZHTEVkQlFVMHNRMEZCUXpsRUxFVkJRVVYxVXl4VFFVRlVMRWRCUVcxQ2RsTXNSVUZCUlhWVExGTkJRUzlETEVsQlFUQkVOVk1zU1VGQlJTdENMRTlCUVU5dFlpeG5Ra0ZCVUN4RFFVRjNRbkprTEVOQlFYaENMRVZCUVRCQ0xFbEJRVEZDTEVOQlFVWXNSVUZCYTBOclF5eFBRVUZQYjJJc1pVRkJVQ3hKUVVGM1FuQmtMRWxCUVVWRExFVkJRVVY1U0N4VFFVRkdMRWxCUVdGNlNDeEZRVUZGYjJRc1pVRkJha0lzUlVGQmFVTnlaQ3hGUVVGRmMyUXNTMEZCUml4RFFVRlJMRWRCUVZJc1JVRkJZWGhpTEUxQlFXSXNSMEZCYjBJc1EwRkJjRUlzUzBGQmQwSTVRaXhKUVVGRlFTeEZRVUZGYzJRc1MwRkJSaXhEUVVGUkxFbEJRVklzUlVGQlkwTXNSMEZCWkN4RFFVRnJRaXhWUVVGVGVtUXNRMEZCVkN4RlFVRlhPMEZCUVVNc2FVSkJRVTlCTEVWQlFVVXdWaXhQUVVGR0xFTkJRVlVzUjBGQlZpeEZRVUZqTEVkQlFXUXNRMEZCVUR0QlFVRXdRaXhUUVVGNFJDeEZRVUV3UkRWRExFbEJRVEZFTEVOQlFTdEVMRWxCUVM5RUxFTkJRVEZDTEVOQlFXcERMRVZCUVdsSk1WTXNTVUZCUlN4SlFVRkpPRUlzVDBGQlQyOWlMR1ZCUVZnc1EwRkJNa0lzVjBGQlUzQmtMRU5CUVZRc1IwRkJWeXhGUVVGWUxFZEJRV05CTEVOQlFYcERMRU5CUVROS0xFdEJRWGxOUlN4SlFVRkZSQ3hGUVVGRmRXUXNXVUZCUml4SlFVRm5RblprTEVWQlFVVjNaQ3hWUVVGc1FpeEpRVUU0UW5oa0xFVkJRVVY1WkN4WFFVRm9ReXhKUVVFMlEzcGtMRVZCUVVVd1pDeFhRVUV2UXl4SlFVRTBSREZrTEVWQlFVVjVTQ3hUUVVFNVJDeEpRVUY1UlhwSUxFVkJRVVV5WkN4blFrRkJSaXhEUVVGdFFpeFhRVUZ1UWl4RlFVRm5RM0JKTEU5QlFXaERMRU5CUVhkRExGbEJRWGhETEVWQlFYRkVMRzlDUVVGeVJDeERRVUV6UlN4RlFVRnpTbWhWTEVsQlFVVjBRaXhGUVVGRk1tUXNVVUZCUml4SFFVRmhVQ3hMUVVGaUxFTkJRVzFDTEVkQlFXNUNMRU5CUVdwWExFTkJRV3hETEVWQlFUUmFMRkZCUVUxMlpDeERRVUZPTEV0QlFWVkRMRWxCUVVWblF5eFBRVUZQYjJJc1pVRkJVQ3hIUVVGMVFteGtMRVZCUVVVMFpDeEhRVUY2UWl4SFFVRTJRaXhQUVVGTGRHTXNSVUZCUlUwc1RVRkJVQ3hIUVVGamVWUXNWMEZCVnk5VUxFVkJRVVVzUlVGQlJpeERRVUZZTEVOQlFXUXNSMEZCWjBNclZDeFhRVUZYTDFRc1JVRkJSU3hEUVVGR0xFTkJRVmdzUTBGQmVrVXNRMEZCTlZvc1JVRkJkV1lzVVVGQlRYcENMRU5CUVU0c1MwRkJWVU1zU1VGQlJXZERMRTlCUVU5dllpeGxRVUZRTEVkQlFYVkNiR1FzUlVGQlJUWmtMRWRCUVhwQ0xFZEJRVFpDTEU5QlFVdDJZeXhGUVVGRlRTeE5RVUZRTEVkQlFXTjVWQ3hYUVVGWEwxUXNSVUZCUlN4RlFVRkdMRU5CUVZnc1EwRkJaQ3hIUVVGblF5dFVMRmRCUVZjdlZDeEZRVUZGTEVOQlFVWXNRMEZCV0N4RFFVRjZSU3hEUVVGMlppeEZRVUZyYkVKc1FpeEZRVUZGT0VRc1IwRkJSaXhKUVVGUGNFVXNRMEZCVUN4TFFVRlhRU3hKUVVGRkxFTkJRVU5CTEVOQlFXUXNRMEZCYkd4Q0xFVkJRVzF0UWtFc1MwRkJSeXhEUVVGb2NVSXNRMEZCTTBJN1FVRkJPSEpDTEU5QlFUTndXaXhGUVVFMGNGcE5MRVZCUVVWNVJpeHRRa0ZCUml4SFFVRnpRaXhWUVVGVGFrY3NRMEZCVkN4RlFVRlhPMEZCUVVNc1pVRkJUeXhMUVVGTExFTkJRVXdzUzBGQlUwRXNRMEZCVkN4TFFVRmhRU3hKUVVGRlVTeEZRVUZGTUVNc1dVRkJSaXhMUVVGcFFpeEhRVUZxUWl4SFFVRnhRaXhIUVVGd1F5eEhRVUY1UXpGRExFVkJRVVUwWXl4WlFVRkdMRU5CUVdVMVl5eEZRVUZGTkZJc1QwRkJSaXhEUVVGVkxFTkJRVllzUTBGQlppeEZRVUUwUW5CVExFTkJRVFZDTEVOQlFXaEVPMEZCUVN0RkxFOUJRVGQzV2l4RlFVRTRkMXBSTEVWQlFVVnRReXhUUVVGR0xFZEJRVmtzUlVGQk1YaGFMRVZCUVRaNFdtNURMRVZCUVVVd1pDeGhRVUZHTEVkQlFXZENMRmxCUVZVN1FVRkJReXhaUVVGSE1XUXNSVUZCUlVNc1RVRkJSaXhEUVVGVGVWQXNZMEZCV2l4RlFVRXlRaXhMUVVGSkxFbEJRVWxzVVN4SlFVRkZVU3hGUVVGRmIwUXNVMEZCUml4RFFVRlpMMElzVDBGQldpeEZRVUZPTEVWQlFUUkNOVUlzU1VGQlJTeERRVUZzUXl4RlFVRnZRMEVzU1VGQlJVUXNSVUZCUldkRExFMUJRWGhETEVWQlFTdERMMElzUjBGQkwwTTdRVUZCYlVSblF5eFpRVUZGYWtNc1JVRkJSVU1zUTBGQlJpeERRVUZHTzBGQlFXNUVMRk5CUVRKRVowTXNSVUZCUlhwQ0xFVkJRVVZ2UkN4VFFVRkdMRU5CUVZrc1EwRkJXaXhEUVVGR0xFVkJRV2xDTEVWQlFVTnVRaXhYUVVGVkxFTkJRVU1zUTBGQldpeEZRVUZxUWl4SFFVRnBRMUlzUlVGQlJYcENMRVZCUVVVMFVpeFBRVUZHTEVOQlFWVXNRMEZCVml4RFFVRkdMRVZCUVdVc1JVRkJRelZRTEZsQlFWY3NRMEZCUXl4RFFVRmlMRVZCUVdZc1EwRkJha003UVVGQmFVVXNUMEZCTHpoYUxFVkJRV2M1V21oRExFVkJRVVV5WkN4dFFrRkJSaXhIUVVGelFpeFpRVUZWTzBGQlFVTXNZVUZCU1N4SlFVRkpibVVzU1VGQlJTeERRVUZXTEVWQlFWbEJMRWxCUVVWUkxFVkJRVVZ0UXl4VFFVRkdMRU5CUVZsWUxFMUJRVEZDTEVWQlFXbERhRU1zUjBGQmFrTTdRVUZCY1VOUkxGbEJRVVZ0UXl4VFFVRkdMRU5CUVZrelF5eERRVUZhTEVWQlFXVnZaU3hWUVVGbU8wRkJRWEpETEZOQlFXbEZOV1FzUlVGQlJXMURMRk5CUVVZc1IwRkJXU3hGUVVGYU8wRkJRV1VzVDBGQmFtdGhMRVZCUVd0cllXNURMRVZCUVVVMlpDeFZRVUZHTEVkQlFXRXNXVUZCVlR0QlFVRkROMlFzVlVGQlJUUlNMRTlCUVVZc1EwRkJWVU1zVVVGQlZpeERRVUZ0UWl4TlFVRkpOMUlzUlVGQlJVTXNUVUZCUml4RFFVRlRiMFFzVlVGQllpeEhRVUYzUWl4SFFVRjRRaXhIUVVFMFFuSkVMRVZCUVVWRExFMUJRVVlzUTBGQlUydFBMRzFDUVVGNFJDeEZRVUUyUlRKUUxFMUJRVGRGTEVkQlFYTkdMRWxCUVVseVpTeEpRVUZGVHl4RlFVRkZORklzVDBGQlJpeERRVUZWUXl4UlFVRldMRU5CUVcxQ0xFMUJRVWszVWl4RlFVRkZReXhOUVVGR0xFTkJRVk52UkN4VlFVRm9ReXhEUVVGT0xFTkJRV3RFTEZkQlFWTnlSQ3hGUVVGRlF5eE5RVUZHTEVOQlFWTjNTeXhoUVVGc1FpeEpRVUZwUTNwTExFVkJRVVZETEUxQlFVWXNRMEZCVTNOT0xGbEJRVEZETEV0QlFYbEVkazRzUlVGQlJVTXNUVUZCUml4RFFVRlRjMDRzV1VGQlZDeEhRVUZ6UWpsT0xFVkJRVVVyUWl4TlFVRnFSaXhIUVVGNVJuaENMRVZCUVVWMVRpeFpRVUZHTEVkQlFXVndSeXhUUVVGVGJrZ3NSVUZCUlVNc1RVRkJSaXhEUVVGVGMwNHNXVUZCVkN4SlFVRjFRblpPTEVWQlFVVkRMRTFCUVVZc1EwRkJVM2RMTEdGQlFYcERMRVZCUVhWRUxFVkJRWFpFTEVOQlFYaEhMRVZCUVcxTGVrc3NSVUZCUlhWT0xGbEJRVVlzUjBGQlpYWk9MRVZCUVVWMVRpeFpRVUZHTEVkQlFXVjJUaXhGUVVGRlF5eE5RVUZHTEVOQlFWTnhUaXh2UWtGQk1VMHNSVUZCSzA1MFRpeEZRVUZGZFU0c1dVRkJSaXhIUVVGbE9VNHNSVUZCUlN0Q0xFMUJRV3BDTEV0QlFUQkNlRUlzUlVGQlJYVk9MRmxCUVVZc1IwRkJaVGxPTEVWQlFVVXJRaXhOUVVFelF5eERRVUV2VGl4RFFVRnJVaXhKUVVGSlRpeERRVUZLTzBGQlFVRXNXVUZCVFhoQ0xFbEJRVVVzUlVGQlVqdEJRVUZCTEZsQlFWZERMRWxCUVVVc1JVRkJZaXhEUVVGblFpeExRVUZKUml4RlFVRkZPRUlzU1VGQlJpeERRVUZQTEZWQlFWTk1MRU5CUVZRc1JVRkJWM1JDTEVOQlFWZ3NSVUZCWVR0QlFVRkRMR05CUVVsSExFbEJRVVZRTEVWQlFVVXNTVUZCUml4RFFVRk9MRU5CUVdNd1FpeEpRVUZGYkVJc1JVRkJSWFZPTEZsQlFVb3NTVUZCYTBJMVRpeEZRVUZGZVVNc1NVRkJSaXhEUVVGUGVFTXNRMEZCVUN4RFFVRnNRaXhGUVVFMFFuTkNMRWxCUVVWNlFpeEZRVUZGSzBJc1RVRkJTaXhKUVVGWlRpeExRVUZIZWtJc1JVRkJSU3RDTEUxQlFVWXNSMEZCVTNoQ0xFVkJRVVYxVGl4WlFVRXhRaXhKUVVGM1F6ZE9MRVZCUVVVd1F5eEpRVUZHTEVOQlFVOTRReXhEUVVGUUxFTkJRWEJGTEVWQlFUaEZSeXhGUVVGRlR5eEpRVUZHTEVOQlFVOHNlVUpCUVZBc1JVRkJhVU5aTEVOQlFXcERMRU5CUVRsRk8wRkJRV3RJTEZOQlFYSktMRWRCUVhWS1FTeEpRVUZGTEVOQlFUZEtMRVZCUVN0S1FTeEpRVUZGZGtJc1JVRkJSVFpDTEUxQlFXNUxMRVZCUVRCTFRpeEhRVUV4U3p0QlFVRTRTMnhDTEZsQlFVVTBVaXhQUVVGR0xFTkJRVlZ0VFN4TlFVRldMRU5CUVdsQ2RtVXNSVUZCUlVjc1JVRkJSWFZDTEVOQlFVWXNSVUZCU3poakxGTkJRVXdzUTBGQlpTeERRVUZETEVOQlFXaENMRU5CUVVZc1JVRkJjMEpvVFN4UlFVRjBRaXhEUVVFclFtaFRMRVZCUVVWRExFMUJRVVlzUTBGQlUydFBMRzFDUVVGNFF5eERRVUZxUWp0QlFVRTVTeXhUUVVFMlVDeExRVUZKYWs0c1NVRkJSWGhDTEVWQlFVVTRRaXhOUVVGR0xFZEJRVk1zUTBGQlppeEZRVUZwUWs0c1MwRkJSeXhEUVVGd1FpeEZRVUZ6UWtFc1IwRkJkRUk3UVVGQk1FSnNRaXhaUVVGRk5GSXNUMEZCUml4RFFVRlZjVTBzVDBGQlZpeERRVUZyUW5wbExFVkJRVVZGTEVWQlFVVjNRaXhEUVVGR0xFVkJRVXM0WXl4VFFVRk1MRU5CUVdVc1EwRkJReXhEUVVGb1FpeERRVUZHTEVWQlFYTkNhRTBzVVVGQmRFSXNRMEZCSzBKb1V5eEZRVUZGUXl4TlFVRkdMRU5CUVZOclR5eHRRa0ZCZUVNc1EwRkJiRUk3UVVGQk1VSTdRVUZCTUVjc1QwRkJNekppTEVWQlFUUXlZbTVQTEVWQlFVVnRVaXhYUVVGR0xFZEJRV01zV1VGQlZUdEJRVUZEYmxJc1ZVRkJSVFJTTEU5QlFVWXNRMEZCVlVNc1VVRkJWaXhEUVVGdFFpeE5RVUZKTjFJc1JVRkJSVU1zVFVGQlJpeERRVUZUYjBRc1ZVRkJZaXhIUVVGM1FpeEhRVUY0UWl4SFFVRTBRbkpFTEVWQlFVVkRMRTFCUVVZc1EwRkJVMnRQTEcxQ1FVRjRSQ3hGUVVFMlJUSlFMRTFCUVRkRkxFbEJRWE5HT1dRc1JVRkJSVWNzVFVGQlJpeERRVUZUSzJRc1ZVRkJWQ3hEUVVGdlFpeDVRa0ZCY0VJc1EwRkJkRVk3UVVGQmNVa3NUMEZCTVdkakxFVkJRVEpuWTJ4bExFVkJRVVZ2VWl4TlFVRkdMRWRCUVZNc1ZVRkJVelZTTEVOQlFWUXNSVUZCVnp0QlFVRkRMRmxCUVVsRExFbEJRVVZQTEVWQlFVVkxMRmRCUVVZc1IwRkJZMHdzUlVGQlJYVk9MRmxCUVhSQ0xFTkJRVzFEZGs0c1JVRkJSVzFTTEZkQlFVWXNTVUZCWjBKdVVpeEZRVUZGTm1Rc1ZVRkJSaXhGUVVGb1FpeEZRVUVyUWpka0xFVkJRVVU0VlN4blFrRkJSaXhGUVVFdlFpeEZRVUZ2UkhSV0xFdEJRVWRSTEVWQlFVVjNXQ3hQUVVGR0xFTkJRVlV2V0N4SlFVRkZUeXhGUVVGRmRVNHNXVUZCWkN4RlFVRXlRaXhEUVVFelFpeEZRVUUyUWl4RFFVRkRMRU5CUVRsQ0xFTkJRWFpFTzBGQlFYZEdMRTlCUVROd1l5eEZRVUUwY0dOMlRpeEZRVUZGVlN4UFFVRkdMRWRCUVZVc1dVRkJWVHRCUVVGRExGbEJRVWxzUWl4RFFVRktMRU5CUVUxUkxFVkJRVVZMTEZkQlFVWXNSMEZCWTB3c1JVRkJSWFZPTEZsQlFXaENMRWxCUVRoQ0wwNHNTVUZCUlZFc1JVRkJSVWNzVFVGQlJpeERRVUZUY1VJc1RVRkJWQ3hIUVVGblFpeEpRVUZGZUVJc1JVRkJSWFZPTEZsQlFYQkNMRWRCUVdsRGRrNHNSVUZCUlVzc1YwRkJja01zUlVGQmFVUmlMRXRCUVVkUkxFVkJRVVYxVGl4WlFVRjBSQ3hGUVVGdFJYWk9MRVZCUVVWM1dDeFBRVUZHTEVOQlFWVm9XU3hEUVVGV0xFVkJRVmtzUTBGQldpeEZRVUZqTEVOQlFVTXNRMEZCWml4RlFVRnBRaXhEUVVGRExFTkJRV3hDTEVOQlFXcEhMRWxCUVhWSUxFTkJRVU1zVjBGQlUxRXNSVUZCUlVNc1RVRkJSaXhEUVVGVGQwc3NZVUZCYkVJc1NVRkJhVU42U3l4RlFVRkZTeXhYUVVGR0xFbEJRV1VzU1VGQlJVd3NSVUZCUlhWT0xGbEJRWEJFTEVsQlFXdEZkazRzUlVGQlJVc3NWMEZCUml4SFFVRmpUQ3hGUVVGRlJ5eE5RVUZHTEVOQlFWTnhRaXhOUVVGVUxFZEJRV2RDTEVsQlFVVjRRaXhGUVVGRlF5eE5RVUZHTEVOQlFWTjNTeXhoUVVFMVJ5eE5RVUUyU0dwTUxFbEJRVVVzUTBGQlExRXNSVUZCUlVjc1RVRkJSaXhEUVVGVGNVSXNUVUZCVml4SFFVRnBRbmhDTEVWQlFVVkxMRmRCUVc1Q0xFZEJRU3RDVEN4RlFVRkZkVTRzV1VGQmJrTXNSVUZCWjBRdlRpeExRVUZIVVN4RlFVRkZkVTRzV1VGQmNrUXNSVUZCYTBWMlRpeEZRVUZGZDFnc1QwRkJSaXhEUVVGVmFGa3NRMEZCVml4RlFVRlpMRU5CUVZvc1JVRkJZeXhEUVVGRExFTkJRV1lzUlVGQmFVSXNRMEZCUXl4RFFVRnNRaXhEUVVFdlRDeERRVUYyU0R0QlFVRTBWU3hQUVVGdVoyUXNSVUZCYjJka1VTeEZRVUZGYldVc1YwRkJSaXhIUVVGakxGVkJRVk16WlN4RFFVRlVMRVZCUVZjN1FVRkJReXhaUVVGSFVTeEZRVUZGUXl4TlFVRkdMRU5CUVZOUkxFbEJRVlFzU1VGQlpWUXNSVUZCUlcxU0xGZEJRVVlzUlVGQlppeEZRVUVyUWl4dlFrRkJhVUl6VWl4RFFVRnFRaXg1UTBGQmFVSkJMRU5CUVdwQ0xFMUJRVzlDUVN4RlFVRkZaME1zVFVGQmVFUXNSVUZCSzBRc1MwRkJTU3hKUVVGSkwwSXNTVUZCUlN4RFFVRldMRVZCUVZsQkxFbEJRVVZFTEVWQlFVVm5ReXhOUVVGb1FpeEZRVUYxUWk5Q0xFZEJRWFpDTzBGQlFUSkNSQ3haUVVGRlF5eERRVUZHTEV0QlFVMVBMRVZCUVVVMFVpeFBRVUZHTEVOQlFWVnRUU3hOUVVGV0xFTkJRV2xDZG1Vc1JVRkJSVU1zUTBGQlJpeERRVUZxUWl4RFFVRk9PMEZCUVROQ0xGTkJRUzlFTEUxQlFUUklUeXhGUVVGRk5GSXNUMEZCUml4RFFVRlZiVTBzVFVGQlZpeERRVUZwUW5abExFTkJRV3BDTEVWQlFXOUNVU3hGUVVGRlF5eE5RVUZHTEVOQlFWTlJMRWxCUVZRc1NVRkJaVlFzUlVGQlJUWmtMRlZCUVVZc1JVRkJaaXhGUVVFNFFqZGtMRVZCUVVWRExFMUJRVVlzUTBGQlUzZFFMRkZCUVZRc1NVRkJiVUo2VUN4RlFVRkZkMUlzVDBGQlJpeERRVUZWTDBJc1VVRkJOMElzU1VGQmRVTjZVQ3hGUVVGRk9GUXNUVUZCUml4RFFVRlRMRU5CUVVNc1EwRkJWaXhEUVVGeVJUdEJRVUZyUml4UFFVRm9kMlFzUlVGQmFYZGtPVlFzUlVGQlJXOWxMRmxCUVVZc1IwRkJaU3hWUVVGVE5XVXNRMEZCVkN4RlFVRlhPMEZCUVVOUkxGVkJRVVZETEUxQlFVWXNRMEZCVTFFc1NVRkJWQ3hKUVVGbFZDeEZRVUZGYlZJc1YwRkJSaXhGUVVGbUxFTkJRU3RDTEVsQlFVa3hVaXhKUVVGRlR5eEZRVUZGU3l4WFFVRkdMRWRCUVdNc1EwRkJjRUlzUTBGQmMwSXNTVUZCUnl4dlFrRkJhVUppTEVOQlFXcENMSGxEUVVGcFFrRXNRMEZCYWtJc1RVRkJiMEpCTEVWQlFVVm5ReXhOUVVGNlFpeEZRVUZuUXp0QlFVRkRMR1ZCUVVrc1NVRkJTVTRzU1VGQlJTeERRVUZXTEVWQlFWbEJMRWxCUVVVeFFpeEZRVUZGWjBNc1RVRkJhRUlzUlVGQmRVSk9MRWRCUVhaQ08wRkJRVEpDTVVJc1kwRkJSVEJDTEVOQlFVWXNTMEZCVFd4Q0xFVkJRVVUwVWl4UFFVRkdMRU5CUVZWeFRTeFBRVUZXTEVOQlFXdENlbVVzUlVGQlJUQkNMRU5CUVVZc1EwRkJiRUlzUTBGQlRqdEJRVUV6UWl4WFFVRjVSSHBDTEVsQlFVVlBMRVZCUVVWTExGZEJRVVlzUjBGQlkySXNSVUZCUldkRExFMUJRV3hDTzBGQlFYbENMRk5CUVc1SUxFMUJRWGRJZUVJc1JVRkJSVFJTTEU5QlFVWXNRMEZCVlhGTkxFOUJRVllzUTBGQmEwSjZaU3hEUVVGc1FpeEZRVUZ4UWxFc1JVRkJSVU1zVFVGQlJpeERRVUZUVVN4SlFVRlVMRWxCUVdWVUxFVkJRVVUyWkN4VlFVRkdMRVZCUVdZc1JVRkJPRUkzWkN4RlFVRkZReXhOUVVGR0xFTkJRVk4zVUN4UlFVRlVMRWxCUVcxQ2VsQXNSVUZCUlhkU0xFOUJRVVlzUTBGQlZTOUNMRkZCUVRkQ0xFbEJRWFZEZWxBc1JVRkJSVGhVTEUxQlFVWXNRMEZCVXl4RFFVRkRMRU5CUVZZc1EwRkJja1VzUlVGQmEwWTVWQ3hGUVVGRmQxZ3NUMEZCUml4RFFVRlZMMWdzUTBGQlZpeEZRVUZaTEVOQlFWb3NSVUZCWXl4RFFVRkRMRU5CUVdZc1EwRkJiRVk3UVVGQmIwY3NUMEZCYkd0bExFVkJRVzFyWlU4c1JVRkJSWEZsTEZkQlFVWXNSMEZCWXl4VlFVRlROMlVzUTBGQlZDeEZRVUZYTzBGQlFVTlJMRlZCUVVWRExFMUJRVVlzUTBGQlUxRXNTVUZCVkN4TFFVRm5RbFFzUlVGQlJXMVNMRmRCUVVZc1NVRkJaMEp1VWl4RlFVRkZSeXhOUVVGR0xFZEJRVk5JTEVWQlFVVTBVaXhQUVVGR0xFTkJRVlZETEZGQlFWWXNRMEZCYlVJc1RVRkJTVGRTTEVWQlFVVkRMRTFCUVVZc1EwRkJVMjlFTEZWQlFXaERMRU5CUVhwRExFVkJRWE5HTEVsQlFVazFSQ3hEUVVGS08wRkJRVUVzV1VGQlRYbENMRWxCUVVWc1FpeEZRVUZGU3l4WFFVRldMRU5CUVhOQ0xFbEJRVWNzYjBKQlFXbENZaXhEUVVGcVFpeDVRMEZCYVVKQkxFTkJRV3BDTEUxQlFXOUNRU3hGUVVGRlowTXNUVUZCZWtJc1JVRkJaME03UVVGQlF5eGxRVUZKTEVsQlFVazVRaXhKUVVGRkxFTkJRVllzUlVGQldVRXNTVUZCUlVZc1JVRkJSV2RETEUxQlFXaENMRVZCUVhWQ09VSXNSMEZCZGtJN1FVRkJNa0pFTEdkQ1FVRkZSQ3hGUVVGRlJTeERRVUZHTEVOQlFVWXNSVUZCVDAwc1JVRkJSVWNzVFVGQlJpeERRVUZUVml4RFFVRlVMRXRCUVdGUExFVkJRVVZITEUxQlFVWXNRMEZCVTBNc1JVRkJWQ3hEUVVGWldDeERRVUZhTEVWQlFXVnhaU3hOUVVGbUxFVkJRWEJDTEVWQlFUUkRjbVVzU1VGQlJYbENMRU5CUVVZc1NVRkJTMEVzUjBGQmFrUTdRVUZCTTBJc1YwRkJaMFpCTEVsQlFVVnlRaXhMUVVGTE1sWXNSMEZCVEN4RFFVRlRkRlVzUTBGQlZDeEZRVUZYTEVOQlFWZ3NRMEZCUmp0QlFVRm5RaXhUUVVGcVNTeE5RVUZ6U1hwQ0xFbEJRVVZFTEVOQlFVWXNSVUZCU1ZFc1JVRkJSVWNzVFVGQlJpeERRVUZUVml4RFFVRlVMRXRCUVdGUExFVkJRVVZITEUxQlFVWXNRMEZCVTBNc1JVRkJWQ3hEUVVGWldDeERRVUZhTEVWQlFXVnhaU3hOUVVGbUxFVkJRV3BDTEVWQlFYbERjbVVzU1VGQlJYbENMRU5CUVVZc1NVRkJTMEVzUjBGQk9VTXNSVUZCYTBSQkxFbEJRVVZ5UWl4TFFVRkxNbFlzUjBGQlRDeERRVUZUZEZVc1EwRkJWQ3hGUVVGWExFTkJRVmdzUTBGQmNFUXNRMEZCYTBWc1FpeEZRVUZGUXl4TlFVRkdMRU5CUVZOUkxFbEJRVlFzU1VGQlpWUXNSVUZCUlRaa0xGVkJRVVlzUlVGQlppeEZRVUU0UWpka0xFVkJRVVZETEUxQlFVWXNRMEZCVTNkUUxGRkJRVlFzU1VGQmJVSjZVQ3hGUVVGRmQxSXNUMEZCUml4RFFVRlZMMElzVVVGQk4wSXNTVUZCZFVONlVDeEZRVUZGT0ZRc1RVRkJSaXhEUVVGVExFTkJRVU1zUTBGQlZpeERRVUZ5UlN4RlFVRnJSamxVTEVWQlFVVkRMRTFCUVVZc1EwRkJVMUVzU1VGQlZDeEhRVUZqVkN4RlFVRkZkMWdzVDBGQlJpeERRVUZWZEZjc1NVRkJSV3hDTEVWQlFVVjFUaXhaUVVGa0xFVkJRVEpDTEVOQlFUTkNMRVZCUVRaQ0xFTkJRVU1zUTBGQk9VSXNRMEZCWkN4SFFVRXJRM1pPTEVWQlFVVjNXQ3hQUVVGR0xFTkJRVlYwVnl4RFFVRldMRVZCUVZrc1EwRkJXaXhGUVVGakxFTkJRVU1zUTBGQlppeERRVUZxU1R0QlFVRnRTaXhQUVVGd2FXWXNSVUZCY1dsbWJFSXNSVUZCUlhObExHVkJRVVlzUjBGQmEwSXNXVUZCVlR0QlFVRkRMR0ZCUVVrc1NVRkJTVGxsTEVsQlFVVXNSVUZCVGl4RlFVRlRReXhKUVVGRkxFTkJRV1lzUlVGQmFVSkJMRWxCUVVWUExFVkJRVVZITEUxQlFVWXNRMEZCVTNGQ0xFMUJRVFZDTEVWQlFXMURMMElzUjBGQmJrTTdRVUZCZFVORUxGbEJRVVUwUXl4SlFVRkdMRU5CUVU4elF5eERRVUZRTzBGQlFYWkRMRk5CUVdsRVR5eEZRVUZGY1dVc1YwRkJSaXhEUVVGak4yVXNRMEZCWkR0QlFVRnBRaXhQUVVGd2IyWXNSVUZCY1c5bVVTeEZRVUZGZVdNc1QwRkJSaXhIUVVGVkxFVkJRVU53VkN4TlFVRkxMRVZCUVVOelZDeGpRVUZoTEhkQ1FVRlZPMEZCUVVNc2FVSkJRVWtzU1VGQlNXNWtMRWxCUVVVc1EwRkJWaXhGUVVGWlFTeEpRVUZGVVN4RlFVRkZSeXhOUVVGR0xFTkJRVk54UWl4TlFVRjJRaXhGUVVFNFFtaERMRWRCUVRsQ0xFVkJRV3RETzBGQlFVTXNhMEpCUVVsRExFbEJRVVZQTEVWQlFVVkhMRTFCUVVZc1EwRkJVME1zUlVGQlZDeERRVUZaV2l4RFFVRmFMRU5CUVU0N1FVRkJRU3hyUWtGQmNVSXdRaXhKUVVGRmVrSXNSVUZCUlN4RFFVRkdMRVZCUVV0eFZ5eHBRa0ZCTlVJN1FVRkJRU3hyUWtGQk9FTndWeXhKUVVGRkxFTkJRVU4zUWl4RFFVRnFSQ3hEUVVGdFJHeENMRVZCUVVWRExFMUJRVVlzUTBGQlUzTkpMR2RDUVVGVUxFdEJRVFJDTjBrc1MwRkJSMDBzUlVGQlJYVlRMRk5CUVdwRExFVkJRVFJETEVsQlFVazFVeXhKUVVGRkxFTkJRVTRzUTBGQlVVc3NSVUZCUlRCRExGbEJRVVlzVDBGQmJVSXZReXhKUVVGRlJDeERRVUZHTEVWQlFVbEJMRWxCUVVVc1EwRkJla0lzUlVGQk5FSXNTVUZCU1VVc1NVRkJSVWtzUlVGQlJVTXNUVUZCUml4RFFVRlRiMG9zU1VGQlZDeERRVUZqUXl4VFFVRmtMRWRCUVhkQ2Vrb3NTMEZCU3pKV0xFZEJRVXdzUTBGQlV5eEpRVUZGTTFZc1MwRkJTM2xHTEVkQlFVd3NRMEZCVXpkR0xFVkJRVVVzUTBGQlJpeEZRVUZMSzFNc1VVRkJaQ3hEUVVGWUxFVkJRVzFETEVOQlFXNURMRU5CUVhoQ0xFZEJRVGhFTEVsQlFVVXpVeXhMUVVGTGRWZ3NSMEZCVEN4RFFVRlRkbGdzUzBGQlN6SldMRWRCUVV3c1EwRkJVeTlXTEVWQlFVVXNRMEZCUml4RlFVRkxLMU1zVVVGQlpDeEZRVUYxUWl4RFFVRkRMRU5CUVhoQ0xFTkJRVlFzUlVGQmIwTXNRMEZCY0VNc1EwRkJkRVVzUTBGQk5rY3ZVeXhGUVVGRmVWTXNSMEZCUml4RFFVRk5MRVZCUVVOeFRTeFRRVUZSTTJVc1EwRkJWQ3hGUVVGT0xFVkJRVzFDZDBnc1UwRkJia0lzUTBGQk5rSXNhVUpCUVdVeFNDeERRVUZtTEVkQlFXbENMRTFCUVdwQ0xFZEJRWGRDUXl4RFFVRjRRaXhIUVVFd1FpeFZRVUYyUkR0QlFVRnRSVHRCUVVGRExGZEJRV2hZTEVWQlFXbFlLMk1zWlVGQll5eDFRa0ZCVTJ4a0xFTkJRVlFzUlVGQlZ6dEJRVUZETEdkQ1FVRkhVU3hGUVVGRlJ5eE5RVUZHTEVOQlFWTXlWeXhWUVVGVUxFTkJRVzlDZEZnc1EwRkJjRUlzUjBGQmRVSlJMRVZCUVVWRExFMUJRVVlzUTBGQlUzTkpMR2RDUVVGVUxFbEJRVEpDTEUxQlFVa3ZTU3hEUVVGNlJDeEZRVUV5UkR0QlFVRkRMR3RDUVVGSlF5eEpRVUZGTEVOQlFVTXNRMEZCVUN4RFFVRlRUeXhGUVVGRlJ5eE5RVUZHTEVOQlFWTnJWU3hoUVVGVUxFTkJRWFZDTEZsQlFWVTdRVUZCUXl4dlFrRkJSeXhEUVVGRE5WVXNRMEZCUkN4SlFVRkpUeXhEUVVGUUxFVkJRVk03UVVGQlExQXNjMEpCUVVVc1EwRkJReXhEUVVGSUxFVkJRVXRQTEVWQlFVVXJSeXhUUVVGR0xFZEJRVmtzUTBGQlF5eERRVUZzUWl4RFFVRnZRaXhMUVVGSkxFbEJRVWwyU0N4SlFVRkZMRU5CUVVNc2NVSkJRVVFzUlVGQmRVSXNaVUZCZGtJc1JVRkJkVU1zWjBKQlFYWkRMRVZCUVhkRUxHbENRVUY0UkN4RlFVRXdSU3hwUWtGQk1VVXNRMEZCVGl4RlFVRnRSekJDTEVsQlFVVXNRMEZCZWtjc1JVRkJNa2RCTEVsQlFVVXhRaXhGUVVGRlowTXNUVUZCTDBjc1JVRkJjMGhPTEVkQlFYUklPMEZCUVRCSWJFSXNjMEpCUVVVMFVpeFBRVUZHTEVOQlFWVTRTaXhQUVVGV0xFTkJRV3RDYkdNc1JVRkJSVEJDTEVOQlFVWXNRMEZCYkVJN1FVRkJNVWc3UVVGQmEwbzdRVUZCUXl4bFFVRnVUanRCUVVGeFRqdEJRVUZETEZkQlFYUnhRaXhGUVVGT0xFVkJRVGh4UWpaSUxFMUJRVXNzUlVGQlF6UlVMR05CUVdFc2QwSkJRVlU3UVVGQlF5eHBRa0ZCU1N4SlFVRkpiR1FzU1VGQlJTeERRVUZXTEVWQlFWbEJMRWxCUVVWUExFVkJRVVZITEUxQlFVWXNRMEZCVTNGQ0xFMUJRWFpDTEVWQlFUaENMMElzUjBGQk9VSXNSVUZCYTBNN1FVRkJReXhyUWtGQlNYbENMRWxCUVVWc1FpeEZRVUZGUnl4TlFVRkdMRU5CUVZORExFVkJRVlFzUTBGQldWZ3NRMEZCV2l4RFFVRk9PMEZCUVVFc2EwSkJRWEZDUXl4SlFVRkZkMElzUlVGQlJTeERRVUZHTEVWQlFVdHpVaXhSUVVFMVFpeERRVUZ4UTNoVExFVkJRVVZETEUxQlFVWXNRMEZCVXpoSkxFbEJRVlFzUTBGQlkwTXNZVUZCWkN4TFFVRTRRblJLTEVsQlFVVkhMRXRCUVVzeVZpeEhRVUZNTEVOQlFWTXpWaXhMUVVGTGRWZ3NSMEZCVEN4RFFVRlRiRmNzUlVGQlJTeERRVUZHTEVWQlFVdHpVaXhSUVVGa0xFVkJRWFZDTEVOQlFYWkNMRU5CUVZRc1JVRkJiVU1zUTBGQlF5eERRVUZ3UXl4RFFVRm9ReXhGUVVGM1JTeEpRVUZKTjFNc1NVRkJSWFZDTEVWQlFVVXNRMEZCUml4RlFVRkxORlVzYVVKQlFWZzdRVUZCUVN4clFrRkJOa0pzVnl4SlFVRkZMRU5CUVVNc1IwRkJSQ3hIUVVGTFJpeERRVUZ3UXp0QlFVRkJMR3RDUVVGelEwc3NTVUZCUlVnc1EwRkJlRU03UVVGQlFTeHJRa0ZCTUVOeFFpeEpRVUZGTEVOQlFUVkRPMEZCUVVFc2EwSkJRVGhEVVN4SlFVRkZMRU5CUVVNNVFpeERRVUZxUkR0QlFVRkJMR3RDUVVGdFJEQkRMRWxCUVVVc1EwRkJja1FzUTBGQmRVUXNTVUZCUjNKRExFVkJRVVV3UXl4WlFVRkdMRXRCUVdsQ01VTXNSVUZCUlRoRUxFZEJRVVlzUzBGQlVTOUVMRWxCUVVVc1EwRkJRMEVzUTBGQldDeERRVUZxUWl4SlFVRm5RM05ETEVsQlFVVmFMRU5CUVVZc1JVRkJTVUVzU1VGQlJTeERRVUZPTEVWQlFWRlNMRWxCUVVVc1EwRkJRMnhDTEVOQlFWZ3NSVUZCWVVFc1NVRkJSU3hEUVVFdlF5eEhRVUZyUkcxQ0xFVkJRVVVzUTBGQlJpeEZRVUZMWjFNc1MwRkJUQ3hEUVVGWGMwd3NUVUZCV0N4SFFVRnJRaXhEUVVGRE0yVXNTMEZCUzNsR0xFZEJRVXdzUTBGQlUzcEdMRXRCUVVzMFpTeExRVUZNTEVOQlFWY3ZaU3hEUVVGWUxFTkJRVlFzUTBGQlJDeEhRVUY1UWswc1JVRkJSVWNzVFVGQlJpeERRVUZUY1VJc1RVRkJkRWNzUlVGQk5rZDRRaXhGUVVGRlF5eE5RVUZHTEVOQlFWTTRTU3hKUVVGVUxFTkJRV05FTEZsQlFUbElMRVZCUVRKSk8wRkJRVU1zYjBKQlFVbDRSU3hKUVVGRmRFVXNSVUZCUlRCRExGbEJRVVlzUzBGQmFVSjRRaXhGUVVGRk5sRXNTVUZCUml4RFFVRlBMREpDUVVGUUxFTkJRV3BDTEVkQlFYRkVOMUVzUlVGQlJUWlJMRWxCUVVZc1EwRkJUeXd3UWtGQlVDeERRVUV6UkR0QlFVRkJMRzlDUVVFNFJqTk5MRWxCUVVWd1JpeEZRVUZGTUVNc1dVRkJSaXhMUVVGcFFuaENMRVZCUVVVMlVTeEpRVUZHTEVOQlFVOHNORUpCUVZBc1EwRkJha0lzUjBGQmMwUTNVU3hGUVVGRk5sRXNTVUZCUml4RFFVRlBMRFpDUVVGUUxFTkJRWFJLTEVOQlFUUk1MRTFCUVVsNlRpeEZRVUZGT1VNc1RVRkJUaXhMUVVGbE9FTXNTVUZCUlRsRkxFVkJRVVVzYzBOQlFXOURVU3hGUVVGRk1FTXNXVUZCUml4TFFVRnBRaXhOUVVGcVFpeEhRVUYzUWl4TFFVRTFSQ3hKUVVGdFJTeFZRVUZ5UlN4RFFVRkdMRVZCUVcxR2VFSXNSVUZCUlRaakxFMUJRVVlzUTBGQlUzcGFMRU5CUVZRc1EwRkJiRWNzUjBGQkswY3NUVUZCU1dNc1JVRkJSVFZFTEUxQlFVNHNTMEZCWlRSRUxFbEJRVVUxUml4RlFVRkZMSE5EUVVGdlExRXNSVUZCUlRCRExGbEJRVVlzUzBGQmFVSXNUMEZCYWtJc1IwRkJlVUlzVVVGQk4wUXNTVUZCZFVVc1ZVRkJla1VzUTBGQlJpeEZRVUYxUm5oQ0xFVkJRVVUyWXl4TlFVRkdMRU5CUVZNeldTeERRVUZVTEVOQlFYUkhMRU5CUVM5SExFVkJRV3RQWkN4RlFVRkZPVU1zVFVGQlJpeExRVUZYT0VNc1JVRkJSU3hEUVVGR0xFVkJRVXMwVHl4TFFVRk1MRU5CUVZkeFRDeFBRVUZZTEVkQlFXMUNNV1VzUzBGQlN6SldMRWRCUVV3c1EwRkJVeXhEUVVGRE9WWXNRMEZCVml4RlFVRlpMRU5CUVZvc1EwRkJPVUlzUTBGQmJFOHNSVUZCWjFJd1JpeEZRVUZGTlVRc1RVRkJSaXhMUVVGWE5FUXNSVUZCUlN4RFFVRkdMRVZCUVVzNFRpeExRVUZNTEVOQlFWZHhUQ3hQUVVGWUxFZEJRVzFDTVdVc1MwRkJTekpXTEVkQlFVd3NRMEZCVXpsV0xFTkJRVlFzUlVGQlZ5eERRVUZZTEVOQlFUbENMRU5CUVdoU08wRkJRVFpVTEdsQ1FVRkZNRWdzVTBGQlJpeERRVUZaTEdsQ1FVRmxNMFlzUTBGQlppeEhRVUZwUWl4TlFVRnFRaXhIUVVGM1Fsa3NRMEZCZUVJc1IwRkJNRUlzYlVKQlFURkNMRWRCUVRoRGNFSXNRMEZCT1VNc1IwRkJaMFFzWlVGQmFFUXNSMEZCWjBWc1FpeERRVUZvUlN4SFFVRnJSU3hOUVVFNVJUdEJRVUZ6Ump0QlFVRkRMRmRCUVRVM1FpeEZRVUUyTjBJeVl5eGxRVUZqTEhWQ1FVRlRhbVFzUTBGQlZDeEZRVUZYTzBGQlFVTXNaMEpCUVVkUExFVkJRVVZITEUxQlFVWXNRMEZCVXpKWExGVkJRVlFzUTBGQmIwSnlXQ3hEUVVGd1FpeEZRVUYxUW5OVExFbEJRWFpDTEVOQlFUUkNMRGhIUVVFMVFpeEZRVUUwU1N0RkxGVkJRVFZKTEVOQlFYVktjbGdzUTBGQmRrb3NSMEZCTUVwUExFVkJRVVZETEUxQlFVWXNRMEZCVTNOSkxHZENRVUZVTEVsQlFUSkNMRTFCUVVrNVNTeERRVUUxVEN4RlFVRTRURHRCUVVGRExHdENRVUZKZVVJc1NVRkJSU3hEUVVGRExFTkJRVkFzUTBGQlUyeENMRVZCUVVWSExFMUJRVVlzUTBGQlUwTXNSVUZCVkN4RFFVRlpTaXhGUVVGRlN5eFhRVUZrTEVWQlFUSkNaMVVzWVVGQk0wSXNRMEZCZVVNc1dVRkJWVHRCUVVGRExHOUNRVUZITEVOQlFVTnVWQ3hEUVVGRUxFbEJRVWxzUWl4RFFVRktMRWxCUVU5U0xFVkJRVVVzU1VGQlJpeEZRVUZSWjFnc1VVRkJVaXhEUVVGcFFuaFhMRVZCUVVWRExFMUJRVVlzUTBGQlUzRkVMR2RDUVVFeFFpeERRVUZXTEVWQlFYTkVPMEZCUVVOd1F5eHpRa0ZCUlN4RFFVRkRMRU5CUVVnc1JVRkJTMnhDTEVWQlFVVXJSeXhUUVVGR0xFZEJRVmtzUTBGQlF5eERRVUZzUWl4RFFVRnZRaXhMUVVGSkxFbEJRVWwwU0N4SlFVRkZMRU5CUVVNc2NVSkJRVVFzUlVGQmRVSXNaVUZCZGtJc1JVRkJkVU1zWjBKQlFYWkRMRVZCUVhkRUxHbENRVUY0UkN4RlFVRXdSU3hwUWtGQk1VVXNRMEZCVGl4RlFVRnRSME1zU1VGQlJTeERRVUY2Unl4RlFVRXlSMEVzU1VGQlJVUXNSVUZCUlN0Q0xFMUJRUzlITEVWQlFYTklPVUlzUjBGQmRFZzdRVUZCTUVoTkxITkNRVUZGTkZJc1QwRkJSaXhEUVVGVk9Fb3NUMEZCVml4RFFVRnJRbXBqTEVWQlFVVkRMRU5CUVVZc1EwRkJiRUk3UVVGQk1VZzdRVUZCYTBvN1FVRkJReXhsUVVGc1VqdEJRVUZ2VWp0QlFVRkRMRmRCUVhBM1F5eEZRVUZ1Y2tJc1JVRkJlVzFGZFVvc1RVRkJTeXhGUVVGRE1GUXNZMEZCWVN4M1FrRkJWVHRCUVVGRExHZENRVUZKYkdRc1EwRkJTanRCUVVGQkxHZENRVUZOZVVJc1NVRkJSU3hEUVVGU0xFTkJRVlZzUWl4RlFVRkZReXhOUVVGR0xFTkJRVk5uU2l4SlFVRlVMRU5CUVdORExFMUJRV1FzUzBGQmRVSnNTaXhGUVVGRk1FTXNXVUZCUml4TlFVRnJRbXBFTEVsQlFVVlBMRVZCUVVVMFVpeFBRVUZHTEVOQlFWVkhMRWxCUVZZc1EwRkJaU3h4UWtGQlppeERRVUZHTEVWQlFYZERMRTFCUVVsMFV5eEZRVUZGSzBJc1RVRkJUaXhMUVVGbEwwSXNTVUZCUlVRc1JVRkJSU3gzUTBGQlJpeERRVUZHTEVWQlFUaERVU3hGUVVGRk5GSXNUMEZCUml4RFFVRlZiVTBzVFVGQlZpeERRVUZwUW5SbExFTkJRV3BDTEVOQlFUZEVMRU5CUVhoRExFVkJRVEJJUVN4RlFVRkZlVk1zUjBGQlJpeERRVUZOTEVWQlFVTnFUeXhSUVVGUGFrVXNSVUZCUldkRkxFdEJRVVlzUjBGQlVTeEpRVUZvUWl4RlFVRk9MRU5CUVRWSkxFdEJRVEpMZGtVc1NVRkJSVThzUlVGQlJXOUVMRk5CUVVZc1EwRkJXVEpQTEVsQlFWb3NRMEZCYVVJc2NVSkJRV3BDTEVOQlFVWXNSVUZCTUVNc1RVRkJTWFJUTEVWQlFVVXJRaXhOUVVGT0xFdEJRV1V2UWl4SlFVRkZSQ3hGUVVGRkxIZERRVUZHTEVOQlFVWXNSVUZCT0VOUkxFVkJRVVZ2UkN4VFFVRkdMRU5CUVZreVlTeE5RVUZhTEVOQlFXMUNkR1VzUTBGQmJrSXNRMEZCTjBRc1EwRkJjazRzUTBGQmRrSXNSVUZCYTFVc1MwRkJTU3hKUVVGSlF5eEpRVUZGTEVOQlFWWXNSVUZCV1VFc1NVRkJSVTBzUlVGQlJVY3NUVUZCUml4RFFVRlRjVUlzVFVGQmRrSXNSVUZCT0VJNVFpeEhRVUU1UWl4RlFVRnJRenRCUVVGRExHdENRVUZKUXl4SlFVRkZTeXhGUVVGRlJ5eE5RVUZHTEVOQlFWTkRMRVZCUVZRc1EwRkJXVllzUTBGQldpeERRVUZPTzBGQlFVRXNhMEpCUVhGQ1JTeEpRVUZGTEV0QlFVZEdMRU5CUVRGQ08wRkJRVUVzYTBKQlFUUkNTeXhKUVVGRlJpeExRVUZMUXl4TFFVRk1MRU5CUVZkR0xFbEJRVVVzUjBGQllpeERRVUU1UWl4RFFVRm5SRWtzUlVGQlJUaEVMRWRCUVVZc1MwRkJVV3hGTEVsQlFVVXNRMEZCUTBFc1EwRkJTQ3hGUVVGTFJ5eEpRVUZGUml4TFFVRkxReXhMUVVGTUxFTkJRVmNzUTBGQlEwWXNRMEZCUkN4SFFVRkhMRWRCUVdRc1EwRkJaaXhGUVVGdFF5eEpRVUZKY1VJc1NVRkJSWEJDTEV0QlFVc3lWaXhIUVVGTUxFTkJRVk16Vml4TFFVRkxkVmdzUjBGQlRDeERRVUZUZWxnc1JVRkJSU3hEUVVGR0xFVkJRVXMyVXl4UlFVRmtMRVZCUVhWQ0xFTkJRWFpDTEVOQlFWUXNSVUZCYlVNc1EwRkJReXhEUVVGd1F5eERRVUZPTzBGQlFVRXNhMEpCUVRaREwxRXNTVUZCUlN4RFFVRXZRenRCUVVGQkxHdENRVUZwUkZrc1NVRkJSU3hEUVVGdVJEdEJRVUZCTEd0Q1FVRnhSR2xETEVsQlFVVXNRMEZCZGtRc1EwRkJlVVExUlN4SlFVRkZMRU5CUVVZc1NVRkJTeXhEUVVGTUxFbEJRVkVyUWl4SlFVRkZMRWxCUVVVc1EwRkJRekZDTEVOQlFVZ3NSMEZCUzBNc1JVRkJSVFpWTEVsQlFWUXNSVUZCWTNaUkxFbEJRVVVzUTBGQmVFSXNTVUZCTWtJc1EwRkJRelZGTEVsQlFVVXNRMEZCU0N4SlFVRk5MRU5CUVU0c1NVRkJVeXhEUVVGVUxFbEJRVmtyUWl4SlFVRkZMRU5CUVVZc1JVRkJTVFpETEVsQlFVVXNTVUZCUlN4RFFVRkRka1VzUTBGQlNDeEhRVUZMUXl4RlFVRkZObFVzU1VGQmVrSXNTVUZCSzBJc1EwRkJRMjVXTEVsQlFVVXNRMEZCU0N4SlFVRk5MRU5CUVU0c1NVRkJVeXhEUVVGVUxFbEJRVmtyUWl4SlFVRkZla0lzUlVGQlJUWlZMRWxCUVVZc1IwRkJUeXhKUVVGRk9WVXNRMEZCUml4SFFVRkpReXhGUVVGRk5sVXNTVUZCWml4RlFVRnZRblpSTEVsQlFVVjBSU3hGUVVGRk5sVXNTVUZCY0VNc1NVRkJNRU1zUTBGQlEyNVdMRWxCUVVVc1EwRkJTQ3hKUVVGTkxFTkJRVTRzU1VGQlV5eERRVUZVTEV0QlFXRXJRaXhKUVVGRkxFTkJRVU42UWl4RlFVRkZObFVzU1VGQlRDeEZRVUZWZGxFc1NVRkJSU3hKUVVGRmRFVXNSVUZCUlRaVkxFbEJRVW9zUjBGQlV5eEpRVUZGTjFVc1JVRkJSVFpWTEVsQlFVb3NSMEZCVXpsVkxFTkJRVE5ETEVOQlFYQkhMRVZCUVd0S1F5eEZRVUZGT0VRc1IwRkJSaXhMUVVGUmNrTXNTVUZCUlN4RFFVRkRRU3hEUVVGWUxFTkJRV3hLTEVWQlFXZExla0lzUlVGQlJUQkRMRmxCUVVZc1QwRkJiVUpNTEVsQlFVVmFMRU5CUVVZc1JVRkJTVUVzU1VGQlJTeERRVUY2UWl4RFFVRm9TeXhEUVVFMFRDeEpRVUZKTWtRc1NVRkJSU3hqUVVGWmNFWXNSVUZCUlRCRExGbEJRVVlzUzBGQmFVSXNRMEZCYWtJc1IwRkJiVUlzUTBGQlF6bERMRU5CUVdoRExFbEJRVzFETEdWQlFXNURMRWxCUVc5RVNTeEZRVUZGTUVNc1dVRkJSaXhMUVVGcFFqbERMRU5CUVdwQ0xFZEJRVzFDTEVOQlFYWkZMRWxCUVRCRkxHMUNRVUV4UlN4SFFVRTRSalpDTEVOQlFUbEdMRWRCUVdkSExFMUJRV2hITEVkQlFYVkhXU3hEUVVGMlJ5eEhRVUY1Unl4TlFVRjZSeXhIUVVGblNHbERMRU5CUVdoSUxFZEJRV3RJTEV0QlFYaElMRU5CUVRoSUxFbEJRVWR5UkN4TFFVRkhMRU5CUVVnc1NVRkJUVUVzU1VGQlJTeERRVUZETEVOQlFWUXNTMEZCWVVNc1NVRkJSU3hMUVVGSGVFSXNRMEZCU0N4SFFVRkxMRXRCUVVkMVFpeERRVUZXTEVWQlFWbHFRaXhGUVVGRk9FUXNSMEZCUml4TFFVRlJOVU1zU1VGQlJTeExRVUZITEVOQlFVTjRRaXhEUVVGS0xFZEJRVTBzUzBGQlIzVkNMRU5CUVc1Q0xFTkJRWHBDTEVkQlFXZEVkRUlzUlVGQlJYbElMRk5CUVVZc1EwRkJXV2hETEVOQlFWb3NRMEZCYUVRc1JVRkJLMFJ3Uml4RlFVRkZReXhOUVVGR0xFTkJRVk5uU2l4SlFVRlVMRU5CUVdOSUxGbEJRV2hHTEVWQlFUWkdPMEZCUVVNc2IwSkJRVWszUWl4SlFVRkZha2dzUlVGQlJUQkRMRmxCUVVZc1MwRkJhVUl2UXl4RlFVRkZiMU1zU1VGQlJpeERRVUZQTERKQ1FVRlFMRU5CUVdwQ0xFZEJRWEZFY0ZNc1JVRkJSVzlUTEVsQlFVWXNRMEZCVHl3d1FrRkJVQ3hEUVVFelJEdEJRVUZCTEc5Q1FVRTRSakZMTEVsQlFVVnlTQ3hGUVVGRk1FTXNXVUZCUml4TFFVRnBRaTlETEVWQlFVVnZVeXhKUVVGR0xFTkJRVThzTkVKQlFWQXNRMEZCYWtJc1IwRkJjMFJ3VXl4RlFVRkZiMU1zU1VGQlJpeERRVUZQTERaQ1FVRlFMRU5CUVhSS0xFTkJRVFJNTEUxQlFVazVTeXhGUVVGRmVrWXNUVUZCVGl4TFFVRmxlVVlzU1VGQlJYcElMRVZCUVVVc2MwTkJRVzlEVVN4RlFVRkZNRU1zV1VGQlJpeExRVUZwUWl4TlFVRnFRaXhIUVVGM1FpeExRVUUxUkN4SlFVRnRSU3hWUVVGeVJTeERRVUZHTEVWQlFXMUdMME1zUlVGQlJXOWxMRTFCUVVZc1EwRkJVemxYTEVOQlFWUXNRMEZCYkVjc1IwRkJLMGNzVFVGQlNVa3NSVUZCUlRkR0xFMUJRVTRzUzBGQlpUWkdMRWxCUVVVM1NDeEZRVUZGTEhORFFVRnZRMUVzUlVGQlJUQkRMRmxCUVVZc1MwRkJhVUlzVDBGQmFrSXNSMEZCZVVJc1VVRkJOMFFzU1VGQmRVVXNWVUZCZWtVc1EwRkJSaXhGUVVGMVJpOURMRVZCUVVWdlpTeE5RVUZHTEVOQlFWTXhWeXhEUVVGVUxFTkJRWFJITEVOQlFTOUhMRVZCUVd0UFNpeEZRVUZGZWtZc1RVRkJSaXhMUVVGWGVVWXNSVUZCUlN4RFFVRkdMRVZCUVV0cFRTeExRVUZNTEVOQlFWZHhUQ3hQUVVGWUxFZEJRVzFDTVdVc1MwRkJTekpXTEVkQlFVd3NRMEZCVXl4RFFVRkRkbFVzUTBGQlZpeEZRVUZaTEVOQlFWb3NRMEZCT1VJc1EwRkJiRThzUlVGQloxSnZSeXhGUVVGRk4wWXNUVUZCUml4TFFVRlhOa1lzUlVGQlJTeERRVUZHTEVWQlFVczJUQ3hMUVVGTUxFTkJRVmR4VEN4UFFVRllMRWRCUVcxQ01XVXNTMEZCU3pKV0xFZEJRVXdzUTBGQlUzWlZMRU5CUVZRc1JVRkJWeXhEUVVGWUxFTkJRVGxDTEVOQlFXaFNPMEZCUVRaVU8wRkJRVU1zYVVKQlFVZHFRaXhGUVVGRk5GSXNUMEZCUml4RFFVRlZUU3hIUVVGV0xFTkJRV01zUlVGQlF5dzBRa0ZCTWtJc1kwRkJXV3hUTEVWQlFVVTJWU3hKUVVGR0xFZEJRVThzUTBGQmJrSXNSMEZCY1VJc1NVRkJha1FzUlVGQmMwUXNlVUpCUVhkQ0xHTkJRVmszVlN4RlFVRkZObFVzU1VGQlJpeEhRVUZQTEVOQlFXNUNMRWRCUVhGQ0xFbEJRVzVITEVWQlFYZEhMSGRDUVVGMVFpeGpRVUZaTjFVc1JVRkJSVFpWTEVsQlFVWXNSMEZCVHl4RFFVRnVRaXhIUVVGeFFpeEpRVUZ3U2l4RlFVRjVTaXh2UWtGQmJVSXNZMEZCV1RkVkxFVkJRVVUyVlN4SlFVRkdMRWRCUVU4c1EwRkJia0lzUjBGQmNVSXNTVUZCYWswc1JVRkJaQ3hIUVVGelRqZFZMRVZCUVVWRExFMUJRVVlzUTBGQlUyZEtMRWxCUVZRc1EwRkJZME1zVFVGQmRrOHNSVUZCT0U4c1NVRkJSMnhLTEVWQlFVVXdReXhaUVVGR0xFVkJRVWdzUlVGQmIwSnFSQ3hGUVVGRk1rZ3NVMEZCUml4RFFVRlpMSFZDUVVGeFFuQklMRVZCUVVWblJTeExRVUZHTEVkQlFWRXNRMEZCVWl4SFFVRlZhRVVzUlVGQlJVTXNUVUZCUml4RFFVRlRaMG9zU1VGQlZDeERRVUZqUlN4WlFVRTNReXhKUVVFeVJDeE5RVUV6UkN4SFFVRnJSU3hEUVVGRGJrb3NSVUZCUldkRkxFdEJRVWdzUjBGQlV5eERRVUV6UlN4SFFVRTJSU3g1UTBGQk4wVXNSMEZCZFVob1JTeEZRVUZGUXl4TlFVRkdMRU5CUVZOblNpeEpRVUZVTEVOQlFXTkhMRmRCUVhKSkxFZEJRV2xLTEVkQlFUZEtMRVZCUVhCQ0xFdEJRVEJNTzBGQlFVTXNhMEpCUVVrMVFpeEpRVUZGTTBnc1MwRkJTM2xHTEVkQlFVd3NRMEZCVTNCRkxFTkJRVlFzU1VGQldTeExRVUZIY2tJc1MwRkJTME1zUzBGQlRDeERRVUZYUkN4TFFVRkxlVVlzUjBGQlRDeERRVUZUY0VVc1EwRkJWQ3hKUVVGWkxFVkJRWFpDTEVOQlFYSkNPMEZCUVVFc2EwSkJRV2RFWjFBc1NVRkJSU3hQUVVGTGNsRXNTMEZCU3pabExFZEJRVXdzUTBGQlV5eEpRVUZGYkZnc1EwRkJSaXhIUVVGSk0wZ3NTMEZCU3pSaUxFVkJRVlFzUjBGQldTeEhRVUZ5UWl4SlFVRXdRaXhEUVVFeFFpeEhRVUUwUWpWaUxFdEJRVXM0WlN4SFFVRk1MRU5CUVZNc1NVRkJSVzVZTEVOQlFVWXNSMEZCU1ROSUxFdEJRVXMwWWl4RlFVRlVMRWRCUVZrc1IwRkJja0lzU1VGQk1FSXNRMEZCTTBRc1EwRkJiRVE3UVVGQlFTeHJRa0ZCWjBoMFRDeEpRVUZGYmxFc1JVRkJSVU1zVFVGQlJpeERRVUZUWjBvc1NVRkJWQ3hEUVVGalJ5eFhRVUZvU1R0QlFVRkJMR3RDUVVFMFNXZElMRWxCUVVWd1VTeEZRVUZGUXl4TlFVRkdMRU5CUVZOblNpeEpRVUZVTEVOQlFXTkhMRmRCUVdRc1IwRkJNRUk0Unl4RFFVRjRTenRCUVVGQkxHdENRVUV3UzBrc1NVRkJSWFJSTEVWQlFVVkRMRTFCUVVZc1EwRkJVMmRLTEVsQlFWUXNRMEZCWTBVc1dVRkJNVXdzUTBGQmRVMHhTaXhGUVVGRk1rZ3NVMEZCUml4RFFVRlpMR0ZCUVZjclNTeERRVUZZTEVkQlFXRXNUMEZCWWl4SFFVRnhRa01zUTBGQmNrSXNSMEZCZFVJc2NVSkJRWFpDTEVsQlFUaERjRkVzUlVGQlJXbEZMRTFCUVVZc1IwRkJVeXhEUVVGVUxFZEJRVmR4VFN4RFFVRjZSQ3hKUVVFMFJDeE5RVUUxUkN4SFFVRnRSU3hEUVVGRGRGRXNSVUZCUldsRkxFMUJRVWdzUjBGQlZTeERRVUZXTEVkQlFWbHRUU3hEUVVFdlJTeEhRVUZwUml4eFFrRkJOMFk3UVVGQmIwZ3NhVUpCUVVsSExFbEJRVVYyVVN4RlFVRkZOR1VzVVVGQlJpeEpRVUZaTldVc1JVRkJSVFpsTEZkQlFXUXNSMEZCTUVJc1EwRkJRemRsTEVWQlFVVTJWU3hKUVVGSUxFZEJRVkVzUTBGQmJFTXNSMEZCYjBNc1EwRkJNVU1zUTBGQk5FTTNWU3hGUVVGRk5GSXNUMEZCUml4RFFVRlZlRXNzVTBGQlZpeERRVUZ2UWl4MVFrRkJjVUp0U2l4RFFVRnlRaXhIUVVGMVFpeGpRVUYyUWl4SlFVRjFRM1pSTEVWQlFVVXdReXhaUVVGR0xFdEJRV2xDTEVOQlFXcENMRWRCUVcxQ2VFSXNRMEZCTVVRc1NVRkJOa1FzWlVGQk4wUXNTVUZCT0VWc1FpeEZRVUZGTUVNc1dVRkJSaXhMUVVGcFFpeERRVUZEZUVJc1EwRkJiRUlzUjBGQmIwSXNRMEZCYkVjc1NVRkJjVWNzVFVGQmVrZzdRVUZCYVVrc1YwRkJkbnBGTEVWQlFYZDZSWGRpTEdWQlFXTXNkVUpCUVZOc1pDeERRVUZVTEVWQlFWYzdRVUZCUTFFc1kwRkJSVWNzVFVGQlJpeERRVUZUTWxjc1ZVRkJWQ3hEUVVGdlFuUllMRU5CUVhCQ0xFVkJRWFZDZFZNc1NVRkJka0lzUTBGQk5FSXNPRWRCUVRWQ0xFVkJRVFJKSzBVc1ZVRkJOVWtzUTBGQmRVcDBXQ3hEUVVGMlNpeEhRVUV3U2xFc1JVRkJSVU1zVFVGQlJpeERRVUZUWjBvc1NVRkJWQ3hEUVVGalF5eE5RVUZrTEVsQlFYTkNMRU5CUVVOc1NpeEZRVUZGTUVNc1dVRkJSaXhGUVVGMlFpeEpRVUY1UXpGRExFVkJRVVZ2UkN4VFFVRkdMRU5CUVZreVR5eEpRVUZhTEVOQlFXbENMSEZDUVVGcVFpeEZRVUYzUXl0RkxGVkJRWGhETEVOQlFXMUVkRmdzUTBGQmJrUXNRMEZCYmswN1FVRkJlVkFzVjBGQk0ydEdMRVZCUVRsdFJTeEZRVUV5Y2twcFNpeFhRVUZWTEVWQlFVTnJWU3hqUVVGaExIZENRVUZWTzBGQlFVTXNhVUpCUVVrc1NVRkJTV3hrTEVsQlFVVlBMRVZCUVVWMVV5eFRRVUZTTEVWQlFXdENjbElzU1VGQlJXeENMRVZCUVVVd1F5eFpRVUZHTEV0QlFXbENMRU5CUVVOcVJDeERRVUZFTEVkQlFVZFBMRVZCUVVWblJTeExRVUZHTEVkQlFWRXNRMEZCTlVJc1IwRkJPRUlzUTBGQlEzWkZMRU5CUVVRc1IwRkJSMDhzUlVGQlJXbEZMRTFCUVVZc1IwRkJVeXhEUVVFNVJDeEZRVUZuUlhaRkxFbEJRVVZOTEVWQlFVVXdReXhaUVVGR0xFdEJRV2xDTVVNc1JVRkJSVU1zVFVGQlJpeERRVUZUZDBrc1UwRkJWQ3hEUVVGdFFrTXNUVUZCY0VNc1IwRkJNa01zUTBGQlF6RkpMRVZCUVVWRExFMUJRVVlzUTBGQlUzZEpMRk5CUVZRc1EwRkJiVUpETEUxQlFXcEpMRVZCUVhkSkwwa3NTVUZCUlVzc1JVRkJSVU1zVFVGQlJpeERRVUZUZDBrc1UwRkJWQ3hEUVVGdFFrY3NTMEZCTjBvc1JVRkJiVXRvU2l4SlFVRkZMRU5CUVhKTExFVkJRWFZMUnl4SlFVRkZReXhGUVVGRlJ5eE5RVUZHTEVOQlFWTnhRaXhOUVVGMFRDeEZRVUUyVERWQ0xFbEJRVVZITEVOQlFTOU1MRVZCUVdsTlNDeEhRVUZxVFN4RlFVRnhUVHRCUVVGRExHdENRVUZKY1VJc1NVRkJSV3BDTEVWQlFVVkhMRTFCUVVZc1EwRkJVME1zUlVGQlZDeERRVUZaVWl4RFFVRmFMRU5CUVU0N1FVRkJRU3hyUWtGQmNVSTJRaXhKUVVGRmVrSXNSVUZCUldkV0xHVkJRVVlzUTBGQmEwSndWaXhEUVVGc1FpeERRVUYyUWp0QlFVRkJMR3RDUVVFMFEzbERMRWxCUVVWd1FpeEZRVUZGTEVOQlFVWXNSVUZCU3paVkxHbENRVUZ1UkR0QlFVRkJMR3RDUVVGeFJYaFNMRWxCUVVVc1EwRkJRM0JFTEVsQlFVVnRRaXhEUVVGR0xFZEJRVWxhTEVsQlFVVXNRMEZCVUN4SlFVRlZRU3hEUVVGV0xFZEJRVmw2UWl4RlFVRkZReXhOUVVGR0xFTkJRVk4zU1N4VFFVRlVMRU5CUVcxQ1NTeFJRVUYwUnp0QlFVRkJMR3RDUVVFclIzcEVMRWxCUVVWd1JpeEZRVUZGTUVNc1dVRkJSaXhMUVVGcFFtaEVMRWxCUVVVMFJTeERRVUZ1UWl4SFFVRnhRaXhEUVVGMFNUdEJRVUZCTEd0Q1FVRjNTVEpETEVsQlFVVnFTQ3hGUVVGRk1FTXNXVUZCUml4TFFVRnBRaXhEUVVGcVFpeEhRVUZ0UW1oRUxFbEJRVVUwUlN4RFFVRXZTanRCUVVGQkxHdENRVUZwU3l0RExFbEJRVVVzUTBGQlF6RklMRU5CUVVRc1IwRkJSMFVzUzBGQlMzbEdMRWRCUVV3c1EwRkJVMmhDTEVOQlFWUXNRMEZCZEVzN1FVRkJRU3hyUWtGQmEweHJSQ3hKUVVGRmVFZ3NSVUZCUlRCRExGbEJRVVlzUzBGQmFVSXNRMEZCYWtJc1IwRkJiVUl4UXl4RlFVRkZReXhOUVVGR0xFTkJRVk4zU1N4VFFVRlVMRU5CUVcxQ1JTeFBRVUZ1UWl4SFFVRXlRbkpGTEVOQlFXeFBPMEZCUVVFc2EwSkJRVzlQTkV3c1NVRkJSV3hSTEVWQlFVVXdReXhaUVVGR0xFdEJRV2xDTVVNc1JVRkJSVU1zVFVGQlJpeERRVUZUZDBrc1UwRkJWQ3hEUVVGdFFrVXNUMEZCYmtJc1IwRkJNa0p5UlN4RFFVRTFReXhIUVVFNFF5eERRVUZ3VWl4RFFVRnpVbnBGTEV0QlFVdDVSaXhIUVVGTUxFTkJRVk0wU3l4RFFVRlVMRWxCUVZrc1NVRkJXaXhMUVVGdFFrRXNTVUZCUlN4RFFVRnlRaXhIUVVGM1FuSlJMRXRCUVV0NVJpeEhRVUZNTEVOQlFWTnJReXhEUVVGVUxFbEJRVmtzU1VGQldpeExRVUZ0UWtFc1NVRkJSU3hEUVVGeVFpeERRVUY0UWl4RlFVRm5SRE5JTEV0QlFVdDVSaXhIUVVGTUxFTkJRVk1yUWl4RFFVRlVMRWxCUVZrc1NVRkJXaXhMUVVGdFFrRXNTVUZCUlN4RFFVRnlRaXhEUVVGb1JDeEZRVUYzUlhoSUxFdEJRVXQ1Uml4SFFVRk1MRU5CUVZOR0xFTkJRVlFzU1VGQldTeEpRVUZhTEV0QlFXMUNRU3hKUVVGRkxFTkJRWEpDTEVOQlFYaEZMRVZCUVdkSGRrWXNTMEZCUzNsR0xFZEJRVXdzUTBGQlV6SkNMRU5CUVZRc1NVRkJXU3hKUVVGYUxFdEJRVzFDUVN4SlFVRkZMRU5CUVhKQ0xFTkJRV2hITEVOQlFYZElMRWxCUVVsclNpeEpRVUZGTEdsQ1FVRmxSQ3hEUVVGbUxFZEJRV2xDTEV0QlFXcENMRWRCUVhWQ01Va3NRMEZCZGtJc1IwRkJlVUlzUzBGQmVrSXNSMEZCSzBKSUxFTkJRUzlDTEVkQlFXbERMR1ZCUVdwRExFZEJRV2xFU2l4RFFVRnFSQ3hIUVVGdFJDeGxRVUZ1UkN4SFFVRnRSVGRDTEVOQlFXNUZMRWRCUVhGRkxFMUJRVE5GTEVOQlFXdEdMRWxCUVVkdVJTeEZRVUZGYlVjc1UwRkJSaXhEUVVGWkswa3NRMEZCV2l4SFFVRmxiRkFzUlVGQlJTeERRVUZHTEVWQlFVdHBVeXhMUVVGTUxFTkJRVmR6VEN4TlFVRllMRWRCUVd0Q0xFbEJRVVV6WlN4TFFVRkxlVVlzUjBGQlRDeERRVUZUZWtZc1MwRkJTelJsTEV0QlFVd3NRMEZCVjI1aExFTkJRVmdzUTBGQlZDeERRVUZ1UXl4RlFVRXlSSFJGTEVWQlFVVkRMRTFCUVVZc1EwRkJVM2RKTEZOQlFWUXNRMEZCYlVKTExGbEJRV3BHTEVWQlFUaEdPMEZCUVVNc2IwSkJRVWx6U0N4SlFVRkZjRkVzUlVGQlJUQkRMRmxCUVVZc1MwRkJhVUo2UWl4RlFVRkZPRkVzU1VGQlJpeERRVUZQTERKQ1FVRlFMRU5CUVdwQ0xFZEJRWEZFT1ZFc1JVRkJSVGhSTEVsQlFVWXNRMEZCVHl3d1FrRkJVQ3hEUVVFelJEdEJRVUZCTEc5Q1FVRTRSbnBDTEVsQlFVVjBVU3hGUVVGRk1FTXNXVUZCUml4TFFVRnBRbnBDTEVWQlFVVTRVU3hKUVVGR0xFTkJRVThzTkVKQlFWQXNRMEZCYWtJc1IwRkJjMFE1VVN4RlFVRkZPRkVzU1VGQlJpeERRVUZQTERaQ1FVRlFMRU5CUVhSS0xFTkJRVFJNTEUxQlFVa3pRaXhGUVVGRk5VOHNUVUZCVGl4TFFVRmxORThzU1VGQlJUVlJMRVZCUVVVc2MwTkJRVzlEVVN4RlFVRkZNRU1zV1VGQlJpeExRVUZwUWl4TlFVRnFRaXhIUVVGM1FpeExRVUUxUkN4SlFVRnRSU3hWUVVGeVJTeERRVUZHTEVWQlFXMUdla0lzUlVGQlJUaGpMRTFCUVVZc1EwRkJVek5PTEVOQlFWUXNRMEZCYkVjc1IwRkJLMGNzVFVGQlNVVXNSVUZCUlRsUExFMUJRVTRzUzBGQlpUaFBMRWxCUVVVNVVTeEZRVUZGTEhORFFVRnZRMUVzUlVGQlJUQkRMRmxCUVVZc1MwRkJhVUlzVDBGQmFrSXNSMEZCZVVJc1VVRkJOMFFzU1VGQmRVVXNWVUZCZWtVc1EwRkJSaXhGUVVGMVJucENMRVZCUVVVNFl5eE5RVUZHTEVOQlFWTjZUaXhEUVVGVUxFTkJRWFJITEVOQlFTOUhMRVZCUVd0UFJpeEZRVUZGTlU4c1RVRkJSaXhMUVVGWE5FOHNSVUZCUlN4RFFVRkdMRVZCUVVzNFF5eExRVUZNTEVOQlFWZHhUQ3hQUVVGWUxFZEJRVzFDYW1Fc1NVRkJSU3hEUVVGR0xFZEJRVWxCTEVOQlFVb3NSMEZCVFN4RFFVRndReXhEUVVGc1R5eEZRVUY1VVdkTkxFVkJRVVU1VHl4TlFVRkdMRXRCUVZjNFR5eEZRVUZGTEVOQlFVWXNSVUZCU3pSRExFdEJRVXdzUTBGQlYzRk1MRTlCUVZnc1IwRkJiVUlzUTBGQlEycGhMRU5CUVVRc1IwRkJSeXhEUVVGSUxFZEJRVXNzUTBGQlEwRXNRMEZCVGl4SFFVRlJMRU5CUVhSRExFTkJRWHBSTzBGQlFXdFVPMEZCUVVNc2FVSkJRVWQwUlN4RlFVRkZjVmtzVDBGQlJpeERRVUZWUXl4RlFVRmlMRVZCUVdkQ08wRkJRVU4wV1N4blFrRkJSVFJTTEU5QlFVWXNRMEZCVlN4RFFVRldMRVZCUVdGelFpeExRVUZpTEVOQlFXMUNORXdzYVVKQlFXNUNMRWRCUVhGRE5XUXNTVUZCUlN4UlFVRjJRenRCUVVGblJEdEJRVUZETEZkQlFTOHdReXhGUVVGbk1VTjNZaXhsUVVGakxIVkNRVUZUYkdRc1EwRkJWQ3hGUVVGWE8wRkJRVU5STEdOQlFVVkhMRTFCUVVZc1EwRkJVekpYTEZWQlFWUXNRMEZCYjBKMFdDeERRVUZ3UWl4RlFVRjFRblZUTEVsQlFYWkNMRU5CUVRSQ0xEaEhRVUUxUWl4RlFVRTBTU3RGTEZWQlFUVkpMRU5CUVhWS2RGZ3NRMEZCZGtvN1FVRkJNRW9zVjBGQmNHZEVMRVZCUVhKelNpeEZRVUV2YjJZc1JVRkJNakZ5UWxFc1JVRkJSWGxITEVsQlFVWXNSMEZCVHl4RlFVRkRjMWtzYjBKQlFXMUNMRU5CUVVNc1EwRkJja0lzUlVGQmRVSkRMR3RDUVVGcFFpd3dRa0ZCVTNabUxFTkJRVlFzUlVGQlYzbENMRU5CUVZnc1JVRkJZVHRCUVVGRExHTkJRVWNzUzBGQlN5eERRVUZNTEV0QlFWTjZRaXhEUVVGVUxFdEJRV0VzUzBGQlN5eERRVUZNTEV0QlFWTjVRaXhEUVVGVUxFdEJRV0ZCTEVsQlFVVXNRMEZCUXl4RFFVRm9RaXhIUVVGdFFpeE5RVUZKYkVJc1JVRkJSVWNzVFVGQlJpeERRVUZUY1VJc1RVRkJOME1zUTBGQlNDeEZRVUYzUkR0QlFVRkRMR2RDUVVGSk9VSXNTVUZCUlUwc1JVRkJSVWNzVFVGQlJpeERRVUZUUXl4RlFVRlVMRU5CUVZsWUxFTkJRVm9zUTBGQlRqdEJRVUZCTEdkQ1FVRnhRa1VzU1VGQlJVUXNSVUZCUlhGVExFbEJRVVlzUTBGQlR5eE5RVUZKTDFJc1JVRkJSVU1zVFVGQlJpeERRVUZUYVZBc1owSkJRV0lzUjBGQk9FSXNVVUZCT1VJc1IwRkJkVU5zVUN4RlFVRkZReXhOUVVGR0xFTkJRVk50VUN4eFFrRkJhRVFzUjBGQmMwVXNVMEZCZEVVc1IwRkJaMFp3VUN4RlFVRkZReXhOUVVGR0xFTkJRVk5yVUN4elFrRkJla1lzUjBGQlowZ3NSMEZCZGtnc1EwRkJka0lzUTBGQmJVb3NRMEZCUTNwUUxFVkJRVVU0Vnl4UlFVRkdMRU5CUVZkNFZ5eEZRVUZGUXl4TlFVRkdMRU5CUVZOcFVDeG5Ra0ZCY0VJc1EwRkJSQ3hKUVVGM1EzaFFMRVZCUVVVNFZ5eFJRVUZHTEVOQlFWZDRWeXhGUVVGRlF5eE5RVUZHTEVOQlFWTnRVQ3h4UWtGQmNFSXNRMEZCZUVNc1NVRkJiMFl4VUN4RlFVRkZPRmNzVVVGQlJpeERRVUZYZUZjc1JVRkJSVU1zVFVGQlJpeERRVUZUYTFBc2MwSkJRWEJDTEVOQlFYQkdMRXRCUVd0SmVGQXNTVUZCUlVFc1JVRkJSWE5tTEVkQlFVWXNRMEZCVFhabUxFVkJRVVVzUTBGQlJpeERRVUZPTEVOQlFYQkpMRWRCUVdsS0xFMUJRVWxETEVWQlFVVTJRaXhOUVVGT0xFbEJRV00zUWl4RlFVRkZORUlzU1VGQlJpeERRVUZQTEZsQlFWVTdRVUZCUXl4clFrRkJTVGxDTEVsQlFVVkVMRVZCUVVVc1NVRkJSaXhEUVVGT0xFTkJRV05ETEVWQlFVVjFVeXhSUVVGR0xFTkJRVmRvVXl4RlFVRkZReXhOUVVGR0xFTkJRVk5yVUN4elFrRkJjRUlzUlVGQk5FTXNTVUZCU1hoUUxFbEJRVVZHTEVWQlFVVmhMRWxCUVVZc1EwRkJUeXhwUWtGQlVDeERRVUZPTzBGQlFVRXNhMEpCUVdkRFZpeEpRVUZGU0N4RlFVRkZZU3hKUVVGR0xFTkJRVThzVlVGQlVDeERRVUZzUXp0QlFVRkJMR3RDUVVGeFJGQXNTVUZCUlU0c1JVRkJSV0VzU1VGQlJpeERRVUZQTEdGQlFWQXNRMEZCZGtRN1FVRkJRU3hyUWtGQk5rVlhMRWxCUVVWNFFpeEZRVUZGWVN4SlFVRkdMRU5CUVU4c1dVRkJVQ3hEUVVFdlJTeERRVUZ2UjA0c1JVRkJSWE5VTEZOQlFVWXNRMEZCV1RkVUxFVkJRVVVzUTBGQlJpeERRVUZhTEVWQlFXbENSeXhMUVVGSFJDeERRVUZ3UWl4RlFVRnpRa2tzUTBGQmRFSXNSVUZCZDBKclFpeERRVUY0UWl4RlFVRXdRaXhEUVVGRExFTkJRVE5DTEVWQlFUWkNMRmxCUVZVN1FVRkJReXh2UWtGQlJ5eExRVUZMTEVOQlFVd3NTMEZCVTJwQ0xFTkJRVlFzU1VGQldTeFRRVUZQUVN4RFFVRnVRaXhKUVVGelFrRXNRMEZCZWtJc1JVRkJNa0k3UVVGQlF5eHpRa0ZCUjB3c1MwRkJSMFlzUlVGQlJYbFRMRWRCUVVZc1EwRkJUU3hyUWtGQlRpeEZRVUY1UWl4VlFVRlJkbE1zUTBGQlVpeEhRVUZWTEVsQlFXNURMRWRCUVhsRFJpeEZRVUZGZVdVc1ZVRkJSaXhEUVVGaExHbENRVUZpTEVOQlFUVkRMRXRCUVRoRmJtVXNUVUZCU1U0c1JVRkJSV0VzU1VGQlJpeERRVUZQTEZGQlFWQXNSVUZCWjBKUUxFTkJRV2hDTEVkQlFXMUNUaXhGUVVGRmVXVXNWVUZCUml4RFFVRmhMR0ZCUVdJc1EwRkJka0lzUjBGQmIwUnFaQ3hOUVVGSmVFSXNSVUZCUldFc1NVRkJSaXhEUVVGUExFOUJRVkFzUlVGQlpWY3NRMEZCWml4SFFVRnJRbmhDTEVWQlFVVjVaU3hWUVVGR0xFTkJRV0VzV1VGQllpeERRVUYwUWl4RFFVRndSQ3hGUVVGelIzUmxMRTFCUVVsSUxFVkJRVVZoTEVsQlFVWXNRMEZCVHl4TFFVRlFMRVZCUVdGV0xFTkJRV0lzUjBGQlowSklMRVZCUVVWNVpTeFZRVUZHTEVOQlFXRXNWVUZCWWl4RFFVRndRaXhEUVVGd1RDeEhRVUZ0VDNwbExFVkJRVVYxVXl4UlFVRkdMRU5CUVZkb1V5eEZRVUZGUXl4TlFVRkdMRU5CUVZOdFVDeHhRa0ZCY0VJc1JVRkJNa01yUnl4WFFVRXpReXhEUVVGMVJHNVhMRVZCUVVWRExFMUJRVVlzUTBGQlUydFFMSE5DUVVGb1JTeERRVUZ1VHl4RlFVRXlWSHBRTEVWQlFVVnhVeXhKUVVGR0xFTkJRVThzVFVGQlNTOVNMRVZCUVVWRExFMUJRVVlzUTBGQlUyOVFMR3RDUVVGaUxFZEJRV2RETEV0QlFXaERMRWRCUVhORGNsQXNSVUZCUlVNc1RVRkJSaXhEUVVGVGMxQXNZMEZCZEVRc1JVRkJjMFYxVHl4TlFVRjBSU3hGUVVFelZDeEZRVUV3V1Rsa0xFVkJRVVZETEUxQlFVWXNRMEZCVTFFc1NVRkJWQ3hKUVVGbFV5eERRVUUxV2l4RlFVRTRXanRCUVVGRExIZENRVUZKTVVJc1NVRkJSVVVzUlVGQlJWa3NTVUZCUml4RFFVRlBMSGxDUVVGUUxFTkJRVTRzUTBGQmQwTXNTVUZCUjFvc1JVRkJSVGhYTEZGQlFVWXNRMEZCVjNoWExFVkJRVVZETEUxQlFVWXNRMEZCVTJ0UExHMUNRVUZ3UWl4RFFVRklMRVZCUVRSRE8wRkJRVU1zTUVKQlFVa3hUU3hKUVVGRmVrSXNSVUZCUlRSU0xFOUJRVVlzUTBGQlZVTXNVVUZCVml4RFFVRnRRaXdyUWtGQk5rSnlVeXhEUVVFM1FpeEhRVUVyUWl4VlFVRXZRaXhIUVVFd1ExRXNSVUZCUlVNc1RVRkJSaXhEUVVGVGEwOHNiVUpCUVc1RUxFZEJRWFZGTEVkQlFURkdMRU5CUVU0c1EwRkJjVWR1VHl4RlFVRkZlVWNzU1VGQlJpeERRVUZQZFZrc1owSkJRVkFzUTBGQmQwSjJaQ3hGUVVGRmJWWXNTMEZCUml4RlFVRjRRaXhGUVVGclF5eERRVUZETEVOQlFXNURPMEZCUVhORExIRkNRVUY0VEN4TlFVRTBURHRCUVVGRExEQkNRVUZKZGxVc1NVRkJSWEpETEVWQlFVVTBVaXhQUVVGR0xFTkJRVlZETEZGQlFWWXNRMEZCYlVJc1RVRkJTVGRTTEVWQlFVVkRMRTFCUVVZc1EwRkJVMnRQTEcxQ1FVRmlMRWRCUVdsRExEUkNRVUZxUXl4SFFVRTRSRE5QTEVOQlFUbEVMRWRCUVdkRkxFbEJRVzVHTEVOQlFVNHNRMEZCSzBaUkxFVkJRVVY1Unl4SlFVRkdMRU5CUVU5MVdTeG5Ra0ZCVUN4RFFVRjNRak5qTEVWQlFVVjFWU3hMUVVGR0xFVkJRWGhDTEVWQlFXdERMRU5CUVVNc1EwRkJia003UVVGQmMwTTdRVUZCUXl4eFFrRkJSV2hYTEVsQlFVWXNRMEZCVHl4clFrRkJVQ3hGUVVFd1Fsb3NRMEZCTVVJc1JVRkJORUpPTEVWQlFVVXNRMEZCUml4RFFVRTFRaXhGUVVGcFEwUXNSVUZCUlN4RFFVRkdMRU5CUVdwRE8wRkJRWFZETzBGQlFVTXNaVUZCZEROQ0xFZEJRWGN6UWs4c1JVRkJSVmtzU1VGQlJpeERRVUZQTEdsQ1FVRlFMRVZCUVhsQ1dpeERRVUY2UWl4RlFVRXlRazRzUlVGQlJTeERRVUZHTEVOQlFUTkNMRVZCUVdkRFJDeEZRVUZGTEVOQlFVWXNRMEZCYUVNc1EwRkJlRE5DTzBGQlFUZzFRaXhoUVVFNWEwTXNRMEZCTDBvN1FVRkJLM1ZETzBGQlFVTXNVMEZCYkM5RExFVkJRVzB2UTJsSUxFMUJRVXNzWjBKQlFWVTdRVUZCUXl4alFVRkpha2dzUTBGQlNqdEJRVUZCTEdOQlFVMTVRaXhKUVVGRmJFSXNSVUZCUlVNc1RVRkJSaXhEUVVGVGQwc3NZVUZCYWtJc1EwRkJLMElzU1VGQlJ5eFhRVUZUZGtvc1EwRkJWQ3hMUVVGaFFTeEpRVUZGTEVOQlFXWXNSMEZCYTBKc1FpeEZRVUZGZVVjc1NVRkJSaXhEUVVGUGMxa3NhMEpCUVZBc1MwRkJORUl2WlN4RlFVRkZlVWNzU1VGQlJpeERRVUZQYzFrc2EwSkJRVkFzUjBGQk1FSXNRMEZCUXl4RFFVRjJSQ3hEUVVGc1FpeEZRVUUwUlM5bExFVkJRVVZETEUxQlFVWXNRMEZCVXpKTkxIRkNRVUY0Uml4RlFVRTRSelZOTEVWQlFVVTBVaXhQUVVGR0xFTkJRVlZETEZGQlFWWXNRMEZCYlVJc1RVRkJTVGRTTEVWQlFVVkRMRTFCUVVZc1EwRkJVMmxQTEdsQ1FVRm9ReXhGUVVGdFJETk5MRWxCUVc1RUxFTkJRWGRFTEZsQlFWVTdRVUZCUTNaQ0xHTkJRVVY1Unl4SlFVRkdMRU5CUVU5MVdTeG5Ra0ZCVUN4RFFVRjNRbmhtTEVWQlFVVXNTVUZCUml4RlFVRlJiMWdzUzBGQlVpeEZRVUY0UWp0QlFVRjVReXhYUVVFMVJ5eEZRVUU1Unl4TFFVRnBUeXhKUVVGSE1WWXNTVUZCUlN4RFFVRk1MRVZCUVU4c1MwRkJTWHBDTEVsQlFVVlBMRVZCUVVWTExGZEJRVklzUlVGQmIwSmFMRWxCUVVWUExFVkJRVVZMTEZkQlFVWXNSMEZCWTJFc1EwRkJjRU1zUlVGQmMwTjZRaXhIUVVGMFF6dEJRVUV3UTA4c1kwRkJSVWNzVFVGQlJpeERRVUZUVml4RFFVRlVMRXRCUVdGUExFVkJRVVY1Unl4SlFVRkdMRU5CUVU5MVdTeG5Ra0ZCVUN4RFFVRjNRblptTEVOQlFYaENMRU5CUVdJN1FVRkJNVU1zVjBGQlVDeE5RVUU0Ums4c1JVRkJSWGxITEVsQlFVWXNRMEZCVDNWWkxHZENRVUZRTEVOQlFYZENhR1lzUlVGQlJVc3NWMEZCTVVJc1JVRkJkVU1zU1VGQlIwd3NSVUZCUlVNc1RVRkJSaXhEUVVGVFowNHNjVUpCUVZvc1JVRkJhME1zU1VGQlJ5OU1MRWxCUVVVc1EwRkJSaXhKUVVGTGJFSXNSVUZCUlVNc1RVRkJSaXhEUVVGVGFVNHNNa0pCUVZRc1NVRkJjME5zVGl4RlFVRkZReXhOUVVGR0xFTkJRVk5wVGl3eVFrRkJWQ3hIUVVGeFF5eERRVUZ1Uml4RlFVRnhSanRCUVVGRExHZENRVUZKZUU0c1NVRkJSVTBzUlVGQlJVTXNUVUZCUml4RFFVRlRhVTRzTWtKQlFXWTdRVUZCUVN4blFrRkJNa04yVGl4SlFVRkZkVUlzUTBGQk4wTTdRVUZCUVN4blFrRkJLME4wUWl4SlFVRkZReXhMUVVGTGRWZ3NSMEZCVEN4RFFVRlRjRmdzUlVGQlJVc3NWMEZCUml4SFFVRmpWaXhEUVVGa0xFZEJRV2RDUlN4TFFVRkxNbFlzUjBGQlRDeERRVUZUT1ZZc1EwRkJWQ3hGUVVGWFF5eERRVUZZTEVOQlFYcENMRVZCUVhWRFN5eEZRVUZGUnl4TlFVRkdMRU5CUVZOeFFpeE5RVUZvUkN4RFFVRnFSRHRCUVVGQkxHZENRVUY1UjNwQ0xFbEJRVVZHTEV0QlFVc3lWaXhIUVVGTUxFTkJRVk40Vml4RlFVRkZTeXhYUVVGR0xFZEJRV05TTEV0QlFVc3lWaXhIUVVGTUxFTkJRVk0zVml4RFFVRlVMRVZCUVZkRUxFTkJRVmdzUTBGQmRrSXNSVUZCY1VNc1EwRkJja01zUTBGQk0wY3NRMEZCYlVvc1MwRkJTVVFzU1VGQlJVOHNSVUZCUlVzc1YwRkJSaXhIUVVGallTeERRVUZ3UWl4RlFVRnpRbnBDTEVsQlFVVkhMRU5CUVhoQ0xFVkJRVEJDU0N4SFFVRXhRanRCUVVFNFFrOHNaMEpCUVVWSExFMUJRVVlzUTBGQlUxWXNRMEZCVkN4TFFVRmhUeXhGUVVGRmVVY3NTVUZCUml4RFFVRlBkVmtzWjBKQlFWQXNRMEZCZDBKMlppeERRVUY0UWl4RFFVRmlPMEZCUVRsQ0xHRkJRWE5GTEV0QlFVbEJMRWxCUVVWTkxFTkJRVTRzUlVGQlVVNHNTVUZCUlU4c1JVRkJSVXNzVjBGQldpeEZRVUYzUWxvc1IwRkJlRUk3UVVGQk5FSlBMR2RDUVVGRlJ5eE5RVUZHTEVOQlFWTldMRU5CUVZRc1MwRkJZVThzUlVGQlJYbEhMRWxCUVVZc1EwRkJUM1ZaTEdkQ1FVRlFMRU5CUVhkQ2RtWXNRMEZCZUVJc1EwRkJZanRCUVVFMVFqdEJRVUZ2UlN4WFFVRnVXQ3hOUVVGMVdEdEJRVUZETEdkQ1FVRkpkMElzU1VGQlJXcENMRVZCUVVVMFVpeFBRVUZHTEVOQlFWVkRMRkZCUVZZc1EwRkJiVUlzVFVGQlNUZFNMRVZCUVVWRExFMUJRVVlzUTBGQlUyMVBMR05CUVdoRExFTkJRVTRzUTBGQmMwUnVUaXhGUVVGRlR5eE5RVUZHTEVkQlFWTXNRMEZCVkN4SlFVRlplRUlzUlVGQlJYbEhMRWxCUVVZc1EwRkJUM1ZaTEdkQ1FVRlFMRU5CUVhkQ0wyUXNSVUZCUlRKV0xFdEJRVVlzUlVGQmVFSXNRMEZCV2l4RFFVRXJReXhKUVVGSmJsWXNTVUZCUlhwQ0xFVkJRVVUwVWl4UFFVRkdMRU5CUVZWRExGRkJRVllzUTBGQmJVSXNUVUZCU1RkU0xFVkJRVVZETEUxQlFVWXNRMEZCVTNGUExHTkJRV2hETEVOQlFVNHNRMEZCYzBRM1RTeEZRVUZGUkN4TlFVRkdMRWRCUVZNc1EwRkJWQ3hKUVVGWmVFSXNSVUZCUlhsSExFbEJRVVlzUTBGQlQzVlpMR2RDUVVGUUxFTkJRWGRDZG1Rc1JVRkJSVzFXTEV0QlFVWXNSVUZCZUVJc1EwRkJXanRCUVVFclF6dEJRVUZETEZOQlFUY3JSU3hGUVVFNEswVnZSaXh0UWtGQmEwSXNOa0pCUVZVN1FVRkJRMmhqTEZsQlFVVkRMRTFCUVVZc1EwRkJVM1ZITEZkQlFWUXNTMEZCZFVKNFJ5eEZRVUZGUXl4TlFVRkdMRU5CUVZOclRpdzBRa0ZCVkN4SlFVRjFReXhEUVVGRGJrNHNSVUZCUlVNc1RVRkJSaXhEUVVGVGEwNHNORUpCUVZZc1NVRkJkME1zUTBGQlEyNU9MRVZCUVVWNVJ5eEpRVUZHTEVOQlFVOXpXU3hyUWtGQk9VY3NTMEZCYlVrdlpTeEZRVUZGZVVjc1NVRkJSaXhEUVVGUFF5eEpRVUZRTEVWQlFXNUpPMEZCUVdsS0xGTkJRVFZ3Uml4RlFVRTJjRVoxVml4cFFrRkJaMElzTWtKQlFWVTdRVUZCUTJwakxGbEJRVVZETEUxQlFVWXNRMEZCVTNWSExGZEJRVlFzU1VGQmMwSXNRMEZCUTNoSExFVkJRVVZETEUxQlFVWXNRMEZCVTJ0T0xEUkNRVUZvUXl4SlFVRTRSRzVPTEVWQlFVVjVSeXhKUVVGR0xFTkJRVTlETEVsQlFWQXNSVUZCT1VRN1FVRkJORVVzVTBGQmNIZEdMRVZCUVd3eWNrSXNSVUZCZDIxNFFqRkhMRVZCUVVVMFNpeFRRVUZHTEVkQlFWa3NSVUZCUTNOV0xGZEJRVlVzUTBGQlF5eERRVUZhTEVWQlFXTkRMR2xDUVVGblFpeDVRa0ZCVXpObUxFTkJRVlFzUlVGQlZ6dEJRVUZETEdOQlFVbERMRWxCUVVWUExFVkJRVVUwU2l4VFFVRlNPMEZCUVVFc1kwRkJhMEl4U1N4SlFVRkZiRUlzUlVGQlJUQkRMRmxCUVVZc1MwRkJhVUlzYVVKQlFXVnNSQ3hGUVVGRmQySXNTVUZCYWtJc1NVRkJkVUlzWjBKQlFXTjRZaXhGUVVGRmQySXNTVUZCZGtNc1IwRkJORU40WWl4RlFVRkZNR0lzWVVGQlJpeERRVUZuUWl4RFFVRm9RaXhGUVVGdFFrTXNTMEZCTDBRc1IwRkJjVVV6WWl4RlFVRkZNbUlzUzBGQlJpeEpRVUZUTTJJc1JVRkJSVFJtTEU5QlFXcEhMRWRCUVhsSExHbENRVUZsTldZc1JVRkJSWGRpTEVsQlFXcENMRWxCUVhWQ0xHZENRVUZqZUdJc1JVRkJSWGRpTEVsQlFYWkRMRWRCUVRSRGVHSXNSVUZCUlRCaUxHRkJRVVlzUTBGQlowSXNRMEZCYUVJc1JVRkJiVUpGTEV0QlFTOUVMRWRCUVhGRk5XSXNSVUZCUlRSaUxFdEJRVVlzU1VGQlV6VmlMRVZCUVVVMlppeFBRVUUzVFR0QlFVRkJMR05CUVhGT00yWXNTVUZCUlhkQ0xFbEJRVVY2UWl4RlFVRkZObVlzUzBGQlJpeERRVUZSZW1Jc1RVRkJVaXhIUVVGcFFqZEVMRVZCUVVVd1F5eFpRVUZHTEV0QlFXbENMRTFCUVdwQ0xFZEJRWGRDTEV0QlFYcERMRU5CUVVZc1IwRkJhMFJxUkN4RlFVRkZPR1lzVVVGQlJpeEhRVUZYTEVOQlFYQlNPMEZCUVVFc1kwRkJjMUkxWml4SlFVRkZMRU5CUVVOTExFVkJRVVUwUml4WlFVRkdMRVZCUVVRc1IwRkJhMEp1Unl4RlFVRkZLMllzVjBGQk5WTTdRVUZCUVN4alFVRjNWRFZtTEVsQlFVVXNRMEZCUTBrc1JVRkJSVFpHTEZsQlFVWXNSVUZCUkN4SFFVRnJRbkJITEVWQlFVVXJaaXhYUVVFNVZTeERRVUV3VmpsbUxFbEJRVVZETEVOQlFVWXNSMEZCU1VRc1NVRkJSVU1zUTBGQlRpeEhRVUZSUkN4SlFVRkZSU3hEUVVGR0xFdEJRVTFHTEVsQlFVVkZMRU5CUVZJc1EwRkJVaXhGUVVGdFFrWXNTVUZCUlN4RFFVRkRRU3hEUVVGRUxFZEJRVWRFTEVWQlFVVXJaaXhYUVVFeFFpeEZRVUZ6UTNobUxFVkJRVVZuUnl4alFVRkdMRU5CUVdsQ2RFY3NRMEZCYWtJc1EwRkJkRU1zUlVGQk1FUk5MRVZCUVVVclJpeHRRa0ZCUml4RFFVRnpRbkpITEVOQlFYUkNMRVZCUVhkQ0xFTkJRVU1zUTBGQmVrSXNRMEZCTVVRN1FVRkJjMFlzVTBGQk1XUXNSVUZCTW1RclppeFhRVUZWTEcxQ1FVRlRhbWRDTEVOQlFWUXNSVUZCVnp0QlFVRkRMR05CUVVsRExFbEJRVVZQTEVWQlFVVTBTaXhUUVVGU0xFTkJRV3RDYmtzc1JVRkJSWGxtTEZOQlFVWXNSMEZCV1N4RFFVRkRMRU5CUVdJc1JVRkJaVEZtTEVWQlFVVXdSU3hqUVVGR0xFVkJRV1lzUlVGQmEwTXhSU3hGUVVGRk5sb3NaVUZCUml4RlFVRnNReXhGUVVGelJEVmFMRVZCUVVVd1ppeGxRVUZHTEVOQlFXdENNMllzUTBGQmJFSXNRMEZCZEVRc1JVRkJNa1UwUnl4aFFVRmhNMGNzUlVGQlJXbG5RaXhYUVVGbUxFTkJRVE5GTEVWQlFYVkhhbWRDTEVWQlFVVTJaaXhMUVVGR0xFTkJRVkY0U1N4VlFVRlNMRU5CUVcxQ0xFTkJRVzVDTEVOQlFYWkhMRVZCUVRaSU9WY3NSVUZCUlVNc1RVRkJSaXhEUVVGVE5Fb3NZVUZCVkN4SlFVRjNRbkJMTEVWQlFVVTJaaXhMUVVGR0xFTkJRVkZ3VGl4SFFVRlNMRU5CUVZrc1UwRkJXaXhGUVVGelFpeERRVUYwUWl4RFFVRnlTaXhGUVVFNFMyeFRMRVZCUVVVMFVpeFBRVUZHTEVOQlFWVnJSaXhWUVVGV0xFTkJRWEZDTEVkQlFYSkNMRU5CUVRsTExFVkJRWGROY2xnc1JVRkJSV3RuUWl4SlFVRkdMRU5CUVU4M1NTeFZRVUZRTEVOQlFXdENMRWRCUVd4Q0xFTkJRWGhOTEVWQlFTdE9PVmNzUlVGQlJWa3NTVUZCUml4RFFVRlBMSE5DUVVGUUxFVkJRVGhDV2l4RFFVRTVRaXhEUVVFdlRqdEJRVUZuVVN4VFFVRnVkMElzUlVGQmIzZENOR1lzVlVGQlV5eHJRa0ZCVTNCblFpeERRVUZVTEVWQlFWYzdRVUZCUXl4alFVRkpReXhKUVVGRlR5eEZRVUZGTkVvc1UwRkJVaXhEUVVGclFtNUxMRVZCUVVWNVppeFRRVUZHTEV0QlFXTXhaaXhGUVVGRk1FVXNZMEZCUml4SFFVRnBRakZGTEVWQlFVVXdSU3hqUVVGR0xFVkJRV3BDTEVkQlFXOURNVVVzUlVGQlJUSkZMRmRCUVVZc1IwRkJZeXhEUVVGRExFTkJRVzVFTEVWQlFYRkVNVVVzUlVGQlJUQm1MR1ZCUVVZc1EwRkJhMEl6Wml4RFFVRnNRaXhEUVVGeVJDeEZRVUV3UlZFc1JVRkJSVFJTTEU5QlFVWXNRMEZCVld0R0xGVkJRVllzUTBGQmNVSXNRMEZCY2tJc1EwRkJNVVVzUlVGQmEwZHlXQ3hGUVVGRk5tWXNTMEZCUml4RFFVRlJlRWtzVlVGQlVpeERRVUZ0UWl4RFFVRnVRaXhEUVVGc1J5eEZRVUYzU0hKWUxFVkJRVVZyWjBJc1NVRkJSaXhEUVVGUE4wa3NWVUZCVUN4RFFVRnJRaXhEUVVGc1FpeERRVUY0U0N4RlFVRTJTVGxYTEVWQlFVVlpMRWxCUVVZc1EwRkJUeXh4UWtGQlVDeEZRVUUyUWxvc1EwRkJOMElzUTBGQk0wbzdRVUZCTkV3c1UwRkJkaXRDTEVWQlFYY3JRalptTEZOQlFWRXNhVUpCUVZOeVowSXNRMEZCVkN4RlFVRlhPMEZCUVVNc1kwRkJTVU1zU1VGQlJVOHNSVUZCUlRSS0xGTkJRVklzUTBGQmEwSnVTeXhGUVVGRmVXWXNVMEZCUml4TFFVRmplbVlzUlVGQlJYbG1MRk5CUVVZc1IwRkJXU3hEUVVGRExFTkJRV0lzUlVGQlpXeG1MRVZCUVVWRExFMUJRVVlzUTBGQlV6UktMR0ZCUVZRc1MwRkJlVUo2UkN4aFFVRmhNMGNzUlVGQlJXbG5RaXhYUVVGbUxFZEJRVFJDYW1kQ0xFVkJRVVZwWjBJc1YwRkJSaXhIUVVGamJHWXNWMEZCVnl4WlFVRlZPMEZCUVVObUxHTkJRVVUyWml4TFFVRkdMRU5CUVZGd1RpeEhRVUZTTEVOQlFWa3NVMEZCV2l4RlFVRnpRaXhEUVVGMFFpeEhRVUY1UW5wVExFVkJRVVUyWml4TFFVRkdMRU5CUVZGNFNTeFZRVUZTTEVOQlFXMUNMRWRCUVc1Q0xFTkJRWHBDTzBGQlFXbEVMRmRCUVhaRkxFVkJRWGRGTEVkQlFYaEZMRU5CUVc1RkxFTkJRV1lzUlVGQlowczVWeXhGUVVGRldTeEpRVUZHTEVOQlFVOHNiMEpCUVZBc1JVRkJORUphTEVOQlFUVkNMRU5CUVdoTExFVkJRU3RNUVN4RlFVRkZReXhOUVVGR0xFTkJRVk00U2l4elFrRkJWQ3hKUVVGcFF5OUtMRVZCUVVWMVJ5eFZRVUZHTEVWQlFUbFBPMEZCUVRoUUxGTkJRVFYzUXl4RlFVRTJkME4xV2l4cFFrRkJaMElzV1VGQlZUdEJRVUZETEdsQ1FVRlBPV1lzUlVGQlJVTXNUVUZCUml4RFFVRlRhMHdzWVVGQlZDeExRVUY1UWl4RFFVRkRMRU5CUVRGQ0xFbEJRVFpDYmt3c1JVRkJSWGRTTEU5QlFVWXNRMEZCVlVjc1MwRkJka01zUjBGQk5rTXpVaXhGUVVGRmExa3NWMEZCTDBNc1IwRkJNa1JzV1N4RlFVRkZNbGdzYTBKQlFYQkZPMEZCUVhWR0xGTkJRV3hITEVWQlFUZDRReXhGUVVGck5FTnZTU3hwUWtGQlowSXNNa0pCUVZVN1FVRkJReXhqUVVGSmRHZENMRWxCUVVWUExFVkJRVVUwU2l4VFFVRlNPMEZCUVVFc1kwRkJhMEl4U1N4SlFVRkZiRUlzUlVGQlJYZFNMRTlCUVVZc1EwRkJWVWNzUzBGQlZpeEhRVUZuUW14VExFVkJRVVUyWml4TFFVRnNRaXhIUVVGM1FuUmpMRkZCUVRWRExFTkJRWEZFZUVRc1JVRkJSVU1zUlVGQlJUWm1MRXRCUVVvc1JVRkJWMVVzUlVGQldDeERRVUZqZG1kQ0xFVkJRVVZ4WjBJc1pVRkJSaXhEUVVGclFteEpMRXRCUVdoRExFVkJRWE5EYmxrc1JVRkJSV2RuUWl4VFFVRjRReXhIUVVGdFJHcG5RaXhGUVVGRk1FSXNRMEZCUml4RlFVRkxPR1VzUlVGQlRDeERRVUZSZG1kQ0xFVkJRVVZ4WjBJc1pVRkJSaXhEUVVGclFtcEpMRWxCUVRGQ0xFVkJRU3RDY0Zrc1JVRkJSVzFuUWl4UlFVRnFReXhEUVVGdVJDeEZRVUU0Um5CblFpeEZRVUZGTUVJc1EwRkJSaXhGUVVGTE9HVXNSVUZCVEN4RFFVRlJkbWRDTEVWQlFVVnhaMElzWlVGQlJpeERRVUZyUW1oSkxFZEJRVEZDTEVWQlFUaENjbGtzUlVGQlJXOW5RaXhQUVVGb1F5eERRVUU1Ump0QlFVRjFTU3hUUVVGNmJFUXNSVUZCTUd4RVNTeHJRa0ZCYVVJc05FSkJRVlU3UVVGQlF5eGpRVUZKZUdkQ0xFbEJRVVZQTEVWQlFVVTBTaXhUUVVGU08wRkJRVUVzWTBGQmEwSXhTU3hKUVVGRmJFSXNSVUZCUlhkU0xFOUJRVVlzUTBGQlZVY3NTMEZCVml4SFFVRm5RbXhUTEVWQlFVVTJaaXhMUVVGc1FpeEhRVUYzUW5SakxGRkJRVFZETEVOQlFYRkVlRVFzUlVGQlJVTXNSVUZCUlRabUxFdEJRVW9zUlVGQlYxa3NSMEZCV0N4RFFVRmxlbWRDTEVWQlFVVnhaMElzWlVGQlJpeERRVUZyUW14SkxFdEJRV3BETEVWQlFYVkRibGtzUlVGQlJXZG5RaXhUUVVGNlF5eEhRVUZ2UkdwblFpeEZRVUZGTUVJc1EwRkJSaXhGUVVGTFoyWXNSMEZCVEN4RFFVRlRlbWRDTEVWQlFVVnhaMElzWlVGQlJpeERRVUZyUW1wSkxFbEJRVE5DTEVWQlFXZERjRmtzUlVGQlJXMW5RaXhSUVVGc1F5eERRVUZ3UkN4RlFVRm5SM0JuUWl4RlFVRkZNRUlzUTBGQlJpeEZRVUZMWjJZc1IwRkJUQ3hEUVVGVGVtZENMRVZCUVVWeFowSXNaVUZCUml4RFFVRnJRbWhKTEVkQlFUTkNMRVZCUVN0Q2Nsa3NSVUZCUlc5blFpeFBRVUZxUXl4RFFVRm9SenRCUVVFd1NTeFRRVUZ5ZWtRc1JVRkJjM3BFZUVrc1MwRkJTU3hsUVVGVk8wRkJRVU1zWTBGQlIzSllMRVZCUVVWRExFMUJRVVlzUTBGQlV6SktMRk5CUVZvc1JVRkJjMEk3UVVGQlF5eG5Ra0ZCU1c1TExFbEJRVVZQTEVWQlFVVTBTaXhUUVVGU0xFTkJRV3RDYmtzc1JVRkJSVFptTEV0QlFVWXNSMEZCVVRsbUxFVkJRVVZSTEVWQlFVVkRMRTFCUVVZc1EwRkJVekpLTEZOQlFWZ3NRMEZCVWl4RlFVRTRRalZLTEVWQlFVVkRMRTFCUVVZc1EwRkJVelJNTEdsQ1FVRlVMRWxCUVRSQ0xGbEJRVlVzVDBGQlR6ZE1MRVZCUVVWRExFMUJRVVlzUTBGQlV6SktMRk5CUVhSRUxFbEJRV2xGYmtzc1JVRkJSVFptTEV0QlFVWXNRMEZCVVRsa0xFMUJRVklzUjBGQlpTeERRVUZvUml4SlFVRnRSaXhOUVVGSmVFSXNSVUZCUlc5RUxGTkJRVVlzUTBGQldUSlBMRWxCUVZvc1EwRkJhVUl2VWl4RlFVRkZReXhOUVVGR0xFTkJRVk15U2l4VFFVRXhRaXhGUVVGeFEzQkpMRTFCUVRWSUxFdEJRWEZKTDBJc1JVRkJSVFptTEV0QlFVWXNSMEZCVVhSbUxFVkJRVVZ2UkN4VFFVRkdMRU5CUVZreVR5eEpRVUZhTEVOQlFXbENMMUlzUlVGQlJVTXNUVUZCUml4RFFVRlRNa29zVTBGQk1VSXNRMEZCTjBrc1EwRkJPVUlzUlVGQmFVNXVTeXhGUVVGRmEyZENMRWxCUVVZc1IwRkJUMnhuUWl4RlFVRkZObVlzUzBGQlJpeERRVUZSZGs0c1NVRkJVaXhEUVVGaExIZENRVUZpTEVOQlFYaE9MRVZCUVN0UUxFMUJRVWwwVXl4RlFVRkZhMmRDTEVsQlFVWXNRMEZCVDI1bExFMUJRVmdzUzBGQmIwSXZRaXhGUVVGRmEyZENMRWxCUVVZc1IwRkJUMjVuUWl4RlFVRkZMREpEUVVGR0xFTkJRVkFzUlVGQmMwUkRMRVZCUVVVMlppeExRVUZHTEVOQlFWRjJRaXhOUVVGU0xFTkJRV1YwWlN4RlFVRkZhMmRDTEVsQlFXcENMRU5CUVRGRkxFTkJRUzlRTEVWQlFXbFhiR2RDTEVWQlFVVnJaMElzU1VGQlJpeERRVUZQTEVOQlFWQXNSVUZCVlhwTkxFdEJRVllzUTBGQlowSnNVQ3hMUVVGb1FpeEhRVUZ6UWl4RlFVRjJXQ3hGUVVFd1dIWkZMRVZCUVVWclowSXNTVUZCUml4RFFVRlBMRU5CUVZBc1JVRkJWWHBOTEV0QlFWWXNRMEZCWjBKcVVDeE5RVUZvUWl4SFFVRjFRaXhGUVVGcVdpeEZRVUZ2V25oRkxFVkJRVVV3WjBJc1UwRkJSaXhIUVVGWmJtZENMRVZCUVVVd1F5eFpRVUZHTEV0QlFXbENha1FzUlVGQlJUWm1MRXRCUVVZc1EwRkJVU3hEUVVGU0xFVkJRVmRqTEZkQlFUVkNMRWRCUVhkRE0yZENMRVZCUVVVMlppeExRVUZHTEVOQlFWRXNRMEZCVWl4RlFVRlhOMHNzV1VGQmJtUXNSVUZCWjJWb1ZpeEZRVUZGTkdkQ0xFOUJRVVlzUjBGQlZYSm5RaXhGUVVGRk5sVXNTVUZCUml4SFFVRlBOMVVzUlVGQlJXMVdMRmRCUVc1bUxFVkJRU3RtTVZZc1JVRkJSU3RtTEZkQlFVWXNSMEZCWXk5bUxFVkJRVVUwWjBJc1QwRkJSaXhKUVVGWE5XZENMRVZCUVVVd1owSXNVMEZCUml4SFFVRlpibWRDTEVWQlFVVTJWU3hKUVVGNlFpeERRVUUzWjBJc1JVRkJOR2xDY0ZZc1JVRkJSVGhtTEZGQlFVWXNSMEZCVnpsbUxFVkJRVVV3WjBJc1UwRkJSaXhIUVVGWk1XZENMRVZCUVVVMFowSXNUMEZCY210Q0xFVkJRVFpyUW5KblFpeEZRVUZGTUVNc1dVRkJSaXhMUVVGcFFtcEVMRVZCUVVWclowSXNTVUZCUml4RFFVRlBMRU5CUVZBc1JVRkJWWHBOTEV0QlFWWXNRMEZCWjBKc1VDeExRVUZvUWl4SFFVRnpRblpGTEVWQlFVVTRaaXhSUVVGR0xFZEJRVmNzU1VGQmJFUXNSMEZCZFVRNVppeEZRVUZGYTJkQ0xFbEJRVVlzUTBGQlR5eERRVUZRTEVWQlFWVjZUU3hMUVVGV0xFTkJRV2RDYWxBc1RVRkJhRUlzUjBGQmRVSjRSU3hGUVVGRk9HWXNVVUZCUml4SFFVRlhMRWxCUVhSeFFpeEZRVUV5Y1VJNVppeEZRVUZGTkdkQ0xFOUJRVVlzU1VGQlZ5eERRVUZZTEVkQlFXRTFaMElzUlVGQlJUWm1MRXRCUVVZc1EwRkJVU3hEUVVGU0xFVkJRVmR3VFN4TFFVRllMRU5CUVdsQ2IwNHNUMEZCYWtJc1IwRkJlVUlzVFVGQmRFTXNSMEZCTmtNM1owSXNSVUZCUlRabUxFdEJRVVlzUTBGQlVTeERRVUZTTEVWQlFWZHdUU3hMUVVGWUxFTkJRV2xDYjA0c1QwRkJha0lzUjBGQmVVSXNSVUZCYW5aQ0xFVkJRVzkyUW5SblFpeEZRVUZGUXl4TlFVRkdMRU5CUVZNMFNpeGhRVUZVTEV0QlFYbENjRXNzUlVGQlJUWm1MRXRCUVVZc1EwRkJVU3hEUVVGU0xFVkJRVmR3VFN4TFFVRllMRU5CUVdsQ2NVd3NUMEZCYWtJc1IwRkJlVUlzUTBGQmJFUXNRMEZCY0haQ08wRkJRWGw1UWp0QlFVRkRMRk5CUVhod1JpeEZRVUY1Y0VZMVFpeGpRVUZoTEhkQ1FVRlZPMEZCUVVNc1kwRkJSek5qTEVWQlFVVkRMRTFCUVVZc1EwRkJVekpLTEZOQlFWb3NSVUZCYzBJN1FVRkJReXhuUWtGQlNYQkxMRU5CUVVvN1FVRkJRU3huUWtGQlRVTXNTVUZCUlU4c1JVRkJSVFJLTEZOQlFWWTdRVUZCUVN4blFrRkJiMEl4U1N4TFFVRkhiRUlzUlVGQlJYVlRMRk5CUVVZc1JVRkJXVGxUTEVWQlFVVTRaaXhSUVVGcVFpeERRVUZ3UWl4RFFVRXJReTltTEVsQlFVVXNRMEZCUTBNc1JVRkJSVEJuUWl4VFFVRkdMRWRCUVZreFowSXNSVUZCUlRobUxGRkJRV1lzU1VGQmVVSjJaaXhGUVVGRmQxTXNVVUZCTjBJc1JVRkJjME40VXl4RlFVRkZPRVFzUjBGQlJpeEpRVUZQT1VRc1JVRkJSVEJETEZsQlFVWXNSVUZCVUN4SlFVRjVRbXhFTEVsQlFVVXNRMEZCUTBFc1EwRkJTQ3hGUVVGTFFTeEpRVUZGTEVOQlFVWXNTVUZCU3pCQ0xFbEJRVVY2UWl4RlFVRkZPR1lzVVVGQlJpeEhRVUZYTDJZc1EwRkJZaXhGUVVGbFFTeEpRVUZGTEVOQlFYUkNMRWxCUVhsQ0xFTkJRVU5CTEVOQlFVUXNSMEZCUjBNc1JVRkJSVGhtTEZGQlFVd3NSMEZCWXpsbUxFVkJRVVV3WjBJc1UwRkJhRUlzUzBGQk5FSnFaaXhKUVVGRmVrSXNSVUZCUlRCblFpeFRRVUZHTEVkQlFWa3paMElzUTBGQk1VTXNRMEZCZGtRc1NVRkJjVWRCTEVsQlFVVXNRMEZCUml4SlFVRkxNRUlzU1VGQlJYcENMRVZCUVVVNFppeFJRVUZHTEVkQlFWY3ZaaXhEUVVGaUxFVkJRV1ZCTEVsQlFVVXNRMEZCZEVJc1NVRkJlVUpCTEVsQlFVVkRMRVZCUVVVNFppeFJRVUZLTEVkQlFXRTVaaXhGUVVGRk1HZENMRk5CUVdZc1MwRkJNa0pxWml4SlFVRkZla0lzUlVGQlJUQm5RaXhUUVVGR0xFZEJRVmt6WjBJc1EwRkJla01zUTBGQmNFc3NSVUZCWjA1UkxFVkJRVVV3UXl4WlFVRkdMRTFCUVd0Q01VTXNSVUZCUlhkU0xFOUJRVVlzUTBGQlZVVXNXVUZCVml4SFFVRjFRbXBUTEVWQlFVVnJaMElzU1VGQlJpeERRVUZQZGxrc1UwRkJVQ3hEUVVGcFFpeHBRa0ZCWlRWSUxFTkJRV1lzUjBGQmFVSXNWMEZCYkVNc1EwRkJka0lzUjBGQmMwVkRMRVZCUVVWclowSXNTVUZCUml4RFFVRlBkbGtzVTBGQlVDeERRVUZwUWl4blFrRkJZelZJTEVOQlFXUXNSMEZCWjBJc1MwRkJha01zUTBGQmRFVXNSVUZCT0VkRExFVkJRVVZyWjBJc1NVRkJSaXhEUVVGUExFTkJRVkFzUlVGQlZYcE5MRXRCUVZZc1EwRkJaMEpzVUN4TFFVRm9RaXhIUVVGelFqbERMRWxCUVVVc1NVRkJlRW9zUzBGQkswcHNRaXhGUVVGRmQxSXNUMEZCUml4RFFVRlZSU3haUVVGV0xFZEJRWFZDYWxNc1JVRkJSV3RuUWl4SlFVRkdMRU5CUVU5MldTeFRRVUZRTEVOQlFXbENMSE5DUVVGdlFqVklMRU5CUVhCQ0xFZEJRWE5DTEZGQlFYWkRMRU5CUVhaQ0xFZEJRWGRGUXl4RlFVRkZhMmRDTEVsQlFVWXNRMEZCVDNaWkxGTkJRVkFzUTBGQmFVSXNaMEpCUVdNMVNDeERRVUZrTEVkQlFXZENMRXRCUVdwRExFTkJRWGhGTEVWQlFXZElReXhGUVVGRmEyZENMRWxCUVVZc1EwRkJUeXhEUVVGUUxFVkJRVlY2VFN4TFFVRldMRU5CUVdkQ2FsQXNUVUZCYUVJc1IwRkJkVUl2UXl4SlFVRkZMRWxCUVhoVExFTkJRV2hPTEVWQlFUaG1iRUlzUlVGQlJVTXNUVUZCUml4RFFVRlRORW9zWVVGQlZDeExRVUY1UW5wRUxHRkJRV0V6Unl4RlFVRkZOa2NzVDBGQlppeEhRVUYzUWpkSExFVkJRVVUyWml4TFFVRkdMRU5CUVZFc1EwRkJVaXhGUVVGWGNFMHNTMEZCV0N4RFFVRnBRbkZNTEU5QlFXcENMRWRCUVhsQ0xFTkJRV3BFTEVWQlFXMUVPV1VzUlVGQlJUWkhMRTlCUVVZc1IwRkJWVGxHTEZkQlFWY3NXVUZCVlR0QlFVRkRaaXhuUWtGQlJUWm1MRXRCUVVZc1EwRkJVU3hEUVVGU0xFVkJRVmR3VFN4TFFVRllMRU5CUVdsQ2NVd3NUMEZCYWtJc1IwRkJlVUlzUTBGQmVrSXNSVUZCTWtJNVpTeEZRVUZGTm1Zc1MwRkJSaXhEUVVGUmVFa3NWVUZCVWl4RFFVRnRRaXhIUVVGdVFpeERRVUV6UWp0QlFVRnRSQ3hoUVVGNlJTeEZRVUV3UlN4SFFVRXhSU3hEUVVGMFJpeERRVUU1Wmp0QlFVRnZjVUk3UVVGQlF5eFRRVUUxTlVjc1JVRkJOalZITkVZc1pVRkJZeXgxUWtGQlUyeGtMRU5CUVZRc1JVRkJWenRCUVVGRFVTeFpRVUZGUXl4TlFVRkdMRU5CUVZNeVNpeFRRVUZVTEVsQlFXOUNOVW9zUlVGQlJUUktMRk5CUVVZc1EwRkJXU3RXTEVsQlFWb3NRMEZCYVVJM1NTeFZRVUZxUWl4RFFVRTBRblJZTEVOQlFUVkNMRU5CUVhCQ08wRkJRVzFFTEZOQlFURXJSeXhGUVVGd2JuaENMRVZCUVdkdE5FSlJMRVZCUVVWeldDeFZRVUZHTEVkQlFXRXNSVUZCUTJsS0xHTkJRV0VzYzBKQlFWTXZaMElzUTBGQlZDeEZRVUZYUXl4RFFVRllMRVZCUVdFN1FVRkJReXhqUVVGSmVVSXNTVUZCUlN4WlFVRlZPMEZCUVVNc1owSkJRVWt4UWl4RFFVRktMRVZCUVUxRExFTkJRVTRzUlVGQlVYbENMRU5CUVZJc1EwRkJWU3hQUVVGUExGVkJRVk40UWl4RFFVRlVMRVZCUVZkRExFTkJRVmdzUlVGQllUdEJRVUZETEcxQ1FVRkpSaXhKUVVGRkxFTkJRVU1zUTBGQlNDeEZRVUZMUkN4SlFVRkZSU3hGUVVGRk9FSXNUVUZCWWl4RlFVRnZRbWhETEVsQlFVVkRMRU5CUVVZc1IwRkJTU3hEUVVGNFFqdEJRVUV5UWtNc2EwSkJRVVYzUWl4SlFVRkZNVUlzU1VGQlJVTXNRMEZCUml4SlFVRkxMRU5CUVZRc1MwRkJZVVVzUTBGQllpeEhRVUZsUml4SlFVRkZlVUlzUTBGQmFrSXNSMEZCYlVJeFFpeEpRVUZGTUVJc1EwRkJja0k3UVVGQk0wSXNaVUZCYTBRc1QwRkJUekZDTEVOQlFWQTdRVUZCVXl4aFFVRm9SanRCUVVGcFJpeFhRVUYwUnl4RlFVRk9MRU5CUVN0SExFdEJRVXRuVWl4RFFVRk1MRWRCUVU5b1VpeERRVUZRTEVWQlFWTXNTMEZCU3l0UkxFTkJRVXdzUjBGQlR6bFJMRU5CUVdoQ0xFVkJRV3RDTEV0QlFVc3JaMElzVTBGQlRDeEhRVUZsYUdoQ0xFVkJRVVZuUXl4TlFVRkdMRWRCUVZNc1EwRkJNVU1zUTBGQk5FTXNTVUZCU1RsQ0xFTkJRVW9zUlVGQlRVTXNRMEZCVGl4RFFVRlJMRXRCUVVzMlVTeERRVUZNTEVOQlFVOW9VQ3hOUVVGUUxFTkJRV01zUzBGQlMybG1MRmRCUVV3c1IwRkJhVUlzVlVGQlUycG9RaXhEUVVGVUxFVkJRVmM3UVVGQlF5eHRRa0ZCVDBFc1MwRkJSMGNzU1VGQlJYVkNMRVZCUVVVc1MwRkJTM05RTEVOQlFWQXNSVUZCVTJoU0xFTkJRVlFzUTBGQlJpeEZRVUZqUlN4SlFVRkZReXhKUVVGRkxFTkJRV3hDTEVWQlFXOUNMRU5CUVVOSUxFbEJRVVVzUzBGQlMyZFNMRU5CUVV3c1EwRkJUemxSTEVOQlFWQXNRMEZCU0N4TFFVRmxMRXRCUVVzMlVTeERRVUZNTEVOQlFVODFVU3hEUVVGUUxFbEJRVlVzUzBGQlN6UlJMRU5CUVV3c1EwRkJUemRSTEVOQlFWQXNRMEZCZWtJc1MwRkJjVU1zUzBGQlN6aFJMRU5CUVV3c1EwRkJUemRSTEVOQlFWQXNTVUZCVlN4TFFVRkxObEVzUTBGQlRDeERRVUZQT1ZFc1EwRkJVQ3hEUVVFdlF5eEpRVUV3UkN4TFFVRkxObEVzUTBGQlRDeERRVUZQTjFFc1EwRkJVQ3hEUVVGcVJpeEpRVUUwUml4RFFVRnVSenRCUVVGeFJ5eFhRVUZzU1R0QlFVRnRTU3hUUVVGb1ZpeEZRVUZwVm1kb1FpeDNRa0ZCZFVJc1owTkJRVk5zYUVJc1EwRkJWQ3hGUVVGWE8wRkJRVU5STEZsQlFVVnpXQ3hWUVVGR0xFTkJRV0ZETEUxQlFXSXNTMEZCYzBKMldDeEZRVUZGYzFnc1ZVRkJSaXhEUVVGaFF5eE5RVUZpTEVkQlFXOUNkbGdzUlVGQlJVTXNUVUZCUml4RFFVRlRVU3hKUVVGVUxFZEJRV01zU1VGQlNWUXNSVUZCUlhOWUxGVkJRVVlzUTBGQllXbEtMRmxCUVdwQ0xFTkJRVGhDZG1kQ0xFVkJRVVVyVlN4VlFVRm9ReXhGUVVFeVEzWldMRVZCUVVWMVZpeFZRVUUzUXl4RFFVRmtMRWRCUVhWRkxFbEJRVWt2VlN4RlFVRkZjMWdzVlVGQlJpeERRVUZoYVVvc1dVRkJha0lzUTBGQk9FSjJaMElzUlVGQlJYTlZMRkZCUVdoRExFVkJRWGxET1ZVc1JVRkJSVGhWTEZGQlFUTkRMRU5CUVdwSU8wRkJRWFZMTEZOQlFUTm9RaXhGUVVFMGFFSnhTU3hqUVVGaExITkNRVUZUYm1Rc1EwRkJWQ3hGUVVGWE1FSXNRMEZCV0N4RlFVRmhPMEZCUVVNc2JVSkJRVk40UWl4RFFVRlVMRU5CUVZkRUxFTkJRVmdzUlVGQllUdEJRVUZEUkN4blFrRkJSVU1zUlVGQlJYRkZMRWRCUVVZc1NVRkJUeXhwUWtGQlpYSkZMRVZCUVVWUkxFMUJRVVlzUTBGQlUzZElMRk5CUVM5Q0xFZEJRWGxETEVOQlFVTjZTQ3hGUVVGRmRWTXNVMEZCTlVNc1IwRkJjMFIyVXl4RlFVRkZkVk1zVTBGQk1VUXNSVUZCYjBVc1dVRkJWWFpUTEVWQlFVVkRMRTFCUVVZc1EwRkJVM2xPTEZOQlFXNUNMRXRCUVN0Q01VNHNSVUZCUlhOWUxGVkJRVVlzUTBGQllXOUtMSE5DUVVGaUxFTkJRVzlEYW1oQ0xFTkJRWEJETEVkQlFYVkRSeXhKUVVGRkxFTkJRVU5KTEVWQlFVVnpXQ3hWUVVGR0xFTkJRV0ZETEUxQlFXSXNRMEZCYjBKclNpeFhRVUZ3UWl4RFFVRm5ReXhEUVVGRGFtaENMRU5CUVdwRExFTkJRWHBGTEVOQlFYQkZMRVZCUVd0TVNTeExRVUZITEdkQ1FVRmpTU3hGUVVGRlF5eE5RVUZHTEVOQlFWTjVUaXhUUVVFeFFpeExRVUZ6UXk5T0xFbEJRVVVzUTBGQlEwWXNSVUZCUlc5SExGbEJRVVlzUzBGQmFVSndSeXhGUVVGRmJVY3NXVUZCUml4RlFVRnNRaXhMUVVGeFF6VkdMRVZCUVVVMlJpeFpRVUZHTEV0QlFXbENOMFlzUlVGQlJUUkdMRmxCUVVZc1JVRkJkRVFzUTBGQlJpeEZRVUV3UldoSExFbEJRVVVzUTBGQlEwb3NTVUZCUlZFc1JVRkJSVFJHTEZsQlFVWXNSVUZCU0N4SlFVRnhRbXBITEVOQlFYSkNMRWRCUVhWQ1JpeEZRVUZGYlVjc1dVRkJSaXhGUVVGNlNTeERRVUZzVEN4RlFVRTJWVFZHTEVWQlFVVkRMRTFCUVVZc1EwRkJVM2RPTEdOQlFWUXNTMEZCTUVJM1RpeEpRVUZGU0N4RlFVRkZiMGNzV1VGQlJpeExRVUZwUW1wSExFTkJRVGRETEVOQlFUZFZMRVZCUVRaWVNDeEZRVUZGZFVjc1kwRkJSaXhEUVVGcFFuQkhMRU5CUVdwQ0xFTkJRVGRZTEVWQlFXbGFTQ3hGUVVGRmMwY3NiVUpCUVVZc1EwRkJjMEp1Unl4RFFVRjBRaXhGUVVGM1FpeERRVUZETEVOQlFYcENMRVZCUVRKQ1NTeERRVUV6UWl4RFFVRnFXaXhGUVVFcllWQXNSVUZCUlhkSExHbENRVUZHTEVWQlFTOWhPMEZCUVhGakxHVkJRVWwwUnl4RFFVRktPMEZCUVVFc1kwRkJUVU1zUTBGQlRqdEJRVUZCTEdOQlFWRkhMRWxCUVVWRExFVkJRVVZETEUxQlFVWXNRMEZCVTNWT0xFOUJRVzVDTEVOQlFUSkNMRWxCUVVkdFZDeE5RVUZOUXl4UFFVRk9MRU5CUVdNM1owSXNRMEZCWkN4RFFVRklMRVZCUVc5Q0xFdEJRVWtzU1VGQlNXdENMRWxCUVVVc1EwRkJWaXhGUVVGWlFTeEpRVUZGYkVJc1JVRkJSWGxDTEUxQlFXaENMRVZCUVhWQ1VDeEhRVUYyUWp0QlFVRXlRbXhDTEdOQlFVVnJRaXhEUVVGR0xFMUJRVTlETEVOQlFWQXNTVUZCVlc1Q0xFVkJRVVZyUWl4RFFVRkdMR0ZCUVdWNFFpeERRVUY2UWl4SlFVRTBRa01zUlVGQlJVc3NSVUZCUld0Q0xFTkJRVVlzUTBGQlJpeERRVUUxUWp0QlFVRXpRaXhYUVVGd1FpeE5RVUYzUm14Q0xHRkJRV0ZPTEVOQlFXSXNTVUZCWjBKNVFpeE5RVUZKYmtJc1EwRkJjRUlzU1VGQmRVSk1MRVZCUVVWTExFTkJRVVlzUTBGQmRrSTdRVUZCTkVJc1UwRkJlbkJETEVWQlFUQndRekpqTEdWQlFXTXNkVUpCUVZOc1pDeERRVUZVTEVWQlFWY3dRaXhEUVVGWUxFVkJRV0U3UVVGQlF5eHRRa0ZCVTNoQ0xFTkJRVlFzUTBGQlYwUXNRMEZCV0N4RlFVRmhPMEZCUVVOQkxHTkJRVVZ4Unl4dlFrRkJSaXhEUVVGMVFuUkhMRU5CUVhaQ0xFVkJRWGxDVVN4RFFVRjZRaXhIUVVFMFFpeE5RVUZKVWl4RFFVRktMRXRCUVZGRExFVkJRVVYxWXl4cFFrRkJSaXhKUVVGelFuWmpMRVZCUVVWdFV5eFBRVUZHTEVOQlFWVjVReXhoUVVGV0xFTkJRWGRDTEZsQlFWVTdRVUZCUTNwVkxHOUNRVUZKU0N4RlFVRkZVU3hOUVVGR0xFTkJRVk5STEVsQlFWUXNTVUZCWlN4WlFVRlZWQ3hGUVVGRlF5eE5RVUZHTEVOQlFWTjVUaXhUUVVGc1F5eEpRVUUyUTJwUExFVkJRVVZwUWl4UFFVRkdMRVZCUVRkRExFVkJRWGxFYWtJc1JVRkJSWGRqTEdWQlFVWXNSVUZCTjBRN1FVRkJhMFlzWVVGQmNrZ3NRMEZCT1VJc1EwRkJOVUk3UVVGQmEwd3NaVUZCU1hSakxFTkJRVW83UVVGQlFTeGpRVUZOUXl4SlFVRkZTU3hGUVVGRlF5eE5RVUZHTEVOQlFWTjFUaXhQUVVGcVFpeERRVUY1UWl4SlFVRkhiVlFzVFVGQlRVTXNUMEZCVGl4RFFVRmphR2hDTEVOQlFXUXNRMEZCU0N4RlFVRnZRaXhMUVVGSlJDeEpRVUZGTEVOQlFVNHNSVUZCVVVFc1NVRkJSVU1zUlVGQlJUUkNMRTFCUVZvc1JVRkJiVUkzUWl4SFFVRnVRanRCUVVGMVFrTXNZMEZCUlVRc1EwRkJSaXhOUVVGUGRVSXNRMEZCVUN4SlFVRlZkRUlzUlVGQlJVUXNRMEZCUml4aFFVRmxSaXhEUVVGNlFpeEpRVUUwUWtNc1JVRkJSVVVzUlVGQlJVUXNRMEZCUml4RFFVRkdMRU5CUVRWQ08wRkJRWFpDTEZkQlFYQkNMRTFCUVc5R1F5eGhRVUZoU0N4RFFVRmlMRWxCUVdkQ2VVSXNUVUZCU1hSQ0xFTkJRWEJDTEVsQlFYVkNSaXhGUVVGRlJTeERRVUZHTEVOQlFYWkNPMEZCUVRSQ0xGTkJRUzh2UXl4RlFVRTNiVFJDTEVWQlFUaHROMEpKTEVWQlFVVnRTeXhQUVVGR0xFZEJRVlVzUlVGQlF6QlhMR0ZCUVZrc2NVSkJRVk55YUVJc1EwRkJWQ3hGUVVGWFF5eERRVUZZTEVWQlFXRTdRVUZCUXl4alFVRkplVUlzU1VGQlJUaENMRk5CUVZNNFpDeFJRVUZVTEVOQlFXdENReXhKUVVGc1FpeERRVUYxUWpkTUxFOUJRWFpDTEVOQlFTdENMRWRCUVM5Q0xFVkJRVzFETEVWQlFXNURMRU5CUVU0c1EwRkJOa05vVlN4TlFVRkpiRUlzUlVGQlJVY3NUVUZCUml4RFFVRlRReXhGUVVGVUxFTkJRVmxLTEVWQlFVVkxMRmRCUVdRc1JVRkJNa0pETEVsQlFUTkNMRU5CUVdkRExGZEJRV2hETEVOQlFVb3NTVUZCYTBST0xFVkJRVVYzV0N4UFFVRkdMRU5CUVZWNFdDeEZRVUZGTkZJc1QwRkJSaXhEUVVGVlF5eFJRVUZXTEVOQlFXMUNMRTFCUVVrM1VpeEZRVUZGUXl4TlFVRkdMRU5CUVZOdlJDeFZRVUZpTEVkQlFYZENMR05CUVhoQ0xFZEJRWFZEYmtNc1EwRkJka01zUjBGQmVVTXNTVUZCTlVRc1JVRkJhMFV3Vml4TFFVRnNSU3hGUVVGV0xFTkJRV3hFTzBGQlFYVkpMRk5CUVM5TkxFVkJRV2RPYzBNc1kwRkJZU3h6UWtGQlUzcGFMRU5CUVZRc1JVRkJWenRCUVVGRExHTkJRVWw1UWl4SlFVRkZla0lzU1VGQlJTeExRVUZHTEVkQlFWRXNTVUZCWkN4RFFVRnRRa1FzUlVGQlJXdERMRTFCUVVZc1JVRkJWVklzUTBGQlZpeEZRVUZoTEZsQlFXSXNSVUZCTUVKc1FpeEZRVUZGYlVzc1QwRkJSaXhEUVVGVk1GY3NWMEZCY0VNN1FVRkJhVVFzVTBGQk4xTXNSVUZCT0ZONlJTeFRRVUZSTEcxQ1FVRlZPMEZCUTJod0swSXNZMEZCUjNCakxFVkJRVVZ0U3l4UFFVRkdMRU5CUVZVMlZ5eFhRVUZXTEVsQlFYVkNhR2hDTEVWQlFVVkRMRTFCUVVZc1EwRkJVMnRMTEU5QlFXNURMRVZCUVRKRExFbEJRVWR1U3l4RlFVRkZReXhOUVVGR0xFTkJRVk54U3l4WlFVRlVMRWxCUVhWQ05Va3NUMEZCVHpKSkxFOUJRVGxDTEVsQlFYVkRNMGtzVDBGQlR6SkpMRTlCUVZBc1EwRkJaVU1zV1VGQmVrUXNSVUZCYzBVMVNTeFBRVUZQTWtrc1QwRkJVQ3hEUVVGbFF5eFpRVUZtTEVOQlFUUkNMRWxCUVRWQ0xFVkJRV2xETEVsQlFXcERMRVZCUVhORExFMUJRVWwwU3l4RlFVRkZSeXhOUVVGR0xFTkJRVk5ETEVWQlFWUXNRMEZCV1Vvc1JVRkJSVXNzVjBGQlpDeEZRVUV5UWtNc1NVRkJNMElzUTBGQlowTXNWMEZCYUVNc1EwRkJTaXhKUVVGclJDeEZRVUY0Uml4RlFVRjBSU3hMUVVGelN6dEJRVUZETEdkQ1FVRkpaQ3hKUVVGRlVTeEZRVUZGUnl4TlFVRkdMRU5CUVZORExFVkJRVlFzUTBGQldVb3NSVUZCUlVzc1YwRkJaQ3hEUVVGT08wRkJRVUVzWjBKQlFXbERXaXhKUVVGRlJDeEZRVUZGWXl4SlFVRkdMRU5CUVU4c1YwRkJVQ3hMUVVGeFFtUXNSVUZCUldNc1NVRkJSaXhEUVVGUExHTkJRVkFzUTBGQmVFUXNRMEZCSzBVd1F5eFRRVUZUT0dRc1VVRkJWQ3hEUVVGclFrTXNTVUZCYkVJc1IwRkJkVUowYUVJc1MwRkJSeXhGUVVFeFFqdEJRVUUyUWp0QlFVRkRMRk5CUkdsb09VSXNSVUZEYUdnNVFuZG9RaXhOUVVGTExHZENRVUZWTzBGQlFVTXNZMEZCUjJwb1FpeEZRVUZGUXl4TlFVRkdMRU5CUVZOclN5eFBRVUZVTEVsQlFXdENMRU5CUVVOdVN5eEZRVUZGUXl4TlFVRkdMRU5CUVZOdlN5eFBRVUV2UWl4RlFVRjFRenRCUVVGRGNrc3NZMEZCUlcxTExFOUJRVVlzUTBGQlZUWlhMRmRCUVZZc1IwRkJjMElzUTBGQlF5eERRVUYyUWl4RFFVRjVRaXhKUVVGSmVHaENMRWxCUVVWM1JDeFRRVUZUT0dRc1VVRkJWQ3hEUVVGclFrTXNTVUZCYkVJc1EwRkJkVUkzVEN4UFFVRjJRaXhEUVVFclFpeEhRVUV2UWl4RlFVRnRReXhGUVVGdVF5eERRVUZPTEVOQlFUWkRMRWxCUVVjeFZpeERRVUZJTEVWQlFVc3NTMEZCU1N4SlFVRkpReXhKUVVGRkxFTkJRVTRzUlVGQlVYbENMRWxCUVVWc1FpeEZRVUZGUnl4TlFVRkdMRU5CUVZOeFFpeE5RVUYyUWl4RlFVRTRRaTlDTEVsQlFVVjVRaXhEUVVGb1F5eEZRVUZyUTNwQ0xFZEJRV3hETEVWQlFYTkRPMEZCUVVNc2EwSkJRVWxETEVsQlFVVk5MRVZCUVVWSExFMUJRVVlzUTBGQlUwTXNSVUZCVkN4RFFVRlpXQ3hEUVVGYUxFTkJRVTQ3UVVGQlFTeHJRa0ZCY1VKRkxFbEJRVVZFTEVWQlFVVlpMRWxCUVVZc1EwRkJUeXhYUVVGUUxFdEJRWEZDV2l4RlFVRkZXU3hKUVVGR0xFTkJRVThzWTBGQlVDeERRVUUxUXl4RFFVRnRSU3hKUVVGSFdDeE5RVUZKU0N4RFFVRktMRWxCUVU4c1EwRkJRMFVzUlVGQlJUaFhMRkZCUVVZc1EwRkJWM2hYTEVWQlFVVkRMRTFCUVVZc1EwRkJVMnRQTEcxQ1FVRndRaXhEUVVGWUxFVkJRVzlFTzBGQlFVTXNiMEpCUVVsMlR5eEpRVUZGUml4RlFVRkZhMWdzUzBGQlJpeEZRVUZPTEVOQlFXZENOVmNzUlVGQlJYZFlMRTlCUVVZc1EwRkJWVFZZTEVOQlFWWXNSVUZCV1N4RFFVRmFMRVZCUVdOSkxFVkJRVVZETEUxQlFVWXNRMEZCVTJkUkxHdENRVUYyUWl4RlFVRXdReXhEUVVGRExFTkJRVE5ETzBGQlFUaERPMEZCUVVNc1pVRkJSV2hSTEUxQlFVWXNRMEZCVTIxTExHbENRVUZVTEVsQlFUUkNjRXNzUlVGQlJXMUxMRTlCUVVZc1EwRkJWU3RQTEZsQlFWWXNSVUZCTlVJN1FVRkJjVVE3UVVGQlF5eFRRVVI1YmpoQ0xFVkJRM2h1T0VKblNTeFRRVUZSTEcxQ1FVRlZPMEZCUVVOc2FFSXNXVUZCUlVNc1RVRkJSaXhEUVVGVGJVc3NhVUpCUVZRc1NVRkJORUp3U3l4RlFVRkZiVXNzVDBGQlJpeERRVUZWSzA4c1dVRkJWaXhEUVVGMVFpeERRVUZETEVOQlFYaENMRU5CUVRWQ08wRkJRWFZFTEZOQlJEaHBPRUlzUlVGQmVHNDNRaXhGUVVOd1lteGFMRVZCUVVWeFN5eFBRVUZHTEVkQlFWVXNSVUZCUXpSWExFMUJRVXNzWjBKQlFWVTdRVUZCUXl4alFVRkhhbWhDTEVWQlFVVkRMRTFCUVVZc1EwRkJVMjlMTEU5QlFWb3NSVUZCYjBJN1FVRkJReXhuUWtGQlJ5eERRVUZETTBrc1QwRkJUekpKTEU5QlFWSXNTVUZCYVVJc1EwRkJRek5KTEU5QlFVOHlTU3hQUVVGUUxFTkJRV1U0Vnl4VFFVRndReXhGUVVFNFF5eFBRVUZQYm1oQ0xFVkJRVVZETEUxQlFVWXNRMEZCVTI5TExFOUJRVlFzUjBGQmFVSXNRMEZCUXl4RFFVRnNRaXhGUVVGdlFpeE5RVUZMY2tzc1JVRkJSVU1zVFVGQlJpeERRVUZUYTBzc1QwRkJWQ3hIUVVGcFFpeERRVUZETEVOQlFYWkNMRU5CUVROQ0xFTkJRWEZFYmtzc1JVRkJSWEZMTEU5QlFVWXNRMEZCVlRKWExGZEJRVllzUjBGQmMwSXNRMEZCUXl4RFFVRjJRaXhGUVVGNVFpeExRVUZMU1N4TFFVRk1MRWRCUVZjc1MwRkJTME1zWVVGQlRDeEZRVUZ3UXl4RlFVRjVSQ3hEUVVGRExFdEJRVXRFTEV0QlFVd3NRMEZCVjBVc1IwRkJXQ3hKUVVGblFpeExRVUZMUml4TFFVRk1MRU5CUVZkSExFdEJRVFZDTEUxQlFYRkRMRXRCUVV0RExHRkJRVXdzUTBGQmJVSXNRMEZCYmtJc1JVRkJjVUlzUzBGQlMwb3NTMEZCVEN4RFFVRlhSeXhMUVVGb1F5eEZRVUZ6UTNab1FpeEZRVUZGUXl4TlFVRkdMRU5CUVZOblVTeHJRa0ZCTDBNc1IwRkJiVVZxVVN4RlFVRkZReXhOUVVGR0xFTkJRVk54U3l4WlFVRlVMRWxCUVhWQ05Va3NUMEZCVHl0bUxHZENRVUZRTEVOQlFYZENMRlZCUVhoQ0xFVkJRVzFETEV0QlFVdERMR3RDUVVGNFF5eERRVUV2U0N4RFFVRjZSRHRCUVVGeFVEdEJRVUZETEZOQlFTOVlMRVZCUVdkWlFTeHZRa0ZCYlVJc09FSkJRVlU3UVVGQlF6Rm9RaXhaUVVGRmNVc3NUMEZCUml4RFFVRlZLMWNzUzBGQlZpeEhRVUZuUW5Cb1FpeEZRVUZGY1Vzc1QwRkJSaXhEUVVGVloxZ3NZVUZCVml4RlFVRm9RaXhGUVVFd1EzSm9RaXhGUVVGRmNVc3NUMEZCUml4RFFVRlZiVmdzWVVGQlZpeERRVUYzUW5ob1FpeEZRVUZGUXl4TlFVRkdMRU5CUVZNeVNDeExRVUZxUXl4RlFVRjFRelZJTEVWQlFVVnhTeXhQUVVGR0xFTkJRVlVyVnl4TFFVRldMRU5CUVdkQ1J5eExRVUYyUkN4RlFVRTJSQ3hEUVVGRExFTkJRVGxFTEVOQlFURkRPMEZCUVRKSExGTkJRWHBuUWl4RlFVRXdaMEpHTEdWQlFXTXNlVUpCUVZVN1FVRkJReXhqUVVGSk4yaENMRWxCUVVWclF5eFBRVUZQYjJZc1VVRkJVQ3hEUVVGblFtRXNVVUZCYUVJc1EwRkJlVUpETEV0QlFYcENMRU5CUVN0Q0xFTkJRUzlDTEVWQlFXdEROVVVzUzBGQmJFTXNRMEZCZDBNc1IwRkJlRU1zUTBGQlRqdEJRVUZCTEdOQlFXMUVkbVFzU1VGQlJVUXNSVUZCUldkRExFMUJRWFpFTEVOQlFUaEVMRTlCUVUwc1JVRkJRemhtTEV0QlFVazVhRUlzUlVGQlJVTXNTVUZCUlN4RFFVRktMRU5CUVV3c1JVRkJXVGhvUWl4UFFVRk5MMmhDTEVWQlFVVkRMRWxCUVVVc1EwRkJTaXhEUVVGc1FpeEZRVUZPTzBGQlFXZERMRk5CUVdwdlFpeEZRVUZyYjBJd1l5eFpRVUZYTEc5Q1FVRlRNMk1zUTBGQlZDeEZRVUZYUXl4RFFVRllMRVZCUVdFN1FVRkJReXhqUVVGSFR5eEZRVUZGY1Vzc1QwRkJSaXhEUVVGVk1sY3NWMEZCVml4SlFVRjFRbWhvUWl4RlFVRkZReXhOUVVGR0xFTkJRVk52U3l4UFFVRnVReXhGUVVFeVF6dEJRVUZETEdkQ1FVRkpia29zU1VGQlJXeENMRVZCUVVWSExFMUJRVVlzUTBGQlUwTXNSVUZCVkN4RFFVRlpXQ3hEUVVGYUxFTkJRVTQ3UVVGQlFTeG5Ra0ZCY1VKRExFbEJRVVVzUzBGQlMyMXBRaXhQUVVGTUxFTkJRV0V6WjBJc1JVRkJSVm9zU1VGQlJpeERRVUZQTEdOQlFWQXNRMEZCWWl4RFFVRjJRaXhEUVVFMFJHOUNMRTlCUVU5dlppeFJRVUZRTEVOQlFXZENZU3hSUVVGb1FpeERRVUY1UWtjc1VVRkJla0lzUTBGQmEwTjBhVUlzUTBGQmJFTXNUVUZCZFVORkxFbEJRVVZHTEVsQlFVVXNSMEZCUml4SFFVRk5SU3hEUVVFdlF5eEhRVUZyUkUwc1JVRkJSVU1zVFVGQlJpeERRVUZUY1Vzc1dVRkJWQ3hIUVVGelFqVkpMRTlCUVU4eVNTeFBRVUZRTEVOQlFXVkRMRmxCUVdZc1EwRkJORUlzU1VGQk5VSXNSVUZCYVVNc1NVRkJha01zUlVGQmMwTTFTeXhEUVVGMFF5eERRVUYwUWl4SFFVRXJSR2RETEU5QlFVOHlTU3hQUVVGUUxFTkJRV1U0Vnl4VFFVRm1MRU5CUVhsQ0xFbEJRWHBDTEVWQlFUaENMRWxCUVRsQ0xFVkJRVzFEZW1oQ0xFTkJRVzVETEVOQlFXcElPMEZCUVhWS08wRkJRVU1zVTBGQk16VkNMRVZCUVRRMVFtMXBRaXhUUVVGUkxHbENRVUZUY21sQ0xFTkJRVlFzUlVGQlZ6dEJRVUZETEdsQ1FVRlBRU3hGUVVGRksyUXNVVUZCUml4SFFVRmhjR0VzVjBGQllpeEhRVUV5UWl0U0xFOUJRVE5DTEVOQlFXMURMRTFCUVc1RExFVkJRVEJETEVkQlFURkRMRVZCUVN0RFFTeFBRVUV2UXl4RFFVRjFSQ3hYUVVGMlJDeEZRVUZ0UlN4RlFVRnVSU3hGUVVGMVJVRXNUMEZCZGtVc1EwRkJLMFVzVVVGQkwwVXNSVUZCZDBZc1IwRkJlRVlzUlVGQk5rWkJMRTlCUVRkR0xFTkJRWEZITEV0QlFYSkhMRVZCUVRKSExFVkJRVE5ITEVWQlFTdEhRU3hQUVVFdlJ5eERRVUYxU0N4TFFVRjJTQ3hGUVVFMlNDeEZRVUUzU0N4RFFVRlFPMEZCUVhkSkxGTkJRWGhxUXl4RlFVRjVha056VFN4bFFVRmpMSFZDUVVGVGFHbENMRU5CUVZRc1JVRkJWME1zUTBGQldDeEZRVUZoZVVJc1EwRkJZaXhGUVVGbE8wRkJRVU1zWTBGQlIzcENMRU5CUVVnc1JVRkJTeXhMUVVGSkxFbEJRVWxETEVsQlFVVXNRMEZCVGl4RlFVRlJReXhKUVVGRlN5eEZRVUZGUnl4TlFVRkdMRU5CUVZOeFFpeE5RVUYyUWl4RlFVRTRRamxDTEVsQlFVVkRMRU5CUVdoRExFVkJRV3REUkN4SFFVRnNReXhGUVVGelF6dEJRVUZETEdkQ1FVRkpSU3hKUVVGRlNTeEZRVUZGUnl4TlFVRkdMRU5CUVZORExFVkJRVlFzUTBGQldWWXNRMEZCV2l4RFFVRk9PMEZCUVVFc1owSkJRWEZDU3l4SlFVRkZMRXRCUVVzNGFFSXNUMEZCVEN4RFFVRmhhbWxDTEVWQlFVVlZMRWxCUVVZc1EwRkJUeXhqUVVGUUxFTkJRV0lzUTBGQmRrSXNRMEZCTkVRc1NVRkJSMUFzVFVGQlNVNHNRMEZCU2l4SlFVRlBMRU5CUVVOSExFVkJRVVUwVnl4UlFVRkdMRU5CUVZkNFZ5eEZRVUZGUXl4TlFVRkdMRU5CUVZOclR5eHRRa0ZCY0VJc1EwRkJXQ3hGUVVGdlJEdEJRVUZETEd0Q1FVRkpiRTRzU1VGQlJYSkNMRVZCUVVWbldDeExRVUZHTEVWQlFVNHNRMEZCWjBJMVZ5eEZRVUZGZDFnc1QwRkJSaXhEUVVGVmRsY3NRMEZCVml4RlFVRlpla0lzUTBGQldpeEZRVUZqTUVJc1EwRkJaRHRCUVVGcFFqdEJRVUZETEZkQlFTOU1MRTFCUVc5TmJFSXNSVUZCUlhkWUxFOUJRVVlzUTBGQlZTeERRVUZXTEVWQlFWbG9XU3hEUVVGYUxFVkJRV013UWl4RFFVRmtPMEZCUVdsQ0xGTkJRVFY1UXl4RlFVUXdZU3hGUVVOdk5FSnNRaXhGUVVGRksyaENMSE5DUVVGR0xFZEJRWGxDTEZsQlFWVTdRVUZCUXk5b1FpeFZRVUZGUXl4TlFVRkdMRU5CUVZNclNpeGxRVUZVTEVkQlFYbENMRU5CUVVNc1EwRkJNVUlzUlVGQk5FSjRTeXhGUVVGRmQwUXNVVUZCUml4RlFVRlphMlFzUjBGQldpeERRVUZuUWl4VFFVRm9RaXhGUVVFd1FqZGtMRU5CUVRGQ0xFTkJRVFZDTzBGQlFYbEVMRTlCUkdvclFpeEZRVU5ySzBKeVF5eEZRVUZGWjJsQ0xIRkNRVUZHTEVkQlFYZENMRmxCUVZVN1FVRkJRMmhwUWl4VlFVRkZReXhOUVVGR0xFTkJRVk1yU2l4bFFVRlVMRWRCUVhsQ0xFTkJRVU1zUTBGQk1VSXNSVUZCTkVKNFN5eEZRVUZGZDBRc1VVRkJSaXhGUVVGWloyUXNSVUZCV2l4RFFVRmxMRk5CUVdZc1JVRkJlVUl6WkN4RFFVRjZRaXhEUVVFMVFqdEJRVUYzUkN4UFFVUTNha01zUlVGRE9HcERja01zUlVGQlJYRkhMRlZCUVVZc1IwRkJZU3hGUVVGRE5HSXNUMEZCVFN4RFFVRkRMRU5CUVZJc1JVRkJWVzVpTEdkQ1FVRm5RaXhKUVVGSmNFWXNUMEZCVDJ0R0xFbEJRVmdzUlVGQlJDeERRVUZyUWtNc1QwRkJiRUlzUlVGQmVrSXNSVUZFTTJ0RExFVkJRMmx2UXpkSExFVkJRVVZETEUxQlFVWXNRMEZCVTJkTExHbENRVUZVTEV0QlFUWkNha3NzUlVGQlJYRkhMRlZCUVVZc1EwRkJZVFJpTEV0QlFXSXNSMEZCYlVKc1N5eFZRVUZWYlVzc1UwRkJWaXhEUVVGdlFtaGlMRTlCUVhCQ0xFTkJRVFJDTEZOQlFUVkNMRWxCUVhWRExFTkJRVU1zUTBGQmVFTXNSMEZCTUVNc1owSkJRVEZETEVkQlFUSkVMRmxCUVZVN1FVRkJReXhaUVVGSk1VZ3NTVUZCUlN4aFFVRlpkMFFzVVVGQmJFSXNRMEZCTWtJc1NVRkJSeXhEUVVGRGVFUXNRMEZCU2l4RlFVRk5PMEZCUVVNc1kwRkJTVU1zU1VGQlJYVkVMRk5CUVZOdFppeGhRVUZVTEVOQlFYVkNMRXRCUVhaQ0xFTkJRVTRzUTBGQmIwTXhhVUlzUlVGQlJUSnBRaXhaUVVGR0xFTkJRV1VzVTBGQlppeEZRVUY1UWl4VFFVRjZRaXhIUVVGdlF6VnBRaXhKUVVGRkxHTkJRVmtzVDBGQlQwTXNSVUZCUlRScFFpeFBRVUV6UkR0QlFVRnRSU3huUWtGQlRTeERRVUZETjJsQ0xFTkJRVVFzU1VGQlNYZEVMRk5CUVZOelppeGpRVUZpTEVsQlFUWkNkR1lzVTBGQlUzTm1MR05CUVZRc1EwRkJkMEpETEZWQlFYSkVMRWxCUVdsRmRtWXNVMEZCVTNObUxHTkJRVlFzUTBGQmQwSkRMRlZCUVhoQ0xFTkJRVzFETEVWQlFXNURMRVZCUVhORExFVkJRWFJETEUxQlFUUkRMRU5CUVVNc1EwRkJPVWNzUzBGQmEwZ3ZhVUlzU1VGQlJYZEVMRk5CUVZOelppeGpRVUZVTEVOQlFYZENReXhWUVVGNFFpeERRVUZ0UXl4alFVRnVReXhGUVVGclJDeExRVUZzUkN4RFFVRndTQ3hIUVVFNFN5OXBRaXhEUVVGd1REdEJRVUZ6VEN4UFFVRXhWU3hMUVVFMlZTeFBRVUUzVlN4SFFVRnhWaXhaUVVGb1l5eERRVVJxYjBNc1JVRkRLMnRFVVN4RlFVRkZkMmxDTEhkQ1FVRkdMRWRCUVRKQ0xGbEJRVlU3UVVGQlF5eFpRVUZITEVOQlFVTjRhVUlzUlVGQlJYRkhMRlZCUVVZc1EwRkJZVFJpTEV0QlFXcENMRVZCUVhWQ0xFOUJRVTBzUTBGQlF5eERRVUZRTEVOQlFWTXNTVUZCU1hocFFpeEpRVUZGVHl4RlFVRkZiMFFzVTBGQlVpeERRVUZyUWl4UFFVRk5MR2RDUVVGamNFUXNSVUZCUlVNc1RVRkJSaXhEUVVGVGFVc3NjMEpCUVhaQ0xFdEJRV2RFZWtzc1NVRkJSVVFzUlVGQlJWRXNSVUZCUlVNc1RVRkJSaXhEUVVGVGFVc3NjMEpCUVZnc1EwRkJiRVFzUjBGQmMwWjZTeXhGUVVGRmVXZENMRWRCUVVZc1EwRkJUV3huUWl4RlFVRkZjVWNzVlVGQlJpeERRVUZoTkdJc1MwRkJia0lzUlVGQmVVSTNZeXhEUVVGNlFpeERRVUYwUml4RlFVRnJTSEJHTEVWQlFVVkRMRTFCUVVZc1EwRkJVMmRMTEdsQ1FVRlVMRWRCUVRKQ0xFTkJRVU1zUTBGQk9Va3NSVUZCWjBvc1EwRkJReXhEUVVGMlNqdEJRVUY1U2l4UFFVUm9NRVFzUlVGRGFUQkVha3NzUlVGQlJYbHBRaXgxUWtGQlJpeEhRVUV3UWl4WlFVRlZPMEZCUVVNc1dVRkJSeXhEUVVGRGVtbENMRVZCUVVWeFJ5eFZRVUZHTEVOQlFXRTBZaXhMUVVGcVFpeEZRVUYxUWl4UFFVRk5MRU5CUVVNc1EwRkJVQ3hEUVVGVExFbEJRVWw0YVVJc1NVRkJSVThzUlVGQlJXOUVMRk5CUVZJc1EwRkJhMElzVDBGQlRTeG5Ra0ZCWTNCRUxFVkJRVVZETEUxQlFVWXNRMEZCVTJsTExITkNRVUYyUWl4TFFVRm5SSHBMTEVsQlFVVkVMRVZCUVVWUkxFVkJRVVZETEUxQlFVWXNRMEZCVTJsTExITkNRVUZZTEVOQlFXeEVMRWRCUVhOR2Vrc3NSVUZCUlhWblFpeEZRVUZHTEVOQlFVdG9aMElzUlVGQlJYRkhMRlZCUVVZc1EwRkJZVFJpTEV0QlFXeENMRVZCUVhkQ04yTXNRMEZCZUVJc1EwRkJkRVlzUlVGQmFVaHdSaXhGUVVGRlF5eE5RVUZHTEVOQlFWTm5TeXhwUWtGQlZDeEhRVUV5UWl4RFFVRkRMRU5CUVRkSkxFVkJRU3RKTEVOQlFVTXNRMEZCZEVvN1FVRkJkMG9zVDBGRWFHcEZMRVZCUTJscVJXcExMRVZCUVVWMVNpeFJRVUZHTEVkQlFWY3NSVUZCUTI5VUxHTkJRV0VzZDBKQlFWVTdRVUZCUXpOakxGbEJRVVZ2UkN4VFFVRkdMRU5CUVZsNVR5eFJRVUZhTEVOQlFYRkNMRFJGUVVGeVFpeEZRVUZ0UjNSUkxFbEJRVzVITEVOQlFYZEhMRmxCUVZVN1FVRkJRekJHTEdOQlFVVXNTVUZCUml4RlFVRlBha2dzUlVGQlJYZFRMRkZCUVZRN1FVRkJiVUlzVjBGQmRFa3NSMEZCZDBsNFV5eEZRVUZGUnl4TlFVRkdMRU5CUVZOdlFpeEpRVUZVTEVOQlFXTXNXVUZCVlR0QlFVRkRMR2RDUVVGSk9VSXNTVUZCUlVRc1JVRkJSU3hKUVVGR0xFTkJRVTRzUTBGQlkwTXNSVUZCUlhOVExFbEJRVVlzUTBGQlR5dzBSVUZCVUN4RlFVRnhSbmhSTEVsQlFYSkdMRU5CUVRCR0xGbEJRVlU3UVVGQlF6QkdMR2RDUVVGRkxFbEJRVVlzUlVGQlQzQklMRXRCUVV0MVdDeEhRVUZNTEVOQlFWTjJXQ3hMUVVGTE1sWXNSMEZCVEN4RFFVRlRMMVlzUlVGQlJTeERRVUZHTEVWQlFVc3JVeXhSUVVGa0xFVkJRWFZDTEVOQlFVTXNRMEZCZUVJc1EwRkJWQ3hGUVVGdlF5eERRVUZ3UXl4RFFVRlFPMEZCUVN0RExHRkJRWEJLTzBGQlFYTktMRmRCUVRkTUxFTkJRWGhKTzBGQlFYVlZMRk5CUVdoWExFVkJRV2xYYTBzc1pVRkJZeXgxUWtGQlUycGtMRU5CUVZRc1JVRkJWenRCUVVGRExHVkJRVXNzUTBGQlRDeExRVUZUUVN4RFFVRlVMRXRCUVdGQkxFbEJRVVZQTEVWQlFVVkRMRTFCUVVZc1EwRkJVekpJTEV0QlFYaENMRWRCUVN0Q05VZ3NSVUZCUlc5RUxGTkJRVVlzUTBGQldUSlBMRWxCUVZvc1EwRkJhVUlzTkVWQlFXcENMRVZCUVN0R2VGRXNTVUZCTDBZc1EwRkJiMGNzV1VGQlZUdEJRVUZETEdkQ1FVRkpUQ3hKUVVGRk1VSXNSVUZCUlN4SlFVRkdMRU5CUVU0N1FVRkJRU3huUWtGQlkwVXNTVUZCUlhsSUxGTkJRVk5xUnl4RlFVRkZXaXhKUVVGR0xFTkJRVThzSzBKQlFWQXNRMEZCVkN4RlFVRnBSQ3hGUVVGcVJDeExRVUZ6UkdJc1EwRkJkRVVzUTBGQmQwVXNUVUZCU1VFc1EwRkJTaXhMUVVGUlF5eEpRVUZGTEVOQlFWWXNSMEZCWVhkQ0xFVkJRVVUwVml4VlFVRkdMRU5CUVdGd1dDeERRVUZpTEVOQlFXSTdRVUZCTmtJc1YwRkJjRTRzUTBGQkwwSTdRVUZCY1ZBc1UwRkJhRzVDTEVWQlJEVnFSU3hGUVVNNGNVWk5MRVZCUVVWM1NpeEpRVUZHTEVkQlFVOHNSVUZCUTJ0YUxFOUJRVTBzUTBGQlVDeEZRVUZUUXl4alFVRmhMRU5CUVhSQ0xFVkJRWGRDUXl4WFFVRlZMRU5CUVVNc1EwRkJia01zUlVGQmNVTkRMRk5CUVZFc1JVRkJRME1zVDBGQlRTeExRVUZMTEVOQlFWb3NSVUZCWTBNc1dVRkJWeXhMUVVGTExFTkJRVGxDTEVWQlFXZERReXhoUVVGWkxFdEJRVXNzUTBGQmFrUXNSVUZCYlVSRExFOUJRVTBzUzBGQlN5eERRVUU1UkN4RlFVRm5SVU1zVjBGQlZTeExRVUZMTEVOQlFTOUZMRVZCUVdsR2Vsb3NVMEZCVVhwS0xFVkJRVVZETEUxQlFVWXNRMEZCVTNkS0xFOUJRV3hITEVWQlFUZERMRVZCUVhkS2Qxb3NUMEZCVFN4RlFVRkRMMFFzVjBGQlZTeExRVUZMTEVOQlFXaENMRVZCUVd0Q2FVVXNVMEZCVVN4TFFVRkxMRU5CUVM5Q0xFVkJRV2xEZUVrc1ZVRkJVeXhMUVVGTExFTkJRUzlETEVWQlFXbEVReXhWUVVGVExFdEJRVXNzUTBGQkwwUXNSVUZCYVVWM1NTeE5RVUZMTEV0QlFVc3NRMEZCTTBVc1JVRkJOa1ZETEUxQlFVc3NTMEZCU3l4RFFVRjJSaXhGUVVGNVJrTXNUVUZCU3l4TFFVRkxMRU5CUVc1SExFVkJRWEZIUXl4TlFVRkxMRXRCUVVzc1EwRkJMMGNzUlVGQmFVaDJaaXhQUVVGTkxFdEJRVXNzUTBGQk5VZ3NSVUZCT0VoRExGRkJRVThzUzBGQlN5eERRVUV4U1N4RlFVRTBTWGRYTEZGQlFVOHNTMEZCU3l4RFFVRjRTaXhGUVVFd1NrTXNVVUZCVHl4TFFVRkxMRU5CUVhSTExFVkJRWGRMT0Vrc1kwRkJZU3hGUVVGeVRDeEZRVUYzVEVNc1owSkJRV1VzUlVGQmRrMHNSVUZCT1Vvc1JVRkJlVmRvVWl4VlFVRlRMRVZCUVVOcVF5eEhRVUZGTEV0QlFVc3NRMEZCVWl4RlFVRlZSQ3hIUVVGRkxFdEJRVXNzUTBGQmFrSXNSVUZCYlVKdFZDeGxRVUZqTEV0QlFVc3NRMEZCZEVNc1JVRkJkME5ETEdWQlFXTXNTMEZCU3l4RFFVRXpSQ3hGUVVFMlJFTXNWVUZCVXl4TFFVRkxMRU5CUVRORkxFVkJRV3hZTEVWQlFXZGpReXd5UWtGQk1FSXNiVU5CUVZOeWEwSXNRMEZCVkN4RlFVRlhPMEZCUVVNc1kwRkJSMEVzUlVGQlJUQmlMR0ZCUVVZc1EwRkJaMEl4V2l4TlFVRm9RaXhIUVVGMVFpeERRVUV4UWl4RlFVRTBRaXhQUVVGUExFTkJRVkFzUTBGQlV5eEpRVUZKTDBJc1NVRkJSVVFzUlVGQlJUQmlMR0ZCUVVZc1EwRkJaMElzUTBGQmFFSXNSVUZCYlVKRExFdEJRWHBDTzBGQlFVRXNZMEZCSzBKcVlTeEpRVUZGTVVJc1JVRkJSVEJpTEdGQlFVWXNRMEZCWjBJc1EwRkJhRUlzUlVGQmJVSkZMRXRCUVhCRU8wRkJRVUVzWTBGQk1FUXhZaXhKUVVGRlJpeEZRVUZGTUdJc1lVRkJSaXhEUVVGblFpeERRVUZvUWl4RlFVRnRRa01zUzBGQkwwVTdRVUZCUVN4alFVRnhSbmhpTEVsQlFVVklMRVZCUVVVd1lpeGhRVUZHTEVOQlFXZENMRU5CUVdoQ0xFVkJRVzFDUlN4TFFVRXhSeXhEUVVGblNDeFBRVUZQZG1Jc1MwRkJTMmxyUWl4SlFVRk1MRU5CUVZWcWEwSXNTMEZCU3poaUxFZEJRVXdzUTBGQlUycGpMRWxCUVVWRUxFTkJRVmdzUlVGQllTeERRVUZpTEVsQlFXZENTU3hMUVVGTE9HSXNSMEZCVEN4RFFVRlRhR01zU1VGQlJYVkNMRU5CUVZnc1JVRkJZU3hEUVVGaUxFTkJRVEZDTEVOQlFWQTdRVUZCYTBRc1UwRkJOM0ZDTEVWQlFUaHhRalpwUWl4blFrRkJaU3gzUWtGQlUzUnJRaXhEUVVGVUxFVkJRVmM3UVVGQlF5eGpRVUZKZVVJc1NVRkJSV3hDTEVWQlFVVjNTaXhKUVVGU0xFTkJRV0VzU1VGQlJ5eERRVUZEZUVvc1JVRkJSWGRTTEU5QlFVWXNRMEZCVlhkVExGRkJRV1FzUlVGQmRVSTdRVUZCUXl4blFrRkJSeXhwUWtGQlpYWnJRaXhGUVVGRmRXSXNTVUZCYWtJc1NVRkJkVUlzYVVKQlFXVjJZaXhGUVVGRmRXSXNTVUZCYWtJc1NVRkJkVUoyWWl4RlFVRkZlV0lzWVVGQlJpeERRVUZuUWpGYUxFMUJRV2hDTEVkQlFYVkNMRU5CUVhoRkxFVkJRVEJGTEU5QlFVOU9MRVZCUVVVeWFFSXNUMEZCUml4RFFVRlZiMElzVlVGQlZpeEhRVUZ4UWk5cFFpeEZRVUZGTW1sQ0xIbENRVUZHTEVOQlFUUkNjR3RDTEVOQlFUVkNMRU5CUVhKQ08wRkJRVzlFTEdWQlFVY3NSVUZCUlhsQ0xFVkJRVVV5YUVJc1QwRkJSaXhEUVVGVlF5eExRVUZXTEVsQlFXbENOV2hDTEVWQlFVVXlhRUlzVDBGQlJpeERRVUZWUXl4TFFVRldMRU5CUVdkQ2RHaENMRTFCUVdwRExFdEJRVEJEVGl4RlFVRkZNbWhDTEU5QlFVWXNRMEZCVlVNc1MwRkJWaXhIUVVGblFuUnFRaXhGUVVGRkxFbEJRVVlzUTBGQmFFSXNSVUZCZDBJc1RVRkJTVEJDTEVWQlFVVXlhRUlzVDBGQlJpeERRVUZWUXl4TFFVRldMRU5CUVdkQ2RHaENMRTFCUVhCQ0xFdEJRVFpDVGl4RlFVRkZNbWhDTEU5QlFVWXNRMEZCVlVNc1MwRkJWaXhIUVVGblFqbHBRaXhGUVVGRlJ5eE5RVUZHTEVOQlFWTkRMRVZCUVZRc1EwRkJXVW9zUlVGQlJVc3NWMEZCWkN4RFFVRTNReXhEUVVGNFFpeEZRVUZwUjJFc1JVRkJSVEpvUWl4UFFVRkdMRU5CUVZWSkxFdEJRVllzUjBGQlowSXZhRUlzUlVGQlJUSm9RaXhQUVVGR0xFTkJRVlZETEV0QlFWWXNRMEZCWjBJdlVTeEpRVUZvUWl4RFFVRnhRaXhyUWtGQmNrSXNRMEZCYWtnc1JVRkJNRW8zVVN4RlFVRkZNbWhDTEU5QlFVWXNRMEZCVlVzc1UwRkJWaXhIUVVGdlFtaHBRaXhGUVVGRk1taENMRTlCUVVZc1EwRkJWVWtzUzBGQlZpeERRVUZuUW1sQ0xFMUJRV2hDTEVOQlFYVkNMRTFCUVVsc2EwSXNSVUZCUlVNc1RVRkJSaXhEUVVGVGRWQXNhMEpCUVhCRExFTkJRVGxMTEVWQlFYTlBkRThzUlVGQlJUSm9RaXhQUVVGR0xFTkJRVlZ3V2l4UFFVRldMRWRCUVd0Q2Rra3NSVUZCUlRKb1FpeFBRVUZHTEVOQlFWVkxMRk5CUVZZc1EwRkJiMEkxYVVJc1NVRkJjRUlzUTBGQmVVSXNhMEpCUVhwQ0xFdEJRVGhEVGl4RlFVRkZReXhOUVVGR0xFTkJRVk4zU2l4UFFVRXZVeXhGUVVGMVZDeE5RVUZKZGtrc1JVRkJSVEpvUWl4UFFVRkdMRU5CUVZWTExGTkJRVllzUTBGQmIwSXhhRUlzVFVGQmVsZ3NRMEZCUml4RFFVRklMRVZCUVhWWkxFOUJRVThzVFVGQlMwNHNSVUZCUlRKb1FpeFBRVUZHTEVOQlFWVkpMRXRCUVZZc1IwRkJaMElzUzBGQlN5eERRVUV4UWl4RFFVRlFMRU5CUVc5REwyaENMRVZCUVVVeWFFSXNUMEZCUml4RFFVRlZTU3hMUVVGV0xFTkJRV2RDYmswc1ZVRkJhRUlzUTBGQk1rSXNRMEZCTTBJc1IwRkJPRUkxVml4RlFVRkZNR2hDTEZOQlFVWXNSMEZCV1N4RFFVRkRMRU5CUVRORE8wRkJRVFpETEZOQlFUTXdReXhGUVVFME1FTjFRaXhwUWtGQlowSXNlVUpCUVZNemEwSXNRMEZCVkN4RlFVRlhPMEZCUVVNc1kwRkJTVU1zU1VGQlJVOHNSVUZCUlhkS0xFbEJRVklzUTBGQllTeEpRVUZITEVOQlFVTjRTaXhGUVVGRmQxSXNUMEZCUml4RFFVRlZkMU1zVVVGQlpDeEZRVUYxUWp0QlFVRkRMR2RDUVVGSExHZENRVUZqZUd0Q0xFVkJRVVYzWWl4SlFVRm9RaXhKUVVGelFpeG5Ra0ZCWTNoaUxFVkJRVVYzWWl4SlFVRm9RaXhKUVVGelFuaGlMRVZCUVVVd1lpeGhRVUZHTEVOQlFXZENNVm9zVFVGQmFFSXNSMEZCZFVJc1EwRkJkRVVzUlVGQmQwVXNUMEZCVHk5Q0xFVkJRVVZ2YWtJc1QwRkJSaXhEUVVGVmRVSXNVMEZCVml4SFFVRnZRak5yUWl4RlFVRkZiMnRDTEhsQ1FVRkdMRU5CUVRSQ2NtdENMRU5CUVRWQ0xFTkJRWEJDTzBGQlFXMUVMR0ZCUVVWeGFrSXNUMEZCUml4RFFVRlZTU3hMUVVGV0xFbEJRV2xDTEUxQlFVbDRha0lzUlVGQlJXOXFRaXhQUVVGR0xFTkJRVlZKTEV0QlFWWXNRMEZCWjBKNmFFSXNUVUZCY2tNc1MwRkJPRU40UWl4RlFVRkZkMUlzVDBGQlJpeERRVUZWZDFNc1VVRkJWaXhIUVVGdFFuWnJRaXhGUVVGRmFXcENMRXRCUVVZc1IwRkJVV3hxUWl4RlFVRkZhMnBDTEV0QlFVWXNSMEZCVVdwcVFpeEZRVUZGYTJwQ0xGbEJRWEpETEVkQlFXdEViR3BDTEVWQlFVVnBha0lzUzBGQlJpeEhRVUZSYW1wQ0xFVkJRVVZ2YWtJc1QwRkJSaXhEUVVGVmRVSXNVMEZCVml4SFFVRnZRak5yUWl4RlFVRkZiMnBDTEU5QlFVWXNRMEZCVlc5Q0xGVkJRVGxDTEVkQlFYbERlR3RDTEVWQlFVVnJha0lzV1VGQmNrY3NSVUZCYTBoc2FrSXNSVUZCUldscVFpeExRVUZHTEVkQlFWRnFha0lzUlVGQlJXOXFRaXhQUVVGR0xFTkJRVlZ3V2l4UFFVRnNRaXhMUVVFMFFtaExMRVZCUVVWcGFrSXNTMEZCUml4SFFVRlJhbXBDTEVWQlFVVnZha0lzVDBGQlJpeERRVUZWY0Zvc1QwRkJWaXhIUVVGclFpeERRVUZzUWl4SFFVRnZRalZLTEV0QlFVczRZaXhIUVVGTUxFTkJRVk5zWXl4RlFVRkZhV3BDTEV0QlFVWXNSMEZCVVdwcVFpeEZRVUZGYjJwQ0xFOUJRVVlzUTBGQlZYQmFMRTlCUVd4Q0xFZEJRVEJDTEVOQlFXNURMRVZCUVhGRExFVkJRWEpETEVOQlFYaEVMRU5CUVd4SUxFVkJRVzlPYUVzc1JVRkJSV2xxUWl4TFFVRkdMRWRCUVZFeGFVSXNSVUZCUlVNc1RVRkJSaXhEUVVGVGVVb3NUMEZCYWtJc1MwRkJNa0pxU3l4RlFVRkZhV3BDTEV0QlFVWXNSMEZCVVRGcFFpeEZRVUZGUXl4TlFVRkdMRU5CUVZONVNpeFBRVUZVTEVkQlFXbENMRU5CUVdwQ0xFZEJRVzFDTjBvc1MwRkJTemhpTEVkQlFVd3NRMEZCVXpOaUxFVkJRVVZETEUxQlFVWXNRMEZCVTNsS0xFOUJRVlFzUjBGQmFVSnFTeXhGUVVGRmFXcENMRXRCUVc1Q0xFZEJRWGxDTEVOQlFXeERMRVZCUVc5RExFVkJRWEJETEVOQlFYUkVMRU5CUVhCT0xFVkJRVzFVYW1wQ0xFVkJRVVZ2YWtJc1QwRkJSaXhEUVVGVlNTeExRVUZXTEVOQlFXZENOMklzVTBGQmFFSXNRMEZCTUVJc09FSkJRVFJDTTBnc1JVRkJSV2xxUWl4TFFVRTVRaXhIUVVGdlF5eEhRVUU1UkN4RFFVRnFWenRCUVVGeFlTeFRRVUZ3TjBRc1JVRkJjVGRFTWtJc1kwRkJZU3h6UWtGQlV6ZHJRaXhEUVVGVUxFVkJRVmM3UVVGQlF5eGpRVUZKUXl4SlFVRkZUeXhGUVVGRmQwb3NTVUZCVWl4RFFVRmhMRU5CUVVONFNpeEZRVUZGZDFJc1QwRkJSaXhEUVVGVmQxTXNVVUZCV0N4TFFVRnpRaXhsUVVGaGVHdENMRVZCUVVWM1lpeEpRVUZtTEVsQlFYRkNMR1ZCUVdGNFlpeEZRVUZGZDJJc1NVRkJaaXhKUVVGeFFuaGlMRVZCUVVVNGEwSXNZMEZCUml4RFFVRnBRamxwUWl4TlFVRnFRaXhIUVVGM1FpeERRVUY0Uml4TFFVRTBSaTlDTEVWQlFVVnZha0lzVDBGQlJpeERRVUZWU1N4TFFVRldMRWxCUVdsQ0xFMUJRVWw0YWtJc1JVRkJSVzlxUWl4UFFVRkdMRU5CUVZWSkxFdEJRVllzUTBGQlowSjZhRUlzVFVGQmNrTXNTMEZCT0VNdlFpeEZRVUZGYVdwQ0xFdEJRVVlzUjBGQlVUZHBRaXhMUVVGTE1sWXNSMEZCVEN4RFFVRlRNMVlzUzBGQlMzVllMRWRCUVV3c1EwRkJVek5ZTEVWQlFVVnBha0lzUzBGQldDeEZRVUZwUW1wcVFpeEZRVUZGYjJwQ0xFOUJRVVlzUTBGQlZYQmFMRTlCUVROQ0xFTkJRVlFzUlVGQk5rTjZTaXhGUVVGRlF5eE5RVUZHTEVOQlFWTjVTaXhQUVVGMFJDeERRVUZTTEVWQlFYVkZha3NzUlVGQlJXOXFRaXhQUVVGR0xFTkJRVlZKTEV0QlFWWXNRMEZCWjBKdVRTeFZRVUZvUWl4RFFVRXlRamxYTEVWQlFVVkRMRTFCUVVZc1EwRkJVekpJTEV0QlFYQkRMRVZCUVRKRFVpeFRRVUV6UXl4RFFVRnhSQ3c0UWtGQk5FSXpTQ3hGUVVGRmFXcENMRXRCUVRsQ0xFZEJRVzlETEVkQlFYcEdMRU5CUVhaRkxFVkJRWEZMYW1wQ0xFVkJRVVZyYWtJc1dVRkJSaXhIUVVGbGJHcENMRVZCUVVWcGFrSXNTMEZCZEV3c1JVRkJORXhxYWtJc1JVRkJSVzFxUWl4VFFVRkdMRWRCUVZrc1EwRkJReXhEUVVGNlRTeEZRVUV5VFN4TlFVRkpibXBDTEVWQlFVVnBha0lzUzBGQlRpeExRVUZqYW1wQ0xFVkJRVVZ2YWtJc1QwRkJSaXhEUVVGVlF5eExRVUZXTEVkQlFXZENMRXRCUVVzc1EwRkJia01zUTBGQmVsQXNRMEZCTlVZN1FVRkJORmdzVTBGQmRqRkZMRVZCUVhjeFJYWkxMR05CUVdFc2MwSkJRVk12V1N4RFFVRlVMRVZCUVZkRExFTkJRVmdzUlVGQllUdEJRVUZETEdOQlFVbDVRaXhKUVVGRk1VSXNSVUZCUldkTExFbEJRVklzUTBGQllYUkpMRVZCUVVVeWFFSXNUMEZCUml4RFFVRlZTU3hMUVVGV0xFbEJRV2xDTEUxQlFVa3ZhRUlzUlVGQlJUSm9RaXhQUVVGR0xFTkJRVlZKTEV0QlFWWXNRMEZCWjBKNmFFSXNUVUZCY2tNc1MwRkJPRU5PTEVWQlFVVXJhRUlzUzBGQlJpeERRVUZSTDBRc1UwRkJVaXhMUVVGdlFpeGpRVUZaTVdZc1JVRkJSVFJUTEUxQlFVWXNRMEZCVTIxVExFVkJRWEpDTEVsQlFYbENPV3RDTEVWQlFVVjVSU3hqUVVGR0xFVkJRWHBDTEVWQlFUUkRhRVFzUlVGQlJTdG9RaXhMUVVGR0xFTkJRVkV2UkN4VFFVRlNMRWRCUVd0Q0xFTkJRVU1zUTBGQkwwUXNSVUZCYVVWb1pTeEZRVUZGSzJoQ0xFdEJRVVlzUTBGQlVVOHNXVUZCVWl4RFFVRnhRbWhVTEVOQlFYSkNMRWRCUVhWQ0xHbENRVUZsTDFFc1JVRkJSWFZpTEVsQlFXcENMRWRCUVhOQ2RtSXNSVUZCUlhsaUxHRkJRVVlzUTBGQlowSXNRMEZCYUVJc1JVRkJiVUpETEV0QlFYcERMRWRCUVN0RE1XSXNSVUZCUlRCaUxFdEJRWHBKTEVWQlFTdEphbUVzUlVGQlJTdG9RaXhMUVVGR0xFTkJRVkZQTEZsQlFWSXNRMEZCY1VKcVZDeERRVUZ5UWl4SFFVRjFRaXhwUWtGQlpUbFJMRVZCUVVWMVlpeEpRVUZxUWl4SFFVRnpRblppTEVWQlFVVjVZaXhoUVVGR0xFTkJRV2RDTEVOQlFXaENMRVZCUVcxQ1JTeExRVUY2UXl4SFFVRXJRek5pTEVWQlFVVXlZaXhMUVVFelR5eERRVUU1UXp0QlFVRnBVeXhUUVVGcWNVWXNSVUZCYTNGR05VTXNZVUZCV1N4eFFrRkJVMmhhTEVOQlFWUXNSVUZCVnp0QlFVRkRMR05CUVVsRExFbEJRVVZQTEVWQlFVVjNTaXhKUVVGU0xFTkJRV0VzU1VGQlJ5OUtMRVZCUVVWdmFrSXNUMEZCUml4RFFVRlZTU3hMUVVGV0xFbEJRV2xDTEUxQlFVbDRha0lzUlVGQlJXOXFRaXhQUVVGR0xFTkJRVlZKTEV0QlFWWXNRMEZCWjBKNmFFSXNUVUZCY2tNc1MwRkJPRU40UWl4RlFVRkZiMW9zVlVGQlJpeEhRVUZoTEVOQlFVTXNRMEZCWkN4RlFVRm5Rak5hTEVWQlFVVjNha0lzUzBGQlJpeERRVUZSTDBRc1UwRkJVaXhKUVVGdFFucG1MRVZCUVVWdmFrSXNUMEZCUml4RFFVRlZReXhMUVVFelJpeERRVUZJTEVWQlFYRkhPMEZCUVVOeWFrSXNZMEZCUlhkcVFpeExRVUZHTEVOQlFWRkZMRTlCUVZJc1MwRkJhMEl4YWtJc1JVRkJSWGRxUWl4TFFVRkdMRU5CUVZGcVppeExRVUZTTEVkQlFXTjJSU3hGUVVGRmIycENMRTlCUVVZc1EwRkJWVWtzUzBGQlZpeERRVUZuUWl4RFFVRm9RaXhGUVVGdFFqZERMRmRCUVdwRExFVkJRVFpETTJkQ0xFVkJRVVYzYWtJc1MwRkJSaXhEUVVGUmFHWXNUVUZCVWl4SFFVRmxlRVVzUlVGQlJXOXFRaXhQUVVGR0xFTkJRVlZKTEV0QlFWWXNRMEZCWjBJc1EwRkJhRUlzUlVGQmJVSjRUeXhaUVVFdlJTeEZRVUUwUm1oV0xFVkJRVVYzYWtJc1MwRkJSaXhEUVVGUmVFa3NUVUZCVWl4SFFVRmxlbUVzUlVGQlJUUmpMRmxCUVVZc1EwRkJaVzVrTEVWQlFVVnZha0lzVDBGQlJpeERRVUZWU3l4VFFVRldMRU5CUVc5Q0xFTkJRWEJDTEVOQlFXWXNSVUZCYzBNc1IwRkJkRU1zUzBGQk5FTXNRMEZCZGtvc1JVRkJlVXA2YWtJc1JVRkJSWGRxUWl4TFFVRkdMRU5CUVZGMlNTeE5RVUZTTEVkQlFXVXhZU3hGUVVGRk5HTXNXVUZCUml4RFFVRmxibVFzUlVGQlJXOXFRaXhQUVVGR0xFTkJRVlZMTEZOQlFWWXNRMEZCYjBJc1EwRkJjRUlzUTBGQlppeEZRVUZ6UXl4SFFVRjBReXhMUVVFMFF5eERRVUZ3VGl4RlFVRnpUbnBxUWl4RlFVRkZiMnBDTEU5QlFVWXNRMEZCVlVVc1ZVRkJWaXhIUVVGeFFuUnFRaXhGUVVGRmIycENMRTlCUVVZc1EwRkJWVU1zUzBGQlZpeERRVUZuUWl4RFFVRm9RaXhGUVVGdFFqRkRMRmRCUVRsUUxFVkJRVEJSTTJkQ0xFVkJRVVZ2YWtJc1QwRkJSaXhEUVVGVlJ5eFhRVUZXTEVkQlFYTkNkbXBDTEVWQlFVVnZha0lzVDBGQlJpeERRVUZWUXl4TFFVRldMRU5CUVdkQ0xFTkJRV2hDTEVWQlFXMUNjazhzV1VGQmJsUXNSVUZCWjFWb1ZpeEZRVUZGYjJwQ0xFOUJRVVlzUTBGQlZVc3NVMEZCVml4RFFVRnZRbkJOTEZWQlFYQkNMRU5CUVN0Q0xFTkJRUzlDTEVOQlFXaFZMRVZCUVd0WE9WY3NSVUZCUlRoRUxFZEJRVVlzUzBGQlVYSkZMRVZCUVVWM2FrSXNTMEZCUml4RFFVRlJlRWtzVFVGQlVpeEhRVUZsTEVOQlFVTm9ZaXhGUVVGRmQycENMRXRCUVVZc1EwRkJVWGhKTEUxQlFXaERMRU5CUVd4WExFVkJRVEJaZW1Fc1JVRkJSVGhFTEVkQlFVWXNTMEZCVVhKRkxFVkJRVVYzYWtJc1MwRkJSaXhEUVVGUmRra3NUVUZCVWl4SFFVRmxMRU5CUVVOcVlpeEZRVUZGZDJwQ0xFdEJRVVlzUTBGQlVYWkpMRTFCUVdoRExFTkJRVFZhTEVWQlFYRmpMRWxCUVVsNFdpeEpRVUZGZWtJc1JVRkJSWGRxUWl4TFFVRkdMRU5CUVZGcVppeExRVUZTTEVkQlFXTjJSU3hGUVVGRmFXcENMRXRCUVhSQ08wRkJRVUVzWjBKQlFUUkNhR3BDTEVsQlFVVkVMRVZCUVVWM2FrSXNTMEZCUml4RFFVRlJhR1lzVFVGQlVpeEhRVUZsZUVVc1JVRkJSV2xxUWl4TFFVRXZReXhEUVVGeFJDeEpRVUZITEVWQlFVVjRhRUlzU1VGQlJYcENMRVZCUVVWdmFrSXNUMEZCUml4RFFVRlZSU3hWUVVGYUxFbEJRWGRDY21wQ0xFbEJRVVZFTEVWQlFVVnZha0lzVDBGQlJpeERRVUZWUnl4WFFVRjBReXhEUVVGSUxFVkJRWE5FTzBGQlFVTXNhMEpCUVVkMmFrSXNSVUZCUlhkcVFpeExRVUZHTEVOQlFWRkhMRWxCUVZJc1IwRkJZWFpxUWl4TFFVRkxkVmdzUjBGQlRDeERRVUZUTTFnc1JVRkJSVzlxUWl4UFFVRkdMRU5CUVZWRkxGVkJRVllzUjBGQmNVSXNRMEZCY2tJc1IwRkJkVUkzYUVJc1NVRkJSU3hEUVVGc1F5eEZRVUZ2UXl4RFFVRndReXhEUVVGaUxFVkJRVzlFZWtJc1JVRkJSWGRxUWl4TFFVRkdMRU5CUVZGTExFbEJRVklzUjBGQllTeERRVUZETjJwQ0xFVkJRVVYzYWtJc1MwRkJSaXhEUVVGUlJ5eEpRVUV4UlN4RlFVRXJSVE5xUWl4RlFVRkZkMnBDTEV0QlFVWXNRMEZCVVVrc1NVRkJVaXhIUVVGaGVHcENMRXRCUVV0MVdDeEhRVUZNTEVOQlFWTXpXQ3hGUVVGRmIycENMRTlCUVVZc1EwRkJWVWNzVjBGQlZpeEhRVUZ6UWl4RFFVRjBRaXhIUVVGM1FuUnFRaXhKUVVGRkxFTkJRVzVETEVWQlFYRkRMRU5CUVhKRExFTkJRVFZHTEVWQlFXOUpSQ3hGUVVGRmQycENMRXRCUVVZc1EwRkJVVTBzU1VGQlVpeEhRVUZoTEVOQlFVTTVha0lzUlVGQlJYZHFRaXhMUVVGR0xFTkJRVkZKTEVsQlFURktMRVZCUVN0S05XcENMRVZCUVVWM2FrSXNTMEZCUml4RFFVRlJVU3hqUVVGU0xFTkJRWFZDYWxRc1EwRkJka0lzUjBGQmVVSXNaMEpCUVdOb1VpeEZRVUZGZDJJc1NVRkJhRUlzUjBGQmNVSjRZaXhGUVVGRk1HSXNZVUZCUml4RFFVRm5RaXhEUVVGb1FpeEZRVUZ0UWtNc1MwRkJlRU1zUjBGQk9FTXpZaXhGUVVGRk1tSXNTMEZCZUU4c1JVRkJPRTh4WWl4RlFVRkZkMnBDTEV0QlFVWXNRMEZCVVZFc1kwRkJVaXhEUVVGMVFteFVMRU5CUVhaQ0xFZEJRWGxDTEdkQ1FVRmpMMUVzUlVGQlJYZGlMRWxCUVdoQ0xFZEJRWEZDZUdJc1JVRkJSVEJpTEdGQlFVWXNRMEZCWjBJc1EwRkJhRUlzUlVGQmJVSkZMRXRCUVhoRExFZEJRVGhETldJc1JVRkJSVFJpTEV0QlFYWlVMRVZCUVRaVUxFTkJRVU16WWl4RlFVRkZkMnBDTEV0QlFVWXNRMEZCVVVVc1QwRkJWQ3hKUVVGclFpeERRVUZETVdwQ0xFVkJRVVZ0YWtJc1UwRkJjbFlzUlVGQksxWTdRVUZCUXl4dlFrRkJSelZwUWl4RlFVRkZNRU1zV1VGQlJpeE5RVUZyUWpkRExFdEJRVXRETEV0QlFVd3NRMEZCVjB3c1JVRkJSWGRxUWl4TFFVRkdMRU5CUVZGSExFbEJRVzVDTEUxQlFUSkNkbXBDTEV0QlFVdERMRXRCUVV3c1EwRkJWMHdzUlVGQlJYZHFRaXhMUVVGR0xFTkJRVkY0U1N4TlFVRnVRaXhEUVVFM1F5eEpRVUY1UldoaUxFVkJRVVYzYWtJc1MwRkJSaXhEUVVGUlVTeGpRVUZTTEVOQlFYVkNhbFFzUTBGQmRrSXNSMEZCZVVJdlVTeEZRVUZGZDJwQ0xFdEJRVVlzUTBGQlVVOHNXVUZCVWl4RFFVRnhRbWhVTEVOQlFYWklMRWxCUVRCSU0xRXNTMEZCUzBNc1MwRkJUQ3hEUVVGWFRDeEZRVUZGZDJwQ0xFdEJRVVlzUTBGQlVVc3NTVUZCYmtJc1RVRkJNa0o2YWtJc1MwRkJTME1zUzBGQlRDeERRVUZYVEN4RlFVRkZkMnBDTEV0QlFVWXNRMEZCVVhoSkxFMUJRVzVDTEVOQlFUTkNMRWxCUVhWRWFHSXNSVUZCUlhkcVFpeExRVUZHTEVOQlFWRlJMR05CUVZJc1EwRkJkVUpxVkN4RFFVRjJRaXhIUVVGNVFpOVJMRVZCUVVWM2FrSXNTMEZCUml4RFFVRlJUeXhaUVVGU0xFTkJRWEZDYUZRc1EwRkJiRThzUlVGQmIwOHNUMEZCVHl4TlFVRkxMMUVzUlVGQlJYZHFRaXhMUVVGR0xFTkJRVkV2UkN4VFFVRlNMRWRCUVd0Q0xFTkJRVU1zUTBGQmVFSXNRMEZCVUN4RFFVRnJReXhKUVVGSExFTkJRVU5zWml4RlFVRkZNRU1zV1VGQlJpeEZRVUZFTEVsQlFXMUNOME1zUzBGQlMwTXNTMEZCVEN4RFFVRlhUQ3hGUVVGRmQycENMRXRCUVVZc1EwRkJVVWtzU1VGQmJrSXNUVUZCTWtKNGFrSXNTMEZCUzBNc1MwRkJUQ3hEUVVGWFRDeEZRVUZGZDJwQ0xFdEJRVVlzUTBGQlVYWkpMRTFCUVc1Q0xFTkJRVGxETEVsQlFUQkZhbUlzUlVGQlJYZHFRaXhMUVVGR0xFTkJRVkZSTEdOQlFWSXNRMEZCZFVKc1ZDeERRVUYyUWl4SFFVRjVRamxSTEVWQlFVVjNha0lzUzBGQlJpeERRVUZSVHl4WlFVRlNMRU5CUVhGQ2FsUXNRMEZCZUVnc1NVRkJNa2d4VVN4TFFVRkxReXhMUVVGTUxFTkJRVmRNTEVWQlFVVjNha0lzUzBGQlJpeERRVUZSVFN4SlFVRnVRaXhOUVVFeVFqRnFRaXhMUVVGTFF5eExRVUZNTEVOQlFWZE1MRVZCUVVWM2FrSXNTMEZCUml4RFFVRlJka2tzVFVGQmJrSXNRMEZCTTBJc1NVRkJkVVJxWWl4RlFVRkZkMnBDTEV0QlFVWXNRMEZCVVZFc1kwRkJVaXhEUVVGMVFteFVMRU5CUVhaQ0xFZEJRWGxDT1ZFc1JVRkJSWGRxUWl4TFFVRkdMRU5CUVZGUExGbEJRVklzUTBGQmNVSnFWQ3hEUVVGdVR5eEZRVUZ4VHl4UFFVRlBMRTFCUVVzNVVTeEZRVUZGZDJwQ0xFdEJRVVlzUTBGQlVTOUVMRk5CUVZJc1IwRkJhMElzUTBGQlF5eERRVUY0UWl4RFFVRlFPMEZCUVd0RExHbENRVUZGYUdJc1kwRkJSaXhKUVVGdFFqRkZMRVZCUVVVMldpeGxRVUZHTEVWQlFXNUNMRVZCUVhWRE5Wb3NSVUZCUlhkcVFpeExRVUZHTEVOQlFWRkZMRTlCUVZJc1IwRkJaMElzUTBGQlF5eERRVUY0UkN4RlFVRXdSREZxUWl4RlFVRkZkMnBDTEV0QlFVWXNRMEZCVVhSSkxGRkJRVklzUjBGQmFVSnNZaXhGUVVGRmQycENMRXRCUVVZc1EwRkJVVkVzWTBGQlVpeERRVUYxUW1wVUxFTkJRWFpDTEVkQlFYbENMMUVzUlVGQlJYZHFRaXhMUVVGR0xFTkJRVkZQTEZsQlFWSXNRMEZCY1VKb1ZDeERRVUU1UXl4SFFVRm5SQzlSTEVWQlFVVjNha0lzUzBGQlJpeERRVUZSZUVrc1RVRkJia2tzUlVGQk1FbG9ZaXhGUVVGRmQycENMRXRCUVVZc1EwRkJVWEpKTEZGQlFWSXNSMEZCYVVKdVlpeEZRVUZGZDJwQ0xFdEJRVVlzUTBGQlVWRXNZMEZCVWl4RFFVRjFRbXhVTEVOQlFYWkNMRWRCUVhsQ09WRXNSVUZCUlhkcVFpeExRVUZHTEVOQlFWRlBMRmxCUVZJc1EwRkJjVUpxVkN4RFFVRTVReXhIUVVGblJEbFJMRVZCUVVWM2FrSXNTMEZCUml4RFFVRlJka2tzVFVGQmJrNHNSVUZCTUU1cVlpeEZRVUZGZDJwQ0xFdEJRVVlzUTBGQlVYUkpMRkZCUVZJc1IwRkJhVUpzWWl4RlFVRkZkMnBDTEV0QlFVWXNRMEZCVVVjc1NVRkJla0lzUzBGQlowTXpha0lzUlVGQlJYZHFRaXhMUVVGR0xFTkJRVkYwU1N4UlFVRlNMRWRCUVdsQ2JHSXNSVUZCUlhkcVFpeExRVUZHTEVOQlFWRkhMRWxCUVZJc1IwRkJZU3hEUVVGaUxFZEJRV1YyYWtJc1MwRkJTemhpTEVkQlFVd3NRMEZCVTJ4akxFVkJRVVYzYWtJc1MwRkJSaXhEUVVGUlJ5eEpRVUZTTEVkQlFXRXpha0lzUlVGQlJYZHFRaXhMUVVGR0xFTkJRVkYwU1N4UlFVRnlRaXhIUVVFNFFpeERRVUYyUXl4RlFVRjVReXhGUVVGNlF5eERRVUZvUlN4RFFVRXhUaXhGUVVGM1ZXeGlMRVZCUVVWM2FrSXNTMEZCUml4RFFVRlJkRWtzVVVGQlVpeEhRVUZwUW14aUxFVkJRVVYzYWtJc1MwRkJSaXhEUVVGUlN5eEpRVUY2UWl4TFFVRm5RemRxUWl4RlFVRkZkMnBDTEV0QlFVWXNRMEZCVVhSSkxGRkJRVklzUjBGQmFVSnNZaXhGUVVGRmQycENMRXRCUVVZc1EwRkJVVXNzU1VGQlVpeEhRVUZoTEVOQlFXSXNSMEZCWlhwcVFpeExRVUZMT0dJc1IwRkJUQ3hEUVVGVGJHTXNSVUZCUlhkcVFpeExRVUZHTEVOQlFWRjBTU3hSUVVGU0xFZEJRV2xDYkdJc1JVRkJSWGRxUWl4TFFVRkdMRU5CUVZGTExFbEJRWHBDTEVkQlFUaENMRU5CUVhaRExFVkJRWGxETEVWQlFYcERMRU5CUVdoRkxFTkJRWGhWTEVWQlFYTmlOMnBDTEVWQlFVVjNha0lzUzBGQlJpeERRVUZSY2trc1VVRkJVaXhIUVVGcFFtNWlMRVZCUVVWM2FrSXNTMEZCUml4RFFVRlJTU3hKUVVGNlFpeExRVUZuUXpWcVFpeEZRVUZGZDJwQ0xFdEJRVVlzUTBGQlVYSkpMRkZCUVZJc1IwRkJhVUp1WWl4RlFVRkZkMnBDTEV0QlFVWXNRMEZCVVVrc1NVRkJVaXhIUVVGaExFTkJRV0lzUjBGQlpYaHFRaXhMUVVGTE9HSXNSMEZCVEN4RFFVRlRiR01zUlVGQlJYZHFRaXhMUVVGR0xFTkJRVkZKTEVsQlFWSXNSMEZCWVRWcVFpeEZRVUZGZDJwQ0xFdEJRVVlzUTBGQlVYSkpMRkZCUVhKQ0xFZEJRVGhDTEVOQlFYWkRMRVZCUVhsRExFVkJRWHBETEVOQlFXaEZMRU5CUVhSaUxFVkJRVzlwUW01aUxFVkJRVVYzYWtJc1MwRkJSaXhEUVVGUmNra3NVVUZCVWl4SFFVRnBRbTVpTEVWQlFVVjNha0lzUzBGQlJpeERRVUZSVFN4SlFVRjZRaXhMUVVGblF6bHFRaXhGUVVGRmQycENMRXRCUVVZc1EwRkJVWEpKTEZGQlFWSXNSMEZCYVVKdVlpeEZRVUZGZDJwQ0xFdEJRVVlzUTBGQlVVMHNTVUZCVWl4SFFVRmhMRU5CUVdJc1IwRkJaVEZxUWl4TFFVRkxPR0lzUjBGQlRDeERRVUZUYkdNc1JVRkJSWGRxUWl4TFFVRkdMRU5CUVZGeVNTeFJRVUZTTEVkQlFXbENibUlzUlVGQlJYZHFRaXhMUVVGR0xFTkJRVkZOTEVsQlFYcENMRWRCUVRoQ0xFTkJRWFpETEVWQlFYbERMRVZCUVhwRExFTkJRV2hGTEVOQlFYQnBRaXhGUVVGcmNFSTVha0lzUlVGQlJXZFVMRkZCUVVZc1EwRkJWMmxTTEdGQlFWZ3NTMEZCTWtKcWEwSXNSVUZCUldkVUxGRkJRVVlzUTBGQlYybFNMR0ZCUVZnc1IwRkJlVUpxYTBJc1JVRkJSWGRxUWl4TFFVRkdMRU5CUVZGUkxHTkJRVklzUTBGQmRVSnFWQ3hEUVVFelJTeERRVUZzY0VJc1JVRkJaM1ZDTDFFc1JVRkJSV2RVTEZGQlFVWXNRMEZCVjJ0U0xHRkJRVmdzUzBGQk1rSnNhMElzUlVGQlJXZFVMRkZCUVVZc1EwRkJWMnRTTEdGQlFWZ3NSMEZCZVVKc2EwSXNSVUZCUlhkcVFpeExRVUZHTEVOQlFWRlJMR05CUVZJc1EwRkJkVUpzVkN4RFFVRXpSU3hEUVVGb2RVSXNSVUZCT0hsQ09WRXNSVUZCUldkVUxGRkJRVVlzUTBGQlYyMVNMRkZCUVZnc1MwRkJjMEp1YTBJc1JVRkJSV2RVTEZGQlFVWXNRMEZCVjIxU0xGRkJRVmdzUjBGQmIwSm9aQ3hMUVVGTE1GUXNSMEZCVEN4RlFVRXhReXhEUVVFNWVVSXNSVUZCYnpKQ04yRXNSVUZCUldkVUxGRkJRVVlzUTBGQlYycERMRU5CUVZnc1IwRkJZU3hEUVVGREwxRXNSVUZCUlhkcVFpeExRVUZHTEVOQlFWRlJMR05CUVZJc1EwRkJkVUpxVkN4RFFVRjJRaXhIUVVGNVFpOVJMRVZCUVVWblZDeFJRVUZHTEVOQlFWZHBVaXhoUVVGeVF5eExRVUZ4UkRsakxFdEJRVXN3VkN4SFFVRk1MRXRCUVZjM1lTeEZRVUZGWjFRc1VVRkJSaXhEUVVGWGJWSXNVVUZCTTBVc1NVRkJjVVlzUTBGQmREaENMRVZCUVhjNFFtNXJRaXhGUVVGRloxUXNVVUZCUml4RFFVRlhiRU1zUTBGQldDeEhRVUZoTEVOQlFVTTVVU3hGUVVGRmQycENMRXRCUVVZc1EwRkJVVkVzWTBGQlVpeERRVUYxUW14VUxFTkJRWFpDTEVkQlFYbENPVkVzUlVGQlJXZFVMRkZCUVVZc1EwRkJWMnRTTEdGQlFYSkRMRXRCUVhGRUwyTXNTMEZCU3pCVUxFZEJRVXdzUzBGQlZ6ZGhMRVZCUVVWblZDeFJRVUZHTEVOQlFWZHRVaXhSUVVFelJTeEpRVUZ4Uml4RFFVRXhhVU1zUlVGQk5HbERMMnBDTEV0QlFVdDVSaXhIUVVGTUxFTkJRVk0zUml4RlFVRkZkMnBDTEV0QlFVWXNRMEZCVVZFc1kwRkJVaXhEUVVGMVFtcFVMRU5CUVhaQ0xFZEJRWGxDTDFFc1JVRkJSV2RVTEZGQlFVWXNRMEZCVjJsU0xHRkJRVGRETEVsQlFUUkVMRU5CUVRWRUxFdEJRV2RGYW10Q0xFVkJRVVZuVkN4UlFVRkdMRU5CUVZkcVF5eERRVUZZTEVkQlFXRXNRMEZCTjBVc1EwRkJOV2xETEVWQlFUUnVRek5STEV0QlFVdDVSaXhIUVVGTUxFTkJRVk0zUml4RlFVRkZkMnBDTEV0QlFVWXNRMEZCVVZFc1kwRkJVaXhEUVVGMVFteFVMRU5CUVhaQ0xFZEJRWGxDT1ZFc1JVRkJSV2RVTEZGQlFVWXNRMEZCVjJ0U0xHRkJRVGRETEVsQlFUUkVMRU5CUVRWRUxFdEJRV2RGYkd0Q0xFVkJRVVZuVkN4UlFVRkdMRU5CUVZkc1F5eERRVUZZTEVkQlFXRXNRMEZCTjBVc1EwRkJOVzVETEVWQlFUUnpRemxSTEVWQlFVVm5WQ3hSUVVGR0xFTkJRVmRwVWl4aFFVRllMRWRCUVhsQ2FtdENMRVZCUVVWM2FrSXNTMEZCUml4RFFVRlJVU3hqUVVGU0xFTkJRWFZDYWxRc1EwRkJOWFpETEVWQlFUaDJReTlSTEVWQlFVVm5WQ3hSUVVGR0xFTkJRVmRyVWl4aFFVRllMRWRCUVhsQ2JHdENMRVZCUVVWM2FrSXNTMEZCUml4RFFVRlJVU3hqUVVGU0xFTkJRWFZDYkZRc1EwRkJPWGxETEVWQlFXZDZRemxSTEVWQlFVVm5WQ3hSUVVGR0xFTkJRVmR0VWl4UlFVRllMRWRCUVc5Q2FHUXNTMEZCU3pCVUxFZEJRVXdzUlVGQmNEQkRMRVZCUVNzd1F6ZGhMRVZCUVVWdmFrSXNUMEZCUml4RFFVRlZTeXhUUVVGV0xFTkJRVzlDT1dJc1UwRkJjRUlzUTBGQk9FSXNhVUpCUVdVelNDeEZRVUZGZDJwQ0xFdEJRVVlzUTBGQlVYUkpMRkZCUVhaQ0xFZEJRV2RETEUxQlFXaERMRWRCUVhWRGJHSXNSVUZCUlhkcVFpeExRVUZHTEVOQlFWRnlTU3hSUVVFdlF5eEhRVUYzUkN4UFFVRjBSaXhEUVVFdk1FTTdRVUZCT0RaRE8wRkJRVU03UVVGQlF5eFRRVUV6Ymt3c1JVRkJORzVNYmtNc1dVRkJWeXh2UWtGQlUycGFMRU5CUVZRc1JVRkJWME1zUTBGQldDeEZRVUZoTzBGQlFVTXNZMEZCU1hsQ0xFbEJRVVV4UWl4RlFVRkZaMHNzU1VGQlVpeERRVUZoTEVsQlFVZDBTU3hGUVVGRk1taENMRTlCUVVZc1EwRkJWVWtzUzBGQlZpeEpRVUZwUWl4TlFVRkpMMmhDTEVWQlFVVXlhRUlzVDBGQlJpeERRVUZWU1N4TFFVRldMRU5CUVdkQ2VtaENMRTFCUVhoRExFVkJRU3RETzBGQlFVTXNaMEpCUVVjc1EwRkJRMDRzUlVGQlJTdG9RaXhMUVVGR0xFTkJRVkV2UkN4VFFVRlVMRWxCUVc5Q0xFTkJRVU5vWlN4RlFVRkZLMmhDTEV0QlFVWXNRMEZCVVVVc1QwRkJhRU1zUlVGQmQwTXNUMEZCVDJwcFFpeEZRVUZGSzJoQ0xFdEJRVVlzUTBGQlVTOUVMRk5CUVZJc1IwRkJhMElzUTBGQlF5eERRVUZ1UWl4RlFVRnhRaXhOUVVGTGFHVXNSVUZCUlN0b1FpeExRVUZHTEVOQlFWRkZMRTlCUVZJc1IwRkJaMElzUTBGQlF5eERRVUYwUWl4RFFVRTFRaXhEUVVGeFJHcHBRaXhGUVVGRksyaENMRXRCUVVZc1EwRkJVUzlFTEZOQlFWSXNSMEZCYTBJc1EwRkJReXhEUVVGdVFpeEZRVUZ4UW1obExFVkJRVVVyYUVJc1MwRkJSaXhEUVVGUlJTeFBRVUZTTEVkQlFXZENMRU5CUVVNc1EwRkJkRU1zUTBGQmQwTXNTVUZCU1hwcVFpeEpRVUZGTEVkQlFVNDdRVUZCUVN4blFrRkJWVU1zU1VGQlJTeEhRVUZhTzBGQlFVRXNaMEpCUVdkQ1F5eEpRVUZGYzBJc1JVRkJSWFZTTEZGQlFVWXNRMEZCVjJwRExFTkJRVmdzUjBGQllUbFJMRU5CUVM5Q08wRkJRVUVzWjBKQlFXbERTeXhKUVVGRmJVSXNSVUZCUlN0b1FpeExRVUZHTEVOQlFWRjBTU3hSUVVGU0xFZEJRV2xDTDJFc1EwRkJjRVE3UVVGQlFTeG5Ra0ZCYzBSeFFpeEpRVUZGUXl4RlFVRkZkVklzVVVGQlJpeERRVUZYYkVNc1EwRkJXQ3hIUVVGaE5WRXNRMEZCY2tVN1FVRkJRU3huUWtGQmRVVTRRaXhKUVVGRlVDeEZRVUZGSzJoQ0xFdEJRVVlzUTBGQlVYSkpMRkZCUVZJc1IwRkJhVUl6V2l4RFFVRXhSaXhEUVVFMFJpeE5RVUZKUXl4RlFVRkZkVklzVVVGQlJpeERRVUZYYWtNc1EwRkJaaXhMUVVGdFFqbFJMRWxCUVVWSExFdEJRVXQ1Uml4SFFVRk1MRU5CUVZNc1EwRkJRM1pHTEVsQlFVVnRRaXhGUVVGRksyaENMRXRCUVVZc1EwRkJVWFJKTEZGQlFWZ3NTVUZCY1VKNldpeEZRVUZGZFZJc1VVRkJSaXhEUVVGWGFrTXNRMEZCZWtNc1EwRkJja0lzUjBGQmEwVXNUVUZCU1hSUUxFVkJRVVYxVWl4UlFVRkdMRU5CUVZkc1F5eERRVUZtTEV0QlFXMUNOVkVzU1VGQlJVVXNTMEZCUzNsR0xFZEJRVXdzUTBGQlV5eERRVUZETjBRc1NVRkJSVkFzUlVGQlJTdG9RaXhMUVVGR0xFTkJRVkZ5U1N4UlFVRllMRWxCUVhGQ01Wb3NSVUZCUlhWU0xGRkJRVVlzUTBGQlYyeERMRU5CUVhwRExFTkJRWEpDTEVOQlFXeEZMRU5CUVc5SkxFbEJRVWxzVHl4SlFVRkZlRU1zUzBGQlN6SldMRWRCUVV3c1EwRkJVemxXTEVOQlFWUXNSVUZCVjBNc1EwRkJXQ3hEUVVGT0xFTkJRVzlDZFVJc1JVRkJSU3RvUWl4TFFVRkdMRU5CUVZGMFNTeFJRVUZTTEVkQlFXbENOV0VzUTBGQmFrSXNSVUZCYlVKdFFpeEZRVUZGSzJoQ0xFdEJRVVlzUTBGQlVYSkpMRkZCUVZJc1IwRkJhVUp1V2l4RFFVRndReXhEUVVGelF5eEpRVUZKTmtNc1NVRkJSWEJFTEVWQlFVVXJhRUlzUzBGQlJpeERRVUZSYW1Zc1MwRkJVaXhIUVVGak9VTXNSVUZCUlhkb1FpeExRVUYwUWp0QlFVRkJMR2RDUVVFMFFuUmtMRWxCUVVWc1JTeEZRVUZGSzJoQ0xFdEJRVVlzUTBGQlVXaG1MRTFCUVZJc1IwRkJaUzlETEVWQlFVVjNhRUlzUzBGQkwwTXNRMEZCY1VSNGFFSXNSVUZCUlN0b1FpeExRVUZHTEVOQlFWRkhMRWxCUVZJc1IwRkJZWFpxUWl4TFFVRkxkVmdzUjBGQlRDeERRVUZUYkZjc1JVRkJSVEpvUWl4UFFVRkdMRU5CUVZWRkxGVkJRVllzUjBGQmNVSXNRMEZCY2tJc1IwRkJkVUo2WlN4SlFVRkZMRU5CUVd4RExFVkJRVzlETEVOQlFYQkRMRU5CUVdJc1JVRkJiMFJ3UkN4RlFVRkZLMmhDTEV0QlFVWXNRMEZCVVVzc1NVRkJVaXhIUVVGaExFTkJRVU53YVVJc1JVRkJSU3RvUWl4TFFVRkdMRU5CUVZGSExFbEJRVEZGTEVWQlFTdEZiR2xDTEVWQlFVVXJhRUlzUzBGQlJpeERRVUZSU1N4SlFVRlNMRWRCUVdGNGFrSXNTMEZCUzNWWUxFZEJRVXdzUTBGQlUyeFhMRVZCUVVVeWFFSXNUMEZCUml4RFFVRlZSeXhYUVVGV0xFZEJRWE5DTEVOQlFYUkNMRWRCUVhkQ05XUXNTVUZCUlN4RFFVRnVReXhGUVVGeFF5eERRVUZ5UXl4RFFVRTFSaXhGUVVGdlNXeEZMRVZCUVVVcmFFSXNTMEZCUml4RFFVRlJUU3hKUVVGU0xFZEJRV0VzUTBGQlEzSnBRaXhGUVVGRksyaENMRXRCUVVZc1EwRkJVVWtzU1VGQk1Vb3NSVUZCSzBwdWFVSXNSVUZCUlN0b1FpeExRVUZHTEVOQlFWRjBTU3hSUVVGU0xFZEJRV2xDT1dFc1MwRkJTekpXTEVkQlFVd3NRMEZCVXpOV0xFdEJRVXQxV0N4SFFVRk1MRU5CUVZOc1Z5eEZRVUZGSzJoQ0xFdEJRVVlzUTBGQlVYUkpMRkZCUVdwQ0xFVkJRVEJDZWxvc1JVRkJSU3RvUWl4TFFVRkdMRU5CUVZGTExFbEJRV3hETEVOQlFWUXNSVUZCYVVSd2FVSXNSVUZCUlN0b1FpeExRVUZHTEVOQlFWRkhMRWxCUVhwRUxFTkJRV2hNTEVWQlFTdFBiR2xDTEVWQlFVVXJhRUlzUzBGQlJpeERRVUZSY2trc1VVRkJVaXhIUVVGcFFpOWhMRXRCUVVzeVZpeEhRVUZNTEVOQlFWTXpWaXhMUVVGTGRWZ3NSMEZCVEN4RFFVRlRiRmNzUlVGQlJTdG9RaXhMUVVGR0xFTkJRVkZ5U1N4UlFVRnFRaXhGUVVFd1FqRmFMRVZCUVVVcmFFSXNTMEZCUml4RFFVRlJUU3hKUVVGc1F5eERRVUZVTEVWQlFXbEVjbWxDTEVWQlFVVXJhRUlzUzBGQlJpeERRVUZSU1N4SlFVRjZSQ3hEUVVGb1VTeEZRVUVyVkc1cFFpeEZRVUZGTW1oQ0xFOUJRVVlzUTBGQlZVc3NVMEZCVml4RFFVRnZRbkJOTEZWQlFYQkNMRU5CUVN0Q2VsVXNRMEZCTDBJc1JVRkJhME1yUlN4VFFVRnNReXhEUVVFMFF5eHBRa0ZCWld4SExFVkJRVVVyYUVJc1MwRkJSaXhEUVVGUmRFa3NVVUZCZGtJc1IwRkJaME1zVFVGQmFFTXNSMEZCZFVONldpeEZRVUZGSzJoQ0xFdEJRVVlzUTBGQlVYSkpMRkZCUVM5RExFZEJRWGRFTEU5QlFYQkhMRU5CUVM5VU8wRkJRVFJoTzBGQlFVTXNVMEZCYm14T0xFVkJRVzlzVG5GQ0xHbENRVUZuUWl4NVFrRkJVM3BqTEVOQlFWUXNSVUZCVnp0QlFVRkRMR05CUVVsRExFbEJRVVZFTEVWQlFVVm5TeXhKUVVGU0xFTkJRV0V2U2l4RlFVRkZiMnBDTEU5QlFVWXNRMEZCVlVNc1MwRkJWaXhKUVVGcFFuUnFRaXhGUVVGRk5sY3NZVUZCUml4TFFVRnJRamRYTEVWQlFVVmhMRmRCUVhKRExFdEJRVzFFV2l4RlFVRkZiMnBDTEU5QlFVWXNRMEZCVlVrc1MwRkJWaXhEUVVGblFqZGlMRk5CUVdoQ0xFTkJRVEJDTERaQ1FVRXhRaXhIUVVGNVJETklMRVZCUVVWdmFrSXNUMEZCUml4RFFVRlZTeXhUUVVGV0xFTkJRVzlDT1dJc1UwRkJjRUlzUTBGQk9FSXNiMEpCUVRsQ0xFTkJRWHBFTEVWQlFUWkhNMGdzUlVGQlJXOXFRaXhQUVVGR0xFTkJRVlZETEV0QlFWWXNSMEZCWjBKeWFrSXNSVUZCUlc5cVFpeFBRVUZHTEVOQlFWVkpMRXRCUVZZc1IwRkJaMEo0YWtJc1JVRkJSVzlxUWl4UFFVRkdMRU5CUVZWTExGTkJRVllzUjBGQmIwSXNTMEZCU3l4RFFVRjBTeXhGUVVGM1MzcHFRaXhGUVVGRmFXcENMRXRCUVVZc1IwRkJVV3BxUWl4RlFVRkZhMnBDTEZsQlFVWXNSMEZCWlN4RFFVRnNVRHRCUVVGeFVDeFRRVUZzTTA0c1JVRkJiVE5PTmtJc1dVRkJWeXh2UWtGQlV5OXJRaXhEUVVGVUxFVkJRVmQ1UWl4RFFVRllMRVZCUVdFN1FVRkJReXhqUVVGSmVFSXNTVUZCUlVRc1JVRkJSU3RLTEVsQlFWSXNRMEZCWVN4SlFVRkhPVW9zUlVGQlJXMXFRaXhQUVVGR0xFTkJRVlZETEV0QlFWWXNTMEZCYTBKd2FrSXNSVUZCUlcxcVFpeFBRVUZHTEVOQlFWVkRMRXRCUVZZc1IwRkJaMEp5YWtJc1JVRkJSU3RhTEZsQlFVWXNSMEZCWldoaExFVkJRVVZETEVWQlFVVXJXaXhaUVVGS0xFTkJRV1lzUjBGQmFVTXZXaXhGUVVGRlZTeE5RVUZHTEVOQlFWTkRMRVZCUVZRc1EwRkJXVmdzUlVGQlJWa3NWMEZCWkN4RFFVRnFSQ3hGUVVFMFJWZ3NSVUZCUlcxcVFpeFBRVUZHTEVOQlFWVkpMRXRCUVZZc1IwRkJaMEoyYWtJc1JVRkJSVzFxUWl4UFFVRkdMRU5CUVZWRExFdEJRVllzUTBGQlowSXZVU3hKUVVGb1FpeERRVUZ4UWl4clFrRkJja0lzUTBGQk5VWXNSVUZCY1VseVV5eEZRVUZGYldwQ0xFOUJRVVlzUTBGQlZVc3NVMEZCVml4SFFVRnZRbmhxUWl4RlFVRkZiV3BDTEU5QlFVWXNRMEZCVlVrc1MwRkJWaXhEUVVGblFtbENMRTFCUVdoQ0xFTkJRWFZDTEUxQlFVbDZhMElzUlVGQlJWRXNUVUZCUml4RFFVRlRkVkFzYTBKQlFYQkRMRU5CUVROTExFZEJRVzlQT1ZBc1JVRkJSVzFxUWl4UFFVRkdMRU5CUVZWSkxFdEJRVllzU1VGQmFVSXNUVUZCU1hacVFpeEZRVUZGYldwQ0xFOUJRVVlzUTBGQlZVa3NTMEZCVml4RFFVRm5RbnBvUWl4TlFVRTFVU3hGUVVGdFVqdEJRVUZETEdkQ1FVRkpOMElzUTBGQlNpeEZRVUZOUXl4RFFVRk9MRVZCUVZGSExFTkJRVklzUlVGQlZXdENMRU5CUVZZc1JVRkJXVkVzUTBGQldpeEZRVUZqV1N4RFFVRmtMRVZCUVdkQ2FVTXNRMEZCYUVJc1JVRkJhMEpqTEVOQlFXeENMRVZCUVc5Q05rSXNRMEZCY0VJc1JVRkJjMEpKTEVOQlFYUkNMRVZCUVhkQ1J5eERRVUY0UWl4RlFVRXdRakJKTEVOQlFURkNMRVZCUVRSQ1F5eERRVUUxUWl4RlFVRTRRa01zUTBGQk9VSXNSVUZCWjBORkxFTkJRV2hETEVWQlFXdERReXhEUVVGc1F5eEZRVUZ2UTBNc1EwRkJjRU1zUlVGQmMwTjRVU3hEUVVGMFF5eERRVUYzUXl4TFFVRkxMRU5CUVV3c1MwRkJVMDRzUlVGQlJYVnFRaXhMUVVGR0xFTkJRVkZQTEZsQlFWSXNRMEZCY1VKb1ZDeERRVUU1UWl4SlFVRnBRM1JRTEVOQlFXcERMRWxCUVc5RGRrSXNTVUZCUlN4bFFVRmhkVUlzUlVGQlJUaGFMRWxCUVdZc1IwRkJiMEk1V2l4RlFVRkZiMnBDTEdOQlFVWXNRMEZCYVVJc1EwRkJha0lzUlVGQmIwSnVTaXhMUVVGNFF5eEhRVUU0UTJwaExFVkJRVVZwWVN4TFFVRnNSQ3hGUVVGM1JIWmlMRWxCUVVVc1pVRkJZWE5DTEVWQlFVVTRXaXhKUVVGbUxFZEJRVzlDT1Zvc1JVRkJSVzlxUWl4alFVRkdMRU5CUVdsQ0xFTkJRV3BDTEVWQlFXOUNiRW9zUzBGQmVFTXNSMEZCT0VOc1lTeEZRVUZGYTJFc1MwRkJPVWtzUzBGQmMwcDZZaXhKUVVGRlJDeEZRVUZGZFdwQ0xFdEJRVVlzUTBGQlVVOHNXVUZCVWl4RFFVRnhRbWhVTEVOQlFYWkNMRVZCUVhsQ05WRXNTVUZCUlVZc1JVRkJSWFZxUWl4TFFVRkdMRU5CUVZGUExGbEJRVklzUTBGQmNVSnFWQ3hEUVVGMFRTeEhRVUY1VFRkUkxFVkJRVVZuYWtJc1MwRkJSaXhKUVVGVExFMUJRVWxvYWtJc1JVRkJSV2RxUWl4TFFVRm1MRWxCUVhOQ2FHcENMRVZCUVVWbmFrSXNTMEZCUml4SFFVRlJhR3BDTEVWQlFVVnBha0lzV1VGQlJpeEhRVUZsTEVOQlFYWkNMRVZCUVhsQ2FtcENMRVZCUVVWdGFrSXNUMEZCUml4RFFVRlZTeXhUUVVGV0xFTkJRVzlDY0Uwc1ZVRkJjRUlzUTBGQkswSXNSMEZCTDBJc1JVRkJiME14VUN4VFFVRndReXhEUVVFNFF5eHZRa0ZCT1VNc1EwRkJla0lzUlVGQk5rWXhTQ3hGUVVGRmJXcENMRTlCUVVZc1EwRkJWVWtzUzBGQlZpeERRVUZuUW01TkxGVkJRV2hDTEVOQlFUSkNMRWRCUVROQ0xFVkJRV2RETVZBc1UwRkJhRU1zUTBGQk1FTXNOa0pCUVRGRExFTkJRVGRHTEVWQlFYTkxNVWdzUlVGQlJXMXFRaXhQUVVGR0xFTkJRVlZETEV0QlFWWXNSMEZCWjBJc1MwRkJTeXhEUVVGcVRpeExRVUZ4VG5CcVFpeEZRVUZGWjJwQ0xFdEJRVVlzUjBGQlVXaHFRaXhGUVVGRmFXcENMRmxCUVVZc1IwRkJaV3BxUWl4RlFVRkZiV3BDTEU5QlFVWXNRMEZCVlVzc1UwRkJWaXhEUVVGdlFqVnBRaXhKUVVGd1FpeERRVUY1UWl4clFrRkJla0lzUzBGQk9FTmlMRVZCUVVWUkxFMUJRVVlzUTBGQlUzZEtMRTlCUVRsRkxFVkJRWE5HZGtrc1MwRkJSM05RTEVsQlFVVTVVU3hGUVVGRmJXcENMRTlCUVVZc1EwRkJWVU1zUzBGQlZpeERRVUZuUWl4RFFVRm9RaXhGUVVGdFFqRkRMRmRCUVhKQ0xFVkJRV2xEY0dkQ0xFbEJRVVZPTEVWQlFVVnRha0lzVDBGQlJpeERRVUZWUXl4TFFVRldMRU5CUVdkQ0xFTkJRV2hDTEVWQlFXMUNjazhzV1VGQmRFUXNSVUZCYlVVeFZTeEpRVUZGVEN4RlFVRkZiV3BDTEU5QlFVWXNRMEZCVlVNc1MwRkJWaXhEUVVGblFtcG1MRTFCUVdoQ0xFZEJRWGxDVGl4SlFVRTVSaXhGUVVGdFIzUkRMRWxCUVVWMlFpeEZRVUZGYldwQ0xFOUJRVVlzUTBGQlZVTXNTMEZCVml4RFFVRm5RbXBtTEUxQlFXaENMRWRCUVhsQ1NpeEhRVUU1U0N4RlFVRnJTV2hETEVsQlFVVXhRaXhKUVVGRmVWRXNTVUZCUlN4RFFVRktMRWRCUVUwM1VTeERRVUV4U1N4RlFVRTBTVEJETEVsQlFVVndRaXhKUVVGRmFrSXNTVUZCUlN4RFFVRktMRWRCUVUxS0xFTkJRWEJLTEVWQlFYTktjVWdzU1VGQlJYWklMRVZCUVVWdGFrSXNUMEZCUml4RFFVRlZTU3hMUVVGV0xFTkJRV2RDTEVOQlFXaENMRVZCUVcxQ04wTXNWMEZCTTBzc1JVRkJkVXd2V1N4SlFVRkZNMGdzUlVGQlJXMXFRaXhQUVVGR0xFTkJRVlZKTEV0QlFWWXNRMEZCWjBJc1EwRkJhRUlzUlVGQmJVSjRUeXhaUVVFMVRTeEZRVUY1VG1wT0xFbEJRVVZRTEVsQlFVVjJTQ3hGUVVGRloycENMRXRCUVM5T0xFVkJRWEZQZUZNc1NVRkJSVGRKTEVsQlFVVXpTQ3hGUVVGRloycENMRXRCUVROUExFVkJRV2xRZGxNc1NVRkJSWFJSTEV0QlFVdDFXQ3hIUVVGTUxFTkJRVk0xUnl4SlFVRkZMRU5CUVVZc1IwRkJTV2hLTEVsQlFVVXNRMEZCWml4RlFVRnBRaXhEUVVGcVFpeERRVUZ1VUN4RlFVRjFVVFJKTEVsQlFVVjJVU3hMUVVGTGRWZ3NSMEZCVEN4RFFVRlRjRmdzU1VGQlJTeERRVUZHTEVkQlFVbHJVU3hKUVVGRkxFTkJRV1lzUlVGQmFVSXNRMEZCYWtJc1EwRkJlbEVzUlVGQk5sSkpMRWxCUVVVc1EwRkJRMGdzUTBGQmFGTXNSVUZCYTFOSkxFbEJRVVVzUTBGQlEwZ3NRMEZCY2xNc1JVRkJkVk01VEN4SlFVRkZOME1zU1VGQlJTOUNMRVZCUVVWbmFrSXNTMEZCTjFNc1JVRkJiVlIwWkN4SlFVRkZMME1zU1VGQlJUTkRMRVZCUVVWbmFrSXNTMEZCZWxRc1JVRkJLMVJ3WlN4SlFVRkZOa3dzUTBGQlJpeExRVUZOTjB3c1NVRkJSVFpNTEVOQlFWSXNRMEZCTDFRc1JVRkJNRlUzVEN4SlFVRkZaMDBzUTBGQlJpeExRVUZOYUUwc1NVRkJSV2ROTEVOQlFWSXNRMEZCTVZVc1JVRkJjVlpzVEN4SlFVRkZaMHdzUTBGQlJpeExRVUZOYUV3c1NVRkJSV2RNTEVOQlFWSXNRMEZCY2xZc1JVRkJaMWRvVEN4SlFVRkZiVXdzUTBGQlJpeExRVUZOYmt3c1NVRkJSVzFNTEVOQlFWSXNRMEZCYmxjc1MwRkJaMWhxVFN4SlFVRkZMRU5CUVVZc1JVRkJTV01zU1VGQlJTeERRVUYwV0N4RFFVRjBSaXhGUVVFcll6RkdMRVZCUVVWdGFrSXNUMEZCUml4RFFVRlZTeXhUUVVGV0xFTkJRVzlDY0Uwc1ZVRkJjRUlzUTBGQkswSXNSMEZCTDBJc1JVRkJiME14VUN4VFFVRndReXhEUVVFNFF5eHBRa0ZCWlRsRExFTkJRV1lzUjBGQmFVSXNUVUZCYWtJc1IwRkJkMEpqTEVOQlFYaENMRWRCUVRCQ0xFOUJRWGhGTEVOQlFTOWpMRVZCUVdkcFFqRkdMRVZCUVVWdGFrSXNUMEZCUml4RFFVRlZTU3hMUVVGV0xFTkJRV2RDYmswc1ZVRkJhRUlzUTBGQk1rSXNSMEZCTTBJc1JVRkJaME14VUN4VFFVRm9ReXhEUVVFd1F5dzRRa0ZCTkVJeFNDeEZRVUZGWjJwQ0xFdEJRVGxDTEVkQlFXOURMRWRCUVRsRkxFTkJRWEoyUWl4RFFVRjZUVHRCUVVGcmFFTTdRVUZCUXl4VFFVRjRkVkVzUlVGQmVYVlJlRW9zWTBGQllTeHpRa0ZCVTNwYUxFTkJRVlFzUlVGQlZ6dEJRVUZETEdOQlFVbDVRaXhKUVVGRmVrSXNTVUZCUlN4TFFVRkdMRWRCUVZFc1NVRkJaQ3hEUVVGdFFpeEpRVUZIVHl4RlFVRkZReXhOUVVGR0xFTkJRVk4xU2l4SlFVRmFMRVZCUVdsQ08wRkJRVU1zWjBKQlFVazVTaXhMUVVGSFRTeEZRVUZGUnl4TlFVRkdMRVZCUVZNc1JVRkJSU3hwUWtGQlpVZ3NSVUZCUld0WkxGZEJRVVlzUTBGQlkwNHNTMEZCTjBJc1NVRkJiME1zUTBGQlF6VllMRVZCUVVWM1VpeFBRVUZHTEVOQlFWVnJTQ3hsUVVFdlF5eEpRVUZuUlN4RFFVRkRNVmtzUlVGQlJVTXNUVUZCUml4RFFVRlRPRTRzWjBKQlFUVkZMRXRCUVN0R0xFVkJRVU0wU3l4VFFVRlJMRU5CUVVNc1EwRkJWaXhGUVVGWlF5eFRRVUZSTEVOQlFVTXNRMEZCY2tJc1JVRkJNMGNzUTBGQlNpeERRVUYzU1RWWkxFVkJRVVYzVWl4UFFVRkdMRU5CUVZWM1V5eFJRVUZXTEVsQlFXOUNhR3RDTEVWQlFVVkhMRTFCUVVZc1EwRkJVMlVzUTBGQlZDeEZRVUZaTEdOQlFWb3NSVUZCTWtKc1FpeEZRVUZGZDBvc1NVRkJSaXhEUVVGUGRXRXNZMEZCYkVNc1JVRkJhVVJ5YTBJc1EwRkJha1FzUjBGQmIwUk5MRVZCUVVWSExFMUJRVVlzUTBGQlUyVXNRMEZCVkN4RlFVRlpMR1ZCUVZvc1JVRkJORUpzUWl4RlFVRkZkMG9zU1VGQlJpeERRVUZQTW1Fc1pVRkJia01zUlVGQmJVUjZhMElzUTBGQmJrUXNRMEZCY0VRc1JVRkJNRWROTEVWQlFVVkhMRTFCUVVZc1EwRkJVMlVzUTBGQlZDeEZRVUZaTEZsQlFWb3NSVUZCZVVKc1FpeEZRVUZGZDBvc1NVRkJSaXhEUVVGUE5tRXNXVUZCYUVNc1JVRkJOa016YTBJc1EwRkJOME1zUTBGQk9VZ3NTVUZCSzBzc2FVSkJRV1ZOTEVWQlFVVnJXU3hYUVVGR0xFTkJRV05PTEV0QlFUZENMRXRCUVhGRE5WZ3NSVUZCUlVjc1RVRkJSaXhEUVVGVFpTeERRVUZVTEVWQlFWbHNRaXhGUVVGRmExa3NWMEZCUml4RFFVRmpUaXhMUVVFeFFpeEZRVUZuUXpWWUxFVkJRVVYzU2l4SlFVRkdMRU5CUVU5MVlTeGpRVUYyUXl4RlFVRnpSSEpyUWl4RFFVRjBSQ3hIUVVGNVJFMHNSVUZCUlVjc1RVRkJSaXhEUVVGVFpTeERRVUZVTEVWQlFWbHNRaXhGUVVGRmExa3NWMEZCUml4RFFVRmpUQ3hKUVVFeFFpeEZRVUVyUWpkWUxFVkJRVVYzU2l4SlFVRkdMRU5CUVU4eVlTeGxRVUYwUXl4RlFVRnpSSHByUWl4RFFVRjBSQ3hEUVVGNlJDeEZRVUZyU0Uwc1JVRkJSVWNzVFVGQlJpeERRVUZUWlN4RFFVRlVMRVZCUVZsc1FpeEZRVUZGYTFrc1YwRkJSaXhEUVVGalNpeEhRVUV4UWl4RlFVRTRRamxZTEVWQlFVVjNTaXhKUVVGR0xFTkJRVTgyWVN4WlFVRnlReXhGUVVGclJETnJRaXhEUVVGc1JDeERRVUYyU2l4RFFVRXZTeXhGUVVFMFdFMHNSVUZCUld0Q0xFTkJRVVlzUlVGQlN5eFpRVUZNTEVWQlFXdENiRUlzUlVGQlJYZEtMRWxCUVVZc1EwRkJUeXRQTEZsQlFYcENMRU5CUVRWWUxFVkJRVzFoZGxrc1JVRkJSVWNzVFVGQlJpeERRVUZUYjBJc1NVRkJWQ3hEUVVGakxGVkJRVk01UWl4RFFVRlVMRVZCUVZkRExFTkJRVmdzUlVGQllUdEJRVUZEUml4blFrRkJSVVVzUTBGQlJpeEZRVUZMY1ZNc1NVRkJUQ3hEUVVGVkxFMUJRVWt2VWl4RlFVRkZReXhOUVVGR0xFTkJRVk4xVUN4clFrRkJka0lzUlVGQk1rTm9UeXhOUVVFelF5eEhRVUZyUkN4RFFVRnNSQ3hKUVVGeFJHaERMRVZCUVVWRkxFTkJRVVlzUlVGQlMzZENMRU5CUVV3c1JVRkJVV3hDTEVWQlFVVnJXU3hYUVVGR0xFTkJRV05NTEVsQlFYUkNMRVZCUVRKQ04xZ3NSVUZCUlhkS0xFbEJRVVlzUTBGQlQyZFFMRmRCUVd4RExFTkJRWEpFTzBGQlFXOUhMR0ZCUVdoSkxFTkJRVzVoTEVWQlFYRnBRbmhaTEVWQlFVVnJRaXhEUVVGR0xFVkJRVXNzVlVGQlRDeEZRVUZuUW14Q0xFVkJRVVYzU2l4SlFVRkdMRU5CUVU5cFVDeFZRVUYyUWl4RFFVRnlhVUlzUlVGQmQydENlbGtzUlVGQlJXdENMRU5CUVVZc1JVRkJTeXhsUVVGTUxFVkJRWEZDYkVJc1JVRkJSWGRLTEVsQlFVWXNRMEZCVDNsVExHVkJRVFZDTEVOQlFYaHJRaXhGUVVGeGJrSnFZeXhGUVVGRlF5eE5RVUZHTEVOQlFWTXdTaXhWUVVGVUxFbEJRWEZDTTBvc1JVRkJSV2RuUWl4RlFVRkdMRU5CUVVzc1YwRkJUQ3hGUVVGcFFtaG5RaXhGUVVGRmQwb3NTVUZCUml4RFFVRlBaMklzVlVGQmVFSXNRMEZCTVc5Q08wRkJRVGh4UWp0QlFVRkRMRk5CUVRsc1V5eEZRVUVyYkZOMlJDeE5RVUZMTEdkQ1FVRlZPMEZCUVVOcWFFSXNXVUZCUlhkS0xFbEJRVVlzUTBGQlR6QlFMRmxCUVZBN1FVRkJjMElzVTBGQmNtOVRMRVZCUVhOdlUyZEpMRk5CUVZFc2JVSkJRVlU3UVVGQlEyeG9RaXhaUVVGRmQwb3NTVUZCUml4RFFVRlBNRkFzV1VGQlVDeERRVUZ2UWl4RFFVRkRMRU5CUVhKQ08wRkJRWGRDTEZOQlFXcHlVeXhGUVVSeWNrWXNSVUZEZHpKWWJGb3NSVUZCUlhsclFpeFJRVUZHTEVkQlFWY3NSVUZFYmpOWUxFTkJRM016V0N4TFFVRkpMRWxCUVVsRExFTkJRVklzU1VGQllURnJRaXhGUVVGRk1tdENMRTlCUVdZc1JVRkJkVUk3UVVGQlF5eFpRVUZKUXl4SlFVRkZOV3RDTEVWQlFVVXlhMElzVDBGQlJpeERRVUZWUkN4RFFVRldMRVZCUVdFeGEwSXNRMEZCWWl4RlFVRmxRU3hGUVVGRlF5eE5RVUZHTEVOQlFWTjVhMElzUTBGQlZDeERRVUZtTEVOQlFVNHNRMEZCYTBORkxFdEJRVWMxYTBJc1JVRkJSWGxyUWl4UlFVRkdMRU5CUVZkeWFVSXNTVUZCV0N4RFFVRm5RbmRwUWl4RFFVRm9RaXhEUVVGSU8wRkJRWE5DTEdOQlFVODFhMElzUlVGQlJUWnJRaXhYUVVGR0xFZEJRV01zVlVGQlUzSnNRaXhEUVVGVUxFVkJRVmM3UVVGQlF5eGhRVUZKTEVsQlFVbERMRWxCUVVVc1EwRkJWaXhGUVVGWlFTeEpRVUZGVHl4RlFVRkZlV3RDTEZGQlFVWXNRMEZCVjJwcVFpeE5RVUY2UWl4RlFVRm5ReTlDTEVkQlFXaERPMEZCUVc5RFJDeGxRVUZMVVN4RlFVRkZlV3RDTEZGQlFVWXNRMEZCVjJoc1FpeERRVUZZTEVOQlFVd3NTVUZCYjBKUExFVkJRVVY1YTBJc1VVRkJSaXhEUVVGWGFHeENMRU5CUVZnc1JVRkJZMFFzUTBGQlpDeEZRVUZwUW5Oc1FpeFZRVUZWTEVOQlFWWXNRMEZCYWtJc1JVRkJPRUpCTEZWQlFWVXNRMEZCVml4RFFVRTVRaXhGUVVFeVEwRXNWVUZCVlN4RFFVRldMRU5CUVRORExFVkJRWGRFUVN4VlFVRlZMRU5CUVZZc1EwRkJlRVFzUlVGQmNVVkJMRlZCUVZVc1EwRkJWaXhEUVVGeVJTeERRVUZ3UWp0QlFVRndRenRCUVVFeVNTeFBRVUZ5U3l4RlFVRnpTemxyUWl4RlFVRkZLMnRDTEhGQ1FVRkdMRWRCUVhkQ0xFVkJRVGxNTEVWQlFXbE5MMnRDTEVWQlFVVlpMRWxCUVVZc1IwRkJUeXhWUVVGVGNFSXNRMEZCVkN4RlFVRlhPMEZCUVVOUkxGVkJRVVZETEUxQlFVWXNRMEZCVTFRc1EwRkJWQ3hMUVVGaFVTeEZRVUZGUXl4TlFVRkdMRU5CUVZOVUxFTkJRVlFzUlVGQldYTnNRaXhWUVVGVkxFTkJRVllzUTBGQldpeEZRVUY1UWtFc1ZVRkJWU3hEUVVGV0xFTkJRWHBDTEVWQlFYTkRRU3hWUVVGVkxFTkJRVllzUTBGQmRFTXNSVUZCYlVSQkxGVkJRVlVzUTBGQlZpeERRVUZ1UkN4RlFVRm5SVUVzVlVGQlZTeERRVUZXTEVOQlFXaEZMRU5CUVdJc1EwRkJNa1lzU1VGQlNYSnNRaXhEUVVGS0xFTkJRVTBzU1VGQlIwOHNSVUZCUlN0clFpeHhRa0ZCUml4RFFVRjNRblpzUWl4RFFVRjRRaXhEUVVGSUxFVkJRVGhDTEV0QlFVbERMRWxCUVVVc1EwRkJUaXhGUVVGUlFTeEpRVUZGVHl4RlFVRkZLMnRDTEhGQ1FVRkdMRU5CUVhkQ2RteENMRU5CUVhoQ0xFVkJRVEpDWjBNc1RVRkJja01zUlVGQk5FTXZRaXhIUVVFMVF6dEJRVUZuUkU4c1dVRkJSU3RyUWl4eFFrRkJSaXhEUVVGM1FuWnNRaXhEUVVGNFFpeEZRVUV5UWtNc1EwRkJNMElzUlVGQk9FSnhiRUlzVlVGQlZTeERRVUZXTEVOQlFUbENMRVZCUVRKRFFTeFZRVUZWTEVOQlFWWXNRMEZCTTBNc1JVRkJkMFJCTEZWQlFWVXNRMEZCVml4RFFVRjRSQ3hGUVVGeFJVRXNWVUZCVlN4RFFVRldMRU5CUVhKRkxFVkJRV3RHUVN4VlFVRlZMRU5CUVZZc1EwRkJiRVk3UVVGQmFFUXNVMEZCWjBvNWEwSXNSVUZCUlRaclFpeFhRVUZHTEVsQlFXVTNhMElzUlVGQlJUWnJRaXhYUVVGR0xFTkJRV055YkVJc1EwRkJaQ3hGUVVGblFuTnNRaXhWUVVGVkxFTkJRVllzUTBGQmFFSXNSVUZCTmtKQkxGVkJRVlVzUTBGQlZpeERRVUUzUWl4RlFVRXdRMEVzVlVGQlZTeERRVUZXTEVOQlFURkRMRVZCUVhWRVFTeFZRVUZWTEVOQlFWWXNRMEZCZGtRc1JVRkJiMFZCTEZWQlFWVXNRMEZCVml4RFFVRndSU3hEUVVGbU8wRkJRV2xITEU5QlFYQnJRaXhGUVVGeGEwSTVhMElzUlVGQlJXZG5RaXhGUVVGR0xFZEJRVXNzVlVGQlUzaG5RaXhEUVVGVUxFVkJRVmRETEVOQlFWZ3NSVUZCWVR0QlFVRkRMR1ZCUVU5RUxFbEJRVVUyU0N4RlFVRkZOMGdzUTBGQlJpeERRVUZHTEVWQlFVOVJMRVZCUVVVcmEwSXNjVUpCUVVZc1EwRkJkMEoyYkVJc1EwRkJlRUlzVFVGQk5rSlJMRVZCUVVVcmEwSXNjVUpCUVVZc1EwRkJkMEoyYkVJc1EwRkJlRUlzU1VGQk1rSXNSVUZCZUVRc1EwRkJVQ3hGUVVGdFJWRXNSVUZCUlN0clFpeHhRa0ZCUml4RFFVRjNRblpzUWl4RFFVRjRRaXhGUVVFeVFqUkRMRWxCUVROQ0xFTkJRV2RETTBNc1EwRkJhRU1zUTBGQmJrVXNSVUZCYzBkUExFTkJRVGRITzBGQlFTdEhMRTlCUVhaelFpeEZRVUYzYzBKQkxFVkJRVVZyWjBJc1IwRkJSaXhIUVVGTkxGVkJRVk14WjBJc1EwRkJWQ3hGUVVGWFF5eERRVUZZTEVWQlFXRTdRVUZCUXl4WlFVRkplVUlzUTBGQlNpeERRVUZOTEVsQlFVY3hRaXhKUVVGRk5rZ3NSVUZCUlRkSUxFTkJRVVlzUTBGQlJpeEZRVUZQTEV0QlFVc3NRMEZCVEN4TFFVRlRReXhEUVVGdVFpeEZRVUZ4UWl4UFFVRlBUeXhGUVVGRksydENMSEZDUVVGR0xFTkJRWGRDZG14Q0xFTkJRWGhDTEVsQlFUSkNMRVZCUVROQ0xFVkJRVGhDVVN4RFFVRnlReXhEUVVGMVF5eEpRVUZIUVN4RlFVRkZLMnRDTEhGQ1FVRkdMRU5CUVhkQ2RteENMRU5CUVhoQ0xFdEJRVFJDTEUxQlFVbFJMRVZCUVVVcmEwSXNjVUpCUVVZc1EwRkJkMEoyYkVJc1EwRkJlRUlzUlVGQk1rSm5ReXhOUVVFNVJDeEZRVUZ4UlR0QlFVRkRMR1ZCUVVsT0xFbEJRVVVzUTBGQlRpeEZRVUZSUVN4SlFVRkZiRUlzUlVGQlJTdHJRaXh4UWtGQlJpeERRVUYzUW5ac1FpeERRVUY0UWl4RlFVRXlRbWRETEUxQlFYSkRMRVZCUVRSRFRpeEhRVUUxUXp0QlFVRm5SR3hDTEdOQlFVVXJhMElzY1VKQlFVWXNRMEZCZDBKMmJFSXNRMEZCZUVJc1JVRkJNa0l3UWl4RFFVRXpRaXhOUVVGblEzcENMRU5CUVdoRExFbEJRVzFEVHl4RlFVRkZLMnRDTEhGQ1FVRkdMRU5CUVhkQ2RteENMRU5CUVhoQ0xFVkJRVEpDZDJ4Q0xFMUJRVE5DTEVOQlFXdERPV3BDTEVOQlFXeERMRVZCUVc5RExFTkJRWEJETEVOQlFXNURPMEZCUVdoRUxGZEJRVEJJTEU5QlFVOXNRaXhEUVVGUU8wRkJRVk03UVVGQlF5eFBRVUY0SzBJc1JVRkJlU3RDUVN4RlFVRkZhV3hDTEVsQlFVWXNSMEZCVHl4VlFVRlRlbXhDTEVOQlFWUXNSVUZCVjBNc1EwRkJXQ3hGUVVGaE8wRkJRVU5FTEZsQlFVVTJTQ3hGUVVGRk4wZ3NRMEZCUml4RFFVRkdMRU5CUVU4c1NVRkJTVEJDTEVsQlFVVXNVMEZCUmtFc1EwRkJSU3hIUVVGVk8wRkJRVU42UWl4WlFVRkZjV3hDTEZWQlFWVXNRMEZCVml4RFFVRkdMRVZCUVdWQkxGVkJRVlVzUTBGQlZpeERRVUZtTEVWQlFUUkNRU3hWUVVGVkxFTkJRVllzUTBGQk5VSXNSVUZCZVVOQkxGVkJRVlVzUTBGQlZpeERRVUY2UXl4RlFVRnpSRUVzVlVGQlZTeERRVUZXTEVOQlFYUkVMRWRCUVc5Rk9XdENMRVZCUVVWclowSXNSMEZCUml4RFFVRk5NV2RDTEVOQlFVNHNSVUZCVVRCQ0xFTkJRVklzUTBGQmNFVTdRVUZCSzBVc1UwRkJhRWNzUTBGQmFVY3NUMEZCVDJ4Q0xFVkJRVVZuWjBJc1JVRkJSaXhEUVVGTGVHZENMRU5CUVV3c1JVRkJUekJDTEVOQlFWQXNSMEZCVld4Q0xFTkJRV3BDTzBGQlFXMUNMRTlCUVhwdVF5eEZRVUV3YmtOQkxFVkJRVVV5VUN4SlFVRkdMRWRCUVU4c1JVRkJRM1ZXTEdWQlFXTXNkVUpCUVZNeGJFSXNRMEZCVkN4RlFVRlhPMEZCUVVNc2FVSkJRVTlCTEVWQlFVVmpMRWxCUVVZc1EwRkJUeXhWUVVGUUxFVkJRV3RDTEVkQlFXeENMRWRCUVhWQ1pDeERRVUU1UWp0QlFVRm5ReXhUUVVFelJDeEZRVUUwUkRKc1FpeFRRVUZSTEdsQ1FVRlRNMnhDTEVOQlFWUXNSVUZCVjBNc1EwRkJXQ3hGUVVGaE8wRkJRVU1zYVVKQlFVOUVMRVZCUVVWakxFbEJRVVlzUTBGQlR5eE5RVUZRTEVWQlFXTmlMRU5CUVdRc1IwRkJhVUpFTEVOQlFYaENPMEZCUVRCQ0xGTkJRVFZITEVWQlFUWkhOR3hDTEZWQlFWTXNhMEpCUVZNMWJFSXNRMEZCVkN4RlFVRlhReXhEUVVGWUxFVkJRV0U3UVVGQlF5eHBRa0ZCVDBRc1JVRkJSV01zU1VGQlJpeERRVUZQTEZsQlFWQXNSVUZCYjBKaUxFTkJRWEJDTEVkQlFYVkNSQ3hEUVVFNVFqdEJRVUZuUXl4VFFVRndTeXhGUVVGeFMzZFlMRk5CUVZFc2FVSkJRVk40V0N4RFFVRlVMRVZCUVZjN1FVRkJReXhwUWtGQlQwRXNSVUZCUldNc1NVRkJSaXhEUVVGUExHVkJRVkFzUlVGQmRVSXNRMEZCUXl4RFFVRjRRaXhIUVVFeVFtUXNRMEZCYkVNN1FVRkJiME1zVTBGQk4wNHNSVUZCT0U1NVdDeFJRVUZQTEdkQ1FVRlRlbGdzUTBGQlZDeEZRVUZYTzBGQlFVTXNhVUpCUVU5QkxFVkJRVVZqTEVsQlFVWXNRMEZCVHl4bFFVRlFMRVZCUVhWQ0xFTkJRVU1zUTBGQmVFSXNSMEZCTWtKa0xFTkJRV3hETzBGQlFXOURMRk5CUVhKU0xFVkJRWE5TZFZvc1dVRkJWeXh2UWtGQlUzUmFMRU5CUVZRc1JVRkJWenRCUVVGRExHbENRVUZMUVN4RlFVRkZPRU1zVDBGQlVDeExRVUZwUWk5RExFVkJRVVZETEVWQlFVVXdRaXhOUVVGS0xFVkJRVmxETEVWQlFWb3NRMEZCWlhCQ0xFVkJRVVZETEUxQlFVWXNRMEZCVTNkTkxGVkJRWGhDTEV0QlFYRkRlazBzUlVGQlJUaFpMRmRCUVVZc1EwRkJZM0phTEVOQlFXUXNSMEZCYVVKUExFVkJRVVZoTEV0QlFVWXNSMEZCVVdJc1JVRkJSVEpRTEVsQlFVWXNRMEZCVHpCV0xFMUJRVkFzUTBGQlkzSnNRaXhGUVVGRlF5eE5RVUZHTEVOQlFWTTRVQ3huUWtGQmRrSXNRMEZCVWl4SFFVRnBSQzlRTEVWQlFVVXlVQ3hKUVVGR0xFTkJRVTh3Vml4TlFVRlFMRU5CUVdOeWJFSXNSVUZCUlVNc1RVRkJSaXhEUVVGVE5GQXNaMEpCUVhaQ0xFTkJRWFpITEVsQlFXbEtjbEVzUlVGQlJVTXNSVUZCUlRCQ0xFMUJRVW9zUlVGQldVTXNSVUZCV2l4RFFVRmxjRUlzUlVGQlJVTXNUVUZCUml4RFFVRlRlVTBzVlVGQmVFSXNUVUZCYzBNeFRTeEZRVUZGWjFvc1YwRkJSaXhEUVVGamRsb3NRMEZCWkN4SFFVRnBRazhzUlVGQlJUSkdMRmRCUVVZc1IwRkJZek5HTEVWQlFVVXlVQ3hKUVVGR0xFTkJRVTh3Vml4TlFVRlFMRU5CUVdOeWJFSXNSVUZCUlVNc1RVRkJSaXhEUVVGVE5sQXNhVUpCUVhaQ0xFTkJRV1FzUjBGQmQwUTVVQ3hGUVVGRk1sQXNTVUZCUml4RFFVRlBNRllzVFVGQlVDeERRVUZqY214Q0xFVkJRVVZETEUxQlFVWXNRMEZCVXpKUUxHZENRVUYyUWl4RFFVRXZSeXhEUVVGcVNpeEZRVUV3VTNCUkxFVkJRVVZETEVWQlFVVXdRaXhOUVVGS0xFVkJRVmxETEVWQlFWb3NRMEZCWlN4TlFVRkpjRUlzUlVGQlJVTXNUVUZCUml4RFFVRlRkMDhzVjBGQk5VSXNTMEZCTUVOcVVDeEZRVUZGUXl4RlFVRkZNRUlzVFVGQlNpeEZRVUZaTEVOQlFWb3NSVUZCWlcxclFpeExRVUZtTEVWQlFYSlhPMEZCUVRaWUxGTkJRVEZ4UWl4RlFVRXljVUpETEZsQlFWY3ZiRUlzUlVGQlJTeHJRa0ZCWjBKUkxFVkJRVVZETEUxQlFVWXNRMEZCVTNGUUxHbENRVUY2UWl4SFFVRXlReXh2UkVGQk4wTXNRMEZCZEhKQ0xFVkJRWGw0UWl0V0xGRkJRVThzWjBKQlFWTTNiRUlzUTBGQlZDeEZRVUZYTzBGQlFVTXNZMEZCU1VNc1NVRkJSVThzUlVGQlJUSlFMRWxCUVVZc1EwRkJUelJXTEZWQlFXSXNRMEZCZDBJc1RVRkJTVGxzUWl4RlFVRkZLMElzVFVGQlRpeExRVUZsTDBJc1JVRkJSWE5ZTEVsQlFVWXNRMEZCVHl4RlFVRlFMRWRCUVZkMFdDeEZRVUZGYzFnc1NVRkJSaXhEUVVGUGRsZ3NRMEZCVUN4RFFVRXhRanRCUVVGeFF5eFRRVUY2TWtJc1JVRkJNREpDZVdoQ0xFMUJRVXNzWjBKQlFWVTdRVUZCUTJwb1FpeFpRVUZGUXl4TlFVRkdMRU5CUVZOM1RTeFZRVUZVTEVsQlFYRkNlazBzUlVGQlJYbE5MRlZCUVhaQ0xFbEJRVzFEZWswc1JVRkJSWGxOTEZWQlFVWXNRMEZCWVdwTUxFMUJRV0lzUjBGQmIwSXNRMEZCZGtRc1MwRkJNa1I0UWl4RlFVRkZNbEFzU1VGQlJpeERRVUZQZFZZc1lVRkJVQ3hEUVVGeFFteHNRaXhGUVVGRmVVMHNWVUZCZGtJc1IwRkJiVU42VFN4RlFVRkZNbEFzU1VGQlJpeERRVUZQZDFZc1QwRkJVQ3hEUVVGbGJteENMRVZCUVVWNVRTeFZRVUZxUWl4RlFVRTBRaXhSUVVFMVFpeERRVUZ1UXl4RlFVRjVSWHBOTEVWQlFVVXlVQ3hKUVVGR0xFTkJRVTk1Vml4UlFVRlFMRU5CUVdkQ2NHeENMRVZCUVVWNVRTeFZRVUZzUWl4RlFVRTJRbnBOTEVWQlFVVkRMRTFCUVVZc1EwRkJVelJRTEdkQ1FVRjBReXhEUVVGd1NTeEhRVUUyVERkUUxFVkJRVVZETEUxQlFVWXNRMEZCVTNsTkxGVkJRVlFzU1VGQmNVSXhUU3hGUVVGRk1FMHNWVUZCZGtJc1NVRkJiVU14VFN4RlFVRkZNRTBzVlVGQlJpeERRVUZoYkV3c1RVRkJZaXhIUVVGdlFpeERRVUYyUkN4TFFVRXlSSGhDTEVWQlFVVXlVQ3hKUVVGR0xFTkJRVTkxVml4aFFVRlFMRU5CUVhGQ2JHeENMRVZCUVVVd1RTeFZRVUYyUWl4SFFVRnRRekZOTEVWQlFVVXlVQ3hKUVVGR0xFTkJRVTkzVml4UFFVRlFMRU5CUVdWdWJFSXNSVUZCUlRCTkxGVkJRV3BDTEVWQlFUUkNMRkZCUVRWQ0xFTkJRVzVETEVWQlFYbEZNVTBzUlVGQlJUSlFMRWxCUVVZc1EwRkJUM2xXTEZGQlFWQXNRMEZCWjBKd2JFSXNSVUZCUlRCTkxGVkJRV3hDTEVWQlFUWkNNVTBzUlVGQlJVTXNUVUZCUml4RFFVRlRNbEFzWjBKQlFYUkRMRU5CUVhCSkxFTkJRVGRNTEVWQlFUQlljRkVzUlVGQlJWRXNSVUZCUlc5RUxGTkJRVW9zUlVGQlpUSmhMRTFCUVdZc1EwRkJjMEl2WkN4RlFVRkZNbEFzU1VGQlJpeERRVUZQTkZZc1ZVRkJOMElzUTBGQk1WZzdRVUZCYldFc1UwRkJOM2hETEVWQlFUaDRRM0JQTEdkQ1FVRmxMREJDUVVGVk8wRkJRVU51V0N4WlFVRkZReXhOUVVGR0xFTkJRVk0yVEN4VlFVRlVMRWxCUVhGQ09Vd3NSVUZCUlVNc1RVRkJSaXhEUVVGVEswd3NiVUpCUVRsQ0xFbEJRVzFFYUUwc1JVRkJSVEpYTEU5QlFYSkVMRWxCUVRoRU0xY3NSVUZCUlRKWExFOUJRVVlzUTBGQlZXNVdMRTFCUVhoRkxFbEJRV2RHZUVJc1JVRkJSVEpYTEU5QlFVWXNRMEZCVlhCV0xFbEJRVllzUTBGQlpTeFpRVUZWTzBGQlFVTXNaMEpCUVVrNVFpeEpRVUZGUkN4RlFVRkZMRWxCUVVZc1EwRkJUaXhEUVVGalVTeEZRVUZGTWxBc1NVRkJSaXhEUVVGUGRWWXNZVUZCVUN4RFFVRnhRbnBzUWl4RFFVRnlRaXhIUVVGM1FrOHNSVUZCUlRKUUxFbEJRVVlzUTBGQlQzZFdMRTlCUVZBc1EwRkJaVEZzUWl4RFFVRm1MRVZCUVdsQ0xGRkJRV3BDTEVOQlFYaENMRVZCUVcxRVR5eEZRVUZGTWxBc1NVRkJSaXhEUVVGUGVWWXNVVUZCVUN4RFFVRm5Rak5zUWl4RFFVRm9RaXhGUVVGclFrOHNSVUZCUlVNc1RVRkJSaXhEUVVGVEsxQXNkVUpCUVZRc1EwRkJhVU5yUml4UFFVRnFReXhEUVVGNVF5eFhRVUY2UXl4RlFVRnhSSHBXTEVWQlFVVnRXQ3hMUVVGR0xFdEJRVlVzUTBGQkwwUXNRMEZCYkVJc1EwRkJia1E3UVVGQmQwa3NWMEZCYUV3c1EwRkJhRVk3UVVGQmExRXNVMEZCTVdwRUxFVkJRVEpxUkhOTExGTkJRVkVzYlVKQlFWVTdRVUZCUTJ4b1FpeFpRVUZGTWxBc1NVRkJSaXhEUVVGUE5GWXNWVUZCVUN4SlFVRnRRblpzUWl4RlFVRkZNbEFzU1VGQlJpeERRVUZQTkZZc1ZVRkJVQ3hEUVVGclFpOXFRaXhOUVVGc1FpeEhRVUY1UWl4RFFVRTFReXhKUVVFclEzaENMRVZCUVVVeVVDeEpRVUZHTEVOQlFVODBWaXhWUVVGUUxFTkJRV3RDZWtnc1RVRkJiRUlzUlVGQkwwTTdRVUZCTUVVc1UwRkJlSEJFTEVWQlFXcHZReXhGUVVFeWVFWTVaQ3hGUVVGRmFXaENMRWxCUVVZc1IwRkJUeXhaUVVGVk8wRkJRVU5xYUVJc1ZVRkJSVU1zVFVGQlJpeERRVUZUVVN4SlFVRlVMRWxCUVdWVUxFVkJRVVUyWkN4VlFVRkdMRVZCUVdZc1JVRkJPRUkzWkN4RlFVRkZNRlVzYlVKQlFVWXNSVUZCT1VJc1JVRkJjMFF4VlN4RlFVRkZPRlVzWjBKQlFVWXNSVUZCZEVRc1JVRkJNa1U1VlN4RlFVRkZhMWdzWjBKQlFVWXNSVUZCTTBVc1JVRkJaMGRzV0N4RlFVRkZReXhOUVVGR0xFTkJRVk15U2l4VFFVRlVMRWxCUVc5Q05Vb3NSVUZCUlRSS0xGTkJRWFJDTEV0QlFXdEROVW9zUlVGQlJUUktMRk5CUVVZc1EwRkJXWGxPTEVkQlFWb3NTVUZCYTBKeVdDeEZRVUZGUXl4TlFVRkdMRU5CUVZNMlNpeHJRa0ZCVkN4SlFVRTJRamxLTEVWQlFVVTBTaXhUUVVGR0xFTkJRVmx0Vnl4bFFVRmFMRVZCUVdwR0xFTkJRV2hITEVWQlFXZE9MRmxCUVZVdlppeEZRVUZGUXl4TlFVRkdMRU5CUVZOMVNTeE5RVUZ1UWl4SlFVRXlRbmhKTEVWQlFVVjVZeXhQUVVGR0xFTkJRVlY2WXl4RlFVRkZReXhOUVVGR0xFTkJRVk4xU1N4TlFVRnVRaXhEUVVFelFpeExRVUYzUkhoSkxFVkJRVVZETEUxQlFVWXNRMEZCVTFFc1NVRkJWQ3hKUVVGbFZDeEZRVUZGWjBjc1kwRkJSaXhGUVVGbUxFVkJRV3REYUVjc1JVRkJSWGxqTEU5QlFVWXNRMEZCVlhwakxFVkJRVVZETEUxQlFVWXNRMEZCVTNWSkxFMUJRVzVDTEVWQlFUSkNiVlVzV1VGQk0wSXNSVUZCTVVZc1EwRkJhRTRzUlVGQmNWWXpZeXhGUVVGRlF5eE5RVUZHTEVOQlFWTlJMRWxCUVZRc1IwRkJZMVFzUlVGQlJYZFlMRTlCUVVZc1EwRkJWWGhZTEVWQlFVVkRMRTFCUVVZc1EwRkJVekJJTEZsQlFWUXNSMEZCYzBJelNDeEZRVUZGZFU0c1dVRkJiRU1zUlVGQkswTXNRMEZCTDBNc1JVRkJhVVIyVGl4RlFVRkZReXhOUVVGR0xFTkJRVk5uVVN4clFrRkJNVVFzUTBGQlpDeEpRVUUyUm1wUkxFVkJRVVYzV0N4UFFVRkdMRU5CUVZWNFdDeEZRVUZGUXl4TlFVRkdMRU5CUVZNd1NDeFpRVUZ1UWl4RlFVRm5ReXhEUVVGb1F5eEZRVUZyUXpOSUxFVkJRVVZETEUxQlFVWXNRMEZCVTJkUkxHdENRVUV6UXl4SFFVRXJSQ3hOUVVGSmFsRXNSVUZCUlVNc1RVRkJSaXhEUVVGVE1FZ3NXVUZCWWl4TFFVRTBRak5JTEVWQlFVVjFTaXhSUVVGR0xFbEJRVmwyU2l4RlFVRkZReXhOUVVGR0xFTkJRVk56U2l4UlFVRnlRaXhKUVVFclFuWktMRVZCUVVWMVNpeFJRVUZHTEVOQlFWZHZWQ3haUVVGWUxFVkJRUzlDTEVWQlFYbEVNMk1zUlVGQlJYbEhMRWxCUVVZc1NVRkJVWHBITEVWQlFVVkRMRTFCUVVZc1EwRkJVM1ZITEZkQlFXcENMRXRCUVN0Q2VFY3NSVUZCUlhsSExFbEJRVVlzUTBGQlQwTXNTVUZCVUN4SlFVRmpNVWNzUlVGQlJYbEhMRWxCUVVZc1EwRkJUM05aTEd0Q1FVRlFMRWRCUVRCQ0xFTkJRVU1zUTBGQmVFVXNRMEZCY2tZc1EwRkJOVW9zUTBGQmNsWXNSVUZCYlhCQ0wyVXNSVUZCUld0YUxGbEJRVVlzUlVGQmJuQkNMRVZCUVc5eFFteGFMRVZCUVVWRExFMUJRVVlzUTBGQlUzZFFMRkZCUVZRc1NVRkJiVUo2VUN4RlFVRkZkMUlzVDBGQlJpeERRVUZWTDBJc1VVRkJOMElzU1VGQmRVTjZVQ3hGUVVGRk1HUXNZVUZCUml4RlFVRXpjMElzUlVGQk5uUkNNV1FzUlVGQlJVTXNUVUZCUml4RFFVRlRiVTRzWVVGQlZDeEpRVUYzUWl4RFFVRkRjRTRzUlVGQlJVTXNUVUZCUml4RFFVRlRkVWNzVjBGQmJFTXNTVUZCSzBONFJ5eEZRVUZGYjA0c1lVRkJSaXhGUVVFMWQwSXNSVUZCT0hoQ2NFNHNSVUZCUlVNc1RVRkJSaXhEUVVGVGRVb3NTVUZCVkN4SlFVRmxlRW9zUlVGQlJYZEtMRWxCUVdwQ0xFbEJRWFZDZUVvc1JVRkJSWGRLTEVsQlFVWXNRMEZCVDNsWUxFbEJRVkFzUlVGQmNucENMRVZCUVcwd1FtcG9RaXhGUVVGRlF5eE5RVUZHTEVOQlFWTkRMRkZCUVZRc1NVRkJiVUpHTEVWQlFVVnRWU3hoUVVGR0xFVkJRWFF4UWl4RlFVRjNNa0p1VlN4RlFVRkZReXhOUVVGR0xFTkJRVk1yU2l4bFFVRlVMRWxCUVRCQ2FFc3NSVUZCUldkcFFpeHhRa0ZCTlVJc1NVRkJiVVJvYVVJc1JVRkJSV2RwUWl4eFFrRkJSaXhGUVVFek5VSXNSVUZCY1RkQ2FHbENMRVZCUVVWRExFMUJRVVlzUTBGQlUyZExMR2xDUVVGVUxFbEJRVFJDYWtzc1JVRkJSWGxwUWl4MVFrRkJPVUlzU1VGQmRVUjZhVUlzUlVGQlJYbHBRaXgxUWtGQlJpeEZRVUUxSzBJc1JVRkJkMmREZW1sQ0xFVkJRVVZETEUxQlFVWXNRMEZCVTNWc1FpeHRRa0ZCVkN4TFFVRXJRbmhzUWl4RlFVRkZReXhOUVVGR0xFTkJRVk54U3l4WlFVRlVMRWRCUVhOQ2RFc3NSVUZCUlVNc1RVRkJSaXhEUVVGVGRXeENMRzFDUVVFNVJDeERRVUY0WjBNc1JVRkJNbXhEZUd4Q0xFVkJRVVZETEUxQlFVWXNRMEZCVTI5TExFOUJRVlFzU1VGQmEwSnlTeXhGUVVGRmNVc3NUMEZCY0VJc1NVRkJOa0p5U3l4RlFVRkZjVXNzVDBGQlJpeERRVUZWTkZjc1NVRkJWaXhGUVVGNGJrTXNSVUZCZVc5RGFtaENMRVZCUVVWRExFMUJRVVlzUTBGQlUydExMRTlCUVZRc1NVRkJhMEp1U3l4RlFVRkZiVXNzVDBGQmNFSXNTVUZCTmtKdVN5eEZRVUZGYlVzc1QwRkJSaXhEUVVGVk9GY3NTVUZCVml4RlFVRjBjVU1zUlVGQmRYSkRhbWhDTEVWQlFVVkRMRTFCUVVZc1EwRkJVekJRTEVsQlFWUXNTVUZCWlROUUxFVkJRVVV5VUN4SlFVRnFRaXhKUVVGMVFqTlFMRVZCUVVVeVVDeEpRVUZHTEVOQlFVOXpVaXhKUVVGUUxFVkJRVGx6UXl4RlFVRTBkRU5xYUVJc1JVRkJSVmtzU1VGQlJpeERRVUZQTEZGQlFWQXNSVUZCWjBKYUxFTkJRV2hDTEVOQlFUVjBRenRCUVVFcmRVTXNUMEZCTldoSkxFVkJRVFpvU1VFc1JVRkJSWGxzUWl4aFFVRkdMRWRCUVdkQ0xGbEJRVlU3UVVGQlEzcHNRaXhWUVVGRmIwUXNVMEZCUml4RFFVRlpLMU1zVjBGQldpeERRVUYzUW01WExFVkJRVVV3VVN4VlFVRkdMRU5CUVdFMFFpeEpRVUZpTEVOQlFXdENMRWRCUVd4Q0xFTkJRWGhDTEVWQlFXZEVORXdzVlVGQmFFUXNRMEZCTWtRc1QwRkJNMFFzUjBGQmIwVnNaU3hGUVVGRk5GSXNUMEZCUml4RFFVRlZjMDBzVlVGQlZpeERRVUZ4UWl4UFFVRnlRaXhEUVVGd1JTeEZRVUZyUjJ4bExFVkJRVVZITEUxQlFVWXNTVUZCVlVnc1JVRkJSVWNzVFVGQlJpeERRVUZUY1VJc1RVRkJia0lzU1VGQk1rSjRRaXhGUVVGRlJ5eE5RVUZHTEVOQlFWTm5WeXhYUVVGVUxFTkJRWEZDTEVOQlFVTnVWeXhGUVVGRlF5eE5RVUZHTEVOQlFWTnBUeXhwUWtGQlZpeEZRVUUwUW14UExFVkJRVVZETEUxQlFVWXNRMEZCVTNGRUxHZENRVUZ5UXl4RlFVRnpSSFJFTEVWQlFVVkRMRTFCUVVZc1EwRkJVMjFQTEdOQlFTOUVMRVZCUVRoRmNFOHNSVUZCUlVNc1RVRkJSaXhEUVVGVGNVOHNZMEZCZGtZc1JVRkJkVWRuUlN4SlFVRjJSeXhEUVVFMFJ5eEhRVUUxUnl4RFFVRnlRaXhGUVVGMVNUUk1MRlZCUVhaSkxFTkJRV3RLTEU5QlFXeEtMRVZCUVRKS1FTeFZRVUV6U2l4RFFVRnpTeXh2UWtGQmRFc3NSVUZCTkV4QkxGVkJRVFZNTEVOQlFYVk5MR2xDUVVGMlRTeERRVUUzU0N4RlFVRjFWbXhsTEVWQlFVVTRVaXh0UWtGQlJpeEpRVUYxUWpsU0xFVkJRVVU0VWl4dFFrRkJSaXhEUVVGelFuUlJMRTFCUVRkRExFbEJRWEZFZUVJc1JVRkJSVGhTTEcxQ1FVRkdMRU5CUVhOQ2NVVXNWMEZCZEVJc1EwRkJhME51Vnl4RlFVRkZReXhOUVVGR0xFTkJRVk0yVHl4eFFrRkJNME1zUTBGQk5Wa3NSVUZCT0dNNVR5eEZRVUZGTWxjc1QwRkJSaXhKUVVGWE0xY3NSVUZCUlRKWExFOUJRVVlzUTBGQlZXNVdMRTFCUVhKQ0xFbEJRVFpDZUVJc1JVRkJSVEpYTEU5QlFVWXNRMEZCVlZJc1YwRkJWaXhEUVVGelFtNVhMRVZCUVVWRExFMUJRVVlzUTBGQlUzbFBMR2xDUVVFdlFpeERRVUV6WlN4RlFVRTJhRUl4VHl4RlFVRkZReXhOUVVGR0xFTkJRVk41VFN4VlFVRlVMRWxCUVhGQ2JFNHNSVUZCUlZFc1JVRkJSVU1zVFVGQlJpeERRVUZUZVUwc1ZVRkJXQ3hGUVVGMVFubEtMRmRCUVhaQ0xFTkJRVzFEYmxjc1JVRkJSVU1zVFVGQlJpeERRVUZUTUU4c2JVSkJRVFZETEVOQlFXeHFRaXhGUVVGdGJrSXpUeXhGUVVGRlF5eE5RVUZHTEVOQlFWTjNUU3hWUVVGVUxFbEJRWEZDYWs0c1JVRkJSVkVzUlVGQlJVTXNUVUZCUml4RFFVRlRkMDBzVlVGQldDeEZRVUYxUWpCS0xGZEJRWFpDTEVOQlFXMURibGNzUlVGQlJVTXNUVUZCUml4RFFVRlRNRThzYlVKQlFUVkRMRU5CUVhodlFpeEZRVUY1YzBJelR5eEZRVUZGUXl4TlFVRkdMRU5CUVZNeVNpeFRRVUZVTEVsQlFXOUNOVW9zUlVGQlJUUktMRk5CUVhSQ0xFdEJRV3RETlVvc1JVRkJSVFJLTEZOQlFVWXNRMEZCV1RCV0xFdEJRVm9zU1VGQmJVSjBaaXhGUVVGRk5Fb3NVMEZCUml4RFFVRlpNRllzUzBGQldpeERRVUZyUWpsa0xFMUJRWEpETEVsQlFUWkRlRUlzUlVGQlJUUktMRk5CUVVZc1EwRkJXVEJXTEV0QlFWb3NRMEZCYTBKd1FpeFZRVUZzUWl4RFFVRTJRaXhQUVVFM1FpeERRVUUzUXl4RlFVRnRSbXhsTEVWQlFVVTBTaXhUUVVGR0xFTkJRVmtyVml4SlFVRmFMRWxCUVd0Q00yWXNSVUZCUlRSS0xGTkJRVVlzUTBGQldTdFdMRWxCUVZvc1EwRkJhVUp1WlN4TlFVRnVReXhKUVVFeVEzaENMRVZCUVVVMFNpeFRRVUZHTEVOQlFWa3JWaXhKUVVGYUxFTkJRV2xDZWtJc1ZVRkJha0lzUTBGQk5FSXNUMEZCTlVJc1EwRkJhRXNzUTBGQmVuTkNPMEZCUVNzMFFpeFBRVUYyT0Vvc1JVRkJkemhLYkdVc1JVRkJSV3RvUWl4UFFVRkdMRWRCUVZVc1ZVRkJVekZvUWl4RFFVRlVMRVZCUVZkRExFTkJRVmdzUlVGQllUdEJRVUZEVHl4VlFVRkZiVm9zV1VGQlJpeEpRVUZwUW01YUxFVkJRVVZsTEZsQlFVWXNSVUZCYWtJc1JVRkJhME5tTEVWQlFVVkRMRTFCUVVZc1EwRkJVekpLTEZOQlFWUXNTVUZCYjBJMVNpeEZRVUZGTkVvc1UwRkJkRUlzU1VGQmFVTTFTaXhGUVVGRlF5eE5RVUZHTEVOQlFWTTJTaXhyUWtGQk1VTXNTVUZCT0VRNVNpeEZRVUZGTkVvc1UwRkJSaXhEUVVGWmNWY3NaMEpCUVZvc1JVRkJhRWNzUlVGQkswaHFaMElzUlVGQlJVTXNUVUZCUml4RFFVRlRVU3hKUVVGVUxFbEJRV1ZVTEVWQlFVVnRVaXhYUVVGR0xFVkJRVGxKTEVWQlFUaEtNVklzUzBGQlIwOHNSVUZCUlhsc1FpeGhRVUZHTEVWQlFXcExMRVZCUVcxTWVteENMRVZCUVVVeVpDeHRRa0ZCUml4RlFVRnVUQ3hGUVVFeVRUTmtMRVZCUVVWRExFMUJRVVlzUTBGQlUzVktMRWxCUVZRc1NVRkJaWGhLTEVWQlFVVjNTaXhKUVVGcVFpeEpRVUYxUW5oS0xFVkJRVVYzU2l4SlFVRkdMRU5CUVU4d1dDeFBRVUZRTEVWQlFXeFBMRVZCUVcxUWJHaENMRVZCUVVWRExFMUJRVVlzUTBGQlV5dEtMR1ZCUVZRc1NVRkJNRUpvU3l4RlFVRkZLMmhDTEhOQ1FVRTFRaXhKUVVGdlJDOW9RaXhGUVVGRksyaENMSE5DUVVGR0xFVkJRWFpUTEVWQlFXdFZMMmhDTEVWQlFVVkRMRTFCUVVZc1EwRkJVMmRMTEdsQ1FVRlVMRWxCUVRSQ2Frc3NSVUZCUlhkcFFpeDNRa0ZCT1VJc1NVRkJkMFI0YVVJc1JVRkJSWGRwUWl4M1FrRkJSaXhGUVVFeFdDeEZRVUYxV25ocFFpeEZRVUZGUXl4TlFVRkdMRU5CUVZNd1VDeEpRVUZVTEVsQlFXVXpVQ3hGUVVGRk1sQXNTVUZCYWtJc1NVRkJkVUl6VUN4RlFVRkZNbEFzU1VGQlJpeERRVUZQZFZJc1QwRkJVQ3hGUVVFNVlTeEZRVUVyWW14b1FpeEZRVUZGUXl4TlFVRkdMRU5CUVZOdlN5eFBRVUZVTEVsQlFXdENMRU5CUVVOeVN5eEZRVUZGUXl4TlFVRkdMRU5CUVZOeFN5eFpRVUUxUWl4SlFVRXdRelZKTEU5QlFVOW5hMElzYlVKQlFWQXNRMEZCTWtJc1ZVRkJNMElzUlVGQmMwTXhiRUlzUlVGQlJYRkxMRTlCUVVZc1EwRkJWWEZZTEd0Q1FVRm9SQ3hEUVVGNlpTeEZRVUUyYVVJeGFFSXNSVUZCUlVNc1RVRkJSaXhEUVVGVGEwc3NUMEZCVkN4SlFVRnJRbTVMTEVWQlFVVnRTeXhQUVVGd1FpeEpRVUUyUW01TExFVkJRVVZ0U3l4UFFVRkdMRU5CUVZVclZ5eFBRVUZXTEVWQlFURnJRaXhGUVVFNGJFSnNhRUlzUlVGQlJWa3NTVUZCUml4RFFVRlBMRmRCUVZBc1EwRkJPV3hDTEVWQlFXdHVRbkJDTEUxQlFVa3NRMEZCUXl4RFFVRk1MRXRCUVZOUkxFbEJRVVVzU1VGQldDeERRVUZzYmtJN1FVRkJiVzlDTEU5QlFXNXRUQ3hGUVVGdmJVeEJMRVZCUVVWcGFFSXNTVUZCUml4RlFVRndiVXdzUlVGQk5tMU1hbWhDTEVOQlFYQnVURHRCUVVGemJrdzdRVUZCUXl4SFFVWTFkbXhDTEVOQlJUWjJiRUpRTEVWQlFVVnJiVUlzVTBGQlJpeEhRVUZaTEVWQlFVTXZSeXhWUVVGVExGbEJRVlU3UVVGQlF5eFZRVUZKY0dZc1NVRkJSV3RETEU5QlFVOXhWeXhUUVVGUUxFTkJRV2xDYlVzc1UwRkJha0lzUTBGQk1rSXZaU3hYUVVFelFpeEZRVUZPTEVOQlFTdERMRTlCUVU4elJDeEZRVUZGTUVnc1QwRkJSaXhEUVVGVkxGRkJRVllzUzBGQmNVSXNRMEZCY2tJc1NVRkJkMEl4U0N4RlFVRkZNRWdzVDBGQlJpeERRVUZWTEZGQlFWWXNTVUZCYjBJc1EwRkJOVU1zU1VGQkswTXhTQ3hGUVVGRk1FZ3NUMEZCUml4RFFVRlZMRk5CUVZZc1NVRkJjVUlzUTBGQk0wVTdRVUZCTmtVc1MwRkJka2tzUlVGQlZpeEZRVUZ2U2pKWUxHRkJRVmtzSzBOQlFTdERLMGNzU1VGQkwwTXNRMEZCYjBSc2EwSXNUMEZCVDNGWExGTkJRVkFzUTBGQmFVSnRTeXhUUVVGeVJTeERRVUZvU3l4RlFVRm5VSFJDTEZOQlFWRXNhVUpCUVZOd2FFSXNRMEZCVkN4RlFVRlhPMEZCUVVNc1lVRkJUU3h4UWtGQmJVSnhiVUlzVDBGQlQwWXNVMEZCVUN4RFFVRnBRbkJKTEZGQlFXcENMRU5CUVRCQ2RVa3NTMEZCTVVJc1EwRkJaME4wYlVJc1EwRkJhRU1zUTBGQmVrSTdRVUZCTkVRc1MwRkJhRlVzUlVGQmFWVTJXU3hUUVVGUkxFVkJRVU5ETEVsQlFVYzFWeXhQUVVGUGNWY3NVMEZCVUN4RFFVRnBRa01zWTBGQmFrSXNTVUZCYVVOMFZ5eFBRVUZQY1Zjc1UwRkJVQ3hEUVVGcFFrVXNaMEpCUVhSRUxFVkJRWFZGT0U0c1UwRkJVWEpyUWl4UFFVRlBjVmNzVTBGQlVDeERRVUZwUWtVc1owSkJRV3BDTEVsQlFXMURkbGNzVDBGQlQzRlhMRk5CUVZBc1EwRkJhVUpwVHl4blFrRkJha0lzUjBGQmEwTXNRMEZCY2tVc1NVRkJkMFYwYTBJc1QwRkJUM0ZYTEZOQlFWQXNRMEZCYVVKRExHTkJRV3BDTEVsQlFXbERkRmNzVDBGQlQzRlhMRk5CUVZBc1EwRkJhVUpyVHl4alFVRnFRaXhIUVVGblF5eERRVUY0VGl4RlFVRXdUaTlLTEZGQlFVOHNXVUZCVlR0QlFVRkRMRmxCUVVreFl5eEpRVUZGZDBRc1UwRkJVMjFtTEdGQlFWUXNRMEZCZFVJc1MwRkJka0lzUTBGQlRpeERRVUZ2UXl4UFFVRlBNMmxDTEVWQlFVVXdiVUlzVTBGQlJpeEhRVUZaTEhWRFFVRmFMRVZCUVc5RUxFMUJRVWt4YlVJc1JVRkJSVEp0UWl4dlFrRkJSaXhEUVVGMVFpeEhRVUYyUWl4RlFVRTBRak5yUWl4TlFVRXpSanRCUVVGclJ5eFBRVUZxU2l4RlFVRnFUeXhGUVVGNlZTeEZRVUVyY2tJMFVTeFJRVUZQTEZsQlFWVTdRVUZCUXl4VlFVRkpOVk1zU1VGQlJXdERMRTlCUVU5eFZ5eFRRVUZRTEVOQlFXbENiVXNzVTBGQmRrSTdRVUZCUVN4VlFVRnBRM3BwUWl4SlFVRkZSQ3hGUVVGRk5HMUNMRXRCUVVZc1EwRkJVU3cyUWtGQlVpeERRVUZ1UXp0QlFVRkJMRlZCUVRCRmJHeENMRWxCUVVVeFFpeEZRVUZGTkcxQ0xFdEJRVVlzUTBGQlVTeHpRa0ZCVWl4RFFVRTFSVHRCUVVGQkxGVkJRVFJITVcxQ0xFbEJRVVZHTEVWQlFVVTBiVUlzUzBGQlJpeERRVUZSTEhsQ1FVRlNMRU5CUVRsSE8wRkJRVUVzVlVGQmFVcDZiVUlzU1VGQlJTeERRVUZEZFVJc1EwRkJSQ3hKUVVGSk1VSXNSVUZCUlRSdFFpeExRVUZHTEVOQlFWRXNORUpCUVZJc1EwRkJka29zUTBGQk5rd3NUMEZCVFN4RlFVRkRkazRzUzBGQlNUTllMRXRCUVVkMlFpeERRVUZJTEVsQlFVMUVMRU5CUVZnc1JVRkJZVEpUTEZOQlFWRTFVeXhEUVVGeVFpeEZRVUZPTzBGQlFUaENMRXRCUVhSUExFVkJRWFJ6UWl4RlFVRXJOa0lyVWl4VFFVRlJMRVZCUVVOSExFOUJRVTFxVVN4UFFVRlBNbXRDTEZOQlFWQXNTVUZCYTBKQkxGVkJRVlV4VlN4TFFVRldMRXRCUVd0Q0xFTkJRVU1zUTBGQmNrTXNTVUZCZDBNc1dVRkJWVHRCUVVGRExHVkJRVTBzUTBGQlF5eEZRVUZGTEd0Q1FVRnBRbXBSTEUxQlFXcENMRWxCUVhsQ1FTeFBRVUZQTkd0Q0xHRkJRVkFzU1VGQmMwSjBha0lzYjBKQlFXOUNjMnBDTEdGQlFYSkZMRU5CUVZBN1FVRkJNa1lzVDBGQmRFY3NSVUZCTDBNc1JVRkJkMG8xVlN4alFVRmhhRkVzVDBGQlR6SnJRaXhUUVVGUUxFbEJRV3RDUVN4VlFVRlZSU3hsUVVGV0xFdEJRVFJDTEVOQlFVTXNRMEZCTDBNc1NVRkJhMFFzV1VGQlZUdEJRVUZETEZsQlFVa3ZiVUlzU1VGQlJYZEVMRk5CUVZOdFppeGhRVUZVTEVOQlFYVkNMRXRCUVhaQ0xFVkJRVGhDYWxBc1MwRkJjRU1zUTBGQk1FTXNUMEZCVFN4MVFrRkJjMEl4VkN4RFFVRjBRaXhKUVVGNVFpeHZRa0ZCYlVKQkxFTkJRVFZETEVsQlFTdERMR3RDUVVGcFFrRXNRMEZCYUVVc1NVRkJiVVVzYlVKQlFXdENRU3hEUVVGeVJpeEpRVUYzUml4cFFrRkJaMEpCTEVOQlFUbEhPMEZCUVdkSUxFOUJRWEpMTEVWQlFYWk9MRVZCUVN0WWFWTXNVMEZCVVN4WlFVRlZPMEZCUVVNc1lVRkJTU3hKUVVGSmFsTXNTVUZCUlhkRUxGTkJRVk50Wml4aFFVRlVMRU5CUVhWQ0xFdEJRWFpDTEVWQlFUaENhbEFzUzBGQmNFTXNSVUZCTUVONlZDeEpRVUZGTEhsTFFVRjVTM1ZrTEV0QlFYcExMRU5CUVN0TExFZEJRUzlMTEVOQlFUVkRMRVZCUVdkUE9XSXNTVUZCUlN4RFFVRjBUeXhGUVVGM1QwRXNTVUZCUlhwQ0xFVkJRVVVyUWl4TlFVRTFUeXhGUVVGdFVFNHNSMEZCYmxBN1FVRkJkVkFzWTBGQlIzcENMRVZCUVVWNVFpeERRVUZHTEV0QlFVOHhRaXhEUVVGV0xFVkJRVmtzVDBGQlRTeERRVUZETEVOQlFWQTdRVUZCYmxFN1FVRkJORkVzVDBGQmRsSXNSVUZCZGxrc1JVRkJhWEZDYVZFc1ZVRkJVeXhaUVVGVk8wRkJRVU1zWlVGQlRTeHpRa0ZCY1VJdlRpeE5RVUZ5UWl4SlFVRTJRaXcwUWtGQk1rSkJMRTFCUVRsRU8wRkJRWEZGTEU5QlFXaEdMRVZCUVRGeFFpeEZRVUUyZGtKbldDeHBRa0ZCWjBJc1dVRkJWVHRCUVVGRExGbEJRVWxzV2l4SlFVRkZMRU5CUVVNc1EwRkJVQ3hEUVVGVExFbEJRVWM3UVVGQlF5eGpRVUZKUXl4SlFVRkZiMjFDTEU5QlFVOVhMR05CUVZBc1EwRkJjMElzUlVGQmRFSXNSVUZCZVVJc1UwRkJla0lzUlVGQmJVTXNSVUZCUTBNc1MwRkJTU3hsUVVGVk8wRkJRVU5xYmtJc2EwSkJRVVVzUTBGQlF5eERRVUZJTzBGQlFVc3NZVUZCY2tJc1JVRkJia01zUTBGQlRpeERRVUZwUld0RExFOUJRVThyWml4blFrRkJVQ3hEUVVGM1FpeHhRa0ZCZUVJc1JVRkJPRU1zU1VGQk9VTXNSVUZCYlVSb2FVSXNRMEZCYmtRN1FVRkJjMFFzVTBGQk0wZ3NRMEZCTWtnc1QwRkJUVVFzUTBGQlRpeEZRVUZSTEVOQlFVVXNVVUZCVDBFc1EwRkJVRHRCUVVGVExFOUJRV3hMTEVWQlFUZDNRaXhGUVVGck4wSjNhMElzVlVGQlV5eFpRVUZWTzBGQlFVTXNaVUZCVFN4dlFrRkJiVUowYVVJc1RVRkJla0k3UVVGQlowTXNUMEZCTTBNc1JVRkJNemRDTEVWQlFYWTNRaXhGUVVGcE5rUnBha0lzVTBGQlVTeEZRVUY2TmtRc1JVRkJXaXhEUVVGNU4wUXNTMEZCU1N4SlFVRkplbXBDTEVsQlFVY3NXVUZCVlR0QlFVRkRMRkZCUVVreFFpeEpRVUZGTEZkQlFWTkJMRVZCUVZRc1JVRkJWenRCUVVGRExGVkJRVWxETEVsQlFVVXNTVUZCVGp0QlFVRkJMRlZCUVZkNVFpeEpRVUZGTEVOQlFXSXNRMEZCWlN4TFFVRkpRU3hKUVVGRkxFTkJRVTRzUlVGQlVVRXNTVUZCUlRGQ0xFZEJRVVZuUXl4TlFVRmFMRVZCUVcxQ1RpeEhRVUZ1UWp0QlFVRjFRbnBDTEZWQlFVVjVRaXhEUVVGR0xFbEJRVXN4UWl4SFFVRkZNRUlzUTBGQlJpeERRVUZNTzBGQlFYWkNMRTlCUVdsRExFOUJRVTk2UWl4RlFVRkZLMElzVFVGQlJpeEhRVUZUYUVNc1IwRkJSV2RETEUxQlFWZ3NSVUZCYTBJc1NVRkJla0k3UVVGQk9FSXNTMEZCYUVjN1FVRkJRU3hSUVVGcFJ5OUNMRWxCUVVVc1YwRkJVMEVzUlVGQlZDeEZRVUZYZVVJc1EwRkJXQ3hGUVVGaE8wRkJRVU1zVlVGQlNYaENMRWxCUVVVc1JVRkJUanRCUVVGQkxGVkJRVk5ETEVsQlFVVXNRMEZCV0N4RFFVRmhMRWxCUVVkR0xFMUJRVWNzUTBGQlEzbENMRU5CUVVvc1NVRkJUM3BDTEdOQlFXRkVMRU5CUVhaQ0xFVkJRWGxDTEU5QlFVOURMRVZCUVZBc1EwRkJVeXhKUVVGSFFTeEZRVUZJTEVWQlFVc3NTVUZCUnl4WlFVRlZMRTlCUVU5QkxFVkJRWEJDTEVWQlFYTkNPMEZCUVVNc1dVRkJTVWNzUTBGQlNqdEJRVUZCTEZsQlFVMUhMRU5CUVU0N1FVRkJRU3haUVVGUmEwSXNTVUZCUlhoQ0xFZEJRVVZwYmtJc1NVRkJSaXhGUVVGV0xFTkJRVzFDTEVsQlFVZDZiRUlzUlVGQlJXbEhMRTlCUVVZc1EwRkJWU3hIUVVGV0xFdEJRV2RDTEVOQlFXaENMRWxCUVcxQ2FrY3NSVUZCUldsSExFOUJRVVlzUTBGQlZTeEhRVUZXTEV0QlFXZENMRU5CUVhSRExFVkJRWGRETzBGQlFVTXNZMEZCU1hwR0xFbEJRVVVzUzBGQlRpeERRVUZaTEV0QlFVa3NUVUZCU1ZJc1JVRkJSV2xITEU5QlFVWXNRMEZCVlN4TFFVRldMRU5CUVVvc1MwRkJkVUo2Uml4SlFVRkZMRWxCUVhwQ0xFZEJRU3RDTEUxQlFVbFNMRVZCUVVWcFJ5eFBRVUZHTEVOQlFWVXNTMEZCVml4RFFVRktMRXRCUVhWQ2VrWXNTVUZCUlN4UFFVRjZRaXhEUVVFdlFpeEZRVUZwUlN4TlFVRkpVaXhGUVVGRmFVY3NUMEZCUml4RFFVRlZMRXRCUVZZc1EwRkJTaXhKUVVGelFpeE5RVUZKYWtjc1JVRkJSV2xITEU5QlFVWXNRMEZCVlN4TFFVRldMRU5CUVRGQ0xFdEJRVFpEZWtZc1NVRkJSU3hKUVVFdlF5eERRVUZxUlN4RlFVRnpTQ3hOUVVGSlVpeEZRVUZGYVVjc1QwRkJSaXhEUVVGVkxGRkJRVllzUTBGQlNpeExRVUV3UW5wR0xFbEJRVVVzVDBGQk5VSXNRMEZCZEVnc1JVRkJNa29zVFVGQlNWSXNSVUZCUldsSExFOUJRVVlzUTBGQlZTeFRRVUZXTEVOQlFVb3NTMEZCTWtKNlJpeEpRVUZGTEZGQlFUZENMRU5CUVROS0xFVkJRV3ROTVVJc1NVRkJSV2xFTEZOQlFWTnRaaXhoUVVGVUxFTkJRWFZDTVdkQ0xFTkJRWFpDTEVOQlFYQk5MRVZCUVRoT01VSXNSVUZCUlcxdFFpeFRRVUZHTEVkQlFWbDZiVUlzUlVGQk1VOHNSVUZCTkU5RkxFbEJRVVVzUTBGQmJGQXNSVUZCYjFCQkxFbEJRVVZKTEVWQlFVVTBiVUlzVlVGQlJpeERRVUZoYm14Q0xFMUJRVzVSTEVWQlFUQlJOMElzUjBGQk1WRTdRVUZCT0ZGRUxHTkJRVVV3UXl4SlFVRkdMRU5CUVU5eVF5eEZRVUZGTkcxQ0xGVkJRVVlzUTBGQllXaHVRaXhEUVVGaUxFTkJRVkE3UVVGQk9WRTdRVUZCYzFNc1UwRkJNMVlzVFVGQloxY3NTMEZCU1VNc1NVRkJSWE5DTEV0QlFVY3NVVUZCVFhwQ0xFZEJRVVVzUTBGQlJpeERRVUZVTEVsQlFXVkJMRWRCUVVVeWJVSXNTMEZCUml4RFFVRlJMRlZCUVZJc1EwRkJaaXhIUVVGdFF5eERRVUZEYkd4Q0xFdEJRVWM0UWl4UlFVRktMRVZCUVdNMGFrSXNaMEpCUVdRc1EwRkJLMEp1YmtJc1JVRkJMMElzUTBGQmJrTXNSMEZCY1VVc1EwRkJRM1ZFTEZOQlFWTTJha0lzWTBGQlZDeERRVUYzUW5CdVFpeEhRVUZGZFdRc1MwRkJSaXhEUVVGUkxFZEJRVklzUlVGQllTeERRVUZpTEVOQlFYaENMRU5CUVVRc1EwRkJka1VzUlVGQmEwaHlaQ3hKUVVGRkxFTkJRWGhJTEVWQlFUQklRU3hKUVVGRlF5eEZRVUZGTkVJc1RVRkJPVWdzUlVGQmNVazNRaXhIUVVGeVNUdEJRVUY1U1VNc1dVRkJSVVFzUTBGQlJpeExRVUZOUkN4RlFVRkZNRU1zU1VGQlJpeERRVUZQZUVNc1JVRkJSVVFzUTBGQlJpeERRVUZRTEVOQlFVNDdRVUZCZWtrN1FVRkJORW9zVDBGQmRHbENMRTFCUVRKcFFpeEpRVUZIUml4SFFVRkZOa0lzVVVGQlJpeEpRVUZaTjBJc1QwRkJTV2xETEUxQlFXaENMRWxCUVhkQ2FrTXNUMEZCU1hWRUxGRkJRUzlDTEVWQlFYZERkRVFzUlVGQlJUQkRMRWxCUVVZc1EwRkJUek5ETEVWQlFWQXNSVUZCZUVNc1MwRkJkVVFzU1VGQlIwRXNSMEZCUlN0Q0xFMUJRVVlzUjBGQlV5eERRVUZVTEVsQlFWa3ZRaXhIUVVGRkxFTkJRVVlzUlVGQlN6WkNMRkZCUVhCQ0xFVkJRVFpDTEV0QlFVa3pRaXhKUVVGRkxFTkJRVTRzUlVGQlVVRXNTVUZCUlVZc1IwRkJSU3RDTEUxQlFWb3NSVUZCYlVJM1FpeEhRVUZ1UWp0QlFVRjFRa1FzVlVGQlJUQkRMRWxCUVVZc1EwRkJUek5ETEVkQlFVVkZMRU5CUVVZc1EwRkJVRHRCUVVGMlFpeFBRVUZ2UXl4UFFVRlBMRWxCUVVsSUxFTkJRVW9zUTBGQlRVVXNRMEZCVGl4RFFVRlFPMEZCUVdkQ0xFdEJRWGd4UWl4RFFVRjVNVUlzVDBGQlQwWXNSVUZCUlcxdFFpeFRRVUZHTEVkQlFWa3NSVUZCUXpOVUxGVkJRVk1zYTBKQlFWTjRVeXhEUVVGVUxFVkJRVmM3UVVGQlF5eFpRVUZITEV0QlFVc3NRMEZCVEN4TFFVRlRRU3hEUVVGYUxFVkJRV01zVDBGQlR5eEpRVUZRTEVOQlFWa3NTMEZCU1N4SlFVRkpReXhKUVVGRlJDeEZRVUZGZDJRc1MwRkJSaXhEUVVGUkxFZEJRVklzUTBGQlRpeEZRVUZ0UWpsaUxFbEJRVVVzUTBGQmVrSXNSVUZCTWtKQkxFbEJRVVY2UWl4RlFVRkZLMElzVFVGQkwwSXNSVUZCYzBOT0xFZEJRWFJETzBGQlFUQkRMR1ZCUVVrc1NVRkJTWGhDTEVsQlFVVXNRMEZCVml4RlFVRlpRU3hKUVVGRkxFdEJRVXM0UWl4TlFVRnVRaXhGUVVFd1FqbENMRWRCUVRGQ08wRkJRVGhDTEdsQ1FVRkxRU3hEUVVGTUxFVkJRVkZ2YmtJc1UwRkJVaXhEUVVGclFqZElMRWRCUVd4Q0xFTkJRWE5DZUdZc1JVRkJSWGxDTEVOQlFVWXNRMEZCZEVJN1FVRkJPVUk3UVVGQk1VTXNVMEZCYjBjc1QwRkJUeXhKUVVGUU8wRkJRVmtzVDBGQmFFc3NSVUZCYVV0cFZpeGhRVUZaTEhGQ1FVRlRNMWNzUTBGQlZDeEZRVUZYTzBGQlFVTXNZVUZCU1N4SlFVRkpReXhKUVVGRlJDeEZRVUZGZDJRc1MwRkJSaXhEUVVGUkxFZEJRVklzUTBGQlRpeEZRVUZ0UWpsaUxFbEJRVVVzUTBGQmVrSXNSVUZCTWtKQkxFbEJRVVY2UWl4RlFVRkZLMElzVFVGQkwwSXNSVUZCYzBOT0xFZEJRWFJETzBGQlFUQkRMR1ZCUVVrc1NVRkJTWGhDTEVsQlFVVXNRMEZCVml4RlFVRlpRU3hKUVVGRkxFdEJRVXM0UWl4TlFVRnVRaXhGUVVFd1FqbENMRWRCUVRGQ08wRkJRVGhDTEdsQ1FVRkxRU3hEUVVGTUxFVkJRVkZ2YmtJc1UwRkJVaXhEUVVGclFtaEtMRTFCUVd4Q0xFTkJRWGxDY21Vc1JVRkJSWGxDTEVOQlFVWXNRMEZCZWtJN1FVRkJPVUk3UVVGQk1VTXNVMEZCZFVjc1QwRkJUeXhKUVVGUU8wRkJRVmtzVDBGQk5WTXNSVUZCTmxOelZpeFZRVUZUTEd0Q1FVRlRhRmdzUTBGQlZDeEZRVUZYTzBGQlFVTXNaVUZCVFN4RFFVRkRMRU5CUVVNc1MwRkJTeXhEUVVGTUxFTkJRVVlzU1VGQlZ5eExRVUZMTEVOQlFVd3NSVUZCVVhOdVFpeFRRVUZTTEVOQlFXdENReXhSUVVGc1FpeERRVUV5UW5adVFpeERRVUV6UWl4RFFVRnFRanRCUVVFclF5eFBRVUZxV0N4RlFVRnJXSE5qTEdGQlFWa3NjVUpCUVZOMFl5eERRVUZVTEVWQlFWYzdRVUZCUXl4aFFVRkpMRWxCUVVsRExFbEJRVVZFTEVWQlFVVjNaQ3hMUVVGR0xFTkJRVkVzUjBGQlVpeERRVUZPTEVWQlFXMUNPV0lzU1VGQlJTeERRVUY2UWl4RlFVRXlRa0VzU1VGQlJYcENMRVZCUVVVclFpeE5RVUV2UWl4RlFVRnpRMDRzUjBGQmRFTTdRVUZCTUVNc1pVRkJTU3hKUVVGSmVFSXNTVUZCUlN4RFFVRldMRVZCUVZsQkxFbEJRVVVzUzBGQlN6aENMRTFCUVc1Q0xFVkJRVEJDT1VJc1IwRkJNVUk3UVVGQk9FSXNhVUpCUVV0QkxFTkJRVXdzUlVGQlVXOXVRaXhUUVVGU0xFTkJRV3RDUlN4TlFVRnNRaXhEUVVGNVFuWnVRaXhGUVVGRmVVSXNRMEZCUml4RFFVRjZRanRCUVVFNVFqdEJRVUV4UXl4VFFVRjFSeXhQUVVGUExFbEJRVkE3UVVGQldTeFBRVUUzWml4RlFVRTRabG9zVFVGQlN5eGpRVUZUWkN4RFFVRlVMRVZCUVZkRExFTkJRVmdzUlVGQllUdEJRVUZETEZsQlFVY3NUVUZCU1hGc1FpeFZRVUZWZEdwQ0xFMUJRV1FzU1VGQmMwSXNXVUZCVlN4UFFVRlBhRU1zUTBGQk1VTXNSVUZCTkVNc1QwRkJUeXhMUVVGTExFTkJRVXdzU1VGQlVTeExRVUZMTEVOQlFVd3NSVUZCVVhkVkxGbEJRVklzUTBGQmNVSjRWU3hEUVVGeVFpeERRVUZTTEVkQlFXZERMRXRCUVVzc1EwRkJOVU1zUTBGQk9FTXNTMEZCU1N4SlFVRkpNRUlzU1VGQlJTeERRVUZXTEVWQlFWbEJMRWxCUVVVc1MwRkJTMDBzVFVGQmJrSXNSVUZCTUVKT0xFZEJRVEZDTzBGQlFUaENMR05CUVVjc1RVRkJTVFJxUWl4VlFVRlZkR3BDTEUxQlFXcENMRVZCUVhkQ0xFdEJRVXRPTEVOQlFVd3NSVUZCVVd0b1FpeFpRVUZTTEVOQlFYRkNOV2xDTEVOQlFYSkNMRVZCUVhWQ1F5eERRVUYyUWl4RlFVRjRRaXhMUVVGMVJDeExRVUZKTEVsQlFVbERMRU5CUVZJc1NVRkJZVVlzUTBGQllqdEJRVUZsTEdsQ1FVRkxNRUlzUTBGQlRDeEZRVUZSZUVJc1EwRkJVaXhKUVVGWFJpeEZRVUZGUlN4RFFVRkdMRU5CUVZnc1JVRkJaMElzUzBGQlMzZENMRU5CUVV3c1JVRkJVV3RvUWl4WlFVRlNMRU5CUVhGQ01XbENMRU5CUVhKQ0xFVkJRWFZDUml4RlFVRkZSU3hEUVVGR0xFTkJRWFpDTEVOQlFXaENPMEZCUVdZN1FVRkJja1lzVTBGQmFVb3NUMEZCVHl4SlFVRlFPMEZCUVZrc1QwRkJlSGRDTEVWQlFYbDNRbmRsTEZsQlFWY3NiMEpCUVZNeFpTeERRVUZVTEVWQlFWYzdRVUZCUXl4aFFVRkpMRWxCUVVsRExFbEJRVVVzUTBGQlZpeEZRVUZaUVN4SlFVRkZMRXRCUVVzclFpeE5RVUZ1UWl4RlFVRXdRaTlDTEVkQlFURkNPMEZCUVRoQ0xHVkJRVXRCTEVOQlFVd3NSVUZCVVhkdVFpeGxRVUZTTEVOQlFYZENlbTVDTEVOQlFYaENPMEZCUVRsQ0xGTkJRWGxFTEU5QlFVOHNTVUZCVUR0QlFVRlpMRTlCUVhJeVFpeEZRVUZ6TWtJclVpeE5RVUZMTEdOQlFWTXZVaXhEUVVGVUxFVkJRVmRETEVOQlFWZ3NSVUZCWVR0QlFVRkRMRmxCUVVjc1MwRkJTeXhEUVVGTUxFdEJRVk5CTEVOQlFWb3NSVUZCWXp0QlFVRkRMR1ZCUVVrc1NVRkJTWGxDTEVsQlFVVXNRMEZCVml4RlFVRlpRU3hKUVVGRkxFdEJRVXROTEUxQlFXNUNMRVZCUVRCQ1RpeEhRVUV4UWl4RlFVRTRRanRCUVVGRExHZENRVUZKZUVJc1NVRkJSU3hMUVVGTGQwSXNRMEZCVEN4RFFVRk9MRU5CUVdONFFpeEZRVUZGZDI1Q0xITkNRVUZHTEV0QlFUSkNlRzVDTEVWQlFVVjNia0lzYzBKQlFVWXNSMEZCZVVJc1JVRkJjRVFzUjBGQmQwUjRia0lzUlVGQlJYZHVRaXh6UWtGQlJpeERRVUY1UWpGdVFpeERRVUY2UWl4SlFVRTBRa01zUTBGQmNFWTdRVUZCYzBZc2EwSkJRVThzU1VGQlVEdEJRVUZaTEdGQlFVY3NTMEZCU3l4RFFVRk1MRU5CUVVnc1JVRkJWenRCUVVGRExHTkJRVWxGTEVsQlFVVXNTMEZCU3l4RFFVRk1MRVZCUVZGeFZTeFpRVUZTTEVOQlFYRkNMRlZCUVZGNFZTeERRVUUzUWl4RFFVRk9MRU5CUVhORExFOUJRVTlITEVsQlFVVkJMRU5CUVVZc1IwRkJTU3hMUVVGTExFTkJRVXdzUlVGQlVYVnVRaXh6UWtGQlVpeEpRVUZuUXl4TlFVRkxMRXRCUVVzc1EwRkJUQ3hGUVVGUlFTeHpRa0ZCWWl4RFFVRm9ReXhIUVVGdlJTeExRVUZMTEVOQlFVd3NSVUZCVVVFc2MwSkJRVklzUTBGQkswSXhia0lzUTBGQkwwSXNRMEZCY0VVc1IwRkJjMGNzUzBGQlN5eERRVUYwU0R0QlFVRjNTRHRCUVVGRExFOUJRV3h6UXl4RlFVRnRjME0wU0N4WFFVRlZMRzFDUVVGVE5VZ3NRMEZCVkN4RlFVRlhPMEZCUVVNc1lVRkJTU3hKUVVGSlF5eEpRVUZGTEVOQlFWWXNSVUZCV1VFc1NVRkJSU3hMUVVGTEswSXNUVUZCYmtJc1JVRkJNRUl2UWl4SFFVRXhRaXhGUVVFNFFqdEJRVUZETEdOQlFVbDVRaXhKUVVGRkxFdEJRVXQ2UWl4RFFVRk1MRVZCUVZGNVZDeExRVUZrTEVOQlFXOUNhRk1zUlVGQlJUWmlMR1ZCUVVZc1IwRkJhMEkzWWl4RlFVRkZhMk1zVjBGQlJpeEhRVUZqYkdNc1JVRkJSVzFqTEZkQlFVWXNSMEZCWTI1akxFVkJRVVZuWXl4WlFVRkdMRWRCUVdWb1l5eEZRVUZGYVdNc1ZVRkJSaXhIUVVGaGFtTXNSVUZCUld0SExGTkJRVVlzUjBGQldUVklMRU5CUVhSR08wRkJRWGRHTEdkQ1FVRlBMRWxCUVZBN1FVRkJXU3hQUVVGb00wTXNSVUZCYVRORGMxZ3NXVUZCVnl4dlFrRkJVM1JZTEVOQlFWUXNSVUZCVnp0QlFVRkRMRzlDUVVGVkxFOUJRVTlCTEVOQlFXcENMRXRCUVhGQ1FTeExRVUZITEVsQlFYaENMRVZCUVRoQ0xFdEJRVWtzU1VGQlNVTXNTVUZCUlN4RFFVRldMRVZCUVZsQkxFbEJRVVVzUzBGQlN5dENMRTFCUVc1Q0xFVkJRVEJDTDBJc1IwRkJNVUlzUlVGQk9FSTdRVUZCUXl4alFVRkplVUlzU1VGQlJTeExRVUZMZWtJc1EwRkJUQ3hGUVVGUmVWUXNTMEZCWkN4RFFVRnZRbWhUTEVWQlFVVnBiVUlzZDBKQlFVWXNSMEZCTWtKcWJVSXNSVUZCUld0dFFpeHZRa0ZCUml4SFFVRjFRbXh0UWl4RlFVRkZiVzFDTEc5Q1FVRkdMRWRCUVhWQ2JtMUNMRVZCUVVWdmJVSXNjVUpCUVVZc1IwRkJkMEp3YlVJc1JVRkJSWEZ0UWl4dFFrRkJSaXhIUVVGelFuSnRRaXhGUVVGRmMyMUNMR3RDUVVGR0xFZEJRWEZDYUc5Q0xFTkJRVFZKTzBGQlFUaEpMR2RDUVVGUExFbEJRVkE3UVVGQldTeFBRVUZ1YmtRc1JVRkJiMjVFZDJkQ0xFbEJRVWNzV1VGQlUzaG5RaXhEUVVGVUxFVkJRVmN3UWl4RFFVRllMRVZCUVdGNFFpeERRVUZpTEVWQlFXVkRMRU5CUVdZc1JVRkJhVUk3UVVGQlF5eHBRa0ZCVTBNc1EwRkJWQ3hEUVVGWFNpeERRVUZZTEVWQlFXRTdRVUZCUXl4alFVRkpSeXhKUVVGRlNDeEZRVUZGTWtJc1RVRkJVaXhEUVVGbExFbEJRVWN4UWl4RlFVRkZSU3hEUVVGR0xFVkJRVXQ1UWl4RlFVRk1MRU5CUVZGR0xFTkJRVklzUTBGQlNDeEZRVUZqZUVJc1JVRkJSU3R1UWl4SlFVRkdMRU5CUVU4NWJrSXNRMEZCVUN4RlFVRlRTQ3hEUVVGVUxFVkJRV1FzUzBGQkswSXNTMEZCU1N4SlFVRkpTU3hKUVVGRlNDeEZRVUZGUlN4RFFVRkdMRVZCUVVzd1FpeFBRVUZNTEVWQlFVNHNSVUZCY1VKMFFpeEpRVUZGTEVOQlFUTkNMRVZCUVRaQ1FTeEpRVUZGU0N4RlFVRkZORUlzVFVGQmFrTXNSVUZCZDBONlFpeEhRVUY0UXp0QlFVRTBRMDRzWTBGQlJVY3NSVUZCUlVjc1EwRkJSaXhEUVVGR0xFVkJRVkZ4UWl4RlFVRlNMRU5CUVZkR0xFTkJRVmdzUzBGQlpYaENMRVZCUVVVcmJrSXNTVUZCUml4RFFVRlBOMjVDTEVWQlFVVkhMRU5CUVVZc1EwRkJVQ3hGUVVGWlVDeERRVUZhTEVOQlFXWTdRVUZCTlVNN1FVRkJNRVVzWVVGQlNVOHNRMEZCU2p0QlFVRkJMRmxCUVUxclFpeERRVUZPTzBGQlFVRXNXVUZCVVZFc1NVRkJSV3BETEVWQlFVVjNaQ3hMUVVGR0xFTkJRVkVzUjBGQlVpeERRVUZXTEVOQlFYVkNMRXRCUVVscVpDeEpRVUZGTEVOQlFVNHNSVUZCVVVFc1NVRkJSU3hMUVVGTGVVSXNUVUZCWml4RlFVRnpRbnBDTEVkQlFYUkNPMEZCUVRCQ0xHTkJRVWNzWTBGQldTeFBRVUZQYlVJc1EwRkJia0lzU1VGQmMwSkJMRTFCUVVrc1EwRkJReXhEUVVFNVFpeEZRVUZuUXl4TFFVRkpMR05CUVZrc1QwRkJUMEVzUTBGQmJrSXNTMEZCZFVKNFFpeEpRVUZGYjJ4Q0xGVkJRVlVzUTBGQlZpeERRVUZHTEVWQlFXVnViRUlzU1VGQlJXMXNRaXhWUVVGVkxFTkJRVllzUzBGQll5eERRVUZETEVOQlFYWkVMRWRCUVRCRU4ycENMRWxCUVVVc1EwRkJhRVVzUlVGQmEwVkJMRWxCUVVWUkxFVkJRVVZFTEUxQlFYUkZMRVZCUVRaRlVDeEhRVUUzUlR0QlFVRnBSaXhwUWtGQlMyeENMRU5CUVV3c1JVRkJVVEJvUWl4blFrRkJVaXhEUVVGNVFtaG5RaXhGUVVGRlVpeERRVUZHTEVOQlFYcENMRVZCUVRoQ2RrSXNRMEZCT1VJc1JVRkJaME5ETEVOQlFXaERPMEZCUVdwR0xGZEJRV2hETEUxQlFYbEtMRXRCUVVselFpeEpRVUZGTEVOQlFVNHNSVUZCVVVFc1NVRkJSVkVzUlVGQlJVUXNUVUZCV2l4RlFVRnRRbEFzUjBGQmJrSTdRVUZCZFVJc2FVSkJRVXRzUWl4RFFVRk1MRVZCUVZFeWJrSXNhVUpCUVZJc1MwRkJORUlzUzBGQlN6TnVRaXhEUVVGTUxFVkJRVkV5YmtJc2FVSkJRVklzUjBGQk1FSXNSVUZCZEVRc1IwRkJNRVFzUzBGQlN6TnVRaXhEUVVGTUxFVkJRVkV5YmtJc2FVSkJRVklzUTBGQk1FSjBiRUlzU1VGQk1VSXNRMEZCSzBJc1JVRkJRM1ZzUWl4VlFVRlRhbTlDTEVOQlFWWXNSVUZCV1d0dlFpeGpRVUZoYUc5Q0xFTkJRWHBDTEVWQlFTOUNMRU5CUVRGRUxFVkJRWE5JTEV0QlFVdEhMRU5CUVV3c1JVRkJVVEJvUWl4blFrRkJVaXhEUVVGNVFtaG5RaXhGUVVGRlVpeERRVUZHTEVOQlFYcENMRVZCUVRoQ2NrSXNRMEZCT1VJc1JVRkJaME5FTEVOQlFXaERMRU5CUVhSSU8wRkJRWFpDTzBGQlFXNU1MRk5CUVcxWExFOUJRVThzU1VGQlVEdEJRVUZaTEU5QlFYSndSU3hGUVVGemNFVjFaMElzUzBGQlNTeGhRVUZUTVdkQ0xFTkJRVlFzUlVGQlYwTXNRMEZCV0N4RlFVRmhlVUlzUTBGQllpeEZRVUZsZUVJc1EwRkJaaXhGUVVGcFFqdEJRVUZETEdGQlFVa3NTVUZCU1VNc1NVRkJSVWdzUlVGQlJYZGtMRXRCUVVZc1EwRkJVU3hIUVVGU0xFTkJRVTRzUlVGQmJVSndaQ3hKUVVGRkxFTkJRWHBDTEVWQlFUSkNRU3hKUVVGRlJDeEZRVUZGTmtJc1RVRkJMMElzUlVGQmMwTTFRaXhIUVVGMFF6dEJRVUV3UXl4bFFVRkpMRWxCUVVsSExFbEJRVVVzUTBGQlZpeEZRVUZaUVN4SlFVRkZMRXRCUVV0NVFpeE5RVUZ1UWl4RlFVRXdRbnBDTEVkQlFURkNPMEZCUVRoQ0xHZENRVUZITEdOQlFWa3NUMEZCVDA0c1EwRkJia0lzU1VGQmMwSkJMRTFCUVVrc1EwRkJReXhEUVVFNVFpeEZRVUZuUXl4alFVRlpMRTlCUVU5QkxFTkJRVzVDTEV0QlFYVkNlVUlzU1VGQlJUUnFRaXhWUVVGVkxFTkJRVllzUTBGQlJpeEZRVUZsY0d4Q0xFbEJRVVZ2YkVJc1ZVRkJWU3hEUVVGV0xFdEJRV01zUTBGQlF5eERRVUYyUkN4SFFVRXdSQ3hMUVVGTEwydENMRU5CUVV3c1JVRkJVVEpzUWl4dFFrRkJVaXhEUVVFMFFpOXNRaXhGUVVGRlF5eERRVUZHTEVOQlFUVkNMRVZCUVdsRGMwSXNRMEZCYWtNc1JVRkJiVU40UWl4RFFVRnVReXhEUVVFeFJDeERRVUZvUXl4TFFVRnhTU3hKUVVGSExFdEJRVXRMTEVOQlFVd3NSVUZCVVRKdVFpeHBRa0ZCV0N4RlFVRTJRaXhMUVVGSkxFbEJRVWw2YlVJc1NVRkJSU3hEUVVGV0xFVkJRVmxCTEVsQlFVVXNTMEZCUzJ4Q0xFTkJRVXdzUlVGQlVUSnVRaXhwUWtGQlVpeERRVUV3UW14dFFpeE5RVUY0UXl4RlFVRXJRMUFzUjBGQkwwTTdRVUZCYlVRc2JVSkJRVXRzUWl4RFFVRk1MRVZCUVZFeWJrSXNhVUpCUVZJc1EwRkJNRUo2YlVJc1EwRkJNVUlzUlVGQk5rSXdiVUlzVVVGQk4wSXNTMEZCZDBONmJVSXNRMEZCZUVNc1NVRkJNa01zUzBGQlMyNUNMRU5CUVV3c1JVRkJVVEpzUWl4dFFrRkJVaXhEUVVFMFFpOXNRaXhGUVVGRlF5eERRVUZHTEVOQlFUVkNMRVZCUVdsRExFdEJRVXRITEVOQlFVd3NSVUZCVVRKdVFpeHBRa0ZCVWl4RFFVRXdRbnB0UWl4RFFVRXhRaXhGUVVFMlFqSnRRaXhaUVVFNVJDeEZRVUV5Uld4dlFpeERRVUV6UlN4RFFVRXpRenRCUVVGdVJEdEJRVUZvVFR0QlFVRXhReXhUUVVGeldpeFBRVUZQTEVsQlFWQTdRVUZCV1N4UFFVRTVhMFlzUlVGQksydEdkV3hDTEUxQlFVc3NZMEZCVTNwc1FpeERRVUZVTEVWQlFWZERMRU5CUVZnc1JVRkJZWGxDTEVOQlFXSXNSVUZCWlhoQ0xFTkJRV1lzUlVGQmFVSTdRVUZCUXl4cFFrRkJVME1zUTBGQlZDeERRVUZYU1N4RFFVRllMRVZCUVdFN1FVRkJRMjFDTEZsQlFVVnVRaXhEUVVGR0xFZEJRVXRJTEVWQlFVVnpaMElzUjBGQlJpeERRVUZOTVdkQ0xFTkJRVTRzUlVGQlVVTXNRMEZCVWl4RlFVRlZSU3hEUVVGV0xFVkJRVmxFTEVOQlFWb3NRMEZCVER0QlFVRnZRaXhoUVVGSlJTeEpRVUZGTEVsQlFVNHNRMEZCVnl4alFVRlpMRTlCUVU5SUxFTkJRVzVDTEV0QlFYVkNRU3hKUVVGRkxFTkJRVU1zUTBGQlNDeEZRVUZMZVVJc1NVRkJSVFJxUWl4VlFVRlZMRU5CUVZZc1EwRkJVQ3hGUVVGdlFuQnNRaXhKUVVGRmIyeENMRlZCUVZVc1EwRkJWaXhEUVVFM1F5eEhRVUV5Ukd4c1FpeEZRVUZGYjJkQ0xFVkJRVVlzUTBGQlMzaG5RaXhEUVVGTUxFVkJRVTlETEVOQlFWQXNSVUZCVTBVc1EwRkJWQ3hGUVVGWFJDeERRVUZZTEVOQlFUTkVPMEZCUVhsRkxFOUJRVFYwUml4RlFVRTJkRVpuWXl4VFFVRlJMR2xDUVVGVGJHTXNRMEZCVkN4RlFVRlhReXhEUVVGWUxFVkJRV0U3UVVGQlF5eGhRVUZKTEVsQlFVbDVRaXhKUVVGRkxFTkJRVllzUlVGQldVRXNTVUZCUlN4TFFVRkxUU3hOUVVGdVFpeEZRVUV3UWs0c1IwRkJNVUlzUlVGQk9FSTdRVUZCUXl4alFVRkplRUlzUTBGQlNpeERRVUZOTEVsQlFVYzdRVUZCUTBFc1owSkJRVVVzU1VGQlNXZERMRTlCUVU5dGJVSXNWMEZCV0N4RFFVRjFRbkp2UWl4RFFVRjJRaXhGUVVGNVFpeEZRVUZESzBVc1VVRkJUemxGTEVOQlFWSXNSVUZCVlhGdlFpeFRRVUZSTEVOQlFVTXNRMEZCYmtJc1JVRkJjVUpETEZsQlFWY3NRMEZCUXl4RFFVRnFReXhGUVVGNlFpeERRVUZHTzBGQlFXZEZMRmRCUVhCRkxFTkJRVzlGTEU5QlFVMDNiVUlzUTBGQlRpeEZRVUZSTzBGQlFVTjRRaXhuUWtGQlJYTkVMRk5CUVZObmJFSXNWMEZCVkN4RFFVRnhRaXhQUVVGeVFpeERRVUZHTEVWQlFXZERkRzlDTEVWQlFVVjFiMElzVTBGQlJpeERRVUZaZW05Q0xFTkJRVm9zUlVGQll5eERRVUZETEVOQlFXWXNSVUZCYVVJc1EwRkJReXhEUVVGc1FpeERRVUZvUXl4RlFVRnhSRVVzUlVGQlJUWkZMRTFCUVVZc1IwRkJVemxGTEVOQlFUbEVPMEZCUVdkRkxHZENRVUZMZVVJc1EwRkJUQ3hGUVVGUloyNUNMR0ZCUVZJc1EwRkJjMEo0YjBJc1EwRkJkRUk3UVVGQmVVSXNaMEpCUVU4c1NVRkJVRHRCUVVGWkxFOUJRVEU0Uml4RlFVRXlPRVl5VlN4bFFVRmpMSFZDUVVGVE4xVXNRMEZCVkN4RlFVRlhPMEZCUVVNc2FVSkJRVk5ETEVOQlFWUXNRMEZCVjBjc1EwRkJXQ3hGUVVGaE8wRkJRVU1zWTBGQlIwRXNSVUZCUlhWQ0xFMUJRVVlzUzBGQlZ5eEpRVUZrTEVWQlFXMUNMRXRCUVVrelFpeEZRVUZGYVc5Q0xFbEJRVVlzUTBGQlR5eEpRVUZRTEVWQlFWazNia0lzUTBGQldpeEhRVUZsYzBJc1NVRkJSU3hEUVVGeVFpeEZRVUYxUWtFc1NVRkJSWGhDTEVWQlFVVTRRaXhOUVVFelFpeEZRVUZyUTA0c1IwRkJiRU03UVVGQmMwTjJRaXhqUVVGRmRXZENMRWRCUVVZc1EwRkJUWGhuUWl4RlFVRkZkMElzUTBGQlJpeERRVUZPTEVWQlFWZDZRaXhEUVVGWU8wRkJRWFJETzBGQlFXOUVMR0ZCUVVsNVFpeERRVUZLTzBGQlFVRXNXVUZCVFhoQ0xFbEJRVVVzUTBGQlF5eHhRa0ZCUkN4RlFVRjFRaXhsUVVGMlFpeEZRVUYxUXl4blFrRkJka01zUlVGQmQwUXNhVUpCUVhoRUxFVkJRVEJGTEdsQ1FVRXhSU3hEUVVGU08wRkJRVUVzV1VGQmNVZERMRWxCUVVVc1NVRkJka2NzUTBGQk5FY3NTVUZCUjBnc1EwRkJTQ3hGUVVGTExFdEJRVWt3UWl4SlFVRkZMRU5CUVU0c1JVRkJVVUVzU1VGQlJYaENMRVZCUVVVNFFpeE5RVUZhTEVWQlFXMUNUaXhIUVVGdVFqdEJRVUYxUW5aQ0xGbEJRVVZ4WjBJc1JVRkJSaXhEUVVGTGRHZENMRVZCUVVWM1FpeERRVUZHTEVOQlFVd3NSVUZCVlhwQ0xFTkJRVlk3UVVGQmRrSXNVMEZCYjBNc1QwRkJUeXhKUVVGUU8wRkJRVmtzVDBGQk0zUkhMRVZCUVRSMFIzVkZMRTlCUVUwc2FVSkJRVlU3UVVGQlF5eGxRVUZQTEV0QlFVc3NRMEZCVEN4TlFVRlZkRU1zVFVGQlZpeEhRVUZwUWtFc1QwRkJUMmxETEZWQlFYaENMRWRCUVcxRExFdEJRVXR1UXl4TlFVRk1MRWRCUVZrc1EwRkJXaXhIUVVGamVWUXNWMEZCVnl4TFFVRkxMME1zUjBGQlRDeERRVUZUTEU5QlFWUXNRMEZCV0N4RFFVRmtMRWRCUVRSRExFbEJRWFJHTzBGQlFUSkdMRTlCUVhnd1J5eEZRVUY1TUVkM1JDeFpRVUZYTEc5Q1FVRlRiRmNzUTBGQlZDeEZRVUZYTzBGQlFVTXNaVUZCVHl4TFFVRkxaME1zVFVGQlRDeEhRVUZaTEVOQlFWb3NSMEZCWTJoRExFbEJRVVVzUzBGQlN5eERRVUZNTEVWQlFWRTBaMElzVjBGQlVpeEhRVUZ2UW01TUxGZEJRVmNzUzBGQlN5OURMRWRCUVV3c1EwRkJVeXhqUVVGVUxFTkJRVmdzUTBGQmNFSXNSMEZCZVVRclF5eFhRVUZYTEV0QlFVc3ZReXhIUVVGTUxFTkJRVk1zWVVGQlZDeERRVUZZTEVOQlFUTkVMRWRCUVN0R0xFdEJRVXNzUTBGQlRDeEZRVUZSYTA4c1YwRkJja2dzUjBGQmFVa3NTVUZCZUVrN1FVRkJOa2tzVDBGQk55dEhMRVZCUVRnclIyNWpMRkZCUVU4c2EwSkJRVlU3UVVGQlF5eGxRVUZQTEV0QlFVc3NRMEZCVEN4TlFVRlZka01zVFVGQlZpeEhRVUZwUWtFc1QwRkJUMnRETEZkQlFYaENMRWRCUVc5RExFdEJRVXR3UXl4TlFVRk1MRWRCUVZrc1EwRkJXaXhIUVVGamVWUXNWMEZCVnl4TFFVRkxMME1zUjBGQlRDeERRVUZUTEZGQlFWUXNRMEZCV0N4RFFVRmtMRWRCUVRaRExFbEJRWGhHTzBGQlFUWkdMRTlCUVRkc1NDeEZRVUU0YkVoNVJDeGhRVUZaTEhGQ1FVRlRibGNzUTBGQlZDeEZRVUZYTzBGQlFVTXNaVUZCVHl4TFFVRkxaME1zVFVGQlRDeEhRVUZaTEVOQlFWb3NSMEZCWTJoRExFbEJRVVVzUzBGQlN5eERRVUZNTEVWQlFWRnBWaXhaUVVGU0xFZEJRWEZDVVN4WFFVRlhMRXRCUVVzdlF5eEhRVUZNTEVOQlFWTXNXVUZCVkN4RFFVRllMRU5CUVhKQ0xFZEJRWGRFSzBNc1YwRkJWeXhMUVVGTEwwTXNSMEZCVEN4RFFVRlRMR1ZCUVZRc1EwRkJXQ3hEUVVFeFJDeEhRVUZuUnl4TFFVRkxMRU5CUVV3c1JVRkJVWFZETEZsQlFYUklMRWRCUVcxSkxFbEJRVEZKTzBGQlFTdEpMRTlCUVhKM1NDeEZRVUZ6ZDBnMVVTeFJRVUZQTEd0Q1FVRlZPMEZCUVVNc1dVRkJSeXhMUVVGTGNrTXNUVUZCVEN4SFFVRlpMRU5CUVdZc1JVRkJhVUk3UVVGQlF5eGpRVUZKYUVNc1NVRkJSU3hMUVVGTExFTkJRVXdzUTBGQlRqdEJRVUZCTEdOQlFXTkRMRWxCUVVWRUxFVkJRVVV5YjBJc2NVSkJRVVlzUlVGQmFFSTdRVUZCUVN4alFVRXdRMnB1UWl4SlFVRkZPRUlzVTBGQlUyOXNRaXhKUVVGeVJEdEJRVUZCTEdOQlFUQkVNVzlDTEVsQlFVVkdMRVZCUVVVMmIwSXNVMEZCUml4SlFVRmhibTVDTEVWQlFVVnRia0lzVTBGQlppeEpRVUV3UWl4RFFVRjBSanRCUVVGQkxHTkJRWGRHTVc5Q0xFbEJRVVZJTEVWQlFVVTJZeXhWUVVGR0xFbEJRV051WWl4RlFVRkZiV0lzVlVGQmFFSXNTVUZCTkVJc1EwRkJkRWc3UVVGQlFTeGpRVUYzU0hwakxFbEJRVVU0UWl4UFFVRlBaME1zVjBGQlVDeEpRVUZ2UW14RkxFVkJRVVU0YjBJc1UwRkJhRW83UVVGQlFTeGpRVUV3U25adlFpeEpRVUZGTWtJc1QwRkJUemhDTEZkQlFWQXNTVUZCYjBKb1JTeEZRVUZGZFVVc1ZVRkJiRXdzUTBGQk5rd3NUMEZCVFN4RlFVRkRUaXhMUVVGSmFFVXNSVUZCUldkRkxFZEJRVVlzUjBGQlRUZEVMRU5CUVU0c1IwRkJVVVlzUTBGQllpeEZRVUZsTmtRc1RVRkJTemxFTEVWQlFVVTRSQ3hKUVVGR0xFZEJRVTk0UkN4RFFVRlFMRWRCUVZOS0xFTkJRVGRDTEVWQlFVNDdRVUZCYzBNc1owSkJRVThzU1VGQlVEdEJRVUZaTEU5QlFYcG9TU3hGUVVFd2FFbDFVeXhMUVVGSkxHRkJRVk14VXl4RFFVRlVMRVZCUVZkRExFTkJRVmdzUlVGQllUdEJRVUZETEZsQlFVbDVRaXhEUVVGS0xFTkJRVTBzU1VGQlJ5eE5RVUZKTkdwQ0xGVkJRVlYwYWtJc1RVRkJha0lzUlVGQmQwSTdRVUZCUXl4alFVRkhMRmxCUVZVc1QwRkJUMmhETEVOQlFYQkNMRVZCUVhOQ08wRkJRVU1zYVVKQlFVa3dRaXhKUVVGRkxFTkJRVTRzUlVGQlVVRXNTVUZCUlN4TFFVRkxUU3hOUVVGbUxFVkJRWE5DVGl4SFFVRjBRanRCUVVFd1FpeHRRa0ZCU1N4SlFVRkplRUlzUTBGQlVpeEpRVUZoUml4RFFVRmlPMEZCUVdVc2NVSkJRVXN3UWl4RFFVRk1MRVZCUVZGblV5eExRVUZTTEVOQlFXTjRWQ3hEUVVGa0xFbEJRV2xDUml4RlFVRkZSU3hEUVVGR0xFTkJRV3BDTzBGQlFXWTdRVUZCTVVJc1lVRkJLMFFzVDBGQlR5eEpRVUZRTzBGQlFWa3NaVUZCUnl4TFFVRkxMRU5CUVV3c1EwRkJTQ3hGUVVGWExFOUJRVTluUXl4UFFVRlBiV0lzWjBKQlFWQXNRMEZCZDBJc1MwRkJTeXhEUVVGTUxFTkJRWGhDTEVWQlFXZERMRWxCUVdoRExFVkJRWE5EVXl4blFrRkJkRU1zUTBGQmRVUTVaQ3hEUVVGMlJDeERRVUZRTzBGQlFXbEZMR0ZCUVVjc1RVRkJTWE5zUWl4VlFVRlZkR3BDTEUxQlFXUXNTVUZCYzBJc1dVRkJWU3hQUVVGUGFFTXNRMEZCTVVNc1JVRkJORU03UVVGQlF5eGxRVUZKTUVJc1NVRkJSU3hEUVVGT0xFVkJRVkZCTEVsQlFVVXNTMEZCUzAwc1RVRkJaaXhGUVVGelFrNHNSMEZCZEVJN1FVRkJNRUlzYVVKQlFVdEJMRU5CUVV3c1JVRkJVV2RUTEV0QlFWSXNRMEZCWXpGVUxFTkJRV1FzU1VGQmFVSkRMRU5CUVdwQ08wRkJRVEZDTEZkQlFUWkRMRTlCUVU4c1NVRkJVRHRCUVVGWkxHZENRVUZQTEVsQlFWQTdRVUZCV1N4UFFVRXpNa2tzUlVGQk5ESkpPRUlzVFVGQlN5eGpRVUZUTDBJc1EwRkJWQ3hGUVVGWE8wRkJRVU1zWVVGQlNTeEpRVUZKUXl4SlFVRkZMRU5CUVZZc1JVRkJXVUVzU1VGQlJTeExRVUZMSzBJc1RVRkJia0lzUlVGQk1FSXZRaXhIUVVFeFFqdEJRVUU0UWtRc1dVRkJSV2x2UWl4SlFVRkdMRU5CUVU4c1MwRkJTMmh2UWl4RFFVRk1MRU5CUVZBc1JVRkJaVUVzUTBGQlppeEZRVUZwUWl4TFFVRkxRU3hEUVVGTUxFTkJRV3BDTzBGQlFUbENMRk5CUVhkRUxFOUJRVThzU1VGQlVEdEJRVUZaTEU5QlFXbzRTU3hGUVVGck9FbHpXQ3hOUVVGTExHTkJRVk4yV0N4RFFVRlVMRVZCUVZjN1FVRkJReXhaUVVGSExFdEJRVXNzUTBGQlRDeExRVUZUUVN4RFFVRmFMRVZCUVdNc1QwRkJUeXhMUVVGTExFTkJRVXdzU1VGQlVTeExRVUZMTEVOQlFVd3NSVUZCVVRCdFFpeFRRVUZvUWl4SFFVRXdRaXhMUVVGTExFTkJRWFJETEVOQlFYZERMRXRCUVVrc1NVRkJTWHB0UWl4SlFVRkZMRU5CUVZZc1JVRkJXVUVzU1VGQlJTeExRVUZMSzBJc1RVRkJia0lzUlVGQk1FSXZRaXhIUVVFeFFqdEJRVUU0UWl4bFFVRkxRU3hEUVVGTUxFVkJRVkY1YlVJc1UwRkJVaXhIUVVGclFqRnRRaXhEUVVGc1FqdEJRVUU1UWl4VFFVRnJSQ3hQUVVGUExFbEJRVkE3UVVGQldTeFBRVUYyYTBvc1JVRkJkMnRLY1Znc1RVRkJTeXhqUVVGVGNsZ3NRMEZCVkN4RlFVRlhPMEZCUVVNc1dVRkJSeXhMUVVGTExFTkJRVXdzUzBGQlUwRXNRMEZCV2l4RlFVRmpMRTlCUVU4c1MwRkJTeXhEUVVGTUxFbEJRVkVzUzBGQlN5eERRVUZNTEVWQlFWRXJiMElzVjBGQlVpeERRVUZ2UWpkQ0xFbEJRWEJDTEVWQlFWSXNSMEZCYlVNc1NVRkJNVU1zUTBGQkswTXNTMEZCU1N4SlFVRkphbTVDTEVsQlFVVXNRMEZCVml4RlFVRlpRU3hKUVVGRkxFdEJRVXNyUWl4TlFVRnVRaXhGUVVFd1FpOUNMRWRCUVRGQ08wRkJRVGhDTEdWQlFVdEJMRU5CUVV3c1JVRkJVVGh2UWl4WFFVRlNMRWRCUVc5Q0wyOUNMRU5CUVhCQ08wRkJRVGxDTEZOQlFXOUVMRTlCUVU4c1NVRkJVRHRCUVVGWkxFOUJRWFIwU2l4RlFVRjFkRW8wUWl4SlFVRkhMRmxCUVZOR0xFTkJRVlFzUlVGQlZ6dEJRVUZETEZsQlFVY3NRMEZCUXl4TFFVRkxMRU5CUVV3c1EwRkJTaXhGUVVGWkxFOUJRVTBzUTBGQlF5eERRVUZRTEVOQlFWTXNTVUZCU1hoQ0xFTkJRVW9zUlVGQlRVTXNRMEZCVGl4RFFVRlJMRWxCUVVjc1dVRkJWU3hQUVVGUGRVSXNRMEZCY0VJc1JVRkJjMEk3UVVGQlF5eGpRVUZKZEVJc1NVRkJSU3hMUVVGTExFTkJRVXdzUTBGQlRpeERRVUZqTEVsQlFVZEJMRTFCUVVsdlJDeFJRVUZRTEVWQlFXZENMRTlCUVU4NVFpeE5RVUZKT0VJc1VVRkJXQ3hEUVVGdlFpeEpRVUZIY0VRc1RVRkJTVGhDTEUxQlFWQXNSVUZCWXl4UFFVRlBVaXhOUVVGSlVTeE5RVUZZTEVOQlFXdENMRWxCUVVjNVFpeEZRVUZGTkc5Q0xFOUJRVXdzUlVGQllTeFBRVUZQTlc5Q0xFVkJRVVUwYjBJc1QwRkJSaXhEUVVGVmRHNUNMRU5CUVZZc1EwRkJVQ3hEUVVGdlFpeEpRVUZIZEVJc1JVRkJSVFp2UWl4eFFrRkJUQ3hGUVVFeVFpeFBRVUZQTjI5Q0xFVkJRVVUyYjBJc2NVSkJRVVlzUTBGQmQwSjJia0lzUTBGQmVFSXNRMEZCVUN4RFFVRnJReXhKUVVGSGRFSXNSVUZCUlRodlFpeHJRa0ZCVEN4RlFVRjNRaXhQUVVGUE9XOUNMRVZCUVVVNGIwSXNhMEpCUVVZc1EwRkJjVUo0YmtJc1EwRkJja0lzUTBGQlVDeERRVUVyUWl4SlFVRkhkRUlzUlVGQlJTdHZRaXhwUWtGQlRDeEZRVUYxUWl4UFFVRlBMMjlDTEVWQlFVVXJiMElzYVVKQlFVWXNRMEZCYjBKNmJrSXNRMEZCY0VJc1EwRkJVQ3hEUVVFNFFpeExRVUZKZUVJc1NVRkJSVVFzUlVGQlJYbENMRU5CUVVZc1EwRkJSaXhGUVVGUGRrSXNTVUZCUlN4RFFVRmlMRVZCUVdWQkxFbEJRVVZFTEVWQlFVVTRRaXhOUVVGdVFpeEZRVUV3UWpkQ0xFZEJRVEZDTzBGQlFUaENMR2RDUVVGSFJDeEZRVUZGUXl4RFFVRkdMRTFCUVU4c1MwRkJTeXhEUVVGTUxFTkJRVllzUlVGQmEwSXNUMEZCVFN4RFFVRkRMRU5CUVZBN1FVRkJhRVFzVjBGQmVVUXNUMEZCVFN4RFFVRkRMRU5CUVZBN1FVRkJVeXhoUVVGSGRVSXNUVUZCU1RoQ0xGRkJRVkFzUlVGQlowSXNUMEZCVHl4TFFVRkxMRU5CUVV3c1RVRkJWVUVzVVVGQmFrSXNRMEZCTUVJc1NVRkJSemxDTEUxQlFVbFJMRTFCUVZBc1JVRkJZeXhQUVVGUExFdEJRVXNzUTBGQlRDeE5RVUZWUVN4TlFVRnFRaXhEUVVGM1FpeEpRVUZIVWl4RlFVRkZTU3hSUVVGR0xFbEJRVmxLTEdGQlFXRXhRaXhEUVVFMVFpeEZRVUU0UWp0QlFVRkRMR1ZCUVVsRkxFbEJRVVYzUWl4RlFVRkZTU3hSUVVGR0xFZEJRVmNzUTBGQlEwb3NRMEZCUkN4RFFVRllMRWRCUVdWQkxFTkJRV3BDTEVWQlFXMUNka0lzU1VGQlJTeERRVUY2UWl4RlFVRXlRa0VzU1VGQlJVUXNSVUZCUlRoQ0xFMUJRUzlDTEVWQlFYTkROMElzUjBGQmRFTTdRVUZCTUVNc1owSkJRVWRFTEVWQlFVVkRMRU5CUVVZc1RVRkJUeXhMUVVGTExFTkJRVXdzUTBGQlZpeEZRVUZyUWl4UFFVRk5MRU5CUVVNc1EwRkJVRHRCUVVFMVJDeFhRVUZ4UlN4UFFVRk5MRU5CUVVNc1EwRkJVRHRCUVVGVExHZENRVUZOTEVOQlFVTXNRMEZCVUR0QlFVRlRMRTlCUVRsNlN5eEZRVUVyZWt0cFdDeFBRVUZOTEdsQ1FVRlZPMEZCUVVNc1dVRkJSeXhMUVVGTExFTkJRVXdzUTBGQlNDeEZRVUZYTzBGQlFVTXNaVUZCU1N4SlFVRkpjRmdzU1VGQlJTeExRVUZMTEVOQlFVd3NRMEZCVGl4RlFVRmpReXhKUVVGRkxFTkJRWEJDTEVWQlFYTkNMRlZCUVZGRUxFbEJRVVZCTEVWQlFVVnZjRUlzWlVGQldpeERRVUYwUWp0QlFVRnZSQ3hyUWtGQlNYQndRaXhGUVVGRk9FSXNVVUZCVGl4SlFVRm5RamRDTEVkQlFXaENPMEZCUVhCRUxGZEJRWGRGTEU5QlFVOUJMRU5CUVZBN1FVRkJVenRCUVVGRExFOUJRVGsyU3l4RlFVRXJOa3RYTEVsQlFVY3NXVUZCVTFnc1EwRkJWQ3hGUVVGWE8wRkJRVU1zV1VGQlJ5eExRVUZMTEVOQlFVd3NTMEZCVTBFc1EwRkJXaXhGUVVGakxFOUJRVThzU1VGQlVDeERRVUZaTEVsQlFVbDVRaXhEUVVGS08wRkJRVUVzV1VGQlRYaENMRWxCUVVVc1MwRkJTemhDTEUxQlFXSXNRMEZCYjBJc1QwRkJUeTlDTEVsQlFVVkRMRWxCUVVVc1EwRkJTaXhIUVVGTkxFbEJRVWxHTEVOQlFVb3NRMEZCVFN4RlFVRk9MRU5CUVU0c1IwRkJaMEpETEVsQlFVVXNRMEZCUml4SlFVRkxlVUlzU1VGQlJYaENMRWxCUVVWRUxFTkJRVW9zUlVGQlRTeEpRVUZKUkN4RFFVRktMRU5CUVUwd1FpeEpRVUZGTEVOQlFVWXNSMEZCU1N4RlFVRktMRWRCUVU4c1EwRkJReXhMUVVGTFFTeERRVUZNTEVOQlFVUXNRMEZCWWl4RFFVRllMRWxCUVc5RExFbEJRVWt4UWl4RFFVRktMRU5CUVUwc1EwRkJReXhMUVVGTFF5eERRVUZNTEVOQlFVUXNRMEZCVGl4RFFVRXpSRHRCUVVFMFJTeFBRVUY0YWt3c1JVRkJlV3BNYzJVc1VVRkJUeXhuUWtGQlUzUmxMRU5CUVZRc1JVRkJWenRCUVVGRExGbEJRVWw1UWl4RFFVRktMRVZCUVUxNFFpeERRVUZPTEVOQlFWRXNTMEZCU1hkQ0xFbEJRVVVzUTBGQlRpeEZRVUZSUVN4SlFVRkZMRXRCUVV0TkxFMUJRV1lzUlVGQmMwSk9MRWRCUVhSQ08wRkJRVEJDTEdOQlFVY3NXVUZCVlN4UFFVRlBla0lzUTBGQmNFSXNSVUZCYzBJN1FVRkJReXhuUWtGQlNVVXNTVUZCUlhGRUxGTkJRVk50Wml4aFFVRlVMRU5CUVhWQ0xFdEJRWFpDTEVOQlFVNHNRMEZCYjBNc1MwRkJTWGhwUWl4RlFVRkZkVzFDTEZOQlFVWXNSMEZCV1hwdFFpeERRVUZvUWl4RlFVRnJRa1VzUlVGQlJXdHdRaXhWUVVGd1FqdEJRVUZuUXl4dFFrRkJTek51UWl4RFFVRk1MRVZCUVZFMGJrSXNWMEZCVWl4RFFVRnZRbTV3UWl4RlFVRkZhM0JDTEZWQlFYUkNPMEZCUVdoRE8wRkJRV3RGTEZkQlFUZElMRTFCUVd0SkxFbEJRVWR3Y0VJc1lVRkJZVVFzUTBGQmFFSXNSVUZCYTBJc1MwRkJTVVVzU1VGQlJTeERRVUZPTEVWQlFWRkJMRWxCUVVWRUxFVkJRVVVyUWl4TlFVRmFMRVZCUVcxQ09VSXNSMEZCYmtJN1FVRkJkVUlzYVVKQlFVdDNRaXhEUVVGTUxFVkJRVkUwYmtJc1YwRkJVaXhEUVVGdlFuSndRaXhGUVVGRlF5eERRVUZHTEVOQlFYQkNPMEZCUVhaQ0xGZEJRV3hDTEUxQlFYZEZMRXRCUVV0M1FpeERRVUZNTEVWQlFWRTBia0lzVjBGQlVpeERRVUZ2UW5Kd1FpeERRVUZ3UWp0QlFVRndUeXhUUVVFeVVDeFBRVUZQTEVsQlFWQTdRVUZCV1N4UFFVRXpNVXdzUlVGQk5ERk1kMlVzVTBGQlVTeHBRa0ZCVTNobExFTkJRVlFzUlVGQlZ6dEJRVUZETEZsQlFVbDVRaXhEUVVGS0xFVkJRVTE0UWl4RFFVRk9MRU5CUVZFc1MwRkJTWGRDTEVsQlFVVXNRMEZCVGl4RlFVRlJRU3hKUVVGRkxFdEJRVXROTEUxQlFXWXNSVUZCYzBKT0xFZEJRWFJDTzBGQlFUQkNMR05CUVVjc1dVRkJWU3hQUVVGUGVrSXNRMEZCY0VJc1JVRkJjMEk3UVVGQlF5eG5Ra0ZCU1VVc1NVRkJSWEZFTEZOQlFWTnRaaXhoUVVGVUxFTkJRWFZDTEV0QlFYWkNMRU5CUVU0c1EwRkJiME1zUzBGQlNYaHBRaXhGUVVGRmRXMUNMRk5CUVVZc1IwRkJXWHB0UWl4RFFVRmFMRVZCUVdORExFbEJRVVZETEVWQlFVVm5ia0lzVlVGQlJpeERRVUZoYm14Q0xFMUJRV0lzUjBGQmIwSXNRMEZCZUVNc1JVRkJNRU01UWl4TFFVRkhMRU5CUVRkRExFVkJRU3REUVN4SFFVRXZRenRCUVVGdFJDeHRRa0ZCUzNkQ0xFTkJRVXdzUlVGQlVUWnVRaXhaUVVGU0xFTkJRWEZDY0hCQ0xFVkJRVVZuYmtJc1ZVRkJSaXhEUVVGaGFtNUNMRU5CUVdJc1EwRkJja0lzUlVGQmNVTXNTMEZCUzNkQ0xFTkJRVXdzUlVGQlVYbHNRaXhWUVVGU0xFTkJRVzFDTEVOQlFXNUNMRU5CUVhKRE8wRkJRVzVFTzBGQlFTdEhMRmRCUVRGTExFMUJRU3RMTEVsQlFVZHNia0lzWVVGQllVUXNRMEZCYUVJc1JVRkJhMElzUzBGQlNVVXNTVUZCUlN4RFFVRk9MRVZCUVZGQkxFbEJRVVZFTEVWQlFVVXJRaXhOUVVGYUxFVkJRVzFDT1VJc1IwRkJia0k3UVVGQmRVSXNhVUpCUVV0M1FpeERRVUZNTEVWQlFWRTJia0lzV1VGQlVpeERRVUZ4UW5Sd1FpeEZRVUZGUXl4RFFVRkdMRU5CUVhKQ0xFVkJRVEJDTEV0QlFVdDNRaXhEUVVGTUxFVkJRVkY1YkVJc1ZVRkJVaXhEUVVGdFFpeERRVUZ1UWl4RFFVRXhRanRCUVVGMlFpeFhRVUZzUWl4TlFVRXJSaXhMUVVGTGVteENMRU5CUVV3c1JVRkJVVFp1UWl4WlFVRlNMRU5CUVhGQ2RIQkNMRU5CUVhKQ0xFVkJRWFZDTEV0QlFVdDVRaXhEUVVGTUxFVkJRVkY1YkVJc1ZVRkJVaXhEUVVGdFFpeERRVUZ1UWl4RFFVRjJRanRCUVVGNFV5eFRRVUZ6Vml4UFFVRlBMRWxCUVZBN1FVRkJXU3hQUVVFeGRFMHNSVUZCTW5STmIwTXNZMEZCWVN4elFrRkJVM1p3UWl4RFFVRlVMRVZCUVZjN1FVRkJReXhoUVVGSkxFbEJRVWt3UWl4SlFVRkZla0lzUlVGQlJVUXNRMEZCUml4RFFVRk9MRVZCUVZkRkxFbEJRVVVzUTBGQmFrSXNSVUZCYlVKQkxFbEJRVVVzUzBGQlN6aENMRTFCUVRGQ0xFVkJRV2xET1VJc1IwRkJha003UVVGQmNVTXNZMEZCUnl4TlFVRkpkMElzUlVGQlJVMHNUVUZCVkN4RlFVRm5RazRzUlVGQlJTeERRVUZHTEVWQlFVczRia0lzVlVGQlRDeERRVUZuUWtRc1dVRkJhRUlzUTBGQk5rSXNTMEZCUzNKd1FpeERRVUZNTEVOQlFUZENMRVZCUVhGRGQwSXNSVUZCUlN4RFFVRkdMRU5CUVhKRExFVkJRV2hDTEV0QlFXZEZMRWxCUVVkQkxFVkJRVVZOTEUxQlFVWXNSMEZCVXl4RFFVRmFMRVZCUVdNc1MwRkJTU3hKUVVGSk4wSXNTVUZCUlN4RFFVRldMRVZCUVZsQkxFbEJRVVYxUWl4RlFVRkZUU3hOUVVGb1FpeEZRVUYxUWpkQ0xFZEJRWFpDTzBGQlFUSkNkVUlzWTBGQlJYWkNMRU5CUVVZc1JVRkJTM0Z3UWl4VlFVRk1MRU5CUVdkQ1JDeFpRVUZvUWl4RFFVRTJRaXhMUVVGTGNuQkNMRU5CUVV3c1JVRkJVWE5sTEZOQlFWSXNRMEZCYTBJc1EwRkJReXhEUVVGdVFpeERRVUUzUWl4RlFVRnRSRGxqTEVWQlFVVjJRaXhEUVVGR0xFTkJRVzVFTzBGQlFUTkNPMEZCUVc1SU8wRkJRWFZOTEU5QlFUTTNUU3hGUVVFME4wMXpjRUlzWVVGQldTeHhRa0ZCVTNwd1FpeERRVUZVTEVWQlFWYzdRVUZCUXl4aFFVRkpMRWxCUVVrd1FpeEpRVUZGZWtJc1JVRkJSVVFzUTBGQlJpeERRVUZPTEVWQlFWZEZMRWxCUVVVc1EwRkJha0lzUlVGQmJVSkJMRWxCUVVVc1MwRkJTemhDTEUxQlFURkNMRVZCUVdsRE9VSXNSMEZCYWtNN1FVRkJjVU1zWTBGQlJ5eE5RVUZKZDBJc1JVRkJSVTBzVFVGQlZDeEZRVUZuUWs0c1JVRkJSU3hEUVVGR0xFVkJRVXM0YmtJc1ZVRkJUQ3hEUVVGblFrUXNXVUZCYUVJc1EwRkJOa0lzUzBGQlMzSndRaXhEUVVGTUxFTkJRVGRDTEVWQlFYRkRkMElzUlVGQlJTeERRVUZHTEVWQlFVdG5iMElzVjBGQk1VTXNSVUZCYUVJc1MwRkJORVVzU1VGQlIyaHZRaXhGUVVGRlRTeE5RVUZHTEVkQlFWTXNRMEZCV2l4RlFVRmpMRXRCUVVrc1NVRkJTVGRDTEVsQlFVVXNRMEZCVml4RlFVRlpRU3hKUVVGRmRVSXNSVUZCUlUwc1RVRkJhRUlzUlVGQmRVSTNRaXhIUVVGMlFqdEJRVUV5UW5WQ0xHTkJRVVYyUWl4RFFVRkdMRVZCUVV0eGNFSXNWVUZCVEN4RFFVRm5Ra1FzV1VGQmFFSXNRMEZCTmtJc1MwRkJTM0p3UWl4RFFVRk1MRVZCUVZGelpTeFRRVUZTTEVOQlFXdENMRU5CUVVNc1EwRkJia0lzUTBGQk4wSXNSVUZCYlVRNVl5eEZRVUZGZGtJc1EwRkJSaXhGUVVGTGRYQkNMRmRCUVhoRU8wRkJRVE5DTzBGQlFTOUlPMEZCUVN0T0xFOUJRVzV5VGl4RlFVRnZjazU2VXl4TlFVRkxMR05CUVZOMlZpeERRVUZVTEVWQlFWYzdRVUZCUXl4bFFVRlBMRWxCUVVreFFpeERRVUZLTEVOQlFVMHNTMEZCUzJkRExFMUJRVXdzUjBGQldTeERRVUZhTEVkQlFXTk9MRWxCUVVVc1MwRkJTeXhEUVVGTUxFVkJRVkZwYjBJc2EwSkJRVklzU1VGQk5FSXhjRUlzUlVGQlJTeExRVUZMTEVOQlFVd3NSVUZCVVRCd1FpeHJRa0ZCVml4RlFVRTRRaTl1UWl4RlFVRTVRaXhEUVVGcFEwWXNRMEZCYWtNc1EwRkJOVUlzUjBGQlowVXNRMEZCUXl4TFFVRkxMRU5CUVV3c1JVRkJVV2x2UWl4clFrRkJWQ3hEUVVGb1JTeEhRVUUyUml4RlFVRXZSaXhIUVVGclJ5eExRVUZMTEVOQlFVd3NSVUZCVVVFc2EwSkJRVklzUjBGQk1rSXNRMEZCUXl4TFFVRkxMRU5CUVV3c1JVRkJVVUVzYTBKQlFWUXNRMEZCTTBJc1IwRkJkMFFzUlVGQmVFc3NSMEZCTWtzc1JVRkJha3dzUTBGQlVEdEJRVUUwVEN4UFFVRnFORTRzUlVGQmF6Uk9ReXhUUVVGUkxHbENRVUZUYkc5Q0xFTkJRVlFzUlVGQlZ6dEJRVUZETEZsQlFVbDRRaXhKUVVGRkxFVkJRVTQ3UVVGQlFTeFpRVUZUUXl4SlFVRkZMRXRCUVVzc1EwRkJUQ3hEUVVGWUxFTkJRVzFDTEVsQlFVY3NRMEZCUTBFc1EwRkJTaXhGUVVGTkxFOUJRVThzU1VGQlNVZ3NRMEZCU2l4RFFVRk5MRVZCUVU0c1EwRkJVQ3hEUVVGcFFpeFBRVUZMUnl4RlFVRkZkM0JDTEd0Q1FVRlFMRWRCUVRKQ08wRkJRVU1zWTBGQlNYWndRaXhKUVVGRlJDeEZRVUZGZDNCQ0xHdENRVUZTTEVOQlFUSkNhbTlDTEVsQlFVVjZRaXhGUVVGRlJ5eERRVUZHTEVWQlFVdDNRaXhGUVVGTUxFTkJRVkZHTEVOQlFWSXNTMEZCV1hoQ0xFVkJRVVV3UXl4SlFVRkdMRU5CUVU5NFF5eERRVUZRTEVOQlFXUXNSMEZCZDBKR0xFVkJRVVV3UXl4SlFVRkdMRU5CUVU5NFF5eERRVUZRTEVOQlFYaENMRVZCUVd0RFJDeEpRVUZGUXl4RFFVRndRenRCUVVGelF5eG5Ra0ZCVHl4SlFVRkpTaXhEUVVGS0xFTkJRVTFGTEVOQlFVNHNRMEZCVUR0QlFVRm5RaXhQUVVFM2FVOHNSVUZCT0dsUFoxZ3NUVUZCU3l4alFVRlRlRllzUTBGQlZDeEZRVUZYTzBGQlFVTXNaVUZCVHl4SlFVRkpNVUlzUTBGQlNpeERRVUZOTEV0QlFVdG5ReXhOUVVGTUxFZEJRVmtzUTBGQldpeEhRVUZqVGl4SlFVRkZMRXRCUVVzc1EwRkJUQ3hGUVVGUmJXOUNMSE5DUVVGU0xFbEJRV2RETlhCQ0xFVkJRVVVzUzBGQlN5eERRVUZNTEVWQlFWRTBjRUlzYzBKQlFWWXNSVUZCYTBOcWIwSXNSVUZCYkVNc1EwRkJjVU5HTEVOQlFYSkRMRU5CUVdoRExFZEJRWGRGTEVOQlFVTXNTMEZCU3l4RFFVRk1MRVZCUVZGdGIwSXNjMEpCUVZRc1EwRkJlRVVzUjBGQmVVY3NSVUZCTTBjc1IwRkJPRWNzUzBGQlN5eERRVUZNTEVWQlFWRkJMSE5DUVVGU0xFZEJRU3RDTEVOQlFVTXNTMEZCU3l4RFFVRk1MRVZCUVZGQkxITkNRVUZVTEVOQlFTOUNMRWRCUVdkRkxFVkJRVFZNTEVkQlFTdE1MRVZCUVhKTkxFTkJRVkE3UVVGQlowNHNUMEZCTDNkUExFVkJRV2Q0VDBNc1UwRkJVU3hwUWtGQlUzQnZRaXhEUVVGVUxFVkJRVmM3UVVGQlF5eFpRVUZKZUVJc1NVRkJSU3hGUVVGT08wRkJRVUVzV1VGQlUwTXNTVUZCUlN4TFFVRkxMRU5CUVV3c1EwRkJXQ3hEUVVGdFFpeEpRVUZITEVOQlFVTkJMRU5CUVVvc1JVRkJUU3hQUVVGUExFbEJRVWxJTEVOQlFVb3NRMEZCVFN4RlFVRk9MRU5CUVZBc1EwRkJhVUlzVDBGQlMwY3NSVUZCUlRCd1FpeHpRa0ZCVUN4SFFVRXJRanRCUVVGRExHTkJRVWw2Y0VJc1NVRkJSVVFzUlVGQlJUQndRaXh6UWtGQlVpeERRVUVyUW01dlFpeEpRVUZGZWtJc1JVRkJSVWNzUTBGQlJpeEZRVUZMZDBJc1JVRkJUQ3hEUVVGUlJpeERRVUZTTEV0QlFWbDRRaXhGUVVGRk1FTXNTVUZCUml4RFFVRlBlRU1zUTBGQlVDeERRVUZrTEVkQlFYZENSaXhGUVVGRk1FTXNTVUZCUml4RFFVRlBlRU1zUTBGQlVDeERRVUY0UWl4RlFVRnJRMFFzU1VGQlJVTXNRMEZCY0VNN1FVRkJjME1zWjBKQlFVOHNTVUZCU1Vvc1EwRkJTaXhEUVVGTlJTeERRVUZPTEVOQlFWQTdRVUZCWjBJc1QwRkJiamhQTEVWQlFXODRUM2RyUWl4UlFVRlBMR2RDUVVGVE1XdENMRU5CUVZRc1JVRkJWenRCUVVGRExHRkJRVWtzU1VGQlNUQkNMRWxCUVVVc1JVRkJUaXhGUVVGVGVFSXNTVUZCUlN4RFFVRm1MRVZCUVdsQ1FTeEpRVUZGTEV0QlFVczRRaXhOUVVGNFFpeEZRVUVyUWpsQ0xFZEJRUzlDTzBGQlFXMURSaXhqUVVGRlF5eEZRVUZGTEV0QlFVdERMRU5CUVV3c1JVRkJVWE53UWl4VlFVRldMRVZCUVhOQ05XNUNMRVZCUVhSQ0xFTkJRWGxDTlVJc1EwRkJla0lzUzBGQk5rSXdRaXhGUVVGRmEwSXNTVUZCUml4RFFVRlBMRXRCUVVzeFF5eERRVUZNTEVWQlFWRnpjRUlzVlVGQlppeERRVUV2UWl4SFFVRXdSRGx1UWl4RlFVRkZhMElzU1VGQlJpeERRVUZQTEV0QlFVc3hReXhEUVVGTUxFVkJRVkZ6Y0VJc1ZVRkJaaXhEUVVFeFJEdEJRVUZ1UXl4VFFVRjNTQ3hQUVVGUGRuQkNMRVZCUVVWQkxFVkJRVVU0Y0VJc1RVRkJSaXhEUVVGVGNtOUNMRU5CUVZRc1EwRkJSaXhEUVVGUU8wRkJRWE5DTEU5QlFYSnRVQ3hGUVVGemJWQkhMRk5CUVZFc2FVSkJRVk0zUWl4RFFVRlVMRVZCUVZjN1FVRkJReXhoUVVGSkxFbEJRVWt3UWl4SlFVRkZMRVZCUVU0c1JVRkJVM2hDTEVsQlFVVXNRMEZCWml4RlFVRnBRa0VzU1VGQlJTeExRVUZMT0VJc1RVRkJlRUlzUlVGQkswSTVRaXhIUVVFdlFqdEJRVUZ0UXl4bFFVRkpMRWxCUVVsRExFbEJRVVVzUzBGQlMwUXNRMEZCVEN4RlFVRlJjM0JDTEZWQlFXeENMRVZCUVRaQ2NuQkNMRU5CUVRkQ08wRkJRV2REU0N4blFrRkJSVU1zUlVGQlJVVXNRMEZCUml4RlFVRkxlVUlzUlVGQlRDeERRVUZSTlVJc1EwRkJVaXhMUVVGWk1FSXNSVUZCUld0Q0xFbEJRVVlzUTBGQlQzcERMRU5CUVZBc1EwRkJaQ3hIUVVGM1FuVkNMRVZCUVVWclFpeEpRVUZHTEVOQlFVOTZReXhEUVVGUUxFTkJRWGhDTEVWQlFXdERRU3hKUVVGRlFTeEZRVUZGY1hCQ0xGVkJRWFJETzBGQlFXaERPMEZCUVc1RExGTkJRVzlJTEU5QlFVOTJjRUlzUlVGQlJVRXNSVUZCUlRod1FpeE5RVUZHTEVOQlFWTnliMElzUTBGQlZDeERRVUZHTEVOQlFWQTdRVUZCYzBJc1QwRkJjSGRRTEVWQlFYRjNVRFpSTEUxQlFVc3NZMEZCVTNSVExFTkJRVlFzUlVGQlZ6dEJRVUZETEdGQlFVa3NTVUZCU1hsQ0xFbEJRVVVzUlVGQlRpeEZRVUZUZUVJc1NVRkJSU3hEUVVGbUxFVkJRV2xDUVN4SlFVRkZMRXRCUVVzNFFpeE5RVUY0UWl4RlFVRXJRamxDTEVkQlFTOUNPMEZCUVcxRExHVkJRVWtzU1VGQlNVTXNTVUZCUlN4TFFVRkxSQ3hEUVVGTUxFVkJRVkZyYmtJc1owSkJRVklzUTBGQmVVSnVia0lzUTBGQmVrSXNRMEZCVGl4RlFVRnJRMGNzU1VGQlJTeERRVUY0UXl4RlFVRXdRMEVzU1VGQlJVUXNSVUZCUlRaQ0xFMUJRVGxETEVWQlFYRkVOVUlzUjBGQmNrUTdRVUZCZVVSelFpeGpRVUZGYTBJc1NVRkJSaXhEUVVGUGVrTXNSVUZCUlVNc1EwRkJSaXhEUVVGUU8wRkJRWHBFTzBGQlFXNURMRk5CUVhsSExFOUJRVThzU1VGQlNVb3NRMEZCU2l4RFFVRk5NRUlzUTBGQlRpeERRVUZRTzBGQlFXZENMRTlCUVM4MFVDeEZRVUZuTlZBeVVTeFZRVUZUTEd0Q1FVRlRNMUVzUTBGQlZDeEZRVUZYTzBGQlFVTXNZVUZCU1N4SlFVRkplRUlzU1VGQlJTeEZRVUZPTEVWQlFWTkRMRWxCUVVVc1EwRkJaaXhGUVVGcFFrRXNTVUZCUlN4TFFVRkxOa0lzVFVGQmVFSXNSVUZCSzBJM1FpeEhRVUV2UWp0QlFVRnRReXhsUVVGSkxFbEJRVWxETEVsQlFVVXNTMEZCUzBRc1EwRkJUQ3hGUVVGUloyNUNMRlZCUVdRc1JVRkJlVUkxYlVJc1NVRkJSU3hEUVVFdlFpeEZRVUZwUTBFc1NVRkJSVWdzUlVGQlJUUkNMRTFCUVhKRExFVkJRVFJEZWtJc1IwRkJOVU03UVVGQlowUnRRaXhuUWtGQlJTeE5RVUZKZEVJc1JVRkJSVWNzUTBGQlJpeEZRVUZMZFVJc1VVRkJWQ3hKUVVGdFFqZENMRVZCUVVWSExFVkJRVVZITEVOQlFVWXNRMEZCUml4RlFVRlJjVUlzUlVGQlVpeERRVUZYUml4RFFVRllMRU5CUVc1Q0xFbEJRV3REZUVJc1JVRkJSVEJETEVsQlFVWXNRMEZCVDNoRExFVkJRVVZITEVOQlFVWXNRMEZCVUN4RFFVRndReXhIUVVGcFJDeE5RVUZKU0N4RlFVRkZSeXhEUVVGR0xFVkJRVXQxUWl4UlFVRlVMRWxCUVcxQ05VSXNSVUZCUlRCRExFbEJRVVlzUTBGQlQzaERMRVZCUVVWSExFTkJRVVlzUTBGQlVDeERRVUZ3UlR0QlFVRm9SRHRCUVVGdVF5eFRRVUZ2U3l4UFFVRlBMRWxCUVVsUUxFTkJRVW9zUTBGQlRVTXNSVUZCUlRod1FpeE5RVUZHTEVOQlFWTTNjRUlzUTBGQlZDeERRVUZPTEVOQlFWQTdRVUZCTUVJc1QwRkJibTFSTEVWQlFXOXRVVzlsTEZGQlFVOHNhMEpCUVZVN1FVRkJReXhoUVVGSkxFbEJRVWwwWlN4SlFVRkZMRU5CUVZZc1JVRkJXVUVzU1VGQlJTeExRVUZMWjBNc1RVRkJia0lzUlVGQk1FSm9ReXhIUVVFeFFqdEJRVUU0UWl4bFFVRkxRU3hEUVVGTUxFVkJRVkYzY0VJc1ZVRkJVaXhKUVVGdlFpeExRVUZMZUhCQ0xFTkJRVXdzUlVGQlVYZHdRaXhWUVVGU0xFTkJRVzFDVVN4WFFVRnVRaXhEUVVFclFpeExRVUZMYUhGQ0xFTkJRVXdzUTBGQkwwSXNRMEZCY0VJN1FVRkJPVUlzVTBGQk1FWXNUMEZCVHl4SlFVRlFPMEZCUVZrc1QwRkJOWFJSTEVWQlFUWjBVWGxtTEV0QlFVa3NaVUZCVlR0QlFVRkRMRmxCUVVsNlppeERRVUZLTzBGQlFVRXNXVUZCVFRCQ0xFTkJRVTQ3UVVGQlFTeFpRVUZSZUVJc1NVRkJSU3hKUVVGV0xFTkJRV1VzUzBGQlNVWXNTVUZCUlN4RFFVRk9MRVZCUVZGQkxFbEJRVVZ6YkVJc1ZVRkJWWFJxUWl4TlFVRndRaXhGUVVFeVFtaERMRWRCUVROQ0xFVkJRU3RDTzBGQlFVTXNZMEZCU1Vjc1NVRkJSVVlzUlVGQlJYRnNRaXhWUVVGVmRHeENMRU5CUVZZc1EwRkJSaXhEUVVGT0xFTkJRWE5DTEV0QlFVa3dRaXhKUVVGRkxFTkJRVTRzUlVGQlVVRXNTVUZCUlhaQ0xFVkJRVVUyUWl4TlFVRmFMRVZCUVcxQ1RpeEhRVUZ1UWp0QlFVRjFRbmhDTEdOQlFVVkJMRVZCUVVVNFFpeE5RVUZLTEVsQlFWazNRaXhGUVVGRmRVSXNRMEZCUml4RFFVRmFMRVZCUVdsQ2VFSXNSVUZCUlRoQ0xFMUJRVVlzUlVGQmFrSTdRVUZCZGtJN1FVRkJiVVFzWjBKQlFVODVRaXhEUVVGUU8wRkJRVk1zVDBGQk56SlJMRVZCUVZvc1JVRkJNak5SUkN4RlFVRkZaM0ZDTEVWQlFVWXNSMEZCUzJweFFpeEZRVUZGYlcxQ0xGTkJRV3cwVVN4RlFVRTBORkZzYlVJc1JVRkJSVGh3UWl4TlFVRkdMRWRCUVZNc1ZVRkJVeTl3UWl4RFFVRlVMRVZCUVZjN1FVRkJReXhYUVVGSkxFbEJRVWxETEVsQlFVVXNSVUZCVGl4RlFVRlRlVUlzU1VGQlJTeERRVUZtTEVWQlFXbENRU3hKUVVGRk1VSXNSVUZCUldkRExFMUJRWEpDTEVWQlFUUkNUaXhIUVVFMVFqdEJRVUZuUTNwQ0xGVkJRVVY1U0N4UFFVRkdMRU5CUVZVeFNDeEZRVUZGTUVJc1EwRkJSaXhEUVVGV0xFMUJRV3RDTEVOQlFVTXNRMEZCYmtJc1NVRkJjMEo2UWl4RlFVRkZNa01zU1VGQlJpeERRVUZQTlVNc1JVRkJSVEJDTEVOQlFVWXNRMEZCVUN4RFFVRjBRanRCUVVGb1F5eFBRVUZ0UlN4UFFVRlBla0lzUTBGQlVEdEJRVUZUTEV0QlFUY3JVU3hGUVVFNEsxRkJMRU5CUVhJdlVUdEJRVUYxTDFFc1IwRkJNekZUTEVWQlFWQXNSVUZCY3pKVFF5eEpRVUZGTEVOQlFVTXNVVUZCUkN4RlFVRlZMRTlCUVZZc1JVRkJhMElzVFVGQmJFSXNRMEZCZURKVExFVkJRV3MwVTBNc1NVRkJSU3hEUVVGNE5GTXNSVUZCTURSVFFTeEpRVUZGUkN4RlFVRkZPRUlzVFVGQk9UUlRMRVZCUVhFMVV6ZENMRWRCUVhJMVV6dEJRVUY1TlZNclFpeFhRVUZQYUVNc1JVRkJSVU1zUTBGQlJpeERRVUZRTEV0QlFXTXNWVUZCVTBnc1EwRkJWQ3hGUVVGWE8wRkJRVU5CTEZGQlFVVnBjVUlzUlVGQlJpeERRVUZMYmxrc1RVRkJUQ3hIUVVGWkxGVkJRVk53VVN4RFFVRlVMRVZCUVZjN1FVRkJReXhaUVVGSmVFSXNRMEZCU2l4RFFVRk5MRTlCUVU5R0xFVkJRVVVzU1VGQlJpeEZRVUZSSzBJc1NVRkJVaXhEUVVGaExGbEJRVlU3UVVGQlF5eGpRVUZKTDBJc1NVRkJSU3hKUVVGSlF5eERRVUZLTEVOQlFVMHNTVUZCVGl4RlFVRlhlVUlzUTBGQldDeERRVUZPTEVOQlFXOUNlRUlzVFVGQlNVRXNTVUZCUlVZc1EwRkJUanRCUVVGVExGTkJRWEpFTEVkQlFYVkVSU3hEUVVFNVJEdEJRVUZuUlN4UFFVRTVSanRCUVVFclJpeExRVUV6Unl4RFFVRTBSMmRETEU5QlFVOW9ReXhGUVVGRlF5eERRVUZHTEVOQlFWQXNRMEZCTlVjc1EwRkJaRHRCUVVGNk5WTXNSMEZCYVdsVUxFbEJRVWxETEVOQlFVb3NRMEZCVFVFc1NVRkJSU3hMUVVGTExFTkJRVXdzUzBGQlUzTkNMRU5CUVZRc1IwRkJWMUVzVDBGQlQybFFMRWxCUVZBc1NVRkJZV3BRTEU5QlFVOXJVQ3hMUVVGd1FpeEpRVUV5UW14UUxFOUJRVTh5VHl4TlFVRTNReXhIUVVGdlJHNVFMRU5CUVhSRUxFVkJRWGRFZEVJc1RVRkJTU3h0UWtGQmEwSkJMRVZCUVVVMmNFSXNSVUZCY0VJc1MwRkJlVUkzY0VJc1JVRkJSVFp3UWl4RlFVRkdMRU5CUVV0d1ZpeGhRVUZNTEVkQlFXMUNMRlZCUVZNM1ZTeERRVUZVTEVWQlFWYzdRVUZCUXl4aFFVRlRReXhEUVVGVUxFTkJRVmRITEVOQlFWZ3NSVUZCWVR0QlFVRkRMRlZCUVVkQkxFVkJRVVYxUWl4TlFVRkdMRXRCUVZjc1NVRkJaQ3hGUVVGdFFpeExRVUZKTTBJc1JVRkJSV2x2UWl4SlFVRkdMRU5CUVU4c1NVRkJVQ3hGUVVGWk4yNUNMRU5CUVZvc1IwRkJaWE5DTEVsQlFVVXNRMEZCY2tJc1JVRkJkVUpCTEVsQlFVVjRRaXhGUVVGRk9FSXNUVUZCTTBJc1JVRkJhME5PTEVkQlFXeERPMEZCUVhORGRrSXNWVUZCUlhWblFpeEhRVUZHTEVOQlFVMTRaMElzUlVGQlJYZENMRU5CUVVZc1EwRkJUaXhGUVVGWGVrSXNRMEZCV0R0QlFVRjBRenRCUVVGdlJDeFRRVUZKZVVJc1EwRkJTanRCUVVGQkxGRkJRVTE0UWl4SlFVRkZMRU5CUVVNc2NVSkJRVVFzUlVGQmRVSXNaVUZCZGtJc1JVRkJkVU1zWjBKQlFYWkRMRVZCUVhkRUxHbENRVUY0UkN4RlFVRXdSU3hwUWtGQk1VVXNRMEZCVWp0QlFVRkJMRkZCUVhGSFF5eEpRVUZGTEVsQlFYWkhMRU5CUVRSSExFbEJRVWRJTEVOQlFVZ3NSVUZCU3l4TFFVRkpNRUlzU1VGQlJTeERRVUZPTEVWQlFWRkJMRWxCUVVWNFFpeEZRVUZGT0VJc1RVRkJXaXhGUVVGdFFrNHNSMEZCYmtJN1FVRkJkVUoyUWl4UlFVRkZjV2RDTEVWQlFVWXNRMEZCUzNSblFpeEZRVUZGZDBJc1EwRkJSaXhEUVVGTUxFVkJRVlY2UWl4RFFVRldPMEZCUVhaQ0xFdEJRVzlETEU5QlFVOHNTVUZCVUR0QlFVRlpMRWRCUVRsVExFZEJRV2RVTEdWQlFXTkhMRVZCUVVVMmNFSXNSVUZCYUVJc1MwRkJjVUkzY0VJc1JVRkJSVFp3UWl4RlFVRkdMRU5CUVV0eWFVSXNVMEZCVEN4SFFVRmxMRlZCUVZNMVNDeERRVUZVTEVWQlFWYzdRVUZCUXl4VFFVRkpMRWxCUVVsRExFbEJRVVVzUTBGQlZpeEZRVUZaUVN4SlFVRkZMRXRCUVVzclFpeE5RVUZ1UWl4RlFVRXdRaTlDTEVkQlFURkNMRVZCUVRoQ08wRkJRVU1zVlVGQlNYbENMRWxCUVVVc1MwRkJTM3BDTEVOQlFVd3NSVUZCVVhsVUxFdEJRV1FzUTBGQmIwSm9VeXhGUVVGRk5tSXNaVUZCUml4SFFVRnJRamRpTEVWQlFVVnJZeXhYUVVGR0xFZEJRV05zWXl4RlFVRkZiV01zVjBGQlJpeEhRVUZqYm1Nc1JVRkJSV2RqTEZsQlFVWXNSMEZCWldoakxFVkJRVVZwWXl4VlFVRkdMRWRCUVdGcVl5eEZRVUZGYTBjc1UwRkJSaXhIUVVGWk5VZ3NRMEZCZEVZN1FVRkJkMFlzV1VGQlR5eEpRVUZRTzBGQlFWa3NSMEZCZGswc1EwRkJhRlFzUlVGQmVXWXNaMEpCUVdWSkxFVkJRVVUyY0VJc1JVRkJha0lzUzBGQmMwSTNjRUlzUlVGQlJUWndRaXhGUVVGR0xFTkJRVXN6VXl4VlFVRk1MRWRCUVdkQ0xGVkJRVk4wV0N4RFFVRlVMRVZCUVZjN1FVRkJReXhuUWtGQlZTeFBRVUZQUVN4RFFVRnFRaXhMUVVGeFFrRXNTMEZCUnl4SlFVRjRRaXhGUVVFNFFpeExRVUZKTEVsQlFVbERMRWxCUVVVc1EwRkJWaXhGUVVGWlFTeEpRVUZGTEV0QlFVc3JRaXhOUVVGdVFpeEZRVUV3UWk5Q0xFZEJRVEZDTEVWQlFUaENPMEZCUVVNc1ZVRkJTWGxDTEVsQlFVVXNTMEZCUzNwQ0xFTkJRVXdzUlVGQlVYbFVMRXRCUVdRc1EwRkJiMEpvVXl4RlFVRkZhVzFDTEhkQ1FVRkdMRWRCUVRKQ2FtMUNMRVZCUVVWcmJVSXNiMEpCUVVZc1IwRkJkVUpzYlVJc1JVRkJSVzF0UWl4dlFrRkJSaXhIUVVGMVFtNXRRaXhGUVVGRmIyMUNMSEZDUVVGR0xFZEJRWGRDY0cxQ0xFVkJRVVZ4YlVJc2JVSkJRVVlzUjBGQmMwSnliVUlzUlVGQlJYTnRRaXhyUWtGQlJpeEhRVUZ4UW1odlFpeERRVUUxU1R0QlFVRTRTU3haUVVGUExFbEJRVkE3UVVGQldTeEhRVUUzVWl4RFFVRjZaaXhGUVVGM2VFSXNaMEpCUVdWSkxFVkJRVVUyY0VJc1JVRkJha0lzUzBGQmMwSTNjRUlzUlVGQlJUWndRaXhGUVVGR0xFTkJRVXN2VkN4VlFVRk1MRWRCUVdkQ0xGVkJRVk5zVnl4RFFVRlVMRVZCUVZjN1FVRkRNMjRyUWl4WFFVRlBMRXRCUVV0blF5eE5RVUZNTEVkQlFWa3NRMEZCV2l4SFFVRmphRU1zU1VGQlJTeExRVUZMTEVOQlFVd3NSVUZCVVRSblFpeFhRVUZTTEVkQlFXOUNia3dzVjBGQlZ5eExRVUZMTDBNc1IwRkJUQ3hEUVVGVExHTkJRVlFzUTBGQldDeERRVUZ3UWl4SFFVRjVSQ3RETEZkQlFWY3NTMEZCU3k5RExFZEJRVXdzUTBGQlV5eGhRVUZVTEVOQlFWZ3NRMEZCTTBRc1IwRkJLMFlzUzBGQlN5eERRVUZNTEVWQlFWRnJUeXhYUVVGeVNDeEhRVUZwU1N4SlFVRjRTVHRCUVVFMlNTeEhRVVEyTnpsQ0xFTkJRVFY0UWl4RFFVRjRSQ3hGUVVOMGJUaENNV1VzVDBGQlQyZHZRaXhOUVVGUUxFZEJRV05xY1VJc1EwRkVkMnc0UWp0QlFVTjBiRGhDTEVOQlNDOUtMRVZCUVVRc1JVRkhiVXNzVVVGQk1rSnJjVUlzVDBGQlQwTXNUMEZCVUN4SFFVRmxiRzlDTEU5QlFVOW5iMElzVFVGQmFrUXNSMEZCZDBRc1kwRkJXU3hQUVVGUFJ5eE5RVUZ1UWl4SlFVRXlRa0VzVDBGQlQwTXNSMEZCYkVNc1NVRkJkVU5FTEU5QlFVOHNSVUZCVUN4RlFVRlZMRmxCUVZVN1FVRkJRenRCUVVGaExGTkJRVTl1YjBJc1QwRkJUMmR2UWl4TlFVRmtPMEZCUVhGQ0xFTkJRWFpFTEVOQlNHeFJPMEZCU1VFaUxDSm1hV3hsSWpvaU5qTXVhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJdktpcGNjbHh1SUNvZ1UzZHBjR1Z5SURNdU5DNHlYSEpjYmlBcUlFMXZjM1FnYlc5a1pYSnVJRzF2WW1sc1pTQjBiM1ZqYUNCemJHbGtaWElnWVc1a0lHWnlZVzFsZDI5eWF5QjNhWFJvSUdoaGNtUjNZWEpsSUdGalkyVnNaWEpoZEdWa0lIUnlZVzV6YVhScGIyNXpYSEpjYmlBcUlGeHlYRzRnS2lCb2RIUndPaTh2ZDNkM0xtbGtZVzVuWlhKdkxuVnpMM04zYVhCbGNpOWNjbHh1SUNvZ1hISmNiaUFxSUVOdmNIbHlhV2RvZENBeU1ERTNMQ0JXYkdGa2FXMXBjaUJMYUdGeWJHRnRjR2xrYVZ4eVhHNGdLaUJVYUdVZ2FVUmhibWRsY204dWRYTmNjbHh1SUNvZ2FIUjBjRG92TDNkM2R5NXBaR0Z1WjJWeWJ5NTFjeTljY2x4dUlDb2dYSEpjYmlBcUlFeHBZMlZ1YzJWa0lIVnVaR1Z5SUUxSlZGeHlYRzRnS2lCY2NseHVJQ29nVW1Wc1pXRnpaV1FnYjI0NklFMWhjbU5vSURFd0xDQXlNREUzWEhKY2JpQXFMMXh5WEc0aFpuVnVZM1JwYjI0b0tYdGNJblZ6WlNCemRISnBZM1JjSWp0MllYSWdaU3hoUFdaMWJtTjBhVzl1S0hNc2FTbDdablZ1WTNScGIyNGdjaWhsS1h0eVpYUjFjbTRnVFdGMGFDNW1iRzl2Y2lobEtYMW1kVzVqZEdsdmJpQnVLQ2w3ZG1GeUlHVTlWQzV3WVhKaGJYTXVZWFYwYjNCc1lYa3NZVDFVTG5Oc2FXUmxjeTVsY1NoVUxtRmpkR2wyWlVsdVpHVjRLVHRoTG1GMGRISW9YQ0prWVhSaExYTjNhWEJsY2kxaGRYUnZjR3hoZVZ3aUtTWW1LR1U5WVM1aGRIUnlLRndpWkdGMFlTMXpkMmx3WlhJdFlYVjBiM0JzWVhsY0lpbDhmRlF1Y0dGeVlXMXpMbUYxZEc5d2JHRjVLU3hVTG1GMWRHOXdiR0Y1VkdsdFpXOTFkRWxrUFhObGRGUnBiV1Z2ZFhRb1puVnVZM1JwYjI0b0tYdFVMbkJoY21GdGN5NXNiMjl3UHloVUxtWnBlRXh2YjNBb0tTeFVMbDl6Ykdsa1pVNWxlSFFvS1N4VUxtVnRhWFFvWENKdmJrRjFkRzl3YkdGNVhDSXNWQ2twT2xRdWFYTkZibVEvYVM1aGRYUnZjR3hoZVZOMGIzQlBia3hoYzNRL1ZDNXpkRzl3UVhWMGIzQnNZWGtvS1Rvb1ZDNWZjMnhwWkdWVWJ5Z3dLU3hVTG1WdGFYUW9YQ0p2YmtGMWRHOXdiR0Y1WENJc1ZDa3BPaWhVTGw5emJHbGtaVTVsZUhRb0tTeFVMbVZ0YVhRb1hDSnZia0YxZEc5d2JHRjVYQ0lzVkNrcGZTeGxLWDFtZFc1amRHbHZiaUJ2S0dFc2RDbDdkbUZ5SUhNOVpTaGhMblJoY21kbGRDazdhV1lvSVhNdWFYTW9kQ2twYVdZb1hDSnpkSEpwYm1kY0lqMDlkSGx3Wlc5bUlIUXBjejF6TG5CaGNtVnVkSE1vZENrN1pXeHpaU0JwWmloMExtNXZaR1ZVZVhCbEtYdDJZWElnYVR0eVpYUjFjbTRnY3k1d1lYSmxiblJ6S0NrdVpXRmphQ2htZFc1amRHbHZiaWhsTEdFcGUyRTlQVDEwSmlZb2FUMTBLWDBwTEdrL2REcDJiMmxrSURCOWFXWW9NQ0U5UFhNdWJHVnVaM1JvS1hKbGRIVnliaUJ6V3pCZGZXWjFibU4wYVc5dUlHd29aU3hoS1h0aFBXRjhmSHQ5TzNaaGNpQjBQWGRwYm1SdmR5NU5kWFJoZEdsdmJrOWljMlZ5ZG1WeWZIeDNhVzVrYjNjdVYyVmlhMmwwVFhWMFlYUnBiMjVQWW5ObGNuWmxjaXh6UFc1bGR5QjBLR1oxYm1OMGFXOXVLR1VwZTJVdVptOXlSV0ZqYUNobWRXNWpkR2x2YmlobEtYdFVMbTl1VW1WemFYcGxLQ0V3S1N4VUxtVnRhWFFvWENKdmJrOWljMlZ5ZG1WeVZYQmtZWFJsWENJc1ZDeGxLWDBwZlNrN2N5NXZZbk5sY25abEtHVXNlMkYwZEhKcFluVjBaWE02ZG05cFpDQXdQVDA5WVM1aGRIUnlhV0oxZEdWemZIeGhMbUYwZEhKcFluVjBaWE1zWTJocGJHUk1hWE4wT25admFXUWdNRDA5UFdFdVkyaHBiR1JNYVhOMGZIeGhMbU5vYVd4a1RHbHpkQ3hqYUdGeVlXTjBaWEpFWVhSaE9uWnZhV1FnTUQwOVBXRXVZMmhoY21GamRHVnlSR0YwWVh4OFlTNWphR0Z5WVdOMFpYSkVZWFJoZlNrc1ZDNXZZbk5sY25abGNuTXVjSFZ6YUNoektYMW1kVzVqZEdsdmJpQndLR1VwZTJVdWIzSnBaMmx1WVd4RmRtVnVkQ1ltS0dVOVpTNXZjbWxuYVc1aGJFVjJaVzUwS1R0MllYSWdZVDFsTG10bGVVTnZaR1Y4ZkdVdVkyaGhja052WkdVN2FXWW9JVlF1Y0dGeVlXMXpMbUZzYkc5M1UzZHBjR1ZVYjA1bGVIUW1KaWhVTG1selNHOXlhWHB2Ym5SaGJDZ3BKaVl6T1QwOVBXRjhmQ0ZVTG1selNHOXlhWHB2Ym5SaGJDZ3BKaVkwTUQwOVBXRXBLWEpsZEhWeWJpRXhPMmxtS0NGVUxuQmhjbUZ0Y3k1aGJHeHZkMU4zYVhCbFZHOVFjbVYySmlZb1ZDNXBjMGh2Y21sNmIyNTBZV3dvS1NZbU16YzlQVDFoZkh3aFZDNXBjMGh2Y21sNmIyNTBZV3dvS1NZbU16ZzlQVDFoS1NseVpYUjFjbTRoTVR0cFppZ2hLR1V1YzJocFpuUkxaWGw4ZkdVdVlXeDBTMlY1Zkh4bExtTjBjbXhMWlhsOGZHVXViV1YwWVV0bGVYeDhaRzlqZFcxbGJuUXVZV04wYVhabFJXeGxiV1Z1ZENZbVpHOWpkVzFsYm5RdVlXTjBhWFpsUld4bGJXVnVkQzV1YjJSbFRtRnRaU1ltS0Z3aWFXNXdkWFJjSWowOVBXUnZZM1Z0Wlc1MExtRmpkR2wyWlVWc1pXMWxiblF1Ym05a1pVNWhiV1V1ZEc5TWIzZGxja05oYzJVb0tYeDhYQ0owWlhoMFlYSmxZVndpUFQwOVpHOWpkVzFsYm5RdVlXTjBhWFpsUld4bGJXVnVkQzV1YjJSbFRtRnRaUzUwYjB4dmQyVnlRMkZ6WlNncEtTa3BlMmxtS0RNM1BUMDlZWHg4TXprOVBUMWhmSHd6T0QwOVBXRjhmRFF3UFQwOVlTbDdkbUZ5SUhROUlURTdhV1lvVkM1amIyNTBZV2x1WlhJdWNHRnlaVzUwY3loY0lpNWNJaXRVTG5CaGNtRnRjeTV6Ykdsa1pVTnNZWE56S1M1c1pXNW5kR2crTUNZbU1EMDlQVlF1WTI5dWRHRnBibVZ5TG5CaGNtVnVkSE1vWENJdVhDSXJWQzV3WVhKaGJYTXVjMnhwWkdWQlkzUnBkbVZEYkdGemN5a3ViR1Z1WjNSb0tYSmxkSFZ5Ymp0MllYSWdjejE3YkdWbWREcDNhVzVrYjNjdWNHRm5aVmhQWm1aelpYUXNkRzl3T25kcGJtUnZkeTV3WVdkbFdVOW1abk5sZEgwc2FUMTNhVzVrYjNjdWFXNXVaWEpYYVdSMGFDeHlQWGRwYm1SdmR5NXBibTVsY2tobGFXZG9kQ3h1UFZRdVkyOXVkR0ZwYm1WeUxtOW1abk5sZENncE8xUXVjblJzSmlZb2JpNXNaV1owUFc0dWJHVm1kQzFVTG1OdmJuUmhhVzVsY2xzd1hTNXpZM0p2Ykd4TVpXWjBLVHRtYjNJb2RtRnlJRzg5VzF0dUxteGxablFzYmk1MGIzQmRMRnR1TG14bFpuUXJWQzUzYVdSMGFDeHVMblJ2Y0Ywc1cyNHViR1ZtZEN4dUxuUnZjQ3RVTG1obGFXZG9kRjBzVzI0dWJHVm1kQ3RVTG5kcFpIUm9MRzR1ZEc5d0sxUXVhR1ZwWjJoMFhWMHNiRDB3TzJ3OGJ5NXNaVzVuZEdnN2JDc3JLWHQyWVhJZ2NEMXZXMnhkTzNCYk1GMCtQWE11YkdWbWRDWW1jRnN3WFR3OWN5NXNaV1owSzJrbUpuQmJNVjArUFhNdWRHOXdKaVp3V3pGZFBEMXpMblJ2Y0N0eUppWW9kRDBoTUNsOWFXWW9JWFFwY21WMGRYSnVmVlF1YVhOSWIzSnBlbTl1ZEdGc0tDay9LRE0zSVQwOVlTWW1NemtoUFQxaGZId29aUzV3Y21WMlpXNTBSR1ZtWVhWc2REOWxMbkJ5WlhabGJuUkVaV1poZFd4MEtDazZaUzV5WlhSMWNtNVdZV3gxWlQwaE1Ta3NLRE01UFQwOVlTWW1JVlF1Y25Sc2ZId3pOejA5UFdFbUpsUXVjblJzS1NZbVZDNXpiR2xrWlU1bGVIUW9LU3dvTXpjOVBUMWhKaVloVkM1eWRHeDhmRE01UFQwOVlTWW1WQzV5ZEd3cEppWlVMbk5zYVdSbFVISmxkaWdwS1Rvb016Z2hQVDFoSmlZME1DRTlQV0Y4ZkNobExuQnlaWFpsYm5SRVpXWmhkV3gwUDJVdWNISmxkbVZ1ZEVSbFptRjFiSFFvS1RwbExuSmxkSFZ5YmxaaGJIVmxQU0V4S1N3ME1EMDlQV0VtSmxRdWMyeHBaR1ZPWlhoMEtDa3NNemc5UFQxaEppWlVMbk5zYVdSbFVISmxkaWdwS1N4VUxtVnRhWFFvWENKdmJrdGxlVkJ5WlhOelhDSXNWQ3hoS1gxOVpuVnVZM1JwYjI0Z1pDaGxLWHQyWVhJZ1lUMHdMSFE5TUN4elBUQXNhVDB3TzNKbGRIVnlibHdpWkdWMFlXbHNYQ0pwYmlCbEppWW9kRDFsTG1SbGRHRnBiQ2tzWENKM2FHVmxiRVJsYkhSaFhDSnBiaUJsSmlZb2REMHRaUzUzYUdWbGJFUmxiSFJoTHpFeU1Da3NYQ0ozYUdWbGJFUmxiSFJoV1Z3aWFXNGdaU1ltS0hROUxXVXVkMmhsWld4RVpXeDBZVmt2TVRJd0tTeGNJbmRvWldWc1JHVnNkR0ZZWENKcGJpQmxKaVlvWVQwdFpTNTNhR1ZsYkVSbGJIUmhXQzh4TWpBcExGd2lZWGhwYzF3aWFXNGdaU1ltWlM1aGVHbHpQVDA5WlM1SVQxSkpXazlPVkVGTVgwRllTVk1tSmloaFBYUXNkRDB3S1N4elBURXdLbUVzYVQweE1DcDBMRndpWkdWc2RHRlpYQ0pwYmlCbEppWW9hVDFsTG1SbGJIUmhXU2tzWENKa1pXeDBZVmhjSW1sdUlHVW1KaWh6UFdVdVpHVnNkR0ZZS1N3b2MzeDhhU2ttSm1VdVpHVnNkR0ZOYjJSbEppWW9NVDA5UFdVdVpHVnNkR0ZOYjJSbFB5aHpLajAwTUN4cEtqMDBNQ2s2S0hNcVBUZ3dNQ3hwS2owNE1EQXBLU3h6SmlZaFlTWW1LR0U5Y3p3eFB5MHhPakVwTEdrbUppRjBKaVlvZEQxcFBERS9MVEU2TVNrc2UzTndhVzVZT21Fc2MzQnBibGs2ZEN4d2FYaGxiRmc2Y3l4d2FYaGxiRms2YVgxOVpuVnVZM1JwYjI0Z2RTaGxLWHRsTG05eWFXZHBibUZzUlhabGJuUW1KaWhsUFdVdWIzSnBaMmx1WVd4RmRtVnVkQ2s3ZG1GeUlHRTlNQ3gwUFZRdWNuUnNQeTB4T2pFc2N6MWtLR1VwTzJsbUtGUXVjR0Z5WVcxekxtMXZkWE5sZDJobFpXeEdiM0pqWlZSdlFYaHBjeWxwWmloVUxtbHpTRzl5YVhwdmJuUmhiQ2dwS1h0cFppZ2hLRTFoZEdndVlXSnpLSE11Y0dsNFpXeFlLVDVOWVhSb0xtRmljeWh6TG5CcGVHVnNXU2twS1hKbGRIVnlianRoUFhNdWNHbDRaV3hZS25SOVpXeHpaWHRwWmlnaEtFMWhkR2d1WVdKektITXVjR2w0Wld4WktUNU5ZWFJvTG1GaWN5aHpMbkJwZUdWc1dDa3BLWEpsZEhWeWJqdGhQWE11Y0dsNFpXeFpmV1ZzYzJVZ1lUMU5ZWFJvTG1GaWN5aHpMbkJwZUdWc1dDaytUV0YwYUM1aFluTW9jeTV3YVhobGJGa3BQeTF6TG5CcGVHVnNXQ3AwT2kxekxuQnBlR1ZzV1R0cFppZ3dJVDA5WVNsN2FXWW9WQzV3WVhKaGJYTXViVzkxYzJWM2FHVmxiRWx1ZG1WeWRDWW1LR0U5TFdFcExGUXVjR0Z5WVcxekxtWnlaV1ZOYjJSbEtYdDJZWElnYVQxVUxtZGxkRmR5WVhCd1pYSlVjbUZ1YzJ4aGRHVW9LU3RoS2xRdWNHRnlZVzF6TG0xdmRYTmxkMmhsWld4VFpXNXphWFJwZG1sMGVTeHlQVlF1YVhOQ1pXZHBibTVwYm1jc2JqMVVMbWx6Ulc1a08ybG1LR2srUFZRdWJXbHVWSEpoYm5Oc1lYUmxLQ2ttSmlocFBWUXViV2x1VkhKaGJuTnNZWFJsS0NrcExHazhQVlF1YldGNFZISmhibk5zWVhSbEtDa21KaWhwUFZRdWJXRjRWSEpoYm5Oc1lYUmxLQ2twTEZRdWMyVjBWM0poY0hCbGNsUnlZVzV6YVhScGIyNG9NQ2tzVkM1elpYUlhjbUZ3Y0dWeVZISmhibk5zWVhSbEtHa3BMRlF1ZFhCa1lYUmxVSEp2WjNKbGMzTW9LU3hVTG5Wd1pHRjBaVUZqZEdsMlpVbHVaR1Y0S0Nrc0tDRnlKaVpVTG1selFtVm5hVzV1YVc1bmZId2hiaVltVkM1cGMwVnVaQ2ttSmxRdWRYQmtZWFJsUTJ4aGMzTmxjeWdwTEZRdWNHRnlZVzF6TG1aeVpXVk5iMlJsVTNScFkydDVQeWhqYkdWaGNsUnBiV1Z2ZFhRb1ZDNXRiM1Z6Wlhkb1pXVnNMblJwYldWdmRYUXBMRlF1Ylc5MWMyVjNhR1ZsYkM1MGFXMWxiM1YwUFhObGRGUnBiV1Z2ZFhRb1puVnVZM1JwYjI0b0tYdFVMbk5zYVdSbFVtVnpaWFFvS1gwc016QXdLU2s2VkM1d1lYSmhiWE11YkdGNmVVeHZZV1JwYm1jbUpsUXViR0Y2ZVNZbVZDNXNZWHA1TG14dllXUW9LU3hVTG1WdGFYUW9YQ0p2YmxOamNtOXNiRndpTEZRc1pTa3NWQzV3WVhKaGJYTXVZWFYwYjNCc1lYa21KbFF1Y0dGeVlXMXpMbUYxZEc5d2JHRjVSR2x6WVdKc1pVOXVTVzUwWlhKaFkzUnBiMjRtSmxRdWMzUnZjRUYxZEc5d2JHRjVLQ2tzTUQwOVBXbDhmR2s5UFQxVUxtMWhlRlJ5WVc1emJHRjBaU2dwS1hKbGRIVnlibjFsYkhObGUybG1LQ2h1WlhjZ2QybHVaRzkzTGtSaGRHVXBMbWRsZEZScGJXVW9LUzFVTG0xdmRYTmxkMmhsWld3dWJHRnpkRk5qY205c2JGUnBiV1UrTmpBcGFXWW9ZVHd3S1dsbUtGUXVhWE5GYm1RbUppRlVMbkJoY21GdGN5NXNiMjl3Zkh4VUxtRnVhVzFoZEdsdVp5bDdhV1lvVkM1d1lYSmhiWE11Ylc5MWMyVjNhR1ZsYkZKbGJHVmhjMlZQYmtWa1oyVnpLWEpsZEhWeWJpRXdmV1ZzYzJVZ1ZDNXpiR2xrWlU1bGVIUW9LU3hVTG1WdGFYUW9YQ0p2YmxOamNtOXNiRndpTEZRc1pTazdaV3h6WlNCcFppaFVMbWx6UW1WbmFXNXVhVzVuSmlZaFZDNXdZWEpoYlhNdWJHOXZjSHg4VkM1aGJtbHRZWFJwYm1jcGUybG1LRlF1Y0dGeVlXMXpMbTF2ZFhObGQyaGxaV3hTWld4bFlYTmxUMjVGWkdkbGN5bHlaWFIxY200aE1IMWxiSE5sSUZRdWMyeHBaR1ZRY21WMktDa3NWQzVsYldsMEtGd2liMjVUWTNKdmJHeGNJaXhVTEdVcE8xUXViVzkxYzJWM2FHVmxiQzVzWVhOMFUyTnliMnhzVkdsdFpUMG9ibVYzSUhkcGJtUnZkeTVFWVhSbEtTNW5aWFJVYVcxbEtDbDljbVYwZFhKdUlHVXVjSEpsZG1WdWRFUmxabUYxYkhRL1pTNXdjbVYyWlc1MFJHVm1ZWFZzZENncE9tVXVjbVYwZFhKdVZtRnNkV1U5SVRFc0lURjlmV1oxYm1OMGFXOXVJR01vWVN4MEtYdGhQV1VvWVNrN2RtRnlJSE1zYVN4eUxHNDlWQzV5ZEd3L0xURTZNVHR6UFdFdVlYUjBjaWhjSW1SaGRHRXRjM2RwY0dWeUxYQmhjbUZzYkdGNFhDSXBmSHhjSWpCY0lpeHBQV0V1WVhSMGNpaGNJbVJoZEdFdGMzZHBjR1Z5TFhCaGNtRnNiR0Y0TFhoY0lpa3NjajFoTG1GMGRISW9YQ0prWVhSaExYTjNhWEJsY2kxd1lYSmhiR3hoZUMxNVhDSXBMR2w4ZkhJL0tHazlhWHg4WENJd1hDSXNjajF5Zkh4Y0lqQmNJaWs2VkM1cGMwaHZjbWw2YjI1MFlXd29LVDhvYVQxekxISTlYQ0l3WENJcE9paHlQWE1zYVQxY0lqQmNJaWtzYVQxcExtbHVaR1Y0VDJZb1hDSWxYQ0lwUGowd1AzQmhjbk5sU1c1MEtHa3NNVEFwS25RcWJpdGNJaVZjSWpwcEtuUXFiaXRjSW5CNFhDSXNjajF5TG1sdVpHVjRUMllvWENJbFhDSXBQajB3UDNCaGNuTmxTVzUwS0hJc01UQXBLblFyWENJbFhDSTZjaXAwSzF3aWNIaGNJaXhoTG5SeVlXNXpabTl5YlNoY0luUnlZVzV6YkdGMFpUTmtLRndpSzJrclhDSXNJRndpSzNJclhDSXNNSEI0S1Z3aUtYMW1kVzVqZEdsdmJpQnRLR1VwZTNKbGRIVnliaUF3SVQwOVpTNXBibVJsZUU5bUtGd2liMjVjSWlrbUppaGxQV1ZiTUYwaFBUMWxXekJkTG5SdlZYQndaWEpEWVhObEtDay9YQ0p2Ymx3aUsyVmJNRjB1ZEc5VmNIQmxja05oYzJVb0tTdGxMbk4xWW5OMGNtbHVaeWd4S1RwY0ltOXVYQ0lyWlNrc1pYMXBaaWdoS0hSb2FYTWdhVzV6ZEdGdVkyVnZaaUJoS1NseVpYUjFjbTRnYm1WM0lHRW9jeXhwS1R0MllYSWdhRDE3WkdseVpXTjBhVzl1T2x3aWFHOXlhWHB2Ym5SaGJGd2lMSFJ2ZFdOb1JYWmxiblJ6VkdGeVoyVjBPbHdpWTI5dWRHRnBibVZ5WENJc2FXNXBkR2xoYkZOc2FXUmxPakFzYzNCbFpXUTZNekF3TEdGMWRHOXdiR0Y1T2lFeExHRjFkRzl3YkdGNVJHbHpZV0pzWlU5dVNXNTBaWEpoWTNScGIyNDZJVEFzWVhWMGIzQnNZWGxUZEc5d1QyNU1ZWE4wT2lFeExHbFBVMFZrWjJWVGQybHdaVVJsZEdWamRHbHZiam9oTVN4cFQxTkZaR2RsVTNkcGNHVlVhSEpsYzJodmJHUTZNakFzWm5KbFpVMXZaR1U2SVRFc1puSmxaVTF2WkdWTmIyMWxiblIxYlRvaE1DeG1jbVZsVFc5a1pVMXZiV1Z1ZEhWdFVtRjBhVzg2TVN4bWNtVmxUVzlrWlUxdmJXVnVkSFZ0UW05MWJtTmxPaUV3TEdaeVpXVk5iMlJsVFc5dFpXNTBkVzFDYjNWdVkyVlNZWFJwYnpveExHWnlaV1ZOYjJSbFRXOXRaVzUwZFcxV1pXeHZZMmwwZVZKaGRHbHZPakVzWm5KbFpVMXZaR1ZUZEdsamEzazZJVEVzWm5KbFpVMXZaR1ZOYVc1cGJYVnRWbVZzYjJOcGRIazZMakF5TEdGMWRHOUlaV2xuYUhRNklURXNjMlYwVjNKaGNIQmxjbE5wZW1VNklURXNkbWx5ZEhWaGJGUnlZVzV6YkdGMFpUb2hNU3hsWm1abFkzUTZYQ0p6Ykdsa1pWd2lMR052ZG1WeVpteHZkenA3Y205MFlYUmxPalV3TEhOMGNtVjBZMmc2TUN4a1pYQjBhRG94TURBc2JXOWthV1pwWlhJNk1TeHpiR2xrWlZOb1lXUnZkM002SVRCOUxHWnNhWEE2ZTNOc2FXUmxVMmhoWkc5M2N6b2hNQ3hzYVcxcGRGSnZkR0YwYVc5dU9pRXdmU3hqZFdKbE9udHpiR2xrWlZOb1lXUnZkM002SVRBc2MyaGhaRzkzT2lFd0xITm9ZV1J2ZDA5bVpuTmxkRG95TUN4emFHRmtiM2RUWTJGc1pUb3VPVFI5TEdaaFpHVTZlMk55YjNOelJtRmtaVG9oTVgwc2NHRnlZV3hzWVhnNklURXNlbTl2YlRvaE1TeDZiMjl0VFdGNE9qTXNlbTl2YlUxcGJqb3hMSHB2YjIxVWIyZG5iR1U2SVRBc2MyTnliMnhzWW1GeU9tNTFiR3dzYzJOeWIyeHNZbUZ5U0dsa1pUb2hNQ3h6WTNKdmJHeGlZWEpFY21GbloyRmliR1U2SVRFc2MyTnliMnhzWW1GeVUyNWhjRTl1VW1Wc1pXRnpaVG9oTVN4clpYbGliMkZ5WkVOdmJuUnliMnc2SVRFc2JXOTFjMlYzYUdWbGJFTnZiblJ5YjJ3NklURXNiVzkxYzJWM2FHVmxiRkpsYkdWaGMyVlBia1ZrWjJWek9pRXhMRzF2ZFhObGQyaGxaV3hKYm5abGNuUTZJVEVzYlc5MWMyVjNhR1ZsYkVadmNtTmxWRzlCZUdsek9pRXhMRzF2ZFhObGQyaGxaV3hUWlc1emFYUnBkbWwwZVRveExHMXZkWE5sZDJobFpXeEZkbVZ1ZEhOVVlYSm5aV1E2WENKamIyNTBZV2x1WlhKY0lpeG9ZWE5vYm1GMk9pRXhMR2hoYzJodVlYWlhZWFJqYUZOMFlYUmxPaUV4TEdocGMzUnZjbms2SVRFc2NtVndiR0ZqWlZOMFlYUmxPaUV4TEdKeVpXRnJjRzlwYm5Sek9uWnZhV1FnTUN4emNHRmpaVUpsZEhkbFpXNDZNQ3h6Ykdsa1pYTlFaWEpXYVdWM09qRXNjMnhwWkdWelVHVnlRMjlzZFcxdU9qRXNjMnhwWkdWelVHVnlRMjlzZFcxdVJtbHNiRHBjSW1OdmJIVnRibHdpTEhOc2FXUmxjMUJsY2tkeWIzVndPakVzWTJWdWRHVnlaV1JUYkdsa1pYTTZJVEVzYzJ4cFpHVnpUMlptYzJWMFFtVm1iM0psT2pBc2MyeHBaR1Z6VDJabWMyVjBRV1owWlhJNk1DeHliM1Z1WkV4bGJtZDBhSE02SVRFc2RHOTFZMmhTWVhScGJ6b3hMSFJ2ZFdOb1FXNW5iR1U2TkRVc2MybHRkV3hoZEdWVWIzVmphRG9oTUN4emFHOXlkRk4zYVhCbGN6b2hNQ3hzYjI1blUzZHBjR1Z6T2lFd0xHeHZibWRUZDJsd1pYTlNZWFJwYnpvdU5TeHNiMjVuVTNkcGNHVnpUWE02TXpBd0xHWnZiR3h2ZDBacGJtZGxjam9oTUN4dmJteDVSWGgwWlhKdVlXdzZJVEVzZEdoeVpYTm9iMnhrT2pBc2RHOTFZMmhOYjNabFUzUnZjRkJ5YjNCaFoyRjBhVzl1T2lFd0xIUnZkV05vVW1Wc1pXRnpaVTl1UldSblpYTTZJVEVzZFc1cGNYVmxUbUYyUld4bGJXVnVkSE02SVRBc2NHRm5hVzVoZEdsdmJqcHVkV3hzTEhCaFoybHVZWFJwYjI1RmJHVnRaVzUwT2x3aWMzQmhibHdpTEhCaFoybHVZWFJwYjI1RGJHbGphMkZpYkdVNklURXNjR0ZuYVc1aGRHbHZia2hwWkdVNklURXNjR0ZuYVc1aGRHbHZia0oxYkd4bGRGSmxibVJsY2pwdWRXeHNMSEJoWjJsdVlYUnBiMjVRY205bmNtVnpjMUpsYm1SbGNqcHVkV3hzTEhCaFoybHVZWFJwYjI1R2NtRmpkR2x2YmxKbGJtUmxjanB1ZFd4c0xIQmhaMmx1WVhScGIyNURkWE4wYjIxU1pXNWtaWEk2Ym5Wc2JDeHdZV2RwYm1GMGFXOXVWSGx3WlRwY0ltSjFiR3hsZEhOY0lpeHlaWE5wYzNSaGJtTmxPaUV3TEhKbGMybHpkR0Z1WTJWU1lYUnBiem91T0RVc2JtVjRkRUoxZEhSdmJqcHVkV3hzTEhCeVpYWkNkWFIwYjI0NmJuVnNiQ3gzWVhSamFGTnNhV1JsYzFCeWIyZHlaWE56T2lFeExIZGhkR05vVTJ4cFpHVnpWbWx6YVdKcGJHbDBlVG9oTVN4bmNtRmlRM1Z5YzI5eU9pRXhMSEJ5WlhabGJuUkRiR2xqYTNNNklUQXNjSEpsZG1WdWRFTnNhV05yYzFCeWIzQmhaMkYwYVc5dU9pRXdMSE5zYVdSbFZHOURiR2xqYTJWa1UyeHBaR1U2SVRFc2JHRjZlVXh2WVdScGJtYzZJVEVzYkdGNmVVeHZZV1JwYm1kSmJsQnlaWFpPWlhoME9pRXhMR3hoZW5sTWIyRmthVzVuU1c1UWNtVjJUbVY0ZEVGdGIzVnVkRG94TEd4aGVubE1iMkZrYVc1blQyNVVjbUZ1YzJsMGFXOXVVM1JoY25RNklURXNjSEpsYkc5aFpFbHRZV2RsY3pvaE1DeDFjR1JoZEdWUGJrbHRZV2RsYzFKbFlXUjVPaUV3TEd4dmIzQTZJVEVzYkc5dmNFRmtaR2wwYVc5dVlXeFRiR2xrWlhNNk1DeHNiMjl3WldSVGJHbGtaWE02Ym5Wc2JDeGpiMjUwY205c09uWnZhV1FnTUN4amIyNTBjbTlzU1c1MlpYSnpaVG9oTVN4amIyNTBjbTlzUW5rNlhDSnpiR2xrWlZ3aUxHNXZjbTFoYkdsNlpWTnNhV1JsU1c1a1pYZzZJVEFzWVd4c2IzZFRkMmx3WlZSdlVISmxkam9oTUN4aGJHeHZkMU4zYVhCbFZHOU9aWGgwT2lFd0xITjNhWEJsU0dGdVpHeGxjanB1ZFd4c0xHNXZVM2RwY0dsdVp6b2hNQ3h1YjFOM2FYQnBibWREYkdGemN6cGNJbk4zYVhCbGNpMXVieTF6ZDJsd2FXNW5YQ0lzY0dGemMybDJaVXhwYzNSbGJtVnljem9oTUN4amIyNTBZV2x1WlhKTmIyUnBabWxsY2tOc1lYTnpPbHdpYzNkcGNHVnlMV052Ym5SaGFXNWxjaTFjSWl4emJHbGtaVU5zWVhOek9sd2ljM2RwY0dWeUxYTnNhV1JsWENJc2MyeHBaR1ZCWTNScGRtVkRiR0Z6Y3pwY0luTjNhWEJsY2kxemJHbGtaUzFoWTNScGRtVmNJaXh6Ykdsa1pVUjFjR3hwWTJGMFpVRmpkR2wyWlVOc1lYTnpPbHdpYzNkcGNHVnlMWE5zYVdSbExXUjFjR3hwWTJGMFpTMWhZM1JwZG1WY0lpeHpiR2xrWlZacGMybGliR1ZEYkdGemN6cGNJbk4zYVhCbGNpMXpiR2xrWlMxMmFYTnBZbXhsWENJc2MyeHBaR1ZFZFhCc2FXTmhkR1ZEYkdGemN6cGNJbk4zYVhCbGNpMXpiR2xrWlMxa2RYQnNhV05oZEdWY0lpeHpiR2xrWlU1bGVIUkRiR0Z6Y3pwY0luTjNhWEJsY2kxemJHbGtaUzF1WlhoMFhDSXNjMnhwWkdWRWRYQnNhV05oZEdWT1pYaDBRMnhoYzNNNlhDSnpkMmx3WlhJdGMyeHBaR1V0WkhWd2JHbGpZWFJsTFc1bGVIUmNJaXh6Ykdsa1pWQnlaWFpEYkdGemN6cGNJbk4zYVhCbGNpMXpiR2xrWlMxd2NtVjJYQ0lzYzJ4cFpHVkVkWEJzYVdOaGRHVlFjbVYyUTJ4aGMzTTZYQ0p6ZDJsd1pYSXRjMnhwWkdVdFpIVndiR2xqWVhSbExYQnlaWFpjSWl4M2NtRndjR1Z5UTJ4aGMzTTZYQ0p6ZDJsd1pYSXRkM0poY0hCbGNsd2lMR0oxYkd4bGRFTnNZWE56T2x3aWMzZHBjR1Z5TFhCaFoybHVZWFJwYjI0dFluVnNiR1YwWENJc1luVnNiR1YwUVdOMGFYWmxRMnhoYzNNNlhDSnpkMmx3WlhJdGNHRm5hVzVoZEdsdmJpMWlkV3hzWlhRdFlXTjBhWFpsWENJc1luVjBkRzl1UkdsellXSnNaV1JEYkdGemN6cGNJbk4zYVhCbGNpMWlkWFIwYjI0dFpHbHpZV0pzWldSY0lpeHdZV2RwYm1GMGFXOXVRM1Z5Y21WdWRFTnNZWE56T2x3aWMzZHBjR1Z5TFhCaFoybHVZWFJwYjI0dFkzVnljbVZ1ZEZ3aUxIQmhaMmx1WVhScGIyNVViM1JoYkVOc1lYTnpPbHdpYzNkcGNHVnlMWEJoWjJsdVlYUnBiMjR0ZEc5MFlXeGNJaXh3WVdkcGJtRjBhVzl1U0dsa1pHVnVRMnhoYzNNNlhDSnpkMmx3WlhJdGNHRm5hVzVoZEdsdmJpMW9hV1JrWlc1Y0lpeHdZV2RwYm1GMGFXOXVVSEp2WjNKbGMzTmlZWEpEYkdGemN6cGNJbk4zYVhCbGNpMXdZV2RwYm1GMGFXOXVMWEJ5YjJkeVpYTnpZbUZ5WENJc2NHRm5hVzVoZEdsdmJrTnNhV05yWVdKc1pVTnNZWE56T2x3aWMzZHBjR1Z5TFhCaFoybHVZWFJwYjI0dFkyeHBZMnRoWW14bFhDSXNjR0ZuYVc1aGRHbHZiazF2WkdsbWFXVnlRMnhoYzNNNlhDSnpkMmx3WlhJdGNHRm5hVzVoZEdsdmJpMWNJaXhzWVhwNVRHOWhaR2x1WjBOc1lYTnpPbHdpYzNkcGNHVnlMV3hoZW5sY0lpeHNZWHA1VTNSaGRIVnpURzloWkdsdVowTnNZWE56T2x3aWMzZHBjR1Z5TFd4aGVua3RiRzloWkdsdVoxd2lMR3hoZW5sVGRHRjBkWE5NYjJGa1pXUkRiR0Z6Y3pwY0luTjNhWEJsY2kxc1lYcDVMV3h2WVdSbFpGd2lMR3hoZW5sUWNtVnNiMkZrWlhKRGJHRnpjenBjSW5OM2FYQmxjaTFzWVhwNUxYQnlaV3h2WVdSbGNsd2lMRzV2ZEdsbWFXTmhkR2x2YmtOc1lYTnpPbHdpYzNkcGNHVnlMVzV2ZEdsbWFXTmhkR2x2Ymx3aUxIQnlaV3h2WVdSbGNrTnNZWE56T2x3aWNISmxiRzloWkdWeVhDSXNlbTl2YlVOdmJuUmhhVzVsY2tOc1lYTnpPbHdpYzNkcGNHVnlMWHB2YjIwdFkyOXVkR0ZwYm1WeVhDSXNiMkp6WlhKMlpYSTZJVEVzYjJKelpYSjJaVkJoY21WdWRITTZJVEVzWVRFeGVUb2hNU3h3Y21WMlUyeHBaR1ZOWlhOellXZGxPbHdpVUhKbGRtbHZkWE1nYzJ4cFpHVmNJaXh1WlhoMFUyeHBaR1ZOWlhOellXZGxPbHdpVG1WNGRDQnpiR2xrWlZ3aUxHWnBjbk4wVTJ4cFpHVk5aWE56WVdkbE9sd2lWR2hwY3lCcGN5QjBhR1VnWm1seWMzUWdjMnhwWkdWY0lpeHNZWE4wVTJ4cFpHVk5aWE56WVdkbE9sd2lWR2hwY3lCcGN5QjBhR1VnYkdGemRDQnpiR2xrWlZ3aUxIQmhaMmx1WVhScGIyNUNkV3hzWlhSTlpYTnpZV2RsT2x3aVIyOGdkRzhnYzJ4cFpHVWdlM3RwYm1SbGVIMTlYQ0lzY25WdVEyRnNiR0poWTJ0elQyNUpibWwwT2lFd2ZTeG5QV2ttSm1rdWRtbHlkSFZoYkZSeVlXNXpiR0YwWlR0cFBXbDhmSHQ5TzNaaGNpQm1QWHQ5TzJadmNpaDJZWElnZGlCcGJpQnBLV2xtS0Z3aWIySnFaV04wWENJaFBYUjVjR1Z2WmlCcFczWmRmSHh1ZFd4c1BUMDlhVnQyWFh4OEtHbGJkbDB1Ym05a1pWUjVjR1Y4ZkdsYmRsMDlQVDEzYVc1a2IzZDhmR2xiZGwwOVBUMWtiMk4xYldWdWRIeDhkbTlwWkNBd0lUMDlkQ1ltYVZ0MlhXbHVjM1JoYm1ObGIyWWdkSHg4WENKMWJtUmxabWx1WldSY0lpRTlkSGx3Wlc5bUlHcFJkV1Z5ZVNZbWFWdDJYV2x1YzNSaGJtTmxiMllnYWxGMVpYSjVLU2xtVzNaZFBXbGJkbDA3Wld4elpYdG1XM1pkUFh0OU8yWnZjaWgyWVhJZ2R5QnBiaUJwVzNaZEtXWmJkbDFiZDEwOWFWdDJYVnQzWFgxbWIzSW9kbUZ5SUhrZ2FXNGdhQ2xwWmloMmIybGtJREE5UFQxcFczbGRLV2xiZVYwOWFGdDVYVHRsYkhObElHbG1LRndpYjJKcVpXTjBYQ0k5UFhSNWNHVnZaaUJwVzNsZEtXWnZjaWgyWVhJZ2VDQnBiaUJvVzNsZEtYWnZhV1FnTUQwOVBXbGJlVjFiZUYwbUppaHBXM2xkVzNoZFBXaGJlVjFiZUYwcE8zWmhjaUJVUFhSb2FYTTdhV1lvVkM1d1lYSmhiWE05YVN4VUxtOXlhV2RwYm1Gc1VHRnlZVzF6UFdZc1ZDNWpiR0Z6YzA1aGJXVnpQVnRkTEhadmFXUWdNQ0U5UFdVbUpuWnZhV1FnTUNFOVBYUW1KaWhsUFhRcExDaDJiMmxrSURBaFBUMWxmSHdvWlQxMmIybGtJREE5UFQxMFAzZHBibVJ2ZHk1RWIyMDNmSHgzYVc1a2IzY3VXbVZ3ZEc5OGZIZHBibVJ2ZHk1cVVYVmxjbms2ZENrcEppWW9WQzRrUFdVc1ZDNWpkWEp5Wlc1MFFuSmxZV3R3YjJsdWREMTJiMmxrSURBc1ZDNW5aWFJCWTNScGRtVkNjbVZoYTNCdmFXNTBQV1oxYm1OMGFXOXVLQ2w3YVdZb0lWUXVjR0Z5WVcxekxtSnlaV0ZyY0c5cGJuUnpLWEpsZEhWeWJpRXhPM1poY2lCbExHRTlJVEVzZEQxYlhUdG1iM0lvWlNCcGJpQlVMbkJoY21GdGN5NWljbVZoYTNCdmFXNTBjeWxVTG5CaGNtRnRjeTVpY21WaGEzQnZhVzUwY3k1b1lYTlBkMjVRY205d1pYSjBlU2hsS1NZbWRDNXdkWE5vS0dVcE8zUXVjMjl5ZENobWRXNWpkR2x2YmlobExHRXBlM0psZEhWeWJpQndZWEp6WlVsdWRDaGxMREV3S1Q1d1lYSnpaVWx1ZENoaExERXdLWDBwTzJadmNpaDJZWElnY3owd08zTThkQzVzWlc1bmRHZzdjeXNyS1NobFBYUmJjMTBwUGoxM2FXNWtiM2N1YVc1dVpYSlhhV1IwYUNZbUlXRW1KaWhoUFdVcE8zSmxkSFZ5YmlCaGZIeGNJbTFoZUZ3aWZTeFVMbk5sZEVKeVpXRnJjRzlwYm5ROVpuVnVZM1JwYjI0b0tYdDJZWElnWlQxVUxtZGxkRUZqZEdsMlpVSnlaV0ZyY0c5cGJuUW9LVHRwWmlobEppWlVMbU4xY25KbGJuUkNjbVZoYTNCdmFXNTBJVDA5WlNsN2RtRnlJR0U5WlNCcGJpQlVMbkJoY21GdGN5NWljbVZoYTNCdmFXNTBjejlVTG5CaGNtRnRjeTVpY21WaGEzQnZhVzUwYzF0bFhUcFVMbTl5YVdkcGJtRnNVR0Z5WVcxekxIUTlWQzV3WVhKaGJYTXViRzl2Y0NZbVlTNXpiR2xrWlhOUVpYSldhV1YzSVQwOVZDNXdZWEpoYlhNdWMyeHBaR1Z6VUdWeVZtbGxkenRtYjNJb2RtRnlJSE1nYVc0Z1lTbFVMbkJoY21GdGMxdHpYVDFoVzNOZE8xUXVZM1Z5Y21WdWRFSnlaV0ZyY0c5cGJuUTlaU3gwSmlaVUxtUmxjM1J5YjNsTWIyOXdKaVpVTG5KbFRHOXZjQ2doTUNsOWZTeFVMbkJoY21GdGN5NWljbVZoYTNCdmFXNTBjeVltVkM1elpYUkNjbVZoYTNCdmFXNTBLQ2tzVkM1amIyNTBZV2x1WlhJOVpTaHpLU3d3SVQwOVZDNWpiMjUwWVdsdVpYSXViR1Z1WjNSb0tTbDdhV1lvVkM1amIyNTBZV2x1WlhJdWJHVnVaM1JvUGpFcGUzWmhjaUJpUFZ0ZE8zSmxkSFZ5YmlCVUxtTnZiblJoYVc1bGNpNWxZV05vS0daMWJtTjBhVzl1S0NsN1lpNXdkWE5vS0c1bGR5QmhLSFJvYVhNc2FTa3BmU2tzWW4xVUxtTnZiblJoYVc1bGNsc3dYUzV6ZDJsd1pYSTlWQ3hVTG1OdmJuUmhhVzVsY2k1a1lYUmhLRndpYzNkcGNHVnlYQ0lzVkNrc1ZDNWpiR0Z6YzA1aGJXVnpMbkIxYzJnb1ZDNXdZWEpoYlhNdVkyOXVkR0ZwYm1WeVRXOWthV1pwWlhKRGJHRnpjeXRVTG5CaGNtRnRjeTVrYVhKbFkzUnBiMjRwTEZRdWNHRnlZVzF6TG1aeVpXVk5iMlJsSmlaVUxtTnNZWE56VG1GdFpYTXVjSFZ6YUNoVUxuQmhjbUZ0Y3k1amIyNTBZV2x1WlhKTmIyUnBabWxsY2tOc1lYTnpLMXdpWm5KbFpTMXRiMlJsWENJcExGUXVjM1Z3Y0c5eWRDNW1iR1Y0WW05NGZId29WQzVqYkdGemMwNWhiV1Z6TG5CMWMyZ29WQzV3WVhKaGJYTXVZMjl1ZEdGcGJtVnlUVzlrYVdacFpYSkRiR0Z6Y3l0Y0ltNXZMV1pzWlhoaWIzaGNJaWtzVkM1d1lYSmhiWE11YzJ4cFpHVnpVR1Z5UTI5c2RXMXVQVEVwTEZRdWNHRnlZVzF6TG1GMWRHOUlaV2xuYUhRbUpsUXVZMnhoYzNOT1lXMWxjeTV3ZFhOb0tGUXVjR0Z5WVcxekxtTnZiblJoYVc1bGNrMXZaR2xtYVdWeVEyeGhjM01yWENKaGRYUnZhR1ZwWjJoMFhDSXBMQ2hVTG5CaGNtRnRjeTV3WVhKaGJHeGhlSHg4VkM1d1lYSmhiWE11ZDJGMFkyaFRiR2xrWlhOV2FYTnBZbWxzYVhSNUtTWW1LRlF1Y0dGeVlXMXpMbmRoZEdOb1UyeHBaR1Z6VUhKdlozSmxjM005SVRBcExGUXVjR0Z5WVcxekxuUnZkV05vVW1Wc1pXRnpaVTl1UldSblpYTW1KaWhVTG5CaGNtRnRjeTV5WlhOcGMzUmhibU5sVW1GMGFXODlNQ2tzVzF3aVkzVmlaVndpTEZ3aVkyOTJaWEptYkc5M1hDSXNYQ0ptYkdsd1hDSmRMbWx1WkdWNFQyWW9WQzV3WVhKaGJYTXVaV1ptWldOMEtUNDlNQ1ltS0ZRdWMzVndjRzl5ZEM1MGNtRnVjMlp2Y20xek0yUS9LRlF1Y0dGeVlXMXpMbmRoZEdOb1UyeHBaR1Z6VUhKdlozSmxjM005SVRBc1ZDNWpiR0Z6YzA1aGJXVnpMbkIxYzJnb1ZDNXdZWEpoYlhNdVkyOXVkR0ZwYm1WeVRXOWthV1pwWlhKRGJHRnpjeXRjSWpOa1hDSXBLVHBVTG5CaGNtRnRjeTVsWm1abFkzUTlYQ0p6Ykdsa1pWd2lLU3hjSW5Oc2FXUmxYQ0loUFQxVUxuQmhjbUZ0Y3k1bFptWmxZM1FtSmxRdVkyeGhjM05PWVcxbGN5NXdkWE5vS0ZRdWNHRnlZVzF6TG1OdmJuUmhhVzVsY2sxdlpHbG1hV1Z5UTJ4aGMzTXJWQzV3WVhKaGJYTXVaV1ptWldOMEtTeGNJbU4xWW1WY0lqMDlQVlF1Y0dGeVlXMXpMbVZtWm1WamRDWW1LRlF1Y0dGeVlXMXpMbkpsYzJsemRHRnVZMlZTWVhScGJ6MHdMRlF1Y0dGeVlXMXpMbk5zYVdSbGMxQmxjbFpwWlhjOU1TeFVMbkJoY21GdGN5NXpiR2xrWlhOUVpYSkRiMngxYlc0OU1TeFVMbkJoY21GdGN5NXpiR2xrWlhOUVpYSkhjbTkxY0QweExGUXVjR0Z5WVcxekxtTmxiblJsY21Wa1UyeHBaR1Z6UFNFeExGUXVjR0Z5WVcxekxuTndZV05sUW1WMGQyVmxiajB3TEZRdWNHRnlZVzF6TG5acGNuUjFZV3hVY21GdWMyeGhkR1U5SVRBcExGd2labUZrWlZ3aUlUMDlWQzV3WVhKaGJYTXVaV1ptWldOMEppWmNJbVpzYVhCY0lpRTlQVlF1Y0dGeVlXMXpMbVZtWm1WamRIeDhLRlF1Y0dGeVlXMXpMbk5zYVdSbGMxQmxjbFpwWlhjOU1TeFVMbkJoY21GdGN5NXpiR2xrWlhOUVpYSkRiMngxYlc0OU1TeFVMbkJoY21GdGN5NXpiR2xrWlhOUVpYSkhjbTkxY0QweExGUXVjR0Z5WVcxekxuZGhkR05vVTJ4cFpHVnpVSEp2WjNKbGMzTTlJVEFzVkM1d1lYSmhiWE11YzNCaFkyVkNaWFIzWldWdVBUQXNkbTlwWkNBd1BUMDlaeVltS0ZRdWNHRnlZVzF6TG5acGNuUjFZV3hVY21GdWMyeGhkR1U5SVRBcEtTeFVMbkJoY21GdGN5NW5jbUZpUTNWeWMyOXlKaVpVTG5OMWNIQnZjblF1ZEc5MVkyZ21KaWhVTG5CaGNtRnRjeTVuY21GaVEzVnljMjl5UFNFeEtTeFVMbmR5WVhCd1pYSTlWQzVqYjI1MFlXbHVaWEl1WTJocGJHUnlaVzRvWENJdVhDSXJWQzV3WVhKaGJYTXVkM0poY0hCbGNrTnNZWE56S1N4VUxuQmhjbUZ0Y3k1d1lXZHBibUYwYVc5dUppWW9WQzV3WVdkcGJtRjBhVzl1UTI5dWRHRnBibVZ5UFdVb1ZDNXdZWEpoYlhNdWNHRm5hVzVoZEdsdmJpa3NWQzV3WVhKaGJYTXVkVzVwY1hWbFRtRjJSV3hsYldWdWRITW1KbHdpYzNSeWFXNW5YQ0k5UFhSNWNHVnZaaUJVTG5CaGNtRnRjeTV3WVdkcGJtRjBhVzl1SmlaVUxuQmhaMmx1WVhScGIyNURiMjUwWVdsdVpYSXViR1Z1WjNSb1BqRW1KakU5UFQxVUxtTnZiblJoYVc1bGNpNW1hVzVrS0ZRdWNHRnlZVzF6TG5CaFoybHVZWFJwYjI0cExteGxibWQwYUNZbUtGUXVjR0ZuYVc1aGRHbHZia052Ym5SaGFXNWxjajFVTG1OdmJuUmhhVzVsY2k1bWFXNWtLRlF1Y0dGeVlXMXpMbkJoWjJsdVlYUnBiMjRwS1N4Y0ltSjFiR3hsZEhOY0lqMDlQVlF1Y0dGeVlXMXpMbkJoWjJsdVlYUnBiMjVVZVhCbEppWlVMbkJoY21GdGN5NXdZV2RwYm1GMGFXOXVRMnhwWTJ0aFlteGxQMVF1Y0dGbmFXNWhkR2x2YmtOdmJuUmhhVzVsY2k1aFpHUkRiR0Z6Y3loVUxuQmhjbUZ0Y3k1d1lXZHBibUYwYVc5dVRXOWthV1pwWlhKRGJHRnpjeXRjSW1Oc2FXTnJZV0pzWlZ3aUtUcFVMbkJoY21GdGN5NXdZV2RwYm1GMGFXOXVRMnhwWTJ0aFlteGxQU0V4TEZRdWNHRm5hVzVoZEdsdmJrTnZiblJoYVc1bGNpNWhaR1JEYkdGemN5aFVMbkJoY21GdGN5NXdZV2RwYm1GMGFXOXVUVzlrYVdacFpYSkRiR0Z6Y3l0VUxuQmhjbUZ0Y3k1d1lXZHBibUYwYVc5dVZIbHdaU2twTENoVUxuQmhjbUZ0Y3k1dVpYaDBRblYwZEc5dWZIeFVMbkJoY21GdGN5NXdjbVYyUW5WMGRHOXVLU1ltS0ZRdWNHRnlZVzF6TG01bGVIUkNkWFIwYjI0bUppaFVMbTVsZUhSQ2RYUjBiMjQ5WlNoVUxuQmhjbUZ0Y3k1dVpYaDBRblYwZEc5dUtTeFVMbkJoY21GdGN5NTFibWx4ZFdWT1lYWkZiR1Z0Wlc1MGN5WW1YQ0p6ZEhKcGJtZGNJajA5ZEhsd1pXOW1JRlF1Y0dGeVlXMXpMbTVsZUhSQ2RYUjBiMjRtSmxRdWJtVjRkRUoxZEhSdmJpNXNaVzVuZEdnK01TWW1NVDA5UFZRdVkyOXVkR0ZwYm1WeUxtWnBibVFvVkM1d1lYSmhiWE11Ym1WNGRFSjFkSFJ2YmlrdWJHVnVaM1JvSmlZb1ZDNXVaWGgwUW5WMGRHOXVQVlF1WTI5dWRHRnBibVZ5TG1acGJtUW9WQzV3WVhKaGJYTXVibVY0ZEVKMWRIUnZiaWtwS1N4VUxuQmhjbUZ0Y3k1d2NtVjJRblYwZEc5dUppWW9WQzV3Y21WMlFuVjBkRzl1UFdVb1ZDNXdZWEpoYlhNdWNISmxka0oxZEhSdmJpa3NWQzV3WVhKaGJYTXVkVzVwY1hWbFRtRjJSV3hsYldWdWRITW1KbHdpYzNSeWFXNW5YQ0k5UFhSNWNHVnZaaUJVTG5CaGNtRnRjeTV3Y21WMlFuVjBkRzl1SmlaVUxuQnlaWFpDZFhSMGIyNHViR1Z1WjNSb1BqRW1KakU5UFQxVUxtTnZiblJoYVc1bGNpNW1hVzVrS0ZRdWNHRnlZVzF6TG5CeVpYWkNkWFIwYjI0cExteGxibWQwYUNZbUtGUXVjSEpsZGtKMWRIUnZiajFVTG1OdmJuUmhhVzVsY2k1bWFXNWtLRlF1Y0dGeVlXMXpMbkJ5WlhaQ2RYUjBiMjRwS1NrcExGUXVhWE5JYjNKcGVtOXVkR0ZzUFdaMWJtTjBhVzl1S0NsN2NtVjBkWEp1WENKb2IzSnBlbTl1ZEdGc1hDSTlQVDFVTG5CaGNtRnRjeTVrYVhKbFkzUnBiMjU5TEZRdWNuUnNQVlF1YVhOSWIzSnBlbTl1ZEdGc0tDa21KaWhjSW5KMGJGd2lQVDA5VkM1amIyNTBZV2x1WlhKYk1GMHVaR2x5TG5SdlRHOTNaWEpEWVhObEtDbDhmRndpY25Sc1hDSTlQVDFVTG1OdmJuUmhhVzVsY2k1amMzTW9YQ0prYVhKbFkzUnBiMjVjSWlrcExGUXVjblJzSmlaVUxtTnNZWE56VG1GdFpYTXVjSFZ6YUNoVUxuQmhjbUZ0Y3k1amIyNTBZV2x1WlhKTmIyUnBabWxsY2tOc1lYTnpLMXdpY25Sc1hDSXBMRlF1Y25Sc0ppWW9WQzUzY205dVoxSlVURDFjSWkxM1pXSnJhWFF0WW05NFhDSTlQVDFVTG5keVlYQndaWEl1WTNOektGd2laR2x6Y0d4aGVWd2lLU2tzVkM1d1lYSmhiWE11YzJ4cFpHVnpVR1Z5UTI5c2RXMXVQakVtSmxRdVkyeGhjM05PWVcxbGN5NXdkWE5vS0ZRdWNHRnlZVzF6TG1OdmJuUmhhVzVsY2sxdlpHbG1hV1Z5UTJ4aGMzTXJYQ0p0ZFd4MGFYSnZkMXdpS1N4VUxtUmxkbWxqWlM1aGJtUnliMmxrSmlaVUxtTnNZWE56VG1GdFpYTXVjSFZ6YUNoVUxuQmhjbUZ0Y3k1amIyNTBZV2x1WlhKTmIyUnBabWxsY2tOc1lYTnpLMXdpWVc1a2NtOXBaRndpS1N4VUxtTnZiblJoYVc1bGNpNWhaR1JEYkdGemN5aFVMbU5zWVhOelRtRnRaWE11YW05cGJpaGNJaUJjSWlrcExGUXVkSEpoYm5Oc1lYUmxQVEFzVkM1d2NtOW5jbVZ6Y3owd0xGUXVkbVZzYjJOcGRIazlNQ3hVTG14dlkydFRkMmx3WlZSdlRtVjRkRDFtZFc1amRHbHZiaWdwZTFRdWNHRnlZVzF6TG1Gc2JHOTNVM2RwY0dWVWIwNWxlSFE5SVRFc1ZDNXdZWEpoYlhNdVlXeHNiM2RUZDJsd1pWUnZVSEpsZGowOVBTRXhKaVpVTG5CaGNtRnRjeTVuY21GaVEzVnljMjl5SmlaVUxuVnVjMlYwUjNKaFlrTjFjbk52Y2lncGZTeFVMbXh2WTJ0VGQybHdaVlJ2VUhKbGRqMW1kVzVqZEdsdmJpZ3BlMVF1Y0dGeVlXMXpMbUZzYkc5M1UzZHBjR1ZVYjFCeVpYWTlJVEVzVkM1d1lYSmhiWE11WVd4c2IzZFRkMmx3WlZSdlRtVjRkRDA5UFNFeEppWlVMbkJoY21GdGN5NW5jbUZpUTNWeWMyOXlKaVpVTG5WdWMyVjBSM0poWWtOMWNuTnZjaWdwZlN4VUxteHZZMnRUZDJsd1pYTTlablZ1WTNScGIyNG9LWHRVTG5CaGNtRnRjeTVoYkd4dmQxTjNhWEJsVkc5T1pYaDBQVlF1Y0dGeVlXMXpMbUZzYkc5M1UzZHBjR1ZVYjFCeVpYWTlJVEVzVkM1d1lYSmhiWE11WjNKaFlrTjFjbk52Y2lZbVZDNTFibk5sZEVkeVlXSkRkWEp6YjNJb0tYMHNWQzUxYm14dlkydFRkMmx3WlZSdlRtVjRkRDFtZFc1amRHbHZiaWdwZTFRdWNHRnlZVzF6TG1Gc2JHOTNVM2RwY0dWVWIwNWxlSFE5SVRBc1ZDNXdZWEpoYlhNdVlXeHNiM2RUZDJsd1pWUnZVSEpsZGowOVBTRXdKaVpVTG5CaGNtRnRjeTVuY21GaVEzVnljMjl5SmlaVUxuTmxkRWR5WVdKRGRYSnpiM0lvS1gwc1ZDNTFibXh2WTJ0VGQybHdaVlJ2VUhKbGRqMW1kVzVqZEdsdmJpZ3BlMVF1Y0dGeVlXMXpMbUZzYkc5M1UzZHBjR1ZVYjFCeVpYWTlJVEFzVkM1d1lYSmhiWE11WVd4c2IzZFRkMmx3WlZSdlRtVjRkRDA5UFNFd0ppWlVMbkJoY21GdGN5NW5jbUZpUTNWeWMyOXlKaVpVTG5ObGRFZHlZV0pEZFhKemIzSW9LWDBzVkM1MWJteHZZMnRUZDJsd1pYTTlablZ1WTNScGIyNG9LWHRVTG5CaGNtRnRjeTVoYkd4dmQxTjNhWEJsVkc5T1pYaDBQVlF1Y0dGeVlXMXpMbUZzYkc5M1UzZHBjR1ZVYjFCeVpYWTlJVEFzVkM1d1lYSmhiWE11WjNKaFlrTjFjbk52Y2lZbVZDNXpaWFJIY21GaVEzVnljMjl5S0NsOUxGUXVjMlYwUjNKaFlrTjFjbk52Y2oxbWRXNWpkR2x2YmlobEtYdFVMbU52Ym5SaGFXNWxjbHN3WFM1emRIbHNaUzVqZFhKemIzSTlYQ0p0YjNabFhDSXNWQzVqYjI1MFlXbHVaWEpiTUYwdWMzUjViR1V1WTNWeWMyOXlQV1UvWENJdGQyVmlhMmwwTFdkeVlXSmlhVzVuWENJNlhDSXRkMlZpYTJsMExXZHlZV0pjSWl4VUxtTnZiblJoYVc1bGNsc3dYUzV6ZEhsc1pTNWpkWEp6YjNJOVpUOWNJaTF0YjNvdFozSmhZbUpwYmx3aU9sd2lMVzF2ZWkxbmNtRmlYQ0lzVkM1amIyNTBZV2x1WlhKYk1GMHVjM1I1YkdVdVkzVnljMjl5UFdVL1hDSm5jbUZpWW1sdVoxd2lPbHdpWjNKaFlsd2lmU3hVTG5WdWMyVjBSM0poWWtOMWNuTnZjajFtZFc1amRHbHZiaWdwZTFRdVkyOXVkR0ZwYm1WeVd6QmRMbk4wZVd4bExtTjFjbk52Y2oxY0lsd2lmU3hVTG5CaGNtRnRjeTVuY21GaVEzVnljMjl5SmlaVUxuTmxkRWR5WVdKRGRYSnpiM0lvS1N4VUxtbHRZV2RsYzFSdlRHOWhaRDFiWFN4VUxtbHRZV2RsYzB4dllXUmxaRDB3TEZRdWJHOWhaRWx0WVdkbFBXWjFibU4wYVc5dUtHVXNZU3gwTEhNc2FTeHlLWHRtZFc1amRHbHZiaUJ1S0NsN2NpWW1jaWdwZlhaaGNpQnZPMlV1WTI5dGNHeGxkR1VtSm1rL2JpZ3BPbUUvS0c4OWJtVjNJSGRwYm1SdmR5NUpiV0ZuWlN4dkxtOXViRzloWkQxdUxHOHViMjVsY25KdmNqMXVMSE1tSmlodkxuTnBlbVZ6UFhNcExIUW1KaWh2TG5OeVkzTmxkRDEwS1N4aEppWW9ieTV6Y21NOVlTa3BPbTRvS1gwc1ZDNXdjbVZzYjJGa1NXMWhaMlZ6UFdaMWJtTjBhVzl1S0NsN1puVnVZM1JwYjI0Z1pTZ3BlM1p2YVdRZ01DRTlQVlFtSm01MWJHd2hQVDFVSmlaVUppWW9kbTlwWkNBd0lUMDlWQzVwYldGblpYTk1iMkZrWldRbUpsUXVhVzFoWjJWelRHOWhaR1ZrS3lzc1ZDNXBiV0ZuWlhOTWIyRmtaV1E5UFQxVUxtbHRZV2RsYzFSdlRHOWhaQzVzWlc1bmRHZ21KaWhVTG5CaGNtRnRjeTUxY0dSaGRHVlBia2x0WVdkbGMxSmxZV1I1SmlaVUxuVndaR0YwWlNncExGUXVaVzFwZENoY0ltOXVTVzFoWjJWelVtVmhaSGxjSWl4VUtTa3BmVlF1YVcxaFoyVnpWRzlNYjJGa1BWUXVZMjl1ZEdGcGJtVnlMbVpwYm1Rb1hDSnBiV2RjSWlrN1ptOXlLSFpoY2lCaFBUQTdZVHhVTG1sdFlXZGxjMVJ2VEc5aFpDNXNaVzVuZEdnN1lTc3JLVlF1Ykc5aFpFbHRZV2RsS0ZRdWFXMWhaMlZ6Vkc5TWIyRmtXMkZkTEZRdWFXMWhaMlZ6Vkc5TWIyRmtXMkZkTG1OMWNuSmxiblJUY21OOGZGUXVhVzFoWjJWelZHOU1iMkZrVzJGZExtZGxkRUYwZEhKcFluVjBaU2hjSW5OeVkxd2lLU3hVTG1sdFlXZGxjMVJ2VEc5aFpGdGhYUzV6Y21OelpYUjhmRlF1YVcxaFoyVnpWRzlNYjJGa1cyRmRMbWRsZEVGMGRISnBZblYwWlNoY0luTnlZM05sZEZ3aUtTeFVMbWx0WVdkbGMxUnZURzloWkZ0aFhTNXphWHBsYzN4OFZDNXBiV0ZuWlhOVWIweHZZV1JiWVYwdVoyVjBRWFIwY21saWRYUmxLRndpYzJsNlpYTmNJaWtzSVRBc1pTbDlMRlF1WVhWMGIzQnNZWGxVYVcxbGIzVjBTV1E5ZG05cFpDQXdMRlF1WVhWMGIzQnNZWGxwYm1jOUlURXNWQzVoZFhSdmNHeGhlVkJoZFhObFpEMGhNU3hVTG5OMFlYSjBRWFYwYjNCc1lYazlablZ1WTNScGIyNG9LWHR5WlhSMWNtNGdkbTlwWkNBd1BUMDlWQzVoZFhSdmNHeGhlVlJwYldWdmRYUkpaQ1ltS0NFaFZDNXdZWEpoYlhNdVlYVjBiM0JzWVhrbUppZ2hWQzVoZFhSdmNHeGhlV2x1WnlZbUtGUXVZWFYwYjNCc1lYbHBibWM5SVRBc1ZDNWxiV2wwS0Z3aWIyNUJkWFJ2Y0d4aGVWTjBZWEowWENJc1ZDa3NkbTlwWkNCdUtDa3BLU2w5TEZRdWMzUnZjRUYxZEc5d2JHRjVQV1oxYm1OMGFXOXVLR1VwZTFRdVlYVjBiM0JzWVhsVWFXMWxiM1YwU1dRbUppaFVMbUYxZEc5d2JHRjVWR2x0Wlc5MWRFbGtKaVpqYkdWaGNsUnBiV1Z2ZFhRb1ZDNWhkWFJ2Y0d4aGVWUnBiV1Z2ZFhSSlpDa3NWQzVoZFhSdmNHeGhlV2x1WnowaE1TeFVMbUYxZEc5d2JHRjVWR2x0Wlc5MWRFbGtQWFp2YVdRZ01DeFVMbVZ0YVhRb1hDSnZia0YxZEc5d2JHRjVVM1J2Y0Z3aUxGUXBLWDBzVkM1d1lYVnpaVUYxZEc5d2JHRjVQV1oxYm1OMGFXOXVLR1VwZTFRdVlYVjBiM0JzWVhsUVlYVnpaV1I4ZkNoVUxtRjFkRzl3YkdGNVZHbHRaVzkxZEVsa0ppWmpiR1ZoY2xScGJXVnZkWFFvVkM1aGRYUnZjR3hoZVZScGJXVnZkWFJKWkNrc1ZDNWhkWFJ2Y0d4aGVWQmhkWE5sWkQwaE1Dd3dQVDA5WlQ4b1ZDNWhkWFJ2Y0d4aGVWQmhkWE5sWkQwaE1TeHVLQ2twT2xRdWQzSmhjSEJsY2k1MGNtRnVjMmwwYVc5dVJXNWtLR1oxYm1OMGFXOXVLQ2w3VkNZbUtGUXVZWFYwYjNCc1lYbFFZWFZ6WldROUlURXNWQzVoZFhSdmNHeGhlV2x1Wno5dUtDazZWQzV6ZEc5d1FYVjBiM0JzWVhrb0tTbDlLU2w5TEZRdWJXbHVWSEpoYm5Oc1lYUmxQV1oxYm1OMGFXOXVLQ2w3Y21WMGRYSnVMVlF1YzI1aGNFZHlhV1JiTUYxOUxGUXViV0Y0VkhKaGJuTnNZWFJsUFdaMWJtTjBhVzl1S0NsN2NtVjBkWEp1TFZRdWMyNWhjRWR5YVdSYlZDNXpibUZ3UjNKcFpDNXNaVzVuZEdndE1WMTlMRlF1ZFhCa1lYUmxRWFYwYjBobGFXZG9kRDFtZFc1amRHbHZiaWdwZTNaaGNpQmxMR0U5VzEwc2REMHdPMmxtS0Z3aVlYVjBiMXdpSVQwOVZDNXdZWEpoYlhNdWMyeHBaR1Z6VUdWeVZtbGxkeVltVkM1d1lYSmhiWE11YzJ4cFpHVnpVR1Z5Vm1sbGR6NHhLV1p2Y2lobFBUQTdaVHhOWVhSb0xtTmxhV3dvVkM1d1lYSmhiWE11YzJ4cFpHVnpVR1Z5Vm1sbGR5azdaU3NyS1h0MllYSWdjejFVTG1GamRHbDJaVWx1WkdWNEsyVTdhV1lvY3o1VUxuTnNhV1JsY3k1c1pXNW5kR2dwWW5KbFlXczdZUzV3ZFhOb0tGUXVjMnhwWkdWekxtVnhLSE1wV3pCZEtYMWxiSE5sSUdFdWNIVnphQ2hVTG5Oc2FXUmxjeTVsY1NoVUxtRmpkR2wyWlVsdVpHVjRLVnN3WFNrN1ptOXlLR1U5TUR0bFBHRXViR1Z1WjNSb08yVXJLeWxwWmloMmIybGtJREFoUFQxaFcyVmRLWHQyWVhJZ2FUMWhXMlZkTG05bVpuTmxkRWhsYVdkb2REdDBQV2srZEQ5cE9uUjlkQ1ltVkM1M2NtRndjR1Z5TG1OemN5aGNJbWhsYVdkb2RGd2lMSFFyWENKd2VGd2lLWDBzVkM1MWNHUmhkR1ZEYjI1MFlXbHVaWEpUYVhwbFBXWjFibU4wYVc5dUtDbDdkbUZ5SUdVc1lUdGxQWFp2YVdRZ01DRTlQVlF1Y0dGeVlXMXpMbmRwWkhSb1AxUXVjR0Z5WVcxekxuZHBaSFJvT2xRdVkyOXVkR0ZwYm1WeVd6QmRMbU5zYVdWdWRGZHBaSFJvTEdFOWRtOXBaQ0F3SVQwOVZDNXdZWEpoYlhNdWFHVnBaMmgwUDFRdWNHRnlZVzF6TG1obGFXZG9kRHBVTG1OdmJuUmhhVzVsY2xzd1hTNWpiR2xsYm5SSVpXbG5hSFFzTUQwOVBXVW1KbFF1YVhOSWIzSnBlbTl1ZEdGc0tDbDhmREE5UFQxaEppWWhWQzVwYzBodmNtbDZiMjUwWVd3b0tYeDhLR1U5WlMxd1lYSnpaVWx1ZENoVUxtTnZiblJoYVc1bGNpNWpjM01vWENKd1lXUmthVzVuTFd4bFpuUmNJaWtzTVRBcExYQmhjbk5sU1c1MEtGUXVZMjl1ZEdGcGJtVnlMbU56Y3loY0luQmhaR1JwYm1jdGNtbG5hSFJjSWlrc01UQXBMR0U5WVMxd1lYSnpaVWx1ZENoVUxtTnZiblJoYVc1bGNpNWpjM01vWENKd1lXUmthVzVuTFhSdmNGd2lLU3d4TUNrdGNHRnljMlZKYm5Rb1ZDNWpiMjUwWVdsdVpYSXVZM056S0Z3aWNHRmtaR2x1WnkxaWIzUjBiMjFjSWlrc01UQXBMRlF1ZDJsa2RHZzlaU3hVTG1obGFXZG9kRDFoTEZRdWMybDZaVDFVTG1selNHOXlhWHB2Ym5SaGJDZ3BQMVF1ZDJsa2RHZzZWQzVvWldsbmFIUXBmU3hVTG5Wd1pHRjBaVk5zYVdSbGMxTnBlbVU5Wm5WdVkzUnBiMjRvS1h0VUxuTnNhV1JsY3oxVUxuZHlZWEJ3WlhJdVkyaHBiR1J5Wlc0b1hDSXVYQ0lyVkM1d1lYSmhiWE11YzJ4cFpHVkRiR0Z6Y3lrc1ZDNXpibUZ3UjNKcFpEMWJYU3hVTG5Oc2FXUmxjMGR5YVdROVcxMHNWQzV6Ykdsa1pYTlRhWHBsYzBkeWFXUTlXMTA3ZG1GeUlHVXNZVDFVTG5CaGNtRnRjeTV6Y0dGalpVSmxkSGRsWlc0c2REMHRWQzV3WVhKaGJYTXVjMnhwWkdWelQyWm1jMlYwUW1WbWIzSmxMSE05TUN4cFBUQTdhV1lvZG05cFpDQXdJVDA5VkM1emFYcGxLWHRjSW5OMGNtbHVaMXdpUFQxMGVYQmxiMllnWVNZbVlTNXBibVJsZUU5bUtGd2lKVndpS1Q0OU1DWW1LR0U5Y0dGeWMyVkdiRzloZENoaExuSmxjR3hoWTJVb1hDSWxYQ0lzWENKY0lpa3BMekV3TUNwVUxuTnBlbVVwTEZRdWRtbHlkSFZoYkZOcGVtVTlMV0VzVkM1eWRHdy9WQzV6Ykdsa1pYTXVZM056S0h0dFlYSm5hVzVNWldaME9sd2lYQ0lzYldGeVoybHVWRzl3T2x3aVhDSjlLVHBVTG5Oc2FXUmxjeTVqYzNNb2UyMWhjbWRwYmxKcFoyaDBPbHdpWENJc2JXRnlaMmx1UW05MGRHOXRPbHdpWENKOUtUdDJZWElnYmp0VUxuQmhjbUZ0Y3k1emJHbGtaWE5RWlhKRGIyeDFiVzQrTVNZbUtHNDlUV0YwYUM1bWJHOXZjaWhVTG5Oc2FXUmxjeTVzWlc1bmRHZ3ZWQzV3WVhKaGJYTXVjMnhwWkdWelVHVnlRMjlzZFcxdUtUMDlQVlF1YzJ4cFpHVnpMbXhsYm1kMGFDOVVMbkJoY21GdGN5NXpiR2xrWlhOUVpYSkRiMngxYlc0L1ZDNXpiR2xrWlhNdWJHVnVaM1JvT2sxaGRHZ3VZMlZwYkNoVUxuTnNhV1JsY3k1c1pXNW5kR2d2VkM1d1lYSmhiWE11YzJ4cFpHVnpVR1Z5UTI5c2RXMXVLU3BVTG5CaGNtRnRjeTV6Ykdsa1pYTlFaWEpEYjJ4MWJXNHNYQ0poZFhSdlhDSWhQVDFVTG5CaGNtRnRjeTV6Ykdsa1pYTlFaWEpXYVdWM0ppWmNJbkp2ZDF3aVBUMDlWQzV3WVhKaGJYTXVjMnhwWkdWelVHVnlRMjlzZFcxdVJtbHNiQ1ltS0c0OVRXRjBhQzV0WVhnb2JpeFVMbkJoY21GdGN5NXpiR2xrWlhOUVpYSldhV1YzS2xRdWNHRnlZVzF6TG5Oc2FXUmxjMUJsY2tOdmJIVnRiaWtwS1R0MllYSWdieXhzUFZRdWNHRnlZVzF6TG5Oc2FXUmxjMUJsY2tOdmJIVnRiaXh3UFc0dmJDeGtQWEF0S0ZRdWNHRnlZVzF6TG5Oc2FXUmxjMUJsY2tOdmJIVnRiaXB3TFZRdWMyeHBaR1Z6TG14bGJtZDBhQ2s3Wm05eUtHVTlNRHRsUEZRdWMyeHBaR1Z6TG14bGJtZDBhRHRsS3lzcGUyODlNRHQyWVhJZ2RUMVVMbk5zYVdSbGN5NWxjU2hsS1R0cFppaFVMbkJoY21GdGN5NXpiR2xrWlhOUVpYSkRiMngxYlc0K01TbDdkbUZ5SUdNc2JTeG9PMXdpWTI5c2RXMXVYQ0k5UFQxVUxuQmhjbUZ0Y3k1emJHbGtaWE5RWlhKRGIyeDFiVzVHYVd4c1B5aHRQVTFoZEdndVpteHZiM0lvWlM5c0tTeG9QV1V0YlNwc0xDaHRQbVI4ZkcwOVBUMWtKaVpvUFQwOWJDMHhLU1ltS3l0b1BqMXNKaVlvYUQwd0xHMHJLeWtzWXoxdEsyZ3FiaTlzTEhVdVkzTnpLSHRjSWkxM1pXSnJhWFF0WW05NExXOXlaR2x1WVd3dFozSnZkWEJjSWpwakxGd2lMVzF2ZWkxaWIzZ3RiM0prYVc1aGJDMW5jbTkxY0Z3aU9tTXNYQ0l0YlhNdFpteGxlQzF2Y21SbGNsd2lPbU1zWENJdGQyVmlhMmwwTFc5eVpHVnlYQ0k2WXl4dmNtUmxjanBqZlNrcE9paG9QVTFoZEdndVpteHZiM0lvWlM5d0tTeHRQV1V0YUNwd0tTeDFMbU56Y3loY0ltMWhjbWRwYmkxY0lpc29WQzVwYzBodmNtbDZiMjUwWVd3b0tUOWNJblJ2Y0Z3aU9sd2liR1ZtZEZ3aUtTd3dJVDA5YUNZbVZDNXdZWEpoYlhNdWMzQmhZMlZDWlhSM1pXVnVKaVpVTG5CaGNtRnRjeTV6Y0dGalpVSmxkSGRsWlc0clhDSndlRndpS1M1aGRIUnlLRndpWkdGMFlTMXpkMmx3WlhJdFkyOXNkVzF1WENJc2JTa3VZWFIwY2loY0ltUmhkR0V0YzNkcGNHVnlMWEp2ZDF3aUxHZ3BmVndpYm05dVpWd2lJVDA5ZFM1amMzTW9YQ0prYVhOd2JHRjVYQ0lwSmlZb1hDSmhkWFJ2WENJOVBUMVVMbkJoY21GdGN5NXpiR2xrWlhOUVpYSldhV1YzUHlodlBWUXVhWE5JYjNKcGVtOXVkR0ZzS0NrL2RTNXZkWFJsY2xkcFpIUm9LQ0V3S1RwMUxtOTFkR1Z5U0dWcFoyaDBLQ0V3S1N4VUxuQmhjbUZ0Y3k1eWIzVnVaRXhsYm1kMGFITW1KaWh2UFhJb2J5a3BLVG9vYnowb1ZDNXphWHBsTFNoVUxuQmhjbUZ0Y3k1emJHbGtaWE5RWlhKV2FXVjNMVEVwS21FcEwxUXVjR0Z5WVcxekxuTnNhV1JsYzFCbGNsWnBaWGNzVkM1d1lYSmhiWE11Y205MWJtUk1aVzVuZEdoekppWW9iejF5S0c4cEtTeFVMbWx6U0c5eWFYcHZiblJoYkNncFAxUXVjMnhwWkdWelcyVmRMbk4wZVd4bExuZHBaSFJvUFc4clhDSndlRndpT2xRdWMyeHBaR1Z6VzJWZExuTjBlV3hsTG1obGFXZG9kRDF2SzF3aWNIaGNJaWtzVkM1emJHbGtaWE5iWlYwdWMzZHBjR1Z5VTJ4cFpHVlRhWHBsUFc4c1ZDNXpiR2xrWlhOVGFYcGxjMGR5YVdRdWNIVnphQ2h2S1N4VUxuQmhjbUZ0Y3k1alpXNTBaWEpsWkZOc2FXUmxjejhvZEQxMEsyOHZNaXR6THpJcllTd3dQVDA5Y3lZbU1DRTlQV1VtSmloMFBYUXRWQzV6YVhwbEx6SXRZU2tzTUQwOVBXVW1KaWgwUFhRdFZDNXphWHBsTHpJdFlTa3NUV0YwYUM1aFluTW9kQ2s4TGpBd01TWW1LSFE5TUNrc2FTVlVMbkJoY21GdGN5NXpiR2xrWlhOUVpYSkhjbTkxY0QwOU1DWW1WQzV6Ym1Gd1IzSnBaQzV3ZFhOb0tIUXBMRlF1YzJ4cFpHVnpSM0pwWkM1d2RYTm9LSFFwS1Rvb2FTVlVMbkJoY21GdGN5NXpiR2xrWlhOUVpYSkhjbTkxY0QwOU1DWW1WQzV6Ym1Gd1IzSnBaQzV3ZFhOb0tIUXBMRlF1YzJ4cFpHVnpSM0pwWkM1d2RYTm9LSFFwTEhROWRDdHZLMkVwTEZRdWRtbHlkSFZoYkZOcGVtVXJQVzhyWVN4elBXOHNhU3NyS1gxVUxuWnBjblIxWVd4VGFYcGxQVTFoZEdndWJXRjRLRlF1ZG1seWRIVmhiRk5wZW1Vc1ZDNXphWHBsS1N0VUxuQmhjbUZ0Y3k1emJHbGtaWE5QWm1aelpYUkJablJsY2p0MllYSWdaenRwWmloVUxuSjBiQ1ltVkM1M2NtOXVaMUpVVENZbUtGd2ljMnhwWkdWY0lqMDlQVlF1Y0dGeVlXMXpMbVZtWm1WamRIeDhYQ0pqYjNabGNtWnNiM2RjSWowOVBWUXVjR0Z5WVcxekxtVm1abVZqZENrbUpsUXVkM0poY0hCbGNpNWpjM01vZTNkcFpIUm9PbFF1ZG1seWRIVmhiRk5wZW1VclZDNXdZWEpoYlhNdWMzQmhZMlZDWlhSM1pXVnVLMXdpY0hoY0luMHBMRlF1YzNWd2NHOXlkQzVtYkdWNFltOTRKaVloVkM1d1lYSmhiWE11YzJWMFYzSmhjSEJsY2xOcGVtVjhmQ2hVTG1selNHOXlhWHB2Ym5SaGJDZ3BQMVF1ZDNKaGNIQmxjaTVqYzNNb2UzZHBaSFJvT2xRdWRtbHlkSFZoYkZOcGVtVXJWQzV3WVhKaGJYTXVjM0JoWTJWQ1pYUjNaV1Z1SzF3aWNIaGNJbjBwT2xRdWQzSmhjSEJsY2k1amMzTW9lMmhsYVdkb2REcFVMblpwY25SMVlXeFRhWHBsSzFRdWNHRnlZVzF6TG5Od1lXTmxRbVYwZDJWbGJpdGNJbkI0WENKOUtTa3NWQzV3WVhKaGJYTXVjMnhwWkdWelVHVnlRMjlzZFcxdVBqRW1KaWhVTG5acGNuUjFZV3hUYVhwbFBTaHZLMVF1Y0dGeVlXMXpMbk53WVdObFFtVjBkMlZsYmlrcWJpeFVMblpwY25SMVlXeFRhWHBsUFUxaGRHZ3VZMlZwYkNoVUxuWnBjblIxWVd4VGFYcGxMMVF1Y0dGeVlXMXpMbk5zYVdSbGMxQmxja052YkhWdGJpa3RWQzV3WVhKaGJYTXVjM0JoWTJWQ1pYUjNaV1Z1TEZRdWFYTkliM0pwZW05dWRHRnNLQ2svVkM1M2NtRndjR1Z5TG1OemN5aDdkMmxrZEdnNlZDNTJhWEowZFdGc1UybDZaU3RVTG5CaGNtRnRjeTV6Y0dGalpVSmxkSGRsWlc0clhDSndlRndpZlNrNlZDNTNjbUZ3Y0dWeUxtTnpjeWg3YUdWcFoyaDBPbFF1ZG1seWRIVmhiRk5wZW1VclZDNXdZWEpoYlhNdWMzQmhZMlZDWlhSM1pXVnVLMXdpY0hoY0luMHBMRlF1Y0dGeVlXMXpMbU5sYm5SbGNtVmtVMnhwWkdWektTbDdabTl5S0djOVcxMHNaVDB3TzJVOFZDNXpibUZ3UjNKcFpDNXNaVzVuZEdnN1pTc3JLVlF1YzI1aGNFZHlhV1JiWlYwOFZDNTJhWEowZFdGc1UybDZaU3RVTG5OdVlYQkhjbWxrV3pCZEppWm5MbkIxYzJnb1ZDNXpibUZ3UjNKcFpGdGxYU2s3VkM1emJtRndSM0pwWkQxbmZXbG1LQ0ZVTG5CaGNtRnRjeTVqWlc1MFpYSmxaRk5zYVdSbGN5bDdabTl5S0djOVcxMHNaVDB3TzJVOFZDNXpibUZ3UjNKcFpDNXNaVzVuZEdnN1pTc3JLVlF1YzI1aGNFZHlhV1JiWlYwOFBWUXVkbWx5ZEhWaGJGTnBlbVV0VkM1emFYcGxKaVpuTG5CMWMyZ29WQzV6Ym1Gd1IzSnBaRnRsWFNrN1ZDNXpibUZ3UjNKcFpEMW5MRTFoZEdndVpteHZiM0lvVkM1MmFYSjBkV0ZzVTJsNlpTMVVMbk5wZW1VcExVMWhkR2d1Wm14dmIzSW9WQzV6Ym1Gd1IzSnBaRnRVTG5OdVlYQkhjbWxrTG14bGJtZDBhQzB4WFNrK01TWW1WQzV6Ym1Gd1IzSnBaQzV3ZFhOb0tGUXVkbWx5ZEhWaGJGTnBlbVV0VkM1emFYcGxLWDB3UFQwOVZDNXpibUZ3UjNKcFpDNXNaVzVuZEdnbUppaFVMbk51WVhCSGNtbGtQVnN3WFNrc01DRTlQVlF1Y0dGeVlXMXpMbk53WVdObFFtVjBkMlZsYmlZbUtGUXVhWE5JYjNKcGVtOXVkR0ZzS0NrL1ZDNXlkR3cvVkM1emJHbGtaWE11WTNOektIdHRZWEpuYVc1TVpXWjBPbUVyWENKd2VGd2lmU2s2VkM1emJHbGtaWE11WTNOektIdHRZWEpuYVc1U2FXZG9kRHBoSzF3aWNIaGNJbjBwT2xRdWMyeHBaR1Z6TG1OemN5aDdiV0Z5WjJsdVFtOTBkRzl0T21FclhDSndlRndpZlNrcExGUXVjR0Z5WVcxekxuZGhkR05vVTJ4cFpHVnpVSEp2WjNKbGMzTW1KbFF1ZFhCa1lYUmxVMnhwWkdWelQyWm1jMlYwS0NsOWZTeFVMblZ3WkdGMFpWTnNhV1JsYzA5bVpuTmxkRDFtZFc1amRHbHZiaWdwZTJadmNpaDJZWElnWlQwd08yVThWQzV6Ykdsa1pYTXViR1Z1WjNSb08yVXJLeWxVTG5Oc2FXUmxjMXRsWFM1emQybHdaWEpUYkdsa1pVOW1abk5sZEQxVUxtbHpTRzl5YVhwdmJuUmhiQ2dwUDFRdWMyeHBaR1Z6VzJWZExtOW1abk5sZEV4bFpuUTZWQzV6Ykdsa1pYTmJaVjB1YjJabWMyVjBWRzl3ZlN4VUxtTjFjbkpsYm5SVGJHbGtaWE5RWlhKV2FXVjNQV1oxYm1OMGFXOXVLQ2w3ZG1GeUlHVXNZU3gwUFRFN2FXWW9WQzV3WVhKaGJYTXVZMlZ1ZEdWeVpXUlRiR2xrWlhNcGUzWmhjaUJ6TEdrOVZDNXpiR2xrWlhOYlZDNWhZM1JwZG1WSmJtUmxlRjB1YzNkcGNHVnlVMnhwWkdWVGFYcGxPMlp2Y2lobFBWUXVZV04wYVhabFNXNWtaWGdyTVR0bFBGUXVjMnhwWkdWekxteGxibWQwYUR0bEt5c3BWQzV6Ykdsa1pYTmJaVjBtSmlGekppWW9hU3M5VkM1emJHbGtaWE5iWlYwdWMzZHBjR1Z5VTJ4cFpHVlRhWHBsTEhRckt5eHBQbFF1YzJsNlpTWW1LSE05SVRBcEtUdG1iM0lvWVQxVUxtRmpkR2wyWlVsdVpHVjRMVEU3WVQ0OU1EdGhMUzBwVkM1emJHbGtaWE5iWVYwbUppRnpKaVlvYVNzOVZDNXpiR2xrWlhOYllWMHVjM2RwY0dWeVUyeHBaR1ZUYVhwbExIUXJLeXhwUGxRdWMybDZaU1ltS0hNOUlUQXBLWDFsYkhObElHWnZjaWhsUFZRdVlXTjBhWFpsU1c1a1pYZ3JNVHRsUEZRdWMyeHBaR1Z6TG14bGJtZDBhRHRsS3lzcFZDNXpiR2xrWlhOSGNtbGtXMlZkTFZRdWMyeHBaR1Z6UjNKcFpGdFVMbUZqZEdsMlpVbHVaR1Y0WFR4VUxuTnBlbVVtSm5Rckt6dHlaWFIxY200Z2RIMHNWQzUxY0dSaGRHVlRiR2xrWlhOUWNtOW5jbVZ6Y3oxbWRXNWpkR2x2YmlobEtYdHBaaWgyYjJsa0lEQTlQVDFsSmlZb1pUMVVMblJ5WVc1emJHRjBaWHg4TUNrc01DRTlQVlF1YzJ4cFpHVnpMbXhsYm1kMGFDbDdkbTlwWkNBd1BUMDlWQzV6Ykdsa1pYTmJNRjB1YzNkcGNHVnlVMnhwWkdWUFptWnpaWFFtSmxRdWRYQmtZWFJsVTJ4cFpHVnpUMlptYzJWMEtDazdkbUZ5SUdFOUxXVTdWQzV5ZEd3bUppaGhQV1VwTEZRdWMyeHBaR1Z6TG5KbGJXOTJaVU5zWVhOektGUXVjR0Z5WVcxekxuTnNhV1JsVm1semFXSnNaVU5zWVhOektUdG1iM0lvZG1GeUlIUTlNRHQwUEZRdWMyeHBaR1Z6TG14bGJtZDBhRHQwS3lzcGUzWmhjaUJ6UFZRdWMyeHBaR1Z6VzNSZExHazlLR0VyS0ZRdWNHRnlZVzF6TG1ObGJuUmxjbVZrVTJ4cFpHVnpQMVF1YldsdVZISmhibk5zWVhSbEtDazZNQ2t0Y3k1emQybHdaWEpUYkdsa1pVOW1abk5sZENrdktITXVjM2RwY0dWeVUyeHBaR1ZUYVhwbEsxUXVjR0Z5WVcxekxuTndZV05sUW1WMGQyVmxiaWs3YVdZb1ZDNXdZWEpoYlhNdWQyRjBZMmhUYkdsa1pYTldhWE5wWW1sc2FYUjVLWHQyWVhJZ2NqMHRLR0V0Y3k1emQybHdaWEpUYkdsa1pVOW1abk5sZENrc2JqMXlLMVF1YzJ4cFpHVnpVMmw2WlhOSGNtbGtXM1JkT3loeVBqMHdKaVp5UEZRdWMybDZaWHg4Ymo0d0ppWnVQRDFVTG5OcGVtVjhmSEk4UFRBbUptNCtQVlF1YzJsNlpTa21KbFF1YzJ4cFpHVnpMbVZ4S0hRcExtRmtaRU5zWVhOektGUXVjR0Z5WVcxekxuTnNhV1JsVm1semFXSnNaVU5zWVhOektYMXpMbkJ5YjJkeVpYTnpQVlF1Y25Sc1B5MXBPbWw5Zlgwc1ZDNTFjR1JoZEdWUWNtOW5jbVZ6Y3oxbWRXNWpkR2x2YmlobEtYdDJiMmxrSURBOVBUMWxKaVlvWlQxVUxuUnlZVzV6YkdGMFpYeDhNQ2s3ZG1GeUlHRTlWQzV0WVhoVWNtRnVjMnhoZEdVb0tTMVVMbTFwYmxSeVlXNXpiR0YwWlNncExIUTlWQzVwYzBKbFoybHVibWx1Wnl4elBWUXVhWE5GYm1RN01EMDlQV0UvS0ZRdWNISnZaM0psYzNNOU1DeFVMbWx6UW1WbmFXNXVhVzVuUFZRdWFYTkZibVE5SVRBcE9paFVMbkJ5YjJkeVpYTnpQU2hsTFZRdWJXbHVWSEpoYm5Oc1lYUmxLQ2twTDJFc1ZDNXBjMEpsWjJsdWJtbHVaejFVTG5CeWIyZHlaWE56UEQwd0xGUXVhWE5GYm1ROVZDNXdjbTluY21WemN6NDlNU2tzVkM1cGMwSmxaMmx1Ym1sdVp5WW1JWFFtSmxRdVpXMXBkQ2hjSW05dVVtVmhZMmhDWldkcGJtNXBibWRjSWl4VUtTeFVMbWx6Ulc1a0ppWWhjeVltVkM1bGJXbDBLRndpYjI1U1pXRmphRVZ1WkZ3aUxGUXBMRlF1Y0dGeVlXMXpMbmRoZEdOb1UyeHBaR1Z6VUhKdlozSmxjM01tSmxRdWRYQmtZWFJsVTJ4cFpHVnpVSEp2WjNKbGMzTW9aU2tzVkM1bGJXbDBLRndpYjI1UWNtOW5jbVZ6YzF3aUxGUXNWQzV3Y205bmNtVnpjeWw5TEZRdWRYQmtZWFJsUVdOMGFYWmxTVzVrWlhnOVpuVnVZM1JwYjI0b0tYdDJZWElnWlN4aExIUXNjejFVTG5KMGJEOVVMblJ5WVc1emJHRjBaVG90VkM1MGNtRnVjMnhoZEdVN1ptOXlLR0U5TUR0aFBGUXVjMnhwWkdWelIzSnBaQzVzWlc1bmRHZzdZU3NyS1hadmFXUWdNQ0U5UFZRdWMyeHBaR1Z6UjNKcFpGdGhLekZkUDNNK1BWUXVjMnhwWkdWelIzSnBaRnRoWFNZbWN6eFVMbk5zYVdSbGMwZHlhV1JiWVNzeFhTMG9WQzV6Ykdsa1pYTkhjbWxrVzJFck1WMHRWQzV6Ykdsa1pYTkhjbWxrVzJGZEtTOHlQMlU5WVRwelBqMVVMbk5zYVdSbGMwZHlhV1JiWVYwbUpuTThWQzV6Ykdsa1pYTkhjbWxrVzJFck1WMG1KaWhsUFdFck1TazZjejQ5VkM1emJHbGtaWE5IY21sa1cyRmRKaVlvWlQxaEtUdFVMbkJoY21GdGN5NXViM0p0WVd4cGVtVlRiR2xrWlVsdVpHVjRKaVlvWlR3d2ZIeDJiMmxrSURBOVBUMWxLU1ltS0dVOU1Da3NkRDFOWVhSb0xtWnNiMjl5S0dVdlZDNXdZWEpoYlhNdWMyeHBaR1Z6VUdWeVIzSnZkWEFwTEhRK1BWUXVjMjVoY0VkeWFXUXViR1Z1WjNSb0ppWW9kRDFVTG5OdVlYQkhjbWxrTG14bGJtZDBhQzB4S1N4bElUMDlWQzVoWTNScGRtVkpibVJsZUNZbUtGUXVjMjVoY0VsdVpHVjRQWFFzVkM1d2NtVjJhVzkxYzBsdVpHVjRQVlF1WVdOMGFYWmxTVzVrWlhnc1ZDNWhZM1JwZG1WSmJtUmxlRDFsTEZRdWRYQmtZWFJsUTJ4aGMzTmxjeWdwTEZRdWRYQmtZWFJsVW1WaGJFbHVaR1Y0S0NrcGZTeFVMblZ3WkdGMFpWSmxZV3hKYm1SbGVEMW1kVzVqZEdsdmJpZ3BlMVF1Y21WaGJFbHVaR1Y0UFhCaGNuTmxTVzUwS0ZRdWMyeHBaR1Z6TG1WeEtGUXVZV04wYVhabFNXNWtaWGdwTG1GMGRISW9YQ0prWVhSaExYTjNhWEJsY2kxemJHbGtaUzFwYm1SbGVGd2lLWHg4VkM1aFkzUnBkbVZKYm1SbGVDd3hNQ2w5TEZRdWRYQmtZWFJsUTJ4aGMzTmxjejFtZFc1amRHbHZiaWdwZTFRdWMyeHBaR1Z6TG5KbGJXOTJaVU5zWVhOektGUXVjR0Z5WVcxekxuTnNhV1JsUVdOMGFYWmxRMnhoYzNNclhDSWdYQ0lyVkM1d1lYSmhiWE11YzJ4cFpHVk9aWGgwUTJ4aGMzTXJYQ0lnWENJclZDNXdZWEpoYlhNdWMyeHBaR1ZRY21WMlEyeGhjM01yWENJZ1hDSXJWQzV3WVhKaGJYTXVjMnhwWkdWRWRYQnNhV05oZEdWQlkzUnBkbVZEYkdGemN5dGNJaUJjSWl0VUxuQmhjbUZ0Y3k1emJHbGtaVVIxY0d4cFkyRjBaVTVsZUhSRGJHRnpjeXRjSWlCY0lpdFVMbkJoY21GdGN5NXpiR2xrWlVSMWNHeHBZMkYwWlZCeVpYWkRiR0Z6Y3lrN2RtRnlJR0U5VkM1emJHbGtaWE11WlhFb1ZDNWhZM1JwZG1WSmJtUmxlQ2s3WVM1aFpHUkRiR0Z6Y3loVUxuQmhjbUZ0Y3k1emJHbGtaVUZqZEdsMlpVTnNZWE56S1N4cExteHZiM0FtSmloaExtaGhjME5zWVhOektGUXVjR0Z5WVcxekxuTnNhV1JsUkhWd2JHbGpZWFJsUTJ4aGMzTXBQMVF1ZDNKaGNIQmxjaTVqYUdsc1pISmxiaWhjSWk1Y0lpdFVMbkJoY21GdGN5NXpiR2xrWlVOc1lYTnpLMXdpT201dmRDZ3VYQ0lyVkM1d1lYSmhiWE11YzJ4cFpHVkVkWEJzYVdOaGRHVkRiR0Z6Y3lzbktWdGtZWFJoTFhOM2FYQmxjaTF6Ykdsa1pTMXBibVJsZUQxY0lpY3JWQzV5WldGc1NXNWtaWGdySjF3aVhTY3BMbUZrWkVOc1lYTnpLRlF1Y0dGeVlXMXpMbk5zYVdSbFJIVndiR2xqWVhSbFFXTjBhWFpsUTJ4aGMzTXBPbFF1ZDNKaGNIQmxjaTVqYUdsc1pISmxiaWhjSWk1Y0lpdFVMbkJoY21GdGN5NXpiR2xrWlVOc1lYTnpLMXdpTGx3aUsxUXVjR0Z5WVcxekxuTnNhV1JsUkhWd2JHbGpZWFJsUTJ4aGMzTXJKMXRrWVhSaExYTjNhWEJsY2kxemJHbGtaUzFwYm1SbGVEMWNJaWNyVkM1eVpXRnNTVzVrWlhnckoxd2lYU2NwTG1Ga1pFTnNZWE56S0ZRdWNHRnlZVzF6TG5Oc2FXUmxSSFZ3YkdsallYUmxRV04wYVhabFEyeGhjM01wS1R0MllYSWdkRDFoTG01bGVIUW9YQ0l1WENJclZDNXdZWEpoYlhNdWMyeHBaR1ZEYkdGemN5a3VZV1JrUTJ4aGMzTW9WQzV3WVhKaGJYTXVjMnhwWkdWT1pYaDBRMnhoYzNNcE8xUXVjR0Z5WVcxekxteHZiM0FtSmpBOVBUMTBMbXhsYm1kMGFDWW1LSFE5VkM1emJHbGtaWE11WlhFb01Da3NkQzVoWkdSRGJHRnpjeWhVTG5CaGNtRnRjeTV6Ykdsa1pVNWxlSFJEYkdGemN5a3BPM1poY2lCelBXRXVjSEpsZGloY0lpNWNJaXRVTG5CaGNtRnRjeTV6Ykdsa1pVTnNZWE56S1M1aFpHUkRiR0Z6Y3loVUxuQmhjbUZ0Y3k1emJHbGtaVkJ5WlhaRGJHRnpjeWs3YVdZb1ZDNXdZWEpoYlhNdWJHOXZjQ1ltTUQwOVBYTXViR1Z1WjNSb0ppWW9jejFVTG5Oc2FXUmxjeTVsY1NndE1Ta3NjeTVoWkdSRGJHRnpjeWhVTG5CaGNtRnRjeTV6Ykdsa1pWQnlaWFpEYkdGemN5a3BMR2t1Ykc5dmNDWW1LSFF1YUdGelEyeGhjM01vVkM1d1lYSmhiWE11YzJ4cFpHVkVkWEJzYVdOaGRHVkRiR0Z6Y3lrL1ZDNTNjbUZ3Y0dWeUxtTm9hV3hrY21WdUtGd2lMbHdpSzFRdWNHRnlZVzF6TG5Oc2FXUmxRMnhoYzNNclhDSTZibTkwS0M1Y0lpdFVMbkJoY21GdGN5NXpiR2xrWlVSMWNHeHBZMkYwWlVOc1lYTnpLeWNwVzJSaGRHRXRjM2RwY0dWeUxYTnNhV1JsTFdsdVpHVjRQVndpSnl0MExtRjBkSElvWENKa1lYUmhMWE4zYVhCbGNpMXpiR2xrWlMxcGJtUmxlRndpS1NzblhDSmRKeWt1WVdSa1EyeGhjM01vVkM1d1lYSmhiWE11YzJ4cFpHVkVkWEJzYVdOaGRHVk9aWGgwUTJ4aGMzTXBPbFF1ZDNKaGNIQmxjaTVqYUdsc1pISmxiaWhjSWk1Y0lpdFVMbkJoY21GdGN5NXpiR2xrWlVOc1lYTnpLMXdpTGx3aUsxUXVjR0Z5WVcxekxuTnNhV1JsUkhWd2JHbGpZWFJsUTJ4aGMzTXJKMXRrWVhSaExYTjNhWEJsY2kxemJHbGtaUzFwYm1SbGVEMWNJaWNyZEM1aGRIUnlLRndpWkdGMFlTMXpkMmx3WlhJdGMyeHBaR1V0YVc1a1pYaGNJaWtySjF3aVhTY3BMbUZrWkVOc1lYTnpLRlF1Y0dGeVlXMXpMbk5zYVdSbFJIVndiR2xqWVhSbFRtVjRkRU5zWVhOektTeHpMbWhoYzBOc1lYTnpLRlF1Y0dGeVlXMXpMbk5zYVdSbFJIVndiR2xqWVhSbFEyeGhjM01wUDFRdWQzSmhjSEJsY2k1amFHbHNaSEpsYmloY0lpNWNJaXRVTG5CaGNtRnRjeTV6Ykdsa1pVTnNZWE56SzF3aU9tNXZkQ2d1WENJclZDNXdZWEpoYlhNdWMyeHBaR1ZFZFhCc2FXTmhkR1ZEYkdGemN5c25LVnRrWVhSaExYTjNhWEJsY2kxemJHbGtaUzFwYm1SbGVEMWNJaWNyY3k1aGRIUnlLRndpWkdGMFlTMXpkMmx3WlhJdGMyeHBaR1V0YVc1a1pYaGNJaWtySjF3aVhTY3BMbUZrWkVOc1lYTnpLRlF1Y0dGeVlXMXpMbk5zYVdSbFJIVndiR2xqWVhSbFVISmxka05zWVhOektUcFVMbmR5WVhCd1pYSXVZMmhwYkdSeVpXNG9YQ0l1WENJclZDNXdZWEpoYlhNdWMyeHBaR1ZEYkdGemN5dGNJaTVjSWl0VUxuQmhjbUZ0Y3k1emJHbGtaVVIxY0d4cFkyRjBaVU5zWVhOekt5ZGJaR0YwWVMxemQybHdaWEl0YzJ4cFpHVXRhVzVrWlhnOVhDSW5LM011WVhSMGNpaGNJbVJoZEdFdGMzZHBjR1Z5TFhOc2FXUmxMV2x1WkdWNFhDSXBLeWRjSWwwbktTNWhaR1JEYkdGemN5aFVMbkJoY21GdGN5NXpiR2xrWlVSMWNHeHBZMkYwWlZCeVpYWkRiR0Z6Y3lrcExGUXVjR0ZuYVc1aGRHbHZia052Ym5SaGFXNWxjaVltVkM1d1lXZHBibUYwYVc5dVEyOXVkR0ZwYm1WeUxteGxibWQwYUQ0d0tYdDJZWElnY2l4dVBWUXVjR0Z5WVcxekxteHZiM0EvVFdGMGFDNWpaV2xzS0NoVUxuTnNhV1JsY3k1c1pXNW5kR2d0TWlwVUxteHZiM0JsWkZOc2FXUmxjeWt2VkM1d1lYSmhiWE11YzJ4cFpHVnpVR1Z5UjNKdmRYQXBPbFF1YzI1aGNFZHlhV1F1YkdWdVozUm9PMmxtS0ZRdWNHRnlZVzF6TG14dmIzQS9LSEk5VFdGMGFDNWpaV2xzS0NoVUxtRmpkR2wyWlVsdVpHVjRMVlF1Ykc5dmNHVmtVMnhwWkdWektTOVVMbkJoY21GdGN5NXpiR2xrWlhOUVpYSkhjbTkxY0Nrc2NqNVVMbk5zYVdSbGN5NXNaVzVuZEdndE1TMHlLbFF1Ykc5dmNHVmtVMnhwWkdWekppWW9jaTA5VkM1emJHbGtaWE11YkdWdVozUm9MVElxVkM1c2IyOXdaV1JUYkdsa1pYTXBMSEkrYmkweEppWW9jaTA5Ymlrc2Nqd3dKaVpjSW1KMWJHeGxkSE5jSWlFOVBWUXVjR0Z5WVcxekxuQmhaMmx1WVhScGIyNVVlWEJsSmlZb2NqMXVLM0lwS1RweVBYWnZhV1FnTUNFOVBWUXVjMjVoY0VsdVpHVjRQMVF1YzI1aGNFbHVaR1Y0T2xRdVlXTjBhWFpsU1c1a1pYaDhmREFzWENKaWRXeHNaWFJ6WENJOVBUMVVMbkJoY21GdGN5NXdZV2RwYm1GMGFXOXVWSGx3WlNZbVZDNWlkV3hzWlhSekppWlVMbUoxYkd4bGRITXViR1Z1WjNSb1BqQW1KaWhVTG1KMWJHeGxkSE11Y21WdGIzWmxRMnhoYzNNb1ZDNXdZWEpoYlhNdVluVnNiR1YwUVdOMGFYWmxRMnhoYzNNcExGUXVjR0ZuYVc1aGRHbHZia052Ym5SaGFXNWxjaTVzWlc1bmRHZytNVDlVTG1KMWJHeGxkSE11WldGamFDaG1kVzVqZEdsdmJpZ3BlMlVvZEdocGN5a3VhVzVrWlhnb0tUMDlQWEltSm1Vb2RHaHBjeWt1WVdSa1EyeGhjM01vVkM1d1lYSmhiWE11WW5Wc2JHVjBRV04wYVhabFEyeGhjM01wZlNrNlZDNWlkV3hzWlhSekxtVnhLSElwTG1Ga1pFTnNZWE56S0ZRdWNHRnlZVzF6TG1KMWJHeGxkRUZqZEdsMlpVTnNZWE56S1Nrc1hDSm1jbUZqZEdsdmJsd2lQVDA5VkM1d1lYSmhiWE11Y0dGbmFXNWhkR2x2YmxSNWNHVW1KaWhVTG5CaFoybHVZWFJwYjI1RGIyNTBZV2x1WlhJdVptbHVaQ2hjSWk1Y0lpdFVMbkJoY21GdGN5NXdZV2RwYm1GMGFXOXVRM1Z5Y21WdWRFTnNZWE56S1M1MFpYaDBLSElyTVNrc1ZDNXdZV2RwYm1GMGFXOXVRMjl1ZEdGcGJtVnlMbVpwYm1Rb1hDSXVYQ0lyVkM1d1lYSmhiWE11Y0dGbmFXNWhkR2x2YmxSdmRHRnNRMnhoYzNNcExuUmxlSFFvYmlrcExGd2ljSEp2WjNKbGMzTmNJajA5UFZRdWNHRnlZVzF6TG5CaFoybHVZWFJwYjI1VWVYQmxLWHQyWVhJZ2J6MG9jaXN4S1M5dUxHdzlieXh3UFRFN1ZDNXBjMGh2Y21sNmIyNTBZV3dvS1h4OEtIQTlieXhzUFRFcExGUXVjR0ZuYVc1aGRHbHZia052Ym5SaGFXNWxjaTVtYVc1a0tGd2lMbHdpSzFRdWNHRnlZVzF6TG5CaFoybHVZWFJwYjI1UWNtOW5jbVZ6YzJKaGNrTnNZWE56S1M1MGNtRnVjMlp2Y20wb1hDSjBjbUZ1YzJ4aGRHVXpaQ2d3TERBc01Da2djMk5oYkdWWUtGd2lLMndyWENJcElITmpZV3hsV1NoY0lpdHdLMXdpS1Z3aUtTNTBjbUZ1YzJsMGFXOXVLRlF1Y0dGeVlXMXpMbk53WldWa0tYMWNJbU4xYzNSdmJWd2lQVDA5VkM1d1lYSmhiWE11Y0dGbmFXNWhkR2x2YmxSNWNHVW1KbFF1Y0dGeVlXMXpMbkJoWjJsdVlYUnBiMjVEZFhOMGIyMVNaVzVrWlhJbUppaFVMbkJoWjJsdVlYUnBiMjVEYjI1MFlXbHVaWEl1YUhSdGJDaFVMbkJoY21GdGN5NXdZV2RwYm1GMGFXOXVRM1Z6ZEc5dFVtVnVaR1Z5S0ZRc2Npc3hMRzRwS1N4VUxtVnRhWFFvWENKdmJsQmhaMmx1WVhScGIyNVNaVzVrWlhKbFpGd2lMRlFzVkM1d1lXZHBibUYwYVc5dVEyOXVkR0ZwYm1WeVd6QmRLU2w5VkM1d1lYSmhiWE11Ykc5dmNIeDhLRlF1Y0dGeVlXMXpMbkJ5WlhaQ2RYUjBiMjRtSmxRdWNISmxka0oxZEhSdmJpWW1WQzV3Y21WMlFuVjBkRzl1TG14bGJtZDBhRDR3SmlZb1ZDNXBjMEpsWjJsdWJtbHVaejhvVkM1d2NtVjJRblYwZEc5dUxtRmtaRU5zWVhOektGUXVjR0Z5WVcxekxtSjFkSFJ2YmtScGMyRmliR1ZrUTJ4aGMzTXBMRlF1Y0dGeVlXMXpMbUV4TVhrbUpsUXVZVEV4ZVNZbVZDNWhNVEY1TG1ScGMyRmliR1VvVkM1d2NtVjJRblYwZEc5dUtTazZLRlF1Y0hKbGRrSjFkSFJ2Ymk1eVpXMXZkbVZEYkdGemN5aFVMbkJoY21GdGN5NWlkWFIwYjI1RWFYTmhZbXhsWkVOc1lYTnpLU3hVTG5CaGNtRnRjeTVoTVRGNUppWlVMbUV4TVhrbUpsUXVZVEV4ZVM1bGJtRmliR1VvVkM1d2NtVjJRblYwZEc5dUtTa3BMRlF1Y0dGeVlXMXpMbTVsZUhSQ2RYUjBiMjRtSmxRdWJtVjRkRUoxZEhSdmJpWW1WQzV1WlhoMFFuVjBkRzl1TG14bGJtZDBhRDR3SmlZb1ZDNXBjMFZ1WkQ4b1ZDNXVaWGgwUW5WMGRHOXVMbUZrWkVOc1lYTnpLRlF1Y0dGeVlXMXpMbUoxZEhSdmJrUnBjMkZpYkdWa1EyeGhjM01wTEZRdWNHRnlZVzF6TG1FeE1Ya21KbFF1WVRFeGVTWW1WQzVoTVRGNUxtUnBjMkZpYkdVb1ZDNXVaWGgwUW5WMGRHOXVLU2s2S0ZRdWJtVjRkRUoxZEhSdmJpNXlaVzF2ZG1WRGJHRnpjeWhVTG5CaGNtRnRjeTVpZFhSMGIyNUVhWE5oWW14bFpFTnNZWE56S1N4VUxuQmhjbUZ0Y3k1aE1URjVKaVpVTG1FeE1Ya21KbFF1WVRFeGVTNWxibUZpYkdVb1ZDNXVaWGgwUW5WMGRHOXVLU2twS1gwc1ZDNTFjR1JoZEdWUVlXZHBibUYwYVc5dVBXWjFibU4wYVc5dUtDbDdhV1lvVkM1d1lYSmhiWE11Y0dGbmFXNWhkR2x2YmlZbVZDNXdZV2RwYm1GMGFXOXVRMjl1ZEdGcGJtVnlKaVpVTG5CaFoybHVZWFJwYjI1RGIyNTBZV2x1WlhJdWJHVnVaM1JvUGpBcGUzWmhjaUJsUFZ3aVhDSTdhV1lvWENKaWRXeHNaWFJ6WENJOVBUMVVMbkJoY21GdGN5NXdZV2RwYm1GMGFXOXVWSGx3WlNsN1ptOXlLSFpoY2lCaFBWUXVjR0Z5WVcxekxteHZiM0EvVFdGMGFDNWpaV2xzS0NoVUxuTnNhV1JsY3k1c1pXNW5kR2d0TWlwVUxteHZiM0JsWkZOc2FXUmxjeWt2VkM1d1lYSmhiWE11YzJ4cFpHVnpVR1Z5UjNKdmRYQXBPbFF1YzI1aGNFZHlhV1F1YkdWdVozUm9MSFE5TUR0MFBHRTdkQ3NyS1dVclBWUXVjR0Z5WVcxekxuQmhaMmx1WVhScGIyNUNkV3hzWlhSU1pXNWtaWEkvVkM1d1lYSmhiWE11Y0dGbmFXNWhkR2x2YmtKMWJHeGxkRkpsYm1SbGNpaFVMSFFzVkM1d1lYSmhiWE11WW5Wc2JHVjBRMnhoYzNNcE9sd2lQRndpSzFRdWNHRnlZVzF6TG5CaFoybHVZWFJwYjI1RmJHVnRaVzUwS3ljZ1kyeGhjM005WENJbksxUXVjR0Z5WVcxekxtSjFiR3hsZEVOc1lYTnpLeWRjSWo0OEx5Y3JWQzV3WVhKaGJYTXVjR0ZuYVc1aGRHbHZia1ZzWlcxbGJuUXJYQ0krWENJN1ZDNXdZV2RwYm1GMGFXOXVRMjl1ZEdGcGJtVnlMbWgwYld3b1pTa3NWQzVpZFd4c1pYUnpQVlF1Y0dGbmFXNWhkR2x2YmtOdmJuUmhhVzVsY2k1bWFXNWtLRndpTGx3aUsxUXVjR0Z5WVcxekxtSjFiR3hsZEVOc1lYTnpLU3hVTG5CaGNtRnRjeTV3WVdkcGJtRjBhVzl1UTJ4cFkydGhZbXhsSmlaVUxuQmhjbUZ0Y3k1aE1URjVKaVpVTG1FeE1Ya21KbFF1WVRFeGVTNXBibWwwVUdGbmFXNWhkR2x2YmlncGZWd2labkpoWTNScGIyNWNJajA5UFZRdWNHRnlZVzF6TG5CaFoybHVZWFJwYjI1VWVYQmxKaVlvWlQxVUxuQmhjbUZ0Y3k1d1lXZHBibUYwYVc5dVJuSmhZM1JwYjI1U1pXNWtaWEkvVkM1d1lYSmhiWE11Y0dGbmFXNWhkR2x2YmtaeVlXTjBhVzl1VW1WdVpHVnlLRlFzVkM1d1lYSmhiWE11Y0dGbmFXNWhkR2x2YmtOMWNuSmxiblJEYkdGemN5eFVMbkJoY21GdGN5NXdZV2RwYm1GMGFXOXVWRzkwWVd4RGJHRnpjeWs2Snp4emNHRnVJR05zWVhOelBWd2lKeXRVTG5CaGNtRnRjeTV3WVdkcGJtRjBhVzl1UTNWeWNtVnVkRU5zWVhOekt5ZGNJajQ4TDNOd1lXNCtJQzhnUEhOd1lXNGdZMnhoYzNNOVhDSW5LMVF1Y0dGeVlXMXpMbkJoWjJsdVlYUnBiMjVVYjNSaGJFTnNZWE56S3lkY0lqNDhMM053WVc0K0p5eFVMbkJoWjJsdVlYUnBiMjVEYjI1MFlXbHVaWEl1YUhSdGJDaGxLU2tzWENKd2NtOW5jbVZ6YzF3aVBUMDlWQzV3WVhKaGJYTXVjR0ZuYVc1aGRHbHZibFI1Y0dVbUppaGxQVlF1Y0dGeVlXMXpMbkJoWjJsdVlYUnBiMjVRY205bmNtVnpjMUpsYm1SbGNqOVVMbkJoY21GdGN5NXdZV2RwYm1GMGFXOXVVSEp2WjNKbGMzTlNaVzVrWlhJb1ZDeFVMbkJoY21GdGN5NXdZV2RwYm1GMGFXOXVVSEp2WjNKbGMzTmlZWEpEYkdGemN5azZKenh6Y0dGdUlHTnNZWE56UFZ3aUp5dFVMbkJoY21GdGN5NXdZV2RwYm1GMGFXOXVVSEp2WjNKbGMzTmlZWEpEYkdGemN5c25YQ0krUEM5emNHRnVQaWNzVkM1d1lXZHBibUYwYVc5dVEyOXVkR0ZwYm1WeUxtaDBiV3dvWlNrcExGd2lZM1Z6ZEc5dFhDSWhQVDFVTG5CaGNtRnRjeTV3WVdkcGJtRjBhVzl1Vkhsd1pTWW1WQzVsYldsMEtGd2liMjVRWVdkcGJtRjBhVzl1VW1WdVpHVnlaV1JjSWl4VUxGUXVjR0ZuYVc1aGRHbHZia052Ym5SaGFXNWxjbHN3WFNsOWZTeFVMblZ3WkdGMFpUMW1kVzVqZEdsdmJpaGxLWHRtZFc1amRHbHZiaUJoS0NsN1ZDNXlkR3dzVkM1MGNtRnVjMnhoZEdVN2REMU5ZWFJvTG0xcGJpaE5ZWFJvTG0xaGVDaFVMblJ5WVc1emJHRjBaU3hVTG0xaGVGUnlZVzV6YkdGMFpTZ3BLU3hVTG0xcGJsUnlZVzV6YkdGMFpTZ3BLU3hVTG5ObGRGZHlZWEJ3WlhKVWNtRnVjMnhoZEdVb2RDa3NWQzUxY0dSaGRHVkJZM1JwZG1WSmJtUmxlQ2dwTEZRdWRYQmtZWFJsUTJ4aGMzTmxjeWdwZldsbUtGUXBlMVF1ZFhCa1lYUmxRMjl1ZEdGcGJtVnlVMmw2WlNncExGUXVkWEJrWVhSbFUyeHBaR1Z6VTJsNlpTZ3BMRlF1ZFhCa1lYUmxVSEp2WjNKbGMzTW9LU3hVTG5Wd1pHRjBaVkJoWjJsdVlYUnBiMjRvS1N4VUxuVndaR0YwWlVOc1lYTnpaWE1vS1N4VUxuQmhjbUZ0Y3k1elkzSnZiR3hpWVhJbUpsUXVjMk55YjJ4c1ltRnlKaVpVTG5OamNtOXNiR0poY2k1elpYUW9LVHQyWVhJZ2REdHBaaWhsS1h0VUxtTnZiblJ5YjJ4c1pYSW1KbFF1WTI5dWRISnZiR3hsY2k1emNHeHBibVVtSmloVUxtTnZiblJ5YjJ4c1pYSXVjM0JzYVc1bFBYWnZhV1FnTUNrc1ZDNXdZWEpoYlhNdVpuSmxaVTF2WkdVL0tHRW9LU3hVTG5CaGNtRnRjeTVoZFhSdlNHVnBaMmgwSmlaVUxuVndaR0YwWlVGMWRHOUlaV2xuYUhRb0tTazZLQ2hjSW1GMWRHOWNJajA5UFZRdWNHRnlZVzF6TG5Oc2FXUmxjMUJsY2xacFpYZDhmRlF1Y0dGeVlXMXpMbk5zYVdSbGMxQmxjbFpwWlhjK01Ta21KbFF1YVhORmJtUW1KaUZVTG5CaGNtRnRjeTVqWlc1MFpYSmxaRk5zYVdSbGN6OVVMbk5zYVdSbFZHOG9WQzV6Ykdsa1pYTXViR1Z1WjNSb0xURXNNQ3doTVN3aE1DazZWQzV6Ykdsa1pWUnZLRlF1WVdOMGFYWmxTVzVrWlhnc01Dd2hNU3doTUNrcGZIeGhLQ2w5Wld4elpTQlVMbkJoY21GdGN5NWhkWFJ2U0dWcFoyaDBKaVpVTG5Wd1pHRjBaVUYxZEc5SVpXbG5hSFFvS1gxOUxGUXViMjVTWlhOcGVtVTlablZ1WTNScGIyNG9aU2w3VkM1d1lYSmhiWE11YjI1Q1pXWnZjbVZTWlhOcGVtVW1KbFF1Y0dGeVlXMXpMbTl1UW1WbWIzSmxVbVZ6YVhwbEtGUXBMRlF1Y0dGeVlXMXpMbUp5WldGcmNHOXBiblJ6SmlaVUxuTmxkRUp5WldGcmNHOXBiblFvS1R0MllYSWdZVDFVTG5CaGNtRnRjeTVoYkd4dmQxTjNhWEJsVkc5UWNtVjJMSFE5VkM1d1lYSmhiWE11WVd4c2IzZFRkMmx3WlZSdlRtVjRkRHRVTG5CaGNtRnRjeTVoYkd4dmQxTjNhWEJsVkc5UWNtVjJQVlF1Y0dGeVlXMXpMbUZzYkc5M1UzZHBjR1ZVYjA1bGVIUTlJVEFzVkM1MWNHUmhkR1ZEYjI1MFlXbHVaWEpUYVhwbEtDa3NWQzUxY0dSaGRHVlRiR2xrWlhOVGFYcGxLQ2tzS0Z3aVlYVjBiMXdpUFQwOVZDNXdZWEpoYlhNdWMyeHBaR1Z6VUdWeVZtbGxkM3g4VkM1d1lYSmhiWE11Wm5KbFpVMXZaR1Y4ZkdVcEppWlVMblZ3WkdGMFpWQmhaMmx1WVhScGIyNG9LU3hVTG5CaGNtRnRjeTV6WTNKdmJHeGlZWEltSmxRdWMyTnliMnhzWW1GeUppWlVMbk5qY205c2JHSmhjaTV6WlhRb0tTeFVMbU52Ym5SeWIyeHNaWEltSmxRdVkyOXVkSEp2Ykd4bGNpNXpjR3hwYm1VbUppaFVMbU52Ym5SeWIyeHNaWEl1YzNCc2FXNWxQWFp2YVdRZ01DazdkbUZ5SUhNOUlURTdhV1lvVkM1d1lYSmhiWE11Wm5KbFpVMXZaR1VwZTNaaGNpQnBQVTFoZEdndWJXbHVLRTFoZEdndWJXRjRLRlF1ZEhKaGJuTnNZWFJsTEZRdWJXRjRWSEpoYm5Oc1lYUmxLQ2twTEZRdWJXbHVWSEpoYm5Oc1lYUmxLQ2twTzFRdWMyVjBWM0poY0hCbGNsUnlZVzV6YkdGMFpTaHBLU3hVTG5Wd1pHRjBaVUZqZEdsMlpVbHVaR1Y0S0Nrc1ZDNTFjR1JoZEdWRGJHRnpjMlZ6S0Nrc1ZDNXdZWEpoYlhNdVlYVjBiMGhsYVdkb2RDWW1WQzUxY0dSaGRHVkJkWFJ2U0dWcFoyaDBLQ2w5Wld4elpTQlVMblZ3WkdGMFpVTnNZWE56WlhNb0tTeHpQU2hjSW1GMWRHOWNJajA5UFZRdWNHRnlZVzF6TG5Oc2FXUmxjMUJsY2xacFpYZDhmRlF1Y0dGeVlXMXpMbk5zYVdSbGMxQmxjbFpwWlhjK01Ta21KbFF1YVhORmJtUW1KaUZVTG5CaGNtRnRjeTVqWlc1MFpYSmxaRk5zYVdSbGN6OVVMbk5zYVdSbFZHOG9WQzV6Ykdsa1pYTXViR1Z1WjNSb0xURXNNQ3doTVN3aE1DazZWQzV6Ykdsa1pWUnZLRlF1WVdOMGFYWmxTVzVrWlhnc01Dd2hNU3doTUNrN1ZDNXdZWEpoYlhNdWJHRjZlVXh2WVdScGJtY21KaUZ6SmlaVUxteGhlbmttSmxRdWJHRjZlUzVzYjJGa0tDa3NWQzV3WVhKaGJYTXVZV3hzYjNkVGQybHdaVlJ2VUhKbGRqMWhMRlF1Y0dGeVlXMXpMbUZzYkc5M1UzZHBjR1ZVYjA1bGVIUTlkQ3hVTG5CaGNtRnRjeTV2YmtGbWRHVnlVbVZ6YVhwbEppWlVMbkJoY21GdGN5NXZia0ZtZEdWeVVtVnphWHBsS0ZRcGZTeFVMblJ2ZFdOb1JYWmxiblJ6UkdWemEzUnZjRDE3YzNSaGNuUTZYQ0p0YjNWelpXUnZkMjVjSWl4dGIzWmxPbHdpYlc5MWMyVnRiM1psWENJc1pXNWtPbHdpYlc5MWMyVjFjRndpZlN4M2FXNWtiM2N1Ym1GMmFXZGhkRzl5TG5CdmFXNTBaWEpGYm1GaWJHVmtQMVF1ZEc5MVkyaEZkbVZ1ZEhORVpYTnJkRzl3UFh0emRHRnlkRHBjSW5CdmFXNTBaWEprYjNkdVhDSXNiVzkyWlRwY0luQnZhVzUwWlhKdGIzWmxYQ0lzWlc1a09sd2ljRzlwYm5SbGNuVndYQ0o5T25kcGJtUnZkeTV1WVhacFoyRjBiM0l1YlhOUWIybHVkR1Z5Ulc1aFlteGxaQ1ltS0ZRdWRHOTFZMmhGZG1WdWRITkVaWE5yZEc5d1BYdHpkR0Z5ZERwY0lrMVRVRzlwYm5SbGNrUnZkMjVjSWl4dGIzWmxPbHdpVFZOUWIybHVkR1Z5VFc5MlpWd2lMR1Z1WkRwY0lrMVRVRzlwYm5SbGNsVndYQ0o5S1N4VUxuUnZkV05vUlhabGJuUnpQWHR6ZEdGeWREcFVMbk4xY0hCdmNuUXVkRzkxWTJoOGZDRlVMbkJoY21GdGN5NXphVzExYkdGMFpWUnZkV05vUDF3aWRHOTFZMmh6ZEdGeWRGd2lPbFF1ZEc5MVkyaEZkbVZ1ZEhORVpYTnJkRzl3TG5OMFlYSjBMRzF2ZG1VNlZDNXpkWEJ3YjNKMExuUnZkV05vZkh3aFZDNXdZWEpoYlhNdWMybHRkV3hoZEdWVWIzVmphRDljSW5SdmRXTm9iVzkyWlZ3aU9sUXVkRzkxWTJoRmRtVnVkSE5FWlhOcmRHOXdMbTF2ZG1Vc1pXNWtPbFF1YzNWd2NHOXlkQzUwYjNWamFIeDhJVlF1Y0dGeVlXMXpMbk5wYlhWc1lYUmxWRzkxWTJnL1hDSjBiM1ZqYUdWdVpGd2lPbFF1ZEc5MVkyaEZkbVZ1ZEhORVpYTnJkRzl3TG1WdVpIMHNLSGRwYm1SdmR5NXVZWFpwWjJGMGIzSXVjRzlwYm5SbGNrVnVZV0pzWldSOGZIZHBibVJ2ZHk1dVlYWnBaMkYwYjNJdWJYTlFiMmx1ZEdWeVJXNWhZbXhsWkNrbUppaGNJbU52Ym5SaGFXNWxjbHdpUFQwOVZDNXdZWEpoYlhNdWRHOTFZMmhGZG1WdWRITlVZWEpuWlhRL1ZDNWpiMjUwWVdsdVpYSTZWQzUzY21Gd2NHVnlLUzVoWkdSRGJHRnpjeWhjSW5OM2FYQmxjaTEzY0RndFhDSXJWQzV3WVhKaGJYTXVaR2x5WldOMGFXOXVLU3hVTG1sdWFYUkZkbVZ1ZEhNOVpuVnVZM1JwYjI0b1pTbDdkbUZ5SUdFOVpUOWNJbTltWmx3aU9sd2liMjVjSWl4MFBXVS9YQ0p5WlcxdmRtVkZkbVZ1ZEV4cGMzUmxibVZ5WENJNlhDSmhaR1JGZG1WdWRFeHBjM1JsYm1WeVhDSXNjejFjSW1OdmJuUmhhVzVsY2x3aVBUMDlWQzV3WVhKaGJYTXVkRzkxWTJoRmRtVnVkSE5VWVhKblpYUS9WQzVqYjI1MFlXbHVaWEpiTUYwNlZDNTNjbUZ3Y0dWeVd6QmRMSEk5VkM1emRYQndiM0owTG5SdmRXTm9QM002Wkc5amRXMWxiblFzYmowaElWUXVjR0Z5WVcxekxtNWxjM1JsWkR0cFppaFVMbUp5YjNkelpYSXVhV1VwYzF0MFhTaFVMblJ2ZFdOb1JYWmxiblJ6TG5OMFlYSjBMRlF1YjI1VWIzVmphRk4wWVhKMExDRXhLU3h5VzNSZEtGUXVkRzkxWTJoRmRtVnVkSE11Ylc5MlpTeFVMbTl1Vkc5MVkyaE5iM1psTEc0cExISmJkRjBvVkM1MGIzVmphRVYyWlc1MGN5NWxibVFzVkM1dmJsUnZkV05vUlc1a0xDRXhLVHRsYkhObGUybG1LRlF1YzNWd2NHOXlkQzUwYjNWamFDbDdkbUZ5SUc4OUlTaGNJblJ2ZFdOb2MzUmhjblJjSWlFOVBWUXVkRzkxWTJoRmRtVnVkSE11YzNSaGNuUjhmQ0ZVTG5OMWNIQnZjblF1Y0dGemMybDJaVXhwYzNSbGJtVnlmSHdoVkM1d1lYSmhiWE11Y0dGemMybDJaVXhwYzNSbGJtVnljeWttSm50d1lYTnphWFpsT2lFd0xHTmhjSFIxY21VNklURjlPM05iZEYwb1ZDNTBiM1ZqYUVWMlpXNTBjeTV6ZEdGeWRDeFVMbTl1Vkc5MVkyaFRkR0Z5ZEN4dktTeHpXM1JkS0ZRdWRHOTFZMmhGZG1WdWRITXViVzkyWlN4VUxtOXVWRzkxWTJoTmIzWmxMRzRwTEhOYmRGMG9WQzUwYjNWamFFVjJaVzUwY3k1bGJtUXNWQzV2YmxSdmRXTm9SVzVrTEc4cGZTaHBMbk5wYlhWc1lYUmxWRzkxWTJnbUppRlVMbVJsZG1salpTNXBiM01tSmlGVUxtUmxkbWxqWlM1aGJtUnliMmxrZkh4cExuTnBiWFZzWVhSbFZHOTFZMmdtSmlGVUxuTjFjSEJ2Y25RdWRHOTFZMmdtSmxRdVpHVjJhV05sTG1sdmN5a21KaWh6VzNSZEtGd2liVzkxYzJWa2IzZHVYQ0lzVkM1dmJsUnZkV05vVTNSaGNuUXNJVEVwTEdSdlkzVnRaVzUwVzNSZEtGd2liVzkxYzJWdGIzWmxYQ0lzVkM1dmJsUnZkV05vVFc5MlpTeHVLU3hrYjJOMWJXVnVkRnQwWFNoY0ltMXZkWE5sZFhCY0lpeFVMbTl1Vkc5MVkyaEZibVFzSVRFcEtYMTNhVzVrYjNkYmRGMG9YQ0p5WlhOcGVtVmNJaXhVTG05dVVtVnphWHBsS1N4VUxuQmhjbUZ0Y3k1dVpYaDBRblYwZEc5dUppWlVMbTVsZUhSQ2RYUjBiMjRtSmxRdWJtVjRkRUoxZEhSdmJpNXNaVzVuZEdnK01DWW1LRlF1Ym1WNGRFSjFkSFJ2Ymx0aFhTaGNJbU5zYVdOclhDSXNWQzV2YmtOc2FXTnJUbVY0ZENrc1ZDNXdZWEpoYlhNdVlURXhlU1ltVkM1aE1URjVKaVpVTG01bGVIUkNkWFIwYjI1YllWMG9YQ0pyWlhsa2IzZHVYQ0lzVkM1aE1URjVMbTl1Ulc1MFpYSkxaWGtwS1N4VUxuQmhjbUZ0Y3k1d2NtVjJRblYwZEc5dUppWlVMbkJ5WlhaQ2RYUjBiMjRtSmxRdWNISmxka0oxZEhSdmJpNXNaVzVuZEdnK01DWW1LRlF1Y0hKbGRrSjFkSFJ2Ymx0aFhTaGNJbU5zYVdOclhDSXNWQzV2YmtOc2FXTnJVSEpsZGlrc1ZDNXdZWEpoYlhNdVlURXhlU1ltVkM1aE1URjVKaVpVTG5CeVpYWkNkWFIwYjI1YllWMG9YQ0pyWlhsa2IzZHVYQ0lzVkM1aE1URjVMbTl1Ulc1MFpYSkxaWGtwS1N4VUxuQmhjbUZ0Y3k1d1lXZHBibUYwYVc5dUppWlVMbkJoY21GdGN5NXdZV2RwYm1GMGFXOXVRMnhwWTJ0aFlteGxKaVlvVkM1d1lXZHBibUYwYVc5dVEyOXVkR0ZwYm1WeVcyRmRLRndpWTJ4cFkydGNJaXhjSWk1Y0lpdFVMbkJoY21GdGN5NWlkV3hzWlhSRGJHRnpjeXhVTG05dVEyeHBZMnRKYm1SbGVDa3NWQzV3WVhKaGJYTXVZVEV4ZVNZbVZDNWhNVEY1SmlaVUxuQmhaMmx1WVhScGIyNURiMjUwWVdsdVpYSmJZVjBvWENKclpYbGtiM2R1WENJc1hDSXVYQ0lyVkM1d1lYSmhiWE11WW5Wc2JHVjBRMnhoYzNNc1ZDNWhNVEY1TG05dVJXNTBaWEpMWlhrcEtTd29WQzV3WVhKaGJYTXVjSEpsZG1WdWRFTnNhV05yYzN4OFZDNXdZWEpoYlhNdWNISmxkbVZ1ZEVOc2FXTnJjMUJ5YjNCaFoyRjBhVzl1S1NZbWMxdDBYU2hjSW1Oc2FXTnJYQ0lzVkM1d2NtVjJaVzUwUTJ4cFkydHpMQ0V3S1gwc1ZDNWhkSFJoWTJoRmRtVnVkSE05Wm5WdVkzUnBiMjRvS1h0VUxtbHVhWFJGZG1WdWRITW9LWDBzVkM1a1pYUmhZMmhGZG1WdWRITTlablZ1WTNScGIyNG9LWHRVTG1sdWFYUkZkbVZ1ZEhNb0lUQXBmU3hVTG1Gc2JHOTNRMnhwWTJzOUlUQXNWQzV3Y21WMlpXNTBRMnhwWTJ0elBXWjFibU4wYVc5dUtHVXBlMVF1WVd4c2IzZERiR2xqYTN4OEtGUXVjR0Z5WVcxekxuQnlaWFpsYm5SRGJHbGphM01tSm1VdWNISmxkbVZ1ZEVSbFptRjFiSFFvS1N4VUxuQmhjbUZ0Y3k1d2NtVjJaVzUwUTJ4cFkydHpVSEp2Y0dGbllYUnBiMjRtSmxRdVlXNXBiV0YwYVc1bkppWW9aUzV6ZEc5d1VISnZjR0ZuWVhScGIyNG9LU3hsTG5OMGIzQkpiVzFsWkdsaGRHVlFjbTl3WVdkaGRHbHZiaWdwS1NsOUxGUXViMjVEYkdsamEwNWxlSFE5Wm5WdVkzUnBiMjRvWlNsN1pTNXdjbVYyWlc1MFJHVm1ZWFZzZENncExGUXVhWE5GYm1RbUppRlVMbkJoY21GdGN5NXNiMjl3Zkh4VUxuTnNhV1JsVG1WNGRDZ3BmU3hVTG05dVEyeHBZMnRRY21WMlBXWjFibU4wYVc5dUtHVXBlMlV1Y0hKbGRtVnVkRVJsWm1GMWJIUW9LU3hVTG1selFtVm5hVzV1YVc1bkppWWhWQzV3WVhKaGJYTXViRzl2Y0h4OFZDNXpiR2xrWlZCeVpYWW9LWDBzVkM1dmJrTnNhV05yU1c1a1pYZzlablZ1WTNScGIyNG9ZU2w3WVM1d2NtVjJaVzUwUkdWbVlYVnNkQ2dwTzNaaGNpQjBQV1VvZEdocGN5a3VhVzVrWlhnb0tTcFVMbkJoY21GdGN5NXpiR2xrWlhOUVpYSkhjbTkxY0R0VUxuQmhjbUZ0Y3k1c2IyOXdKaVlvZENzOVZDNXNiMjl3WldSVGJHbGtaWE1wTEZRdWMyeHBaR1ZVYnloMEtYMHNYSEpjYmxRdWRYQmtZWFJsUTJ4cFkydGxaRk5zYVdSbFBXWjFibU4wYVc5dUtHRXBlM1poY2lCMFBXOG9ZU3hjSWk1Y0lpdFVMbkJoY21GdGN5NXpiR2xrWlVOc1lYTnpLU3h6UFNFeE8ybG1LSFFwWm05eUtIWmhjaUJwUFRBN2FUeFVMbk5zYVdSbGN5NXNaVzVuZEdnN2FTc3JLVlF1YzJ4cFpHVnpXMmxkUFQwOWRDWW1LSE05SVRBcE8ybG1LQ0YwZkh3aGN5bHlaWFIxY200Z1ZDNWpiR2xqYTJWa1UyeHBaR1U5ZG05cFpDQXdMSFp2YVdRb1ZDNWpiR2xqYTJWa1NXNWtaWGc5ZG05cFpDQXdLVHRwWmloVUxtTnNhV05yWldSVGJHbGtaVDEwTEZRdVkyeHBZMnRsWkVsdVpHVjRQV1VvZENrdWFXNWtaWGdvS1N4VUxuQmhjbUZ0Y3k1emJHbGtaVlJ2UTJ4cFkydGxaRk5zYVdSbEppWjJiMmxrSURBaFBUMVVMbU5zYVdOclpXUkpibVJsZUNZbVZDNWpiR2xqYTJWa1NXNWtaWGdoUFQxVUxtRmpkR2wyWlVsdVpHVjRLWHQyWVhJZ2NpeHVQVlF1WTJ4cFkydGxaRWx1WkdWNExHdzlYQ0poZFhSdlhDSTlQVDFVTG5CaGNtRnRjeTV6Ykdsa1pYTlFaWEpXYVdWM1AxUXVZM1Z5Y21WdWRGTnNhV1JsYzFCbGNsWnBaWGNvS1RwVUxuQmhjbUZ0Y3k1emJHbGtaWE5RWlhKV2FXVjNPMmxtS0ZRdWNHRnlZVzF6TG14dmIzQXBlMmxtS0ZRdVlXNXBiV0YwYVc1bktYSmxkSFZ5Ymp0eVBYQmhjbk5sU1c1MEtHVW9WQzVqYkdsamEyVmtVMnhwWkdVcExtRjBkSElvWENKa1lYUmhMWE4zYVhCbGNpMXpiR2xrWlMxcGJtUmxlRndpS1N3eE1Da3NWQzV3WVhKaGJYTXVZMlZ1ZEdWeVpXUlRiR2xrWlhNL2JqeFVMbXh2YjNCbFpGTnNhV1JsY3kxc0x6SjhmRzQrVkM1emJHbGtaWE11YkdWdVozUm9MVlF1Ykc5dmNHVmtVMnhwWkdWeksyd3ZNajhvVkM1bWFYaE1iMjl3S0Nrc2JqMVVMbmR5WVhCd1pYSXVZMmhwYkdSeVpXNG9YQ0l1WENJclZDNXdZWEpoYlhNdWMyeHBaR1ZEYkdGemN5c25XMlJoZEdFdGMzZHBjR1Z5TFhOc2FXUmxMV2x1WkdWNFBWd2lKeXR5S3lkY0lsMDZibTkwS0M0bksxUXVjR0Z5WVcxekxuTnNhV1JsUkhWd2JHbGpZWFJsUTJ4aGMzTXJYQ0lwWENJcExtVnhLREFwTG1sdVpHVjRLQ2tzYzJWMFZHbHRaVzkxZENobWRXNWpkR2x2YmlncGUxUXVjMnhwWkdWVWJ5aHVLWDBzTUNrcE9sUXVjMnhwWkdWVWJ5aHVLVHB1UGxRdWMyeHBaR1Z6TG14bGJtZDBhQzFzUHloVUxtWnBlRXh2YjNBb0tTeHVQVlF1ZDNKaGNIQmxjaTVqYUdsc1pISmxiaWhjSWk1Y0lpdFVMbkJoY21GdGN5NXpiR2xrWlVOc1lYTnpLeWRiWkdGMFlTMXpkMmx3WlhJdGMyeHBaR1V0YVc1a1pYZzlYQ0luSzNJckoxd2lYVHB1YjNRb0xpY3JWQzV3WVhKaGJYTXVjMnhwWkdWRWRYQnNhV05oZEdWRGJHRnpjeXRjSWlsY0lpa3VaWEVvTUNrdWFXNWtaWGdvS1N4elpYUlVhVzFsYjNWMEtHWjFibU4wYVc5dUtDbDdWQzV6Ykdsa1pWUnZLRzRwZlN3d0tTazZWQzV6Ykdsa1pWUnZLRzRwZldWc2MyVWdWQzV6Ykdsa1pWUnZLRzRwZlgwN2RtRnlJRk1zUXl4NkxFMHNSU3hRTEVrc2F5eE1MRVFzUWoxY0ltbHVjSFYwTENCelpXeGxZM1FzSUhSbGVIUmhjbVZoTENCaWRYUjBiMjRzSUhacFpHVnZYQ0lzU0QxRVlYUmxMbTV2ZHlncExFYzlXMTA3VkM1aGJtbHRZWFJwYm1jOUlURXNWQzUwYjNWamFHVnpQWHR6ZEdGeWRGZzZNQ3h6ZEdGeWRGazZNQ3hqZFhKeVpXNTBXRG93TEdOMWNuSmxiblJaT2pBc1pHbG1aam93ZlR0MllYSWdXQ3hCTzFRdWIyNVViM1ZqYUZOMFlYSjBQV1oxYm1OMGFXOXVLR0VwZTJsbUtHRXViM0pwWjJsdVlXeEZkbVZ1ZENZbUtHRTlZUzV2Y21sbmFXNWhiRVYyWlc1MEtTd29XRDFjSW5SdmRXTm9jM1JoY25SY0lqMDlQV0V1ZEhsd1pTbDhmQ0VvWENKM2FHbGphRndpYVc0Z1lTbDhmRE1oUFQxaExuZG9hV05vS1h0cFppaFVMbkJoY21GdGN5NXViMU4zYVhCcGJtY21KbThvWVN4Y0lpNWNJaXRVTG5CaGNtRnRjeTV1YjFOM2FYQnBibWREYkdGemN5a3BjbVYwZFhKdUlIWnZhV1FvVkM1aGJHeHZkME5zYVdOclBTRXdLVHRwWmlnaFZDNXdZWEpoYlhNdWMzZHBjR1ZJWVc1a2JHVnlmSHh2S0dFc1ZDNXdZWEpoYlhNdWMzZHBjR1ZJWVc1a2JHVnlLU2w3ZG1GeUlIUTlWQzUwYjNWamFHVnpMbU4xY25KbGJuUllQVndpZEc5MVkyaHpkR0Z5ZEZ3aVBUMDlZUzUwZVhCbFAyRXVkR0Z5WjJWMFZHOTFZMmhsYzFzd1hTNXdZV2RsV0RwaExuQmhaMlZZTEhNOVZDNTBiM1ZqYUdWekxtTjFjbkpsYm5SWlBWd2lkRzkxWTJoemRHRnlkRndpUFQwOVlTNTBlWEJsUDJFdWRHRnlaMlYwVkc5MVkyaGxjMXN3WFM1d1lXZGxXVHBoTG5CaFoyVlpPMmxtS0NFb1ZDNWtaWFpwWTJVdWFXOXpKaVpVTG5CaGNtRnRjeTVwVDFORlpHZGxVM2RwY0dWRVpYUmxZM1JwYjI0bUpuUThQVlF1Y0dGeVlXMXpMbWxQVTBWa1oyVlRkMmx3WlZSb2NtVnphRzlzWkNrcGUybG1LRk05SVRBc1F6MGhNU3g2UFNFd0xFVTlkbTlwWkNBd0xFRTlkbTlwWkNBd0xGUXVkRzkxWTJobGN5NXpkR0Z5ZEZnOWRDeFVMblJ2ZFdOb1pYTXVjM1JoY25SWlBYTXNUVDFFWVhSbExtNXZkeWdwTEZRdVlXeHNiM2REYkdsamF6MGhNQ3hVTG5Wd1pHRjBaVU52Ym5SaGFXNWxjbE5wZW1Vb0tTeFVMbk4zYVhCbFJHbHlaV04wYVc5dVBYWnZhV1FnTUN4VUxuQmhjbUZ0Y3k1MGFISmxjMmh2YkdRK01DWW1LR3M5SVRFcExGd2lkRzkxWTJoemRHRnlkRndpSVQwOVlTNTBlWEJsS1h0MllYSWdhVDBoTUR0bEtHRXVkR0Z5WjJWMEtTNXBjeWhDS1NZbUtHazlJVEVwTEdSdlkzVnRaVzUwTG1GamRHbDJaVVZzWlcxbGJuUW1KbVVvWkc5amRXMWxiblF1WVdOMGFYWmxSV3hsYldWdWRDa3VhWE1vUWlrbUptUnZZM1Z0Wlc1MExtRmpkR2wyWlVWc1pXMWxiblF1WW14MWNpZ3BMR2ttSm1FdWNISmxkbVZ1ZEVSbFptRjFiSFFvS1gxVUxtVnRhWFFvWENKdmJsUnZkV05vVTNSaGNuUmNJaXhVTEdFcGZYMTlmU3hVTG05dVZHOTFZMmhOYjNabFBXWjFibU4wYVc5dUtHRXBlMmxtS0dFdWIzSnBaMmx1WVd4RmRtVnVkQ1ltS0dFOVlTNXZjbWxuYVc1aGJFVjJaVzUwS1N3aFdIeDhYQ0p0YjNWelpXMXZkbVZjSWlFOVBXRXVkSGx3WlNsN2FXWW9ZUzV3Y21WMlpXNTBaV1JDZVU1bGMzUmxaRk4zYVhCbGNpbHlaWFIxY200Z1ZDNTBiM1ZqYUdWekxuTjBZWEowV0QxY0luUnZkV05vYlc5MlpWd2lQVDA5WVM1MGVYQmxQMkV1ZEdGeVoyVjBWRzkxWTJobGMxc3dYUzV3WVdkbFdEcGhMbkJoWjJWWUxIWnZhV1FvVkM1MGIzVmphR1Z6TG5OMFlYSjBXVDFjSW5SdmRXTm9iVzkyWlZ3aVBUMDlZUzUwZVhCbFAyRXVkR0Z5WjJWMFZHOTFZMmhsYzFzd1hTNXdZV2RsV1RwaExuQmhaMlZaS1R0cFppaFVMbkJoY21GdGN5NXZibXg1UlhoMFpYSnVZV3dwY21WMGRYSnVJRlF1WVd4c2IzZERiR2xqYXowaE1TeDJiMmxrS0ZNbUppaFVMblJ2ZFdOb1pYTXVjM1JoY25SWVBWUXVkRzkxWTJobGN5NWpkWEp5Wlc1MFdEMWNJblJ2ZFdOb2JXOTJaVndpUFQwOVlTNTBlWEJsUDJFdWRHRnlaMlYwVkc5MVkyaGxjMXN3WFM1d1lXZGxXRHBoTG5CaFoyVllMRlF1ZEc5MVkyaGxjeTV6ZEdGeWRGazlWQzUwYjNWamFHVnpMbU4xY25KbGJuUlpQVndpZEc5MVkyaHRiM1psWENJOVBUMWhMblI1Y0dVL1lTNTBZWEpuWlhSVWIzVmphR1Z6V3pCZExuQmhaMlZaT21FdWNHRm5aVmtzVFQxRVlYUmxMbTV2ZHlncEtTazdhV1lvV0NZbVZDNXdZWEpoYlhNdWRHOTFZMmhTWld4bFlYTmxUMjVGWkdkbGN5WW1JVlF1Y0dGeVlXMXpMbXh2YjNBcGFXWW9WQzVwYzBodmNtbDZiMjUwWVd3b0tTbDdhV1lvVkM1MGIzVmphR1Z6TG1OMWNuSmxiblJZUEZRdWRHOTFZMmhsY3k1emRHRnlkRmdtSmxRdWRISmhibk5zWVhSbFBEMVVMbTFoZUZSeVlXNXpiR0YwWlNncGZIeFVMblJ2ZFdOb1pYTXVZM1Z5Y21WdWRGZytWQzUwYjNWamFHVnpMbk4wWVhKMFdDWW1WQzUwY21GdWMyeGhkR1UrUFZRdWJXbHVWSEpoYm5Oc1lYUmxLQ2twY21WMGRYSnVmV1ZzYzJVZ2FXWW9WQzUwYjNWamFHVnpMbU4xY25KbGJuUlpQRlF1ZEc5MVkyaGxjeTV6ZEdGeWRGa21KbFF1ZEhKaGJuTnNZWFJsUEQxVUxtMWhlRlJ5WVc1emJHRjBaU2dwZkh4VUxuUnZkV05vWlhNdVkzVnljbVZ1ZEZrK1ZDNTBiM1ZqYUdWekxuTjBZWEowV1NZbVZDNTBjbUZ1YzJ4aGRHVStQVlF1YldsdVZISmhibk5zWVhSbEtDa3BjbVYwZFhKdU8ybG1LRmdtSm1SdlkzVnRaVzUwTG1GamRHbDJaVVZzWlcxbGJuUW1KbUV1ZEdGeVoyVjBQVDA5Wkc5amRXMWxiblF1WVdOMGFYWmxSV3hsYldWdWRDWW1aU2hoTG5SaGNtZGxkQ2t1YVhNb1Fpa3BjbVYwZFhKdUlFTTlJVEFzZG05cFpDaFVMbUZzYkc5M1EyeHBZMnM5SVRFcE8ybG1LSG9tSmxRdVpXMXBkQ2hjSW05dVZHOTFZMmhOYjNabFhDSXNWQ3hoS1N3aEtHRXVkR0Z5WjJWMFZHOTFZMmhsY3lZbVlTNTBZWEpuWlhSVWIzVmphR1Z6TG14bGJtZDBhRDR4S1NsN2FXWW9WQzUwYjNWamFHVnpMbU4xY25KbGJuUllQVndpZEc5MVkyaHRiM1psWENJOVBUMWhMblI1Y0dVL1lTNTBZWEpuWlhSVWIzVmphR1Z6V3pCZExuQmhaMlZZT21FdWNHRm5aVmdzVkM1MGIzVmphR1Z6TG1OMWNuSmxiblJaUFZ3aWRHOTFZMmh0YjNabFhDSTlQVDFoTG5SNWNHVS9ZUzUwWVhKblpYUlViM1ZqYUdWeld6QmRMbkJoWjJWWk9tRXVjR0ZuWlZrc2RtOXBaQ0F3UFQwOVJTbDdkbUZ5SUhRN1ZDNXBjMGh2Y21sNmIyNTBZV3dvS1NZbVZDNTBiM1ZqYUdWekxtTjFjbkpsYm5SWlBUMDlWQzUwYjNWamFHVnpMbk4wWVhKMFdYeDhJVlF1YVhOSWIzSnBlbTl1ZEdGc0tDa21KbFF1ZEc5MVkyaGxjeTVqZFhKeVpXNTBXRDA5UFZRdWRHOTFZMmhsY3k1emRHRnlkRmcvUlQwaE1Ub29kRDB4T0RBcVRXRjBhQzVoZEdGdU1paE5ZWFJvTG1GaWN5aFVMblJ2ZFdOb1pYTXVZM1Z5Y21WdWRGa3RWQzUwYjNWamFHVnpMbk4wWVhKMFdTa3NUV0YwYUM1aFluTW9WQzUwYjNWamFHVnpMbU4xY25KbGJuUllMVlF1ZEc5MVkyaGxjeTV6ZEdGeWRGZ3BLUzlOWVhSb0xsQkpMRVU5VkM1cGMwaHZjbWw2YjI1MFlXd29LVDkwUGxRdWNHRnlZVzF6TG5SdmRXTm9RVzVuYkdVNk9UQXRkRDVVTG5CaGNtRnRjeTUwYjNWamFFRnVaMnhsS1gxcFppaEZKaVpVTG1WdGFYUW9YQ0p2YmxSdmRXTm9UVzkyWlU5d2NHOXphWFJsWENJc1ZDeGhLU3gyYjJsa0lEQTlQVDFCSmlZb1ZDNTBiM1ZqYUdWekxtTjFjbkpsYm5SWVBUMDlWQzUwYjNWamFHVnpMbk4wWVhKMFdDWW1WQzUwYjNWamFHVnpMbU4xY25KbGJuUlpQVDA5VkM1MGIzVmphR1Z6TG5OMFlYSjBXWHg4S0VFOUlUQXBLU3hUS1h0cFppaEZLWEpsZEhWeWJpQjJiMmxrS0ZNOUlURXBPMmxtS0VFcGUxUXVZV3hzYjNkRGJHbGphejBoTVN4VUxtVnRhWFFvWENKdmJsTnNhV1JsY2sxdmRtVmNJaXhVTEdFcExHRXVjSEpsZG1WdWRFUmxabUYxYkhRb0tTeFVMbkJoY21GdGN5NTBiM1ZqYUUxdmRtVlRkRzl3VUhKdmNHRm5ZWFJwYjI0bUppRlVMbkJoY21GdGN5NXVaWE4wWldRbUptRXVjM1J2Y0ZCeWIzQmhaMkYwYVc5dUtDa3NRM3g4S0drdWJHOXZjQ1ltVkM1bWFYaE1iMjl3S0Nrc1NUMVVMbWRsZEZkeVlYQndaWEpVY21GdWMyeGhkR1VvS1N4VUxuTmxkRmR5WVhCd1pYSlVjbUZ1YzJsMGFXOXVLREFwTEZRdVlXNXBiV0YwYVc1bkppWlVMbmR5WVhCd1pYSXVkSEpwWjJkbGNpaGNJbmRsWW10cGRGUnlZVzV6YVhScGIyNUZibVFnZEhKaGJuTnBkR2x2Ym1WdVpDQnZWSEpoYm5OcGRHbHZia1Z1WkNCTlUxUnlZVzV6YVhScGIyNUZibVFnYlhOVWNtRnVjMmwwYVc5dVJXNWtYQ0lwTEZRdWNHRnlZVzF6TG1GMWRHOXdiR0Y1SmlaVUxtRjFkRzl3YkdGNWFXNW5KaVlvVkM1d1lYSmhiWE11WVhWMGIzQnNZWGxFYVhOaFlteGxUMjVKYm5SbGNtRmpkR2x2Ymo5VUxuTjBiM0JCZFhSdmNHeGhlU2dwT2xRdWNHRjFjMlZCZFhSdmNHeGhlU2dwS1N4RVBTRXhMQ0ZVTG5CaGNtRnRjeTVuY21GaVEzVnljMjl5Zkh4VUxuQmhjbUZ0Y3k1aGJHeHZkMU4zYVhCbFZHOU9aWGgwSVQwOUlUQW1KbFF1Y0dGeVlXMXpMbUZzYkc5M1UzZHBjR1ZVYjFCeVpYWWhQVDBoTUh4OFZDNXpaWFJIY21GaVEzVnljMjl5S0NFd0tTa3NRejBoTUR0MllYSWdjejFVTG5SdmRXTm9aWE11WkdsbVpqMVVMbWx6U0c5eWFYcHZiblJoYkNncFAxUXVkRzkxWTJobGN5NWpkWEp5Wlc1MFdDMVVMblJ2ZFdOb1pYTXVjM1JoY25SWU9sUXVkRzkxWTJobGN5NWpkWEp5Wlc1MFdTMVVMblJ2ZFdOb1pYTXVjM1JoY25SWk8zTXFQVlF1Y0dGeVlXMXpMblJ2ZFdOb1VtRjBhVzhzVkM1eWRHd21KaWh6UFMxektTeFVMbk4zYVhCbFJHbHlaV04wYVc5dVBYTStNRDljSW5CeVpYWmNJanBjSW01bGVIUmNJaXhRUFhNclNUdDJZWElnY2owaE1EdHBaaWh6UGpBbUpsQStWQzV0YVc1VWNtRnVjMnhoZEdVb0tUOG9jajBoTVN4VUxuQmhjbUZ0Y3k1eVpYTnBjM1JoYm1ObEppWW9VRDFVTG0xcGJsUnlZVzV6YkdGMFpTZ3BMVEVyVFdGMGFDNXdiM2NvTFZRdWJXbHVWSEpoYm5Oc1lYUmxLQ2tyU1N0ekxGUXVjR0Z5WVcxekxuSmxjMmx6ZEdGdVkyVlNZWFJwYnlrcEtUcHpQREFtSmxBOFZDNXRZWGhVY21GdWMyeGhkR1VvS1NZbUtISTlJVEVzVkM1d1lYSmhiWE11Y21WemFYTjBZVzVqWlNZbUtGQTlWQzV0WVhoVWNtRnVjMnhoZEdVb0tTc3hMVTFoZEdndWNHOTNLRlF1YldGNFZISmhibk5zWVhSbEtDa3RTUzF6TEZRdWNHRnlZVzF6TG5KbGMybHpkR0Z1WTJWU1lYUnBieWtwS1N4eUppWW9ZUzV3Y21WMlpXNTBaV1JDZVU1bGMzUmxaRk4zYVhCbGNqMGhNQ2tzSVZRdWNHRnlZVzF6TG1Gc2JHOTNVM2RwY0dWVWIwNWxlSFFtSmx3aWJtVjRkRndpUFQwOVZDNXpkMmx3WlVScGNtVmpkR2x2YmlZbVVEeEpKaVlvVUQxSktTd2hWQzV3WVhKaGJYTXVZV3hzYjNkVGQybHdaVlJ2VUhKbGRpWW1YQ0p3Y21WMlhDSTlQVDFVTG5OM2FYQmxSR2x5WldOMGFXOXVKaVpRUGtrbUppaFFQVWtwTEZRdWNHRnlZVzF6TG5Sb2NtVnphRzlzWkQ0d0tYdHBaaWdoS0UxaGRHZ3VZV0p6S0hNcFBsUXVjR0Z5WVcxekxuUm9jbVZ6YUc5c1pIeDhheWtwY21WMGRYSnVJSFp2YVdRb1VEMUpLVHRwWmlnaGF5bHlaWFIxY200Z2F6MGhNQ3hVTG5SdmRXTm9aWE11YzNSaGNuUllQVlF1ZEc5MVkyaGxjeTVqZFhKeVpXNTBXQ3hVTG5SdmRXTm9aWE11YzNSaGNuUlpQVlF1ZEc5MVkyaGxjeTVqZFhKeVpXNTBXU3hRUFVrc2RtOXBaQ2hVTG5SdmRXTm9aWE11WkdsbVpqMVVMbWx6U0c5eWFYcHZiblJoYkNncFAxUXVkRzkxWTJobGN5NWpkWEp5Wlc1MFdDMVVMblJ2ZFdOb1pYTXVjM1JoY25SWU9sUXVkRzkxWTJobGN5NWpkWEp5Wlc1MFdTMVVMblJ2ZFdOb1pYTXVjM1JoY25SWktYMVVMbkJoY21GdGN5NW1iMnhzYjNkR2FXNW5aWEltSmlnb1ZDNXdZWEpoYlhNdVpuSmxaVTF2WkdWOGZGUXVjR0Z5WVcxekxuZGhkR05vVTJ4cFpHVnpVSEp2WjNKbGMzTXBKaVpVTG5Wd1pHRjBaVUZqZEdsMlpVbHVaR1Y0S0Nrc1ZDNXdZWEpoYlhNdVpuSmxaVTF2WkdVbUppZ3dQVDA5Unk1c1pXNW5kR2dtSmtjdWNIVnphQ2g3Y0c5emFYUnBiMjQ2VkM1MGIzVmphR1Z6VzFRdWFYTkliM0pwZW05dWRHRnNLQ2svWENKemRHRnlkRmhjSWpwY0luTjBZWEowV1Z3aVhTeDBhVzFsT2sxOUtTeEhMbkIxYzJnb2UzQnZjMmwwYVc5dU9sUXVkRzkxWTJobGMxdFVMbWx6U0c5eWFYcHZiblJoYkNncFAxd2lZM1Z5Y21WdWRGaGNJanBjSW1OMWNuSmxiblJaWENKZExIUnBiV1U2S0c1bGR5QjNhVzVrYjNjdVJHRjBaU2t1WjJWMFZHbHRaU2dwZlNrcExGUXVkWEJrWVhSbFVISnZaM0psYzNNb1VDa3NWQzV6WlhSWGNtRndjR1Z5VkhKaGJuTnNZWFJsS0ZBcEtYMTlmWDE5TEZRdWIyNVViM1ZqYUVWdVpEMW1kVzVqZEdsdmJpaGhLWHRwWmloaExtOXlhV2RwYm1Gc1JYWmxiblFtSmloaFBXRXViM0pwWjJsdVlXeEZkbVZ1ZENrc2VpWW1WQzVsYldsMEtGd2liMjVVYjNWamFFVnVaRndpTEZRc1lTa3NlajBoTVN4VEtYdFVMbkJoY21GdGN5NW5jbUZpUTNWeWMyOXlKaVpESmlaVEppWW9WQzV3WVhKaGJYTXVZV3hzYjNkVGQybHdaVlJ2VG1WNGREMDlQU0V3Zkh4VUxuQmhjbUZ0Y3k1aGJHeHZkMU4zYVhCbFZHOVFjbVYyUFQwOUlUQXBKaVpVTG5ObGRFZHlZV0pEZFhKemIzSW9JVEVwTzNaaGNpQjBQVVJoZEdVdWJtOTNLQ2tzY3oxMExVMDdhV1lvVkM1aGJHeHZkME5zYVdOckppWW9WQzUxY0dSaGRHVkRiR2xqYTJWa1UyeHBaR1VvWVNrc1ZDNWxiV2wwS0Z3aWIyNVVZWEJjSWl4VUxHRXBMSE04TXpBd0ppWjBMVWcrTXpBd0ppWW9UQ1ltWTJ4bFlYSlVhVzFsYjNWMEtFd3BMRXc5YzJWMFZHbHRaVzkxZENobWRXNWpkR2x2YmlncGUxUW1KaWhVTG5CaGNtRnRjeTV3WVdkcGJtRjBhVzl1U0dsa1pTWW1WQzV3WVdkcGJtRjBhVzl1UTI5dWRHRnBibVZ5TG14bGJtZDBhRDR3SmlZaFpTaGhMblJoY21kbGRDa3VhR0Z6UTJ4aGMzTW9WQzV3WVhKaGJYTXVZblZzYkdWMFEyeGhjM01wSmlaVUxuQmhaMmx1WVhScGIyNURiMjUwWVdsdVpYSXVkRzluWjJ4bFEyeGhjM01vVkM1d1lYSmhiWE11Y0dGbmFXNWhkR2x2YmtocFpHUmxia05zWVhOektTeFVMbVZ0YVhRb1hDSnZia05zYVdOclhDSXNWQ3hoS1NsOUxETXdNQ2twTEhNOE16QXdKaVowTFVnOE16QXdKaVlvVENZbVkyeGxZWEpVYVcxbGIzVjBLRXdwTEZRdVpXMXBkQ2hjSW05dVJHOTFZbXhsVkdGd1hDSXNWQ3hoS1NrcExFZzlSR0YwWlM1dWIzY29LU3h6WlhSVWFXMWxiM1YwS0daMWJtTjBhVzl1S0NsN1ZDWW1LRlF1WVd4c2IzZERiR2xqYXowaE1DbDlMREFwTENGVGZId2hRM3g4SVZRdWMzZHBjR1ZFYVhKbFkzUnBiMjU4ZkRBOVBUMVVMblJ2ZFdOb1pYTXVaR2xtWm54OFVEMDlQVWtwY21WMGRYSnVJSFp2YVdRb1V6MURQU0V4S1R0VFBVTTlJVEU3ZG1GeUlHazdhV1lvYVQxVUxuQmhjbUZ0Y3k1bWIyeHNiM2RHYVc1blpYSS9WQzV5ZEd3L1ZDNTBjbUZ1YzJ4aGRHVTZMVlF1ZEhKaGJuTnNZWFJsT2kxUUxGUXVjR0Z5WVcxekxtWnlaV1ZOYjJSbEtYdHBaaWhwUEMxVUxtMXBibFJ5WVc1emJHRjBaU2dwS1hKbGRIVnliaUIyYjJsa0lGUXVjMnhwWkdWVWJ5aFVMbUZqZEdsMlpVbHVaR1Y0S1R0cFppaHBQaTFVTG0xaGVGUnlZVzV6YkdGMFpTZ3BLWEpsZEhWeWJpQjJiMmxrS0ZRdWMyeHBaR1Z6TG14bGJtZDBhRHhVTG5OdVlYQkhjbWxrTG14bGJtZDBhRDlVTG5Oc2FXUmxWRzhvVkM1emJtRndSM0pwWkM1c1pXNW5kR2d0TVNrNlZDNXpiR2xrWlZSdktGUXVjMnhwWkdWekxteGxibWQwYUMweEtTazdhV1lvVkM1d1lYSmhiWE11Wm5KbFpVMXZaR1ZOYjIxbGJuUjFiU2w3YVdZb1J5NXNaVzVuZEdnK01TbDdkbUZ5SUhJOVJ5NXdiM0FvS1N4dVBVY3VjRzl3S0Nrc2J6MXlMbkJ2YzJsMGFXOXVMVzR1Y0c5emFYUnBiMjRzYkQxeUxuUnBiV1V0Ymk1MGFXMWxPMVF1ZG1Wc2IyTnBkSGs5Ynk5c0xGUXVkbVZzYjJOcGRIazlWQzUyWld4dlkybDBlUzh5TEUxaGRHZ3VZV0p6S0ZRdWRtVnNiMk5wZEhrcFBGUXVjR0Z5WVcxekxtWnlaV1ZOYjJSbFRXbHVhVzExYlZabGJHOWphWFI1SmlZb1ZDNTJaV3h2WTJsMGVUMHdLU3dvYkQ0eE5UQjhmQ2h1WlhjZ2QybHVaRzkzTGtSaGRHVXBMbWRsZEZScGJXVW9LUzF5TG5ScGJXVStNekF3S1NZbUtGUXVkbVZzYjJOcGRIazlNQ2w5Wld4elpTQlVMblpsYkc5amFYUjVQVEE3VkM1MlpXeHZZMmwwZVQxVUxuWmxiRzlqYVhSNUtsUXVjR0Z5WVcxekxtWnlaV1ZOYjJSbFRXOXRaVzUwZFcxV1pXeHZZMmwwZVZKaGRHbHZMRWN1YkdWdVozUm9QVEE3ZG1GeUlIQTlNV1V6S2xRdWNHRnlZVzF6TG1aeVpXVk5iMlJsVFc5dFpXNTBkVzFTWVhScGJ5eGtQVlF1ZG1Wc2IyTnBkSGtxY0N4MVBWUXVkSEpoYm5Oc1lYUmxLMlE3VkM1eWRHd21KaWgxUFMxMUtUdDJZWElnWXl4dFBTRXhMR2c5TWpBcVRXRjBhQzVoWW5Nb1ZDNTJaV3h2WTJsMGVTa3FWQzV3WVhKaGJYTXVabkpsWlUxdlpHVk5iMjFsYm5SMWJVSnZkVzVqWlZKaGRHbHZPMmxtS0hVOFZDNXRZWGhVY21GdWMyeGhkR1VvS1NsVUxuQmhjbUZ0Y3k1bWNtVmxUVzlrWlUxdmJXVnVkSFZ0UW05MWJtTmxQeWgxSzFRdWJXRjRWSEpoYm5Oc1lYUmxLQ2s4TFdnbUppaDFQVlF1YldGNFZISmhibk5zWVhSbEtDa3RhQ2tzWXoxVUxtMWhlRlJ5WVc1emJHRjBaU2dwTEcwOUlUQXNSRDBoTUNrNmRUMVVMbTFoZUZSeVlXNXpiR0YwWlNncE8yVnNjMlVnYVdZb2RUNVVMbTFwYmxSeVlXNXpiR0YwWlNncEtWUXVjR0Z5WVcxekxtWnlaV1ZOYjJSbFRXOXRaVzUwZFcxQ2IzVnVZMlUvS0hVdFZDNXRhVzVVY21GdWMyeGhkR1VvS1Q1b0ppWW9kVDFVTG0xcGJsUnlZVzV6YkdGMFpTZ3BLMmdwTEdNOVZDNXRhVzVVY21GdWMyeGhkR1VvS1N4dFBTRXdMRVE5SVRBcE9uVTlWQzV0YVc1VWNtRnVjMnhoZEdVb0tUdGxiSE5sSUdsbUtGUXVjR0Z5WVcxekxtWnlaV1ZOYjJSbFUzUnBZMnQ1S1h0MllYSWdaeXhtUFRBN1ptOXlLR1k5TUR0bVBGUXVjMjVoY0VkeWFXUXViR1Z1WjNSb08yWXJQVEVwYVdZb1ZDNXpibUZ3UjNKcFpGdG1YVDR0ZFNsN1p6MW1PMkp5WldGcmZYVTlUV0YwYUM1aFluTW9WQzV6Ym1Gd1IzSnBaRnRuWFMxMUtUeE5ZWFJvTG1GaWN5aFVMbk51WVhCSGNtbGtXMmN0TVYwdGRTbDhmRndpYm1WNGRGd2lQVDA5VkM1emQybHdaVVJwY21WamRHbHZiajlVTG5OdVlYQkhjbWxrVzJkZE9sUXVjMjVoY0VkeWFXUmJaeTB4WFN4VUxuSjBiSHg4S0hVOUxYVXBmV2xtS0RBaFBUMVVMblpsYkc5amFYUjVLWEE5VkM1eWRHdy9UV0YwYUM1aFluTW9LQzExTFZRdWRISmhibk5zWVhSbEtTOVVMblpsYkc5amFYUjVLVHBOWVhSb0xtRmljeWdvZFMxVUxuUnlZVzV6YkdGMFpTa3ZWQzUyWld4dlkybDBlU2s3Wld4elpTQnBaaWhVTG5CaGNtRnRjeTVtY21WbFRXOWtaVk4wYVdOcmVTbHlaWFIxY200Z2RtOXBaQ0JVTG5Oc2FXUmxVbVZ6WlhRb0tUdFVMbkJoY21GdGN5NW1jbVZsVFc5a1pVMXZiV1Z1ZEhWdFFtOTFibU5sSmladFB5aFVMblZ3WkdGMFpWQnliMmR5WlhOektHTXBMRlF1YzJWMFYzSmhjSEJsY2xSeVlXNXphWFJwYjI0b2NDa3NWQzV6WlhSWGNtRndjR1Z5VkhKaGJuTnNZWFJsS0hVcExGUXViMjVVY21GdWMybDBhVzl1VTNSaGNuUW9LU3hVTG1GdWFXMWhkR2x1WnowaE1DeFVMbmR5WVhCd1pYSXVkSEpoYm5OcGRHbHZia1Z1WkNobWRXNWpkR2x2YmlncGUxUW1Ka1FtSmloVUxtVnRhWFFvWENKdmJrMXZiV1Z1ZEhWdFFtOTFibU5sWENJc1ZDa3NWQzV6WlhSWGNtRndjR1Z5VkhKaGJuTnBkR2x2YmloVUxuQmhjbUZ0Y3k1emNHVmxaQ2tzVkM1elpYUlhjbUZ3Y0dWeVZISmhibk5zWVhSbEtHTXBMRlF1ZDNKaGNIQmxjaTUwY21GdWMybDBhVzl1Ulc1a0tHWjFibU4wYVc5dUtDbDdWQ1ltVkM1dmJsUnlZVzV6YVhScGIyNUZibVFvS1gwcEtYMHBLVHBVTG5abGJHOWphWFI1UHloVUxuVndaR0YwWlZCeWIyZHlaWE56S0hVcExGUXVjMlYwVjNKaGNIQmxjbFJ5WVc1emFYUnBiMjRvY0Nrc1ZDNXpaWFJYY21Gd2NHVnlWSEpoYm5Oc1lYUmxLSFVwTEZRdWIyNVVjbUZ1YzJsMGFXOXVVM1JoY25Rb0tTeFVMbUZ1YVcxaGRHbHVaM3g4S0ZRdVlXNXBiV0YwYVc1blBTRXdMRlF1ZDNKaGNIQmxjaTUwY21GdWMybDBhVzl1Ulc1a0tHWjFibU4wYVc5dUtDbDdWQ1ltVkM1dmJsUnlZVzV6YVhScGIyNUZibVFvS1gwcEtTazZWQzUxY0dSaGRHVlFjbTluY21WemN5aDFLU3hVTG5Wd1pHRjBaVUZqZEdsMlpVbHVaR1Y0S0NsOWNtVjBkWEp1SUhadmFXUW9LQ0ZVTG5CaGNtRnRjeTVtY21WbFRXOWtaVTF2YldWdWRIVnRmSHh6UGoxVUxuQmhjbUZ0Y3k1c2IyNW5VM2RwY0dWelRYTXBKaVlvVkM1MWNHUmhkR1ZRY205bmNtVnpjeWdwTEZRdWRYQmtZWFJsUVdOMGFYWmxTVzVrWlhnb0tTa3BmWFpoY2lCMkxIYzlNQ3g1UFZRdWMyeHBaR1Z6VTJsNlpYTkhjbWxrV3pCZE8yWnZjaWgyUFRBN2RqeFVMbk5zYVdSbGMwZHlhV1F1YkdWdVozUm9PM1lyUFZRdWNHRnlZVzF6TG5Oc2FXUmxjMUJsY2tkeWIzVndLWFp2YVdRZ01DRTlQVlF1YzJ4cFpHVnpSM0pwWkZ0MksxUXVjR0Z5WVcxekxuTnNhV1JsYzFCbGNrZHliM1Z3WFQ5cFBqMVVMbk5zYVdSbGMwZHlhV1JiZGwwbUptazhWQzV6Ykdsa1pYTkhjbWxrVzNZclZDNXdZWEpoYlhNdWMyeHBaR1Z6VUdWeVIzSnZkWEJkSmlZb2R6MTJMSGs5VkM1emJHbGtaWE5IY21sa1czWXJWQzV3WVhKaGJYTXVjMnhwWkdWelVHVnlSM0p2ZFhCZExWUXVjMnhwWkdWelIzSnBaRnQyWFNrNmFUNDlWQzV6Ykdsa1pYTkhjbWxrVzNaZEppWW9kejEyTEhrOVZDNXpiR2xrWlhOSGNtbGtXMVF1YzJ4cFpHVnpSM0pwWkM1c1pXNW5kR2d0TVYwdFZDNXpiR2xrWlhOSGNtbGtXMVF1YzJ4cFpHVnpSM0pwWkM1c1pXNW5kR2d0TWwwcE8zWmhjaUI0UFNocExWUXVjMnhwWkdWelIzSnBaRnQzWFNrdmVUdHBaaWh6UGxRdWNHRnlZVzF6TG14dmJtZFRkMmx3WlhOTmN5bDdhV1lvSVZRdWNHRnlZVzF6TG14dmJtZFRkMmx3WlhNcGNtVjBkWEp1SUhadmFXUWdWQzV6Ykdsa1pWUnZLRlF1WVdOMGFYWmxTVzVrWlhncE8xd2libVY0ZEZ3aVBUMDlWQzV6ZDJsd1pVUnBjbVZqZEdsdmJpWW1LSGcrUFZRdWNHRnlZVzF6TG14dmJtZFRkMmx3WlhOU1lYUnBiejlVTG5Oc2FXUmxWRzhvZHl0VUxuQmhjbUZ0Y3k1emJHbGtaWE5RWlhKSGNtOTFjQ2s2VkM1emJHbGtaVlJ2S0hjcEtTeGNJbkJ5WlhaY0lqMDlQVlF1YzNkcGNHVkVhWEpsWTNScGIyNG1KaWg0UGpFdFZDNXdZWEpoYlhNdWJHOXVaMU4zYVhCbGMxSmhkR2x2UDFRdWMyeHBaR1ZVYnloM0sxUXVjR0Z5WVcxekxuTnNhV1JsYzFCbGNrZHliM1Z3S1RwVUxuTnNhV1JsVkc4b2R5a3BmV1ZzYzJWN2FXWW9JVlF1Y0dGeVlXMXpMbk5vYjNKMFUzZHBjR1Z6S1hKbGRIVnliaUIyYjJsa0lGUXVjMnhwWkdWVWJ5aFVMbUZqZEdsMlpVbHVaR1Y0S1R0Y0ltNWxlSFJjSWowOVBWUXVjM2RwY0dWRWFYSmxZM1JwYjI0bUpsUXVjMnhwWkdWVWJ5aDNLMVF1Y0dGeVlXMXpMbk5zYVdSbGMxQmxja2R5YjNWd0tTeGNJbkJ5WlhaY0lqMDlQVlF1YzNkcGNHVkVhWEpsWTNScGIyNG1KbFF1YzJ4cFpHVlVieWgzS1gxOWZTeFVMbDl6Ykdsa1pWUnZQV1oxYm1OMGFXOXVLR1VzWVNsN2NtVjBkWEp1SUZRdWMyeHBaR1ZVYnlobExHRXNJVEFzSVRBcGZTeFVMbk5zYVdSbFZHODlablZ1WTNScGIyNG9aU3hoTEhRc2N5bDdkbTlwWkNBd1BUMDlkQ1ltS0hROUlUQXBMSFp2YVdRZ01EMDlQV1VtSmlobFBUQXBMR1U4TUNZbUtHVTlNQ2tzVkM1emJtRndTVzVrWlhnOVRXRjBhQzVtYkc5dmNpaGxMMVF1Y0dGeVlXMXpMbk5zYVdSbGMxQmxja2R5YjNWd0tTeFVMbk51WVhCSmJtUmxlRDQ5VkM1emJtRndSM0pwWkM1c1pXNW5kR2dtSmloVUxuTnVZWEJKYm1SbGVEMVVMbk51WVhCSGNtbGtMbXhsYm1kMGFDMHhLVHQyWVhJZ2FUMHRWQzV6Ym1Gd1IzSnBaRnRVTG5OdVlYQkpibVJsZUYwN2FXWW9WQzV3WVhKaGJYTXVZWFYwYjNCc1lYa21KbFF1WVhWMGIzQnNZWGxwYm1jbUppaHpmSHdoVkM1d1lYSmhiWE11WVhWMGIzQnNZWGxFYVhOaFlteGxUMjVKYm5SbGNtRmpkR2x2Ymo5VUxuQmhkWE5sUVhWMGIzQnNZWGtvWVNrNlZDNXpkRzl3UVhWMGIzQnNZWGtvS1Nrc1ZDNTFjR1JoZEdWUWNtOW5jbVZ6Y3locEtTeFVMbkJoY21GdGN5NXViM0p0WVd4cGVtVlRiR2xrWlVsdVpHVjRLV1p2Y2loMllYSWdjajB3TzNJOFZDNXpiR2xrWlhOSGNtbGtMbXhsYm1kMGFEdHlLeXNwTFUxaGRHZ3VabXh2YjNJb01UQXdLbWtwUGoxTllYUm9MbVpzYjI5eUtERXdNQ3BVTG5Oc2FXUmxjMGR5YVdSYmNsMHBKaVlvWlQxeUtUdHlaWFIxY200aEtDRlVMbkJoY21GdGN5NWhiR3h2ZDFOM2FYQmxWRzlPWlhoMEppWnBQRlF1ZEhKaGJuTnNZWFJsSmlacFBGUXViV2x1VkhKaGJuTnNZWFJsS0NrcEppWW9JU2doVkM1d1lYSmhiWE11WVd4c2IzZFRkMmx3WlZSdlVISmxkaVltYVQ1VUxuUnlZVzV6YkdGMFpTWW1hVDVVTG0xaGVGUnlZVzV6YkdGMFpTZ3BKaVlvVkM1aFkzUnBkbVZKYm1SbGVIeDhNQ2toUFQxbEtTWW1LSFp2YVdRZ01EMDlQV0VtSmloaFBWUXVjR0Z5WVcxekxuTndaV1ZrS1N4VUxuQnlaWFpwYjNWelNXNWtaWGc5VkM1aFkzUnBkbVZKYm1SbGVIeDhNQ3hVTG1GamRHbDJaVWx1WkdWNFBXVXNWQzUxY0dSaGRHVlNaV0ZzU1c1a1pYZ29LU3hVTG5KMGJDWW1MV2s5UFQxVUxuUnlZVzV6YkdGMFpYeDhJVlF1Y25Sc0ppWnBQVDA5VkM1MGNtRnVjMnhoZEdVL0tGUXVjR0Z5WVcxekxtRjFkRzlJWldsbmFIUW1KbFF1ZFhCa1lYUmxRWFYwYjBobGFXZG9kQ2dwTEZRdWRYQmtZWFJsUTJ4aGMzTmxjeWdwTEZ3aWMyeHBaR1ZjSWlFOVBWUXVjR0Z5WVcxekxtVm1abVZqZENZbVZDNXpaWFJYY21Gd2NHVnlWSEpoYm5Oc1lYUmxLR2twTENFeEtUb29WQzUxY0dSaGRHVkRiR0Z6YzJWektDa3NWQzV2YmxSeVlXNXphWFJwYjI1VGRHRnlkQ2gwS1N3d1BUMDlZWHg4VkM1aWNtOTNjMlZ5TG14MFpVbEZPVDhvVkM1elpYUlhjbUZ3Y0dWeVZISmhibk5zWVhSbEtHa3BMRlF1YzJWMFYzSmhjSEJsY2xSeVlXNXphWFJwYjI0b01Da3NWQzV2YmxSeVlXNXphWFJwYjI1RmJtUW9kQ2twT2loVUxuTmxkRmR5WVhCd1pYSlVjbUZ1YzJ4aGRHVW9hU2tzVkM1elpYUlhjbUZ3Y0dWeVZISmhibk5wZEdsdmJpaGhLU3hVTG1GdWFXMWhkR2x1WjN4OEtGUXVZVzVwYldGMGFXNW5QU0V3TEZRdWQzSmhjSEJsY2k1MGNtRnVjMmwwYVc5dVJXNWtLR1oxYm1OMGFXOXVLQ2w3VkNZbVZDNXZibFJ5WVc1emFYUnBiMjVGYm1Rb2RDbDlLU2twTENFd0tTa3BmU3hVTG05dVZISmhibk5wZEdsdmJsTjBZWEowUFdaMWJtTjBhVzl1S0dVcGUzWnZhV1FnTUQwOVBXVW1KaWhsUFNFd0tTeFVMbkJoY21GdGN5NWhkWFJ2U0dWcFoyaDBKaVpVTG5Wd1pHRjBaVUYxZEc5SVpXbG5hSFFvS1N4VUxteGhlbmttSmxRdWJHRjZlUzV2YmxSeVlXNXphWFJwYjI1VGRHRnlkQ2dwTEdVbUppaFVMbVZ0YVhRb1hDSnZibFJ5WVc1emFYUnBiMjVUZEdGeWRGd2lMRlFwTEZRdVlXTjBhWFpsU1c1a1pYZ2hQVDFVTG5CeVpYWnBiM1Z6U1c1a1pYZ21KaWhVTG1WdGFYUW9YQ0p2YmxOc2FXUmxRMmhoYm1kbFUzUmhjblJjSWl4VUtTeFVMbUZqZEdsMlpVbHVaR1Y0UGxRdWNISmxkbWx2ZFhOSmJtUmxlRDlVTG1WdGFYUW9YQ0p2YmxOc2FXUmxUbVY0ZEZOMFlYSjBYQ0lzVkNrNlZDNWxiV2wwS0Z3aWIyNVRiR2xrWlZCeVpYWlRkR0Z5ZEZ3aUxGUXBLU2w5TEZRdWIyNVVjbUZ1YzJsMGFXOXVSVzVrUFdaMWJtTjBhVzl1S0dVcGUxUXVZVzVwYldGMGFXNW5QU0V4TEZRdWMyVjBWM0poY0hCbGNsUnlZVzV6YVhScGIyNG9NQ2tzZG05cFpDQXdQVDA5WlNZbUtHVTlJVEFwTEZRdWJHRjZlU1ltVkM1c1lYcDVMbTl1VkhKaGJuTnBkR2x2YmtWdVpDZ3BMR1VtSmloVUxtVnRhWFFvWENKdmJsUnlZVzV6YVhScGIyNUZibVJjSWl4VUtTeFVMbUZqZEdsMlpVbHVaR1Y0SVQwOVZDNXdjbVYyYVc5MWMwbHVaR1Y0SmlZb1ZDNWxiV2wwS0Z3aWIyNVRiR2xrWlVOb1lXNW5aVVZ1WkZ3aUxGUXBMRlF1WVdOMGFYWmxTVzVrWlhnK1ZDNXdjbVYyYVc5MWMwbHVaR1Y0UDFRdVpXMXBkQ2hjSW05dVUyeHBaR1ZPWlhoMFJXNWtYQ0lzVkNrNlZDNWxiV2wwS0Z3aWIyNVRiR2xrWlZCeVpYWkZibVJjSWl4VUtTa3BMRlF1Y0dGeVlXMXpMbWhwYzNSdmNua21KbFF1YUdsemRHOXllU1ltVkM1b2FYTjBiM0o1TG5ObGRFaHBjM1J2Y25rb1ZDNXdZWEpoYlhNdWFHbHpkRzl5ZVN4VUxtRmpkR2wyWlVsdVpHVjRLU3hVTG5CaGNtRnRjeTVvWVhOb2JtRjJKaVpVTG1oaGMyaHVZWFltSmxRdWFHRnphRzVoZGk1elpYUklZWE5vS0NsOUxGUXVjMnhwWkdWT1pYaDBQV1oxYm1OMGFXOXVLR1VzWVN4MEtYdHBaaWhVTG5CaGNtRnRjeTVzYjI5d0tYdHBaaWhVTG1GdWFXMWhkR2x1WnlseVpYUjFjbTRoTVR0VUxtWnBlRXh2YjNBb0tUdFVMbU52Ym5SaGFXNWxjbHN3WFM1amJHbGxiblJNWldaME8zSmxkSFZ5YmlCVUxuTnNhV1JsVkc4b1ZDNWhZM1JwZG1WSmJtUmxlQ3RVTG5CaGNtRnRjeTV6Ykdsa1pYTlFaWEpIY205MWNDeGhMR1VzZENsOWNtVjBkWEp1SUZRdWMyeHBaR1ZVYnloVUxtRmpkR2wyWlVsdVpHVjRLMVF1Y0dGeVlXMXpMbk5zYVdSbGMxQmxja2R5YjNWd0xHRXNaU3gwS1gwc1ZDNWZjMnhwWkdWT1pYaDBQV1oxYm1OMGFXOXVLR1VwZTNKbGRIVnliaUJVTG5Oc2FXUmxUbVY0ZENnaE1DeGxMQ0V3S1gwc1ZDNXpiR2xrWlZCeVpYWTlablZ1WTNScGIyNG9aU3hoTEhRcGUybG1LRlF1Y0dGeVlXMXpMbXh2YjNBcGUybG1LRlF1WVc1cGJXRjBhVzVuS1hKbGRIVnliaUV4TzFRdVptbDRURzl2Y0NncE8xUXVZMjl1ZEdGcGJtVnlXekJkTG1Oc2FXVnVkRXhsWm5RN2NtVjBkWEp1SUZRdWMyeHBaR1ZVYnloVUxtRmpkR2wyWlVsdVpHVjRMVEVzWVN4bExIUXBmWEpsZEhWeWJpQlVMbk5zYVdSbFZHOG9WQzVoWTNScGRtVkpibVJsZUMweExHRXNaU3gwS1gwc1ZDNWZjMnhwWkdWUWNtVjJQV1oxYm1OMGFXOXVLR1VwZTNKbGRIVnliaUJVTG5Oc2FXUmxVSEpsZGlnaE1DeGxMQ0V3S1gwc1ZDNXpiR2xrWlZKbGMyVjBQV1oxYm1OMGFXOXVLR1VzWVN4MEtYdHlaWFIxY200Z1ZDNXpiR2xrWlZSdktGUXVZV04wYVhabFNXNWtaWGdzWVN4bEtYMHNWQzVrYVhOaFlteGxWRzkxWTJoRGIyNTBjbTlzUFdaMWJtTjBhVzl1S0NsN2NtVjBkWEp1SUZRdWNHRnlZVzF6TG05dWJIbEZlSFJsY201aGJEMGhNQ3doTUgwc1ZDNWxibUZpYkdWVWIzVmphRU52Ym5SeWIydzlablZ1WTNScGIyNG9LWHR5WlhSMWNtNGdWQzV3WVhKaGJYTXViMjVzZVVWNGRHVnlibUZzUFNFeExDRXdmU3hVTG5ObGRGZHlZWEJ3WlhKVWNtRnVjMmwwYVc5dVBXWjFibU4wYVc5dUtHVXNZU2w3VkM1M2NtRndjR1Z5TG5SeVlXNXphWFJwYjI0b1pTa3NYQ0p6Ykdsa1pWd2lJVDA5VkM1d1lYSmhiWE11WldabVpXTjBKaVpVTG1WbVptVmpkSE5iVkM1d1lYSmhiWE11WldabVpXTjBYU1ltVkM1bFptWmxZM1J6VzFRdWNHRnlZVzF6TG1WbVptVmpkRjB1YzJWMFZISmhibk5wZEdsdmJpaGxLU3hVTG5CaGNtRnRjeTV3WVhKaGJHeGhlQ1ltVkM1d1lYSmhiR3hoZUNZbVZDNXdZWEpoYkd4aGVDNXpaWFJVY21GdWMybDBhVzl1S0dVcExGUXVjR0Z5WVcxekxuTmpjbTlzYkdKaGNpWW1WQzV6WTNKdmJHeGlZWEltSmxRdWMyTnliMnhzWW1GeUxuTmxkRlJ5WVc1emFYUnBiMjRvWlNrc1ZDNXdZWEpoYlhNdVkyOXVkSEp2YkNZbVZDNWpiMjUwY205c2JHVnlKaVpVTG1OdmJuUnliMnhzWlhJdWMyVjBWSEpoYm5OcGRHbHZiaWhsTEdFcExGUXVaVzFwZENoY0ltOXVVMlYwVkhKaGJuTnBkR2x2Ymx3aUxGUXNaU2w5TEZRdWMyVjBWM0poY0hCbGNsUnlZVzV6YkdGMFpUMW1kVzVqZEdsdmJpaGxMR0VzZENsN2RtRnlJSE05TUN4cFBUQTdWQzVwYzBodmNtbDZiMjUwWVd3b0tUOXpQVlF1Y25Sc1B5MWxPbVU2YVQxbExGUXVjR0Z5WVcxekxuSnZkVzVrVEdWdVozUm9jeVltS0hNOWNpaHpLU3hwUFhJb2FTa3BMRlF1Y0dGeVlXMXpMblpwY25SMVlXeFVjbUZ1YzJ4aGRHVjhmQ2hVTG5OMWNIQnZjblF1ZEhKaGJuTm1iM0p0Y3pOa1AxUXVkM0poY0hCbGNpNTBjbUZ1YzJadmNtMG9YQ0owY21GdWMyeGhkR1V6WkNoY0lpdHpLMXdpY0hnc0lGd2lLMmtyWENKd2VDd2dNSEI0S1Z3aUtUcFVMbmR5WVhCd1pYSXVkSEpoYm5ObWIzSnRLRndpZEhKaGJuTnNZWFJsS0Z3aUszTXJYQ0p3ZUN3Z1hDSXJhU3RjSW5CNEtWd2lLU2tzVkM1MGNtRnVjMnhoZEdVOVZDNXBjMGh2Y21sNmIyNTBZV3dvS1Q5ek9tazdkbUZ5SUc0c2J6MVVMbTFoZUZSeVlXNXpiR0YwWlNncExWUXViV2x1VkhKaGJuTnNZWFJsS0NrN2JqMHdQVDA5Yno4d09paGxMVlF1YldsdVZISmhibk5zWVhSbEtDa3BMMjhzYmlFOVBWUXVjSEp2WjNKbGMzTW1KbFF1ZFhCa1lYUmxVSEp2WjNKbGMzTW9aU2tzWVNZbVZDNTFjR1JoZEdWQlkzUnBkbVZKYm1SbGVDZ3BMRndpYzJ4cFpHVmNJaUU5UFZRdWNHRnlZVzF6TG1WbVptVmpkQ1ltVkM1bFptWmxZM1J6VzFRdWNHRnlZVzF6TG1WbVptVmpkRjBtSmxRdVpXWm1aV04wYzF0VUxuQmhjbUZ0Y3k1bFptWmxZM1JkTG5ObGRGUnlZVzV6YkdGMFpTaFVMblJ5WVc1emJHRjBaU2tzVkM1d1lYSmhiWE11Y0dGeVlXeHNZWGdtSmxRdWNHRnlZV3hzWVhnbUpsUXVjR0Z5WVd4c1lYZ3VjMlYwVkhKaGJuTnNZWFJsS0ZRdWRISmhibk5zWVhSbEtTeFVMbkJoY21GdGN5NXpZM0p2Ykd4aVlYSW1KbFF1YzJOeWIyeHNZbUZ5SmlaVUxuTmpjbTlzYkdKaGNpNXpaWFJVY21GdWMyeGhkR1VvVkM1MGNtRnVjMnhoZEdVcExGUXVjR0Z5WVcxekxtTnZiblJ5YjJ3bUpsUXVZMjl1ZEhKdmJHeGxjaVltVkM1amIyNTBjbTlzYkdWeUxuTmxkRlJ5WVc1emJHRjBaU2hVTG5SeVlXNXpiR0YwWlN4MEtTeFVMbVZ0YVhRb1hDSnZibE5sZEZSeVlXNXpiR0YwWlZ3aUxGUXNWQzUwY21GdWMyeGhkR1VwZlN4VUxtZGxkRlJ5WVc1emJHRjBaVDFtZFc1amRHbHZiaWhsTEdFcGUzWmhjaUIwTEhNc2FTeHlPM0psZEhWeWJpQjJiMmxrSURBOVBUMWhKaVlvWVQxY0luaGNJaWtzVkM1d1lYSmhiWE11ZG1seWRIVmhiRlJ5WVc1emJHRjBaVDlVTG5KMGJEOHRWQzUwY21GdWMyeGhkR1U2VkM1MGNtRnVjMnhoZEdVNktHazlkMmx1Wkc5M0xtZGxkRU52YlhCMWRHVmtVM1I1YkdVb1pTeHVkV3hzS1N4M2FXNWtiM2N1VjJWaVMybDBRMU5UVFdGMGNtbDRQeWh6UFdrdWRISmhibk5tYjNKdGZIeHBMbmRsWW10cGRGUnlZVzV6Wm05eWJTeHpMbk53YkdsMEtGd2lMRndpS1M1c1pXNW5kR2crTmlZbUtITTljeTV6Y0d4cGRDaGNJaXdnWENJcExtMWhjQ2htZFc1amRHbHZiaWhsS1h0eVpYUjFjbTRnWlM1eVpYQnNZV05sS0Z3aUxGd2lMRndpTGx3aUtYMHBMbXB2YVc0b1hDSXNJRndpS1Nrc2NqMXVaWGNnZDJsdVpHOTNMbGRsWWt0cGRFTlRVMDFoZEhKcGVDaGNJbTV2Ym1WY0lqMDlQWE0vWENKY0lqcHpLU2s2S0hJOWFTNU5iM3BVY21GdWMyWnZjbTE4ZkdrdVQxUnlZVzV6Wm05eWJYeDhhUzVOYzFSeVlXNXpabTl5Ylh4OGFTNXRjMVJ5WVc1elptOXliWHg4YVM1MGNtRnVjMlp2Y20xOGZHa3VaMlYwVUhKdmNHVnlkSGxXWVd4MVpTaGNJblJ5WVc1elptOXliVndpS1M1eVpYQnNZV05sS0Z3aWRISmhibk5zWVhSbEtGd2lMRndpYldGMGNtbDRLREVzSURBc0lEQXNJREVzWENJcExIUTljaTUwYjFOMGNtbHVaeWdwTG5Od2JHbDBLRndpTEZ3aUtTa3NYQ0o0WENJOVBUMWhKaVlvY3oxM2FXNWtiM2N1VjJWaVMybDBRMU5UVFdGMGNtbDRQM0l1YlRReE9qRTJQVDA5ZEM1c1pXNW5kR2cvY0dGeWMyVkdiRzloZENoMFd6RXlYU2s2Y0dGeWMyVkdiRzloZENoMFd6UmRLU2tzWENKNVhDSTlQVDFoSmlZb2N6MTNhVzVrYjNjdVYyVmlTMmwwUTFOVFRXRjBjbWw0UDNJdWJUUXlPakUyUFQwOWRDNXNaVzVuZEdnL2NHRnljMlZHYkc5aGRDaDBXekV6WFNrNmNHRnljMlZHYkc5aGRDaDBXelZkS1Nrc1ZDNXlkR3dtSm5NbUppaHpQUzF6S1N4emZId3dLWDBzVkM1blpYUlhjbUZ3Y0dWeVZISmhibk5zWVhSbFBXWjFibU4wYVc5dUtHVXBlM0psZEhWeWJpQjJiMmxrSURBOVBUMWxKaVlvWlQxVUxtbHpTRzl5YVhwdmJuUmhiQ2dwUDF3aWVGd2lPbHdpZVZ3aUtTeFVMbWRsZEZSeVlXNXpiR0YwWlNoVUxuZHlZWEJ3WlhKYk1GMHNaU2w5TEZRdWIySnpaWEoyWlhKelBWdGRMRlF1YVc1cGRFOWljMlZ5ZG1WeWN6MW1kVzVqZEdsdmJpZ3BlMmxtS0ZRdWNHRnlZVzF6TG05aWMyVnlkbVZRWVhKbGJuUnpLV1p2Y2loMllYSWdaVDFVTG1OdmJuUmhhVzVsY2k1d1lYSmxiblJ6S0Nrc1lUMHdPMkU4WlM1c1pXNW5kR2c3WVNzcktXd29aVnRoWFNrN2JDaFVMbU52Ym5SaGFXNWxjbHN3WFN4N1kyaHBiR1JNYVhOME9pRXhmU2tzYkNoVUxuZHlZWEJ3WlhKYk1GMHNlMkYwZEhKcFluVjBaWE02SVRGOUtYMHNWQzVrYVhOamIyNXVaV04wVDJKelpYSjJaWEp6UFdaMWJtTjBhVzl1S0NsN1ptOXlLSFpoY2lCbFBUQTdaVHhVTG05aWMyVnlkbVZ5Y3k1c1pXNW5kR2c3WlNzcktWUXViMkp6WlhKMlpYSnpXMlZkTG1ScGMyTnZibTVsWTNRb0tUdFVMbTlpYzJWeWRtVnljejFiWFgwc1ZDNWpjbVZoZEdWTWIyOXdQV1oxYm1OMGFXOXVLQ2w3VkM1M2NtRndjR1Z5TG1Ob2FXeGtjbVZ1S0Z3aUxsd2lLMVF1Y0dGeVlXMXpMbk5zYVdSbFEyeGhjM01yWENJdVhDSXJWQzV3WVhKaGJYTXVjMnhwWkdWRWRYQnNhV05oZEdWRGJHRnpjeWt1Y21WdGIzWmxLQ2s3ZG1GeUlHRTlWQzUzY21Gd2NHVnlMbU5vYVd4a2NtVnVLRndpTGx3aUsxUXVjR0Z5WVcxekxuTnNhV1JsUTJ4aGMzTXBPMXdpWVhWMGIxd2lJVDA5VkM1d1lYSmhiWE11YzJ4cFpHVnpVR1Z5Vm1sbGQzeDhWQzV3WVhKaGJYTXViRzl2Y0dWa1UyeHBaR1Z6Zkh3b1ZDNXdZWEpoYlhNdWJHOXZjR1ZrVTJ4cFpHVnpQV0V1YkdWdVozUm9LU3hVTG14dmIzQmxaRk5zYVdSbGN6MXdZWEp6WlVsdWRDaFVMbkJoY21GdGN5NXNiMjl3WldSVGJHbGtaWE44ZkZRdWNHRnlZVzF6TG5Oc2FXUmxjMUJsY2xacFpYY3NNVEFwTEZRdWJHOXZjR1ZrVTJ4cFpHVnpQVlF1Ykc5dmNHVmtVMnhwWkdWeksxUXVjR0Z5WVcxekxteHZiM0JCWkdScGRHbHZibUZzVTJ4cFpHVnpMRlF1Ykc5dmNHVmtVMnhwWkdWelBtRXViR1Z1WjNSb0ppWW9WQzVzYjI5d1pXUlRiR2xrWlhNOVlTNXNaVzVuZEdncE8zWmhjaUIwTEhNOVcxMHNhVDFiWFR0bWIzSW9ZUzVsWVdOb0tHWjFibU4wYVc5dUtIUXNjaWw3ZG1GeUlHNDlaU2gwYUdsektUdDBQRlF1Ykc5dmNHVmtVMnhwWkdWekppWnBMbkIxYzJnb2Npa3NkRHhoTG14bGJtZDBhQ1ltZEQ0OVlTNXNaVzVuZEdndFZDNXNiMjl3WldSVGJHbGtaWE1tSm5NdWNIVnphQ2h5S1N4dUxtRjBkSElvWENKa1lYUmhMWE4zYVhCbGNpMXpiR2xrWlMxcGJtUmxlRndpTEhRcGZTa3NkRDB3TzNROGFTNXNaVzVuZEdnN2RDc3JLVlF1ZDNKaGNIQmxjaTVoY0hCbGJtUW9aU2hwVzNSZExtTnNiMjVsVG05a1pTZ2hNQ2twTG1Ga1pFTnNZWE56S0ZRdWNHRnlZVzF6TG5Oc2FXUmxSSFZ3YkdsallYUmxRMnhoYzNNcEtUdG1iM0lvZEQxekxteGxibWQwYUMweE8zUStQVEE3ZEMwdEtWUXVkM0poY0hCbGNpNXdjbVZ3Wlc1a0tHVW9jMXQwWFM1amJHOXVaVTV2WkdVb0lUQXBLUzVoWkdSRGJHRnpjeWhVTG5CaGNtRnRjeTV6Ykdsa1pVUjFjR3hwWTJGMFpVTnNZWE56S1NsOUxGUXVaR1Z6ZEhKdmVVeHZiM0E5Wm5WdVkzUnBiMjRvS1h0VUxuZHlZWEJ3WlhJdVkyaHBiR1J5Wlc0b1hDSXVYQ0lyVkM1d1lYSmhiWE11YzJ4cFpHVkRiR0Z6Y3l0Y0lpNWNJaXRVTG5CaGNtRnRjeTV6Ykdsa1pVUjFjR3hwWTJGMFpVTnNZWE56S1M1eVpXMXZkbVVvS1N4VUxuTnNhV1JsY3k1eVpXMXZkbVZCZEhSeUtGd2laR0YwWVMxemQybHdaWEl0YzJ4cFpHVXRhVzVrWlhoY0lpbDlMRlF1Y21WTWIyOXdQV1oxYm1OMGFXOXVLR1VwZTNaaGNpQmhQVlF1WVdOMGFYWmxTVzVrWlhndFZDNXNiMjl3WldSVGJHbGtaWE03VkM1a1pYTjBjbTk1VEc5dmNDZ3BMRlF1WTNKbFlYUmxURzl2Y0NncExGUXVkWEJrWVhSbFUyeHBaR1Z6VTJsNlpTZ3BMR1VtSmxRdWMyeHBaR1ZVYnloaEsxUXViRzl2Y0dWa1UyeHBaR1Z6TERBc0lURXBmU3hVTG1acGVFeHZiM0E5Wm5WdVkzUnBiMjRvS1h0MllYSWdaVHRVTG1GamRHbDJaVWx1WkdWNFBGUXViRzl2Y0dWa1UyeHBaR1Z6UHlobFBWUXVjMnhwWkdWekxteGxibWQwYUMwektsUXViRzl2Y0dWa1UyeHBaR1Z6SzFRdVlXTjBhWFpsU1c1a1pYZ3NaU3M5VkM1c2IyOXdaV1JUYkdsa1pYTXNWQzV6Ykdsa1pWUnZLR1VzTUN3aE1Td2hNQ2twT2loY0ltRjFkRzljSWowOVBWUXVjR0Z5WVcxekxuTnNhV1JsYzFCbGNsWnBaWGNtSmxRdVlXTjBhWFpsU1c1a1pYZytQVElxVkM1c2IyOXdaV1JUYkdsa1pYTjhmRlF1WVdOMGFYWmxTVzVrWlhnK1ZDNXpiR2xrWlhNdWJHVnVaM1JvTFRJcVZDNXdZWEpoYlhNdWMyeHBaR1Z6VUdWeVZtbGxkeWttSmlobFBTMVVMbk5zYVdSbGN5NXNaVzVuZEdnclZDNWhZM1JwZG1WSmJtUmxlQ3RVTG14dmIzQmxaRk5zYVdSbGN5eGxLejFVTG14dmIzQmxaRk5zYVdSbGN5eFVMbk5zYVdSbFZHOG9aU3d3TENFeExDRXdLU2w5TEZRdVlYQndaVzVrVTJ4cFpHVTlablZ1WTNScGIyNG9aU2w3YVdZb1ZDNXdZWEpoYlhNdWJHOXZjQ1ltVkM1a1pYTjBjbTk1VEc5dmNDZ3BMRndpYjJKcVpXTjBYQ0k5UFhSNWNHVnZaaUJsSmlabExteGxibWQwYUNsbWIzSW9kbUZ5SUdFOU1EdGhQR1V1YkdWdVozUm9PMkVyS3lsbFcyRmRKaVpVTG5keVlYQndaWEl1WVhCd1pXNWtLR1ZiWVYwcE8yVnNjMlVnVkM1M2NtRndjR1Z5TG1Gd2NHVnVaQ2hsS1R0VUxuQmhjbUZ0Y3k1c2IyOXdKaVpVTG1OeVpXRjBaVXh2YjNBb0tTeFVMbkJoY21GdGN5NXZZbk5sY25abGNpWW1WQzV6ZFhCd2IzSjBMbTlpYzJWeWRtVnlmSHhVTG5Wd1pHRjBaU2doTUNsOUxGUXVjSEpsY0dWdVpGTnNhV1JsUFdaMWJtTjBhVzl1S0dVcGUxUXVjR0Z5WVcxekxteHZiM0FtSmxRdVpHVnpkSEp2ZVV4dmIzQW9LVHQyWVhJZ1lUMVVMbUZqZEdsMlpVbHVaR1Y0S3pFN2FXWW9YQ0p2WW1wbFkzUmNJajA5ZEhsd1pXOW1JR1VtSm1VdWJHVnVaM1JvS1h0bWIzSW9kbUZ5SUhROU1EdDBQR1V1YkdWdVozUm9PM1FyS3lsbFczUmRKaVpVTG5keVlYQndaWEl1Y0hKbGNHVnVaQ2hsVzNSZEtUdGhQVlF1WVdOMGFYWmxTVzVrWlhnclpTNXNaVzVuZEdoOVpXeHpaU0JVTG5keVlYQndaWEl1Y0hKbGNHVnVaQ2hsS1R0VUxuQmhjbUZ0Y3k1c2IyOXdKaVpVTG1OeVpXRjBaVXh2YjNBb0tTeFVMbkJoY21GdGN5NXZZbk5sY25abGNpWW1WQzV6ZFhCd2IzSjBMbTlpYzJWeWRtVnlmSHhVTG5Wd1pHRjBaU2doTUNrc1ZDNXpiR2xrWlZSdktHRXNNQ3doTVNsOUxGUXVjbVZ0YjNabFUyeHBaR1U5Wm5WdVkzUnBiMjRvWlNsN1ZDNXdZWEpoYlhNdWJHOXZjQ1ltS0ZRdVpHVnpkSEp2ZVV4dmIzQW9LU3hVTG5Oc2FXUmxjejFVTG5keVlYQndaWEl1WTJocGJHUnlaVzRvWENJdVhDSXJWQzV3WVhKaGJYTXVjMnhwWkdWRGJHRnpjeWtwTzNaaGNpQmhMSFE5VkM1aFkzUnBkbVZKYm1SbGVEdHBaaWhjSW05aWFtVmpkRndpUFQxMGVYQmxiMllnWlNZbVpTNXNaVzVuZEdncGUyWnZjaWgyWVhJZ2N6MHdPM004WlM1c1pXNW5kR2c3Y3lzcktXRTlaVnR6WFN4VUxuTnNhV1JsYzF0aFhTWW1WQzV6Ykdsa1pYTXVaWEVvWVNrdWNtVnRiM1psS0Nrc1lUeDBKaVowTFMwN2REMU5ZWFJvTG0xaGVDaDBMREFwZldWc2MyVWdZVDFsTEZRdWMyeHBaR1Z6VzJGZEppWlVMbk5zYVdSbGN5NWxjU2hoS1M1eVpXMXZkbVVvS1N4aFBIUW1KblF0TFN4MFBVMWhkR2d1YldGNEtIUXNNQ2s3VkM1d1lYSmhiWE11Ykc5dmNDWW1WQzVqY21WaGRHVk1iMjl3S0Nrc1ZDNXdZWEpoYlhNdWIySnpaWEoyWlhJbUpsUXVjM1Z3Y0c5eWRDNXZZbk5sY25abGNueDhWQzUxY0dSaGRHVW9JVEFwTEZRdWNHRnlZVzF6TG14dmIzQS9WQzV6Ykdsa1pWUnZLSFFyVkM1c2IyOXdaV1JUYkdsa1pYTXNNQ3doTVNrNlZDNXpiR2xrWlZSdktIUXNNQ3doTVNsOUxGUXVjbVZ0YjNabFFXeHNVMnhwWkdWelBXWjFibU4wYVc5dUtDbDdabTl5S0haaGNpQmxQVnRkTEdFOU1EdGhQRlF1YzJ4cFpHVnpMbXhsYm1kMGFEdGhLeXNwWlM1d2RYTm9LR0VwTzFRdWNtVnRiM1psVTJ4cFpHVW9aU2w5TEZRdVpXWm1aV04wY3oxN1ptRmtaVHA3YzJWMFZISmhibk5zWVhSbE9tWjFibU4wYVc5dUtDbDdabTl5S0haaGNpQmxQVEE3WlR4VUxuTnNhV1JsY3k1c1pXNW5kR2c3WlNzcktYdDJZWElnWVQxVUxuTnNhV1JsY3k1bGNTaGxLU3gwUFdGYk1GMHVjM2RwY0dWeVUyeHBaR1ZQWm1aelpYUXNjejB0ZER0VUxuQmhjbUZ0Y3k1MmFYSjBkV0ZzVkhKaGJuTnNZWFJsZkh3b2N5MDlWQzUwY21GdWMyeGhkR1VwTzNaaGNpQnBQVEE3VkM1cGMwaHZjbWw2YjI1MFlXd29LWHg4S0drOWN5eHpQVEFwTzNaaGNpQnlQVlF1Y0dGeVlXMXpMbVpoWkdVdVkzSnZjM05HWVdSbFAwMWhkR2d1YldGNEtERXRUV0YwYUM1aFluTW9ZVnN3WFM1d2NtOW5jbVZ6Y3lrc01DazZNU3ROWVhSb0xtMXBiaWhOWVhSb0xtMWhlQ2hoV3pCZExuQnliMmR5WlhOekxDMHhLU3d3S1R0aExtTnpjeWg3YjNCaFkybDBlVHB5ZlNrdWRISmhibk5tYjNKdEtGd2lkSEpoYm5Oc1lYUmxNMlFvWENJcmN5dGNJbkI0TENCY0lpdHBLMXdpY0hnc0lEQndlQ2xjSWlsOWZTeHpaWFJVY21GdWMybDBhVzl1T21aMWJtTjBhVzl1S0dVcGUybG1LRlF1YzJ4cFpHVnpMblJ5WVc1emFYUnBiMjRvWlNrc1ZDNXdZWEpoYlhNdWRtbHlkSFZoYkZSeVlXNXpiR0YwWlNZbU1DRTlQV1VwZTNaaGNpQmhQU0V4TzFRdWMyeHBaR1Z6TG5SeVlXNXphWFJwYjI1RmJtUW9ablZ1WTNScGIyNG9LWHRwWmlnaFlTWW1WQ2w3WVQwaE1DeFVMbUZ1YVcxaGRHbHVaejBoTVR0bWIzSW9kbUZ5SUdVOVcxd2lkMlZpYTJsMFZISmhibk5wZEdsdmJrVnVaRndpTEZ3aWRISmhibk5wZEdsdmJtVnVaRndpTEZ3aWIxUnlZVzV6YVhScGIyNUZibVJjSWl4Y0lrMVRWSEpoYm5OcGRHbHZia1Z1WkZ3aUxGd2liWE5VY21GdWMybDBhVzl1Ulc1a1hDSmRMSFE5TUR0MFBHVXViR1Z1WjNSb08zUXJLeWxVTG5keVlYQndaWEl1ZEhKcFoyZGxjaWhsVzNSZEtYMTlLWDE5ZlN4bWJHbHdPbnR6WlhSVWNtRnVjMnhoZEdVNlpuVnVZM1JwYjI0b0tYdG1iM0lvZG1GeUlHRTlNRHRoUEZRdWMyeHBaR1Z6TG14bGJtZDBhRHRoS3lzcGUzWmhjaUIwUFZRdWMyeHBaR1Z6TG1WeEtHRXBMSE05ZEZzd1hTNXdjbTluY21WemN6dFVMbkJoY21GdGN5NW1iR2x3TG14cGJXbDBVbTkwWVhScGIyNG1KaWh6UFUxaGRHZ3ViV0Y0S0UxaGRHZ3ViV2x1S0hSYk1GMHVjSEp2WjNKbGMzTXNNU2tzTFRFcEtUdDJZWElnYVQxMFd6QmRMbk4zYVhCbGNsTnNhV1JsVDJabWMyVjBMSEk5TFRFNE1DcHpMRzQ5Y2l4dlBUQXNiRDB0YVN4d1BUQTdhV1lvVkM1cGMwaHZjbWw2YjI1MFlXd29LVDlVTG5KMGJDWW1LRzQ5TFc0cE9paHdQV3dzYkQwd0xHODlMVzRzYmowd0tTeDBXekJkTG5OMGVXeGxMbnBKYm1SbGVEMHRUV0YwYUM1aFluTW9UV0YwYUM1eWIzVnVaQ2h6S1NrclZDNXpiR2xrWlhNdWJHVnVaM1JvTEZRdWNHRnlZVzF6TG1ac2FYQXVjMnhwWkdWVGFHRmtiM2R6S1h0MllYSWdaRDFVTG1selNHOXlhWHB2Ym5SaGJDZ3BQM1F1Wm1sdVpDaGNJaTV6ZDJsd1pYSXRjMnhwWkdVdGMyaGhaRzkzTFd4bFpuUmNJaWs2ZEM1bWFXNWtLRndpTG5OM2FYQmxjaTF6Ykdsa1pTMXphR0ZrYjNjdGRHOXdYQ0lwTEhVOVZDNXBjMGh2Y21sNmIyNTBZV3dvS1Q5MExtWnBibVFvWENJdWMzZHBjR1Z5TFhOc2FXUmxMWE5vWVdSdmR5MXlhV2RvZEZ3aUtUcDBMbVpwYm1Rb1hDSXVjM2RwY0dWeUxYTnNhV1JsTFhOb1lXUnZkeTFpYjNSMGIyMWNJaWs3TUQwOVBXUXViR1Z1WjNSb0ppWW9aRDFsS0NjOFpHbDJJR05zWVhOelBWd2ljM2RwY0dWeUxYTnNhV1JsTFhOb1lXUnZkeTBuS3loVUxtbHpTRzl5YVhwdmJuUmhiQ2dwUDF3aWJHVm1kRndpT2x3aWRHOXdYQ0lwS3lkY0lqNDhMMlJwZGo0bktTeDBMbUZ3Y0dWdVpDaGtLU2tzTUQwOVBYVXViR1Z1WjNSb0ppWW9kVDFsS0NjOFpHbDJJR05zWVhOelBWd2ljM2RwY0dWeUxYTnNhV1JsTFhOb1lXUnZkeTBuS3loVUxtbHpTRzl5YVhwdmJuUmhiQ2dwUDF3aWNtbG5hSFJjSWpwY0ltSnZkSFJ2YlZ3aUtTc25YQ0krUEM5a2FYWStKeWtzZEM1aGNIQmxibVFvZFNrcExHUXViR1Z1WjNSb0ppWW9aRnN3WFM1emRIbHNaUzV2Y0dGamFYUjVQVTFoZEdndWJXRjRLQzF6TERBcEtTeDFMbXhsYm1kMGFDWW1LSFZiTUYwdWMzUjViR1V1YjNCaFkybDBlVDFOWVhSb0xtMWhlQ2h6TERBcEtYMTBMblJ5WVc1elptOXliU2hjSW5SeVlXNXpiR0YwWlROa0tGd2lLMndyWENKd2VDd2dYQ0lyY0N0Y0luQjRMQ0F3Y0hncElISnZkR0YwWlZnb1hDSXJieXRjSW1SbFp5a2djbTkwWVhSbFdTaGNJaXR1SzF3aVpHVm5LVndpS1gxOUxITmxkRlJ5WVc1emFYUnBiMjQ2Wm5WdVkzUnBiMjRvWVNsN2FXWW9WQzV6Ykdsa1pYTXVkSEpoYm5OcGRHbHZiaWhoS1M1bWFXNWtLRndpTG5OM2FYQmxjaTF6Ykdsa1pTMXphR0ZrYjNjdGRHOXdMQ0F1YzNkcGNHVnlMWE5zYVdSbExYTm9ZV1J2ZHkxeWFXZG9kQ3dnTG5OM2FYQmxjaTF6Ykdsa1pTMXphR0ZrYjNjdFltOTBkRzl0TENBdWMzZHBjR1Z5TFhOc2FXUmxMWE5vWVdSdmR5MXNaV1owWENJcExuUnlZVzV6YVhScGIyNG9ZU2tzVkM1d1lYSmhiWE11ZG1seWRIVmhiRlJ5WVc1emJHRjBaU1ltTUNFOVBXRXBlM1poY2lCMFBTRXhPMVF1YzJ4cFpHVnpMbVZ4S0ZRdVlXTjBhWFpsU1c1a1pYZ3BMblJ5WVc1emFYUnBiMjVGYm1Rb1puVnVZM1JwYjI0b0tYdHBaaWdoZENZbVZDWW1aU2gwYUdsektTNW9ZWE5EYkdGemN5aFVMbkJoY21GdGN5NXpiR2xrWlVGamRHbDJaVU5zWVhOektTbDdkRDBoTUN4VUxtRnVhVzFoZEdsdVp6MGhNVHRtYjNJb2RtRnlJR0U5VzF3aWQyVmlhMmwwVkhKaGJuTnBkR2x2YmtWdVpGd2lMRndpZEhKaGJuTnBkR2x2Ym1WdVpGd2lMRndpYjFSeVlXNXphWFJwYjI1RmJtUmNJaXhjSWsxVFZISmhibk5wZEdsdmJrVnVaRndpTEZ3aWJYTlVjbUZ1YzJsMGFXOXVSVzVrWENKZExITTlNRHR6UEdFdWJHVnVaM1JvTzNNckt5bFVMbmR5WVhCd1pYSXVkSEpwWjJkbGNpaGhXM05kS1gxOUtYMTlmU3hqZFdKbE9udHpaWFJVY21GdWMyeGhkR1U2Wm5WdVkzUnBiMjRvS1h0MllYSWdZU3gwUFRBN1ZDNXdZWEpoYlhNdVkzVmlaUzV6YUdGa2IzY21KaWhVTG1selNHOXlhWHB2Ym5SaGJDZ3BQeWhoUFZRdWQzSmhjSEJsY2k1bWFXNWtLRndpTG5OM2FYQmxjaTFqZFdKbExYTm9ZV1J2ZDF3aUtTd3dQVDA5WVM1c1pXNW5kR2dtSmloaFBXVW9KenhrYVhZZ1kyeGhjM005WENKemQybHdaWEl0WTNWaVpTMXphR0ZrYjNkY0lqNDhMMlJwZGo0bktTeFVMbmR5WVhCd1pYSXVZWEJ3Wlc1a0tHRXBLU3hoTG1OemN5aDdhR1ZwWjJoME9sUXVkMmxrZEdnclhDSndlRndpZlNrcE9paGhQVlF1WTI5dWRHRnBibVZ5TG1acGJtUW9YQ0l1YzNkcGNHVnlMV04xWW1VdGMyaGhaRzkzWENJcExEQTlQVDFoTG14bGJtZDBhQ1ltS0dFOVpTZ25QR1JwZGlCamJHRnpjejFjSW5OM2FYQmxjaTFqZFdKbExYTm9ZV1J2ZDF3aVBqd3ZaR2wyUGljcExGUXVZMjl1ZEdGcGJtVnlMbUZ3Y0dWdVpDaGhLU2twS1R0bWIzSW9kbUZ5SUhNOU1EdHpQRlF1YzJ4cFpHVnpMbXhsYm1kMGFEdHpLeXNwZTNaaGNpQnBQVlF1YzJ4cFpHVnpMbVZ4S0hNcExISTlPVEFxY3l4dVBVMWhkR2d1Wm14dmIzSW9jaTh6TmpBcE8xUXVjblJzSmlZb2NqMHRjaXh1UFUxaGRHZ3VabXh2YjNJb0xYSXZNell3S1NrN2RtRnlJRzg5VFdGMGFDNXRZWGdvVFdGMGFDNXRhVzRvYVZzd1hTNXdjbTluY21WemN5d3hLU3d0TVNrc2JEMHdMSEE5TUN4a1BUQTdjeVUwUFQwd1B5aHNQVFFxTFc0cVZDNXphWHBsTEdROU1DazZLSE10TVNrbE5EMDlNRDhvYkQwd0xHUTlOQ290YmlwVUxuTnBlbVVwT2loekxUSXBKVFE5UFRBL0tHdzlWQzV6YVhwbEt6UXFiaXBVTG5OcGVtVXNaRDFVTG5OcGVtVXBPaWh6TFRNcEpUUTlQVEFtSmloc1BTMVVMbk5wZW1Vc1pEMHpLbFF1YzJsNlpTczBLbFF1YzJsNlpTcHVLU3hVTG5KMGJDWW1LR3c5TFd3cExGUXVhWE5JYjNKcGVtOXVkR0ZzS0NsOGZDaHdQV3dzYkQwd0tUdDJZWElnZFQxY0luSnZkR0YwWlZnb1hDSXJLRlF1YVhOSWIzSnBlbTl1ZEdGc0tDay9NRG90Y2lrclhDSmtaV2NwSUhKdmRHRjBaVmtvWENJcktGUXVhWE5JYjNKcGVtOXVkR0ZzS0NrL2Nqb3dLU3RjSW1SbFp5a2dkSEpoYm5Oc1lYUmxNMlFvWENJcmJDdGNJbkI0TENCY0lpdHdLMXdpY0hnc0lGd2lLMlFyWENKd2VDbGNJanRwWmlodlBEMHhKaVp2UGkweEppWW9kRDA1TUNwekt6a3dLbThzVkM1eWRHd21KaWgwUFRrd0tpMXpMVGt3S204cEtTeHBMblJ5WVc1elptOXliU2gxS1N4VUxuQmhjbUZ0Y3k1amRXSmxMbk5zYVdSbFUyaGhaRzkzY3lsN2RtRnlJR005VkM1cGMwaHZjbWw2YjI1MFlXd29LVDlwTG1acGJtUW9YQ0l1YzNkcGNHVnlMWE5zYVdSbExYTm9ZV1J2ZHkxc1pXWjBYQ0lwT21rdVptbHVaQ2hjSWk1emQybHdaWEl0YzJ4cFpHVXRjMmhoWkc5M0xYUnZjRndpS1N4dFBWUXVhWE5JYjNKcGVtOXVkR0ZzS0NrL2FTNW1hVzVrS0Z3aUxuTjNhWEJsY2kxemJHbGtaUzF6YUdGa2IzY3RjbWxuYUhSY0lpazZhUzVtYVc1a0tGd2lMbk4zYVhCbGNpMXpiR2xrWlMxemFHRmtiM2N0WW05MGRHOXRYQ0lwT3pBOVBUMWpMbXhsYm1kMGFDWW1LR005WlNnblBHUnBkaUJqYkdGemN6MWNJbk4zYVhCbGNpMXpiR2xrWlMxemFHRmtiM2N0Snlzb1ZDNXBjMGh2Y21sNmIyNTBZV3dvS1Q5Y0lteGxablJjSWpwY0luUnZjRndpS1NzblhDSStQQzlrYVhZK0p5a3NhUzVoY0hCbGJtUW9ZeWtwTERBOVBUMXRMbXhsYm1kMGFDWW1LRzA5WlNnblBHUnBkaUJqYkdGemN6MWNJbk4zYVhCbGNpMXpiR2xrWlMxemFHRmtiM2N0Snlzb1ZDNXBjMGh2Y21sNmIyNTBZV3dvS1Q5Y0luSnBaMmgwWENJNlhDSmliM1IwYjIxY0lpa3JKMXdpUGp3dlpHbDJQaWNwTEdrdVlYQndaVzVrS0cwcEtTeGpMbXhsYm1kMGFDWW1LR05iTUYwdWMzUjViR1V1YjNCaFkybDBlVDFOWVhSb0xtMWhlQ2d0Ynl3d0tTa3NiUzVzWlc1bmRHZ21KaWh0V3pCZExuTjBlV3hsTG05d1lXTnBkSGs5VFdGMGFDNXRZWGdvYnl3d0tTbDlmV2xtS0ZRdWQzSmhjSEJsY2k1amMzTW9lMXdpTFhkbFltdHBkQzEwY21GdWMyWnZjbTB0YjNKcFoybHVYQ0k2WENJMU1DVWdOVEFsSUMxY0lpdFVMbk5wZW1Vdk1pdGNJbkI0WENJc1hDSXRiVzk2TFhSeVlXNXpabTl5YlMxdmNtbG5hVzVjSWpwY0lqVXdKU0ExTUNVZ0xWd2lLMVF1YzJsNlpTOHlLMXdpY0hoY0lpeGNJaTF0Y3kxMGNtRnVjMlp2Y20wdGIzSnBaMmx1WENJNlhDSTFNQ1VnTlRBbElDMWNJaXRVTG5OcGVtVXZNaXRjSW5CNFhDSXNYQ0owY21GdWMyWnZjbTB0YjNKcFoybHVYQ0k2WENJMU1DVWdOVEFsSUMxY0lpdFVMbk5wZW1Vdk1pdGNJbkI0WENKOUtTeFVMbkJoY21GdGN5NWpkV0psTG5Ob1lXUnZkeWxwWmloVUxtbHpTRzl5YVhwdmJuUmhiQ2dwS1dFdWRISmhibk5tYjNKdEtGd2lkSEpoYm5Oc1lYUmxNMlFvTUhCNExDQmNJaXNvVkM1M2FXUjBhQzh5SzFRdWNHRnlZVzF6TG1OMVltVXVjMmhoWkc5M1QyWm1jMlYwS1N0Y0luQjRMQ0JjSWlzdFZDNTNhV1IwYUM4eUsxd2ljSGdwSUhKdmRHRjBaVmdvT1RCa1pXY3BJSEp2ZEdGMFpWb29NR1JsWnlrZ2MyTmhiR1VvWENJclZDNXdZWEpoYlhNdVkzVmlaUzV6YUdGa2IzZFRZMkZzWlN0Y0lpbGNJaWs3Wld4elpYdDJZWElnYUQxTllYUm9MbUZpY3loMEtTMDVNQ3BOWVhSb0xtWnNiMjl5S0UxaGRHZ3VZV0p6S0hRcEx6a3dLU3huUFRFdU5TMG9UV0YwYUM1emFXNG9NaXBvS2sxaGRHZ3VVRWt2TXpZd0tTOHlLMDFoZEdndVkyOXpLRElxYUNwTllYUm9MbEJKTHpNMk1Da3ZNaWtzWmoxVUxuQmhjbUZ0Y3k1amRXSmxMbk5vWVdSdmQxTmpZV3hsTEhZOVZDNXdZWEpoYlhNdVkzVmlaUzV6YUdGa2IzZFRZMkZzWlM5bkxIYzlWQzV3WVhKaGJYTXVZM1ZpWlM1emFHRmtiM2RQWm1aelpYUTdZUzUwY21GdWMyWnZjbTBvWENKelkyRnNaVE5rS0Z3aUsyWXJYQ0lzSURFc0lGd2lLM1lyWENJcElIUnlZVzV6YkdGMFpUTmtLREJ3ZUN3Z1hDSXJLRlF1YUdWcFoyaDBMeklyZHlrclhDSndlQ3dnWENJckxWUXVhR1ZwWjJoMEx6SXZkaXRjSW5CNEtTQnliM1JoZEdWWUtDMDVNR1JsWnlsY0lpbDlkbUZ5SUhrOVZDNXBjMU5oWm1GeWFYeDhWQzVwYzFWcFYyVmlWbWxsZHo4dFZDNXphWHBsTHpJNk1EdFVMbmR5WVhCd1pYSXVkSEpoYm5ObWIzSnRLRndpZEhKaGJuTnNZWFJsTTJRb01IQjRMREFzWENJcmVTdGNJbkI0S1NCeWIzUmhkR1ZZS0Z3aUt5aFVMbWx6U0c5eWFYcHZiblJoYkNncFB6QTZkQ2tyWENKa1pXY3BJSEp2ZEdGMFpWa29YQ0lyS0ZRdWFYTkliM0pwZW05dWRHRnNLQ2svTFhRNk1Da3JYQ0prWldjcFhDSXBmU3h6WlhSVWNtRnVjMmwwYVc5dU9tWjFibU4wYVc5dUtHVXBlMVF1YzJ4cFpHVnpMblJ5WVc1emFYUnBiMjRvWlNrdVptbHVaQ2hjSWk1emQybHdaWEl0YzJ4cFpHVXRjMmhoWkc5M0xYUnZjQ3dnTG5OM2FYQmxjaTF6Ykdsa1pTMXphR0ZrYjNjdGNtbG5hSFFzSUM1emQybHdaWEl0YzJ4cFpHVXRjMmhoWkc5M0xXSnZkSFJ2YlN3Z0xuTjNhWEJsY2kxemJHbGtaUzF6YUdGa2IzY3RiR1ZtZEZ3aUtTNTBjbUZ1YzJsMGFXOXVLR1VwTEZRdWNHRnlZVzF6TG1OMVltVXVjMmhoWkc5M0ppWWhWQzVwYzBodmNtbDZiMjUwWVd3b0tTWW1WQzVqYjI1MFlXbHVaWEl1Wm1sdVpDaGNJaTV6ZDJsd1pYSXRZM1ZpWlMxemFHRmtiM2RjSWlrdWRISmhibk5wZEdsdmJpaGxLWDE5TEdOdmRtVnlabXh2ZHpwN2MyVjBWSEpoYm5Oc1lYUmxPbVoxYm1OMGFXOXVLQ2w3Wm05eUtIWmhjaUJoUFZRdWRISmhibk5zWVhSbExIUTlWQzVwYzBodmNtbDZiMjUwWVd3b0tUOHRZU3RVTG5kcFpIUm9Mekk2TFdFclZDNW9aV2xuYUhRdk1peHpQVlF1YVhOSWIzSnBlbTl1ZEdGc0tDay9WQzV3WVhKaGJYTXVZMjkyWlhKbWJHOTNMbkp2ZEdGMFpUb3RWQzV3WVhKaGJYTXVZMjkyWlhKbWJHOTNMbkp2ZEdGMFpTeHBQVlF1Y0dGeVlXMXpMbU52ZG1WeVpteHZkeTVrWlhCMGFDeHlQVEFzYmoxVUxuTnNhV1JsY3k1c1pXNW5kR2c3Y2p4dU8zSXJLeWw3ZG1GeUlHODlWQzV6Ykdsa1pYTXVaWEVvY2lrc2JEMVVMbk5zYVdSbGMxTnBlbVZ6UjNKcFpGdHlYU3h3UFc5Yk1GMHVjM2RwY0dWeVUyeHBaR1ZQWm1aelpYUXNaRDBvZEMxd0xXd3ZNaWt2YkNwVUxuQmhjbUZ0Y3k1amIzWmxjbVpzYjNjdWJXOWthV1pwWlhJc2RUMVVMbWx6U0c5eWFYcHZiblJoYkNncFAzTXFaRG93TEdNOVZDNXBjMGh2Y21sNmIyNTBZV3dvS1Q4d09uTXFaQ3h0UFMxcEtrMWhkR2d1WVdKektHUXBMR2c5VkM1cGMwaHZjbWw2YjI1MFlXd29LVDh3T2xRdWNHRnlZVzF6TG1OdmRtVnlabXh2ZHk1emRISmxkR05vS21Rc1p6MVVMbWx6U0c5eWFYcHZiblJoYkNncFAxUXVjR0Z5WVcxekxtTnZkbVZ5Wm14dmR5NXpkSEpsZEdOb0ttUTZNRHROWVhSb0xtRmljeWhuS1R3dU1EQXhKaVlvWnowd0tTeE5ZWFJvTG1GaWN5aG9LVHd1TURBeEppWW9hRDB3S1N4TllYUm9MbUZpY3lodEtUd3VNREF4SmlZb2JUMHdLU3hOWVhSb0xtRmljeWgxS1R3dU1EQXhKaVlvZFQwd0tTeE5ZWFJvTG1GaWN5aGpLVHd1TURBeEppWW9ZejB3S1R0MllYSWdaajFjSW5SeVlXNXpiR0YwWlROa0tGd2lLMmNyWENKd2VDeGNJaXRvSzF3aWNIZ3NYQ0lyYlN0Y0luQjRLU0FnY205MFlYUmxXQ2hjSWl0aksxd2laR1ZuS1NCeWIzUmhkR1ZaS0Z3aUszVXJYQ0prWldjcFhDSTdhV1lvYnk1MGNtRnVjMlp2Y20wb1ppa3NiMXN3WFM1emRIbHNaUzU2U1c1a1pYZzlNUzFOWVhSb0xtRmljeWhOWVhSb0xuSnZkVzVrS0dRcEtTeFVMbkJoY21GdGN5NWpiM1psY21ac2IzY3VjMnhwWkdWVGFHRmtiM2R6S1h0MllYSWdkajFVTG1selNHOXlhWHB2Ym5SaGJDZ3BQMjh1Wm1sdVpDaGNJaTV6ZDJsd1pYSXRjMnhwWkdVdGMyaGhaRzkzTFd4bFpuUmNJaWs2Ynk1bWFXNWtLRndpTG5OM2FYQmxjaTF6Ykdsa1pTMXphR0ZrYjNjdGRHOXdYQ0lwTEhjOVZDNXBjMGh2Y21sNmIyNTBZV3dvS1Q5dkxtWnBibVFvWENJdWMzZHBjR1Z5TFhOc2FXUmxMWE5vWVdSdmR5MXlhV2RvZEZ3aUtUcHZMbVpwYm1Rb1hDSXVjM2RwY0dWeUxYTnNhV1JsTFhOb1lXUnZkeTFpYjNSMGIyMWNJaWs3TUQwOVBYWXViR1Z1WjNSb0ppWW9kajFsS0NjOFpHbDJJR05zWVhOelBWd2ljM2RwY0dWeUxYTnNhV1JsTFhOb1lXUnZkeTBuS3loVUxtbHpTRzl5YVhwdmJuUmhiQ2dwUDF3aWJHVm1kRndpT2x3aWRHOXdYQ0lwS3lkY0lqNDhMMlJwZGo0bktTeHZMbUZ3Y0dWdVpDaDJLU2tzTUQwOVBYY3ViR1Z1WjNSb0ppWW9kejFsS0NjOFpHbDJJR05zWVhOelBWd2ljM2RwY0dWeUxYTnNhV1JsTFhOb1lXUnZkeTBuS3loVUxtbHpTRzl5YVhwdmJuUmhiQ2dwUDF3aWNtbG5hSFJjSWpwY0ltSnZkSFJ2YlZ3aUtTc25YQ0krUEM5a2FYWStKeWtzYnk1aGNIQmxibVFvZHlrcExIWXViR1Z1WjNSb0ppWW9kbHN3WFM1emRIbHNaUzV2Y0dGamFYUjVQV1ErTUQ5a09qQXBMSGN1YkdWdVozUm9KaVlvZDFzd1hTNXpkSGxzWlM1dmNHRmphWFI1UFMxa1BqQS9MV1E2TUNsOWZXbG1LRlF1WW5KdmQzTmxjaTVwWlNsN1ZDNTNjbUZ3Y0dWeVd6QmRMbk4wZVd4bExuQmxjbk53WldOMGFYWmxUM0pwWjJsdVBYUXJYQ0p3ZUNBMU1DVmNJbjE5TEhObGRGUnlZVzV6YVhScGIyNDZablZ1WTNScGIyNG9aU2w3VkM1emJHbGtaWE11ZEhKaGJuTnBkR2x2YmlobEtTNW1hVzVrS0Z3aUxuTjNhWEJsY2kxemJHbGtaUzF6YUdGa2IzY3RkRzl3TENBdWMzZHBjR1Z5TFhOc2FXUmxMWE5vWVdSdmR5MXlhV2RvZEN3Z0xuTjNhWEJsY2kxemJHbGtaUzF6YUdGa2IzY3RZbTkwZEc5dExDQXVjM2RwY0dWeUxYTnNhV1JsTFhOb1lXUnZkeTFzWldaMFhDSXBMblJ5WVc1emFYUnBiMjRvWlNsOWZYMHNWQzVzWVhwNVBYdHBibWwwYVdGc1NXMWhaMlZNYjJGa1pXUTZJVEVzYkc5aFpFbHRZV2RsU1c1VGJHbGtaVHBtZFc1amRHbHZiaWhoTEhRcGUybG1LSFp2YVdRZ01DRTlQV0VtSmloMmIybGtJREE5UFQxMEppWW9kRDBoTUNrc01DRTlQVlF1YzJ4cFpHVnpMbXhsYm1kMGFDa3BlM1poY2lCelBWUXVjMnhwWkdWekxtVnhLR0VwTEdrOWN5NW1hVzVrS0Z3aUxsd2lLMVF1Y0dGeVlXMXpMbXhoZW5sTWIyRmthVzVuUTJ4aGMzTXJYQ0k2Ym05MEtDNWNJaXRVTG5CaGNtRnRjeTVzWVhwNVUzUmhkSFZ6VEc5aFpHVmtRMnhoYzNNclhDSXBPbTV2ZENndVhDSXJWQzV3WVhKaGJYTXViR0Y2ZVZOMFlYUjFjMHh2WVdScGJtZERiR0Z6Y3l0Y0lpbGNJaWs3SVhNdWFHRnpRMnhoYzNNb1ZDNXdZWEpoYlhNdWJHRjZlVXh2WVdScGJtZERiR0Z6Y3lsOGZITXVhR0Z6UTJ4aGMzTW9WQzV3WVhKaGJYTXViR0Y2ZVZOMFlYUjFjMHh2WVdSbFpFTnNZWE56S1h4OGN5NW9ZWE5EYkdGemN5aFVMbkJoY21GdGN5NXNZWHA1VTNSaGRIVnpURzloWkdsdVowTnNZWE56S1h4OEtHazlhUzVoWkdRb2Mxc3dYU2twTERBaFBUMXBMbXhsYm1kMGFDWW1hUzVsWVdOb0tHWjFibU4wYVc5dUtDbDdkbUZ5SUdFOVpTaDBhR2x6S1R0aExtRmtaRU5zWVhOektGUXVjR0Z5WVcxekxteGhlbmxUZEdGMGRYTk1iMkZrYVc1blEyeGhjM01wTzNaaGNpQnBQV0V1WVhSMGNpaGNJbVJoZEdFdFltRmphMmR5YjNWdVpGd2lLU3h5UFdFdVlYUjBjaWhjSW1SaGRHRXRjM0pqWENJcExHNDlZUzVoZEhSeUtGd2laR0YwWVMxemNtTnpaWFJjSWlrc2J6MWhMbUYwZEhJb1hDSmtZWFJoTFhOcGVtVnpYQ0lwTzFRdWJHOWhaRWx0WVdkbEtHRmJNRjBzY254OGFTeHVMRzhzSVRFc1puVnVZM1JwYjI0b0tYdHBaaWgyYjJsa0lEQWhQVDFVSmladWRXeHNJVDA5VkNZbVZDbDdhV1lvYVQ4b1lTNWpjM01vWENKaVlXTnJaM0p2ZFc1a0xXbHRZV2RsWENJc0ozVnliQ2hjSWljcmFTc25YQ0lwSnlrc1lTNXlaVzF2ZG1WQmRIUnlLRndpWkdGMFlTMWlZV05yWjNKdmRXNWtYQ0lwS1Rvb2JpWW1LR0V1WVhSMGNpaGNJbk55WTNObGRGd2lMRzRwTEdFdWNtVnRiM1psUVhSMGNpaGNJbVJoZEdFdGMzSmpjMlYwWENJcEtTeHZKaVlvWVM1aGRIUnlLRndpYzJsNlpYTmNJaXh2S1N4aExuSmxiVzkyWlVGMGRISW9YQ0prWVhSaExYTnBlbVZ6WENJcEtTeHlKaVlvWVM1aGRIUnlLRndpYzNKalhDSXNjaWtzWVM1eVpXMXZkbVZCZEhSeUtGd2laR0YwWVMxemNtTmNJaWtwS1N4aExtRmtaRU5zWVhOektGUXVjR0Z5WVcxekxteGhlbmxUZEdGMGRYTk1iMkZrWldSRGJHRnpjeWt1Y21WdGIzWmxRMnhoYzNNb1ZDNXdZWEpoYlhNdWJHRjZlVk4wWVhSMWMweHZZV1JwYm1kRGJHRnpjeWtzY3k1bWFXNWtLRndpTGx3aUsxUXVjR0Z5WVcxekxteGhlbmxRY21Wc2IyRmtaWEpEYkdGemN5dGNJaXdnTGx3aUsxUXVjR0Z5WVcxekxuQnlaV3h2WVdSbGNrTnNZWE56S1M1eVpXMXZkbVVvS1N4VUxuQmhjbUZ0Y3k1c2IyOXdKaVowS1h0MllYSWdaVDF6TG1GMGRISW9YQ0prWVhSaExYTjNhWEJsY2kxemJHbGtaUzFwYm1SbGVGd2lLVHRwWmloekxtaGhjME5zWVhOektGUXVjR0Z5WVcxekxuTnNhV1JsUkhWd2JHbGpZWFJsUTJ4aGMzTXBLWHQyWVhJZ2JEMVVMbmR5WVhCd1pYSXVZMmhwYkdSeVpXNG9KMXRrWVhSaExYTjNhWEJsY2kxemJHbGtaUzFwYm1SbGVEMWNJaWNyWlNzblhDSmRPbTV2ZENndUp5dFVMbkJoY21GdGN5NXpiR2xrWlVSMWNHeHBZMkYwWlVOc1lYTnpLMXdpS1Z3aUtUdFVMbXhoZW5rdWJHOWhaRWx0WVdkbFNXNVRiR2xrWlNoc0xtbHVaR1Y0S0Nrc0lURXBmV1ZzYzJWN2RtRnlJSEE5VkM1M2NtRndjR1Z5TG1Ob2FXeGtjbVZ1S0Z3aUxsd2lLMVF1Y0dGeVlXMXpMbk5zYVdSbFJIVndiR2xqWVhSbFEyeGhjM01ySjF0a1lYUmhMWE4zYVhCbGNpMXpiR2xrWlMxcGJtUmxlRDFjSWljclpTc25YQ0pkSnlrN1ZDNXNZWHA1TG14dllXUkpiV0ZuWlVsdVUyeHBaR1VvY0M1cGJtUmxlQ2dwTENFeEtYMTlWQzVsYldsMEtGd2liMjVNWVhwNVNXMWhaMlZTWldGa2VWd2lMRlFzYzFzd1hTeGhXekJkS1gxOUtTeFVMbVZ0YVhRb1hDSnZia3hoZW5sSmJXRm5aVXh2WVdSY0lpeFVMSE5iTUYwc1lWc3dYU2w5S1gxOUxHeHZZV1E2Wm5WdVkzUnBiMjRvS1h0MllYSWdZU3gwUFZRdWNHRnlZVzF6TG5Oc2FXUmxjMUJsY2xacFpYYzdhV1lvWENKaGRYUnZYQ0k5UFQxMEppWW9kRDB3S1N4VUxteGhlbmt1YVc1cGRHbGhiRWx0WVdkbFRHOWhaR1ZrZkh3b1ZDNXNZWHA1TG1sdWFYUnBZV3hKYldGblpVeHZZV1JsWkQwaE1Da3NWQzV3WVhKaGJYTXVkMkYwWTJoVGJHbGtaWE5XYVhOcFltbHNhWFI1S1ZRdWQzSmhjSEJsY2k1amFHbHNaSEpsYmloY0lpNWNJaXRVTG5CaGNtRnRjeTV6Ykdsa1pWWnBjMmxpYkdWRGJHRnpjeWt1WldGamFDaG1kVzVqZEdsdmJpZ3BlMVF1YkdGNmVTNXNiMkZrU1cxaFoyVkpibE5zYVdSbEtHVW9kR2hwY3lrdWFXNWtaWGdvS1NsOUtUdGxiSE5sSUdsbUtIUStNU2xtYjNJb1lUMVVMbUZqZEdsMlpVbHVaR1Y0TzJFOFZDNWhZM1JwZG1WSmJtUmxlQ3QwTzJFckt5bFVMbk5zYVdSbGMxdGhYU1ltVkM1c1lYcDVMbXh2WVdSSmJXRm5aVWx1VTJ4cFpHVW9ZU2s3Wld4elpTQlVMbXhoZW5rdWJHOWhaRWx0WVdkbFNXNVRiR2xrWlNoVUxtRmpkR2wyWlVsdVpHVjRLVHRwWmloVUxuQmhjbUZ0Y3k1c1lYcDVURzloWkdsdVowbHVVSEpsZGs1bGVIUXBhV1lvZEQ0eGZIeFVMbkJoY21GdGN5NXNZWHA1VEc5aFpHbHVaMGx1VUhKbGRrNWxlSFJCYlc5MWJuUW1KbFF1Y0dGeVlXMXpMbXhoZW5sTWIyRmthVzVuU1c1UWNtVjJUbVY0ZEVGdGIzVnVkRDR4S1h0MllYSWdjejFVTG5CaGNtRnRjeTVzWVhwNVRHOWhaR2x1WjBsdVVISmxkazVsZUhSQmJXOTFiblFzYVQxMExISTlUV0YwYUM1dGFXNG9WQzVoWTNScGRtVkpibVJsZUN0cEswMWhkR2d1YldGNEtITXNhU2tzVkM1emJHbGtaWE11YkdWdVozUm9LU3h1UFUxaGRHZ3ViV0Y0S0ZRdVlXTjBhWFpsU1c1a1pYZ3RUV0YwYUM1dFlYZ29hU3h6S1N3d0tUdG1iM0lvWVQxVUxtRmpkR2wyWlVsdVpHVjRLM1E3WVR4eU8yRXJLeWxVTG5Oc2FXUmxjMXRoWFNZbVZDNXNZWHA1TG14dllXUkpiV0ZuWlVsdVUyeHBaR1VvWVNrN1ptOXlLR0U5Ymp0aFBGUXVZV04wYVhabFNXNWtaWGc3WVNzcktWUXVjMnhwWkdWelcyRmRKaVpVTG14aGVua3ViRzloWkVsdFlXZGxTVzVUYkdsa1pTaGhLWDFsYkhObGUzWmhjaUJ2UFZRdWQzSmhjSEJsY2k1amFHbHNaSEpsYmloY0lpNWNJaXRVTG5CaGNtRnRjeTV6Ykdsa1pVNWxlSFJEYkdGemN5azdieTVzWlc1bmRHZytNQ1ltVkM1c1lYcDVMbXh2WVdSSmJXRm5aVWx1VTJ4cFpHVW9ieTVwYm1SbGVDZ3BLVHQyWVhJZ2JEMVVMbmR5WVhCd1pYSXVZMmhwYkdSeVpXNG9YQ0l1WENJclZDNXdZWEpoYlhNdWMyeHBaR1ZRY21WMlEyeGhjM01wTzJ3dWJHVnVaM1JvUGpBbUpsUXViR0Y2ZVM1c2IyRmtTVzFoWjJWSmJsTnNhV1JsS0d3dWFXNWtaWGdvS1NsOWZTeHZibFJ5WVc1emFYUnBiMjVUZEdGeWREcG1kVzVqZEdsdmJpZ3BlMVF1Y0dGeVlXMXpMbXhoZW5sTWIyRmthVzVuSmlZb1ZDNXdZWEpoYlhNdWJHRjZlVXh2WVdScGJtZFBibFJ5WVc1emFYUnBiMjVUZEdGeWRIeDhJVlF1Y0dGeVlXMXpMbXhoZW5sTWIyRmthVzVuVDI1VWNtRnVjMmwwYVc5dVUzUmhjblFtSmlGVUxteGhlbmt1YVc1cGRHbGhiRWx0WVdkbFRHOWhaR1ZrS1NZbVZDNXNZWHA1TG14dllXUW9LWDBzYjI1VWNtRnVjMmwwYVc5dVJXNWtPbVoxYm1OMGFXOXVLQ2w3VkM1d1lYSmhiWE11YkdGNmVVeHZZV1JwYm1jbUppRlVMbkJoY21GdGN5NXNZWHA1VEc5aFpHbHVaMDl1VkhKaGJuTnBkR2x2YmxOMFlYSjBKaVpVTG14aGVua3ViRzloWkNncGZYMHNWQzV6WTNKdmJHeGlZWEk5ZTJselZHOTFZMmhsWkRvaE1TeHpaWFJFY21GblVHOXphWFJwYjI0NlpuVnVZM1JwYjI0b1pTbDdkbUZ5SUdFOVZDNXpZM0p2Ykd4aVlYSXNkRDFVTG1selNHOXlhWHB2Ym5SaGJDZ3BQMXdpZEc5MVkyaHpkR0Z5ZEZ3aVBUMDlaUzUwZVhCbGZIeGNJblJ2ZFdOb2JXOTJaVndpUFQwOVpTNTBlWEJsUDJVdWRHRnlaMlYwVkc5MVkyaGxjMXN3WFM1d1lXZGxXRHBsTG5CaFoyVllmSHhsTG1Oc2FXVnVkRmc2WENKMGIzVmphSE4wWVhKMFhDSTlQVDFsTG5SNWNHVjhmRndpZEc5MVkyaHRiM1psWENJOVBUMWxMblI1Y0dVL1pTNTBZWEpuWlhSVWIzVmphR1Z6V3pCZExuQmhaMlZaT21VdWNHRm5aVmw4ZkdVdVkyeHBaVzUwV1N4elBYUXRZUzUwY21GamF5NXZabVp6WlhRb0tWdFVMbWx6U0c5eWFYcHZiblJoYkNncFAxd2liR1ZtZEZ3aU9sd2lkRzl3WENKZExXRXVaSEpoWjFOcGVtVXZNaXhwUFMxVUxtMXBibFJ5WVc1emJHRjBaU2dwS21FdWJXOTJaVVJwZG1sa1pYSXNjajB0VkM1dFlYaFVjbUZ1YzJ4aGRHVW9LU3BoTG0xdmRtVkVhWFpwWkdWeU8zTThhVDl6UFdrNmN6NXlKaVlvY3oxeUtTeHpQUzF6TDJFdWJXOTJaVVJwZG1sa1pYSXNWQzUxY0dSaGRHVlFjbTluY21WemN5aHpLU3hVTG5ObGRGZHlZWEJ3WlhKVWNtRnVjMnhoZEdVb2N5d2hNQ2w5TEdSeVlXZFRkR0Z5ZERwbWRXNWpkR2x2YmlobEtYdDJZWElnWVQxVUxuTmpjbTlzYkdKaGNqdGhMbWx6Vkc5MVkyaGxaRDBoTUN4bExuQnlaWFpsYm5SRVpXWmhkV3gwS0Nrc1pTNXpkRzl3VUhKdmNHRm5ZWFJwYjI0b0tTeGhMbk5sZEVSeVlXZFFiM05wZEdsdmJpaGxLU3hqYkdWaGNsUnBiV1Z2ZFhRb1lTNWtjbUZuVkdsdFpXOTFkQ2tzWVM1MGNtRmpheTUwY21GdWMybDBhVzl1S0RBcExGUXVjR0Z5WVcxekxuTmpjbTlzYkdKaGNraHBaR1VtSm1FdWRISmhZMnN1WTNOektGd2liM0JoWTJsMGVWd2lMREVwTEZRdWQzSmhjSEJsY2k1MGNtRnVjMmwwYVc5dUtERXdNQ2tzWVM1a2NtRm5MblJ5WVc1emFYUnBiMjRvTVRBd0tTeFVMbVZ0YVhRb1hDSnZibE5qY205c2JHSmhja1J5WVdkVGRHRnlkRndpTEZRcGZTeGtjbUZuVFc5MlpUcG1kVzVqZEdsdmJpaGxLWHQyWVhJZ1lUMVVMbk5qY205c2JHSmhjanRoTG1selZHOTFZMmhsWkNZbUtHVXVjSEpsZG1WdWRFUmxabUYxYkhRL1pTNXdjbVYyWlc1MFJHVm1ZWFZzZENncE9tVXVjbVYwZFhKdVZtRnNkV1U5SVRFc1lTNXpaWFJFY21GblVHOXphWFJwYjI0b1pTa3NWQzUzY21Gd2NHVnlMblJ5WVc1emFYUnBiMjRvTUNrc1lTNTBjbUZqYXk1MGNtRnVjMmwwYVc5dUtEQXBMR0V1WkhKaFp5NTBjbUZ1YzJsMGFXOXVLREFwTEZRdVpXMXBkQ2hjSW05dVUyTnliMnhzWW1GeVJISmhaMDF2ZG1WY0lpeFVLU2w5TEdSeVlXZEZibVE2Wm5WdVkzUnBiMjRvWlNsN2RtRnlJR0U5VkM1elkzSnZiR3hpWVhJN1lTNXBjMVJ2ZFdOb1pXUW1KaWhoTG1selZHOTFZMmhsWkQwaE1TeFVMbkJoY21GdGN5NXpZM0p2Ykd4aVlYSklhV1JsSmlZb1kyeGxZWEpVYVcxbGIzVjBLR0V1WkhKaFoxUnBiV1Z2ZFhRcExHRXVaSEpoWjFScGJXVnZkWFE5YzJWMFZHbHRaVzkxZENobWRXNWpkR2x2YmlncGUyRXVkSEpoWTJzdVkzTnpLRndpYjNCaFkybDBlVndpTERBcExHRXVkSEpoWTJzdWRISmhibk5wZEdsdmJpZzBNREFwZlN3eFpUTXBLU3hVTG1WdGFYUW9YQ0p2YmxOamNtOXNiR0poY2tSeVlXZEZibVJjSWl4VUtTeFVMbkJoY21GdGN5NXpZM0p2Ykd4aVlYSlRibUZ3VDI1U1pXeGxZWE5sSmlaVUxuTnNhV1JsVW1WelpYUW9LU2w5TEdSeVlXZG5ZV0pzWlVWMlpXNTBjenBtZFc1amRHbHZiaWdwZTNKbGRIVnliaUJVTG5CaGNtRnRjeTV6YVcxMWJHRjBaVlJ2ZFdOb0lUMDlJVEY4ZkZRdWMzVndjRzl5ZEM1MGIzVmphRDlVTG5SdmRXTm9SWFpsYm5Sek9sUXVkRzkxWTJoRmRtVnVkSE5FWlhOcmRHOXdmU2dwTEdWdVlXSnNaVVJ5WVdkbllXSnNaVHBtZFc1amRHbHZiaWdwZTNaaGNpQmhQVlF1YzJOeWIyeHNZbUZ5TEhROVZDNXpkWEJ3YjNKMExuUnZkV05vUDJFdWRISmhZMnM2Wkc5amRXMWxiblE3WlNoaExuUnlZV05yS1M1dmJpaGhMbVJ5WVdkbllXSnNaVVYyWlc1MGN5NXpkR0Z5ZEN4aExtUnlZV2RUZEdGeWRDa3NaU2gwS1M1dmJpaGhMbVJ5WVdkbllXSnNaVVYyWlc1MGN5NXRiM1psTEdFdVpISmhaMDF2ZG1VcExHVW9kQ2t1YjI0b1lTNWtjbUZuWjJGaWJHVkZkbVZ1ZEhNdVpXNWtMR0V1WkhKaFowVnVaQ2w5TEdScGMyRmliR1ZFY21GbloyRmliR1U2Wm5WdVkzUnBiMjRvS1h0MllYSWdZVDFVTG5OamNtOXNiR0poY2l4MFBWUXVjM1Z3Y0c5eWRDNTBiM1ZqYUQ5aExuUnlZV05yT21SdlkzVnRaVzUwTzJVb1lTNTBjbUZqYXlrdWIyWm1LR0V1WkhKaFoyZGhZbXhsUlhabGJuUnpMbk4wWVhKMExHRXVaSEpoWjFOMFlYSjBLU3hsS0hRcExtOW1aaWhoTG1SeVlXZG5ZV0pzWlVWMlpXNTBjeTV0YjNabExHRXVaSEpoWjAxdmRtVXBMR1VvZENrdWIyWm1LR0V1WkhKaFoyZGhZbXhsUlhabGJuUnpMbVZ1WkN4aExtUnlZV2RGYm1RcGZTeHpaWFE2Wm5WdVkzUnBiMjRvS1h0cFppaFVMbkJoY21GdGN5NXpZM0p2Ykd4aVlYSXBlM1poY2lCaFBWUXVjMk55YjJ4c1ltRnlPMkV1ZEhKaFkyczlaU2hVTG5CaGNtRnRjeTV6WTNKdmJHeGlZWElwTEZRdWNHRnlZVzF6TG5WdWFYRjFaVTVoZGtWc1pXMWxiblJ6SmlaY0luTjBjbWx1WjF3aVBUMTBlWEJsYjJZZ1ZDNXdZWEpoYlhNdWMyTnliMnhzWW1GeUppWmhMblJ5WVdOckxteGxibWQwYUQ0eEppWXhQVDA5VkM1amIyNTBZV2x1WlhJdVptbHVaQ2hVTG5CaGNtRnRjeTV6WTNKdmJHeGlZWElwTG14bGJtZDBhQ1ltS0dFdWRISmhZMnM5VkM1amIyNTBZV2x1WlhJdVptbHVaQ2hVTG5CaGNtRnRjeTV6WTNKdmJHeGlZWElwS1N4aExtUnlZV2M5WVM1MGNtRmpheTVtYVc1a0tGd2lMbk4zYVhCbGNpMXpZM0p2Ykd4aVlYSXRaSEpoWjF3aUtTd3dQVDA5WVM1a2NtRm5MbXhsYm1kMGFDWW1LR0V1WkhKaFp6MWxLQ2M4WkdsMklHTnNZWE56UFZ3aWMzZHBjR1Z5TFhOamNtOXNiR0poY2kxa2NtRm5YQ0krUEM5a2FYWStKeWtzWVM1MGNtRmpheTVoY0hCbGJtUW9ZUzVrY21GbktTa3NZUzVrY21Gbld6QmRMbk4wZVd4bExuZHBaSFJvUFZ3aVhDSXNZUzVrY21Gbld6QmRMbk4wZVd4bExtaGxhV2RvZEQxY0lsd2lMR0V1ZEhKaFkydFRhWHBsUFZRdWFYTkliM0pwZW05dWRHRnNLQ2svWVM1MGNtRmphMXN3WFM1dlptWnpaWFJYYVdSMGFEcGhMblJ5WVdOcld6QmRMbTltWm5ObGRFaGxhV2RvZEN4aExtUnBkbWxrWlhJOVZDNXphWHBsTDFRdWRtbHlkSFZoYkZOcGVtVXNZUzV0YjNabFJHbDJhV1JsY2oxaExtUnBkbWxrWlhJcUtHRXVkSEpoWTJ0VGFYcGxMMVF1YzJsNlpTa3NZUzVrY21GblUybDZaVDFoTG5SeVlXTnJVMmw2WlNwaExtUnBkbWxrWlhJc1ZDNXBjMGh2Y21sNmIyNTBZV3dvS1Q5aExtUnlZV2RiTUYwdWMzUjViR1V1ZDJsa2RHZzlZUzVrY21GblUybDZaU3RjSW5CNFhDSTZZUzVrY21Gbld6QmRMbk4wZVd4bExtaGxhV2RvZEQxaExtUnlZV2RUYVhwbEsxd2ljSGhjSWl4aExtUnBkbWxrWlhJK1BURS9ZUzUwY21GamExc3dYUzV6ZEhsc1pTNWthWE53YkdGNVBWd2libTl1WlZ3aU9tRXVkSEpoWTJ0Yk1GMHVjM1I1YkdVdVpHbHpjR3hoZVQxY0lsd2lMRlF1Y0dGeVlXMXpMbk5qY205c2JHSmhja2hwWkdVbUppaGhMblJ5WVdOcld6QmRMbk4wZVd4bExtOXdZV05wZEhrOU1DbDlmU3h6WlhSVWNtRnVjMnhoZEdVNlpuVnVZM1JwYjI0b0tYdHBaaWhVTG5CaGNtRnRjeTV6WTNKdmJHeGlZWElwZTNaaGNpQmxMR0U5VkM1elkzSnZiR3hpWVhJc2REMG9WQzUwY21GdWMyeGhkR1VzWVM1a2NtRm5VMmw2WlNrN1pUMG9ZUzUwY21GamExTnBlbVV0WVM1a2NtRm5VMmw2WlNrcVZDNXdjbTluY21WemN5eFVMbkowYkNZbVZDNXBjMGh2Y21sNmIyNTBZV3dvS1Q4b1pUMHRaU3hsUGpBL0tIUTlZUzVrY21GblUybDZaUzFsTEdVOU1DazZMV1VyWVM1a2NtRm5VMmw2WlQ1aExuUnlZV05yVTJsNlpTWW1LSFE5WVM1MGNtRmphMU5wZW1VclpTa3BPbVU4TUQ4b2REMWhMbVJ5WVdkVGFYcGxLMlVzWlQwd0tUcGxLMkV1WkhKaFoxTnBlbVUrWVM1MGNtRmphMU5wZW1VbUppaDBQV0V1ZEhKaFkydFRhWHBsTFdVcExGUXVhWE5JYjNKcGVtOXVkR0ZzS0NrL0tGUXVjM1Z3Y0c5eWRDNTBjbUZ1YzJadmNtMXpNMlEvWVM1a2NtRm5MblJ5WVc1elptOXliU2hjSW5SeVlXNXpiR0YwWlROa0tGd2lLMlVyWENKd2VDd2dNQ3dnTUNsY0lpazZZUzVrY21GbkxuUnlZVzV6Wm05eWJTaGNJblJ5WVc1emJHRjBaVmdvWENJclpTdGNJbkI0S1Z3aUtTeGhMbVJ5WVdkYk1GMHVjM1I1YkdVdWQybGtkR2c5ZEN0Y0luQjRYQ0lwT2loVUxuTjFjSEJ2Y25RdWRISmhibk5tYjNKdGN6TmtQMkV1WkhKaFp5NTBjbUZ1YzJadmNtMG9YQ0owY21GdWMyeGhkR1V6WkNnd2NIZ3NJRndpSzJVclhDSndlQ3dnTUNsY0lpazZZUzVrY21GbkxuUnlZVzV6Wm05eWJTaGNJblJ5WVc1emJHRjBaVmtvWENJclpTdGNJbkI0S1Z3aUtTeGhMbVJ5WVdkYk1GMHVjM1I1YkdVdWFHVnBaMmgwUFhRclhDSndlRndpS1N4VUxuQmhjbUZ0Y3k1elkzSnZiR3hpWVhKSWFXUmxKaVlvWTJ4bFlYSlVhVzFsYjNWMEtHRXVkR2x0Wlc5MWRDa3NZUzUwY21GamExc3dYUzV6ZEhsc1pTNXZjR0ZqYVhSNVBURXNZUzUwYVcxbGIzVjBQWE5sZEZScGJXVnZkWFFvWm5WdVkzUnBiMjRvS1h0aExuUnlZV05yV3pCZExuTjBlV3hsTG05d1lXTnBkSGs5TUN4aExuUnlZV05yTG5SeVlXNXphWFJwYjI0b05EQXdLWDBzTVdVektTbDlmU3h6WlhSVWNtRnVjMmwwYVc5dU9tWjFibU4wYVc5dUtHVXBlMVF1Y0dGeVlXMXpMbk5qY205c2JHSmhjaVltVkM1elkzSnZiR3hpWVhJdVpISmhaeTUwY21GdWMybDBhVzl1S0dVcGZYMHNWQzVqYjI1MGNtOXNiR1Z5UFh0TWFXNWxZWEpUY0d4cGJtVTZablZ1WTNScGIyNG9aU3hoS1h0MllYSWdkRDFtZFc1amRHbHZiaWdwZTNaaGNpQmxMR0VzZER0eVpYUjFjbTRnWm5WdVkzUnBiMjRvY3l4cEtYdG1iM0lvWVQwdE1TeGxQWE11YkdWdVozUm9PMlV0WVQ0eE95bHpXM1E5WlN0aFBqNHhYVHc5YVQ5aFBYUTZaVDEwTzNKbGRIVnliaUJsZlgwb0tUdDBhR2x6TG5nOVpTeDBhR2x6TG5rOVlTeDBhR2x6TG14aGMzUkpibVJsZUQxbExteGxibWQwYUMweE8zWmhjaUJ6TEdrN2RHaHBjeTU0TG14bGJtZDBhRHQwYUdsekxtbHVkR1Z5Y0c5c1lYUmxQV1oxYm1OMGFXOXVLR1VwZTNKbGRIVnliaUJsUHlocFBYUW9kR2hwY3k1NExHVXBMSE05YVMweExDaGxMWFJvYVhNdWVGdHpYU2txS0hSb2FYTXVlVnRwWFMxMGFHbHpMbmxiYzEwcEx5aDBhR2x6TG5oYmFWMHRkR2hwY3k1NFczTmRLU3QwYUdsekxubGJjMTBwT2pCOWZTeG5aWFJKYm5SbGNuQnZiR0YwWlVaMWJtTjBhVzl1T21aMWJtTjBhVzl1S0dVcGUxUXVZMjl1ZEhKdmJHeGxjaTV6Y0d4cGJtVjhmQ2hVTG1OdmJuUnliMnhzWlhJdWMzQnNhVzVsUFZRdWNHRnlZVzF6TG14dmIzQS9ibVYzSUZRdVkyOXVkSEp2Ykd4bGNpNU1hVzVsWVhKVGNHeHBibVVvVkM1emJHbGtaWE5IY21sa0xHVXVjMnhwWkdWelIzSnBaQ2s2Ym1WM0lGUXVZMjl1ZEhKdmJHeGxjaTVNYVc1bFlYSlRjR3hwYm1Vb1ZDNXpibUZ3UjNKcFpDeGxMbk51WVhCSGNtbGtLU2w5TEhObGRGUnlZVzV6YkdGMFpUcG1kVzVqZEdsdmJpaGxMSFFwZTJaMWJtTjBhVzl1SUhNb1lTbDdaVDFoTG5KMGJDWW1YQ0pvYjNKcGVtOXVkR0ZzWENJOVBUMWhMbkJoY21GdGN5NWthWEpsWTNScGIyNC9MVlF1ZEhKaGJuTnNZWFJsT2xRdWRISmhibk5zWVhSbExGd2ljMnhwWkdWY0lqMDlQVlF1Y0dGeVlXMXpMbU52Ym5SeWIyeENlU1ltS0ZRdVkyOXVkSEp2Ykd4bGNpNW5aWFJKYm5SbGNuQnZiR0YwWlVaMWJtTjBhVzl1S0dFcExISTlMVlF1WTI5dWRISnZiR3hsY2k1emNHeHBibVV1YVc1MFpYSndiMnhoZEdVb0xXVXBLU3h5SmlaY0ltTnZiblJoYVc1bGNsd2lJVDA5VkM1d1lYSmhiWE11WTI5dWRISnZiRUo1Zkh3b2FUMG9ZUzV0WVhoVWNtRnVjMnhoZEdVb0tTMWhMbTFwYmxSeVlXNXpiR0YwWlNncEtTOG9WQzV0WVhoVWNtRnVjMnhoZEdVb0tTMVVMbTFwYmxSeVlXNXpiR0YwWlNncEtTeHlQU2hsTFZRdWJXbHVWSEpoYm5Oc1lYUmxLQ2twS21rcllTNXRhVzVVY21GdWMyeGhkR1VvS1Nrc1ZDNXdZWEpoYlhNdVkyOXVkSEp2YkVsdWRtVnljMlVtSmloeVBXRXViV0Y0VkhKaGJuTnNZWFJsS0NrdGNpa3NZUzUxY0dSaGRHVlFjbTluY21WemN5aHlLU3hoTG5ObGRGZHlZWEJ3WlhKVWNtRnVjMnhoZEdVb2Npd2hNU3hVS1N4aExuVndaR0YwWlVGamRHbDJaVWx1WkdWNEtDbDlkbUZ5SUdrc2NpeHVQVlF1Y0dGeVlXMXpMbU52Ym5SeWIydzdhV1lvUVhKeVlYa3VhWE5CY25KaGVTaHVLU2xtYjNJb2RtRnlJRzg5TUR0dlBHNHViR1Z1WjNSb08yOHJLeWx1VzI5ZElUMDlkQ1ltYmx0dlhXbHVjM1JoYm1ObGIyWWdZU1ltY3lodVcyOWRLVHRsYkhObElHNGdhVzV6ZEdGdVkyVnZaaUJoSmlaMElUMDliaVltY3lodUtYMHNjMlYwVkhKaGJuTnBkR2x2YmpwbWRXNWpkR2x2YmlobExIUXBlMloxYm1OMGFXOXVJSE1vWVNsN1lTNXpaWFJYY21Gd2NHVnlWSEpoYm5OcGRHbHZiaWhsTEZRcExEQWhQVDFsSmlZb1lTNXZibFJ5WVc1emFYUnBiMjVUZEdGeWRDZ3BMR0V1ZDNKaGNIQmxjaTUwY21GdWMybDBhVzl1Ulc1a0tHWjFibU4wYVc5dUtDbDdjaVltS0dFdWNHRnlZVzF6TG14dmIzQW1KbHdpYzJ4cFpHVmNJajA5UFZRdWNHRnlZVzF6TG1OdmJuUnliMnhDZVNZbVlTNW1hWGhNYjI5d0tDa3NZUzV2YmxSeVlXNXphWFJwYjI1RmJtUW9LU2w5S1NsOWRtRnlJR2tzY2oxVUxuQmhjbUZ0Y3k1amIyNTBjbTlzTzJsbUtFRnljbUY1TG1selFYSnlZWGtvY2lrcFptOXlLR2s5TUR0cFBISXViR1Z1WjNSb08ya3JLeWx5VzJsZElUMDlkQ1ltY2x0cFhXbHVjM1JoYm1ObGIyWWdZU1ltY3loeVcybGRLVHRsYkhObElISWdhVzV6ZEdGdVkyVnZaaUJoSmlaMElUMDljaVltY3loeUtYMTlMRlF1YUdGemFHNWhkajE3YjI1SVlYTm9RMkZ1WjJVNlpuVnVZM1JwYjI0b1pTeGhLWHQyWVhJZ2REMWtiMk4xYldWdWRDNXNiMk5oZEdsdmJpNW9ZWE5vTG5KbGNHeGhZMlVvWENJalhDSXNYQ0pjSWlrN2RDRTlQVlF1YzJ4cFpHVnpMbVZ4S0ZRdVlXTjBhWFpsU1c1a1pYZ3BMbUYwZEhJb1hDSmtZWFJoTFdoaGMyaGNJaWttSmxRdWMyeHBaR1ZVYnloVUxuZHlZWEJ3WlhJdVkyaHBiR1J5Wlc0b1hDSXVYQ0lyVkM1d1lYSmhiWE11YzJ4cFpHVkRiR0Z6Y3lzblcyUmhkR0V0YUdGemFEMWNJaWNyZENzblhDSmRKeWt1YVc1a1pYZ29LU2w5TEdGMGRHRmphRVYyWlc1MGN6cG1kVzVqZEdsdmJpaGhLWHQyWVhJZ2REMWhQMXdpYjJabVhDSTZYQ0p2Ymx3aU8yVW9kMmx1Wkc5M0tWdDBYU2hjSW1oaGMyaGphR0Z1WjJWY0lpeFVMbWhoYzJodVlYWXViMjVJWVhOb1EyRnVaMlVwZlN4elpYUklZWE5vT21aMWJtTjBhVzl1S0NsN1hISmNibWxtS0ZRdWFHRnphRzVoZGk1cGJtbDBhV0ZzYVhwbFpDWW1WQzV3WVhKaGJYTXVhR0Z6YUc1aGRpbHBaaWhVTG5CaGNtRnRjeTV5WlhCc1lXTmxVM1JoZEdVbUpuZHBibVJ2ZHk1b2FYTjBiM0o1SmlaM2FXNWtiM2N1YUdsemRHOXllUzV5WlhCc1lXTmxVM1JoZEdVcGQybHVaRzkzTG1ocGMzUnZjbmt1Y21Wd2JHRmpaVk4wWVhSbEtHNTFiR3dzYm5Wc2JDeGNJaU5jSWl0VUxuTnNhV1JsY3k1bGNTaFVMbUZqZEdsMlpVbHVaR1Y0S1M1aGRIUnlLRndpWkdGMFlTMW9ZWE5vWENJcGZIeGNJbHdpS1R0bGJITmxlM1poY2lCbFBWUXVjMnhwWkdWekxtVnhLRlF1WVdOMGFYWmxTVzVrWlhncExHRTlaUzVoZEhSeUtGd2laR0YwWVMxb1lYTm9YQ0lwZkh4bExtRjBkSElvWENKa1lYUmhMV2hwYzNSdmNubGNJaWs3Wkc5amRXMWxiblF1Ykc5allYUnBiMjR1YUdGemFEMWhmSHhjSWx3aWZYMHNhVzVwZERwbWRXNWpkR2x2YmlncGUybG1LRlF1Y0dGeVlXMXpMbWhoYzJodVlYWW1KaUZVTG5CaGNtRnRjeTVvYVhOMGIzSjVLWHRVTG1oaGMyaHVZWFl1YVc1cGRHbGhiR2w2WldROUlUQTdkbUZ5SUdVOVpHOWpkVzFsYm5RdWJHOWpZWFJwYjI0dWFHRnphQzV5WlhCc1lXTmxLRndpSTF3aUxGd2lYQ0lwTzJsbUtHVXBabTl5S0haaGNpQmhQVEFzZEQxVUxuTnNhV1JsY3k1c1pXNW5kR2c3WVR4ME8yRXJLeWw3ZG1GeUlITTlWQzV6Ykdsa1pYTXVaWEVvWVNrc2FUMXpMbUYwZEhJb1hDSmtZWFJoTFdoaGMyaGNJaWw4ZkhNdVlYUjBjaWhjSW1SaGRHRXRhR2x6ZEc5eWVWd2lLVHRwWmlocFBUMDlaU1ltSVhNdWFHRnpRMnhoYzNNb1ZDNXdZWEpoYlhNdWMyeHBaR1ZFZFhCc2FXTmhkR1ZEYkdGemN5a3BlM1poY2lCeVBYTXVhVzVrWlhnb0tUdFVMbk5zYVdSbFZHOG9jaXd3TEZRdWNHRnlZVzF6TG5KMWJrTmhiR3hpWVdOcmMwOXVTVzVwZEN3aE1DbDlmVlF1Y0dGeVlXMXpMbWhoYzJodVlYWlhZWFJqYUZOMFlYUmxKaVpVTG1oaGMyaHVZWFl1WVhSMFlXTm9SWFpsYm5SektDbDlmU3hrWlhOMGNtOTVPbVoxYm1OMGFXOXVLQ2w3VkM1d1lYSmhiWE11YUdGemFHNWhkbGRoZEdOb1UzUmhkR1VtSmxRdWFHRnphRzVoZGk1aGRIUmhZMmhGZG1WdWRITW9JVEFwZlgwc1ZDNW9hWE4wYjNKNVBYdHBibWwwT21aMWJtTjBhVzl1S0NsN2FXWW9WQzV3WVhKaGJYTXVhR2x6ZEc5eWVTbDdhV1lvSVhkcGJtUnZkeTVvYVhOMGIzSjVmSHdoZDJsdVpHOTNMbWhwYzNSdmNua3VjSFZ6YUZOMFlYUmxLWEpsZEhWeWJpQlVMbkJoY21GdGN5NW9hWE4wYjNKNVBTRXhMSFp2YVdRb1ZDNXdZWEpoYlhNdWFHRnphRzVoZGowaE1DazdWQzVvYVhOMGIzSjVMbWx1YVhScFlXeHBlbVZrUFNFd0xIUm9hWE11Y0dGMGFITTlkR2hwY3k1blpYUlFZWFJvVm1Gc2RXVnpLQ2tzS0hSb2FYTXVjR0YwYUhNdWEyVjVmSHgwYUdsekxuQmhkR2h6TG5aaGJIVmxLU1ltS0hSb2FYTXVjMk55YjJ4c1ZHOVRiR2xrWlNnd0xIUm9hWE11Y0dGMGFITXVkbUZzZFdVc1ZDNXdZWEpoYlhNdWNuVnVRMkZzYkdKaFkydHpUMjVKYm1sMEtTeFVMbkJoY21GdGN5NXlaWEJzWVdObFUzUmhkR1Y4ZkhkcGJtUnZkeTVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLRndpY0c5d2MzUmhkR1ZjSWl4MGFHbHpMbk5sZEVocGMzUnZjbmxRYjNCVGRHRjBaU2twZlgwc2MyVjBTR2x6ZEc5eWVWQnZjRk4wWVhSbE9tWjFibU4wYVc5dUtDbDdWQzVvYVhOMGIzSjVMbkJoZEdoelBWUXVhR2x6ZEc5eWVTNW5aWFJRWVhSb1ZtRnNkV1Z6S0Nrc1ZDNW9hWE4wYjNKNUxuTmpjbTlzYkZSdlUyeHBaR1VvVkM1d1lYSmhiWE11YzNCbFpXUXNWQzVvYVhOMGIzSjVMbkJoZEdoekxuWmhiSFZsTENFeEtYMHNaMlYwVUdGMGFGWmhiSFZsY3pwbWRXNWpkR2x2YmlncGUzWmhjaUJsUFhkcGJtUnZkeTVzYjJOaGRHbHZiaTV3WVhSb2JtRnRaUzV6YkdsalpTZ3hLUzV6Y0d4cGRDaGNJaTljSWlrc1lUMWxMbXhsYm1kMGFEdHlaWFIxY201N2EyVjVPbVZiWVMweVhTeDJZV3gxWlRwbFcyRXRNVjE5ZlN4elpYUklhWE4wYjNKNU9tWjFibU4wYVc5dUtHVXNZU2w3YVdZb1ZDNW9hWE4wYjNKNUxtbHVhWFJwWVd4cGVtVmtKaVpVTG5CaGNtRnRjeTVvYVhOMGIzSjVLWHQyWVhJZ2REMVVMbk5zYVdSbGN5NWxjU2hoS1N4elBYUm9hWE11YzJ4MVoybG1lU2gwTG1GMGRISW9YQ0prWVhSaExXaHBjM1J2Y25sY0lpa3BPM2RwYm1SdmR5NXNiMk5oZEdsdmJpNXdZWFJvYm1GdFpTNXBibU5zZFdSbGN5aGxLWHg4S0hNOVpTdGNJaTljSWl0ektTeFVMbkJoY21GdGN5NXlaWEJzWVdObFUzUmhkR1UvZDJsdVpHOTNMbWhwYzNSdmNua3VjbVZ3YkdGalpWTjBZWFJsS0c1MWJHd3NiblZzYkN4ektUcDNhVzVrYjNjdWFHbHpkRzl5ZVM1d2RYTm9VM1JoZEdVb2JuVnNiQ3h1ZFd4c0xITXBmWDBzYzJ4MVoybG1lVHBtZFc1amRHbHZiaWhsS1h0eVpYUjFjbTRnWlM1MGIxTjBjbWx1WnlncExuUnZURzkzWlhKRFlYTmxLQ2t1Y21Wd2JHRmpaU2d2WEZ4ekt5OW5MRndpTFZ3aUtTNXlaWEJzWVdObEtDOWJYbHhjZDF4Y0xWMHJMMmNzWENKY0lpa3VjbVZ3YkdGalpTZ3ZYRnd0WEZ3dEt5OW5MRndpTFZ3aUtTNXlaWEJzWVdObEtDOWVMU3N2TEZ3aVhDSXBMbkpsY0d4aFkyVW9MeTBySkM4c1hDSmNJaWw5TEhOamNtOXNiRlJ2VTJ4cFpHVTZablZ1WTNScGIyNG9aU3hoTEhRcGUybG1LR0VwWm05eUtIWmhjaUJ6UFRBc2FUMVVMbk5zYVdSbGN5NXNaVzVuZEdnN2N6eHBPM01yS3lsN2RtRnlJSEk5VkM1emJHbGtaWE11WlhFb2N5a3NiajEwYUdsekxuTnNkV2RwWm5rb2NpNWhkSFJ5S0Z3aVpHRjBZUzFvYVhOMGIzSjVYQ0lwS1R0cFppaHVQVDA5WVNZbUlYSXVhR0Z6UTJ4aGMzTW9WQzV3WVhKaGJYTXVjMnhwWkdWRWRYQnNhV05oZEdWRGJHRnpjeWtwZTNaaGNpQnZQWEl1YVc1a1pYZ29LVHRVTG5Oc2FXUmxWRzhvYnl4bExIUXBmWDFsYkhObElGUXVjMnhwWkdWVWJ5Z3dMR1VzZENsOWZTeFVMbVJwYzJGaWJHVkxaWGxpYjJGeVpFTnZiblJ5YjJ3OVpuVnVZM1JwYjI0b0tYdFVMbkJoY21GdGN5NXJaWGxpYjJGeVpFTnZiblJ5YjJ3OUlURXNaU2hrYjJOMWJXVnVkQ2t1YjJabUtGd2lhMlY1Wkc5M2Jsd2lMSEFwZlN4VUxtVnVZV0pzWlV0bGVXSnZZWEprUTI5dWRISnZiRDFtZFc1amRHbHZiaWdwZTFRdWNHRnlZVzF6TG10bGVXSnZZWEprUTI5dWRISnZiRDBoTUN4bEtHUnZZM1Z0Wlc1MEtTNXZiaWhjSW10bGVXUnZkMjVjSWl4d0tYMHNWQzV0YjNWelpYZG9aV1ZzUFh0bGRtVnVkRG9oTVN4c1lYTjBVMk55YjJ4c1ZHbHRaVG9vYm1WM0lIZHBibVJ2ZHk1RVlYUmxLUzVuWlhSVWFXMWxLQ2w5TEZRdWNHRnlZVzF6TG0xdmRYTmxkMmhsWld4RGIyNTBjbTlzSmlZb1ZDNXRiM1Z6Wlhkb1pXVnNMbVYyWlc1MFBXNWhkbWxuWVhSdmNpNTFjMlZ5UVdkbGJuUXVhVzVrWlhoUFppaGNJbVpwY21WbWIzaGNJaWsrTFRFL1hDSkVUMDFOYjNWelpWTmpjbTlzYkZ3aU9tWjFibU4wYVc5dUtDbDdkbUZ5SUdVOVhDSnZibmRvWldWc1hDSnBiaUJrYjJOMWJXVnVkRHRwWmlnaFpTbDdkbUZ5SUdFOVpHOWpkVzFsYm5RdVkzSmxZWFJsUld4bGJXVnVkQ2hjSW1ScGRsd2lLVHRoTG5ObGRFRjBkSEpwWW5WMFpTaGNJbTl1ZDJobFpXeGNJaXhjSW5KbGRIVnlianRjSWlrc1pUMWNJbVoxYm1OMGFXOXVYQ0k5UFhSNWNHVnZaaUJoTG05dWQyaGxaV3g5Y21WMGRYSnVJV1VtSm1SdlkzVnRaVzUwTG1sdGNHeGxiV1Z1ZEdGMGFXOXVKaVprYjJOMWJXVnVkQzVwYlhCc1pXMWxiblJoZEdsdmJpNW9ZWE5HWldGMGRYSmxKaVprYjJOMWJXVnVkQzVwYlhCc1pXMWxiblJoZEdsdmJpNW9ZWE5HWldGMGRYSmxLRndpWENJc1hDSmNJaWtoUFQwaE1DWW1LR1U5Wkc5amRXMWxiblF1YVcxd2JHVnRaVzUwWVhScGIyNHVhR0Z6Um1WaGRIVnlaU2hjSWtWMlpXNTBjeTUzYUdWbGJGd2lMRndpTXk0d1hDSXBLU3hsZlNncFAxd2lkMmhsWld4Y0lqcGNJbTF2ZFhObGQyaGxaV3hjSWlrc1ZDNWthWE5oWW14bFRXOTFjMlYzYUdWbGJFTnZiblJ5YjJ3OVpuVnVZM1JwYjI0b0tYdHBaaWdoVkM1dGIzVnpaWGRvWldWc0xtVjJaVzUwS1hKbGRIVnliaUV4TzNaaGNpQmhQVlF1WTI5dWRHRnBibVZ5TzNKbGRIVnlibHdpWTI5dWRHRnBibVZ5WENJaFBUMVVMbkJoY21GdGN5NXRiM1Z6Wlhkb1pXVnNSWFpsYm5SelZHRnlaMlZrSmlZb1lUMWxLRlF1Y0dGeVlXMXpMbTF2ZFhObGQyaGxaV3hGZG1WdWRITlVZWEpuWldRcEtTeGhMbTltWmloVUxtMXZkWE5sZDJobFpXd3VaWFpsYm5Rc2RTa3NWQzV3WVhKaGJYTXViVzkxYzJWM2FHVmxiRU52Ym5SeWIydzlJVEVzSVRCOUxGUXVaVzVoWW14bFRXOTFjMlYzYUdWbGJFTnZiblJ5YjJ3OVpuVnVZM1JwYjI0b0tYdHBaaWdoVkM1dGIzVnpaWGRvWldWc0xtVjJaVzUwS1hKbGRIVnliaUV4TzNaaGNpQmhQVlF1WTI5dWRHRnBibVZ5TzNKbGRIVnlibHdpWTI5dWRHRnBibVZ5WENJaFBUMVVMbkJoY21GdGN5NXRiM1Z6Wlhkb1pXVnNSWFpsYm5SelZHRnlaMlZrSmlZb1lUMWxLRlF1Y0dGeVlXMXpMbTF2ZFhObGQyaGxaV3hGZG1WdWRITlVZWEpuWldRcEtTeGhMbTl1S0ZRdWJXOTFjMlYzYUdWbGJDNWxkbVZ1ZEN4MUtTeFVMbkJoY21GdGN5NXRiM1Z6Wlhkb1pXVnNRMjl1ZEhKdmJEMGhNQ3doTUgwc1ZDNXdZWEpoYkd4aGVEMTdjMlYwVkhKaGJuTnNZWFJsT21aMWJtTjBhVzl1S0NsN1ZDNWpiMjUwWVdsdVpYSXVZMmhwYkdSeVpXNG9YQ0piWkdGMFlTMXpkMmx3WlhJdGNHRnlZV3hzWVhoZExDQmJaR0YwWVMxemQybHdaWEl0Y0dGeVlXeHNZWGd0ZUYwc0lGdGtZWFJoTFhOM2FYQmxjaTF3WVhKaGJHeGhlQzE1WFZ3aUtTNWxZV05vS0daMWJtTjBhVzl1S0NsN1l5aDBhR2x6TEZRdWNISnZaM0psYzNNcGZTa3NWQzV6Ykdsa1pYTXVaV0ZqYUNobWRXNWpkR2x2YmlncGUzWmhjaUJoUFdVb2RHaHBjeWs3WVM1bWFXNWtLRndpVzJSaGRHRXRjM2RwY0dWeUxYQmhjbUZzYkdGNFhTd2dXMlJoZEdFdGMzZHBjR1Z5TFhCaGNtRnNiR0Y0TFhoZExDQmJaR0YwWVMxemQybHdaWEl0Y0dGeVlXeHNZWGd0ZVYxY0lpa3VaV0ZqYUNobWRXNWpkR2x2YmlncGUyTW9kR2hwY3l4TllYUm9MbTFwYmloTllYUm9MbTFoZUNoaFd6QmRMbkJ5YjJkeVpYTnpMQzB4S1N3eEtTbDlLWDBwZlN4elpYUlVjbUZ1YzJsMGFXOXVPbVoxYm1OMGFXOXVLR0VwZTNadmFXUWdNRDA5UFdFbUppaGhQVlF1Y0dGeVlXMXpMbk53WldWa0tTeFVMbU52Ym5SaGFXNWxjaTVtYVc1a0tGd2lXMlJoZEdFdGMzZHBjR1Z5TFhCaGNtRnNiR0Y0WFN3Z1cyUmhkR0V0YzNkcGNHVnlMWEJoY21Gc2JHRjRMWGhkTENCYlpHRjBZUzF6ZDJsd1pYSXRjR0Z5WVd4c1lYZ3RlVjFjSWlrdVpXRmphQ2htZFc1amRHbHZiaWdwZTNaaGNpQjBQV1VvZEdocGN5a3NjejF3WVhKelpVbHVkQ2gwTG1GMGRISW9YQ0prWVhSaExYTjNhWEJsY2kxd1lYSmhiR3hoZUMxa2RYSmhkR2x2Ymx3aUtTd3hNQ2w4ZkdFN01EMDlQV0VtSmloelBUQXBMSFF1ZEhKaGJuTnBkR2x2YmloektYMHBmWDBzVkM1NmIyOXRQWHR6WTJGc1pUb3hMR04xY25KbGJuUlRZMkZzWlRveExHbHpVMk5oYkdsdVp6b2hNU3huWlhOMGRYSmxPbnR6Ykdsa1pUcDJiMmxrSURBc2MyeHBaR1ZYYVdSMGFEcDJiMmxrSURBc2MyeHBaR1ZJWldsbmFIUTZkbTlwWkNBd0xHbHRZV2RsT25admFXUWdNQ3hwYldGblpWZHlZWEE2ZG05cFpDQXdMSHB2YjIxTllYZzZWQzV3WVhKaGJYTXVlbTl2YlUxaGVIMHNhVzFoWjJVNmUybHpWRzkxWTJobFpEcDJiMmxrSURBc2FYTk5iM1psWkRwMmIybGtJREFzWTNWeWNtVnVkRmc2ZG05cFpDQXdMR04xY25KbGJuUlpPblp2YVdRZ01DeHRhVzVZT25admFXUWdNQ3h0YVc1Wk9uWnZhV1FnTUN4dFlYaFlPblp2YVdRZ01DeHRZWGhaT25admFXUWdNQ3gzYVdSMGFEcDJiMmxrSURBc2FHVnBaMmgwT25admFXUWdNQ3h6ZEdGeWRGZzZkbTlwWkNBd0xITjBZWEowV1RwMmIybGtJREFzZEc5MVkyaGxjMU4wWVhKME9udDlMSFJ2ZFdOb1pYTkRkWEp5Wlc1ME9udDlmU3gyWld4dlkybDBlVHA3ZURwMmIybGtJREFzZVRwMmIybGtJREFzY0hKbGRsQnZjMmwwYVc5dVdEcDJiMmxrSURBc2NISmxkbEJ2YzJsMGFXOXVXVHAyYjJsa0lEQXNjSEpsZGxScGJXVTZkbTlwWkNBd2ZTeG5aWFJFYVhOMFlXNWpaVUpsZEhkbFpXNVViM1ZqYUdWek9tWjFibU4wYVc5dUtHVXBlMmxtS0dVdWRHRnlaMlYwVkc5MVkyaGxjeTVzWlc1bmRHZzhNaWx5WlhSMWNtNGdNVHQyWVhJZ1lUMWxMblJoY21kbGRGUnZkV05vWlhOYk1GMHVjR0ZuWlZnc2REMWxMblJoY21kbGRGUnZkV05vWlhOYk1GMHVjR0ZuWlZrc2N6MWxMblJoY21kbGRGUnZkV05vWlhOYk1WMHVjR0ZuWlZnc2FUMWxMblJoY21kbGRGUnZkV05vWlhOYk1WMHVjR0ZuWlZrN2NtVjBkWEp1SUUxaGRHZ3VjM0Z5ZENoTllYUm9MbkJ2ZHloekxXRXNNaWtyVFdGMGFDNXdiM2NvYVMxMExESXBLWDBzYjI1SFpYTjBkWEpsVTNSaGNuUTZablZ1WTNScGIyNG9ZU2w3ZG1GeUlIUTlWQzU2YjI5dE8ybG1LQ0ZVTG5OMWNIQnZjblF1WjJWemRIVnlaWE1wZTJsbUtGd2lkRzkxWTJoemRHRnlkRndpSVQwOVlTNTBlWEJsZkh4Y0luUnZkV05vYzNSaGNuUmNJajA5UFdFdWRIbHdaU1ltWVM1MFlYSm5aWFJVYjNWamFHVnpMbXhsYm1kMGFEd3lLWEpsZEhWeWJqdDBMbWRsYzNSMWNtVXVjMk5oYkdWVGRHRnlkRDEwTG1kbGRFUnBjM1JoYm1ObFFtVjBkMlZsYmxSdmRXTm9aWE1vWVNsOWFXWW9JU2gwTG1kbGMzUjFjbVV1YzJ4cFpHVW1KblF1WjJWemRIVnlaUzV6Ykdsa1pTNXNaVzVuZEdoOGZDaDBMbWRsYzNSMWNtVXVjMnhwWkdVOVpTaDBhR2x6S1N3d1BUMDlkQzVuWlhOMGRYSmxMbk5zYVdSbExteGxibWQwYUNZbUtIUXVaMlZ6ZEhWeVpTNXpiR2xrWlQxVUxuTnNhV1JsY3k1bGNTaFVMbUZqZEdsMlpVbHVaR1Y0S1Nrc2RDNW5aWE4wZFhKbExtbHRZV2RsUFhRdVoyVnpkSFZ5WlM1emJHbGtaUzVtYVc1a0tGd2lhVzFuTENCemRtY3NJR05oYm5aaGMxd2lLU3gwTG1kbGMzUjFjbVV1YVcxaFoyVlhjbUZ3UFhRdVoyVnpkSFZ5WlM1cGJXRm5aUzV3WVhKbGJuUW9YQ0l1WENJclZDNXdZWEpoYlhNdWVtOXZiVU52Ym5SaGFXNWxja05zWVhOektTeDBMbWRsYzNSMWNtVXVlbTl2YlUxaGVEMTBMbWRsYzNSMWNtVXVhVzFoWjJWWGNtRndMbUYwZEhJb1hDSmtZWFJoTFhOM2FYQmxjaTE2YjI5dFhDSXBmSHhVTG5CaGNtRnRjeTU2YjI5dFRXRjRMREFoUFQxMExtZGxjM1IxY21VdWFXMWhaMlZYY21Gd0xteGxibWQwYUNrcEtYSmxkSFZ5YmlCMmIybGtLSFF1WjJWemRIVnlaUzVwYldGblpUMTJiMmxrSURBcE8zUXVaMlZ6ZEhWeVpTNXBiV0ZuWlM1MGNtRnVjMmwwYVc5dUtEQXBMSFF1YVhOVFkyRnNhVzVuUFNFd2ZTeHZia2RsYzNSMWNtVkRhR0Z1WjJVNlpuVnVZM1JwYjI0b1pTbDdkbUZ5SUdFOVZDNTZiMjl0TzJsbUtDRlVMbk4xY0hCdmNuUXVaMlZ6ZEhWeVpYTXBlMmxtS0Z3aWRHOTFZMmh0YjNabFhDSWhQVDFsTG5SNWNHVjhmRndpZEc5MVkyaHRiM1psWENJOVBUMWxMblI1Y0dVbUptVXVkR0Z5WjJWMFZHOTFZMmhsY3k1c1pXNW5kR2c4TWlseVpYUjFjbTQ3WVM1blpYTjBkWEpsTG5OallXeGxUVzkyWlQxaExtZGxkRVJwYzNSaGJtTmxRbVYwZDJWbGJsUnZkV05vWlhNb1pTbDlZUzVuWlhOMGRYSmxMbWx0WVdkbEppWXdJVDA5WVM1blpYTjBkWEpsTG1sdFlXZGxMbXhsYm1kMGFDWW1LRlF1YzNWd2NHOXlkQzVuWlhOMGRYSmxjejloTG5OallXeGxQV1V1YzJOaGJHVXFZUzVqZFhKeVpXNTBVMk5oYkdVNllTNXpZMkZzWlQxaExtZGxjM1IxY21VdWMyTmhiR1ZOYjNabEwyRXVaMlZ6ZEhWeVpTNXpZMkZzWlZOMFlYSjBLbUV1WTNWeWNtVnVkRk5qWVd4bExHRXVjMk5oYkdVK1lTNW5aWE4wZFhKbExucHZiMjFOWVhnbUppaGhMbk5qWVd4bFBXRXVaMlZ6ZEhWeVpTNTZiMjl0VFdGNExURXJUV0YwYUM1d2IzY29ZUzV6WTJGc1pTMWhMbWRsYzNSMWNtVXVlbTl2YlUxaGVDc3hMQzQxS1Nrc1lTNXpZMkZzWlR4VUxuQmhjbUZ0Y3k1NmIyOXRUV2x1SmlZb1lTNXpZMkZzWlQxVUxuQmhjbUZ0Y3k1NmIyOXRUV2x1S3pFdFRXRjBhQzV3YjNjb1ZDNXdZWEpoYlhNdWVtOXZiVTFwYmkxaExuTmpZV3hsS3pFc0xqVXBLU3hoTG1kbGMzUjFjbVV1YVcxaFoyVXVkSEpoYm5ObWIzSnRLRndpZEhKaGJuTnNZWFJsTTJRb01Dd3dMREFwSUhOallXeGxLRndpSzJFdWMyTmhiR1VyWENJcFhDSXBLWDBzYjI1SFpYTjBkWEpsUlc1a09tWjFibU4wYVc5dUtHVXBlM1poY2lCaFBWUXVlbTl2YlRzaFZDNXpkWEJ3YjNKMExtZGxjM1IxY21WekppWW9YQ0owYjNWamFHVnVaRndpSVQwOVpTNTBlWEJsZkh4Y0luUnZkV05vWlc1a1hDSTlQVDFsTG5SNWNHVW1KbVV1WTJoaGJtZGxaRlJ2ZFdOb1pYTXViR1Z1WjNSb1BESXBmSHhoTG1kbGMzUjFjbVV1YVcxaFoyVW1KakFoUFQxaExtZGxjM1IxY21VdWFXMWhaMlV1YkdWdVozUm9KaVlvWVM1elkyRnNaVDFOWVhSb0xtMWhlQ2hOWVhSb0xtMXBiaWhoTG5OallXeGxMR0V1WjJWemRIVnlaUzU2YjI5dFRXRjRLU3hVTG5CaGNtRnRjeTU2YjI5dFRXbHVLU3hoTG1kbGMzUjFjbVV1YVcxaFoyVXVkSEpoYm5OcGRHbHZiaWhVTG5CaGNtRnRjeTV6Y0dWbFpDa3VkSEpoYm5ObWIzSnRLRndpZEhKaGJuTnNZWFJsTTJRb01Dd3dMREFwSUhOallXeGxLRndpSzJFdWMyTmhiR1VyWENJcFhDSXBMR0V1WTNWeWNtVnVkRk5qWVd4bFBXRXVjMk5oYkdVc1lTNXBjMU5qWVd4cGJtYzlJVEVzTVQwOVBXRXVjMk5oYkdVbUppaGhMbWRsYzNSMWNtVXVjMnhwWkdVOWRtOXBaQ0F3S1NsOUxHOXVWRzkxWTJoVGRHRnlkRHBtZFc1amRHbHZiaWhsTEdFcGUzWmhjaUIwUFdVdWVtOXZiVHQwTG1kbGMzUjFjbVV1YVcxaFoyVW1KakFoUFQxMExtZGxjM1IxY21VdWFXMWhaMlV1YkdWdVozUm9KaVlvZEM1cGJXRm5aUzVwYzFSdmRXTm9aV1I4ZkNoY0ltRnVaSEp2YVdSY0lqMDlQV1V1WkdWMmFXTmxMbTl6SmlaaExuQnlaWFpsYm5SRVpXWmhkV3gwS0Nrc2RDNXBiV0ZuWlM1cGMxUnZkV05vWldROUlUQXNkQzVwYldGblpTNTBiM1ZqYUdWelUzUmhjblF1ZUQxY0luUnZkV05vYzNSaGNuUmNJajA5UFdFdWRIbHdaVDloTG5SaGNtZGxkRlJ2ZFdOb1pYTmJNRjB1Y0dGblpWZzZZUzV3WVdkbFdDeDBMbWx0WVdkbExuUnZkV05vWlhOVGRHRnlkQzU1UFZ3aWRHOTFZMmh6ZEdGeWRGd2lQVDA5WVM1MGVYQmxQMkV1ZEdGeVoyVjBWRzkxWTJobGMxc3dYUzV3WVdkbFdUcGhMbkJoWjJWWktTbDlMRzl1Vkc5MVkyaE5iM1psT21aMWJtTjBhVzl1S0dVcGUzWmhjaUJoUFZRdWVtOXZiVHRwWmloaExtZGxjM1IxY21VdWFXMWhaMlVtSmpBaFBUMWhMbWRsYzNSMWNtVXVhVzFoWjJVdWJHVnVaM1JvSmlZb1ZDNWhiR3h2ZDBOc2FXTnJQU0V4TEdFdWFXMWhaMlV1YVhOVWIzVmphR1ZrSmlaaExtZGxjM1IxY21VdWMyeHBaR1VwS1h0aExtbHRZV2RsTG1selRXOTJaV1I4ZkNoaExtbHRZV2RsTG5kcFpIUm9QV0V1WjJWemRIVnlaUzVwYldGblpWc3dYUzV2Wm1aelpYUlhhV1IwYUN4aExtbHRZV2RsTG1obGFXZG9kRDFoTG1kbGMzUjFjbVV1YVcxaFoyVmJNRjB1YjJabWMyVjBTR1ZwWjJoMExHRXVhVzFoWjJVdWMzUmhjblJZUFZRdVoyVjBWSEpoYm5Oc1lYUmxLR0V1WjJWemRIVnlaUzVwYldGblpWZHlZWEJiTUYwc1hDSjRYQ0lwZkh3d0xHRXVhVzFoWjJVdWMzUmhjblJaUFZRdVoyVjBWSEpoYm5Oc1lYUmxLR0V1WjJWemRIVnlaUzVwYldGblpWZHlZWEJiTUYwc1hDSjVYQ0lwZkh3d0xHRXVaMlZ6ZEhWeVpTNXpiR2xrWlZkcFpIUm9QV0V1WjJWemRIVnlaUzV6Ykdsa1pWc3dYUzV2Wm1aelpYUlhhV1IwYUN4aExtZGxjM1IxY21VdWMyeHBaR1ZJWldsbmFIUTlZUzVuWlhOMGRYSmxMbk5zYVdSbFd6QmRMbTltWm5ObGRFaGxhV2RvZEN4aExtZGxjM1IxY21VdWFXMWhaMlZYY21Gd0xuUnlZVzV6YVhScGIyNG9NQ2tzVkM1eWRHd21KaWhoTG1sdFlXZGxMbk4wWVhKMFdEMHRZUzVwYldGblpTNXpkR0Z5ZEZncExGUXVjblJzSmlZb1lTNXBiV0ZuWlM1emRHRnlkRms5TFdFdWFXMWhaMlV1YzNSaGNuUlpLU2s3ZG1GeUlIUTlZUzVwYldGblpTNTNhV1IwYUNwaExuTmpZV3hsTEhNOVlTNXBiV0ZuWlM1b1pXbG5hSFFxWVM1elkyRnNaVHRwWmlnaEtIUThZUzVuWlhOMGRYSmxMbk5zYVdSbFYybGtkR2dtSm5NOFlTNW5aWE4wZFhKbExuTnNhV1JsU0dWcFoyaDBLU2w3YVdZb1lTNXBiV0ZuWlM1dGFXNVlQVTFoZEdndWJXbHVLR0V1WjJWemRIVnlaUzV6Ykdsa1pWZHBaSFJvTHpJdGRDOHlMREFwTEdFdWFXMWhaMlV1YldGNFdEMHRZUzVwYldGblpTNXRhVzVZTEdFdWFXMWhaMlV1YldsdVdUMU5ZWFJvTG0xcGJpaGhMbWRsYzNSMWNtVXVjMnhwWkdWSVpXbG5hSFF2TWkxekx6SXNNQ2tzWVM1cGJXRm5aUzV0WVhoWlBTMWhMbWx0WVdkbExtMXBibGtzWVM1cGJXRm5aUzUwYjNWamFHVnpRM1Z5Y21WdWRDNTRQVndpZEc5MVkyaHRiM1psWENJOVBUMWxMblI1Y0dVL1pTNTBZWEpuWlhSVWIzVmphR1Z6V3pCZExuQmhaMlZZT21VdWNHRm5aVmdzWVM1cGJXRm5aUzUwYjNWamFHVnpRM1Z5Y21WdWRDNTVQVndpZEc5MVkyaHRiM1psWENJOVBUMWxMblI1Y0dVL1pTNTBZWEpuWlhSVWIzVmphR1Z6V3pCZExuQmhaMlZaT21VdWNHRm5aVmtzSVdFdWFXMWhaMlV1YVhOTmIzWmxaQ1ltSVdFdWFYTlRZMkZzYVc1bktYdHBaaWhVTG1selNHOXlhWHB2Ym5SaGJDZ3BKaVpOWVhSb0xtWnNiMjl5S0dFdWFXMWhaMlV1YldsdVdDazlQVDFOWVhSb0xtWnNiMjl5S0dFdWFXMWhaMlV1YzNSaGNuUllLU1ltWVM1cGJXRm5aUzUwYjNWamFHVnpRM1Z5Y21WdWRDNTRQR0V1YVcxaFoyVXVkRzkxWTJobGMxTjBZWEowTG5oOGZFMWhkR2d1Wm14dmIzSW9ZUzVwYldGblpTNXRZWGhZS1QwOVBVMWhkR2d1Wm14dmIzSW9ZUzVwYldGblpTNXpkR0Z5ZEZncEppWmhMbWx0WVdkbExuUnZkV05vWlhORGRYSnlaVzUwTG5nK1lTNXBiV0ZuWlM1MGIzVmphR1Z6VTNSaGNuUXVlQ2x5WlhSMWNtNGdkbTlwWkNoaExtbHRZV2RsTG1selZHOTFZMmhsWkQwaE1TazdhV1lvSVZRdWFYTkliM0pwZW05dWRHRnNLQ2ttSmsxaGRHZ3VabXh2YjNJb1lTNXBiV0ZuWlM1dGFXNVpLVDA5UFUxaGRHZ3VabXh2YjNJb1lTNXBiV0ZuWlM1emRHRnlkRmtwSmlaaExtbHRZV2RsTG5SdmRXTm9aWE5EZFhKeVpXNTBMbms4WVM1cGJXRm5aUzUwYjNWamFHVnpVM1JoY25RdWVYeDhUV0YwYUM1bWJHOXZjaWhoTG1sdFlXZGxMbTFoZUZrcFBUMDlUV0YwYUM1bWJHOXZjaWhoTG1sdFlXZGxMbk4wWVhKMFdTa21KbUV1YVcxaFoyVXVkRzkxWTJobGMwTjFjbkpsYm5RdWVUNWhMbWx0WVdkbExuUnZkV05vWlhOVGRHRnlkQzU1S1hKbGRIVnliaUIyYjJsa0tHRXVhVzFoWjJVdWFYTlViM1ZqYUdWa1BTRXhLWDFsTG5CeVpYWmxiblJFWldaaGRXeDBLQ2tzWlM1emRHOXdVSEp2Y0dGbllYUnBiMjRvS1N4aExtbHRZV2RsTG1selRXOTJaV1E5SVRBc1lTNXBiV0ZuWlM1amRYSnlaVzUwV0QxaExtbHRZV2RsTG5SdmRXTm9aWE5EZFhKeVpXNTBMbmd0WVM1cGJXRm5aUzUwYjNWamFHVnpVM1JoY25RdWVDdGhMbWx0WVdkbExuTjBZWEowV0N4aExtbHRZV2RsTG1OMWNuSmxiblJaUFdFdWFXMWhaMlV1ZEc5MVkyaGxjME4xY25KbGJuUXVlUzFoTG1sdFlXZGxMblJ2ZFdOb1pYTlRkR0Z5ZEM1NUsyRXVhVzFoWjJVdWMzUmhjblJaTEdFdWFXMWhaMlV1WTNWeWNtVnVkRmc4WVM1cGJXRm5aUzV0YVc1WUppWW9ZUzVwYldGblpTNWpkWEp5Wlc1MFdEMWhMbWx0WVdkbExtMXBibGdyTVMxTllYUm9MbkJ2ZHloaExtbHRZV2RsTG0xcGJsZ3RZUzVwYldGblpTNWpkWEp5Wlc1MFdDc3hMQzQ0S1Nrc1lTNXBiV0ZuWlM1amRYSnlaVzUwV0Q1aExtbHRZV2RsTG0xaGVGZ21KaWhoTG1sdFlXZGxMbU4xY25KbGJuUllQV0V1YVcxaFoyVXViV0Y0V0MweEswMWhkR2d1Y0c5M0tHRXVhVzFoWjJVdVkzVnljbVZ1ZEZndFlTNXBiV0ZuWlM1dFlYaFlLekVzTGpncEtTeGhMbWx0WVdkbExtTjFjbkpsYm5SWlBHRXVhVzFoWjJVdWJXbHVXU1ltS0dFdWFXMWhaMlV1WTNWeWNtVnVkRms5WVM1cGJXRm5aUzV0YVc1Wkt6RXRUV0YwYUM1d2IzY29ZUzVwYldGblpTNXRhVzVaTFdFdWFXMWhaMlV1WTNWeWNtVnVkRmtyTVN3dU9Da3BMR0V1YVcxaFoyVXVZM1Z5Y21WdWRGaytZUzVwYldGblpTNXRZWGhaSmlZb1lTNXBiV0ZuWlM1amRYSnlaVzUwV1QxaExtbHRZV2RsTG0xaGVGa3RNU3ROWVhSb0xuQnZkeWhoTG1sdFlXZGxMbU4xY25KbGJuUlpMV0V1YVcxaFoyVXViV0Y0V1NzeExDNDRLU2tzWVM1MlpXeHZZMmwwZVM1d2NtVjJVRzl6YVhScGIyNVlmSHdvWVM1MlpXeHZZMmwwZVM1d2NtVjJVRzl6YVhScGIyNVlQV0V1YVcxaFoyVXVkRzkxWTJobGMwTjFjbkpsYm5RdWVDa3NZUzUyWld4dlkybDBlUzV3Y21WMlVHOXphWFJwYjI1WmZId29ZUzUyWld4dlkybDBlUzV3Y21WMlVHOXphWFJwYjI1WlBXRXVhVzFoWjJVdWRHOTFZMmhsYzBOMWNuSmxiblF1ZVNrc1lTNTJaV3h2WTJsMGVTNXdjbVYyVkdsdFpYeDhLR0V1ZG1Wc2IyTnBkSGt1Y0hKbGRsUnBiV1U5UkdGMFpTNXViM2NvS1Nrc1lTNTJaV3h2WTJsMGVTNTRQU2hoTG1sdFlXZGxMblJ2ZFdOb1pYTkRkWEp5Wlc1MExuZ3RZUzUyWld4dlkybDBlUzV3Y21WMlVHOXphWFJwYjI1WUtTOG9SR0YwWlM1dWIzY29LUzFoTG5abGJHOWphWFI1TG5CeVpYWlVhVzFsS1M4eUxHRXVkbVZzYjJOcGRIa3VlVDBvWVM1cGJXRm5aUzUwYjNWamFHVnpRM1Z5Y21WdWRDNTVMV0V1ZG1Wc2IyTnBkSGt1Y0hKbGRsQnZjMmwwYVc5dVdTa3ZLRVJoZEdVdWJtOTNLQ2t0WVM1MlpXeHZZMmwwZVM1d2NtVjJWR2x0WlNrdk1peE5ZWFJvTG1GaWN5aGhMbWx0WVdkbExuUnZkV05vWlhORGRYSnlaVzUwTG5ndFlTNTJaV3h2WTJsMGVTNXdjbVYyVUc5emFYUnBiMjVZS1R3eUppWW9ZUzUyWld4dlkybDBlUzU0UFRBcExFMWhkR2d1WVdKektHRXVhVzFoWjJVdWRHOTFZMmhsYzBOMWNuSmxiblF1ZVMxaExuWmxiRzlqYVhSNUxuQnlaWFpRYjNOcGRHbHZibGtwUERJbUppaGhMblpsYkc5amFYUjVMbms5TUNrc1lTNTJaV3h2WTJsMGVTNXdjbVYyVUc5emFYUnBiMjVZUFdFdWFXMWhaMlV1ZEc5MVkyaGxjME4xY25KbGJuUXVlQ3hoTG5abGJHOWphWFI1TG5CeVpYWlFiM05wZEdsdmJsazlZUzVwYldGblpTNTBiM1ZqYUdWelEzVnljbVZ1ZEM1NUxHRXVkbVZzYjJOcGRIa3VjSEpsZGxScGJXVTlSR0YwWlM1dWIzY29LU3hoTG1kbGMzUjFjbVV1YVcxaFoyVlhjbUZ3TG5SeVlXNXpabTl5YlNoY0luUnlZVzV6YkdGMFpUTmtLRndpSzJFdWFXMWhaMlV1WTNWeWNtVnVkRmdyWENKd2VDd2dYQ0lyWVM1cGJXRm5aUzVqZFhKeVpXNTBXU3RjSW5CNExEQXBYQ0lwZlgxOUxHOXVWRzkxWTJoRmJtUTZablZ1WTNScGIyNG9aU3hoS1h0MllYSWdkRDFsTG5wdmIyMDdhV1lvZEM1blpYTjBkWEpsTG1sdFlXZGxKaVl3SVQwOWRDNW5aWE4wZFhKbExtbHRZV2RsTG14bGJtZDBhQ2w3YVdZb0lYUXVhVzFoWjJVdWFYTlViM1ZqYUdWa2ZId2hkQzVwYldGblpTNXBjMDF2ZG1Wa0tYSmxkSFZ5YmlCMExtbHRZV2RsTG1selZHOTFZMmhsWkQwaE1TeDJiMmxrS0hRdWFXMWhaMlV1YVhOTmIzWmxaRDBoTVNrN2RDNXBiV0ZuWlM1cGMxUnZkV05vWldROUlURXNkQzVwYldGblpTNXBjMDF2ZG1Wa1BTRXhPM1poY2lCelBUTXdNQ3hwUFRNd01DeHlQWFF1ZG1Wc2IyTnBkSGt1ZUNwekxHNDlkQzVwYldGblpTNWpkWEp5Wlc1MFdDdHlMRzg5ZEM1MlpXeHZZMmwwZVM1NUtta3NiRDEwTG1sdFlXZGxMbU4xY25KbGJuUlpLMjg3TUNFOVBYUXVkbVZzYjJOcGRIa3VlQ1ltS0hNOVRXRjBhQzVoWW5Nb0tHNHRkQzVwYldGblpTNWpkWEp5Wlc1MFdDa3ZkQzUyWld4dlkybDBlUzU0S1Nrc01DRTlQWFF1ZG1Wc2IyTnBkSGt1ZVNZbUtHazlUV0YwYUM1aFluTW9LR3d0ZEM1cGJXRm5aUzVqZFhKeVpXNTBXU2t2ZEM1MlpXeHZZMmwwZVM1NUtTazdkbUZ5SUhBOVRXRjBhQzV0WVhnb2N5eHBLVHQwTG1sdFlXZGxMbU4xY25KbGJuUllQVzRzZEM1cGJXRm5aUzVqZFhKeVpXNTBXVDFzTzNaaGNpQmtQWFF1YVcxaFoyVXVkMmxrZEdncWRDNXpZMkZzWlN4MVBYUXVhVzFoWjJVdWFHVnBaMmgwS25RdWMyTmhiR1U3ZEM1cGJXRm5aUzV0YVc1WVBVMWhkR2d1YldsdUtIUXVaMlZ6ZEhWeVpTNXpiR2xrWlZkcFpIUm9Mekl0WkM4eUxEQXBMSFF1YVcxaFoyVXViV0Y0V0QwdGRDNXBiV0ZuWlM1dGFXNVlMSFF1YVcxaFoyVXViV2x1V1QxTllYUm9MbTFwYmloMExtZGxjM1IxY21VdWMyeHBaR1ZJWldsbmFIUXZNaTExTHpJc01Da3NkQzVwYldGblpTNXRZWGhaUFMxMExtbHRZV2RsTG0xcGJsa3NkQzVwYldGblpTNWpkWEp5Wlc1MFdEMU5ZWFJvTG0xaGVDaE5ZWFJvTG0xcGJpaDBMbWx0WVdkbExtTjFjbkpsYm5SWUxIUXVhVzFoWjJVdWJXRjRXQ2tzZEM1cGJXRm5aUzV0YVc1WUtTeDBMbWx0WVdkbExtTjFjbkpsYm5SWlBVMWhkR2d1YldGNEtFMWhkR2d1YldsdUtIUXVhVzFoWjJVdVkzVnljbVZ1ZEZrc2RDNXBiV0ZuWlM1dFlYaFpLU3gwTG1sdFlXZGxMbTFwYmxrcExIUXVaMlZ6ZEhWeVpTNXBiV0ZuWlZkeVlYQXVkSEpoYm5OcGRHbHZiaWh3S1M1MGNtRnVjMlp2Y20wb1hDSjBjbUZ1YzJ4aGRHVXpaQ2hjSWl0MExtbHRZV2RsTG1OMWNuSmxiblJZSzF3aWNIZ3NJRndpSzNRdWFXMWhaMlV1WTNWeWNtVnVkRmtyWENKd2VDd3dLVndpS1gxOUxHOXVWSEpoYm5OcGRHbHZia1Z1WkRwbWRXNWpkR2x2YmlobEtYdDJZWElnWVQxbExucHZiMjA3WVM1blpYTjBkWEpsTG5Oc2FXUmxKaVpsTG5CeVpYWnBiM1Z6U1c1a1pYZ2hQVDFsTG1GamRHbDJaVWx1WkdWNEppWW9ZUzVuWlhOMGRYSmxMbWx0WVdkbExuUnlZVzV6Wm05eWJTaGNJblJ5WVc1emJHRjBaVE5rS0RBc01Dd3dLU0J6WTJGc1pTZ3hLVndpS1N4aExtZGxjM1IxY21VdWFXMWhaMlZYY21Gd0xuUnlZVzV6Wm05eWJTaGNJblJ5WVc1emJHRjBaVE5rS0RBc01Dd3dLVndpS1N4aExtZGxjM1IxY21VdWMyeHBaR1U5WVM1blpYTjBkWEpsTG1sdFlXZGxQV0V1WjJWemRIVnlaUzVwYldGblpWZHlZWEE5ZG05cFpDQXdMR0V1YzJOaGJHVTlZUzVqZFhKeVpXNTBVMk5oYkdVOU1TbDlMSFJ2WjJkc1pWcHZiMjA2Wm5WdVkzUnBiMjRvWVN4MEtYdDJZWElnY3oxaExucHZiMjA3YVdZb2N5NW5aWE4wZFhKbExuTnNhV1JsZkh3b2N5NW5aWE4wZFhKbExuTnNhV1JsUFdFdVkyeHBZMnRsWkZOc2FXUmxQMlVvWVM1amJHbGphMlZrVTJ4cFpHVXBPbUV1YzJ4cFpHVnpMbVZ4S0dFdVlXTjBhWFpsU1c1a1pYZ3BMSE11WjJWemRIVnlaUzVwYldGblpUMXpMbWRsYzNSMWNtVXVjMnhwWkdVdVptbHVaQ2hjSW1sdFp5d2djM1puTENCallXNTJZWE5jSWlrc2N5NW5aWE4wZFhKbExtbHRZV2RsVjNKaGNEMXpMbWRsYzNSMWNtVXVhVzFoWjJVdWNHRnlaVzUwS0Z3aUxsd2lLMkV1Y0dGeVlXMXpMbnB2YjIxRGIyNTBZV2x1WlhKRGJHRnpjeWtwTEhNdVoyVnpkSFZ5WlM1cGJXRm5aU1ltTUNFOVBYTXVaMlZ6ZEhWeVpTNXBiV0ZuWlM1c1pXNW5kR2dwZTNaaGNpQnBMSElzYml4dkxHd3NjQ3hrTEhVc1l5eHRMR2dzWnl4bUxIWXNkeXg1TEhnc1ZEdDJiMmxrSURBOVBUMXpMbWx0WVdkbExuUnZkV05vWlhOVGRHRnlkQzU0SmlaMFB5aHBQVndpZEc5MVkyaGxibVJjSWowOVBYUXVkSGx3WlQ5MExtTm9ZVzVuWldSVWIzVmphR1Z6V3pCZExuQmhaMlZZT25RdWNHRm5aVmdzY2oxY0luUnZkV05vWlc1a1hDSTlQVDEwTG5SNWNHVS9kQzVqYUdGdVoyVmtWRzkxWTJobGMxc3dYUzV3WVdkbFdUcDBMbkJoWjJWWktUb29hVDF6TG1sdFlXZGxMblJ2ZFdOb1pYTlRkR0Z5ZEM1NExISTljeTVwYldGblpTNTBiM1ZqYUdWelUzUmhjblF1ZVNrc2N5NXpZMkZzWlNZbU1TRTlQWE11YzJOaGJHVS9LSE11YzJOaGJHVTljeTVqZFhKeVpXNTBVMk5oYkdVOU1TeHpMbWRsYzNSMWNtVXVhVzFoWjJWWGNtRndMblJ5WVc1emFYUnBiMjRvTXpBd0tTNTBjbUZ1YzJadmNtMG9YQ0owY21GdWMyeGhkR1V6WkNnd0xEQXNNQ2xjSWlrc2N5NW5aWE4wZFhKbExtbHRZV2RsTG5SeVlXNXphWFJwYjI0b016QXdLUzUwY21GdWMyWnZjbTBvWENKMGNtRnVjMnhoZEdVelpDZ3dMREFzTUNrZ2MyTmhiR1VvTVNsY0lpa3NjeTVuWlhOMGRYSmxMbk5zYVdSbFBYWnZhV1FnTUNrNktITXVjMk5oYkdVOWN5NWpkWEp5Wlc1MFUyTmhiR1U5Y3k1blpYTjBkWEpsTG1sdFlXZGxWM0poY0M1aGRIUnlLRndpWkdGMFlTMXpkMmx3WlhJdGVtOXZiVndpS1h4OFlTNXdZWEpoYlhNdWVtOXZiVTFoZUN4MFB5aDRQWE11WjJWemRIVnlaUzV6Ykdsa1pWc3dYUzV2Wm1aelpYUlhhV1IwYUN4VVBYTXVaMlZ6ZEhWeVpTNXpiR2xrWlZzd1hTNXZabVp6WlhSSVpXbG5hSFFzYmoxekxtZGxjM1IxY21VdWMyeHBaR1V1YjJabWMyVjBLQ2t1YkdWbWRDeHZQWE11WjJWemRIVnlaUzV6Ykdsa1pTNXZabVp6WlhRb0tTNTBiM0FzYkQxdUszZ3ZNaTFwTEhBOWJ5dFVMekl0Y2l4alBYTXVaMlZ6ZEhWeVpTNXBiV0ZuWlZzd1hTNXZabVp6WlhSWGFXUjBhQ3h0UFhNdVoyVnpkSFZ5WlM1cGJXRm5aVnN3WFM1dlptWnpaWFJJWldsbmFIUXNhRDFqS25NdWMyTmhiR1VzWnoxdEtuTXVjMk5oYkdVc1pqMU5ZWFJvTG0xcGJpaDRMekl0YUM4eUxEQXBMSFk5VFdGMGFDNXRhVzRvVkM4eUxXY3ZNaXd3S1N4M1BTMW1MSGs5TFhZc1pEMXNLbk11YzJOaGJHVXNkVDF3S25NdWMyTmhiR1VzWkR4bUppWW9aRDFtS1N4a1BuY21KaWhrUFhjcExIVThkaVltS0hVOWRpa3NkVDU1SmlZb2RUMTVLU2s2S0dROU1DeDFQVEFwTEhNdVoyVnpkSFZ5WlM1cGJXRm5aVmR5WVhBdWRISmhibk5wZEdsdmJpZ3pNREFwTG5SeVlXNXpabTl5YlNoY0luUnlZVzV6YkdGMFpUTmtLRndpSzJRclhDSndlQ3dnWENJcmRTdGNJbkI0TERBcFhDSXBMSE11WjJWemRIVnlaUzVwYldGblpTNTBjbUZ1YzJsMGFXOXVLRE13TUNrdWRISmhibk5tYjNKdEtGd2lkSEpoYm5Oc1lYUmxNMlFvTUN3d0xEQXBJSE5qWVd4bEtGd2lLM011YzJOaGJHVXJYQ0lwWENJcEtYMTlMR0YwZEdGamFFVjJaVzUwY3pwbWRXNWpkR2x2YmloaEtYdDJZWElnZEQxaFAxd2liMlptWENJNlhDSnZibHdpTzJsbUtGUXVjR0Z5WVcxekxucHZiMjBwZTNaaGNpQnpQU2hVTG5Oc2FXUmxjeXdoS0Z3aWRHOTFZMmh6ZEdGeWRGd2lJVDA5VkM1MGIzVmphRVYyWlc1MGN5NXpkR0Z5ZEh4OElWUXVjM1Z3Y0c5eWRDNXdZWE56YVhabFRHbHpkR1Z1WlhKOGZDRlVMbkJoY21GdGN5NXdZWE56YVhabFRHbHpkR1Z1WlhKektTWW1lM0JoYzNOcGRtVTZJVEFzWTJGd2RIVnlaVG9oTVgwcE8xUXVjM1Z3Y0c5eWRDNW5aWE4wZFhKbGN6OG9WQzV6Ykdsa1pYTmJkRjBvWENKblpYTjBkWEpsYzNSaGNuUmNJaXhVTG5wdmIyMHViMjVIWlhOMGRYSmxVM1JoY25Rc2N5a3NWQzV6Ykdsa1pYTmJkRjBvWENKblpYTjBkWEpsWTJoaGJtZGxYQ0lzVkM1NmIyOXRMbTl1UjJWemRIVnlaVU5vWVc1blpTeHpLU3hVTG5Oc2FXUmxjMXQwWFNoY0ltZGxjM1IxY21WbGJtUmNJaXhVTG5wdmIyMHViMjVIWlhOMGRYSmxSVzVrTEhNcEtUcGNJblJ2ZFdOb2MzUmhjblJjSWowOVBWUXVkRzkxWTJoRmRtVnVkSE11YzNSaGNuUW1KaWhVTG5Oc2FXUmxjMXQwWFNoVUxuUnZkV05vUlhabGJuUnpMbk4wWVhKMExGUXVlbTl2YlM1dmJrZGxjM1IxY21WVGRHRnlkQ3h6S1N4VUxuTnNhV1JsYzF0MFhTaFVMblJ2ZFdOb1JYWmxiblJ6TG0xdmRtVXNWQzU2YjI5dExtOXVSMlZ6ZEhWeVpVTm9ZVzVuWlN4ektTeFVMbk5zYVdSbGMxdDBYU2hVTG5SdmRXTm9SWFpsYm5SekxtVnVaQ3hVTG5wdmIyMHViMjVIWlhOMGRYSmxSVzVrTEhNcEtTeFVXM1JkS0Z3aWRHOTFZMmhUZEdGeWRGd2lMRlF1ZW05dmJTNXZibFJ2ZFdOb1UzUmhjblFwTEZRdWMyeHBaR1Z6TG1WaFkyZ29ablZ1WTNScGIyNG9ZU3h6S1h0bEtITXBMbVpwYm1Rb1hDSXVYQ0lyVkM1d1lYSmhiWE11ZW05dmJVTnZiblJoYVc1bGNrTnNZWE56S1M1c1pXNW5kR2crTUNZbVpTaHpLVnQwWFNoVUxuUnZkV05vUlhabGJuUnpMbTF2ZG1Vc1ZDNTZiMjl0TG05dVZHOTFZMmhOYjNabEtYMHBMRlJiZEYwb1hDSjBiM1ZqYUVWdVpGd2lMRlF1ZW05dmJTNXZibFJ2ZFdOb1JXNWtLU3hVVzNSZEtGd2lkSEpoYm5OcGRHbHZia1Z1WkZ3aUxGUXVlbTl2YlM1dmJsUnlZVzV6YVhScGIyNUZibVFwTEZRdWNHRnlZVzF6TG5wdmIyMVViMmRuYkdVbUpsUXViMjRvWENKa2IzVmliR1ZVWVhCY0lpeFVMbnB2YjIwdWRHOW5aMnhsV205dmJTbDlmU3hwYm1sME9tWjFibU4wYVc5dUtDbDdWQzU2YjI5dExtRjBkR0ZqYUVWMlpXNTBjeWdwZlN4a1pYTjBjbTk1T21aMWJtTjBhVzl1S0NsN1ZDNTZiMjl0TG1GMGRHRmphRVYyWlc1MGN5Z2hNQ2w5ZlN4VUxsOXdiSFZuYVc1elBWdGRPMlp2Y2loMllYSWdXU0JwYmlCVUxuQnNkV2RwYm5NcGUzWmhjaUJQUFZRdWNHeDFaMmx1YzF0WlhTaFVMRlF1Y0dGeVlXMXpXMWxkS1R0UEppWlVMbDl3YkhWbmFXNXpMbkIxYzJnb1R5bDljbVYwZFhKdUlGUXVZMkZzYkZCc2RXZHBibk05Wm5WdVkzUnBiMjRvWlNsN1ptOXlLSFpoY2lCaFBUQTdZVHhVTGw5d2JIVm5hVzV6TG14bGJtZDBhRHRoS3lzcFpTQnBiaUJVTGw5d2JIVm5hVzV6VzJGZEppWlVMbDl3YkhWbmFXNXpXMkZkVzJWZEtHRnlaM1Z0Wlc1MGMxc3hYU3hoY21kMWJXVnVkSE5iTWwwc1lYSm5kVzFsYm5Seld6TmRMR0Z5WjNWdFpXNTBjMXMwWFN4aGNtZDFiV1Z1ZEhOYk5WMHBmU3hVTG1WdGFYUjBaWEpGZG1WdWRFeHBjM1JsYm1WeWN6MTdmU3hVTG1WdGFYUTlablZ1WTNScGIyNG9aU2w3VkM1d1lYSmhiWE5iWlYwbUpsUXVjR0Z5WVcxelcyVmRLR0Z5WjNWdFpXNTBjMXN4WFN4aGNtZDFiV1Z1ZEhOYk1sMHNZWEpuZFcxbGJuUnpXek5kTEdGeVozVnRaVzUwYzFzMFhTeGhjbWQxYldWdWRITmJOVjBwTzNaaGNpQmhPMmxtS0ZRdVpXMXBkSFJsY2tWMlpXNTBUR2x6ZEdWdVpYSnpXMlZkS1dadmNpaGhQVEE3WVR4VUxtVnRhWFIwWlhKRmRtVnVkRXhwYzNSbGJtVnljMXRsWFM1c1pXNW5kR2c3WVNzcktWUXVaVzFwZEhSbGNrVjJaVzUwVEdsemRHVnVaWEp6VzJWZFcyRmRLR0Z5WjNWdFpXNTBjMXN4WFN4aGNtZDFiV1Z1ZEhOYk1sMHNZWEpuZFcxbGJuUnpXek5kTEdGeVozVnRaVzUwYzFzMFhTeGhjbWQxYldWdWRITmJOVjBwTzFRdVkyRnNiRkJzZFdkcGJuTW1KbFF1WTJGc2JGQnNkV2RwYm5Nb1pTeGhjbWQxYldWdWRITmJNVjBzWVhKbmRXMWxiblJ6V3pKZExHRnlaM1Z0Wlc1MGMxc3pYU3hoY21kMWJXVnVkSE5iTkYwc1lYSm5kVzFsYm5Seld6VmRLWDBzVkM1dmJqMW1kVzVqZEdsdmJpaGxMR0VwZTNKbGRIVnliaUJsUFcwb1pTa3NWQzVsYldsMGRHVnlSWFpsYm5STWFYTjBaVzVsY25OYlpWMThmQ2hVTG1WdGFYUjBaWEpGZG1WdWRFeHBjM1JsYm1WeWMxdGxYVDFiWFNrc1ZDNWxiV2wwZEdWeVJYWmxiblJNYVhOMFpXNWxjbk5iWlYwdWNIVnphQ2hoS1N4VWZTeFVMbTltWmoxbWRXNWpkR2x2YmlobExHRXBlM1poY2lCME8ybG1LR1U5YlNobEtTeDJiMmxrSURBOVBUMWhLWEpsZEhWeWJpQlVMbVZ0YVhSMFpYSkZkbVZ1ZEV4cGMzUmxibVZ5YzF0bFhUMWJYU3hVTzJsbUtGUXVaVzFwZEhSbGNrVjJaVzUwVEdsemRHVnVaWEp6VzJWZEppWXdJVDA5VkM1bGJXbDBkR1Z5UlhabGJuUk1hWE4wWlc1bGNuTmJaVjB1YkdWdVozUm9LWHRtYjNJb2REMHdPM1E4VkM1bGJXbDBkR1Z5UlhabGJuUk1hWE4wWlc1bGNuTmJaVjB1YkdWdVozUm9PM1FyS3lsVUxtVnRhWFIwWlhKRmRtVnVkRXhwYzNSbGJtVnljMXRsWFZ0MFhUMDlQV0VtSmxRdVpXMXBkSFJsY2tWMlpXNTBUR2x6ZEdWdVpYSnpXMlZkTG5Od2JHbGpaU2gwTERFcE8zSmxkSFZ5YmlCVWZYMHNWQzV2Ym1ObFBXWjFibU4wYVc5dUtHVXNZU2w3WlQxdEtHVXBPM1poY2lCMFBXWjFibU4wYVc5dUtDbDdZU2hoY21kMWJXVnVkSE5iTUYwc1lYSm5kVzFsYm5Seld6RmRMR0Z5WjNWdFpXNTBjMXN5WFN4aGNtZDFiV1Z1ZEhOYk0xMHNZWEpuZFcxbGJuUnpXelJkS1N4VUxtOW1aaWhsTEhRcGZUdHlaWFIxY200Z1ZDNXZiaWhsTEhRcExGUjlMRlF1WVRFeGVUMTdiV0ZyWlVadlkzVnpZV0pzWlRwbWRXNWpkR2x2YmlobEtYdHlaWFIxY200Z1pTNWhkSFJ5S0Z3aWRHRmlTVzVrWlhoY0lpeGNJakJjSWlrc1pYMHNZV1JrVW05c1pUcG1kVzVqZEdsdmJpaGxMR0VwZTNKbGRIVnliaUJsTG1GMGRISW9YQ0p5YjJ4bFhDSXNZU2tzWlgwc1lXUmtUR0ZpWld3NlpuVnVZM1JwYjI0b1pTeGhLWHR5WlhSMWNtNGdaUzVoZEhSeUtGd2lZWEpwWVMxc1lXSmxiRndpTEdFcExHVjlMR1JwYzJGaWJHVTZablZ1WTNScGIyNG9aU2w3Y21WMGRYSnVJR1V1WVhSMGNpaGNJbUZ5YVdFdFpHbHpZV0pzWldSY0lpd2hNQ2tzWlgwc1pXNWhZbXhsT21aMWJtTjBhVzl1S0dVcGUzSmxkSFZ5YmlCbExtRjBkSElvWENKaGNtbGhMV1JwYzJGaWJHVmtYQ0lzSVRFcExHVjlMRzl1Ulc1MFpYSkxaWGs2Wm5WdVkzUnBiMjRvWVNsN01UTTlQVDFoTG10bGVVTnZaR1VtSmlobEtHRXVkR0Z5WjJWMEtTNXBjeWhVTG5CaGNtRnRjeTV1WlhoMFFuVjBkRzl1S1Q4b1ZDNXZia05zYVdOclRtVjRkQ2hoS1N4VUxtbHpSVzVrUDFRdVlURXhlUzV1YjNScFpua29WQzV3WVhKaGJYTXViR0Z6ZEZOc2FXUmxUV1Z6YzJGblpTazZWQzVoTVRGNUxtNXZkR2xtZVNoVUxuQmhjbUZ0Y3k1dVpYaDBVMnhwWkdWTlpYTnpZV2RsS1NrNlpTaGhMblJoY21kbGRDa3VhWE1vVkM1d1lYSmhiWE11Y0hKbGRrSjFkSFJ2YmlrbUppaFVMbTl1UTJ4cFkydFFjbVYyS0dFcExGUXVhWE5DWldkcGJtNXBibWMvVkM1aE1URjVMbTV2ZEdsbWVTaFVMbkJoY21GdGN5NW1hWEp6ZEZOc2FXUmxUV1Z6YzJGblpTazZWQzVoTVRGNUxtNXZkR2xtZVNoVUxuQmhjbUZ0Y3k1d2NtVjJVMnhwWkdWTlpYTnpZV2RsS1Nrc1pTaGhMblJoY21kbGRDa3VhWE1vWENJdVhDSXJWQzV3WVhKaGJYTXVZblZzYkdWMFEyeGhjM01wSmlabEtHRXVkR0Z5WjJWMEtWc3dYUzVqYkdsamF5Z3BLWDBzYkdsMlpWSmxaMmx2YmpwbEtDYzhjM0JoYmlCamJHRnpjejFjSWljclZDNXdZWEpoYlhNdWJtOTBhV1pwWTJGMGFXOXVRMnhoYzNNckoxd2lJR0Z5YVdFdGJHbDJaVDFjSW1GemMyVnlkR2wyWlZ3aUlHRnlhV0V0WVhSdmJXbGpQVndpZEhKMVpWd2lQand2YzNCaGJqNG5LU3h1YjNScFpuazZablZ1WTNScGIyNG9aU2w3ZG1GeUlHRTlWQzVoTVRGNUxteHBkbVZTWldkcGIyNDdNQ0U5UFdFdWJHVnVaM1JvSmlZb1lTNW9kRzFzS0Z3aVhDSXBMR0V1YUhSdGJDaGxLU2w5TEdsdWFYUTZablZ1WTNScGIyNG9LWHRVTG5CaGNtRnRjeTV1WlhoMFFuVjBkRzl1SmlaVUxtNWxlSFJDZFhSMGIyNG1KbFF1Ym1WNGRFSjFkSFJ2Ymk1c1pXNW5kR2crTUNZbUtGUXVZVEV4ZVM1dFlXdGxSbTlqZFhOaFlteGxLRlF1Ym1WNGRFSjFkSFJ2Ymlrc1ZDNWhNVEY1TG1Ga1pGSnZiR1VvVkM1dVpYaDBRblYwZEc5dUxGd2lZblYwZEc5dVhDSXBMRlF1WVRFeGVTNWhaR1JNWVdKbGJDaFVMbTVsZUhSQ2RYUjBiMjRzVkM1d1lYSmhiWE11Ym1WNGRGTnNhV1JsVFdWemMyRm5aU2twTEZRdWNHRnlZVzF6TG5CeVpYWkNkWFIwYjI0bUpsUXVjSEpsZGtKMWRIUnZiaVltVkM1d2NtVjJRblYwZEc5dUxteGxibWQwYUQ0d0ppWW9WQzVoTVRGNUxtMWhhMlZHYjJOMWMyRmliR1VvVkM1d2NtVjJRblYwZEc5dUtTeFVMbUV4TVhrdVlXUmtVbTlzWlNoVUxuQnlaWFpDZFhSMGIyNHNYQ0ppZFhSMGIyNWNJaWtzVkM1aE1URjVMbUZrWkV4aFltVnNLRlF1Y0hKbGRrSjFkSFJ2Yml4VUxuQmhjbUZ0Y3k1d2NtVjJVMnhwWkdWTlpYTnpZV2RsS1Nrc1pTaFVMbU52Ym5SaGFXNWxjaWt1WVhCd1pXNWtLRlF1WVRFeGVTNXNhWFpsVW1WbmFXOXVLWDBzYVc1cGRGQmhaMmx1WVhScGIyNDZablZ1WTNScGIyNG9LWHRVTG5CaGNtRnRjeTV3WVdkcGJtRjBhVzl1SmlaVUxuQmhjbUZ0Y3k1d1lXZHBibUYwYVc5dVEyeHBZMnRoWW14bEppWlVMbUoxYkd4bGRITW1KbFF1WW5Wc2JHVjBjeTVzWlc1bmRHZ21KbFF1WW5Wc2JHVjBjeTVsWVdOb0tHWjFibU4wYVc5dUtDbDdkbUZ5SUdFOVpTaDBhR2x6S1R0VUxtRXhNWGt1YldGclpVWnZZM1Z6WVdKc1pTaGhLU3hVTG1FeE1Ya3VZV1JrVW05c1pTaGhMRndpWW5WMGRHOXVYQ0lwTEZRdVlURXhlUzVoWkdSTVlXSmxiQ2hoTEZRdWNHRnlZVzF6TG5CaFoybHVZWFJwYjI1Q2RXeHNaWFJOWlhOellXZGxMbkpsY0d4aFkyVW9MM3Q3YVc1a1pYaDlmUzhzWVM1cGJtUmxlQ2dwS3pFcEtYMHBmU3hrWlhOMGNtOTVPbVoxYm1OMGFXOXVLQ2w3VkM1aE1URjVMbXhwZG1WU1pXZHBiMjRtSmxRdVlURXhlUzVzYVhabFVtVm5hVzl1TG14bGJtZDBhRDR3SmlaVUxtRXhNWGt1YkdsMlpWSmxaMmx2Ymk1eVpXMXZkbVVvS1gxOUxGUXVhVzVwZEQxbWRXNWpkR2x2YmlncGUxUXVjR0Z5WVcxekxteHZiM0FtSmxRdVkzSmxZWFJsVEc5dmNDZ3BMRlF1ZFhCa1lYUmxRMjl1ZEdGcGJtVnlVMmw2WlNncExGUXVkWEJrWVhSbFUyeHBaR1Z6VTJsNlpTZ3BMRlF1ZFhCa1lYUmxVR0ZuYVc1aGRHbHZiaWdwTEZRdWNHRnlZVzF6TG5OamNtOXNiR0poY2lZbVZDNXpZM0p2Ykd4aVlYSW1KaWhVTG5OamNtOXNiR0poY2k1elpYUW9LU3hVTG5CaGNtRnRjeTV6WTNKdmJHeGlZWEpFY21GbloyRmliR1VtSmxRdWMyTnliMnhzWW1GeUxtVnVZV0pzWlVSeVlXZG5ZV0pzWlNncEtTeGNJbk5zYVdSbFhDSWhQVDFVTG5CaGNtRnRjeTVsWm1abFkzUW1KbFF1WldabVpXTjBjMXRVTG5CaGNtRnRjeTVsWm1abFkzUmRKaVlvVkM1d1lYSmhiWE11Ykc5dmNIeDhWQzUxY0dSaGRHVlFjbTluY21WemN5Z3BMRlF1WldabVpXTjBjMXRVTG5CaGNtRnRjeTVsWm1abFkzUmRMbk5sZEZSeVlXNXpiR0YwWlNncEtTeFVMbkJoY21GdGN5NXNiMjl3UDFRdWMyeHBaR1ZVYnloVUxuQmhjbUZ0Y3k1cGJtbDBhV0ZzVTJ4cFpHVXJWQzVzYjI5d1pXUlRiR2xrWlhNc01DeFVMbkJoY21GdGN5NXlkVzVEWVd4c1ltRmphM05QYmtsdWFYUXBPaWhVTG5Oc2FXUmxWRzhvVkM1d1lYSmhiWE11YVc1cGRHbGhiRk5zYVdSbExEQXNWQzV3WVhKaGJYTXVjblZ1UTJGc2JHSmhZMnR6VDI1SmJtbDBLU3d3UFQwOVZDNXdZWEpoYlhNdWFXNXBkR2xoYkZOc2FXUmxKaVlvVkM1d1lYSmhiR3hoZUNZbVZDNXdZWEpoYlhNdWNHRnlZV3hzWVhnbUpsUXVjR0Z5WVd4c1lYZ3VjMlYwVkhKaGJuTnNZWFJsS0Nrc1ZDNXNZWHA1SmlaVUxuQmhjbUZ0Y3k1c1lYcDVURzloWkdsdVp5WW1LRlF1YkdGNmVTNXNiMkZrS0Nrc1ZDNXNZWHA1TG1sdWFYUnBZV3hKYldGblpVeHZZV1JsWkQwaE1Da3BLU3hVTG1GMGRHRmphRVYyWlc1MGN5Z3BMRlF1Y0dGeVlXMXpMbTlpYzJWeWRtVnlKaVpVTG5OMWNIQnZjblF1YjJKelpYSjJaWEltSmxRdWFXNXBkRTlpYzJWeWRtVnljeWdwTEZRdWNHRnlZVzF6TG5CeVpXeHZZV1JKYldGblpYTW1KaUZVTG5CaGNtRnRjeTVzWVhwNVRHOWhaR2x1WnlZbVZDNXdjbVZzYjJGa1NXMWhaMlZ6S0Nrc1ZDNXdZWEpoYlhNdWVtOXZiU1ltVkM1NmIyOXRKaVpVTG5wdmIyMHVhVzVwZENncExGUXVjR0Z5WVcxekxtRjFkRzl3YkdGNUppWlVMbk4wWVhKMFFYVjBiM0JzWVhrb0tTeFVMbkJoY21GdGN5NXJaWGxpYjJGeVpFTnZiblJ5YjJ3bUpsUXVaVzVoWW14bFMyVjVZbTloY21SRGIyNTBjbTlzSmlaVUxtVnVZV0pzWlV0bGVXSnZZWEprUTI5dWRISnZiQ2dwTEZRdWNHRnlZVzF6TG0xdmRYTmxkMmhsWld4RGIyNTBjbTlzSmlaVUxtVnVZV0pzWlUxdmRYTmxkMmhsWld4RGIyNTBjbTlzSmlaVUxtVnVZV0pzWlUxdmRYTmxkMmhsWld4RGIyNTBjbTlzS0Nrc1ZDNXdZWEpoYlhNdWFHRnphRzVoZGxKbGNHeGhZMlZUZEdGMFpTWW1LRlF1Y0dGeVlXMXpMbkpsY0d4aFkyVlRkR0YwWlQxVUxuQmhjbUZ0Y3k1b1lYTm9ibUYyVW1Wd2JHRmpaVk4wWVhSbEtTeFVMbkJoY21GdGN5NW9hWE4wYjNKNUppWlVMbWhwYzNSdmNua21KbFF1YUdsemRHOXllUzVwYm1sMEtDa3NWQzV3WVhKaGJYTXVhR0Z6YUc1aGRpWW1WQzVvWVhOb2JtRjJKaVpVTG1oaGMyaHVZWFl1YVc1cGRDZ3BMRlF1Y0dGeVlXMXpMbUV4TVhrbUpsUXVZVEV4ZVNZbVZDNWhNVEY1TG1sdWFYUW9LU3hVTG1WdGFYUW9YQ0p2YmtsdWFYUmNJaXhVS1gwc1ZDNWpiR1ZoYm5Wd1UzUjViR1Z6UFdaMWJtTjBhVzl1S0NsN1ZDNWpiMjUwWVdsdVpYSXVjbVZ0YjNabFEyeGhjM01vVkM1amJHRnpjMDVoYldWekxtcHZhVzRvWENJZ1hDSXBLUzV5WlcxdmRtVkJkSFJ5S0Z3aWMzUjViR1ZjSWlrc1ZDNTNjbUZ3Y0dWeUxuSmxiVzkyWlVGMGRISW9YQ0p6ZEhsc1pWd2lLU3hVTG5Oc2FXUmxjeVltVkM1emJHbGtaWE11YkdWdVozUm9KaVpVTG5Oc2FXUmxjeTV5WlcxdmRtVkRiR0Z6Y3loYlZDNXdZWEpoYlhNdWMyeHBaR1ZXYVhOcFlteGxRMnhoYzNNc1ZDNXdZWEpoYlhNdWMyeHBaR1ZCWTNScGRtVkRiR0Z6Y3l4VUxuQmhjbUZ0Y3k1emJHbGtaVTVsZUhSRGJHRnpjeXhVTG5CaGNtRnRjeTV6Ykdsa1pWQnlaWFpEYkdGemMxMHVhbTlwYmloY0lpQmNJaWtwTG5KbGJXOTJaVUYwZEhJb1hDSnpkSGxzWlZ3aUtTNXlaVzF2ZG1WQmRIUnlLRndpWkdGMFlTMXpkMmx3WlhJdFkyOXNkVzF1WENJcExuSmxiVzkyWlVGMGRISW9YQ0prWVhSaExYTjNhWEJsY2kxeWIzZGNJaWtzVkM1d1lXZHBibUYwYVc5dVEyOXVkR0ZwYm1WeUppWlVMbkJoWjJsdVlYUnBiMjVEYjI1MFlXbHVaWEl1YkdWdVozUm9KaVpVTG5CaFoybHVZWFJwYjI1RGIyNTBZV2x1WlhJdWNtVnRiM1psUTJ4aGMzTW9WQzV3WVhKaGJYTXVjR0ZuYVc1aGRHbHZia2hwWkdSbGJrTnNZWE56S1N4VUxtSjFiR3hsZEhNbUpsUXVZblZzYkdWMGN5NXNaVzVuZEdnbUpsUXVZblZzYkdWMGN5NXlaVzF2ZG1WRGJHRnpjeWhVTG5CaGNtRnRjeTVpZFd4c1pYUkJZM1JwZG1WRGJHRnpjeWtzVkM1d1lYSmhiWE11Y0hKbGRrSjFkSFJ2YmlZbVpTaFVMbkJoY21GdGN5NXdjbVYyUW5WMGRHOXVLUzV5WlcxdmRtVkRiR0Z6Y3loVUxuQmhjbUZ0Y3k1aWRYUjBiMjVFYVhOaFlteGxaRU5zWVhOektTeFVMbkJoY21GdGN5NXVaWGgwUW5WMGRHOXVKaVpsS0ZRdWNHRnlZVzF6TG01bGVIUkNkWFIwYjI0cExuSmxiVzkyWlVOc1lYTnpLRlF1Y0dGeVlXMXpMbUoxZEhSdmJrUnBjMkZpYkdWa1EyeGhjM01wTEZRdWNHRnlZVzF6TG5OamNtOXNiR0poY2lZbVZDNXpZM0p2Ykd4aVlYSW1KaWhVTG5OamNtOXNiR0poY2k1MGNtRmpheVltVkM1elkzSnZiR3hpWVhJdWRISmhZMnN1YkdWdVozUm9KaVpVTG5OamNtOXNiR0poY2k1MGNtRmpheTV5WlcxdmRtVkJkSFJ5S0Z3aWMzUjViR1ZjSWlrc1ZDNXpZM0p2Ykd4aVlYSXVaSEpoWnlZbVZDNXpZM0p2Ykd4aVlYSXVaSEpoWnk1c1pXNW5kR2dtSmxRdWMyTnliMnhzWW1GeUxtUnlZV2N1Y21WdGIzWmxRWFIwY2loY0luTjBlV3hsWENJcEtYMHNWQzVrWlhOMGNtOTVQV1oxYm1OMGFXOXVLR1VzWVNsN1ZDNWtaWFJoWTJoRmRtVnVkSE1vS1N4VUxuTjBiM0JCZFhSdmNHeGhlU2dwTEZRdWNHRnlZVzF6TG5OamNtOXNiR0poY2lZbVZDNXpZM0p2Ykd4aVlYSW1KbFF1Y0dGeVlXMXpMbk5qY205c2JHSmhja1J5WVdkbllXSnNaU1ltVkM1elkzSnZiR3hpWVhJdVpHbHpZV0pzWlVSeVlXZG5ZV0pzWlNncExGUXVjR0Z5WVcxekxteHZiM0FtSmxRdVpHVnpkSEp2ZVV4dmIzQW9LU3hoSmlaVUxtTnNaV0Z1ZFhCVGRIbHNaWE1vS1N4VUxtUnBjMk52Ym01bFkzUlBZbk5sY25abGNuTW9LU3hVTG5CaGNtRnRjeTU2YjI5dEppWlVMbnB2YjIwbUpsUXVlbTl2YlM1a1pYTjBjbTk1S0Nrc1ZDNXdZWEpoYlhNdWEyVjVZbTloY21SRGIyNTBjbTlzSmlaVUxtUnBjMkZpYkdWTFpYbGliMkZ5WkVOdmJuUnliMndtSmxRdVpHbHpZV0pzWlV0bGVXSnZZWEprUTI5dWRISnZiQ2dwTEZRdWNHRnlZVzF6TG0xdmRYTmxkMmhsWld4RGIyNTBjbTlzSmlaVUxtUnBjMkZpYkdWTmIzVnpaWGRvWldWc1EyOXVkSEp2YkNZbVZDNWthWE5oWW14bFRXOTFjMlYzYUdWbGJFTnZiblJ5YjJ3b0tTeFVMbkJoY21GdGN5NWhNVEY1SmlaVUxtRXhNWGttSmxRdVlURXhlUzVrWlhOMGNtOTVLQ2tzVkM1d1lYSmhiWE11YUdsemRHOXllU1ltSVZRdWNHRnlZVzF6TG5KbGNHeGhZMlZUZEdGMFpTWW1kMmx1Wkc5M0xuSmxiVzkyWlVWMlpXNTBUR2x6ZEdWdVpYSW9YQ0p3YjNCemRHRjBaVndpTEZRdWFHbHpkRzl5ZVM1elpYUklhWE4wYjNKNVVHOXdVM1JoZEdVcExGUXVjR0Z5WVcxekxtaGhjMmh1WVhZbUpsUXVhR0Z6YUc1aGRpWW1WQzVvWVhOb2JtRjJMbVJsYzNSeWIza29LU3hVTG1WdGFYUW9YQ0p2YmtSbGMzUnliM2xjSWlrc1pTRTlQU0V4SmlZb1ZEMXVkV3hzS1gwc1ZDNXBibWwwS0Nrc1ZIMTlPMkV1Y0hKdmRHOTBlWEJsUFh0cGMxTmhabUZ5YVRwbWRXNWpkR2x2YmlncGUzWmhjaUJsUFhkcGJtUnZkeTV1WVhacFoyRjBiM0l1ZFhObGNrRm5aVzUwTG5SdlRHOTNaWEpEWVhObEtDazdjbVYwZFhKdUlHVXVhVzVrWlhoUFppaGNJbk5oWm1GeWFWd2lLVDQ5TUNZbVpTNXBibVJsZUU5bUtGd2lZMmh5YjIxbFhDSXBQREFtSm1VdWFXNWtaWGhQWmloY0ltRnVaSEp2YVdSY0lpazhNSDBvS1N4cGMxVnBWMlZpVm1sbGR6b3ZLR2xRYUc5dVpYeHBVRzlrZkdsUVlXUXBMaXBCY0hCc1pWZGxZa3RwZENnL0lTNHFVMkZtWVhKcEtTOXBMblJsYzNRb2QybHVaRzkzTG01aGRtbG5ZWFJ2Y2k1MWMyVnlRV2RsYm5RcExHbHpRWEp5WVhrNlpuVnVZM1JwYjI0b1pTbDdjbVYwZFhKdVhDSmJiMkpxWldOMElFRnljbUY1WFZ3aVBUMDlUMkpxWldOMExuQnliM1J2ZEhsd1pTNTBiMU4wY21sdVp5NWhjSEJzZVNobEtYMHNZbkp2ZDNObGNqcDdhV1U2ZDJsdVpHOTNMbTVoZG1sbllYUnZjaTV3YjJsdWRHVnlSVzVoWW14bFpIeDhkMmx1Wkc5M0xtNWhkbWxuWVhSdmNpNXRjMUJ2YVc1MFpYSkZibUZpYkdWa0xHbGxWRzkxWTJnNmQybHVaRzkzTG01aGRtbG5ZWFJ2Y2k1dGMxQnZhVzUwWlhKRmJtRmliR1ZrSmlaM2FXNWtiM2N1Ym1GMmFXZGhkRzl5TG0xelRXRjRWRzkxWTJoUWIybHVkSE0rTVh4OGQybHVaRzkzTG01aGRtbG5ZWFJ2Y2k1d2IybHVkR1Z5Ulc1aFlteGxaQ1ltZDJsdVpHOTNMbTVoZG1sbllYUnZjaTV0WVhoVWIzVmphRkJ2YVc1MGN6NHhMR3gwWlVsRk9UcG1kVzVqZEdsdmJpZ3BlM1poY2lCbFBXUnZZM1Z0Wlc1MExtTnlaV0YwWlVWc1pXMWxiblFvWENKa2FYWmNJaWs3Y21WMGRYSnVJR1V1YVc1dVpYSklWRTFNUFZ3aVBDRXRMVnRwWmlCc2RHVWdTVVVnT1YwK1BHaytQQzlwUGp3aFcyVnVaR2xtWFMwdFBsd2lMREU5UFQxbExtZGxkRVZzWlcxbGJuUnpRbmxVWVdkT1lXMWxLRndpYVZ3aUtTNXNaVzVuZEdoOUtDbDlMR1JsZG1salpUcG1kVzVqZEdsdmJpZ3BlM1poY2lCbFBYZHBibVJ2ZHk1dVlYWnBaMkYwYjNJdWRYTmxja0ZuWlc1MExHRTlaUzV0WVhSamFDZ3ZLRUZ1WkhKdmFXUXBPejliWEZ4elhGd3ZYU3NvVzF4Y1pDNWRLeWsvTHlrc2REMWxMbTFoZEdOb0tDOG9hVkJoWkNrdUtrOVRYRnh6S0Z0Y1hHUmZYU3NwTHlrc2N6MWxMbTFoZEdOb0tDOG9hVkJ2WkNrb0xpcFBVMXhjY3loYlhGeGtYMTByS1NrL0x5a3NhVDBoZENZbVpTNXRZWFJqYUNndktHbFFhRzl1WlZ4Y2MwOVRmR2xQVXlsY1hITW9XMXhjWkY5ZEt5a3ZLVHR5WlhSMWNtNTdhVzl6T25SOGZHbDhmSE1zWVc1a2NtOXBaRHBoZlgwb0tTeHpkWEJ3YjNKME9udDBiM1ZqYURwM2FXNWtiM2N1VFc5a1pYSnVhWHB5SmlaTmIyUmxjbTVwZW5JdWRHOTFZMmc5UFQwaE1IeDhablZ1WTNScGIyNG9LWHR5WlhSMWNtNGhJU2hjSW05dWRHOTFZMmh6ZEdGeWRGd2lhVzRnZDJsdVpHOTNmSHgzYVc1a2IzY3VSRzlqZFcxbGJuUlViM1ZqYUNZbVpHOWpkVzFsYm5RZ2FXNXpkR0Z1WTJWdlppQkViMk4xYldWdWRGUnZkV05vS1gwb0tTeDBjbUZ1YzJadmNtMXpNMlE2ZDJsdVpHOTNMazF2WkdWeWJtbDZjaVltVFc5a1pYSnVhWHB5TG1OemMzUnlZVzV6Wm05eWJYTXpaRDA5UFNFd2ZIeG1kVzVqZEdsdmJpZ3BlM1poY2lCbFBXUnZZM1Z0Wlc1MExtTnlaV0YwWlVWc1pXMWxiblFvWENKa2FYWmNJaWt1YzNSNWJHVTdjbVYwZFhKdVhDSjNaV0pyYVhSUVpYSnpjR1ZqZEdsMlpWd2lhVzRnWlh4OFhDSk5iM3BRWlhKemNHVmpkR2wyWlZ3aWFXNGdaWHg4WENKUFVHVnljM0JsWTNScGRtVmNJbWx1SUdWOGZGd2lUWE5RWlhKemNHVmpkR2wyWlZ3aWFXNGdaWHg4WENKd1pYSnpjR1ZqZEdsMlpWd2lhVzRnWlgwb0tTeG1iR1Y0WW05NE9tWjFibU4wYVc5dUtDbDdabTl5S0haaGNpQmxQV1J2WTNWdFpXNTBMbU55WldGMFpVVnNaVzFsYm5Rb1hDSmthWFpjSWlrdWMzUjViR1VzWVQxY0ltRnNhV2R1U1hSbGJYTWdkMlZpYTJsMFFXeHBaMjVKZEdWdGN5QjNaV0pyYVhSQ2IzaEJiR2xuYmlCdGMwWnNaWGhCYkdsbmJpQnRiM3BDYjNoQmJHbG5iaUIzWldKcmFYUkdiR1Y0UkdseVpXTjBhVzl1SUcxelJteGxlRVJwY21WamRHbHZiaUJ0YjNwQ2IzaEVhWEpsWTNScGIyNGdiVzk2UW05NFQzSnBaVzUwSUhkbFltdHBkRUp2ZUVScGNtVmpkR2x2YmlCM1pXSnJhWFJDYjNoUGNtbGxiblJjSWk1emNHeHBkQ2hjSWlCY0lpa3NkRDB3TzNROFlTNXNaVzVuZEdnN2RDc3JLV2xtS0dGYmRGMXBiaUJsS1hKbGRIVnliaUV3ZlNncExHOWljMlZ5ZG1WeU9tWjFibU4wYVc5dUtDbDdjbVYwZFhKdVhDSk5kWFJoZEdsdmJrOWljMlZ5ZG1WeVhDSnBiaUIzYVc1a2IzZDhmRndpVjJWaWEybDBUWFYwWVhScGIyNVBZbk5sY25abGNsd2lhVzRnZDJsdVpHOTNmU2dwTEhCaGMzTnBkbVZNYVhOMFpXNWxjanBtZFc1amRHbHZiaWdwZTNaaGNpQmxQU0V4TzNSeWVYdDJZWElnWVQxUFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29lMzBzWENKd1lYTnphWFpsWENJc2UyZGxkRHBtZFc1amRHbHZiaWdwZTJVOUlUQjlmU2s3ZDJsdVpHOTNMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9YQ0owWlhOMFVHRnpjMmwyWlV4cGMzUmxibVZ5WENJc2JuVnNiQ3hoS1gxallYUmphQ2hsS1h0OWNtVjBkWEp1SUdWOUtDa3NaMlZ6ZEhWeVpYTTZablZ1WTNScGIyNG9LWHR5WlhSMWNtNWNJbTl1WjJWemRIVnlaWE4wWVhKMFhDSnBiaUIzYVc1a2IzZDlLQ2w5TEhCc2RXZHBibk02ZTMxOU8yWnZjaWgyWVhJZ2REMG9ablZ1WTNScGIyNG9LWHQyWVhJZ1pUMW1kVzVqZEdsdmJpaGxLWHQyWVhJZ1lUMTBhR2x6TEhROU1EdG1iM0lvZEQwd08zUThaUzVzWlc1bmRHZzdkQ3NyS1dGYmRGMDlaVnQwWFR0eVpYUjFjbTRnWVM1c1pXNW5kR2c5WlM1c1pXNW5kR2dzZEdocGMzMHNZVDFtZFc1amRHbHZiaWhoTEhRcGUzWmhjaUJ6UFZ0ZExHazlNRHRwWmloaEppWWhkQ1ltWVNCcGJuTjBZVzVqWlc5bUlHVXBjbVYwZFhKdUlHRTdhV1lvWVNscFppaGNJbk4wY21sdVoxd2lQVDEwZVhCbGIyWWdZU2w3ZG1GeUlISXNiaXh2UFdFdWRISnBiU2dwTzJsbUtHOHVhVzVrWlhoUFppaGNJanhjSWlrK1BUQW1KbTh1YVc1a1pYaFBaaWhjSWo1Y0lpaytQVEFwZTNaaGNpQnNQVndpWkdsMlhDSTdabTl5S0RBOVBUMXZMbWx1WkdWNFQyWW9YQ0k4YkdsY0lpa21KaWhzUFZ3aWRXeGNJaWtzTUQwOVBXOHVhVzVrWlhoUFppaGNJangwY2x3aUtTWW1LR3c5WENKMFltOWtlVndpS1N3d0lUMDlieTVwYm1SbGVFOW1LRndpUEhSa1hDSXBKaVl3SVQwOWJ5NXBibVJsZUU5bUtGd2lQSFJvWENJcGZId29iRDFjSW5SeVhDSXBMREE5UFQxdkxtbHVaR1Y0VDJZb1hDSThkR0p2WkhsY0lpa21KaWhzUFZ3aWRHRmliR1ZjSWlrc01EMDlQVzh1YVc1a1pYaFBaaWhjSWp4dmNIUnBiMjVjSWlrbUppaHNQVndpYzJWc1pXTjBYQ0lwTEc0OVpHOWpkVzFsYm5RdVkzSmxZWFJsUld4bGJXVnVkQ2hzS1N4dUxtbHVibVZ5U0ZSTlREMWhMR2s5TUR0cFBHNHVZMmhwYkdST2IyUmxjeTVzWlc1bmRHZzdhU3NyS1hNdWNIVnphQ2h1TG1Ob2FXeGtUbTlrWlhOYmFWMHBmV1ZzYzJVZ1ptOXlLSEk5ZEh4OFhDSWpYQ0loUFQxaFd6QmRmSHhoTG0xaGRHTm9LQzliSUM0OFBqcCtYUzhwUHloMGZIeGtiMk4xYldWdWRDa3VjWFZsY25sVFpXeGxZM1J2Y2tGc2JDaGhLVHBiWkc5amRXMWxiblF1WjJWMFJXeGxiV1Z1ZEVKNVNXUW9ZUzV6Y0d4cGRDaGNJaU5jSWlsYk1WMHBYU3hwUFRBN2FUeHlMbXhsYm1kMGFEdHBLeXNwY2x0cFhTWW1jeTV3ZFhOb0tISmJhVjBwZldWc2MyVWdhV1lvWVM1dWIyUmxWSGx3Wlh4OFlUMDlQWGRwYm1SdmQzeDhZVDA5UFdSdlkzVnRaVzUwS1hNdWNIVnphQ2hoS1R0bGJITmxJR2xtS0dFdWJHVnVaM1JvUGpBbUptRmJNRjB1Ym05a1pWUjVjR1VwWm05eUtHazlNRHRwUEdFdWJHVnVaM1JvTzJrckt5bHpMbkIxYzJnb1lWdHBYU2s3Y21WMGRYSnVJRzVsZHlCbEtITXBmVHR5WlhSMWNtNGdaUzV3Y205MGIzUjVjR1U5ZTJGa1pFTnNZWE56T21aMWJtTjBhVzl1S0dVcGUybG1LSFp2YVdRZ01EMDlQV1VwY21WMGRYSnVJSFJvYVhNN1ptOXlLSFpoY2lCaFBXVXVjM0JzYVhRb1hDSWdYQ0lwTEhROU1EdDBQR0V1YkdWdVozUm9PM1FyS3lsbWIzSW9kbUZ5SUhNOU1EdHpQSFJvYVhNdWJHVnVaM1JvTzNNckt5bDBhR2x6VzNOZExtTnNZWE56VEdsemRDNWhaR1FvWVZ0MFhTazdjbVYwZFhKdUlIUm9hWE45TEhKbGJXOTJaVU5zWVhOek9tWjFibU4wYVc5dUtHVXBlMlp2Y2loMllYSWdZVDFsTG5Od2JHbDBLRndpSUZ3aUtTeDBQVEE3ZER4aExteGxibWQwYUR0MEt5c3BabTl5S0haaGNpQnpQVEE3Y3p4MGFHbHpMbXhsYm1kMGFEdHpLeXNwZEdocGMxdHpYUzVqYkdGemMweHBjM1F1Y21WdGIzWmxLR0ZiZEYwcE8zSmxkSFZ5YmlCMGFHbHpmU3hvWVhORGJHRnpjenBtZFc1amRHbHZiaWhsS1h0eVpYUjFjbTRoSVhSb2FYTmJNRjBtSm5Sb2FYTmJNRjB1WTJ4aGMzTk1hWE4wTG1OdmJuUmhhVzV6S0dVcGZTeDBiMmRuYkdWRGJHRnpjenBtZFc1amRHbHZiaWhsS1h0bWIzSW9kbUZ5SUdFOVpTNXpjR3hwZENoY0lpQmNJaWtzZEQwd08zUThZUzVzWlc1bmRHZzdkQ3NyS1dadmNpaDJZWElnY3owd08zTThkR2hwY3k1c1pXNW5kR2c3Y3lzcktYUm9hWE5iYzEwdVkyeGhjM05NYVhOMExuUnZaMmRzWlNoaFczUmRLVHR5WlhSMWNtNGdkR2hwYzMwc1lYUjBjanBtZFc1amRHbHZiaWhsTEdFcGUybG1LREU5UFQxaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvSmlaY0luTjBjbWx1WjF3aVBUMTBlWEJsYjJZZ1pTbHlaWFIxY200Z2RHaHBjMXN3WFQ5MGFHbHpXekJkTG1kbGRFRjBkSEpwWW5WMFpTaGxLVHAyYjJsa0lEQTdabTl5S0haaGNpQjBQVEE3ZER4MGFHbHpMbXhsYm1kMGFEdDBLeXNwYVdZb01qMDlQV0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ3BkR2hwYzF0MFhTNXpaWFJCZEhSeWFXSjFkR1VvWlN4aEtUdGxiSE5sSUdadmNpaDJZWElnY3lCcGJpQmxLWFJvYVhOYmRGMWJjMTA5WlZ0elhTeDBhR2x6VzNSZExuTmxkRUYwZEhKcFluVjBaU2h6TEdWYmMxMHBPM0psZEhWeWJpQjBhR2x6ZlN4eVpXMXZkbVZCZEhSeU9tWjFibU4wYVc5dUtHVXBlMlp2Y2loMllYSWdZVDB3TzJFOGRHaHBjeTVzWlc1bmRHZzdZU3NyS1hSb2FYTmJZVjB1Y21WdGIzWmxRWFIwY21saWRYUmxLR1VwTzNKbGRIVnliaUIwYUdsemZTeGtZWFJoT21aMWJtTjBhVzl1S0dVc1lTbDdhV1lvZG05cFpDQXdJVDA5WVNsN1ptOXlLSFpoY2lCMFBUQTdkRHgwYUdsekxteGxibWQwYUR0MEt5c3BlM1poY2lCelBYUm9hWE5iZEYwN2N5NWtiMjAzUld4bGJXVnVkRVJoZEdGVGRHOXlZV2RsZkh3b2N5NWtiMjAzUld4bGJXVnVkRVJoZEdGVGRHOXlZV2RsUFh0OUtTeHpMbVJ2YlRkRmJHVnRaVzUwUkdGMFlWTjBiM0poWjJWYlpWMDlZWDF5WlhSMWNtNGdkR2hwYzMxcFppaDBhR2x6V3pCZEtYdDJZWElnYVQxMGFHbHpXekJkTG1kbGRFRjBkSEpwWW5WMFpTaGNJbVJoZEdFdFhDSXJaU2s3Y21WMGRYSnVJR2svYVRwMGFHbHpXekJkTG1SdmJUZEZiR1Z0Wlc1MFJHRjBZVk4wYjNKaFoyVW1KbVVnYVc0Z2RHaHBjMXN3WFM1a2IyMDNSV3hsYldWdWRFUmhkR0ZUZEc5eVlXZGxQM1JvYVhOYk1GMHVaRzl0TjBWc1pXMWxiblJFWVhSaFUzUnZjbUZuWlZ0bFhUcDJiMmxrSURCOWZTeDBjbUZ1YzJadmNtMDZablZ1WTNScGIyNG9aU2w3Wm05eUtIWmhjaUJoUFRBN1lUeDBhR2x6TG14bGJtZDBhRHRoS3lzcGUzWmhjaUIwUFhSb2FYTmJZVjB1YzNSNWJHVTdkQzUzWldKcmFYUlVjbUZ1YzJadmNtMDlkQzVOYzFSeVlXNXpabTl5YlQxMExtMXpWSEpoYm5ObWIzSnRQWFF1VFc5NlZISmhibk5tYjNKdFBYUXVUMVJ5WVc1elptOXliVDEwTG5SeVlXNXpabTl5YlQxbGZYSmxkSFZ5YmlCMGFHbHpmU3gwY21GdWMybDBhVzl1T21aMWJtTjBhVzl1S0dVcGUxd2ljM1J5YVc1blhDSWhQWFI1Y0dWdlppQmxKaVlvWlNzOVhDSnRjMXdpS1R0bWIzSW9kbUZ5SUdFOU1EdGhQSFJvYVhNdWJHVnVaM1JvTzJFckt5bDdkbUZ5SUhROWRHaHBjMXRoWFM1emRIbHNaVHQwTG5kbFltdHBkRlJ5WVc1emFYUnBiMjVFZFhKaGRHbHZiajEwTGsxelZISmhibk5wZEdsdmJrUjFjbUYwYVc5dVBYUXViWE5VY21GdWMybDBhVzl1UkhWeVlYUnBiMjQ5ZEM1TmIzcFVjbUZ1YzJsMGFXOXVSSFZ5WVhScGIyNDlkQzVQVkhKaGJuTnBkR2x2YmtSMWNtRjBhVzl1UFhRdWRISmhibk5wZEdsdmJrUjFjbUYwYVc5dVBXVjljbVYwZFhKdUlIUm9hWE45TEc5dU9tWjFibU4wYVc5dUtHVXNkQ3h6TEdrcGUyWjFibU4wYVc5dUlISW9aU2w3ZG1GeUlHazlaUzUwWVhKblpYUTdhV1lvWVNocEtTNXBjeWgwS1NsekxtTmhiR3dvYVN4bEtUdGxiSE5sSUdadmNpaDJZWElnY2oxaEtHa3BMbkJoY21WdWRITW9LU3h1UFRBN2JqeHlMbXhsYm1kMGFEdHVLeXNwWVNoeVcyNWRLUzVwY3loMEtTWW1jeTVqWVd4c0tISmJibDBzWlNsOWRtRnlJRzRzYnl4c1BXVXVjM0JzYVhRb1hDSWdYQ0lwTzJadmNpaHVQVEE3Ymp4MGFHbHpMbXhsYm1kMGFEdHVLeXNwYVdZb1hDSm1kVzVqZEdsdmJsd2lQVDEwZVhCbGIyWWdkSHg4ZEQwOVBTRXhLV1p2Y2loY0ltWjFibU4wYVc5dVhDSTlQWFI1Y0dWdlppQjBKaVlvY3oxaGNtZDFiV1Z1ZEhOYk1WMHNhVDFoY21kMWJXVnVkSE5iTWwxOGZDRXhLU3h2UFRBN2J6eHNMbXhsYm1kMGFEdHZLeXNwZEdocGMxdHVYUzVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLR3hiYjEwc2N5eHBLVHRsYkhObElHWnZjaWh2UFRBN2J6eHNMbXhsYm1kMGFEdHZLeXNwZEdocGMxdHVYUzVrYjIwM1RHbDJaVXhwYzNSbGJtVnljM3g4S0hSb2FYTmJibDB1Wkc5dE4weHBkbVZNYVhOMFpXNWxjbk05VzEwcExIUm9hWE5iYmwwdVpHOXROMHhwZG1WTWFYTjBaVzVsY25NdWNIVnphQ2g3YkdsemRHVnVaWEk2Y3l4c2FYWmxUR2x6ZEdWdVpYSTZjbjBwTEhSb2FYTmJibDB1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWhzVzI5ZExISXNhU2s3Y21WMGRYSnVJSFJvYVhOOUxHOW1aanBtZFc1amRHbHZiaWhsTEdFc2RDeHpLWHRtYjNJb2RtRnlJR2s5WlM1emNHeHBkQ2hjSWlCY0lpa3NjajB3TzNJOGFTNXNaVzVuZEdnN2Npc3JLV1p2Y2loMllYSWdiajB3TzI0OGRHaHBjeTVzWlc1bmRHZzdiaXNyS1dsbUtGd2lablZ1WTNScGIyNWNJajA5ZEhsd1pXOW1JR0Y4ZkdFOVBUMGhNU2xjSW1aMWJtTjBhVzl1WENJOVBYUjVjR1Z2WmlCaEppWW9kRDFoY21kMWJXVnVkSE5iTVYwc2N6MWhjbWQxYldWdWRITmJNbDE4ZkNFeEtTeDBhR2x6VzI1ZExuSmxiVzkyWlVWMlpXNTBUR2x6ZEdWdVpYSW9hVnR5WFN4MExITXBPMlZzYzJVZ2FXWW9kR2hwYzF0dVhTNWtiMjAzVEdsMlpVeHBjM1JsYm1WeWN5bG1iM0lvZG1GeUlHODlNRHR2UEhSb2FYTmJibDB1Wkc5dE4weHBkbVZNYVhOMFpXNWxjbk11YkdWdVozUm9PMjhyS3lsMGFHbHpXMjVkTG1SdmJUZE1hWFpsVEdsemRHVnVaWEp6VzI5ZExteHBjM1JsYm1WeVBUMDlkQ1ltZEdocGMxdHVYUzV5WlcxdmRtVkZkbVZ1ZEV4cGMzUmxibVZ5S0dsYmNsMHNkR2hwYzF0dVhTNWtiMjAzVEdsMlpVeHBjM1JsYm1WeWMxdHZYUzVzYVhabFRHbHpkR1Z1WlhJc2N5azdjbVYwZFhKdUlIUm9hWE45TEc5dVkyVTZablZ1WTNScGIyNG9aU3hoTEhRc2N5bDdablZ1WTNScGIyNGdhU2h1S1h0MEtHNHBMSEl1YjJabUtHVXNZU3hwTEhNcGZYWmhjaUJ5UFhSb2FYTTdYQ0ptZFc1amRHbHZibHdpUFQxMGVYQmxiMllnWVNZbUtHRTlJVEVzZEQxaGNtZDFiV1Z1ZEhOYk1WMHNjejFoY21kMWJXVnVkSE5iTWwwcExISXViMjRvWlN4aExHa3NjeWw5TEhSeWFXZG5aWEk2Wm5WdVkzUnBiMjRvWlN4aEtYdG1iM0lvZG1GeUlIUTlNRHQwUEhSb2FYTXViR1Z1WjNSb08zUXJLeWw3ZG1GeUlITTdkSEo1ZTNNOWJtVjNJSGRwYm1SdmR5NURkWE4wYjIxRmRtVnVkQ2hsTEh0a1pYUmhhV3c2WVN4aWRXSmliR1Z6T2lFd0xHTmhibU5sYkdGaWJHVTZJVEI5S1gxallYUmphQ2gwS1h0elBXUnZZM1Z0Wlc1MExtTnlaV0YwWlVWMlpXNTBLRndpUlhabGJuUmNJaWtzY3k1cGJtbDBSWFpsYm5Rb1pTd2hNQ3doTUNrc2N5NWtaWFJoYVd3OVlYMTBhR2x6VzNSZExtUnBjM0JoZEdOb1JYWmxiblFvY3lsOWNtVjBkWEp1SUhSb2FYTjlMSFJ5WVc1emFYUnBiMjVGYm1RNlpuVnVZM1JwYjI0b1pTbDdablZ1WTNScGIyNGdZU2h5S1h0cFppaHlMblJoY21kbGREMDlQWFJvYVhNcFptOXlLR1V1WTJGc2JDaDBhR2x6TEhJcExIUTlNRHQwUEhNdWJHVnVaM1JvTzNRckt5bHBMbTltWmloelczUmRMR0VwZlhaaGNpQjBMSE05VzF3aWQyVmlhMmwwVkhKaGJuTnBkR2x2YmtWdVpGd2lMRndpZEhKaGJuTnBkR2x2Ym1WdVpGd2lMRndpYjFSeVlXNXphWFJwYjI1RmJtUmNJaXhjSWsxVFZISmhibk5wZEdsdmJrVnVaRndpTEZ3aWJYTlVjbUZ1YzJsMGFXOXVSVzVrWENKZExHazlkR2hwY3p0cFppaGxLV1p2Y2loMFBUQTdkRHh6TG14bGJtZDBhRHQwS3lzcGFTNXZiaWh6VzNSZExHRXBPM0psZEhWeWJpQjBhR2x6ZlN4M2FXUjBhRHBtZFc1amRHbHZiaWdwZTNKbGRIVnliaUIwYUdseld6QmRQVDA5ZDJsdVpHOTNQM2RwYm1SdmR5NXBibTVsY2xkcFpIUm9PblJvYVhNdWJHVnVaM1JvUGpBL2NHRnljMlZHYkc5aGRDaDBhR2x6TG1OemN5aGNJbmRwWkhSb1hDSXBLVHB1ZFd4c2ZTeHZkWFJsY2xkcFpIUm9PbVoxYm1OMGFXOXVLR1VwZTNKbGRIVnliaUIwYUdsekxteGxibWQwYUQ0d1AyVS9kR2hwYzFzd1hTNXZabVp6WlhSWGFXUjBhQ3R3WVhKelpVWnNiMkYwS0hSb2FYTXVZM056S0Z3aWJXRnlaMmx1TFhKcFoyaDBYQ0lwS1N0d1lYSnpaVVpzYjJGMEtIUm9hWE11WTNOektGd2liV0Z5WjJsdUxXeGxablJjSWlrcE9uUm9hWE5iTUYwdWIyWm1jMlYwVjJsa2RHZzZiblZzYkgwc2FHVnBaMmgwT21aMWJtTjBhVzl1S0NsN2NtVjBkWEp1SUhSb2FYTmJNRjA5UFQxM2FXNWtiM2MvZDJsdVpHOTNMbWx1Ym1WeVNHVnBaMmgwT25Sb2FYTXViR1Z1WjNSb1BqQS9jR0Z5YzJWR2JHOWhkQ2gwYUdsekxtTnpjeWhjSW1obGFXZG9kRndpS1NrNmJuVnNiSDBzYjNWMFpYSklaV2xuYUhRNlpuVnVZM1JwYjI0b1pTbDdjbVYwZFhKdUlIUm9hWE11YkdWdVozUm9QakEvWlQ5MGFHbHpXekJkTG05bVpuTmxkRWhsYVdkb2RDdHdZWEp6WlVac2IyRjBLSFJvYVhNdVkzTnpLRndpYldGeVoybHVMWFJ2Y0Z3aUtTa3JjR0Z5YzJWR2JHOWhkQ2gwYUdsekxtTnpjeWhjSW0xaGNtZHBiaTFpYjNSMGIyMWNJaWtwT25Sb2FYTmJNRjB1YjJabWMyVjBTR1ZwWjJoME9tNTFiR3g5TEc5bVpuTmxkRHBtZFc1amRHbHZiaWdwZTJsbUtIUm9hWE11YkdWdVozUm9QakFwZTNaaGNpQmxQWFJvYVhOYk1GMHNZVDFsTG1kbGRFSnZkVzVrYVc1blEyeHBaVzUwVW1WamRDZ3BMSFE5Wkc5amRXMWxiblF1WW05a2VTeHpQV1V1WTJ4cFpXNTBWRzl3Zkh4MExtTnNhV1Z1ZEZSdmNIeDhNQ3hwUFdVdVkyeHBaVzUwVEdWbWRIeDhkQzVqYkdsbGJuUk1aV1owZkh3d0xISTlkMmx1Wkc5M0xuQmhaMlZaVDJabWMyVjBmSHhsTG5OamNtOXNiRlJ2Y0N4dVBYZHBibVJ2ZHk1d1lXZGxXRTltWm5ObGRIeDhaUzV6WTNKdmJHeE1aV1owTzNKbGRIVnlibnQwYjNBNllTNTBiM0FyY2kxekxHeGxablE2WVM1c1pXWjBLMjR0YVgxOWNtVjBkWEp1SUc1MWJHeDlMR056Y3pwbWRXNWpkR2x2YmlobExHRXBlM1poY2lCME8ybG1LREU5UFQxaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvS1h0cFppaGNJbk4wY21sdVoxd2lJVDEwZVhCbGIyWWdaU2w3Wm05eUtIUTlNRHQwUEhSb2FYTXViR1Z1WjNSb08zUXJLeWxtYjNJb2RtRnlJSE1nYVc0Z1pTbDBhR2x6VzNSZExuTjBlV3hsVzNOZFBXVmJjMTA3Y21WMGRYSnVJSFJvYVhOOWFXWW9kR2hwYzFzd1hTbHlaWFIxY200Z2QybHVaRzkzTG1kbGRFTnZiWEIxZEdWa1UzUjViR1VvZEdocGMxc3dYU3h1ZFd4c0tTNW5aWFJRY205d1pYSjBlVlpoYkhWbEtHVXBmV2xtS0RJOVBUMWhjbWQxYldWdWRITXViR1Z1WjNSb0ppWmNJbk4wY21sdVoxd2lQVDEwZVhCbGIyWWdaU2w3Wm05eUtIUTlNRHQwUEhSb2FYTXViR1Z1WjNSb08zUXJLeWwwYUdselczUmRMbk4wZVd4bFcyVmRQV0U3Y21WMGRYSnVJSFJvYVhOOWNtVjBkWEp1SUhSb2FYTjlMR1ZoWTJnNlpuVnVZM1JwYjI0b1pTbDdabTl5S0haaGNpQmhQVEE3WVR4MGFHbHpMbXhsYm1kMGFEdGhLeXNwWlM1allXeHNLSFJvYVhOYllWMHNZU3gwYUdselcyRmRLVHR5WlhSMWNtNGdkR2hwYzMwc2FIUnRiRHBtZFc1amRHbHZiaWhsS1h0cFppaDJiMmxrSURBOVBUMWxLWEpsZEhWeWJpQjBhR2x6V3pCZFAzUm9hWE5iTUYwdWFXNXVaWEpJVkUxTU9uWnZhV1FnTUR0bWIzSW9kbUZ5SUdFOU1EdGhQSFJvYVhNdWJHVnVaM1JvTzJFckt5bDBhR2x6VzJGZExtbHVibVZ5U0ZSTlREMWxPM0psZEhWeWJpQjBhR2x6ZlN4MFpYaDBPbVoxYm1OMGFXOXVLR1VwZTJsbUtIWnZhV1FnTUQwOVBXVXBjbVYwZFhKdUlIUm9hWE5iTUYwL2RHaHBjMXN3WFM1MFpYaDBRMjl1ZEdWdWRDNTBjbWx0S0NrNmJuVnNiRHRtYjNJb2RtRnlJR0U5TUR0aFBIUm9hWE11YkdWdVozUm9PMkVyS3lsMGFHbHpXMkZkTG5SbGVIUkRiMjUwWlc1MFBXVTdjbVYwZFhKdUlIUm9hWE45TEdsek9tWjFibU4wYVc5dUtIUXBlMmxtS0NGMGFHbHpXekJkS1hKbGRIVnliaUV4TzNaaGNpQnpMR2s3YVdZb1hDSnpkSEpwYm1kY0lqMDlkSGx3Wlc5bUlIUXBlM1poY2lCeVBYUm9hWE5iTUYwN2FXWW9jajA5UFdSdlkzVnRaVzUwS1hKbGRIVnliaUIwUFQwOVpHOWpkVzFsYm5RN2FXWW9jajA5UFhkcGJtUnZkeWx5WlhSMWNtNGdkRDA5UFhkcGJtUnZkenRwWmloeUxtMWhkR05vWlhNcGNtVjBkWEp1SUhJdWJXRjBZMmhsY3loMEtUdHBaaWh5TG5kbFltdHBkRTFoZEdOb1pYTlRaV3hsWTNSdmNpbHlaWFIxY200Z2NpNTNaV0pyYVhSTllYUmphR1Z6VTJWc1pXTjBiM0lvZENrN2FXWW9jaTV0YjNwTllYUmphR1Z6VTJWc1pXTjBiM0lwY21WMGRYSnVJSEl1Ylc5NlRXRjBZMmhsYzFObGJHVmpkRzl5S0hRcE8ybG1LSEl1YlhOTllYUmphR1Z6VTJWc1pXTjBiM0lwY21WMGRYSnVJSEl1YlhOTllYUmphR1Z6VTJWc1pXTjBiM0lvZENrN1ptOXlLSE05WVNoMEtTeHBQVEE3YVR4ekxteGxibWQwYUR0cEt5c3BhV1lvYzF0cFhUMDlQWFJvYVhOYk1GMHBjbVYwZFhKdUlUQTdjbVYwZFhKdUlURjlhV1lvZEQwOVBXUnZZM1Z0Wlc1MEtYSmxkSFZ5YmlCMGFHbHpXekJkUFQwOVpHOWpkVzFsYm5RN2FXWW9kRDA5UFhkcGJtUnZkeWx5WlhSMWNtNGdkR2hwYzFzd1hUMDlQWGRwYm1SdmR6dHBaaWgwTG01dlpHVlVlWEJsZkh4MElHbHVjM1JoYm1ObGIyWWdaU2w3Wm05eUtITTlkQzV1YjJSbFZIbHdaVDliZEYwNmRDeHBQVEE3YVR4ekxteGxibWQwYUR0cEt5c3BhV1lvYzF0cFhUMDlQWFJvYVhOYk1GMHBjbVYwZFhKdUlUQTdjbVYwZFhKdUlURjljbVYwZFhKdUlURjlMR2x1WkdWNE9tWjFibU4wYVc5dUtDbDdhV1lvZEdocGMxc3dYU2w3Wm05eUtIWmhjaUJsUFhSb2FYTmJNRjBzWVQwd08yNTFiR3doUFQwb1pUMWxMbkJ5WlhacGIzVnpVMmxpYkdsdVp5azdLVEU5UFQxbExtNXZaR1ZVZVhCbEppWmhLeXM3Y21WMGRYSnVJR0Y5ZlN4bGNUcG1kVzVqZEdsdmJpaGhLWHRwWmloMmIybGtJREE5UFQxaEtYSmxkSFZ5YmlCMGFHbHpPM1poY2lCMExITTlkR2hwY3k1c1pXNW5kR2c3Y21WMGRYSnVJR0UrY3kweFAyNWxkeUJsS0Z0ZEtUcGhQREEvS0hROWN5dGhMRzVsZHlCbEtIUThNRDliWFRwYmRHaHBjMXQwWFYwcEtUcHVaWGNnWlNoYmRHaHBjMXRoWFYwcGZTeGhjSEJsYm1RNlpuVnVZM1JwYjI0b1lTbDdkbUZ5SUhRc2N6dG1iM0lvZEQwd08zUThkR2hwY3k1c1pXNW5kR2c3ZENzcktXbG1LRndpYzNSeWFXNW5YQ0k5UFhSNWNHVnZaaUJoS1h0MllYSWdhVDFrYjJOMWJXVnVkQzVqY21WaGRHVkZiR1Z0Wlc1MEtGd2laR2wyWENJcE8yWnZjaWhwTG1sdWJtVnlTRlJOVEQxaE8ya3VabWx5YzNSRGFHbHNaRHNwZEdocGMxdDBYUzVoY0hCbGJtUkRhR2xzWkNocExtWnBjbk4wUTJocGJHUXBmV1ZzYzJVZ2FXWW9ZU0JwYm5OMFlXNWpaVzltSUdVcFptOXlLSE05TUR0elBHRXViR1Z1WjNSb08zTXJLeWwwYUdselczUmRMbUZ3Y0dWdVpFTm9hV3hrS0dGYmMxMHBPMlZzYzJVZ2RHaHBjMXQwWFM1aGNIQmxibVJEYUdsc1pDaGhLVHR5WlhSMWNtNGdkR2hwYzMwc2NISmxjR1Z1WkRwbWRXNWpkR2x2YmloaEtYdDJZWElnZEN4ek8yWnZjaWgwUFRBN2REeDBhR2x6TG14bGJtZDBhRHQwS3lzcGFXWW9YQ0p6ZEhKcGJtZGNJajA5ZEhsd1pXOW1JR0VwZTNaaGNpQnBQV1J2WTNWdFpXNTBMbU55WldGMFpVVnNaVzFsYm5Rb1hDSmthWFpjSWlrN1ptOXlLR2t1YVc1dVpYSklWRTFNUFdFc2N6MXBMbU5vYVd4a1RtOWtaWE11YkdWdVozUm9MVEU3Y3o0OU1EdHpMUzBwZEdocGMxdDBYUzVwYm5ObGNuUkNaV1p2Y21Vb2FTNWphR2xzWkU1dlpHVnpXM05kTEhSb2FYTmJkRjB1WTJocGJHUk9iMlJsYzFzd1hTbDlaV3h6WlNCcFppaGhJR2x1YzNSaGJtTmxiMllnWlNsbWIzSW9jejB3TzNNOFlTNXNaVzVuZEdnN2N5c3JLWFJvYVhOYmRGMHVhVzV6WlhKMFFtVm1iM0psS0dGYmMxMHNkR2hwYzF0MFhTNWphR2xzWkU1dlpHVnpXekJkS1R0bGJITmxJSFJvYVhOYmRGMHVhVzV6WlhKMFFtVm1iM0psS0dFc2RHaHBjMXQwWFM1amFHbHNaRTV2WkdWeld6QmRLVHR5WlhSMWNtNGdkR2hwYzMwc2FXNXpaWEowUW1WbWIzSmxPbVoxYm1OMGFXOXVLR1VwZTJadmNpaDJZWElnZEQxaEtHVXBMSE05TUR0elBIUm9hWE11YkdWdVozUm9PM01yS3lscFppZ3hQVDA5ZEM1c1pXNW5kR2dwZEZzd1hTNXdZWEpsYm5ST2IyUmxMbWx1YzJWeWRFSmxabTl5WlNoMGFHbHpXM05kTEhSYk1GMHBPMlZzYzJVZ2FXWW9kQzVzWlc1bmRHZytNU2xtYjNJb2RtRnlJR2s5TUR0cFBIUXViR1Z1WjNSb08ya3JLeWwwVzJsZExuQmhjbVZ1ZEU1dlpHVXVhVzV6WlhKMFFtVm1iM0psS0hSb2FYTmJjMTB1WTJ4dmJtVk9iMlJsS0NFd0tTeDBXMmxkS1gwc2FXNXpaWEowUVdaMFpYSTZablZ1WTNScGIyNG9aU2w3Wm05eUtIWmhjaUIwUFdFb1pTa3NjejB3TzNNOGRHaHBjeTVzWlc1bmRHZzdjeXNyS1dsbUtERTlQVDEwTG14bGJtZDBhQ2wwV3pCZExuQmhjbVZ1ZEU1dlpHVXVhVzV6WlhKMFFtVm1iM0psS0hSb2FYTmJjMTBzZEZzd1hTNXVaWGgwVTJsaWJHbHVaeWs3Wld4elpTQnBaaWgwTG14bGJtZDBhRDR4S1dadmNpaDJZWElnYVQwd08yazhkQzVzWlc1bmRHZzdhU3NyS1hSYmFWMHVjR0Z5Wlc1MFRtOWtaUzVwYm5ObGNuUkNaV1p2Y21Vb2RHaHBjMXR6WFM1amJHOXVaVTV2WkdVb0lUQXBMSFJiYVYwdWJtVjRkRk5wWW14cGJtY3BmU3h1WlhoME9tWjFibU4wYVc5dUtIUXBlM0psZEhWeWJpQnVaWGNnWlNoMGFHbHpMbXhsYm1kMGFENHdQM1EvZEdocGMxc3dYUzV1WlhoMFJXeGxiV1Z1ZEZOcFlteHBibWNtSm1Fb2RHaHBjMXN3WFM1dVpYaDBSV3hsYldWdWRGTnBZbXhwYm1jcExtbHpLSFFwUDF0MGFHbHpXekJkTG01bGVIUkZiR1Z0Wlc1MFUybGliR2x1WjEwNlcxMDZkR2hwYzFzd1hTNXVaWGgwUld4bGJXVnVkRk5wWW14cGJtYy9XM1JvYVhOYk1GMHVibVY0ZEVWc1pXMWxiblJUYVdKc2FXNW5YVHBiWFRwYlhTbDlMRzVsZUhSQmJHdzZablZ1WTNScGIyNG9kQ2w3ZG1GeUlITTlXMTBzYVQxMGFHbHpXekJkTzJsbUtDRnBLWEpsZEhWeWJpQnVaWGNnWlNoYlhTazdabTl5S0R0cExtNWxlSFJGYkdWdFpXNTBVMmxpYkdsdVp6c3BlM1poY2lCeVBXa3VibVY0ZEVWc1pXMWxiblJUYVdKc2FXNW5PM1EvWVNoeUtTNXBjeWgwS1NZbWN5NXdkWE5vS0hJcE9uTXVjSFZ6YUNoeUtTeHBQWEo5Y21WMGRYSnVJRzVsZHlCbEtITXBmU3h3Y21WMk9tWjFibU4wYVc5dUtIUXBlM0psZEhWeWJpQnVaWGNnWlNoMGFHbHpMbXhsYm1kMGFENHdQM1EvZEdocGMxc3dYUzV3Y21WMmFXOTFjMFZzWlcxbGJuUlRhV0pzYVc1bkppWmhLSFJvYVhOYk1GMHVjSEpsZG1sdmRYTkZiR1Z0Wlc1MFUybGliR2x1WnlrdWFYTW9kQ2svVzNSb2FYTmJNRjB1Y0hKbGRtbHZkWE5GYkdWdFpXNTBVMmxpYkdsdVoxMDZXMTA2ZEdocGMxc3dYUzV3Y21WMmFXOTFjMFZzWlcxbGJuUlRhV0pzYVc1blAxdDBhR2x6V3pCZExuQnlaWFpwYjNWelJXeGxiV1Z1ZEZOcFlteHBibWRkT2x0ZE9sdGRLWDBzY0hKbGRrRnNiRHBtZFc1amRHbHZiaWgwS1h0MllYSWdjejFiWFN4cFBYUm9hWE5iTUYwN2FXWW9JV2twY21WMGRYSnVJRzVsZHlCbEtGdGRLVHRtYjNJb08ya3VjSEpsZG1sdmRYTkZiR1Z0Wlc1MFUybGliR2x1WnpzcGUzWmhjaUJ5UFdrdWNISmxkbWx2ZFhORmJHVnRaVzUwVTJsaWJHbHVaenQwUDJFb2Npa3VhWE1vZENrbUpuTXVjSFZ6YUNoeUtUcHpMbkIxYzJnb2Npa3NhVDF5ZlhKbGRIVnliaUJ1WlhjZ1pTaHpLWDBzY0dGeVpXNTBPbVoxYm1OMGFXOXVLR1VwZTJadmNpaDJZWElnZEQxYlhTeHpQVEE3Y3p4MGFHbHpMbXhsYm1kMGFEdHpLeXNwWlQ5aEtIUm9hWE5iYzEwdWNHRnlaVzUwVG05a1pTa3VhWE1vWlNrbUpuUXVjSFZ6YUNoMGFHbHpXM05kTG5CaGNtVnVkRTV2WkdVcE9uUXVjSFZ6YUNoMGFHbHpXM05kTG5CaGNtVnVkRTV2WkdVcE8zSmxkSFZ5YmlCaEtHRXVkVzVwY1hWbEtIUXBLWDBzY0dGeVpXNTBjenBtZFc1amRHbHZiaWhsS1h0bWIzSW9kbUZ5SUhROVcxMHNjejB3TzNNOGRHaHBjeTVzWlc1bmRHZzdjeXNyS1dadmNpaDJZWElnYVQxMGFHbHpXM05kTG5CaGNtVnVkRTV2WkdVN2FUc3BaVDloS0drcExtbHpLR1VwSmlaMExuQjFjMmdvYVNrNmRDNXdkWE5vS0drcExHazlhUzV3WVhKbGJuUk9iMlJsTzNKbGRIVnliaUJoS0dFdWRXNXBjWFZsS0hRcEtYMHNabWx1WkRwbWRXNWpkR2x2YmloaEtYdG1iM0lvZG1GeUlIUTlXMTBzY3owd08zTThkR2hwY3k1c1pXNW5kR2c3Y3lzcktXWnZjaWgyWVhJZ2FUMTBhR2x6VzNOZExuRjFaWEo1VTJWc1pXTjBiM0pCYkd3b1lTa3NjajB3TzNJOGFTNXNaVzVuZEdnN2Npc3JLWFF1Y0hWemFDaHBXM0pkS1R0eVpYUjFjbTRnYm1WM0lHVW9kQ2w5TEdOb2FXeGtjbVZ1T21aMWJtTjBhVzl1S0hRcGUyWnZjaWgyWVhJZ2N6MWJYU3hwUFRBN2FUeDBhR2x6TG14bGJtZDBhRHRwS3lzcFptOXlLSFpoY2lCeVBYUm9hWE5iYVYwdVkyaHBiR1JPYjJSbGN5eHVQVEE3Ymp4eUxteGxibWQwYUR0dUt5c3BkRDh4UFQwOWNsdHVYUzV1YjJSbFZIbHdaU1ltWVNoeVcyNWRLUzVwY3loMEtTWW1jeTV3ZFhOb0tISmJibDBwT2pFOVBUMXlXMjVkTG01dlpHVlVlWEJsSmlaekxuQjFjMmdvY2x0dVhTazdjbVYwZFhKdUlHNWxkeUJsS0dFdWRXNXBjWFZsS0hNcEtYMHNjbVZ0YjNabE9tWjFibU4wYVc5dUtDbDdabTl5S0haaGNpQmxQVEE3WlR4MGFHbHpMbXhsYm1kMGFEdGxLeXNwZEdocGMxdGxYUzV3WVhKbGJuUk9iMlJsSmlaMGFHbHpXMlZkTG5CaGNtVnVkRTV2WkdVdWNtVnRiM1psUTJocGJHUW9kR2hwYzF0bFhTazdjbVYwZFhKdUlIUm9hWE45TEdGa1pEcG1kVzVqZEdsdmJpZ3BlM1poY2lCbExIUXNjejEwYUdsek8yWnZjaWhsUFRBN1pUeGhjbWQxYldWdWRITXViR1Z1WjNSb08yVXJLeWw3ZG1GeUlHazlZU2hoY21kMWJXVnVkSE5iWlYwcE8yWnZjaWgwUFRBN2REeHBMbXhsYm1kMGFEdDBLeXNwYzF0ekxteGxibWQwYUYwOWFWdDBYU3h6TG14bGJtZDBhQ3NyZlhKbGRIVnliaUJ6Zlgwc1lTNW1iajFsTG5CeWIzUnZkSGx3WlN4aExuVnVhWEYxWlQxbWRXNWpkR2x2YmlobEtYdG1iM0lvZG1GeUlHRTlXMTBzZEQwd08zUThaUzVzWlc1bmRHZzdkQ3NyS1dFdWFXNWtaWGhQWmlobFczUmRLVDA5UFMweEppWmhMbkIxYzJnb1pWdDBYU2s3Y21WMGRYSnVJR0Y5TEdGOUtDa3BMSE05VzF3aWFsRjFaWEo1WENJc1hDSmFaWEIwYjF3aUxGd2lSRzl0TjF3aVhTeHBQVEE3YVR4ekxteGxibWQwYUR0cEt5c3BkMmx1Wkc5M1czTmJhVjFkSmlabWRXNWpkR2x2YmlobEtYdGxMbVp1TG5OM2FYQmxjajFtZFc1amRHbHZiaWgwS1h0MllYSWdjenR5WlhSMWNtNGdaU2gwYUdsektTNWxZV05vS0daMWJtTjBhVzl1S0NsN2RtRnlJR1U5Ym1WM0lHRW9kR2hwY3l4MEtUdHpmSHdvY3oxbEtYMHBMSE45ZlNoM2FXNWtiM2RiYzF0cFhWMHBPM1poY2lCeU8zSTlkbTlwWkNBd1BUMDlkRDkzYVc1a2IzY3VSRzl0TjN4OGQybHVaRzkzTGxwbGNIUnZmSHgzYVc1a2IzY3VhbEYxWlhKNU9uUXNjaVltS0Z3aWRISmhibk5wZEdsdmJrVnVaRndpYVc0Z2NpNW1ibng4S0hJdVptNHVkSEpoYm5OcGRHbHZia1Z1WkQxbWRXNWpkR2x2YmlobEtYdG1kVzVqZEdsdmJpQmhLSElwZTJsbUtISXVkR0Z5WjJWMFBUMDlkR2hwY3lsbWIzSW9aUzVqWVd4c0tIUm9hWE1zY2lrc2REMHdPM1E4Y3k1c1pXNW5kR2c3ZENzcktXa3ViMlptS0hOYmRGMHNZU2w5ZG1GeUlIUXNjejFiWENKM1pXSnJhWFJVY21GdWMybDBhVzl1Ulc1a1hDSXNYQ0owY21GdWMybDBhVzl1Wlc1a1hDSXNYQ0p2VkhKaGJuTnBkR2x2YmtWdVpGd2lMRndpVFZOVWNtRnVjMmwwYVc5dVJXNWtYQ0lzWENKdGMxUnlZVzV6YVhScGIyNUZibVJjSWwwc2FUMTBhR2x6TzJsbUtHVXBabTl5S0hROU1EdDBQSE11YkdWdVozUm9PM1FyS3lscExtOXVLSE5iZEYwc1lTazdjbVYwZFhKdUlIUm9hWE45S1N4Y0luUnlZVzV6Wm05eWJWd2lhVzRnY2k1bWJueDhLSEl1Wm00dWRISmhibk5tYjNKdFBXWjFibU4wYVc5dUtHVXBlMlp2Y2loMllYSWdZVDB3TzJFOGRHaHBjeTVzWlc1bmRHZzdZU3NyS1h0MllYSWdkRDEwYUdselcyRmRMbk4wZVd4bE8zUXVkMlZpYTJsMFZISmhibk5tYjNKdFBYUXVUWE5VY21GdWMyWnZjbTA5ZEM1dGMxUnlZVzV6Wm05eWJUMTBMazF2ZWxSeVlXNXpabTl5YlQxMExrOVVjbUZ1YzJadmNtMDlkQzUwY21GdWMyWnZjbTA5WlgxeVpYUjFjbTRnZEdocGMzMHBMRndpZEhKaGJuTnBkR2x2Ymx3aWFXNGdjaTVtYm54OEtISXVabTR1ZEhKaGJuTnBkR2x2YmoxbWRXNWpkR2x2YmlobEtYdGNJbk4wY21sdVoxd2lJVDEwZVhCbGIyWWdaU1ltS0dVclBWd2liWE5jSWlrN1ptOXlLSFpoY2lCaFBUQTdZVHgwYUdsekxteGxibWQwYUR0aEt5c3BlM1poY2lCMFBYUm9hWE5iWVYwdWMzUjViR1U3ZEM1M1pXSnJhWFJVY21GdWMybDBhVzl1UkhWeVlYUnBiMjQ5ZEM1TmMxUnlZVzV6YVhScGIyNUVkWEpoZEdsdmJqMTBMbTF6VkhKaGJuTnBkR2x2YmtSMWNtRjBhVzl1UFhRdVRXOTZWSEpoYm5OcGRHbHZia1IxY21GMGFXOXVQWFF1VDFSeVlXNXphWFJwYjI1RWRYSmhkR2x2YmoxMExuUnlZVzV6YVhScGIyNUVkWEpoZEdsdmJqMWxmWEpsZEhWeWJpQjBhR2x6ZlNrc1hDSnZkWFJsY2xkcFpIUm9YQ0pwYmlCeUxtWnVmSHdvY2k1bWJpNXZkWFJsY2xkcFpIUm9QV1oxYm1OMGFXOXVLR1VwZTF4eVhHNXlaWFIxY200Z2RHaHBjeTVzWlc1bmRHZytNRDlsUDNSb2FYTmJNRjB1YjJabWMyVjBWMmxrZEdncmNHRnljMlZHYkc5aGRDaDBhR2x6TG1OemN5aGNJbTFoY21kcGJpMXlhV2RvZEZ3aUtTa3JjR0Z5YzJWR2JHOWhkQ2gwYUdsekxtTnpjeWhjSW0xaGNtZHBiaTFzWldaMFhDSXBLVHAwYUdseld6QmRMbTltWm5ObGRGZHBaSFJvT201MWJHeDlLU2tzZDJsdVpHOTNMbE4zYVhCbGNqMWhmU2dwTEZ3aWRXNWtaV1pwYm1Wa1hDSWhQWFI1Y0dWdlppQnRiMlIxYkdVL2JXOWtkV3hsTG1WNGNHOXlkSE05ZDJsdVpHOTNMbE4zYVhCbGNqcGNJbVoxYm1OMGFXOXVYQ0k5UFhSNWNHVnZaaUJrWldacGJtVW1KbVJsWm1sdVpTNWhiV1FtSm1SbFptbHVaU2hiWFN4bWRXNWpkR2x2YmlncGUxd2lkWE5sSUhOMGNtbGpkRndpTzNKbGRIVnliaUIzYVc1a2IzY3VVM2RwY0dWeWZTazdYSEpjYmk4dkl5QnpiM1Z5WTJWTllYQndhVzVuVlZKTVBXMWhjSE12YzNkcGNHVnlMbTFwYmk1cWN5NXRZWEJjY2x4dVhHNWNibHh1THk4Z1YwVkNVRUZEU3lCR1QwOVVSVklnTHk5Y2JpOHZJQzR2YzNKakwzTjNhWEJsY2k1dGFXNHVhbk1pWFN3aWMyOTFjbU5sVW05dmRDSTZJaUo5XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzYzXFxuXCIpO1xuXG4vKioqLyB9KSxcbi8qIDY0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCIvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xcblxcbi8vIGxvYWQgdGhlIHN0eWxlc1xcbnZhciBjb250ZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2NSk7XFxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaSwgY29udGVudCwgJyddXTtcXG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXFxudmFyIHVwZGF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oMSkoY29udGVudCwge30pO1xcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xcbi8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcXG5pZihmYWxzZSkge1xcblxcdC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXFxuXFx0aWYoIWNvbnRlbnQubG9jYWxzKSB7XFxuXFx0XFx0bW9kdWxlLmhvdC5hY2NlcHQoXFxcIiEhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvLjAuMjMuMUBjc3MtbG9hZGVyL2luZGV4LmpzIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS0wLTIhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvLjIuMi4zQGxlc3MtbG9hZGVyL2luZGV4LmpzIS4vc3dpcGVyLm1pbi5jc3NcXFwiLCBmdW5jdGlvbigpIHtcXG5cXHRcXHRcXHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXFxcIiEhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvLjAuMjMuMUBjc3MtbG9hZGVyL2luZGV4LmpzIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS0wLTIhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvLjIuMi4zQGxlc3MtbG9hZGVyL2luZGV4LmpzIS4vc3dpcGVyLm1pbi5jc3NcXFwiKTtcXG5cXHRcXHRcXHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcXG5cXHRcXHRcXHR1cGRhdGUobmV3Q29udGVudCk7XFxuXFx0XFx0fSk7XFxuXFx0fVxcblxcdC8vIFdoZW4gdGhlIG1vZHVsZSBpcyBkaXNwb3NlZCwgcmVtb3ZlIHRoZSA8c3R5bGU+IHRhZ3NcXG5cXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcXG59Ly8jIHNvdXJjZVVSTD1bbW9kdWxlXVxcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OHZMaTl6Y21NdmMzZHBjR1Z5TG0xcGJpNWpjM00vT0dRd01pSmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaVFVRkJRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMQ3REUVVFNFJqdEJRVU01Ump0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4SFFVRkhPMEZCUTBnN1FVRkRRVHRCUVVOQkxHZERRVUZuUXl4VlFVRlZMRVZCUVVVN1FVRkROVU1pTENKbWFXeGxJam9pTmpRdWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUl2THlCemRIbHNaUzFzYjJGa1pYSTZJRUZrWkhNZ2MyOXRaU0JqYzNNZ2RHOGdkR2hsSUVSUFRTQmllU0JoWkdScGJtY2dZU0E4YzNSNWJHVStJSFJoWjF4dVhHNHZMeUJzYjJGa0lIUm9aU0J6ZEhsc1pYTmNiblpoY2lCamIyNTBaVzUwSUQwZ2NtVnhkV2x5WlNoY0lpRWhMaTh1TGk4dUxpOHVMaTl1YjJSbFgyMXZaSFZzWlhNdkxqQXVNak11TVVCamMzTXRiRzloWkdWeUwybHVaR1Y0TG1weklTNHZMaTR2TGk0dkxpNHZibTlrWlY5dGIyUjFiR1Z6TDNCdmMzUmpjM010Ykc5aFpHVnlMMnhwWWk5cGJtUmxlQzVxY3o4L2NtVm1MUzB3TFRJaExpOHVMaTh1TGk4dUxpOXViMlJsWDIxdlpIVnNaWE12TGpJdU1pNHpRR3hsYzNNdGJHOWhaR1Z5TDJsdVpHVjRMbXB6SVM0dmMzZHBjR1Z5TG0xcGJpNWpjM05jSWlrN1hHNXBaaWgwZVhCbGIyWWdZMjl1ZEdWdWRDQTlQVDBnSjNOMGNtbHVaeWNwSUdOdmJuUmxiblFnUFNCYlcyMXZaSFZzWlM1cFpDd2dZMjl1ZEdWdWRDd2dKeWRkWFR0Y2JpOHZJR0ZrWkNCMGFHVWdjM1I1YkdWeklIUnZJSFJvWlNCRVQwMWNiblpoY2lCMWNHUmhkR1VnUFNCeVpYRjFhWEpsS0Z3aUlTNHZMaTR2TGk0dkxpNHZibTlrWlY5dGIyUjFiR1Z6THk0d0xqRXpMakZBYzNSNWJHVXRiRzloWkdWeUwyRmtaRk4wZVd4bGN5NXFjMXdpS1NoamIyNTBaVzUwTENCN2ZTazdYRzVwWmloamIyNTBaVzUwTG14dlkyRnNjeWtnYlc5a2RXeGxMbVY0Y0c5eWRITWdQU0JqYjI1MFpXNTBMbXh2WTJGc2N6dGNiaTh2SUVodmRDQk5iMlIxYkdVZ1VtVndiR0ZqWlcxbGJuUmNibWxtS0cxdlpIVnNaUzVvYjNRcElIdGNibHgwTHk4Z1YyaGxiaUIwYUdVZ2MzUjViR1Z6SUdOb1lXNW5aU3dnZFhCa1lYUmxJSFJvWlNBOGMzUjViR1UrSUhSaFozTmNibHgwYVdZb0lXTnZiblJsYm5RdWJHOWpZV3h6S1NCN1hHNWNkRngwYlc5a2RXeGxMbWh2ZEM1aFkyTmxjSFFvWENJaElTNHZMaTR2TGk0dkxpNHZibTlrWlY5dGIyUjFiR1Z6THk0d0xqSXpMakZBWTNOekxXeHZZV1JsY2k5cGJtUmxlQzVxY3lFdUx5NHVMeTR1THk0dUwyNXZaR1ZmYlc5a2RXeGxjeTl3YjNOMFkzTnpMV3h2WVdSbGNpOXNhV0l2YVc1a1pYZ3Vhbk0vUDNKbFppMHRNQzB5SVM0dkxpNHZMaTR2TGk0dmJtOWtaVjl0YjJSMWJHVnpMeTR5TGpJdU0wQnNaWE56TFd4dllXUmxjaTlwYm1SbGVDNXFjeUV1TDNOM2FYQmxjaTV0YVc0dVkzTnpYQ0lzSUdaMWJtTjBhVzl1S0NrZ2UxeHVYSFJjZEZ4MGRtRnlJRzVsZDBOdmJuUmxiblFnUFNCeVpYRjFhWEpsS0Z3aUlTRXVMeTR1THk0dUx5NHVMMjV2WkdWZmJXOWtkV3hsY3k4dU1DNHlNeTR4UUdOemN5MXNiMkZrWlhJdmFXNWtaWGd1YW5NaExpOHVMaTh1TGk4dUxpOXViMlJsWDIxdlpIVnNaWE12Y0c5emRHTnpjeTFzYjJGa1pYSXZiR2xpTDJsdVpHVjRMbXB6UHo5eVpXWXRMVEF0TWlFdUx5NHVMeTR1THk0dUwyNXZaR1ZmYlc5a2RXeGxjeTh1TWk0eUxqTkFiR1Z6Y3kxc2IyRmtaWEl2YVc1a1pYZ3Vhbk1oTGk5emQybHdaWEl1YldsdUxtTnpjMXdpS1R0Y2JseDBYSFJjZEdsbUtIUjVjR1Z2WmlCdVpYZERiMjUwWlc1MElEMDlQU0FuYzNSeWFXNW5KeWtnYm1WM1EyOXVkR1Z1ZENBOUlGdGJiVzlrZFd4bExtbGtMQ0J1WlhkRGIyNTBaVzUwTENBbkoxMWRPMXh1WEhSY2RGeDBkWEJrWVhSbEtHNWxkME52Ym5SbGJuUXBPMXh1WEhSY2RIMHBPMXh1WEhSOVhHNWNkQzh2SUZkb1pXNGdkR2hsSUcxdlpIVnNaU0JwY3lCa2FYTndiM05sWkN3Z2NtVnRiM1psSUhSb1pTQThjM1I1YkdVK0lIUmhaM05jYmx4MGJXOWtkV3hsTG1odmRDNWthWE53YjNObEtHWjFibU4wYVc5dUtDa2dleUIxY0dSaGRHVW9LVHNnZlNrN1hHNTlYRzVjYmx4dUx5OHZMeTh2THk4dkx5OHZMeTh2THk4dlhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVseHVMeThnTGk5emNtTXZjM2RwY0dWeUxtMXBiaTVqYzNOY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURZMFhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzY0XFxuXCIpO1xuXG4vKioqLyB9KSxcbi8qIDY1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApKCk7XFxuLy8gaW1wb3J0c1xcblxcblxcbi8vIG1vZHVsZVxcbmV4cG9ydHMucHVzaChbbW9kdWxlLmksIFxcXCIvKipcXFxcbiAqIFN3aXBlciAzLjQuMlxcXFxuICogTW9zdCBtb2Rlcm4gbW9iaWxlIHRvdWNoIHNsaWRlciBhbmQgZnJhbWV3b3JrIHdpdGggaGFyZHdhcmUgYWNjZWxlcmF0ZWQgdHJhbnNpdGlvbnNcXFxcbiAqIFxcXFxuICogaHR0cDovL3d3dy5pZGFuZ2Vyby51cy9zd2lwZXIvXFxcXG4gKiBcXFxcbiAqIENvcHlyaWdodCAyMDE3LCBWbGFkaW1pciBLaGFybGFtcGlkaVxcXFxuICogVGhlIGlEYW5nZXJvLnVzXFxcXG4gKiBodHRwOi8vd3d3LmlkYW5nZXJvLnVzL1xcXFxuICogXFxcXG4gKiBMaWNlbnNlZCB1bmRlciBNSVRcXFxcbiAqIFxcXFxuICogUmVsZWFzZWQgb246IE1hcmNoIDEwLCAyMDE3XFxcXG4gKi9cXFxcbi5zd2lwZXItY29udGFpbmVyIHtcXFxcbiAgbWFyZ2luLWxlZnQ6IGF1dG87XFxcXG4gIG1hcmdpbi1yaWdodDogYXV0bztcXFxcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcXFxuICBvdmVyZmxvdzogaGlkZGVuO1xcXFxuICB6LWluZGV4OiAxO1xcXFxufVxcXFxuLnN3aXBlci1jb250YWluZXItbm8tZmxleGJveCAuc3dpcGVyLXNsaWRlIHtcXFxcbiAgZmxvYXQ6IGxlZnQ7XFxcXG59XFxcXG4uc3dpcGVyLWNvbnRhaW5lci12ZXJ0aWNhbCA+IC5zd2lwZXItd3JhcHBlciB7XFxcXG4gIC13ZWJraXQtYm94LW9yaWVudDogdmVydGljYWw7XFxcXG4gIC1tcy1mbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcXFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcXFxufVxcXFxuLnN3aXBlci13cmFwcGVyIHtcXFxcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcXFxuICB3aWR0aDogMTAwJTtcXFxcbiAgaGVpZ2h0OiAxMDAlO1xcXFxuICB6LWluZGV4OiAxO1xcXFxuICBkaXNwbGF5OiAtd2Via2l0LWJveDtcXFxcbiAgZGlzcGxheTogLW1zLWZsZXhib3g7XFxcXG4gIGRpc3BsYXk6IGZsZXg7XFxcXG4gIC13ZWJraXQtdHJhbnNpdGlvbi1wcm9wZXJ0eTogLXdlYmtpdC10cmFuc2Zvcm07XFxcXG4gIHRyYW5zaXRpb24tcHJvcGVydHk6IC13ZWJraXQtdHJhbnNmb3JtO1xcXFxuICB0cmFuc2l0aW9uLXByb3BlcnR5OiB0cmFuc2Zvcm07XFxcXG4gIHRyYW5zaXRpb24tcHJvcGVydHk6IHRyYW5zZm9ybSwgLXdlYmtpdC10cmFuc2Zvcm07XFxcXG4gIC13ZWJraXQtYm94LXNpemluZzogY29udGVudC1ib3g7XFxcXG4gIGJveC1zaXppbmc6IGNvbnRlbnQtYm94O1xcXFxufVxcXFxuLnN3aXBlci1jb250YWluZXItYW5kcm9pZCAuc3dpcGVyLXNsaWRlLFxcXFxuLnN3aXBlci13cmFwcGVyIHtcXFxcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xcXFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xcXFxufVxcXFxuLnN3aXBlci1jb250YWluZXItbXVsdGlyb3cgPiAuc3dpcGVyLXdyYXBwZXIge1xcXFxuICAtd2Via2l0LWJveC1saW5lczogbXVsdGlwbGU7XFxcXG4gIC1tb3otYm94LWxpbmVzOiBtdWx0aXBsZTtcXFxcbiAgLW1zLWZsZXgtd3JhcDogd3JhcDtcXFxcbiAgZmxleC13cmFwOiB3cmFwO1xcXFxufVxcXFxuLnN3aXBlci1jb250YWluZXItZnJlZS1tb2RlID4gLnN3aXBlci13cmFwcGVyIHtcXFxcbiAgLXdlYmtpdC10cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZS1vdXQ7XFxcXG4gIHRyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlLW91dDtcXFxcbiAgbWFyZ2luOiAwIGF1dG87XFxcXG59XFxcXG4uc3dpcGVyLXNsaWRlIHtcXFxcbiAgLXdlYmtpdC1mbGV4LXNocmluazogMDtcXFxcbiAgLW1zLWZsZXg6IDAgMCBhdXRvO1xcXFxuICAtbXMtZmxleC1uZWdhdGl2ZTogMDtcXFxcbiAgICAgIGZsZXgtc2hyaW5rOiAwO1xcXFxuICB3aWR0aDogMTAwJTtcXFxcbiAgaGVpZ2h0OiAxMDAlO1xcXFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxcXG59XFxcXG4uc3dpcGVyLWNvbnRhaW5lci1hdXRvaGVpZ2h0LFxcXFxuLnN3aXBlci1jb250YWluZXItYXV0b2hlaWdodCAuc3dpcGVyLXNsaWRlIHtcXFxcbiAgaGVpZ2h0OiBhdXRvO1xcXFxufVxcXFxuLnN3aXBlci1jb250YWluZXItYXV0b2hlaWdodCAuc3dpcGVyLXdyYXBwZXIge1xcXFxuICAtd2Via2l0LWJveC1hbGlnbjogc3RhcnQ7XFxcXG4gIC1tcy1mbGV4LWFsaWduOiBzdGFydDtcXFxcbiAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XFxcXG4gIC13ZWJraXQtdHJhbnNpdGlvbi1wcm9wZXJ0eTogLXdlYmtpdC10cmFuc2Zvcm0sIGhlaWdodDtcXFxcbiAgLXdlYmtpdC10cmFuc2l0aW9uLXByb3BlcnR5OiBoZWlnaHQsIC13ZWJraXQtdHJhbnNmb3JtO1xcXFxuICB0cmFuc2l0aW9uLXByb3BlcnR5OiBoZWlnaHQsIC13ZWJraXQtdHJhbnNmb3JtO1xcXFxuICB0cmFuc2l0aW9uLXByb3BlcnR5OiB0cmFuc2Zvcm0sIGhlaWdodDtcXFxcbiAgdHJhbnNpdGlvbi1wcm9wZXJ0eTogdHJhbnNmb3JtLCBoZWlnaHQsIC13ZWJraXQtdHJhbnNmb3JtO1xcXFxufVxcXFxuLnN3aXBlci1jb250YWluZXIgLnN3aXBlci1ub3RpZmljYXRpb24ge1xcXFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxcXG4gIGxlZnQ6IDA7XFxcXG4gIHRvcDogMDtcXFxcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxcXG4gIG9wYWNpdHk6IDA7XFxcXG4gIHotaW5kZXg6IC0xMDAwO1xcXFxufVxcXFxuLnN3aXBlci13cDgtaG9yaXpvbnRhbCB7XFxcXG4gIC1tcy10b3VjaC1hY3Rpb246IHBhbi15O1xcXFxuICB0b3VjaC1hY3Rpb246IHBhbi15O1xcXFxufVxcXFxuLnN3aXBlci13cDgtdmVydGljYWwge1xcXFxuICAtbXMtdG91Y2gtYWN0aW9uOiBwYW4teDtcXFxcbiAgdG91Y2gtYWN0aW9uOiBwYW4teDtcXFxcbn1cXFxcbi5zd2lwZXItYnV0dG9uLW5leHQsXFxcXG4uc3dpcGVyLWJ1dHRvbi1wcmV2IHtcXFxcbiAgcG9zaXRpb246IGFic29sdXRlO1xcXFxuICB0b3A6IDUwJTtcXFxcbiAgd2lkdGg6IDI3cHg7XFxcXG4gIGhlaWdodDogNDRweDtcXFxcbiAgbWFyZ2luLXRvcDogLTIycHg7XFxcXG4gIHotaW5kZXg6IDEwO1xcXFxuICBjdXJzb3I6IHBvaW50ZXI7XFxcXG4gIGJhY2tncm91bmQtc2l6ZTogMjdweCA0NHB4O1xcXFxuICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBjZW50ZXI7XFxcXG4gIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XFxcXG59XFxcXG4uc3dpcGVyLWJ1dHRvbi1uZXh0LnN3aXBlci1idXR0b24tZGlzYWJsZWQsXFxcXG4uc3dpcGVyLWJ1dHRvbi1wcmV2LnN3aXBlci1idXR0b24tZGlzYWJsZWQge1xcXFxuICBvcGFjaXR5OiAuMzU7XFxcXG4gIGN1cnNvcjogYXV0bztcXFxcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxcXG59XFxcXG4uc3dpcGVyLWJ1dHRvbi1wcmV2LFxcXFxuLnN3aXBlci1jb250YWluZXItcnRsIC5zd2lwZXItYnV0dG9uLW5leHQge1xcXFxuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXFxcXFxcXCJkYXRhOmltYWdlL3N2Zyt4bWw7Y2hhcnNldD11dGYtOCwlM0NzdmclMjB4bWxucyUzRCdodHRwJTNBJTJGJTJGd3d3LnczLm9yZyUyRjIwMDAlMkZzdmcnJTIwdmlld0JveCUzRCcwJTIwMCUyMDI3JTIwNDQnJTNFJTNDcGF0aCUyMGQlM0QnTTAlMkMyMkwyMiUyQzBsMi4xJTJDMi4xTDQuMiUyQzIybDE5LjklMkMxOS45TDIyJTJDNDRMMCUyQzIyTDAlMkMyMkwwJTJDMjJ6JyUyMGZpbGwlM0QnJTIzMDA3YWZmJyUyRiUzRSUzQyUyRnN2ZyUzRVxcXFxcXFwiKTtcXFxcbiAgbGVmdDogMTBweDtcXFxcbiAgcmlnaHQ6IGF1dG87XFxcXG59XFxcXG4uc3dpcGVyLWJ1dHRvbi1wcmV2LnN3aXBlci1idXR0b24tYmxhY2ssXFxcXG4uc3dpcGVyLWNvbnRhaW5lci1ydGwgLnN3aXBlci1idXR0b24tbmV4dC5zd2lwZXItYnV0dG9uLWJsYWNrIHtcXFxcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFxcXFxcXFwiZGF0YTppbWFnZS9zdmcreG1sO2NoYXJzZXQ9dXRmLTgsJTNDc3ZnJTIweG1sbnMlM0QnaHR0cCUzQSUyRiUyRnd3dy53My5vcmclMkYyMDAwJTJGc3ZnJyUyMHZpZXdCb3glM0QnMCUyMDAlMjAyNyUyMDQ0JyUzRSUzQ3BhdGglMjBkJTNEJ00wJTJDMjJMMjIlMkMwbDIuMSUyQzIuMUw0LjIlMkMyMmwxOS45JTJDMTkuOUwyMiUyQzQ0TDAlMkMyMkwwJTJDMjJMMCUyQzIyeiclMjBmaWxsJTNEJyUyMzAwMDAwMCclMkYlM0UlM0MlMkZzdmclM0VcXFxcXFxcIik7XFxcXG59XFxcXG4uc3dpcGVyLWJ1dHRvbi1wcmV2LnN3aXBlci1idXR0b24td2hpdGUsXFxcXG4uc3dpcGVyLWNvbnRhaW5lci1ydGwgLnN3aXBlci1idXR0b24tbmV4dC5zd2lwZXItYnV0dG9uLXdoaXRlIHtcXFxcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFxcXFxcXFwiZGF0YTppbWFnZS9zdmcreG1sO2NoYXJzZXQ9dXRmLTgsJTNDc3ZnJTIweG1sbnMlM0QnaHR0cCUzQSUyRiUyRnd3dy53My5vcmclMkYyMDAwJTJGc3ZnJyUyMHZpZXdCb3glM0QnMCUyMDAlMjAyNyUyMDQ0JyUzRSUzQ3BhdGglMjBkJTNEJ00wJTJDMjJMMjIlMkMwbDIuMSUyQzIuMUw0LjIlMkMyMmwxOS45JTJDMTkuOUwyMiUyQzQ0TDAlMkMyMkwwJTJDMjJMMCUyQzIyeiclMjBmaWxsJTNEJyUyM2ZmZmZmZiclMkYlM0UlM0MlMkZzdmclM0VcXFxcXFxcIik7XFxcXG59XFxcXG4uc3dpcGVyLWJ1dHRvbi1uZXh0LFxcXFxuLnN3aXBlci1jb250YWluZXItcnRsIC5zd2lwZXItYnV0dG9uLXByZXYge1xcXFxuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXFxcXFxcXCJkYXRhOmltYWdlL3N2Zyt4bWw7Y2hhcnNldD11dGYtOCwlM0NzdmclMjB4bWxucyUzRCdodHRwJTNBJTJGJTJGd3d3LnczLm9yZyUyRjIwMDAlMkZzdmcnJTIwdmlld0JveCUzRCcwJTIwMCUyMDI3JTIwNDQnJTNFJTNDcGF0aCUyMGQlM0QnTTI3JTJDMjJMMjclMkMyMkw1JTJDNDRsLTIuMS0yLjFMMjIuOCUyQzIyTDIuOSUyQzIuMUw1JTJDMEwyNyUyQzIyTDI3JTJDMjJ6JyUyMGZpbGwlM0QnJTIzMDA3YWZmJyUyRiUzRSUzQyUyRnN2ZyUzRVxcXFxcXFwiKTtcXFxcbiAgcmlnaHQ6IDEwcHg7XFxcXG4gIGxlZnQ6IGF1dG87XFxcXG59XFxcXG4uc3dpcGVyLWJ1dHRvbi1uZXh0LnN3aXBlci1idXR0b24tYmxhY2ssXFxcXG4uc3dpcGVyLWNvbnRhaW5lci1ydGwgLnN3aXBlci1idXR0b24tcHJldi5zd2lwZXItYnV0dG9uLWJsYWNrIHtcXFxcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFxcXFxcXFwiZGF0YTppbWFnZS9zdmcreG1sO2NoYXJzZXQ9dXRmLTgsJTNDc3ZnJTIweG1sbnMlM0QnaHR0cCUzQSUyRiUyRnd3dy53My5vcmclMkYyMDAwJTJGc3ZnJyUyMHZpZXdCb3glM0QnMCUyMDAlMjAyNyUyMDQ0JyUzRSUzQ3BhdGglMjBkJTNEJ00yNyUyQzIyTDI3JTJDMjJMNSUyQzQ0bC0yLjEtMi4xTDIyLjglMkMyMkwyLjklMkMyLjFMNSUyQzBMMjclMkMyMkwyNyUyQzIyeiclMjBmaWxsJTNEJyUyMzAwMDAwMCclMkYlM0UlM0MlMkZzdmclM0VcXFxcXFxcIik7XFxcXG59XFxcXG4uc3dpcGVyLWJ1dHRvbi1uZXh0LnN3aXBlci1idXR0b24td2hpdGUsXFxcXG4uc3dpcGVyLWNvbnRhaW5lci1ydGwgLnN3aXBlci1idXR0b24tcHJldi5zd2lwZXItYnV0dG9uLXdoaXRlIHtcXFxcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFxcXFxcXFwiZGF0YTppbWFnZS9zdmcreG1sO2NoYXJzZXQ9dXRmLTgsJTNDc3ZnJTIweG1sbnMlM0QnaHR0cCUzQSUyRiUyRnd3dy53My5vcmclMkYyMDAwJTJGc3ZnJyUyMHZpZXdCb3glM0QnMCUyMDAlMjAyNyUyMDQ0JyUzRSUzQ3BhdGglMjBkJTNEJ00yNyUyQzIyTDI3JTJDMjJMNSUyQzQ0bC0yLjEtMi4xTDIyLjglMkMyMkwyLjklMkMyLjFMNSUyQzBMMjclMkMyMkwyNyUyQzIyeiclMjBmaWxsJTNEJyUyM2ZmZmZmZiclMkYlM0UlM0MlMkZzdmclM0VcXFxcXFxcIik7XFxcXG59XFxcXG4uc3dpcGVyLXBhZ2luYXRpb24ge1xcXFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXFxcbiAgLXdlYmtpdC10cmFuc2l0aW9uOiAuM3M7XFxcXG4gIHRyYW5zaXRpb246IC4zcztcXFxcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xcXFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xcXFxuICB6LWluZGV4OiAxMDtcXFxcbn1cXFxcbi5zd2lwZXItcGFnaW5hdGlvbi5zd2lwZXItcGFnaW5hdGlvbi1oaWRkZW4ge1xcXFxuICBvcGFjaXR5OiAwO1xcXFxufVxcXFxuLnN3aXBlci1jb250YWluZXItaG9yaXpvbnRhbCA+IC5zd2lwZXItcGFnaW5hdGlvbi1idWxsZXRzLFxcXFxuLnN3aXBlci1wYWdpbmF0aW9uLWN1c3RvbSxcXFxcbi5zd2lwZXItcGFnaW5hdGlvbi1mcmFjdGlvbiB7XFxcXG4gIGJvdHRvbTogMTBweDtcXFxcbiAgbGVmdDogMDtcXFxcbiAgd2lkdGg6IDEwMCU7XFxcXG59XFxcXG4uc3dpcGVyLXBhZ2luYXRpb24tYnVsbGV0IHtcXFxcbiAgd2lkdGg6IDhweDtcXFxcbiAgaGVpZ2h0OiA4cHg7XFxcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXFxcbiAgYm9yZGVyLXJhZGl1czogMTAwJTtcXFxcbiAgYmFja2dyb3VuZDogIzAwMDtcXFxcbiAgb3BhY2l0eTogMC4yO1xcXFxufVxcXFxuYnV0dG9uLnN3aXBlci1wYWdpbmF0aW9uLWJ1bGxldCB7XFxcXG4gIGJvcmRlcjogbm9uZTtcXFxcbiAgbWFyZ2luOiAwO1xcXFxuICBwYWRkaW5nOiAwO1xcXFxuICAtd2Via2l0LWJveC1zaGFkb3c6IG5vbmU7XFxcXG4gICAgICAgICAgYm94LXNoYWRvdzogbm9uZTtcXFxcbiAgLW1vei1hcHBlYXJhbmNlOiBub25lO1xcXFxuICAtbXMtYXBwZWFyYW5jZTogbm9uZTtcXFxcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xcXFxuICBhcHBlYXJhbmNlOiBub25lO1xcXFxufVxcXFxuLnN3aXBlci1wYWdpbmF0aW9uLWNsaWNrYWJsZSAuc3dpcGVyLXBhZ2luYXRpb24tYnVsbGV0IHtcXFxcbiAgY3Vyc29yOiBwb2ludGVyO1xcXFxufVxcXFxuLnN3aXBlci1wYWdpbmF0aW9uLXdoaXRlIC5zd2lwZXItcGFnaW5hdGlvbi1idWxsZXQge1xcXFxuICBiYWNrZ3JvdW5kOiAjZmZmO1xcXFxufVxcXFxuLnN3aXBlci1wYWdpbmF0aW9uLWJ1bGxldC1hY3RpdmUge1xcXFxuICBvcGFjaXR5OiAxO1xcXFxuICBiYWNrZ3JvdW5kOiAjMDA3YWZmO1xcXFxufVxcXFxuLnN3aXBlci1wYWdpbmF0aW9uLXdoaXRlIC5zd2lwZXItcGFnaW5hdGlvbi1idWxsZXQtYWN0aXZlIHtcXFxcbiAgYmFja2dyb3VuZDogI2ZmZjtcXFxcbn1cXFxcbi5zd2lwZXItcGFnaW5hdGlvbi1ibGFjayAuc3dpcGVyLXBhZ2luYXRpb24tYnVsbGV0LWFjdGl2ZSB7XFxcXG4gIGJhY2tncm91bmQ6ICMwMDA7XFxcXG59XFxcXG4uc3dpcGVyLWNvbnRhaW5lci12ZXJ0aWNhbCA+IC5zd2lwZXItcGFnaW5hdGlvbi1idWxsZXRzIHtcXFxcbiAgcmlnaHQ6IDEwcHg7XFxcXG4gIHRvcDogNTAlO1xcXFxuICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgLTUwJSwgMCk7XFxcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgLTUwJSwgMCk7XFxcXG59XFxcXG4uc3dpcGVyLWNvbnRhaW5lci12ZXJ0aWNhbCA+IC5zd2lwZXItcGFnaW5hdGlvbi1idWxsZXRzIC5zd2lwZXItcGFnaW5hdGlvbi1idWxsZXQge1xcXFxuICBtYXJnaW46IDVweCAwO1xcXFxuICBkaXNwbGF5OiBibG9jaztcXFxcbn1cXFxcbi5zd2lwZXItY29udGFpbmVyLWhvcml6b250YWwgPiAuc3dpcGVyLXBhZ2luYXRpb24tYnVsbGV0cyAuc3dpcGVyLXBhZ2luYXRpb24tYnVsbGV0IHtcXFxcbiAgbWFyZ2luOiAwIDVweDtcXFxcbn1cXFxcbi5zd2lwZXItcGFnaW5hdGlvbi1wcm9ncmVzcyB7XFxcXG4gIGJhY2tncm91bmQ6IHJnYmEoMCwgMCwgMCwgMC4yNSk7XFxcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXFxcbn1cXFxcbi5zd2lwZXItcGFnaW5hdGlvbi1wcm9ncmVzcyAuc3dpcGVyLXBhZ2luYXRpb24tcHJvZ3Jlc3NiYXIge1xcXFxuICBiYWNrZ3JvdW5kOiAjMDA3YWZmO1xcXFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxcXG4gIGxlZnQ6IDA7XFxcXG4gIHRvcDogMDtcXFxcbiAgd2lkdGg6IDEwMCU7XFxcXG4gIGhlaWdodDogMTAwJTtcXFxcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDApO1xcXFxuICB0cmFuc2Zvcm06IHNjYWxlKDApO1xcXFxuICAtd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46IGxlZnQgdG9wO1xcXFxuICB0cmFuc2Zvcm0tb3JpZ2luOiBsZWZ0IHRvcDtcXFxcbn1cXFxcbi5zd2lwZXItY29udGFpbmVyLXJ0bCAuc3dpcGVyLXBhZ2luYXRpb24tcHJvZ3Jlc3MgLnN3aXBlci1wYWdpbmF0aW9uLXByb2dyZXNzYmFyIHtcXFxcbiAgLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOiByaWdodCB0b3A7XFxcXG4gIHRyYW5zZm9ybS1vcmlnaW46IHJpZ2h0IHRvcDtcXFxcbn1cXFxcbi5zd2lwZXItY29udGFpbmVyLWhvcml6b250YWwgPiAuc3dpcGVyLXBhZ2luYXRpb24tcHJvZ3Jlc3Mge1xcXFxuICB3aWR0aDogMTAwJTtcXFxcbiAgaGVpZ2h0OiA0cHg7XFxcXG4gIGxlZnQ6IDA7XFxcXG4gIHRvcDogMDtcXFxcbn1cXFxcbi5zd2lwZXItY29udGFpbmVyLXZlcnRpY2FsID4gLnN3aXBlci1wYWdpbmF0aW9uLXByb2dyZXNzIHtcXFxcbiAgd2lkdGg6IDRweDtcXFxcbiAgaGVpZ2h0OiAxMDAlO1xcXFxuICBsZWZ0OiAwO1xcXFxuICB0b3A6IDA7XFxcXG59XFxcXG4uc3dpcGVyLXBhZ2luYXRpb24tcHJvZ3Jlc3Muc3dpcGVyLXBhZ2luYXRpb24td2hpdGUge1xcXFxuICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSk7XFxcXG59XFxcXG4uc3dpcGVyLXBhZ2luYXRpb24tcHJvZ3Jlc3Muc3dpcGVyLXBhZ2luYXRpb24td2hpdGUgLnN3aXBlci1wYWdpbmF0aW9uLXByb2dyZXNzYmFyIHtcXFxcbiAgYmFja2dyb3VuZDogI2ZmZjtcXFxcbn1cXFxcbi5zd2lwZXItcGFnaW5hdGlvbi1wcm9ncmVzcy5zd2lwZXItcGFnaW5hdGlvbi1ibGFjayAuc3dpcGVyLXBhZ2luYXRpb24tcHJvZ3Jlc3NiYXIge1xcXFxuICBiYWNrZ3JvdW5kOiAjMDAwO1xcXFxufVxcXFxuLnN3aXBlci1jb250YWluZXItM2Qge1xcXFxuICAtd2Via2l0LXBlcnNwZWN0aXZlOiAxMjAwcHg7XFxcXG4gIC1vLXBlcnNwZWN0aXZlOiAxMjAwcHg7XFxcXG4gIHBlcnNwZWN0aXZlOiAxMjAwcHg7XFxcXG59XFxcXG4uc3dpcGVyLWNvbnRhaW5lci0zZCAuc3dpcGVyLWN1YmUtc2hhZG93LFxcXFxuLnN3aXBlci1jb250YWluZXItM2QgLnN3aXBlci1zbGlkZSxcXFxcbi5zd2lwZXItY29udGFpbmVyLTNkIC5zd2lwZXItc2xpZGUtc2hhZG93LWJvdHRvbSxcXFxcbi5zd2lwZXItY29udGFpbmVyLTNkIC5zd2lwZXItc2xpZGUtc2hhZG93LWxlZnQsXFxcXG4uc3dpcGVyLWNvbnRhaW5lci0zZCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1yaWdodCxcXFxcbi5zd2lwZXItY29udGFpbmVyLTNkIC5zd2lwZXItc2xpZGUtc2hhZG93LXRvcCxcXFxcbi5zd2lwZXItY29udGFpbmVyLTNkIC5zd2lwZXItd3JhcHBlciB7XFxcXG4gIC13ZWJraXQtdHJhbnNmb3JtLXN0eWxlOiBwcmVzZXJ2ZS0zZDtcXFxcbiAgdHJhbnNmb3JtLXN0eWxlOiBwcmVzZXJ2ZS0zZDtcXFxcbn1cXFxcbi5zd2lwZXItY29udGFpbmVyLTNkIC5zd2lwZXItc2xpZGUtc2hhZG93LWJvdHRvbSxcXFxcbi5zd2lwZXItY29udGFpbmVyLTNkIC5zd2lwZXItc2xpZGUtc2hhZG93LWxlZnQsXFxcXG4uc3dpcGVyLWNvbnRhaW5lci0zZCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1yaWdodCxcXFxcbi5zd2lwZXItY29udGFpbmVyLTNkIC5zd2lwZXItc2xpZGUtc2hhZG93LXRvcCB7XFxcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXFxcbiAgbGVmdDogMDtcXFxcbiAgdG9wOiAwO1xcXFxuICB3aWR0aDogMTAwJTtcXFxcbiAgaGVpZ2h0OiAxMDAlO1xcXFxuICBwb2ludGVyLWV2ZW50czogbm9uZTtcXFxcbiAgei1pbmRleDogMTA7XFxcXG59XFxcXG4uc3dpcGVyLWNvbnRhaW5lci0zZCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1sZWZ0IHtcXFxcbiAgYmFja2dyb3VuZC1pbWFnZTogLXdlYmtpdC1ncmFkaWVudChsaW5lYXIsIHJpZ2h0IHRvcCwgbGVmdCB0b3AsIGZyb20ocmdiYSgwLCAwLCAwLCAwLjUpKSwgdG8ocmdiYSgwLCAwLCAwLCAwKSkpO1xcXFxuICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQodG8gbGVmdCwgcmdiYSgwLCAwLCAwLCAwLjUpLCByZ2JhKDAsIDAsIDAsIDApKTtcXFxcbn1cXFxcbi5zd2lwZXItY29udGFpbmVyLTNkIC5zd2lwZXItc2xpZGUtc2hhZG93LXJpZ2h0IHtcXFxcbiAgYmFja2dyb3VuZC1pbWFnZTogLXdlYmtpdC1ncmFkaWVudChsaW5lYXIsIGxlZnQgdG9wLCByaWdodCB0b3AsIGZyb20ocmdiYSgwLCAwLCAwLCAwLjUpKSwgdG8ocmdiYSgwLCAwLCAwLCAwKSkpO1xcXFxuICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQodG8gcmlnaHQsIHJnYmEoMCwgMCwgMCwgMC41KSwgcmdiYSgwLCAwLCAwLCAwKSk7XFxcXG59XFxcXG4uc3dpcGVyLWNvbnRhaW5lci0zZCAuc3dpcGVyLXNsaWRlLXNoYWRvdy10b3Age1xcXFxuICBiYWNrZ3JvdW5kLWltYWdlOiAtd2Via2l0LWdyYWRpZW50KGxpbmVhciwgbGVmdCBib3R0b20sIGxlZnQgdG9wLCBmcm9tKHJnYmEoMCwgMCwgMCwgMC41KSksIHRvKHJnYmEoMCwgMCwgMCwgMCkpKTtcXFxcbiAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KHRvIHRvcCwgcmdiYSgwLCAwLCAwLCAwLjUpLCByZ2JhKDAsIDAsIDAsIDApKTtcXFxcbn1cXFxcbi5zd2lwZXItY29udGFpbmVyLTNkIC5zd2lwZXItc2xpZGUtc2hhZG93LWJvdHRvbSB7XFxcXG4gIGJhY2tncm91bmQtaW1hZ2U6IC13ZWJraXQtZ3JhZGllbnQobGluZWFyLCBsZWZ0IHRvcCwgbGVmdCBib3R0b20sIGZyb20ocmdiYSgwLCAwLCAwLCAwLjUpKSwgdG8ocmdiYSgwLCAwLCAwLCAwKSkpO1xcXFxuICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQodG8gYm90dG9tLCByZ2JhKDAsIDAsIDAsIDAuNSksIHJnYmEoMCwgMCwgMCwgMCkpO1xcXFxufVxcXFxuLnN3aXBlci1jb250YWluZXItY292ZXJmbG93IC5zd2lwZXItd3JhcHBlcixcXFxcbi5zd2lwZXItY29udGFpbmVyLWZsaXAgLnN3aXBlci13cmFwcGVyIHtcXFxcbiAgLW1zLXBlcnNwZWN0aXZlOiAxMjAwcHg7XFxcXG59XFxcXG4uc3dpcGVyLWNvbnRhaW5lci1jdWJlLFxcXFxuLnN3aXBlci1jb250YWluZXItZmxpcCB7XFxcXG4gIG92ZXJmbG93OiB2aXNpYmxlO1xcXFxufVxcXFxuLnN3aXBlci1jb250YWluZXItY3ViZSAuc3dpcGVyLXNsaWRlLFxcXFxuLnN3aXBlci1jb250YWluZXItZmxpcCAuc3dpcGVyLXNsaWRlIHtcXFxcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxcXG4gIC13ZWJraXQtYmFja2ZhY2UtdmlzaWJpbGl0eTogaGlkZGVuO1xcXFxuICBiYWNrZmFjZS12aXNpYmlsaXR5OiBoaWRkZW47XFxcXG4gIHotaW5kZXg6IDE7XFxcXG59XFxcXG4uc3dpcGVyLWNvbnRhaW5lci1jdWJlIC5zd2lwZXItc2xpZGUgLnN3aXBlci1zbGlkZSxcXFxcbi5zd2lwZXItY29udGFpbmVyLWZsaXAgLnN3aXBlci1zbGlkZSAuc3dpcGVyLXNsaWRlIHtcXFxcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxcXG59XFxcXG4uc3dpcGVyLWNvbnRhaW5lci1jdWJlIC5zd2lwZXItc2xpZGUtYWN0aXZlLFxcXFxuLnN3aXBlci1jb250YWluZXItY3ViZSAuc3dpcGVyLXNsaWRlLWFjdGl2ZSAuc3dpcGVyLXNsaWRlLWFjdGl2ZSxcXFxcbi5zd2lwZXItY29udGFpbmVyLWZsaXAgLnN3aXBlci1zbGlkZS1hY3RpdmUsXFxcXG4uc3dpcGVyLWNvbnRhaW5lci1mbGlwIC5zd2lwZXItc2xpZGUtYWN0aXZlIC5zd2lwZXItc2xpZGUtYWN0aXZlIHtcXFxcbiAgcG9pbnRlci1ldmVudHM6IGF1dG87XFxcXG59XFxcXG4uc3dpcGVyLWNvbnRhaW5lci1jdWJlIC5zd2lwZXItc2xpZGUtc2hhZG93LWJvdHRvbSxcXFxcbi5zd2lwZXItY29udGFpbmVyLWN1YmUgLnN3aXBlci1zbGlkZS1zaGFkb3ctbGVmdCxcXFxcbi5zd2lwZXItY29udGFpbmVyLWN1YmUgLnN3aXBlci1zbGlkZS1zaGFkb3ctcmlnaHQsXFxcXG4uc3dpcGVyLWNvbnRhaW5lci1jdWJlIC5zd2lwZXItc2xpZGUtc2hhZG93LXRvcCxcXFxcbi5zd2lwZXItY29udGFpbmVyLWZsaXAgLnN3aXBlci1zbGlkZS1zaGFkb3ctYm90dG9tLFxcXFxuLnN3aXBlci1jb250YWluZXItZmxpcCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1sZWZ0LFxcXFxuLnN3aXBlci1jb250YWluZXItZmxpcCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1yaWdodCxcXFxcbi5zd2lwZXItY29udGFpbmVyLWZsaXAgLnN3aXBlci1zbGlkZS1zaGFkb3ctdG9wIHtcXFxcbiAgei1pbmRleDogMDtcXFxcbiAgLXdlYmtpdC1iYWNrZmFjZS12aXNpYmlsaXR5OiBoaWRkZW47XFxcXG4gIGJhY2tmYWNlLXZpc2liaWxpdHk6IGhpZGRlbjtcXFxcbn1cXFxcbi5zd2lwZXItY29udGFpbmVyLWN1YmUgLnN3aXBlci1zbGlkZSB7XFxcXG4gIHZpc2liaWxpdHk6IGhpZGRlbjtcXFxcbiAgLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOiAwIDA7XFxcXG4gIHRyYW5zZm9ybS1vcmlnaW46IDAgMDtcXFxcbiAgd2lkdGg6IDEwMCU7XFxcXG4gIGhlaWdodDogMTAwJTtcXFxcbn1cXFxcbi5zd2lwZXItY29udGFpbmVyLWN1YmUuc3dpcGVyLWNvbnRhaW5lci1ydGwgLnN3aXBlci1zbGlkZSB7XFxcXG4gIC13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjogMTAwJSAwO1xcXFxuICB0cmFuc2Zvcm0tb3JpZ2luOiAxMDAlIDA7XFxcXG59XFxcXG4uc3dpcGVyLWNvbnRhaW5lci1jdWJlIC5zd2lwZXItc2xpZGUtYWN0aXZlLFxcXFxuLnN3aXBlci1jb250YWluZXItY3ViZSAuc3dpcGVyLXNsaWRlLW5leHQsXFxcXG4uc3dpcGVyLWNvbnRhaW5lci1jdWJlIC5zd2lwZXItc2xpZGUtbmV4dCArIC5zd2lwZXItc2xpZGUsXFxcXG4uc3dpcGVyLWNvbnRhaW5lci1jdWJlIC5zd2lwZXItc2xpZGUtcHJldiB7XFxcXG4gIHBvaW50ZXItZXZlbnRzOiBhdXRvO1xcXFxuICB2aXNpYmlsaXR5OiB2aXNpYmxlO1xcXFxufVxcXFxuLnN3aXBlci1jb250YWluZXItY3ViZSAuc3dpcGVyLWN1YmUtc2hhZG93IHtcXFxcbiAgcG9zaXRpb246IGFic29sdXRlO1xcXFxuICBsZWZ0OiAwO1xcXFxuICBib3R0b206IDA7XFxcXG4gIHdpZHRoOiAxMDAlO1xcXFxuICBoZWlnaHQ6IDEwMCU7XFxcXG4gIGJhY2tncm91bmQ6ICMwMDA7XFxcXG4gIG9wYWNpdHk6IC42O1xcXFxuICAtd2Via2l0LWZpbHRlcjogYmx1cig1MHB4KTtcXFxcbiAgZmlsdGVyOiBibHVyKDUwcHgpO1xcXFxuICB6LWluZGV4OiAwO1xcXFxufVxcXFxuLnN3aXBlci1jb250YWluZXItZmFkZS5zd2lwZXItY29udGFpbmVyLWZyZWUtbW9kZSAuc3dpcGVyLXNsaWRlIHtcXFxcbiAgLXdlYmtpdC10cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZS1vdXQ7XFxcXG4gIHRyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlLW91dDtcXFxcbn1cXFxcbi5zd2lwZXItY29udGFpbmVyLWZhZGUgLnN3aXBlci1zbGlkZSB7XFxcXG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xcXFxuICAtd2Via2l0LXRyYW5zaXRpb24tcHJvcGVydHk6IG9wYWNpdHk7XFxcXG4gIHRyYW5zaXRpb24tcHJvcGVydHk6IG9wYWNpdHk7XFxcXG59XFxcXG4uc3dpcGVyLWNvbnRhaW5lci1mYWRlIC5zd2lwZXItc2xpZGUgLnN3aXBlci1zbGlkZSB7XFxcXG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xcXFxufVxcXFxuLnN3aXBlci1jb250YWluZXItZmFkZSAuc3dpcGVyLXNsaWRlLWFjdGl2ZSxcXFxcbi5zd2lwZXItY29udGFpbmVyLWZhZGUgLnN3aXBlci1zbGlkZS1hY3RpdmUgLnN3aXBlci1zbGlkZS1hY3RpdmUge1xcXFxuICBwb2ludGVyLWV2ZW50czogYXV0bztcXFxcbn1cXFxcbi5zd2lwZXItem9vbS1jb250YWluZXIge1xcXFxuICB3aWR0aDogMTAwJTtcXFxcbiAgaGVpZ2h0OiAxMDAlO1xcXFxuICBkaXNwbGF5OiAtd2Via2l0LWJveDtcXFxcbiAgZGlzcGxheTogLW1zLWZsZXhib3g7XFxcXG4gIGRpc3BsYXk6IGZsZXg7XFxcXG4gIC13ZWJraXQtYm94LXBhY2s6IGNlbnRlcjtcXFxcbiAgLW1zLWZsZXgtcGFjazogY2VudGVyO1xcXFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXFxcbiAgLXdlYmtpdC1ib3gtYWxpZ246IGNlbnRlcjtcXFxcbiAgLW1zLWZsZXgtYWxpZ246IGNlbnRlcjtcXFxcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXFxcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcXFxufVxcXFxuLnN3aXBlci16b29tLWNvbnRhaW5lciA+IGNhbnZhcyxcXFxcbi5zd2lwZXItem9vbS1jb250YWluZXIgPiBpbWcsXFxcXG4uc3dpcGVyLXpvb20tY29udGFpbmVyID4gc3ZnIHtcXFxcbiAgbWF4LXdpZHRoOiAxMDAlO1xcXFxuICBtYXgtaGVpZ2h0OiAxMDAlO1xcXFxuICAtby1vYmplY3QtZml0OiBjb250YWluO1xcXFxuICAgICBvYmplY3QtZml0OiBjb250YWluO1xcXFxufVxcXFxuLnN3aXBlci1zY3JvbGxiYXIge1xcXFxuICBib3JkZXItcmFkaXVzOiAxMHB4O1xcXFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxcXG4gIC1tcy10b3VjaC1hY3Rpb246IG5vbmU7XFxcXG4gIGJhY2tncm91bmQ6IHJnYmEoMCwgMCwgMCwgMC4xKTtcXFxcbn1cXFxcbi5zd2lwZXItY29udGFpbmVyLWhvcml6b250YWwgPiAuc3dpcGVyLXNjcm9sbGJhciB7XFxcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXFxcbiAgbGVmdDogMSU7XFxcXG4gIGJvdHRvbTogM3B4O1xcXFxuICB6LWluZGV4OiA1MDtcXFxcbiAgaGVpZ2h0OiA1cHg7XFxcXG4gIHdpZHRoOiA5OCU7XFxcXG59XFxcXG4uc3dpcGVyLWNvbnRhaW5lci12ZXJ0aWNhbCA+IC5zd2lwZXItc2Nyb2xsYmFyIHtcXFxcbiAgcG9zaXRpb246IGFic29sdXRlO1xcXFxuICByaWdodDogM3B4O1xcXFxuICB0b3A6IDElO1xcXFxuICB6LWluZGV4OiA1MDtcXFxcbiAgd2lkdGg6IDVweDtcXFxcbiAgaGVpZ2h0OiA5OCU7XFxcXG59XFxcXG4uc3dpcGVyLXNjcm9sbGJhci1kcmFnIHtcXFxcbiAgaGVpZ2h0OiAxMDAlO1xcXFxuICB3aWR0aDogMTAwJTtcXFxcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcXFxuICBiYWNrZ3JvdW5kOiByZ2JhKDAsIDAsIDAsIDAuNSk7XFxcXG4gIGJvcmRlci1yYWRpdXM6IDEwcHg7XFxcXG4gIGxlZnQ6IDA7XFxcXG4gIHRvcDogMDtcXFxcbn1cXFxcbi5zd2lwZXItc2Nyb2xsYmFyLWN1cnNvci1kcmFnIHtcXFxcbiAgY3Vyc29yOiBtb3ZlO1xcXFxufVxcXFxuLnN3aXBlci1sYXp5LXByZWxvYWRlciB7XFxcXG4gIHdpZHRoOiA0MnB4O1xcXFxuICBoZWlnaHQ6IDQycHg7XFxcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXFxcbiAgbGVmdDogNTAlO1xcXFxuICB0b3A6IDUwJTtcXFxcbiAgbWFyZ2luLWxlZnQ6IC0yMXB4O1xcXFxuICBtYXJnaW4tdG9wOiAtMjFweDtcXFxcbiAgei1pbmRleDogMTA7XFxcXG4gIC13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjogNTAlO1xcXFxuICB0cmFuc2Zvcm0tb3JpZ2luOiA1MCU7XFxcXG4gIC13ZWJraXQtYW5pbWF0aW9uOiBzd2lwZXItcHJlbG9hZGVyLXNwaW4gMXMgc3RlcHMoMTIsIGVuZCkgaW5maW5pdGU7XFxcXG4gIGFuaW1hdGlvbjogc3dpcGVyLXByZWxvYWRlci1zcGluIDFzIHN0ZXBzKDEyLCBlbmQpIGluZmluaXRlO1xcXFxufVxcXFxuLnN3aXBlci1sYXp5LXByZWxvYWRlcjphZnRlciB7XFxcXG4gIGRpc3BsYXk6IGJsb2NrO1xcXFxuICBjb250ZW50OiBcXFxcXFxcIlxcXFxcXFwiO1xcXFxuICB3aWR0aDogMTAwJTtcXFxcbiAgaGVpZ2h0OiAxMDAlO1xcXFxuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXFxcXFxcXCJkYXRhOmltYWdlL3N2Zyt4bWw7Y2hhcnNldD11dGYtOCwlM0NzdmclMjB2aWV3Qm94JTNEJzAlMjAwJTIwMTIwJTIwMTIwJyUyMHhtbG5zJTNEJ2h0dHAlM0ElMkYlMkZ3d3cudzMub3JnJTJGMjAwMCUyRnN2ZyclMjB4bWxucyUzQXhsaW5rJTNEJ2h0dHAlM0ElMkYlMkZ3d3cudzMub3JnJTJGMTk5OSUyRnhsaW5rJyUzRSUzQ2RlZnMlM0UlM0NsaW5lJTIwaWQlM0QnbCclMjB4MSUzRCc2MCclMjB4MiUzRCc2MCclMjB5MSUzRCc3JyUyMHkyJTNEJzI3JyUyMHN0cm9rZSUzRCclMjM2YzZjNmMnJTIwc3Ryb2tlLXdpZHRoJTNEJzExJyUyMHN0cm9rZS1saW5lY2FwJTNEJ3JvdW5kJyUyRiUzRSUzQyUyRmRlZnMlM0UlM0NnJTNFJTNDdXNlJTIweGxpbmslM0FocmVmJTNEJyUyM2wnJTIwb3BhY2l0eSUzRCcuMjcnJTJGJTNFJTNDdXNlJTIweGxpbmslM0FocmVmJTNEJyUyM2wnJTIwb3BhY2l0eSUzRCcuMjcnJTIwdHJhbnNmb3JtJTNEJ3JvdGF0ZSgzMCUyMDYwJTJDNjApJyUyRiUzRSUzQ3VzZSUyMHhsaW5rJTNBaHJlZiUzRCclMjNsJyUyMG9wYWNpdHklM0QnLjI3JyUyMHRyYW5zZm9ybSUzRCdyb3RhdGUoNjAlMjA2MCUyQzYwKSclMkYlM0UlM0N1c2UlMjB4bGluayUzQWhyZWYlM0QnJTIzbCclMjBvcGFjaXR5JTNEJy4yNyclMjB0cmFuc2Zvcm0lM0Qncm90YXRlKDkwJTIwNjAlMkM2MCknJTJGJTNFJTNDdXNlJTIweGxpbmslM0FocmVmJTNEJyUyM2wnJTIwb3BhY2l0eSUzRCcuMjcnJTIwdHJhbnNmb3JtJTNEJ3JvdGF0ZSgxMjAlMjA2MCUyQzYwKSclMkYlM0UlM0N1c2UlMjB4bGluayUzQWhyZWYlM0QnJTIzbCclMjBvcGFjaXR5JTNEJy4yNyclMjB0cmFuc2Zvcm0lM0Qncm90YXRlKDE1MCUyMDYwJTJDNjApJyUyRiUzRSUzQ3VzZSUyMHhsaW5rJTNBaHJlZiUzRCclMjNsJyUyMG9wYWNpdHklM0QnLjM3JyUyMHRyYW5zZm9ybSUzRCdyb3RhdGUoMTgwJTIwNjAlMkM2MCknJTJGJTNFJTNDdXNlJTIweGxpbmslM0FocmVmJTNEJyUyM2wnJTIwb3BhY2l0eSUzRCcuNDYnJTIwdHJhbnNmb3JtJTNEJ3JvdGF0ZSgyMTAlMjA2MCUyQzYwKSclMkYlM0UlM0N1c2UlMjB4bGluayUzQWhyZWYlM0QnJTIzbCclMjBvcGFjaXR5JTNEJy41NiclMjB0cmFuc2Zvcm0lM0Qncm90YXRlKDI0MCUyMDYwJTJDNjApJyUyRiUzRSUzQ3VzZSUyMHhsaW5rJTNBaHJlZiUzRCclMjNsJyUyMG9wYWNpdHklM0QnLjY2JyUyMHRyYW5zZm9ybSUzRCdyb3RhdGUoMjcwJTIwNjAlMkM2MCknJTJGJTNFJTNDdXNlJTIweGxpbmslM0FocmVmJTNEJyUyM2wnJTIwb3BhY2l0eSUzRCcuNzUnJTIwdHJhbnNmb3JtJTNEJ3JvdGF0ZSgzMDAlMjA2MCUyQzYwKSclMkYlM0UlM0N1c2UlMjB4bGluayUzQWhyZWYlM0QnJTIzbCclMjBvcGFjaXR5JTNEJy44NSclMjB0cmFuc2Zvcm0lM0Qncm90YXRlKDMzMCUyMDYwJTJDNjApJyUyRiUzRSUzQyUyRmclM0UlM0MlMkZzdmclM0VcXFxcXFxcIik7XFxcXG4gIGJhY2tncm91bmQtcG9zaXRpb246IDUwJTtcXFxcbiAgYmFja2dyb3VuZC1zaXplOiAxMDAlO1xcXFxuICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xcXFxufVxcXFxuLnN3aXBlci1sYXp5LXByZWxvYWRlci13aGl0ZTphZnRlciB7XFxcXG4gIGJhY2tncm91bmQtaW1hZ2U6IHVybChcXFxcXFxcImRhdGE6aW1hZ2Uvc3ZnK3htbDtjaGFyc2V0PXV0Zi04LCUzQ3N2ZyUyMHZpZXdCb3glM0QnMCUyMDAlMjAxMjAlMjAxMjAnJTIweG1sbnMlM0QnaHR0cCUzQSUyRiUyRnd3dy53My5vcmclMkYyMDAwJTJGc3ZnJyUyMHhtbG5zJTNBeGxpbmslM0QnaHR0cCUzQSUyRiUyRnd3dy53My5vcmclMkYxOTk5JTJGeGxpbmsnJTNFJTNDZGVmcyUzRSUzQ2xpbmUlMjBpZCUzRCdsJyUyMHgxJTNEJzYwJyUyMHgyJTNEJzYwJyUyMHkxJTNEJzcnJTIweTIlM0QnMjcnJTIwc3Ryb2tlJTNEJyUyM2ZmZiclMjBzdHJva2Utd2lkdGglM0QnMTEnJTIwc3Ryb2tlLWxpbmVjYXAlM0Qncm91bmQnJTJGJTNFJTNDJTJGZGVmcyUzRSUzQ2clM0UlM0N1c2UlMjB4bGluayUzQWhyZWYlM0QnJTIzbCclMjBvcGFjaXR5JTNEJy4yNyclMkYlM0UlM0N1c2UlMjB4bGluayUzQWhyZWYlM0QnJTIzbCclMjBvcGFjaXR5JTNEJy4yNyclMjB0cmFuc2Zvcm0lM0Qncm90YXRlKDMwJTIwNjAlMkM2MCknJTJGJTNFJTNDdXNlJTIweGxpbmslM0FocmVmJTNEJyUyM2wnJTIwb3BhY2l0eSUzRCcuMjcnJTIwdHJhbnNmb3JtJTNEJ3JvdGF0ZSg2MCUyMDYwJTJDNjApJyUyRiUzRSUzQ3VzZSUyMHhsaW5rJTNBaHJlZiUzRCclMjNsJyUyMG9wYWNpdHklM0QnLjI3JyUyMHRyYW5zZm9ybSUzRCdyb3RhdGUoOTAlMjA2MCUyQzYwKSclMkYlM0UlM0N1c2UlMjB4bGluayUzQWhyZWYlM0QnJTIzbCclMjBvcGFjaXR5JTNEJy4yNyclMjB0cmFuc2Zvcm0lM0Qncm90YXRlKDEyMCUyMDYwJTJDNjApJyUyRiUzRSUzQ3VzZSUyMHhsaW5rJTNBaHJlZiUzRCclMjNsJyUyMG9wYWNpdHklM0QnLjI3JyUyMHRyYW5zZm9ybSUzRCdyb3RhdGUoMTUwJTIwNjAlMkM2MCknJTJGJTNFJTNDdXNlJTIweGxpbmslM0FocmVmJTNEJyUyM2wnJTIwb3BhY2l0eSUzRCcuMzcnJTIwdHJhbnNmb3JtJTNEJ3JvdGF0ZSgxODAlMjA2MCUyQzYwKSclMkYlM0UlM0N1c2UlMjB4bGluayUzQWhyZWYlM0QnJTIzbCclMjBvcGFjaXR5JTNEJy40NiclMjB0cmFuc2Zvcm0lM0Qncm90YXRlKDIxMCUyMDYwJTJDNjApJyUyRiUzRSUzQ3VzZSUyMHhsaW5rJTNBaHJlZiUzRCclMjNsJyUyMG9wYWNpdHklM0QnLjU2JyUyMHRyYW5zZm9ybSUzRCdyb3RhdGUoMjQwJTIwNjAlMkM2MCknJTJGJTNFJTNDdXNlJTIweGxpbmslM0FocmVmJTNEJyUyM2wnJTIwb3BhY2l0eSUzRCcuNjYnJTIwdHJhbnNmb3JtJTNEJ3JvdGF0ZSgyNzAlMjA2MCUyQzYwKSclMkYlM0UlM0N1c2UlMjB4bGluayUzQWhyZWYlM0QnJTIzbCclMjBvcGFjaXR5JTNEJy43NSclMjB0cmFuc2Zvcm0lM0Qncm90YXRlKDMwMCUyMDYwJTJDNjApJyUyRiUzRSUzQ3VzZSUyMHhsaW5rJTNBaHJlZiUzRCclMjNsJyUyMG9wYWNpdHklM0QnLjg1JyUyMHRyYW5zZm9ybSUzRCdyb3RhdGUoMzMwJTIwNjAlMkM2MCknJTJGJTNFJTNDJTJGZyUzRSUzQyUyRnN2ZyUzRVxcXFxcXFwiKTtcXFxcbn1cXFxcbkAtd2Via2l0LWtleWZyYW1lcyBzd2lwZXItcHJlbG9hZGVyLXNwaW4ge1xcXFxuICAxMDAlIHtcXFxcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7XFxcXG4gIH1cXFxcbn1cXFxcbkBrZXlmcmFtZXMgc3dpcGVyLXByZWxvYWRlci1zcGluIHtcXFxcbiAgMTAwJSB7XFxcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpO1xcXFxuICAgICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoMzYwZGVnKTtcXFxcbiAgfVxcXFxufVxcXFxuXFxcIiwgXFxcIlxcXCJdKTtcXG5cXG4vLyBleHBvcnRzXFxuLy8jIHNvdXJjZVVSTD1bbW9kdWxlXVxcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OHZMaTl6Y21NdmMzZHBjR1Z5TG0xcGJpNWpjM00vT1RGaU5TSmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaVFVRkJRVHRCUVVOQk96czdRVUZIUVR0QlFVTkJMSE5YUVVGMVZ5eHpRa0ZCYzBJc2RVSkJRWFZDTEhWQ1FVRjFRaXh4UWtGQmNVSXNaVUZCWlN4SFFVRkhMRGhEUVVFNFF5eG5Ra0ZCWjBJc1IwRkJSeXhuUkVGQlowUXNhVU5CUVdsRExDdENRVUVyUWl3eVFrRkJNa0lzUjBGQlJ5eHRRa0ZCYlVJc2RVSkJRWFZDTEdkQ1FVRm5RaXhwUWtGQmFVSXNaVUZCWlN4NVFrRkJlVUlzZVVKQlFYbENMR3RDUVVGclFpeHRSRUZCYlVRc01rTkJRVEpETEcxRFFVRnRReXh6UkVGQmMwUXNiME5CUVc5RExEUkNRVUUwUWl4SFFVRkhMRFpFUVVFMlJDdzBRMEZCTkVNc2IwTkJRVzlETEVkQlFVY3NaMFJCUVdkRUxHZERRVUZuUXl3MlFrRkJOa0lzZDBKQlFYZENMRzlDUVVGdlFpeEhRVUZITEdsRVFVRnBSQ3hwUkVGQmFVUXNlVU5CUVhsRExHMUNRVUZ0UWl4SFFVRkhMR2xDUVVGcFFpd3lRa0ZCTWtJc2RVSkJRWFZDTEhsQ1FVRjVRaXgxUWtGQmRVSXNaMEpCUVdkQ0xHbENRVUZwUWl4MVFrRkJkVUlzUjBGQlJ5dzJSVUZCTmtVc2FVSkJRV2xDTEVkQlFVY3NaMFJCUVdkRUxEWkNRVUUyUWl3d1FrRkJNRUlzTkVKQlFUUkNMREpFUVVFeVJDd3lSRUZCTWtRc2JVUkJRVzFFTERKRFFVRXlReXc0UkVGQk9FUXNSMEZCUnl3d1EwRkJNRU1zZFVKQlFYVkNMRmxCUVZrc1YwRkJWeXg1UWtGQmVVSXNaVUZCWlN4dFFrRkJiVUlzUjBGQlJ5d3dRa0ZCTUVJc05FSkJRVFJDTEhkQ1FVRjNRaXhIUVVGSExIZENRVUYzUWl3MFFrRkJORUlzZDBKQlFYZENMRWRCUVVjc05rTkJRVFpETEhWQ1FVRjFRaXhoUVVGaExHZENRVUZuUWl4cFFrRkJhVUlzYzBKQlFYTkNMR2RDUVVGblFpeHZRa0ZCYjBJc0swSkJRU3RDTEdkRFFVRm5ReXhwUTBGQmFVTXNSMEZCUnl3eVJrRkJNa1lzYVVKQlFXbENMR2xDUVVGcFFpeDVRa0ZCZVVJc1IwRkJSeXh0UlVGQmJVVXNLME5CUVN0RExEUlBRVUUwVHl4bFFVRmxMR2RDUVVGblFpeEhRVUZITERKSFFVRXlSeXdyUTBGQkswTXNORTlCUVRSUExFZEJRVWNzTWtkQlFUSkhMQ3REUVVFclF5dzBUMEZCTkU4c1IwRkJSeXh0UlVGQmJVVXNLME5CUVN0RExEUlBRVUUwVHl4blFrRkJaMElzWlVGQlpTeEhRVUZITERKSFFVRXlSeXdyUTBGQkswTXNORTlCUVRSUExFZEJRVWNzTWtkQlFUSkhMQ3REUVVFclF5dzBUMEZCTkU4c1IwRkJSeXh6UWtGQmMwSXNkVUpCUVhWQ0xIVkNRVUYxUWl3MFFrRkJORUlzYjBKQlFXOUNMRFJEUVVFMFF5eHZRMEZCYjBNc1owSkJRV2RDTEVkQlFVY3NLME5CUVN0RExHVkJRV1VzUjBGQlJ5eDFTRUZCZFVnc2FVSkJRV2xDTEZsQlFWa3NaMEpCUVdkQ0xFZEJRVWNzTmtKQlFUWkNMR1ZCUVdVc1owSkJRV2RDTERCQ1FVRXdRaXgzUWtGQmQwSXNjVUpCUVhGQ0xHbENRVUZwUWl4SFFVRkhMRzFEUVVGdFF5eHBRa0ZCYVVJc1kwRkJZeXhsUVVGbExEWkNRVUUyUWl3MlFrRkJOa0lzTUVKQlFUQkNMSGxDUVVGNVFpdzJRa0ZCTmtJc2NVSkJRWEZDTEVkQlFVY3NNRVJCUVRCRUxHOUNRVUZ2UWl4SFFVRkhMSE5FUVVGelJDeHhRa0ZCY1VJc1IwRkJSeXh2UTBGQmIwTXNaVUZCWlN4M1FrRkJkMElzUjBGQlJ5dzJSRUZCTmtRc2NVSkJRWEZDTEVkQlFVY3NOa1JCUVRaRUxIRkNRVUZ4UWl4SFFVRkhMREpFUVVFeVJDeG5Ra0ZCWjBJc1lVRkJZU3dyUTBGQkswTXNkVU5CUVhWRExFZEJRVWNzY1VaQlFYRkdMR3RDUVVGclFpeHRRa0ZCYlVJc1IwRkJSeXgxUmtGQmRVWXNhMEpCUVd0Q0xFZEJRVWNzSzBKQlFTdENMRzlEUVVGdlF5eDFRa0ZCZFVJc1IwRkJSeXc0UkVGQk9FUXNkMEpCUVhkQ0xIVkNRVUYxUWl4WlFVRlpMRmRCUVZjc1owSkJRV2RDTEdsQ1FVRnBRaXhuUTBGQlowTXNkMEpCUVhkQ0xIVkRRVUYxUXl3clFrRkJLMElzUjBGQlJ5eHZSa0ZCYjBZc2QwTkJRWGRETEdkRFFVRm5ReXhIUVVGSExEaEVRVUU0UkN4blFrRkJaMElzWjBKQlFXZENMRmxCUVZrc1YwRkJWeXhIUVVGSExEUkVRVUUwUkN4bFFVRmxMR2xDUVVGcFFpeFpRVUZaTEZkQlFWY3NSMEZCUnl4MVJFRkJkVVFzZVVOQlFYbERMRWRCUVVjc2MwWkJRWE5HTEhGQ1FVRnhRaXhIUVVGSExITkdRVUZ6Uml4eFFrRkJjVUlzUjBGQlJ5eDNRa0ZCZDBJc1owTkJRV2RETERKQ1FVRXlRaXgzUWtGQmQwSXNSMEZCUnl3NFZFRkJPRlFzZVVOQlFYbERMR2xEUVVGcFF5eEhRVUZITEhWTlFVRjFUU3gxUWtGQmRVSXNXVUZCV1N4WFFVRlhMR2RDUVVGblFpeHBRa0ZCYVVJc2VVSkJRWGxDTEdkQ1FVRm5RaXhIUVVGSExHdEVRVUZyUkN4dlNFRkJiMGdzY1VaQlFYRkdMRWRCUVVjc2JVUkJRVzFFTEc5SVFVRnZTQ3h6UmtGQmMwWXNSMEZCUnl4cFJFRkJhVVFzYzBoQlFYTklMRzlHUVVGdlJpeEhRVUZITEc5RVFVRnZSQ3h6U0VGQmMwZ3NkVVpCUVhWR0xFZEJRVWNzZDBaQlFYZEdMRFJDUVVFMFFpeEhRVUZITEcxRVFVRnRSQ3h6UWtGQmMwSXNSMEZCUnl3clJVRkJLMFVzZVVKQlFYbENMSGREUVVGM1F5eG5RMEZCWjBNc1pVRkJaU3hIUVVGSExESkhRVUV5Unl4NVFrRkJlVUlzUjBGQlJ5eHRUMEZCYlU4c2VVSkJRWGxDTEVkQlFVY3NObHBCUVRaYUxHVkJRV1VzZDBOQlFYZERMR2REUVVGblF5eEhRVUZITEhkRFFVRjNReXgxUWtGQmRVSXNhME5CUVd0RExEQkNRVUV3UWl4blFrRkJaMElzYVVKQlFXbENMRWRCUVVjc05rUkJRVFpFTEhGRFFVRnhReXcyUWtGQk5rSXNSMEZCUnl4dFRVRkJiVTBzZVVKQlFYbENMSGRDUVVGM1FpeEhRVUZITERoRFFVRTRReXgxUWtGQmRVSXNXVUZCV1N4alFVRmpMR2RDUVVGblFpeHBRa0ZCYVVJc2NVSkJRWEZDTEdkQ1FVRm5RaXdyUWtGQkswSXNkVUpCUVhWQ0xHVkJRV1VzUjBGQlJ5eHRSVUZCYlVVc2FVUkJRV2xFTEhsRFFVRjVReXhIUVVGSExIZERRVUYzUXl4NVFrRkJlVUlzZVVOQlFYbERMR2xEUVVGcFF5eEhRVUZITEhORVFVRnpSQ3g1UWtGQmVVSXNSMEZCUnl4clNFRkJhMGdzZVVKQlFYbENMRWRCUVVjc01FSkJRVEJDTEdkQ1FVRm5RaXhwUWtGQmFVSXNlVUpCUVhsQ0xIbENRVUY1UWl4clFrRkJhMElzTmtKQlFUWkNMREJDUVVFd1FpdzBRa0ZCTkVJc09FSkJRVGhDTERKQ1FVRXlRaXgzUWtGQmQwSXNkVUpCUVhWQ0xFZEJRVWNzYVVkQlFXbEhMRzlDUVVGdlFpeHhRa0ZCY1VJc01rSkJRVEpDTERKQ1FVRXlRaXhIUVVGSExIRkNRVUZ4UWl4M1FrRkJkMElzZFVKQlFYVkNMREpDUVVFeVFpeHRRMEZCYlVNc1IwRkJSeXh2UkVGQmIwUXNkVUpCUVhWQ0xHRkJRV0VzWjBKQlFXZENMR2RDUVVGblFpeG5Ra0ZCWjBJc1pVRkJaU3hIUVVGSExHdEVRVUZyUkN4MVFrRkJkVUlzWlVGQlpTeFpRVUZaTEdkQ1FVRm5RaXhsUVVGbExHZENRVUZuUWl4SFFVRkhMREJDUVVFd1FpeHBRa0ZCYVVJc1owSkJRV2RDTEhWQ1FVRjFRaXh0UTBGQmJVTXNkMEpCUVhkQ0xGbEJRVmtzVjBGQlZ5eEhRVUZITEdsRFFVRnBReXhwUWtGQmFVSXNSMEZCUnl3d1FrRkJNRUlzWjBKQlFXZENMR2xDUVVGcFFpeDFRa0ZCZFVJc1kwRkJZeXhoUVVGaExIVkNRVUYxUWl4elFrRkJjMElzWjBKQlFXZENMR3REUVVGclF5d3dRa0ZCTUVJc2QwVkJRWGRGTEdkRlFVRm5SU3hIUVVGSExHZERRVUZuUXl4dFFrRkJiVUlzYTBKQlFXdENMR2RDUVVGblFpeHBRa0ZCYVVJc0swTkJRU3RETEdrMVEwRkJhVFZETERaQ1FVRTJRaXd3UWtGQk1FSXNhVU5CUVdsRExFZEJRVWNzYzBOQlFYTkRMQ3REUVVFclF5dzRORU5CUVRnMFF5eEhRVUZITERSRFFVRTBReXhWUVVGVkxIZERRVUYzUXl4TFFVRkxMRWRCUVVjc2IwTkJRVzlETEZWQlFWVXNkME5CUVhkRExIZERRVUYzUXl4TFFVRkxMRWRCUVVjN08wRkJSVGRvYVVJaUxDSm1hV3hsSWpvaU5qVXVhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKbGVIQnZjblJ6SUQwZ2JXOWtkV3hsTG1WNGNHOXlkSE1nUFNCeVpYRjFhWEpsS0Z3aUxpOHVMaTh1TGk4dUxpOXViMlJsWDIxdlpIVnNaWE12TGpBdU1qTXVNVUJqYzNNdGJHOWhaR1Z5TDJ4cFlpOWpjM010WW1GelpTNXFjMXdpS1NncE8xeHVMeThnYVcxd2IzSjBjMXh1WEc1Y2JpOHZJRzF2WkhWc1pWeHVaWGh3YjNKMGN5NXdkWE5vS0Z0dGIyUjFiR1V1YVdRc0lGd2lMeW9xWEZ4dUlDb2dVM2RwY0dWeUlETXVOQzR5WEZ4dUlDb2dUVzl6ZENCdGIyUmxjbTRnYlc5aWFXeGxJSFJ2ZFdOb0lITnNhV1JsY2lCaGJtUWdabkpoYldWM2IzSnJJSGRwZEdnZ2FHRnlaSGRoY21VZ1lXTmpaV3hsY21GMFpXUWdkSEpoYm5OcGRHbHZibk5jWEc0Z0tpQmNYRzRnS2lCb2RIUndPaTh2ZDNkM0xtbGtZVzVuWlhKdkxuVnpMM04zYVhCbGNpOWNYRzRnS2lCY1hHNGdLaUJEYjNCNWNtbG5hSFFnTWpBeE55d2dWbXhoWkdsdGFYSWdTMmhoY214aGJYQnBaR2xjWEc0Z0tpQlVhR1VnYVVSaGJtZGxjbTh1ZFhOY1hHNGdLaUJvZEhSd09pOHZkM2QzTG1sa1lXNW5aWEp2TG5WekwxeGNiaUFxSUZ4Y2JpQXFJRXhwWTJWdWMyVmtJSFZ1WkdWeUlFMUpWRnhjYmlBcUlGeGNiaUFxSUZKbGJHVmhjMlZrSUc5dU9pQk5ZWEpqYUNBeE1Dd2dNakF4TjF4Y2JpQXFMMXhjYmk1emQybHdaWEl0WTI5dWRHRnBibVZ5SUh0Y1hHNGdJRzFoY21kcGJpMXNaV1owT2lCaGRYUnZPMXhjYmlBZ2JXRnlaMmx1TFhKcFoyaDBPaUJoZFhSdk8xeGNiaUFnY0c5emFYUnBiMjQ2SUhKbGJHRjBhWFpsTzF4Y2JpQWdiM1psY21ac2IzYzZJR2hwWkdSbGJqdGNYRzRnSUhvdGFXNWtaWGc2SURFN1hGeHVmVnhjYmk1emQybHdaWEl0WTI5dWRHRnBibVZ5TFc1dkxXWnNaWGhpYjNnZ0xuTjNhWEJsY2kxemJHbGtaU0I3WEZ4dUlDQm1iRzloZERvZ2JHVm1kRHRjWEc1OVhGeHVMbk4zYVhCbGNpMWpiMjUwWVdsdVpYSXRkbVZ5ZEdsallXd2dQaUF1YzNkcGNHVnlMWGR5WVhCd1pYSWdlMXhjYmlBZ0xYZGxZbXRwZEMxaWIzZ3RiM0pwWlc1ME9pQjJaWEowYVdOaGJEdGNYRzRnSUMxdGN5MW1iR1Y0TFdScGNtVmpkR2x2YmpvZ1kyOXNkVzF1TzF4Y2JpQWdabXhsZUMxa2FYSmxZM1JwYjI0NklHTnZiSFZ0Ymp0Y1hHNTlYRnh1TG5OM2FYQmxjaTEzY21Gd2NHVnlJSHRjWEc0Z0lIQnZjMmwwYVc5dU9pQnlaV3hoZEdsMlpUdGNYRzRnSUhkcFpIUm9PaUF4TURBbE8xeGNiaUFnYUdWcFoyaDBPaUF4TURBbE8xeGNiaUFnZWkxcGJtUmxlRG9nTVR0Y1hHNGdJR1JwYzNCc1lYazZJQzEzWldKcmFYUXRZbTk0TzF4Y2JpQWdaR2x6Y0d4aGVUb2dMVzF6TFdac1pYaGliM2c3WEZ4dUlDQmthWE53YkdGNU9pQm1iR1Y0TzF4Y2JpQWdMWGRsWW10cGRDMTBjbUZ1YzJsMGFXOXVMWEJ5YjNCbGNuUjVPaUF0ZDJWaWEybDBMWFJ5WVc1elptOXliVHRjWEc0Z0lIUnlZVzV6YVhScGIyNHRjSEp2Y0dWeWRIazZJQzEzWldKcmFYUXRkSEpoYm5ObWIzSnRPMXhjYmlBZ2RISmhibk5wZEdsdmJpMXdjbTl3WlhKMGVUb2dkSEpoYm5ObWIzSnRPMXhjYmlBZ2RISmhibk5wZEdsdmJpMXdjbTl3WlhKMGVUb2dkSEpoYm5ObWIzSnRMQ0F0ZDJWaWEybDBMWFJ5WVc1elptOXliVHRjWEc0Z0lDMTNaV0pyYVhRdFltOTRMWE5wZW1sdVp6b2dZMjl1ZEdWdWRDMWliM2c3WEZ4dUlDQmliM2d0YzJsNmFXNW5PaUJqYjI1MFpXNTBMV0p2ZUR0Y1hHNTlYRnh1TG5OM2FYQmxjaTFqYjI1MFlXbHVaWEl0WVc1a2NtOXBaQ0F1YzNkcGNHVnlMWE5zYVdSbExGeGNiaTV6ZDJsd1pYSXRkM0poY0hCbGNpQjdYRnh1SUNBdGQyVmlhMmwwTFhSeVlXNXpabTl5YlRvZ2RISmhibk5zWVhSbE0yUW9NQ3dnTUN3Z01DazdYRnh1SUNCMGNtRnVjMlp2Y20wNklIUnlZVzV6YkdGMFpUTmtLREFzSURBc0lEQXBPMXhjYm4xY1hHNHVjM2RwY0dWeUxXTnZiblJoYVc1bGNpMXRkV3gwYVhKdmR5QStJQzV6ZDJsd1pYSXRkM0poY0hCbGNpQjdYRnh1SUNBdGQyVmlhMmwwTFdKdmVDMXNhVzVsY3pvZ2JYVnNkR2x3YkdVN1hGeHVJQ0F0Ylc5NkxXSnZlQzFzYVc1bGN6b2diWFZzZEdsd2JHVTdYRnh1SUNBdGJYTXRabXhsZUMxM2NtRndPaUIzY21Gd08xeGNiaUFnWm14bGVDMTNjbUZ3T2lCM2NtRndPMXhjYm4xY1hHNHVjM2RwY0dWeUxXTnZiblJoYVc1bGNpMW1jbVZsTFcxdlpHVWdQaUF1YzNkcGNHVnlMWGR5WVhCd1pYSWdlMXhjYmlBZ0xYZGxZbXRwZEMxMGNtRnVjMmwwYVc5dUxYUnBiV2x1WnkxbWRXNWpkR2x2YmpvZ1pXRnpaUzF2ZFhRN1hGeHVJQ0IwY21GdWMybDBhVzl1TFhScGJXbHVaeTFtZFc1amRHbHZiam9nWldGelpTMXZkWFE3WEZ4dUlDQnRZWEpuYVc0NklEQWdZWFYwYnp0Y1hHNTlYRnh1TG5OM2FYQmxjaTF6Ykdsa1pTQjdYRnh1SUNBdGQyVmlhMmwwTFdac1pYZ3RjMmh5YVc1ck9pQXdPMXhjYmlBZ0xXMXpMV1pzWlhnNklEQWdNQ0JoZFhSdk8xeGNiaUFnTFcxekxXWnNaWGd0Ym1WbllYUnBkbVU2SURBN1hGeHVJQ0FnSUNBZ1pteGxlQzF6YUhKcGJtczZJREE3WEZ4dUlDQjNhV1IwYURvZ01UQXdKVHRjWEc0Z0lHaGxhV2RvZERvZ01UQXdKVHRjWEc0Z0lIQnZjMmwwYVc5dU9pQnlaV3hoZEdsMlpUdGNYRzU5WEZ4dUxuTjNhWEJsY2kxamIyNTBZV2x1WlhJdFlYVjBiMmhsYVdkb2RDeGNYRzR1YzNkcGNHVnlMV052Ym5SaGFXNWxjaTFoZFhSdmFHVnBaMmgwSUM1emQybHdaWEl0YzJ4cFpHVWdlMXhjYmlBZ2FHVnBaMmgwT2lCaGRYUnZPMXhjYm4xY1hHNHVjM2RwY0dWeUxXTnZiblJoYVc1bGNpMWhkWFJ2YUdWcFoyaDBJQzV6ZDJsd1pYSXRkM0poY0hCbGNpQjdYRnh1SUNBdGQyVmlhMmwwTFdKdmVDMWhiR2xuYmpvZ2MzUmhjblE3WEZ4dUlDQXRiWE10Wm14bGVDMWhiR2xuYmpvZ2MzUmhjblE3WEZ4dUlDQmhiR2xuYmkxcGRHVnRjem9nWm14bGVDMXpkR0Z5ZER0Y1hHNGdJQzEzWldKcmFYUXRkSEpoYm5OcGRHbHZiaTF3Y205d1pYSjBlVG9nTFhkbFltdHBkQzEwY21GdWMyWnZjbTBzSUdobGFXZG9kRHRjWEc0Z0lDMTNaV0pyYVhRdGRISmhibk5wZEdsdmJpMXdjbTl3WlhKMGVUb2dhR1ZwWjJoMExDQXRkMlZpYTJsMExYUnlZVzV6Wm05eWJUdGNYRzRnSUhSeVlXNXphWFJwYjI0dGNISnZjR1Z5ZEhrNklHaGxhV2RvZEN3Z0xYZGxZbXRwZEMxMGNtRnVjMlp2Y20wN1hGeHVJQ0IwY21GdWMybDBhVzl1TFhCeWIzQmxjblI1T2lCMGNtRnVjMlp2Y20wc0lHaGxhV2RvZER0Y1hHNGdJSFJ5WVc1emFYUnBiMjR0Y0hKdmNHVnlkSGs2SUhSeVlXNXpabTl5YlN3Z2FHVnBaMmgwTENBdGQyVmlhMmwwTFhSeVlXNXpabTl5YlR0Y1hHNTlYRnh1TG5OM2FYQmxjaTFqYjI1MFlXbHVaWElnTG5OM2FYQmxjaTF1YjNScFptbGpZWFJwYjI0Z2UxeGNiaUFnY0c5emFYUnBiMjQ2SUdGaWMyOXNkWFJsTzF4Y2JpQWdiR1ZtZERvZ01EdGNYRzRnSUhSdmNEb2dNRHRjWEc0Z0lIQnZhVzUwWlhJdFpYWmxiblJ6T2lCdWIyNWxPMXhjYmlBZ2IzQmhZMmwwZVRvZ01EdGNYRzRnSUhvdGFXNWtaWGc2SUMweE1EQXdPMXhjYm4xY1hHNHVjM2RwY0dWeUxYZHdPQzFvYjNKcGVtOXVkR0ZzSUh0Y1hHNGdJQzF0Y3kxMGIzVmphQzFoWTNScGIyNDZJSEJoYmkxNU8xeGNiaUFnZEc5MVkyZ3RZV04wYVc5dU9pQndZVzR0ZVR0Y1hHNTlYRnh1TG5OM2FYQmxjaTEzY0RndGRtVnlkR2xqWVd3Z2UxeGNiaUFnTFcxekxYUnZkV05vTFdGamRHbHZiam9nY0dGdUxYZzdYRnh1SUNCMGIzVmphQzFoWTNScGIyNDZJSEJoYmkxNE8xeGNibjFjWEc0dWMzZHBjR1Z5TFdKMWRIUnZiaTF1WlhoMExGeGNiaTV6ZDJsd1pYSXRZblYwZEc5dUxYQnlaWFlnZTF4Y2JpQWdjRzl6YVhScGIyNDZJR0ZpYzI5c2RYUmxPMXhjYmlBZ2RHOXdPaUExTUNVN1hGeHVJQ0IzYVdSMGFEb2dNamR3ZUR0Y1hHNGdJR2hsYVdkb2REb2dORFJ3ZUR0Y1hHNGdJRzFoY21kcGJpMTBiM0E2SUMweU1uQjRPMXhjYmlBZ2VpMXBibVJsZURvZ01UQTdYRnh1SUNCamRYSnpiM0k2SUhCdmFXNTBaWEk3WEZ4dUlDQmlZV05yWjNKdmRXNWtMWE5wZW1VNklESTNjSGdnTkRSd2VEdGNYRzRnSUdKaFkydG5jbTkxYm1RdGNHOXphWFJwYjI0NklHTmxiblJsY2p0Y1hHNGdJR0poWTJ0bmNtOTFibVF0Y21Wd1pXRjBPaUJ1YnkxeVpYQmxZWFE3WEZ4dWZWeGNiaTV6ZDJsd1pYSXRZblYwZEc5dUxXNWxlSFF1YzNkcGNHVnlMV0oxZEhSdmJpMWthWE5oWW14bFpDeGNYRzR1YzNkcGNHVnlMV0oxZEhSdmJpMXdjbVYyTG5OM2FYQmxjaTFpZFhSMGIyNHRaR2x6WVdKc1pXUWdlMXhjYmlBZ2IzQmhZMmwwZVRvZ0xqTTFPMXhjYmlBZ1kzVnljMjl5T2lCaGRYUnZPMXhjYmlBZ2NHOXBiblJsY2kxbGRtVnVkSE02SUc1dmJtVTdYRnh1ZlZ4Y2JpNXpkMmx3WlhJdFluVjBkRzl1TFhCeVpYWXNYRnh1TG5OM2FYQmxjaTFqYjI1MFlXbHVaWEl0Y25Sc0lDNXpkMmx3WlhJdFluVjBkRzl1TFc1bGVIUWdlMXhjYmlBZ1ltRmphMmR5YjNWdVpDMXBiV0ZuWlRvZ2RYSnNLRnhjWENKa1lYUmhPbWx0WVdkbEwzTjJaeXQ0Yld3N1kyaGhjbk5sZEQxMWRHWXRPQ3dsTTBOemRtY2xNakI0Yld4dWN5VXpSQ2RvZEhSd0pUTkJKVEpHSlRKR2QzZDNMbmN6TG05eVp5VXlSakl3TURBbE1rWnpkbWNuSlRJd2RtbGxkMEp2ZUNVelJDY3dKVEl3TUNVeU1ESTNKVEl3TkRRbkpUTkZKVE5EY0dGMGFDVXlNR1FsTTBRblRUQWxNa015TWt3eU1pVXlRekJzTWk0eEpUSkRNaTR4VERRdU1pVXlRekl5YkRFNUxqa2xNa014T1M0NVRESXlKVEpETkRSTU1DVXlRekl5VERBbE1rTXlNa3d3SlRKRE1qSjZKeVV5TUdacGJHd2xNMFFuSlRJek1EQTNZV1ptSnlVeVJpVXpSU1V6UXlVeVJuTjJaeVV6UlZ4Y1hDSXBPMXhjYmlBZ2JHVm1kRG9nTVRCd2VEdGNYRzRnSUhKcFoyaDBPaUJoZFhSdk8xeGNibjFjWEc0dWMzZHBjR1Z5TFdKMWRIUnZiaTF3Y21WMkxuTjNhWEJsY2kxaWRYUjBiMjR0WW14aFkyc3NYRnh1TG5OM2FYQmxjaTFqYjI1MFlXbHVaWEl0Y25Sc0lDNXpkMmx3WlhJdFluVjBkRzl1TFc1bGVIUXVjM2RwY0dWeUxXSjFkSFJ2YmkxaWJHRmpheUI3WEZ4dUlDQmlZV05yWjNKdmRXNWtMV2x0WVdkbE9pQjFjbXdvWEZ4Y0ltUmhkR0U2YVcxaFoyVXZjM1puSzNodGJEdGphR0Z5YzJWMFBYVjBaaTA0TENVelEzTjJaeVV5TUhodGJHNXpKVE5FSjJoMGRIQWxNMEVsTWtZbE1rWjNkM2N1ZHpNdWIzSm5KVEpHTWpBd01DVXlSbk4yWnljbE1qQjJhV1YzUW05NEpUTkVKekFsTWpBd0pUSXdNamNsTWpBME5DY2xNMFVsTTBOd1lYUm9KVEl3WkNVelJDZE5NQ1V5UXpJeVRESXlKVEpETUd3eUxqRWxNa015TGpGTU5DNHlKVEpETWpKc01Ua3VPU1V5UXpFNUxqbE1NaklsTWtNME5Fd3dKVEpETWpKTU1DVXlRekl5VERBbE1rTXlNbm9uSlRJd1ptbHNiQ1V6UkNjbE1qTXdNREF3TURBbkpUSkdKVE5GSlROREpUSkdjM1puSlRORlhGeGNJaWs3WEZ4dWZWeGNiaTV6ZDJsd1pYSXRZblYwZEc5dUxYQnlaWFl1YzNkcGNHVnlMV0oxZEhSdmJpMTNhR2wwWlN4Y1hHNHVjM2RwY0dWeUxXTnZiblJoYVc1bGNpMXlkR3dnTG5OM2FYQmxjaTFpZFhSMGIyNHRibVY0ZEM1emQybHdaWEl0WW5WMGRHOXVMWGRvYVhSbElIdGNYRzRnSUdKaFkydG5jbTkxYm1RdGFXMWhaMlU2SUhWeWJDaGNYRndpWkdGMFlUcHBiV0ZuWlM5emRtY3JlRzFzTzJOb1lYSnpaWFE5ZFhSbUxUZ3NKVE5EYzNabkpUSXdlRzFzYm5NbE0wUW5hSFIwY0NVelFTVXlSaVV5Um5kM2R5NTNNeTV2Y21jbE1rWXlNREF3SlRKR2MzWm5KeVV5TUhacFpYZENiM2dsTTBRbk1DVXlNREFsTWpBeU55VXlNRFEwSnlVelJTVXpRM0JoZEdnbE1qQmtKVE5FSjAwd0pUSkRNakpNTWpJbE1rTXdiREl1TVNVeVF6SXVNVXcwTGpJbE1rTXlNbXd4T1M0NUpUSkRNVGt1T1V3eU1pVXlRelEwVERBbE1rTXlNa3d3SlRKRE1qSk1NQ1V5UXpJeWVpY2xNakJtYVd4c0pUTkVKeVV5TTJabVptWm1aaWNsTWtZbE0wVWxNME1sTWtaemRtY2xNMFZjWEZ3aUtUdGNYRzU5WEZ4dUxuTjNhWEJsY2kxaWRYUjBiMjR0Ym1WNGRDeGNYRzR1YzNkcGNHVnlMV052Ym5SaGFXNWxjaTF5ZEd3Z0xuTjNhWEJsY2kxaWRYUjBiMjR0Y0hKbGRpQjdYRnh1SUNCaVlXTnJaM0p2ZFc1a0xXbHRZV2RsT2lCMWNtd29YRnhjSW1SaGRHRTZhVzFoWjJVdmMzWm5LM2h0YkR0amFHRnljMlYwUFhWMFppMDRMQ1V6UTNOMlp5VXlNSGh0Ykc1ekpUTkVKMmgwZEhBbE0wRWxNa1lsTWtaM2QzY3Vkek11YjNKbkpUSkdNakF3TUNVeVJuTjJaeWNsTWpCMmFXVjNRbTk0SlRORUp6QWxNakF3SlRJd01qY2xNakEwTkNjbE0wVWxNME53WVhSb0pUSXdaQ1V6UkNkTk1qY2xNa015TWt3eU55VXlRekl5VERVbE1rTTBOR3d0TWk0eExUSXVNVXd5TWk0NEpUSkRNakpNTWk0NUpUSkRNaTR4VERVbE1rTXdUREkzSlRKRE1qSk1NamNsTWtNeU1ub25KVEl3Wm1sc2JDVXpSQ2NsTWpNd01EZGhabVluSlRKR0pUTkZKVE5ESlRKR2MzWm5KVE5GWEZ4Y0lpazdYRnh1SUNCeWFXZG9kRG9nTVRCd2VEdGNYRzRnSUd4bFpuUTZJR0YxZEc4N1hGeHVmVnhjYmk1emQybHdaWEl0WW5WMGRHOXVMVzVsZUhRdWMzZHBjR1Z5TFdKMWRIUnZiaTFpYkdGamF5eGNYRzR1YzNkcGNHVnlMV052Ym5SaGFXNWxjaTF5ZEd3Z0xuTjNhWEJsY2kxaWRYUjBiMjR0Y0hKbGRpNXpkMmx3WlhJdFluVjBkRzl1TFdKc1lXTnJJSHRjWEc0Z0lHSmhZMnRuY205MWJtUXRhVzFoWjJVNklIVnliQ2hjWEZ3aVpHRjBZVHBwYldGblpTOXpkbWNyZUcxc08yTm9ZWEp6WlhROWRYUm1MVGdzSlRORGMzWm5KVEl3ZUcxc2JuTWxNMFFuYUhSMGNDVXpRU1V5UmlVeVJuZDNkeTUzTXk1dmNtY2xNa1l5TURBd0pUSkdjM1puSnlVeU1IWnBaWGRDYjNnbE0wUW5NQ1V5TURBbE1qQXlOeVV5TURRMEp5VXpSU1V6UTNCaGRHZ2xNakJrSlRORUowMHlOeVV5UXpJeVRESTNKVEpETWpKTU5TVXlRelEwYkMweUxqRXRNaTR4VERJeUxqZ2xNa015TWt3eUxqa2xNa015TGpGTU5TVXlRekJNTWpjbE1rTXlNa3d5TnlVeVF6SXllaWNsTWpCbWFXeHNKVE5FSnlVeU16QXdNREF3TUNjbE1rWWxNMFVsTTBNbE1rWnpkbWNsTTBWY1hGd2lLVHRjWEc1OVhGeHVMbk4zYVhCbGNpMWlkWFIwYjI0dGJtVjRkQzV6ZDJsd1pYSXRZblYwZEc5dUxYZG9hWFJsTEZ4Y2JpNXpkMmx3WlhJdFkyOXVkR0ZwYm1WeUxYSjBiQ0F1YzNkcGNHVnlMV0oxZEhSdmJpMXdjbVYyTG5OM2FYQmxjaTFpZFhSMGIyNHRkMmhwZEdVZ2UxeGNiaUFnWW1GamEyZHliM1Z1WkMxcGJXRm5aVG9nZFhKc0tGeGNYQ0prWVhSaE9tbHRZV2RsTDNOMlp5dDRiV3c3WTJoaGNuTmxkRDExZEdZdE9Dd2xNME56ZG1jbE1qQjRiV3h1Y3lVelJDZG9kSFJ3SlROQkpUSkdKVEpHZDNkM0xuY3pMbTl5WnlVeVJqSXdNREFsTWtaemRtY25KVEl3ZG1sbGQwSnZlQ1V6UkNjd0pUSXdNQ1V5TURJM0pUSXdORFFuSlRORkpUTkRjR0YwYUNVeU1HUWxNMFFuVFRJM0pUSkRNakpNTWpjbE1rTXlNa3cxSlRKRE5EUnNMVEl1TVMweUxqRk1Nakl1T0NVeVF6SXlUREl1T1NVeVF6SXVNVXcxSlRKRE1Fd3lOeVV5UXpJeVRESTNKVEpETWpKNkp5VXlNR1pwYkd3bE0wUW5KVEl6Wm1abVptWm1KeVV5UmlVelJTVXpReVV5Um5OMlp5VXpSVnhjWENJcE8xeGNibjFjWEc0dWMzZHBjR1Z5TFhCaFoybHVZWFJwYjI0Z2UxeGNiaUFnY0c5emFYUnBiMjQ2SUdGaWMyOXNkWFJsTzF4Y2JpQWdkR1Y0ZEMxaGJHbG5iam9nWTJWdWRHVnlPMXhjYmlBZ0xYZGxZbXRwZEMxMGNtRnVjMmwwYVc5dU9pQXVNM003WEZ4dUlDQjBjbUZ1YzJsMGFXOXVPaUF1TTNNN1hGeHVJQ0F0ZDJWaWEybDBMWFJ5WVc1elptOXliVG9nZEhKaGJuTnNZWFJsTTJRb01Dd2dNQ3dnTUNrN1hGeHVJQ0IwY21GdWMyWnZjbTA2SUhSeVlXNXpiR0YwWlROa0tEQXNJREFzSURBcE8xeGNiaUFnZWkxcGJtUmxlRG9nTVRBN1hGeHVmVnhjYmk1emQybHdaWEl0Y0dGbmFXNWhkR2x2Ymk1emQybHdaWEl0Y0dGbmFXNWhkR2x2Ymkxb2FXUmtaVzRnZTF4Y2JpQWdiM0JoWTJsMGVUb2dNRHRjWEc1OVhGeHVMbk4zYVhCbGNpMWpiMjUwWVdsdVpYSXRhRzl5YVhwdmJuUmhiQ0ErSUM1emQybHdaWEl0Y0dGbmFXNWhkR2x2YmkxaWRXeHNaWFJ6TEZ4Y2JpNXpkMmx3WlhJdGNHRm5hVzVoZEdsdmJpMWpkWE4wYjIwc1hGeHVMbk4zYVhCbGNpMXdZV2RwYm1GMGFXOXVMV1p5WVdOMGFXOXVJSHRjWEc0Z0lHSnZkSFJ2YlRvZ01UQndlRHRjWEc0Z0lHeGxablE2SURBN1hGeHVJQ0IzYVdSMGFEb2dNVEF3SlR0Y1hHNTlYRnh1TG5OM2FYQmxjaTF3WVdkcGJtRjBhVzl1TFdKMWJHeGxkQ0I3WEZ4dUlDQjNhV1IwYURvZ09IQjRPMXhjYmlBZ2FHVnBaMmgwT2lBNGNIZzdYRnh1SUNCa2FYTndiR0Y1T2lCcGJteHBibVV0WW14dlkyczdYRnh1SUNCaWIzSmtaWEl0Y21Ga2FYVnpPaUF4TURBbE8xeGNiaUFnWW1GamEyZHliM1Z1WkRvZ0l6QXdNRHRjWEc0Z0lHOXdZV05wZEhrNklEQXVNanRjWEc1OVhGeHVZblYwZEc5dUxuTjNhWEJsY2kxd1lXZHBibUYwYVc5dUxXSjFiR3hsZENCN1hGeHVJQ0JpYjNKa1pYSTZJRzV2Ym1VN1hGeHVJQ0J0WVhKbmFXNDZJREE3WEZ4dUlDQndZV1JrYVc1bk9pQXdPMXhjYmlBZ0xYZGxZbXRwZEMxaWIzZ3RjMmhoWkc5M09pQnViMjVsTzF4Y2JpQWdJQ0FnSUNBZ0lDQmliM2d0YzJoaFpHOTNPaUJ1YjI1bE8xeGNiaUFnTFcxdmVpMWhjSEJsWVhKaGJtTmxPaUJ1YjI1bE8xeGNiaUFnTFcxekxXRndjR1ZoY21GdVkyVTZJRzV2Ym1VN1hGeHVJQ0F0ZDJWaWEybDBMV0Z3Y0dWaGNtRnVZMlU2SUc1dmJtVTdYRnh1SUNCaGNIQmxZWEpoYm1ObE9pQnViMjVsTzF4Y2JuMWNYRzR1YzNkcGNHVnlMWEJoWjJsdVlYUnBiMjR0WTJ4cFkydGhZbXhsSUM1emQybHdaWEl0Y0dGbmFXNWhkR2x2YmkxaWRXeHNaWFFnZTF4Y2JpQWdZM1Z5YzI5eU9pQndiMmx1ZEdWeU8xeGNibjFjWEc0dWMzZHBjR1Z5TFhCaFoybHVZWFJwYjI0dGQyaHBkR1VnTG5OM2FYQmxjaTF3WVdkcGJtRjBhVzl1TFdKMWJHeGxkQ0I3WEZ4dUlDQmlZV05yWjNKdmRXNWtPaUFqWm1abU8xeGNibjFjWEc0dWMzZHBjR1Z5TFhCaFoybHVZWFJwYjI0dFluVnNiR1YwTFdGamRHbDJaU0I3WEZ4dUlDQnZjR0ZqYVhSNU9pQXhPMXhjYmlBZ1ltRmphMmR5YjNWdVpEb2dJekF3TjJGbVpqdGNYRzU5WEZ4dUxuTjNhWEJsY2kxd1lXZHBibUYwYVc5dUxYZG9hWFJsSUM1emQybHdaWEl0Y0dGbmFXNWhkR2x2YmkxaWRXeHNaWFF0WVdOMGFYWmxJSHRjWEc0Z0lHSmhZMnRuY205MWJtUTZJQ05tWm1ZN1hGeHVmVnhjYmk1emQybHdaWEl0Y0dGbmFXNWhkR2x2YmkxaWJHRmpheUF1YzNkcGNHVnlMWEJoWjJsdVlYUnBiMjR0WW5Wc2JHVjBMV0ZqZEdsMlpTQjdYRnh1SUNCaVlXTnJaM0p2ZFc1a09pQWpNREF3TzF4Y2JuMWNYRzR1YzNkcGNHVnlMV052Ym5SaGFXNWxjaTEyWlhKMGFXTmhiQ0ErSUM1emQybHdaWEl0Y0dGbmFXNWhkR2x2YmkxaWRXeHNaWFJ6SUh0Y1hHNGdJSEpwWjJoME9pQXhNSEI0TzF4Y2JpQWdkRzl3T2lBMU1DVTdYRnh1SUNBdGQyVmlhMmwwTFhSeVlXNXpabTl5YlRvZ2RISmhibk5zWVhSbE0yUW9NQ3dnTFRVd0pTd2dNQ2s3WEZ4dUlDQjBjbUZ1YzJadmNtMDZJSFJ5WVc1emJHRjBaVE5rS0RBc0lDMDFNQ1VzSURBcE8xeGNibjFjWEc0dWMzZHBjR1Z5TFdOdmJuUmhhVzVsY2kxMlpYSjBhV05oYkNBK0lDNXpkMmx3WlhJdGNHRm5hVzVoZEdsdmJpMWlkV3hzWlhSeklDNXpkMmx3WlhJdGNHRm5hVzVoZEdsdmJpMWlkV3hzWlhRZ2UxeGNiaUFnYldGeVoybHVPaUExY0hnZ01EdGNYRzRnSUdScGMzQnNZWGs2SUdKc2IyTnJPMXhjYm4xY1hHNHVjM2RwY0dWeUxXTnZiblJoYVc1bGNpMW9iM0pwZW05dWRHRnNJRDRnTG5OM2FYQmxjaTF3WVdkcGJtRjBhVzl1TFdKMWJHeGxkSE1nTG5OM2FYQmxjaTF3WVdkcGJtRjBhVzl1TFdKMWJHeGxkQ0I3WEZ4dUlDQnRZWEpuYVc0NklEQWdOWEI0TzF4Y2JuMWNYRzR1YzNkcGNHVnlMWEJoWjJsdVlYUnBiMjR0Y0hKdlozSmxjM01nZTF4Y2JpQWdZbUZqYTJkeWIzVnVaRG9nY21kaVlTZ3dMQ0F3TENBd0xDQXdMakkxS1R0Y1hHNGdJSEJ2YzJsMGFXOXVPaUJoWW5OdmJIVjBaVHRjWEc1OVhGeHVMbk4zYVhCbGNpMXdZV2RwYm1GMGFXOXVMWEJ5YjJkeVpYTnpJQzV6ZDJsd1pYSXRjR0ZuYVc1aGRHbHZiaTF3Y205bmNtVnpjMkpoY2lCN1hGeHVJQ0JpWVdOclozSnZkVzVrT2lBak1EQTNZV1ptTzF4Y2JpQWdjRzl6YVhScGIyNDZJR0ZpYzI5c2RYUmxPMXhjYmlBZ2JHVm1kRG9nTUR0Y1hHNGdJSFJ2Y0RvZ01EdGNYRzRnSUhkcFpIUm9PaUF4TURBbE8xeGNiaUFnYUdWcFoyaDBPaUF4TURBbE8xeGNiaUFnTFhkbFltdHBkQzEwY21GdWMyWnZjbTA2SUhOallXeGxLREFwTzF4Y2JpQWdkSEpoYm5ObWIzSnRPaUJ6WTJGc1pTZ3dLVHRjWEc0Z0lDMTNaV0pyYVhRdGRISmhibk5tYjNKdExXOXlhV2RwYmpvZ2JHVm1kQ0IwYjNBN1hGeHVJQ0IwY21GdWMyWnZjbTB0YjNKcFoybHVPaUJzWldaMElIUnZjRHRjWEc1OVhGeHVMbk4zYVhCbGNpMWpiMjUwWVdsdVpYSXRjblJzSUM1emQybHdaWEl0Y0dGbmFXNWhkR2x2Ymkxd2NtOW5jbVZ6Y3lBdWMzZHBjR1Z5TFhCaFoybHVZWFJwYjI0dGNISnZaM0psYzNOaVlYSWdlMXhjYmlBZ0xYZGxZbXRwZEMxMGNtRnVjMlp2Y20wdGIzSnBaMmx1T2lCeWFXZG9kQ0IwYjNBN1hGeHVJQ0IwY21GdWMyWnZjbTB0YjNKcFoybHVPaUJ5YVdkb2RDQjBiM0E3WEZ4dWZWeGNiaTV6ZDJsd1pYSXRZMjl1ZEdGcGJtVnlMV2h2Y21sNmIyNTBZV3dnUGlBdWMzZHBjR1Z5TFhCaFoybHVZWFJwYjI0dGNISnZaM0psYzNNZ2UxeGNiaUFnZDJsa2RHZzZJREV3TUNVN1hGeHVJQ0JvWldsbmFIUTZJRFJ3ZUR0Y1hHNGdJR3hsWm5RNklEQTdYRnh1SUNCMGIzQTZJREE3WEZ4dWZWeGNiaTV6ZDJsd1pYSXRZMjl1ZEdGcGJtVnlMWFpsY25ScFkyRnNJRDRnTG5OM2FYQmxjaTF3WVdkcGJtRjBhVzl1TFhCeWIyZHlaWE56SUh0Y1hHNGdJSGRwWkhSb09pQTBjSGc3WEZ4dUlDQm9aV2xuYUhRNklERXdNQ1U3WEZ4dUlDQnNaV1owT2lBd08xeGNiaUFnZEc5d09pQXdPMXhjYm4xY1hHNHVjM2RwY0dWeUxYQmhaMmx1WVhScGIyNHRjSEp2WjNKbGMzTXVjM2RwY0dWeUxYQmhaMmx1WVhScGIyNHRkMmhwZEdVZ2UxeGNiaUFnWW1GamEyZHliM1Z1WkRvZ2NtZGlZU2d5TlRVc0lESTFOU3dnTWpVMUxDQXdMalVwTzF4Y2JuMWNYRzR1YzNkcGNHVnlMWEJoWjJsdVlYUnBiMjR0Y0hKdlozSmxjM011YzNkcGNHVnlMWEJoWjJsdVlYUnBiMjR0ZDJocGRHVWdMbk4zYVhCbGNpMXdZV2RwYm1GMGFXOXVMWEJ5YjJkeVpYTnpZbUZ5SUh0Y1hHNGdJR0poWTJ0bmNtOTFibVE2SUNObVptWTdYRnh1ZlZ4Y2JpNXpkMmx3WlhJdGNHRm5hVzVoZEdsdmJpMXdjbTluY21WemN5NXpkMmx3WlhJdGNHRm5hVzVoZEdsdmJpMWliR0ZqYXlBdWMzZHBjR1Z5TFhCaFoybHVZWFJwYjI0dGNISnZaM0psYzNOaVlYSWdlMXhjYmlBZ1ltRmphMmR5YjNWdVpEb2dJekF3TUR0Y1hHNTlYRnh1TG5OM2FYQmxjaTFqYjI1MFlXbHVaWEl0TTJRZ2UxeGNiaUFnTFhkbFltdHBkQzF3WlhKemNHVmpkR2wyWlRvZ01USXdNSEI0TzF4Y2JpQWdMVzh0Y0dWeWMzQmxZM1JwZG1VNklERXlNREJ3ZUR0Y1hHNGdJSEJsY25Od1pXTjBhWFpsT2lBeE1qQXdjSGc3WEZ4dWZWeGNiaTV6ZDJsd1pYSXRZMjl1ZEdGcGJtVnlMVE5rSUM1emQybHdaWEl0WTNWaVpTMXphR0ZrYjNjc1hGeHVMbk4zYVhCbGNpMWpiMjUwWVdsdVpYSXRNMlFnTG5OM2FYQmxjaTF6Ykdsa1pTeGNYRzR1YzNkcGNHVnlMV052Ym5SaGFXNWxjaTB6WkNBdWMzZHBjR1Z5TFhOc2FXUmxMWE5vWVdSdmR5MWliM1IwYjIwc1hGeHVMbk4zYVhCbGNpMWpiMjUwWVdsdVpYSXRNMlFnTG5OM2FYQmxjaTF6Ykdsa1pTMXphR0ZrYjNjdGJHVm1kQ3hjWEc0dWMzZHBjR1Z5TFdOdmJuUmhhVzVsY2kwelpDQXVjM2RwY0dWeUxYTnNhV1JsTFhOb1lXUnZkeTF5YVdkb2RDeGNYRzR1YzNkcGNHVnlMV052Ym5SaGFXNWxjaTB6WkNBdWMzZHBjR1Z5TFhOc2FXUmxMWE5vWVdSdmR5MTBiM0FzWEZ4dUxuTjNhWEJsY2kxamIyNTBZV2x1WlhJdE0yUWdMbk4zYVhCbGNpMTNjbUZ3Y0dWeUlIdGNYRzRnSUMxM1pXSnJhWFF0ZEhKaGJuTm1iM0p0TFhOMGVXeGxPaUJ3Y21WelpYSjJaUzB6WkR0Y1hHNGdJSFJ5WVc1elptOXliUzF6ZEhsc1pUb2djSEpsYzJWeWRtVXRNMlE3WEZ4dWZWeGNiaTV6ZDJsd1pYSXRZMjl1ZEdGcGJtVnlMVE5rSUM1emQybHdaWEl0YzJ4cFpHVXRjMmhoWkc5M0xXSnZkSFJ2YlN4Y1hHNHVjM2RwY0dWeUxXTnZiblJoYVc1bGNpMHpaQ0F1YzNkcGNHVnlMWE5zYVdSbExYTm9ZV1J2ZHkxc1pXWjBMRnhjYmk1emQybHdaWEl0WTI5dWRHRnBibVZ5TFROa0lDNXpkMmx3WlhJdGMyeHBaR1V0YzJoaFpHOTNMWEpwWjJoMExGeGNiaTV6ZDJsd1pYSXRZMjl1ZEdGcGJtVnlMVE5rSUM1emQybHdaWEl0YzJ4cFpHVXRjMmhoWkc5M0xYUnZjQ0I3WEZ4dUlDQndiM05wZEdsdmJqb2dZV0p6YjJ4MWRHVTdYRnh1SUNCc1pXWjBPaUF3TzF4Y2JpQWdkRzl3T2lBd08xeGNiaUFnZDJsa2RHZzZJREV3TUNVN1hGeHVJQ0JvWldsbmFIUTZJREV3TUNVN1hGeHVJQ0J3YjJsdWRHVnlMV1YyWlc1MGN6b2dibTl1WlR0Y1hHNGdJSG90YVc1a1pYZzZJREV3TzF4Y2JuMWNYRzR1YzNkcGNHVnlMV052Ym5SaGFXNWxjaTB6WkNBdWMzZHBjR1Z5TFhOc2FXUmxMWE5vWVdSdmR5MXNaV1owSUh0Y1hHNGdJR0poWTJ0bmNtOTFibVF0YVcxaFoyVTZJQzEzWldKcmFYUXRaM0poWkdsbGJuUW9iR2x1WldGeUxDQnlhV2RvZENCMGIzQXNJR3hsWm5RZ2RHOXdMQ0JtY205dEtISm5ZbUVvTUN3Z01Dd2dNQ3dnTUM0MUtTa3NJSFJ2S0hKblltRW9NQ3dnTUN3Z01Dd2dNQ2twS1R0Y1hHNGdJR0poWTJ0bmNtOTFibVF0YVcxaFoyVTZJR3hwYm1WaGNpMW5jbUZrYVdWdWRDaDBieUJzWldaMExDQnlaMkpoS0RBc0lEQXNJREFzSURBdU5Ta3NJSEpuWW1Fb01Dd2dNQ3dnTUN3Z01Da3BPMXhjYm4xY1hHNHVjM2RwY0dWeUxXTnZiblJoYVc1bGNpMHpaQ0F1YzNkcGNHVnlMWE5zYVdSbExYTm9ZV1J2ZHkxeWFXZG9kQ0I3WEZ4dUlDQmlZV05yWjNKdmRXNWtMV2x0WVdkbE9pQXRkMlZpYTJsMExXZHlZV1JwWlc1MEtHeHBibVZoY2l3Z2JHVm1kQ0IwYjNBc0lISnBaMmgwSUhSdmNDd2dabkp2YlNoeVoySmhLREFzSURBc0lEQXNJREF1TlNrcExDQjBieWh5WjJKaEtEQXNJREFzSURBc0lEQXBLU2s3WEZ4dUlDQmlZV05yWjNKdmRXNWtMV2x0WVdkbE9pQnNhVzVsWVhJdFozSmhaR2xsYm5Rb2RHOGdjbWxuYUhRc0lISm5ZbUVvTUN3Z01Dd2dNQ3dnTUM0MUtTd2djbWRpWVNnd0xDQXdMQ0F3TENBd0tTazdYRnh1ZlZ4Y2JpNXpkMmx3WlhJdFkyOXVkR0ZwYm1WeUxUTmtJQzV6ZDJsd1pYSXRjMnhwWkdVdGMyaGhaRzkzTFhSdmNDQjdYRnh1SUNCaVlXTnJaM0p2ZFc1a0xXbHRZV2RsT2lBdGQyVmlhMmwwTFdkeVlXUnBaVzUwS0d4cGJtVmhjaXdnYkdWbWRDQmliM1IwYjIwc0lHeGxablFnZEc5d0xDQm1jbTl0S0hKblltRW9NQ3dnTUN3Z01Dd2dNQzQxS1Nrc0lIUnZLSEpuWW1Fb01Dd2dNQ3dnTUN3Z01Da3BLVHRjWEc0Z0lHSmhZMnRuY205MWJtUXRhVzFoWjJVNklHeHBibVZoY2kxbmNtRmthV1Z1ZENoMGJ5QjBiM0FzSUhKblltRW9NQ3dnTUN3Z01Dd2dNQzQxS1N3Z2NtZGlZU2d3TENBd0xDQXdMQ0F3S1NrN1hGeHVmVnhjYmk1emQybHdaWEl0WTI5dWRHRnBibVZ5TFROa0lDNXpkMmx3WlhJdGMyeHBaR1V0YzJoaFpHOTNMV0p2ZEhSdmJTQjdYRnh1SUNCaVlXTnJaM0p2ZFc1a0xXbHRZV2RsT2lBdGQyVmlhMmwwTFdkeVlXUnBaVzUwS0d4cGJtVmhjaXdnYkdWbWRDQjBiM0FzSUd4bFpuUWdZbTkwZEc5dExDQm1jbTl0S0hKblltRW9NQ3dnTUN3Z01Dd2dNQzQxS1Nrc0lIUnZLSEpuWW1Fb01Dd2dNQ3dnTUN3Z01Da3BLVHRjWEc0Z0lHSmhZMnRuY205MWJtUXRhVzFoWjJVNklHeHBibVZoY2kxbmNtRmthV1Z1ZENoMGJ5QmliM1IwYjIwc0lISm5ZbUVvTUN3Z01Dd2dNQ3dnTUM0MUtTd2djbWRpWVNnd0xDQXdMQ0F3TENBd0tTazdYRnh1ZlZ4Y2JpNXpkMmx3WlhJdFkyOXVkR0ZwYm1WeUxXTnZkbVZ5Wm14dmR5QXVjM2RwY0dWeUxYZHlZWEJ3WlhJc1hGeHVMbk4zYVhCbGNpMWpiMjUwWVdsdVpYSXRabXhwY0NBdWMzZHBjR1Z5TFhkeVlYQndaWElnZTF4Y2JpQWdMVzF6TFhCbGNuTndaV04wYVhabE9pQXhNakF3Y0hnN1hGeHVmVnhjYmk1emQybHdaWEl0WTI5dWRHRnBibVZ5TFdOMVltVXNYRnh1TG5OM2FYQmxjaTFqYjI1MFlXbHVaWEl0Wm14cGNDQjdYRnh1SUNCdmRtVnlabXh2ZHpvZ2RtbHphV0pzWlR0Y1hHNTlYRnh1TG5OM2FYQmxjaTFqYjI1MFlXbHVaWEl0WTNWaVpTQXVjM2RwY0dWeUxYTnNhV1JsTEZ4Y2JpNXpkMmx3WlhJdFkyOXVkR0ZwYm1WeUxXWnNhWEFnTG5OM2FYQmxjaTF6Ykdsa1pTQjdYRnh1SUNCd2IybHVkR1Z5TFdWMlpXNTBjem9nYm05dVpUdGNYRzRnSUMxM1pXSnJhWFF0WW1GamEyWmhZMlV0ZG1semFXSnBiR2wwZVRvZ2FHbGtaR1Z1TzF4Y2JpQWdZbUZqYTJaaFkyVXRkbWx6YVdKcGJHbDBlVG9nYUdsa1pHVnVPMXhjYmlBZ2VpMXBibVJsZURvZ01UdGNYRzU5WEZ4dUxuTjNhWEJsY2kxamIyNTBZV2x1WlhJdFkzVmlaU0F1YzNkcGNHVnlMWE5zYVdSbElDNXpkMmx3WlhJdGMyeHBaR1VzWEZ4dUxuTjNhWEJsY2kxamIyNTBZV2x1WlhJdFpteHBjQ0F1YzNkcGNHVnlMWE5zYVdSbElDNXpkMmx3WlhJdGMyeHBaR1VnZTF4Y2JpQWdjRzlwYm5SbGNpMWxkbVZ1ZEhNNklHNXZibVU3WEZ4dWZWeGNiaTV6ZDJsd1pYSXRZMjl1ZEdGcGJtVnlMV04xWW1VZ0xuTjNhWEJsY2kxemJHbGtaUzFoWTNScGRtVXNYRnh1TG5OM2FYQmxjaTFqYjI1MFlXbHVaWEl0WTNWaVpTQXVjM2RwY0dWeUxYTnNhV1JsTFdGamRHbDJaU0F1YzNkcGNHVnlMWE5zYVdSbExXRmpkR2wyWlN4Y1hHNHVjM2RwY0dWeUxXTnZiblJoYVc1bGNpMW1iR2x3SUM1emQybHdaWEl0YzJ4cFpHVXRZV04wYVhabExGeGNiaTV6ZDJsd1pYSXRZMjl1ZEdGcGJtVnlMV1pzYVhBZ0xuTjNhWEJsY2kxemJHbGtaUzFoWTNScGRtVWdMbk4zYVhCbGNpMXpiR2xrWlMxaFkzUnBkbVVnZTF4Y2JpQWdjRzlwYm5SbGNpMWxkbVZ1ZEhNNklHRjFkRzg3WEZ4dWZWeGNiaTV6ZDJsd1pYSXRZMjl1ZEdGcGJtVnlMV04xWW1VZ0xuTjNhWEJsY2kxemJHbGtaUzF6YUdGa2IzY3RZbTkwZEc5dExGeGNiaTV6ZDJsd1pYSXRZMjl1ZEdGcGJtVnlMV04xWW1VZ0xuTjNhWEJsY2kxemJHbGtaUzF6YUdGa2IzY3RiR1ZtZEN4Y1hHNHVjM2RwY0dWeUxXTnZiblJoYVc1bGNpMWpkV0psSUM1emQybHdaWEl0YzJ4cFpHVXRjMmhoWkc5M0xYSnBaMmgwTEZ4Y2JpNXpkMmx3WlhJdFkyOXVkR0ZwYm1WeUxXTjFZbVVnTG5OM2FYQmxjaTF6Ykdsa1pTMXphR0ZrYjNjdGRHOXdMRnhjYmk1emQybHdaWEl0WTI5dWRHRnBibVZ5TFdac2FYQWdMbk4zYVhCbGNpMXpiR2xrWlMxemFHRmtiM2N0WW05MGRHOXRMRnhjYmk1emQybHdaWEl0WTI5dWRHRnBibVZ5TFdac2FYQWdMbk4zYVhCbGNpMXpiR2xrWlMxemFHRmtiM2N0YkdWbWRDeGNYRzR1YzNkcGNHVnlMV052Ym5SaGFXNWxjaTFtYkdsd0lDNXpkMmx3WlhJdGMyeHBaR1V0YzJoaFpHOTNMWEpwWjJoMExGeGNiaTV6ZDJsd1pYSXRZMjl1ZEdGcGJtVnlMV1pzYVhBZ0xuTjNhWEJsY2kxemJHbGtaUzF6YUdGa2IzY3RkRzl3SUh0Y1hHNGdJSG90YVc1a1pYZzZJREE3WEZ4dUlDQXRkMlZpYTJsMExXSmhZMnRtWVdObExYWnBjMmxpYVd4cGRIazZJR2hwWkdSbGJqdGNYRzRnSUdKaFkydG1ZV05sTFhacGMybGlhV3hwZEhrNklHaHBaR1JsYmp0Y1hHNTlYRnh1TG5OM2FYQmxjaTFqYjI1MFlXbHVaWEl0WTNWaVpTQXVjM2RwY0dWeUxYTnNhV1JsSUh0Y1hHNGdJSFpwYzJsaWFXeHBkSGs2SUdocFpHUmxianRjWEc0Z0lDMTNaV0pyYVhRdGRISmhibk5tYjNKdExXOXlhV2RwYmpvZ01DQXdPMXhjYmlBZ2RISmhibk5tYjNKdExXOXlhV2RwYmpvZ01DQXdPMXhjYmlBZ2QybGtkR2c2SURFd01DVTdYRnh1SUNCb1pXbG5hSFE2SURFd01DVTdYRnh1ZlZ4Y2JpNXpkMmx3WlhJdFkyOXVkR0ZwYm1WeUxXTjFZbVV1YzNkcGNHVnlMV052Ym5SaGFXNWxjaTF5ZEd3Z0xuTjNhWEJsY2kxemJHbGtaU0I3WEZ4dUlDQXRkMlZpYTJsMExYUnlZVzV6Wm05eWJTMXZjbWxuYVc0NklERXdNQ1VnTUR0Y1hHNGdJSFJ5WVc1elptOXliUzF2Y21sbmFXNDZJREV3TUNVZ01EdGNYRzU5WEZ4dUxuTjNhWEJsY2kxamIyNTBZV2x1WlhJdFkzVmlaU0F1YzNkcGNHVnlMWE5zYVdSbExXRmpkR2wyWlN4Y1hHNHVjM2RwY0dWeUxXTnZiblJoYVc1bGNpMWpkV0psSUM1emQybHdaWEl0YzJ4cFpHVXRibVY0ZEN4Y1hHNHVjM2RwY0dWeUxXTnZiblJoYVc1bGNpMWpkV0psSUM1emQybHdaWEl0YzJ4cFpHVXRibVY0ZENBcklDNXpkMmx3WlhJdGMyeHBaR1VzWEZ4dUxuTjNhWEJsY2kxamIyNTBZV2x1WlhJdFkzVmlaU0F1YzNkcGNHVnlMWE5zYVdSbExYQnlaWFlnZTF4Y2JpQWdjRzlwYm5SbGNpMWxkbVZ1ZEhNNklHRjFkRzg3WEZ4dUlDQjJhWE5wWW1sc2FYUjVPaUIyYVhOcFlteGxPMXhjYm4xY1hHNHVjM2RwY0dWeUxXTnZiblJoYVc1bGNpMWpkV0psSUM1emQybHdaWEl0WTNWaVpTMXphR0ZrYjNjZ2UxeGNiaUFnY0c5emFYUnBiMjQ2SUdGaWMyOXNkWFJsTzF4Y2JpQWdiR1ZtZERvZ01EdGNYRzRnSUdKdmRIUnZiVG9nTUR0Y1hHNGdJSGRwWkhSb09pQXhNREFsTzF4Y2JpQWdhR1ZwWjJoME9pQXhNREFsTzF4Y2JpQWdZbUZqYTJkeWIzVnVaRG9nSXpBd01EdGNYRzRnSUc5d1lXTnBkSGs2SUM0Mk8xeGNiaUFnTFhkbFltdHBkQzFtYVd4MFpYSTZJR0pzZFhJb05UQndlQ2s3WEZ4dUlDQm1hV3gwWlhJNklHSnNkWElvTlRCd2VDazdYRnh1SUNCNkxXbHVaR1Y0T2lBd08xeGNibjFjWEc0dWMzZHBjR1Z5TFdOdmJuUmhhVzVsY2kxbVlXUmxMbk4zYVhCbGNpMWpiMjUwWVdsdVpYSXRabkpsWlMxdGIyUmxJQzV6ZDJsd1pYSXRjMnhwWkdVZ2UxeGNiaUFnTFhkbFltdHBkQzEwY21GdWMybDBhVzl1TFhScGJXbHVaeTFtZFc1amRHbHZiam9nWldGelpTMXZkWFE3WEZ4dUlDQjBjbUZ1YzJsMGFXOXVMWFJwYldsdVp5MW1kVzVqZEdsdmJqb2daV0Z6WlMxdmRYUTdYRnh1ZlZ4Y2JpNXpkMmx3WlhJdFkyOXVkR0ZwYm1WeUxXWmhaR1VnTG5OM2FYQmxjaTF6Ykdsa1pTQjdYRnh1SUNCd2IybHVkR1Z5TFdWMlpXNTBjem9nYm05dVpUdGNYRzRnSUMxM1pXSnJhWFF0ZEhKaGJuTnBkR2x2Ymkxd2NtOXdaWEowZVRvZ2IzQmhZMmwwZVR0Y1hHNGdJSFJ5WVc1emFYUnBiMjR0Y0hKdmNHVnlkSGs2SUc5d1lXTnBkSGs3WEZ4dWZWeGNiaTV6ZDJsd1pYSXRZMjl1ZEdGcGJtVnlMV1poWkdVZ0xuTjNhWEJsY2kxemJHbGtaU0F1YzNkcGNHVnlMWE5zYVdSbElIdGNYRzRnSUhCdmFXNTBaWEl0WlhabGJuUnpPaUJ1YjI1bE8xeGNibjFjWEc0dWMzZHBjR1Z5TFdOdmJuUmhhVzVsY2kxbVlXUmxJQzV6ZDJsd1pYSXRjMnhwWkdVdFlXTjBhWFpsTEZ4Y2JpNXpkMmx3WlhJdFkyOXVkR0ZwYm1WeUxXWmhaR1VnTG5OM2FYQmxjaTF6Ykdsa1pTMWhZM1JwZG1VZ0xuTjNhWEJsY2kxemJHbGtaUzFoWTNScGRtVWdlMXhjYmlBZ2NHOXBiblJsY2kxbGRtVnVkSE02SUdGMWRHODdYRnh1ZlZ4Y2JpNXpkMmx3WlhJdGVtOXZiUzFqYjI1MFlXbHVaWElnZTF4Y2JpQWdkMmxrZEdnNklERXdNQ1U3WEZ4dUlDQm9aV2xuYUhRNklERXdNQ1U3WEZ4dUlDQmthWE53YkdGNU9pQXRkMlZpYTJsMExXSnZlRHRjWEc0Z0lHUnBjM0JzWVhrNklDMXRjeTFtYkdWNFltOTRPMXhjYmlBZ1pHbHpjR3hoZVRvZ1pteGxlRHRjWEc0Z0lDMTNaV0pyYVhRdFltOTRMWEJoWTJzNklHTmxiblJsY2p0Y1hHNGdJQzF0Y3kxbWJHVjRMWEJoWTJzNklHTmxiblJsY2p0Y1hHNGdJR3AxYzNScFpua3RZMjl1ZEdWdWREb2dZMlZ1ZEdWeU8xeGNiaUFnTFhkbFltdHBkQzFpYjNndFlXeHBaMjQ2SUdObGJuUmxjanRjWEc0Z0lDMXRjeTFtYkdWNExXRnNhV2R1T2lCalpXNTBaWEk3WEZ4dUlDQmhiR2xuYmkxcGRHVnRjem9nWTJWdWRHVnlPMXhjYmlBZ2RHVjRkQzFoYkdsbmJqb2dZMlZ1ZEdWeU8xeGNibjFjWEc0dWMzZHBjR1Z5TFhwdmIyMHRZMjl1ZEdGcGJtVnlJRDRnWTJGdWRtRnpMRnhjYmk1emQybHdaWEl0ZW05dmJTMWpiMjUwWVdsdVpYSWdQaUJwYldjc1hGeHVMbk4zYVhCbGNpMTZiMjl0TFdOdmJuUmhhVzVsY2lBK0lITjJaeUI3WEZ4dUlDQnRZWGd0ZDJsa2RHZzZJREV3TUNVN1hGeHVJQ0J0WVhndGFHVnBaMmgwT2lBeE1EQWxPMXhjYmlBZ0xXOHRiMkpxWldOMExXWnBkRG9nWTI5dWRHRnBianRjWEc0Z0lDQWdJRzlpYW1WamRDMW1hWFE2SUdOdmJuUmhhVzQ3WEZ4dWZWeGNiaTV6ZDJsd1pYSXRjMk55YjJ4c1ltRnlJSHRjWEc0Z0lHSnZjbVJsY2kxeVlXUnBkWE02SURFd2NIZzdYRnh1SUNCd2IzTnBkR2x2YmpvZ2NtVnNZWFJwZG1VN1hGeHVJQ0F0YlhNdGRHOTFZMmd0WVdOMGFXOXVPaUJ1YjI1bE8xeGNiaUFnWW1GamEyZHliM1Z1WkRvZ2NtZGlZU2d3TENBd0xDQXdMQ0F3TGpFcE8xeGNibjFjWEc0dWMzZHBjR1Z5TFdOdmJuUmhhVzVsY2kxb2IzSnBlbTl1ZEdGc0lENGdMbk4zYVhCbGNpMXpZM0p2Ykd4aVlYSWdlMXhjYmlBZ2NHOXphWFJwYjI0NklHRmljMjlzZFhSbE8xeGNiaUFnYkdWbWREb2dNU1U3WEZ4dUlDQmliM1IwYjIwNklETndlRHRjWEc0Z0lIb3RhVzVrWlhnNklEVXdPMXhjYmlBZ2FHVnBaMmgwT2lBMWNIZzdYRnh1SUNCM2FXUjBhRG9nT1RnbE8xeGNibjFjWEc0dWMzZHBjR1Z5TFdOdmJuUmhhVzVsY2kxMlpYSjBhV05oYkNBK0lDNXpkMmx3WlhJdGMyTnliMnhzWW1GeUlIdGNYRzRnSUhCdmMybDBhVzl1T2lCaFluTnZiSFYwWlR0Y1hHNGdJSEpwWjJoME9pQXpjSGc3WEZ4dUlDQjBiM0E2SURFbE8xeGNiaUFnZWkxcGJtUmxlRG9nTlRBN1hGeHVJQ0IzYVdSMGFEb2dOWEI0TzF4Y2JpQWdhR1ZwWjJoME9pQTVPQ1U3WEZ4dWZWeGNiaTV6ZDJsd1pYSXRjMk55YjJ4c1ltRnlMV1J5WVdjZ2UxeGNiaUFnYUdWcFoyaDBPaUF4TURBbE8xeGNiaUFnZDJsa2RHZzZJREV3TUNVN1hGeHVJQ0J3YjNOcGRHbHZiam9nY21Wc1lYUnBkbVU3WEZ4dUlDQmlZV05yWjNKdmRXNWtPaUJ5WjJKaEtEQXNJREFzSURBc0lEQXVOU2s3WEZ4dUlDQmliM0prWlhJdGNtRmthWFZ6T2lBeE1IQjRPMXhjYmlBZ2JHVm1kRG9nTUR0Y1hHNGdJSFJ2Y0RvZ01EdGNYRzU5WEZ4dUxuTjNhWEJsY2kxelkzSnZiR3hpWVhJdFkzVnljMjl5TFdSeVlXY2dlMXhjYmlBZ1kzVnljMjl5T2lCdGIzWmxPMXhjYm4xY1hHNHVjM2RwY0dWeUxXeGhlbmt0Y0hKbGJHOWhaR1Z5SUh0Y1hHNGdJSGRwWkhSb09pQTBNbkI0TzF4Y2JpQWdhR1ZwWjJoME9pQTBNbkI0TzF4Y2JpQWdjRzl6YVhScGIyNDZJR0ZpYzI5c2RYUmxPMXhjYmlBZ2JHVm1kRG9nTlRBbE8xeGNiaUFnZEc5d09pQTFNQ1U3WEZ4dUlDQnRZWEpuYVc0dGJHVm1kRG9nTFRJeGNIZzdYRnh1SUNCdFlYSm5hVzR0ZEc5d09pQXRNakZ3ZUR0Y1hHNGdJSG90YVc1a1pYZzZJREV3TzF4Y2JpQWdMWGRsWW10cGRDMTBjbUZ1YzJadmNtMHRiM0pwWjJsdU9pQTFNQ1U3WEZ4dUlDQjBjbUZ1YzJadmNtMHRiM0pwWjJsdU9pQTFNQ1U3WEZ4dUlDQXRkMlZpYTJsMExXRnVhVzFoZEdsdmJqb2djM2RwY0dWeUxYQnlaV3h2WVdSbGNpMXpjR2x1SURGeklITjBaWEJ6S0RFeUxDQmxibVFwSUdsdVptbHVhWFJsTzF4Y2JpQWdZVzVwYldGMGFXOXVPaUJ6ZDJsd1pYSXRjSEpsYkc5aFpHVnlMWE53YVc0Z01YTWdjM1JsY0hNb01USXNJR1Z1WkNrZ2FXNW1hVzVwZEdVN1hGeHVmVnhjYmk1emQybHdaWEl0YkdGNmVTMXdjbVZzYjJGa1pYSTZZV1owWlhJZ2UxeGNiaUFnWkdsemNHeGhlVG9nWW14dlkyczdYRnh1SUNCamIyNTBaVzUwT2lCY1hGd2lYRnhjSWp0Y1hHNGdJSGRwWkhSb09pQXhNREFsTzF4Y2JpQWdhR1ZwWjJoME9pQXhNREFsTzF4Y2JpQWdZbUZqYTJkeWIzVnVaQzFwYldGblpUb2dkWEpzS0Z4Y1hDSmtZWFJoT21sdFlXZGxMM04yWnl0NGJXdzdZMmhoY25ObGREMTFkR1l0T0N3bE0wTnpkbWNsTWpCMmFXVjNRbTk0SlRORUp6QWxNakF3SlRJd01USXdKVEl3TVRJd0p5VXlNSGh0Ykc1ekpUTkVKMmgwZEhBbE0wRWxNa1lsTWtaM2QzY3Vkek11YjNKbkpUSkdNakF3TUNVeVJuTjJaeWNsTWpCNGJXeHVjeVV6UVhoc2FXNXJKVE5FSjJoMGRIQWxNMEVsTWtZbE1rWjNkM2N1ZHpNdWIzSm5KVEpHTVRrNU9TVXlSbmhzYVc1ckp5VXpSU1V6UTJSbFpuTWxNMFVsTTBOc2FXNWxKVEl3YVdRbE0wUW5iQ2NsTWpCNE1TVXpSQ2MyTUNjbE1qQjRNaVV6UkNjMk1DY2xNakI1TVNVelJDYzNKeVV5TUhreUpUTkVKekkzSnlVeU1ITjBjbTlyWlNVelJDY2xNak0yWXpaak5tTW5KVEl3YzNSeWIydGxMWGRwWkhSb0pUTkVKekV4SnlVeU1ITjBjbTlyWlMxc2FXNWxZMkZ3SlRORUozSnZkVzVrSnlVeVJpVXpSU1V6UXlVeVJtUmxabk1sTTBVbE0wTm5KVE5GSlRORGRYTmxKVEl3ZUd4cGJtc2xNMEZvY21WbUpUTkVKeVV5TTJ3bkpUSXdiM0JoWTJsMGVTVXpSQ2N1TWpjbkpUSkdKVE5GSlRORGRYTmxKVEl3ZUd4cGJtc2xNMEZvY21WbUpUTkVKeVV5TTJ3bkpUSXdiM0JoWTJsMGVTVXpSQ2N1TWpjbkpUSXdkSEpoYm5ObWIzSnRKVE5FSjNKdmRHRjBaU2d6TUNVeU1EWXdKVEpETmpBcEp5VXlSaVV6UlNVelEzVnpaU1V5TUhoc2FXNXJKVE5CYUhKbFppVXpSQ2NsTWpOc0p5VXlNRzl3WVdOcGRIa2xNMFFuTGpJM0p5VXlNSFJ5WVc1elptOXliU1V6UkNkeWIzUmhkR1VvTmpBbE1qQTJNQ1V5UXpZd0tTY2xNa1lsTTBVbE0wTjFjMlVsTWpCNGJHbHVheVV6UVdoeVpXWWxNMFFuSlRJemJDY2xNakJ2Y0dGamFYUjVKVE5FSnk0eU55Y2xNakIwY21GdWMyWnZjbTBsTTBRbmNtOTBZWFJsS0Rrd0pUSXdOakFsTWtNMk1Da25KVEpHSlRORkpUTkRkWE5sSlRJd2VHeHBibXNsTTBGb2NtVm1KVE5FSnlVeU0yd25KVEl3YjNCaFkybDBlU1V6UkNjdU1qY25KVEl3ZEhKaGJuTm1iM0p0SlRORUozSnZkR0YwWlNneE1qQWxNakEyTUNVeVF6WXdLU2NsTWtZbE0wVWxNME4xYzJVbE1qQjRiR2x1YXlVelFXaHlaV1lsTTBRbkpUSXpiQ2NsTWpCdmNHRmphWFI1SlRORUp5NHlOeWNsTWpCMGNtRnVjMlp2Y20wbE0wUW5jbTkwWVhSbEtERTFNQ1V5TURZd0pUSkROakFwSnlVeVJpVXpSU1V6UTNWelpTVXlNSGhzYVc1ckpUTkJhSEpsWmlVelJDY2xNak5zSnlVeU1HOXdZV05wZEhrbE0wUW5Mak0zSnlVeU1IUnlZVzV6Wm05eWJTVXpSQ2R5YjNSaGRHVW9NVGd3SlRJd05qQWxNa00yTUNrbkpUSkdKVE5GSlRORGRYTmxKVEl3ZUd4cGJtc2xNMEZvY21WbUpUTkVKeVV5TTJ3bkpUSXdiM0JoWTJsMGVTVXpSQ2N1TkRZbkpUSXdkSEpoYm5ObWIzSnRKVE5FSjNKdmRHRjBaU2d5TVRBbE1qQTJNQ1V5UXpZd0tTY2xNa1lsTTBVbE0wTjFjMlVsTWpCNGJHbHVheVV6UVdoeVpXWWxNMFFuSlRJemJDY2xNakJ2Y0dGamFYUjVKVE5FSnk0MU5pY2xNakIwY21GdWMyWnZjbTBsTTBRbmNtOTBZWFJsS0RJME1DVXlNRFl3SlRKRE5qQXBKeVV5UmlVelJTVXpRM1Z6WlNVeU1IaHNhVzVySlROQmFISmxaaVV6UkNjbE1qTnNKeVV5TUc5d1lXTnBkSGtsTTBRbkxqWTJKeVV5TUhSeVlXNXpabTl5YlNVelJDZHliM1JoZEdVb01qY3dKVEl3TmpBbE1rTTJNQ2tuSlRKR0pUTkZKVE5EZFhObEpUSXdlR3hwYm1zbE0wRm9jbVZtSlRORUp5VXlNMnduSlRJd2IzQmhZMmwwZVNVelJDY3VOelVuSlRJd2RISmhibk5tYjNKdEpUTkVKM0p2ZEdGMFpTZ3pNREFsTWpBMk1DVXlRell3S1NjbE1rWWxNMFVsTTBOMWMyVWxNakI0YkdsdWF5VXpRV2h5WldZbE0wUW5KVEl6YkNjbE1qQnZjR0ZqYVhSNUpUTkVKeTQ0TlNjbE1qQjBjbUZ1YzJadmNtMGxNMFFuY205MFlYUmxLRE16TUNVeU1EWXdKVEpETmpBcEp5VXlSaVV6UlNVelF5VXlSbWNsTTBVbE0wTWxNa1p6ZG1jbE0wVmNYRndpS1R0Y1hHNGdJR0poWTJ0bmNtOTFibVF0Y0c5emFYUnBiMjQ2SURVd0pUdGNYRzRnSUdKaFkydG5jbTkxYm1RdGMybDZaVG9nTVRBd0pUdGNYRzRnSUdKaFkydG5jbTkxYm1RdGNtVndaV0YwT2lCdWJ5MXlaWEJsWVhRN1hGeHVmVnhjYmk1emQybHdaWEl0YkdGNmVTMXdjbVZzYjJGa1pYSXRkMmhwZEdVNllXWjBaWElnZTF4Y2JpQWdZbUZqYTJkeWIzVnVaQzFwYldGblpUb2dkWEpzS0Z4Y1hDSmtZWFJoT21sdFlXZGxMM04yWnl0NGJXdzdZMmhoY25ObGREMTFkR1l0T0N3bE0wTnpkbWNsTWpCMmFXVjNRbTk0SlRORUp6QWxNakF3SlRJd01USXdKVEl3TVRJd0p5VXlNSGh0Ykc1ekpUTkVKMmgwZEhBbE0wRWxNa1lsTWtaM2QzY3Vkek11YjNKbkpUSkdNakF3TUNVeVJuTjJaeWNsTWpCNGJXeHVjeVV6UVhoc2FXNXJKVE5FSjJoMGRIQWxNMEVsTWtZbE1rWjNkM2N1ZHpNdWIzSm5KVEpHTVRrNU9TVXlSbmhzYVc1ckp5VXpSU1V6UTJSbFpuTWxNMFVsTTBOc2FXNWxKVEl3YVdRbE0wUW5iQ2NsTWpCNE1TVXpSQ2MyTUNjbE1qQjRNaVV6UkNjMk1DY2xNakI1TVNVelJDYzNKeVV5TUhreUpUTkVKekkzSnlVeU1ITjBjbTlyWlNVelJDY2xNak5tWm1ZbkpUSXdjM1J5YjJ0bExYZHBaSFJvSlRORUp6RXhKeVV5TUhOMGNtOXJaUzFzYVc1bFkyRndKVE5FSjNKdmRXNWtKeVV5UmlVelJTVXpReVV5Um1SbFpuTWxNMFVsTTBObkpUTkZKVE5EZFhObEpUSXdlR3hwYm1zbE0wRm9jbVZtSlRORUp5VXlNMnduSlRJd2IzQmhZMmwwZVNVelJDY3VNamNuSlRKR0pUTkZKVE5EZFhObEpUSXdlR3hwYm1zbE0wRm9jbVZtSlRORUp5VXlNMnduSlRJd2IzQmhZMmwwZVNVelJDY3VNamNuSlRJd2RISmhibk5tYjNKdEpUTkVKM0p2ZEdGMFpTZ3pNQ1V5TURZd0pUSkROakFwSnlVeVJpVXpSU1V6UTNWelpTVXlNSGhzYVc1ckpUTkJhSEpsWmlVelJDY2xNak5zSnlVeU1HOXdZV05wZEhrbE0wUW5MakkzSnlVeU1IUnlZVzV6Wm05eWJTVXpSQ2R5YjNSaGRHVW9OakFsTWpBMk1DVXlRell3S1NjbE1rWWxNMFVsTTBOMWMyVWxNakI0YkdsdWF5VXpRV2h5WldZbE0wUW5KVEl6YkNjbE1qQnZjR0ZqYVhSNUpUTkVKeTR5TnljbE1qQjBjbUZ1YzJadmNtMGxNMFFuY205MFlYUmxLRGt3SlRJd05qQWxNa00yTUNrbkpUSkdKVE5GSlRORGRYTmxKVEl3ZUd4cGJtc2xNMEZvY21WbUpUTkVKeVV5TTJ3bkpUSXdiM0JoWTJsMGVTVXpSQ2N1TWpjbkpUSXdkSEpoYm5ObWIzSnRKVE5FSjNKdmRHRjBaU2d4TWpBbE1qQTJNQ1V5UXpZd0tTY2xNa1lsTTBVbE0wTjFjMlVsTWpCNGJHbHVheVV6UVdoeVpXWWxNMFFuSlRJemJDY2xNakJ2Y0dGamFYUjVKVE5FSnk0eU55Y2xNakIwY21GdWMyWnZjbTBsTTBRbmNtOTBZWFJsS0RFMU1DVXlNRFl3SlRKRE5qQXBKeVV5UmlVelJTVXpRM1Z6WlNVeU1IaHNhVzVySlROQmFISmxaaVV6UkNjbE1qTnNKeVV5TUc5d1lXTnBkSGtsTTBRbkxqTTNKeVV5TUhSeVlXNXpabTl5YlNVelJDZHliM1JoZEdVb01UZ3dKVEl3TmpBbE1rTTJNQ2tuSlRKR0pUTkZKVE5EZFhObEpUSXdlR3hwYm1zbE0wRm9jbVZtSlRORUp5VXlNMnduSlRJd2IzQmhZMmwwZVNVelJDY3VORFluSlRJd2RISmhibk5tYjNKdEpUTkVKM0p2ZEdGMFpTZ3lNVEFsTWpBMk1DVXlRell3S1NjbE1rWWxNMFVsTTBOMWMyVWxNakI0YkdsdWF5VXpRV2h5WldZbE0wUW5KVEl6YkNjbE1qQnZjR0ZqYVhSNUpUTkVKeTQxTmljbE1qQjBjbUZ1YzJadmNtMGxNMFFuY205MFlYUmxLREkwTUNVeU1EWXdKVEpETmpBcEp5VXlSaVV6UlNVelEzVnpaU1V5TUhoc2FXNXJKVE5CYUhKbFppVXpSQ2NsTWpOc0p5VXlNRzl3WVdOcGRIa2xNMFFuTGpZMkp5VXlNSFJ5WVc1elptOXliU1V6UkNkeWIzUmhkR1VvTWpjd0pUSXdOakFsTWtNMk1Da25KVEpHSlRORkpUTkRkWE5sSlRJd2VHeHBibXNsTTBGb2NtVm1KVE5FSnlVeU0yd25KVEl3YjNCaFkybDBlU1V6UkNjdU56VW5KVEl3ZEhKaGJuTm1iM0p0SlRORUozSnZkR0YwWlNnek1EQWxNakEyTUNVeVF6WXdLU2NsTWtZbE0wVWxNME4xYzJVbE1qQjRiR2x1YXlVelFXaHlaV1lsTTBRbkpUSXpiQ2NsTWpCdmNHRmphWFI1SlRORUp5NDROU2NsTWpCMGNtRnVjMlp2Y20wbE0wUW5jbTkwWVhSbEtETXpNQ1V5TURZd0pUSkROakFwSnlVeVJpVXpSU1V6UXlVeVJtY2xNMFVsTTBNbE1rWnpkbWNsTTBWY1hGd2lLVHRjWEc1OVhGeHVRQzEzWldKcmFYUXRhMlY1Wm5KaGJXVnpJSE4zYVhCbGNpMXdjbVZzYjJGa1pYSXRjM0JwYmlCN1hGeHVJQ0F4TURBbElIdGNYRzRnSUNBZ0xYZGxZbXRwZEMxMGNtRnVjMlp2Y20wNklISnZkR0YwWlNnek5qQmtaV2NwTzF4Y2JpQWdmVnhjYm4xY1hHNUFhMlY1Wm5KaGJXVnpJSE4zYVhCbGNpMXdjbVZzYjJGa1pYSXRjM0JwYmlCN1hGeHVJQ0F4TURBbElIdGNYRzRnSUNBZ0xYZGxZbXRwZEMxMGNtRnVjMlp2Y20wNklISnZkR0YwWlNnek5qQmtaV2NwTzF4Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJ5WVc1elptOXliVG9nY205MFlYUmxLRE0yTUdSbFp5azdYRnh1SUNCOVhGeHVmVnhjYmx3aUxDQmNJbHdpWFNrN1hHNWNiaTh2SUdWNGNHOXlkSE5jYmx4dVhHNWNiaTh2THk4dkx5OHZMeTh2THk4dkx5OHZMMXh1THk4Z1YwVkNVRUZEU3lCR1QwOVVSVkpjYmk4dklHUTZMM2RsWWk5dWIyUmxYMjF2WkhWc1pYTXZMakF1TWpNdU1VQmpjM010Ykc5aFpHVnlJV1E2TDNkbFlpOXViMlJsWDIxdlpIVnNaWE12Y0c5emRHTnpjeTFzYjJGa1pYSXZiR2xpUDN0OUlXUTZMM2RsWWk5dWIyUmxYMjF2WkhWc1pYTXZMakl1TWk0elFHeGxjM010Ykc5aFpHVnlJUzR2YzNKakwzTjNhWEJsY2k1dGFXNHVZM056WEc0dkx5QnRiMlIxYkdVZ2FXUWdQU0EyTlZ4dUx5OGdiVzlrZFd4bElHTm9kVzVyY3lBOUlEQWlYU3dpYzI5MWNtTmxVbTl2ZENJNklpSjlcXG4vLyMgc291cmNlVVJMPXdlYnBhY2staW50ZXJuYWw6Ly8vNjVcXG5cIik7XG5cbi8qKiovIH0pLFxuLyogNjYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuZXZhbChcIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXFxuXFxuLy8gbG9hZCB0aGUgc3R5bGVzXFxudmFyIGNvbnRlbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY3KTtcXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pLCBjb250ZW50LCAnJ11dO1xcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cXG52YXIgdXBkYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKShjb250ZW50LCB7fSk7XFxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XFxuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxcbmlmKGZhbHNlKSB7XFxuXFx0Ly8gV2hlbiB0aGUgc3R5bGVzIGNoYW5nZSwgdXBkYXRlIHRoZSA8c3R5bGU+IHRhZ3NcXG5cXHRpZighY29udGVudC5sb2NhbHMpIHtcXG5cXHRcXHRtb2R1bGUuaG90LmFjY2VwdChcXFwiISEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8uMC4yMy4xQGNzcy1sb2FkZXIvaW5kZXguanMhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTAtMiEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8uMi4yLjNAbGVzcy1sb2FkZXIvaW5kZXguanMhLi9zbWlsZS5sZXNzXFxcIiwgZnVuY3Rpb24oKSB7XFxuXFx0XFx0XFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFxcXCIhIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy4wLjIzLjFAY3NzLWxvYWRlci9pbmRleC5qcyEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9saWIvaW5kZXguanM/P3JlZi0tMC0yIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy4yLjIuM0BsZXNzLWxvYWRlci9pbmRleC5qcyEuL3NtaWxlLmxlc3NcXFwiKTtcXG5cXHRcXHRcXHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcXG5cXHRcXHRcXHR1cGRhdGUobmV3Q29udGVudCk7XFxuXFx0XFx0fSk7XFxuXFx0fVxcblxcdC8vIFdoZW4gdGhlIG1vZHVsZSBpcyBkaXNwb3NlZCwgcmVtb3ZlIHRoZSA8c3R5bGU+IHRhZ3NcXG5cXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcXG59Ly8jIHNvdXJjZVVSTD1bbW9kdWxlXVxcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OHZMaTl6Y21NdmMyMXBiR1V1YkdWemN6ODNNVEl3SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc0swTkJRVGhHTzBGQlF6bEdPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRWRCUVVjN1FVRkRTRHRCUVVOQk8wRkJRMEVzWjBOQlFXZERMRlZCUVZVc1JVRkJSVHRCUVVNMVF5SXNJbVpwYkdVaU9pSTJOaTVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpOHZJSE4wZVd4bExXeHZZV1JsY2pvZ1FXUmtjeUJ6YjIxbElHTnpjeUIwYnlCMGFHVWdSRTlOSUdKNUlHRmtaR2x1WnlCaElEeHpkSGxzWlQ0Z2RHRm5YRzVjYmk4dklHeHZZV1FnZEdobElITjBlV3hsYzF4dWRtRnlJR052Ym5SbGJuUWdQU0J5WlhGMWFYSmxLRndpSVNFdUx5NHVMeTR1THk0dUwyNXZaR1ZmYlc5a2RXeGxjeTh1TUM0eU15NHhRR056Y3kxc2IyRmtaWEl2YVc1a1pYZ3Vhbk1oTGk4dUxpOHVMaTh1TGk5dWIyUmxYMjF2WkhWc1pYTXZjRzl6ZEdOemN5MXNiMkZrWlhJdmJHbGlMMmx1WkdWNExtcHpQejl5WldZdExUQXRNaUV1THk0dUx5NHVMeTR1TDI1dlpHVmZiVzlrZFd4bGN5OHVNaTR5TGpOQWJHVnpjeTFzYjJGa1pYSXZhVzVrWlhndWFuTWhMaTl6Yldsc1pTNXNaWE56WENJcE8xeHVhV1lvZEhsd1pXOW1JR052Ym5SbGJuUWdQVDA5SUNkemRISnBibWNuS1NCamIyNTBaVzUwSUQwZ1cxdHRiMlIxYkdVdWFXUXNJR052Ym5SbGJuUXNJQ2NuWFYwN1hHNHZMeUJoWkdRZ2RHaGxJSE4wZVd4bGN5QjBieUIwYUdVZ1JFOU5YRzUyWVhJZ2RYQmtZWFJsSUQwZ2NtVnhkV2x5WlNoY0lpRXVMeTR1THk0dUx5NHVMMjV2WkdWZmJXOWtkV3hsY3k4dU1DNHhNeTR4UUhOMGVXeGxMV3h2WVdSbGNpOWhaR1JUZEhsc1pYTXVhbk5jSWlrb1kyOXVkR1Z1ZEN3Z2UzMHBPMXh1YVdZb1kyOXVkR1Z1ZEM1c2IyTmhiSE1wSUcxdlpIVnNaUzVsZUhCdmNuUnpJRDBnWTI5dWRHVnVkQzVzYjJOaGJITTdYRzR2THlCSWIzUWdUVzlrZFd4bElGSmxjR3hoWTJWdFpXNTBYRzVwWmlodGIyUjFiR1V1YUc5MEtTQjdYRzVjZEM4dklGZG9aVzRnZEdobElITjBlV3hsY3lCamFHRnVaMlVzSUhWd1pHRjBaU0IwYUdVZ1BITjBlV3hsUGlCMFlXZHpYRzVjZEdsbUtDRmpiMjUwWlc1MExteHZZMkZzY3lrZ2UxeHVYSFJjZEcxdlpIVnNaUzVvYjNRdVlXTmpaWEIwS0Z3aUlTRXVMeTR1THk0dUx5NHVMMjV2WkdWZmJXOWtkV3hsY3k4dU1DNHlNeTR4UUdOemN5MXNiMkZrWlhJdmFXNWtaWGd1YW5NaExpOHVMaTh1TGk4dUxpOXViMlJsWDIxdlpIVnNaWE12Y0c5emRHTnpjeTFzYjJGa1pYSXZiR2xpTDJsdVpHVjRMbXB6UHo5eVpXWXRMVEF0TWlFdUx5NHVMeTR1THk0dUwyNXZaR1ZmYlc5a2RXeGxjeTh1TWk0eUxqTkFiR1Z6Y3kxc2IyRmtaWEl2YVc1a1pYZ3Vhbk1oTGk5emJXbHNaUzVzWlhOelhDSXNJR1oxYm1OMGFXOXVLQ2tnZTF4dVhIUmNkRngwZG1GeUlHNWxkME52Ym5SbGJuUWdQU0J5WlhGMWFYSmxLRndpSVNFdUx5NHVMeTR1THk0dUwyNXZaR1ZmYlc5a2RXeGxjeTh1TUM0eU15NHhRR056Y3kxc2IyRmtaWEl2YVc1a1pYZ3Vhbk1oTGk4dUxpOHVMaTh1TGk5dWIyUmxYMjF2WkhWc1pYTXZjRzl6ZEdOemN5MXNiMkZrWlhJdmJHbGlMMmx1WkdWNExtcHpQejl5WldZdExUQXRNaUV1THk0dUx5NHVMeTR1TDI1dlpHVmZiVzlrZFd4bGN5OHVNaTR5TGpOQWJHVnpjeTFzYjJGa1pYSXZhVzVrWlhndWFuTWhMaTl6Yldsc1pTNXNaWE56WENJcE8xeHVYSFJjZEZ4MGFXWW9kSGx3Wlc5bUlHNWxkME52Ym5SbGJuUWdQVDA5SUNkemRISnBibWNuS1NCdVpYZERiMjUwWlc1MElEMGdXMXR0YjJSMWJHVXVhV1FzSUc1bGQwTnZiblJsYm5Rc0lDY25YVjA3WEc1Y2RGeDBYSFIxY0dSaGRHVW9ibVYzUTI5dWRHVnVkQ2s3WEc1Y2RGeDBmU2s3WEc1Y2RIMWNibHgwTHk4Z1YyaGxiaUIwYUdVZ2JXOWtkV3hsSUdseklHUnBjM0J2YzJWa0xDQnlaVzF2ZG1VZ2RHaGxJRHh6ZEhsc1pUNGdkR0ZuYzF4dVhIUnRiMlIxYkdVdWFHOTBMbVJwYzNCdmMyVW9ablZ1WTNScGIyNG9LU0I3SUhWd1pHRjBaU2dwT3lCOUtUdGNibjFjYmx4dVhHNHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OWNiaTh2SUZkRlFsQkJRMHNnUms5UFZFVlNYRzR2THlBdUwzTnlZeTl6Yldsc1pTNXNaWE56WEc0dkx5QnRiMlIxYkdVZ2FXUWdQU0EyTmx4dUx5OGdiVzlrZFd4bElHTm9kVzVyY3lBOUlEQWlYU3dpYzI5MWNtTmxVbTl2ZENJNklpSjlcXG4vLyMgc291cmNlVVJMPXdlYnBhY2staW50ZXJuYWw6Ly8vNjZcXG5cIik7XG5cbi8qKiovIH0pLFxuLyogNjcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuZXZhbChcImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMCkoKTtcXG4vLyBpbXBvcnRzXFxuXFxuXFxuLy8gbW9kdWxlXFxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaSwgXFxcIi5zbWlsZS1vdm8ge1xcXFxuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xcXFxuICB3aWR0aDogMzBweDtcXFxcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcXFxufVxcXFxuc21pbGUtcGFuZWwge1xcXFxuICBkaXNwbGF5OiBibG9jaztcXFxcbiAgbWFyZ2luOiAwO1xcXFxuICBwYWRkaW5nOiAwO1xcXFxuICBib3JkZXI6IG5vbmU7XFxcXG4gIGhlaWdodDogMTYwcHg7XFxcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxcXG4gIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7XFxcXG4gICAgIC1tb3otdXNlci1zZWxlY3Q6IG5vbmU7XFxcXG4gICAgICAtbXMtdXNlci1zZWxlY3Q6IG5vbmU7XFxcXG4gICAgICAgICAgdXNlci1zZWxlY3Q6IG5vbmU7XFxcXG59XFxcXG5zbWlsZS1wYW5lbCAuc21pbGUtcGFuZWxfX2dyb3VwcyB7XFxcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxcXG4gIC13ZWJraXQtYm94LXNpemluZzogYm9yZGVyLWJveDtcXFxcbiAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcXFxuICBwYWRkaW5nOiAwIDUlO1xcXFxuICBtYXJnaW46IDAgYXV0bztcXFxcbn1cXFxcbnNtaWxlLXBhbmVsIC5zbWlsZS1wYW5lbF9fZ3JvdXBzIGxpIHtcXFxcbiAgd2lkdGg6IDMwcHg7XFxcXG4gIGhlaWdodDogMzBweDtcXFxcbiAgYm9yZGVyOiBub25lO1xcXFxuICBtYXJnaW46IDIlIDIuNzYlIDtcXFxcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFxcXCIgKyBfX3dlYnBhY2tfcmVxdWlyZV9fKDY4KSArIFxcXCIpO1xcXFxuICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xcXFxuICBmbG9hdDogbGVmdDtcXFxcbiAgLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yOiByZ2JhKDAsIDAsIDAsIDApO1xcXFxuICAtd2Via2l0LXVzZXItc2VsZWN0OiBub25lO1xcXFxuICAgICAtbW96LXVzZXItc2VsZWN0OiBub25lO1xcXFxuICAgICAgLW1zLXVzZXItc2VsZWN0OiBub25lO1xcXFxuICAgICAgICAgIHVzZXItc2VsZWN0OiBub25lO1xcXFxufVxcXFxuYm9keVtkYXRhLXdlYnAqPXRydWVdIHNtaWxlLXBhbmVsIC5zbWlsZS1wYW5lbF9fZ3JvdXBzIGxpIHtcXFxcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFxcXCIgKyBfX3dlYnBhY2tfcmVxdWlyZV9fKDY5KSArIFxcXCIpO1xcXFxufVxcXFxuXFxcIiwgXFxcIlxcXCJdKTtcXG5cXG4vLyBleHBvcnRzXFxuLy8jIHNvdXJjZVVSTD1bbW9kdWxlXVxcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OHZMaTl6Y21NdmMyMXBiR1V1YkdWemN6OHlZbUZoSWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQk8wRkJRMEU3T3p0QlFVZEJPMEZCUTBFc2NVTkJRWE5ETERKQ1FVRXlRaXhuUWtGQlowSXNNRUpCUVRCQ0xFZEJRVWNzWlVGQlpTeHRRa0ZCYlVJc1kwRkJZeXhsUVVGbExHbENRVUZwUWl4clFrRkJhMElzY1VKQlFYRkNMRGhDUVVFNFFpdzRRa0ZCT0VJc09FSkJRVGhDTERoQ1FVRTRRaXhIUVVGSExHOURRVUZ2UXl4eFFrRkJjVUlzYlVOQlFXMURMRzFEUVVGdFF5eHJRa0ZCYTBJc2JVSkJRVzFDTEVkQlFVY3NkVU5CUVhWRExHZENRVUZuUWl4cFFrRkJhVUlzYVVKQlFXbENMSE5DUVVGelFpd3lSRUZCTkVVc2FVTkJRV2xETEdkQ1FVRm5RaXhyUkVGQmEwUXNPRUpCUVRoQ0xEaENRVUU0UWl3NFFrRkJPRUlzT0VKQlFUaENMRWRCUVVjc05rUkJRVFpFTERKRVFVRnJSaXhIUVVGSE96dEJRVVZzYWtNaUxDSm1hV3hsSWpvaU5qY3Vhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKbGVIQnZjblJ6SUQwZ2JXOWtkV3hsTG1WNGNHOXlkSE1nUFNCeVpYRjFhWEpsS0Z3aUxpOHVMaTh1TGk4dUxpOXViMlJsWDIxdlpIVnNaWE12TGpBdU1qTXVNVUJqYzNNdGJHOWhaR1Z5TDJ4cFlpOWpjM010WW1GelpTNXFjMXdpS1NncE8xeHVMeThnYVcxd2IzSjBjMXh1WEc1Y2JpOHZJRzF2WkhWc1pWeHVaWGh3YjNKMGN5NXdkWE5vS0Z0dGIyUjFiR1V1YVdRc0lGd2lMbk50YVd4bExXOTJieUI3WEZ4dUlDQjJaWEowYVdOaGJDMWhiR2xuYmpvZ2JXbGtaR3hsTzF4Y2JpQWdkMmxrZEdnNklETXdjSGc3WEZ4dUlDQmthWE53YkdGNU9pQnBibXhwYm1VdFlteHZZMnM3WEZ4dWZWeGNibk50YVd4bExYQmhibVZzSUh0Y1hHNGdJR1JwYzNCc1lYazZJR0pzYjJOck8xeGNiaUFnYldGeVoybHVPaUF3TzF4Y2JpQWdjR0ZrWkdsdVp6b2dNRHRjWEc0Z0lHSnZjbVJsY2pvZ2JtOXVaVHRjWEc0Z0lHaGxhV2RvZERvZ01UWXdjSGc3WEZ4dUlDQnZkbVZ5Wm14dmR6b2dhR2xrWkdWdU8xeGNiaUFnTFhkbFltdHBkQzExYzJWeUxYTmxiR1ZqZERvZ2JtOXVaVHRjWEc0Z0lDQWdJQzF0YjNvdGRYTmxjaTF6Wld4bFkzUTZJRzV2Ym1VN1hGeHVJQ0FnSUNBZ0xXMXpMWFZ6WlhJdGMyVnNaV04wT2lCdWIyNWxPMXhjYmlBZ0lDQWdJQ0FnSUNCMWMyVnlMWE5sYkdWamREb2dibTl1WlR0Y1hHNTlYRnh1YzIxcGJHVXRjR0Z1Wld3Z0xuTnRhV3hsTFhCaGJtVnNYMTluY205MWNITWdlMXhjYmlBZ2IzWmxjbVpzYjNjNklHaHBaR1JsYmp0Y1hHNGdJQzEzWldKcmFYUXRZbTk0TFhOcGVtbHVaem9nWW05eVpHVnlMV0p2ZUR0Y1hHNGdJQ0FnSUNBZ0lDQWdZbTk0TFhOcGVtbHVaem9nWW05eVpHVnlMV0p2ZUR0Y1hHNGdJSEJoWkdScGJtYzZJREFnTlNVN1hGeHVJQ0J0WVhKbmFXNDZJREFnWVhWMGJ6dGNYRzU5WEZ4dWMyMXBiR1V0Y0dGdVpXd2dMbk50YVd4bExYQmhibVZzWDE5bmNtOTFjSE1nYkdrZ2UxeGNiaUFnZDJsa2RHZzZJRE13Y0hnN1hGeHVJQ0JvWldsbmFIUTZJRE13Y0hnN1hGeHVJQ0JpYjNKa1pYSTZJRzV2Ym1VN1hGeHVJQ0J0WVhKbmFXNDZJRElsSURJdU56WWxJRHRjWEc0Z0lHSmhZMnRuY205MWJtUXRhVzFoWjJVNklIVnliQ2hjSWlBcklISmxjWFZwY21Vb1hDSXVMMk52YlcxdmJpOXBiV2N2Y0c5d2IxOHlZV1JsWm1Wa0xuQnVaMXdpS1NBcklGd2lLVHRjWEc0Z0lHSmhZMnRuY205MWJtUXRjbVZ3WldGME9pQnVieTF5WlhCbFlYUTdYRnh1SUNCbWJHOWhkRG9nYkdWbWREdGNYRzRnSUMxM1pXSnJhWFF0ZEdGd0xXaHBaMmhzYVdkb2RDMWpiMnh2Y2pvZ2NtZGlZU2d3TENBd0xDQXdMQ0F3S1R0Y1hHNGdJQzEzWldKcmFYUXRkWE5sY2kxelpXeGxZM1E2SUc1dmJtVTdYRnh1SUNBZ0lDQXRiVzk2TFhWelpYSXRjMlZzWldOME9pQnViMjVsTzF4Y2JpQWdJQ0FnSUMxdGN5MTFjMlZ5TFhObGJHVmpkRG9nYm05dVpUdGNYRzRnSUNBZ0lDQWdJQ0FnZFhObGNpMXpaV3hsWTNRNklHNXZibVU3WEZ4dWZWeGNibUp2WkhsYlpHRjBZUzEzWldKd0tqMTBjblZsWFNCemJXbHNaUzF3WVc1bGJDQXVjMjFwYkdVdGNHRnVaV3hmWDJkeWIzVndjeUJzYVNCN1hGeHVJQ0JpWVdOclozSnZkVzVrTFdsdFlXZGxPaUIxY213b1hDSWdLeUJ5WlhGMWFYSmxLRndpTGk5amIyMXRiMjR2YVcxbkwzZGxZbkF2Y0c5d2IxOHlZV1JsWm1Wa0xuZGxZbkJjSWlrZ0t5QmNJaWs3WEZ4dWZWeGNibHdpTENCY0lsd2lYU2s3WEc1Y2JpOHZJR1Y0Y0c5eWRITmNibHh1WEc1Y2JpOHZMeTh2THk4dkx5OHZMeTh2THk4dkwxeHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaTh2SUdRNkwzZGxZaTl1YjJSbFgyMXZaSFZzWlhNdkxqQXVNak11TVVCamMzTXRiRzloWkdWeUlXUTZMM2RsWWk5dWIyUmxYMjF2WkhWc1pYTXZjRzl6ZEdOemN5MXNiMkZrWlhJdmJHbGlQM3Q5SVdRNkwzZGxZaTl1YjJSbFgyMXZaSFZzWlhNdkxqSXVNaTR6UUd4bGMzTXRiRzloWkdWeUlTNHZjM0pqTDNOdGFXeGxMbXhsYzNOY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURZM1hHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0pkTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzY3XFxuXCIpO1xuXG4vKioqLyB9KSxcbi8qIDY4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFxcXCJpbWcvcG9wb18yYWRlZmVkLnBuZz8yYWRlZmVcXFwiOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZZMjl0Ylc5dUwybHRaeTl3YjNCdlh6SmhaR1ZtWldRdWNHNW5QMkUxWkRZaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRWlMQ0ptYVd4bElqb2lOamd1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnRiMlIxYkdVdVpYaHdiM0owY3lBOUlGOWZkMlZpY0dGamExOXdkV0pzYVdOZmNHRjBhRjlmSUNzZ1hDSnBiV2N2Y0c5d2IxOHlZV1JsWm1Wa0xuQnVaejh5WVdSbFptVmNJanRjYmx4dVhHNHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OWNiaTh2SUZkRlFsQkJRMHNnUms5UFZFVlNYRzR2THlBdUwzTnlZeTlqYjIxdGIyNHZhVzFuTDNCdmNHOWZNbUZrWldabFpDNXdibWRjYmk4dklHMXZaSFZzWlNCcFpDQTlJRFk0WEc0dkx5QnRiMlIxYkdVZ1kyaDFibXR6SUQwZ01DSmRMQ0p6YjNWeVkyVlNiMjkwSWpvaUluMD1cXG4vLyMgc291cmNlVVJMPXdlYnBhY2staW50ZXJuYWw6Ly8vNjhcXG5cIik7XG5cbi8qKiovIH0pLFxuLyogNjkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuZXZhbChcIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgXFxcImltZy9wb3BvXzJhZGVmZWQud2VicD9iOTBiOGFcXFwiOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZZMjl0Ylc5dUwybHRaeTkzWldKd0wzQnZjRzlmTW1Ga1pXWmxaQzUzWldKd1B6TmxNVGtpWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFaUxDSm1hV3hsSWpvaU5qa3Vhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUY5ZmQyVmljR0ZqYTE5d2RXSnNhV05mY0dGMGFGOWZJQ3NnWENKcGJXY3ZjRzl3YjE4eVlXUmxabVZrTG5kbFluQS9Zamt3WWpoaFhDSTdYRzVjYmx4dUx5OHZMeTh2THk4dkx5OHZMeTh2THk4dlhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVseHVMeThnTGk5emNtTXZZMjl0Ylc5dUwybHRaeTkzWldKd0wzQnZjRzlmTW1Ga1pXWmxaQzUzWldKd1hHNHZMeUJ0YjJSMWJHVWdhV1FnUFNBMk9WeHVMeThnYlc5a2RXeGxJR05vZFc1cmN5QTlJREFpWFN3aWMyOTFjbU5sVW05dmRDSTZJaUo5XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzY5XFxuXCIpO1xuXG4vKioqLyB9KSxcbi8qIDcwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCIvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xcblxcbi8vIGxvYWQgdGhlIHN0eWxlc1xcbnZhciBjb250ZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MSk7XFxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaSwgY29udGVudCwgJyddXTtcXG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXFxudmFyIHVwZGF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oMSkoY29udGVudCwge30pO1xcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xcbi8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcXG5pZihmYWxzZSkge1xcblxcdC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXFxuXFx0aWYoIWNvbnRlbnQubG9jYWxzKSB7XFxuXFx0XFx0bW9kdWxlLmhvdC5hY2NlcHQoXFxcIiEhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvLjAuMjMuMUBjc3MtbG9hZGVyL2luZGV4LmpzIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS0wLTIhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvLjIuMi4zQGxlc3MtbG9hZGVyL2luZGV4LmpzIS4vcmVwbHkubGVzc1xcXCIsIGZ1bmN0aW9uKCkge1xcblxcdFxcdFxcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcXFwiISEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8uMC4yMy4xQGNzcy1sb2FkZXIvaW5kZXguanMhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTAtMiEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8uMi4yLjNAbGVzcy1sb2FkZXIvaW5kZXguanMhLi9yZXBseS5sZXNzXFxcIik7XFxuXFx0XFx0XFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XFxuXFx0XFx0XFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xcblxcdFxcdH0pO1xcblxcdH1cXG5cXHQvLyBXaGVuIHRoZSBtb2R1bGUgaXMgZGlzcG9zZWQsIHJlbW92ZSB0aGUgPHN0eWxlPiB0YWdzXFxuXFx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XFxufS8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZjbVZ3YkhrdWJHVnpjejlpT0RZNElsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNLME5CUVRoR08wRkJRemxHTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVkQlFVYzdRVUZEU0R0QlFVTkJPMEZCUTBFc1owTkJRV2RETEZWQlFWVXNSVUZCUlR0QlFVTTFReUlzSW1acGJHVWlPaUkzTUM1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaTh2SUhOMGVXeGxMV3h2WVdSbGNqb2dRV1JrY3lCemIyMWxJR056Y3lCMGJ5QjBhR1VnUkU5TklHSjVJR0ZrWkdsdVp5QmhJRHh6ZEhsc1pUNGdkR0ZuWEc1Y2JpOHZJR3h2WVdRZ2RHaGxJSE4wZVd4bGMxeHVkbUZ5SUdOdmJuUmxiblFnUFNCeVpYRjFhWEpsS0Z3aUlTRXVMeTR1THk0dUx5NHVMMjV2WkdWZmJXOWtkV3hsY3k4dU1DNHlNeTR4UUdOemN5MXNiMkZrWlhJdmFXNWtaWGd1YW5NaExpOHVMaTh1TGk4dUxpOXViMlJsWDIxdlpIVnNaWE12Y0c5emRHTnpjeTFzYjJGa1pYSXZiR2xpTDJsdVpHVjRMbXB6UHo5eVpXWXRMVEF0TWlFdUx5NHVMeTR1THk0dUwyNXZaR1ZmYlc5a2RXeGxjeTh1TWk0eUxqTkFiR1Z6Y3kxc2IyRmtaWEl2YVc1a1pYZ3Vhbk1oTGk5eVpYQnNlUzVzWlhOelhDSXBPMXh1YVdZb2RIbHdaVzltSUdOdmJuUmxiblFnUFQwOUlDZHpkSEpwYm1jbktTQmpiMjUwWlc1MElEMGdXMXR0YjJSMWJHVXVhV1FzSUdOdmJuUmxiblFzSUNjblhWMDdYRzR2THlCaFpHUWdkR2hsSUhOMGVXeGxjeUIwYnlCMGFHVWdSRTlOWEc1MllYSWdkWEJrWVhSbElEMGdjbVZ4ZFdseVpTaGNJaUV1THk0dUx5NHVMeTR1TDI1dlpHVmZiVzlrZFd4bGN5OHVNQzR4TXk0eFFITjBlV3hsTFd4dllXUmxjaTloWkdSVGRIbHNaWE11YW5OY0lpa29ZMjl1ZEdWdWRDd2dlMzBwTzF4dWFXWW9ZMjl1ZEdWdWRDNXNiMk5oYkhNcElHMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1kyOXVkR1Z1ZEM1c2IyTmhiSE03WEc0dkx5QkliM1FnVFc5a2RXeGxJRkpsY0d4aFkyVnRaVzUwWEc1cFppaHRiMlIxYkdVdWFHOTBLU0I3WEc1Y2RDOHZJRmRvWlc0Z2RHaGxJSE4wZVd4bGN5QmphR0Z1WjJVc0lIVndaR0YwWlNCMGFHVWdQSE4wZVd4bFBpQjBZV2R6WEc1Y2RHbG1LQ0ZqYjI1MFpXNTBMbXh2WTJGc2N5a2dlMXh1WEhSY2RHMXZaSFZzWlM1b2IzUXVZV05qWlhCMEtGd2lJU0V1THk0dUx5NHVMeTR1TDI1dlpHVmZiVzlrZFd4bGN5OHVNQzR5TXk0eFFHTnpjeTFzYjJGa1pYSXZhVzVrWlhndWFuTWhMaTh1TGk4dUxpOHVMaTl1YjJSbFgyMXZaSFZzWlhNdmNHOXpkR056Y3kxc2IyRmtaWEl2YkdsaUwybHVaR1Y0TG1welB6OXlaV1l0TFRBdE1pRXVMeTR1THk0dUx5NHVMMjV2WkdWZmJXOWtkV3hsY3k4dU1pNHlMak5BYkdWemN5MXNiMkZrWlhJdmFXNWtaWGd1YW5NaExpOXlaWEJzZVM1c1pYTnpYQ0lzSUdaMWJtTjBhVzl1S0NrZ2UxeHVYSFJjZEZ4MGRtRnlJRzVsZDBOdmJuUmxiblFnUFNCeVpYRjFhWEpsS0Z3aUlTRXVMeTR1THk0dUx5NHVMMjV2WkdWZmJXOWtkV3hsY3k4dU1DNHlNeTR4UUdOemN5MXNiMkZrWlhJdmFXNWtaWGd1YW5NaExpOHVMaTh1TGk4dUxpOXViMlJsWDIxdlpIVnNaWE12Y0c5emRHTnpjeTFzYjJGa1pYSXZiR2xpTDJsdVpHVjRMbXB6UHo5eVpXWXRMVEF0TWlFdUx5NHVMeTR1THk0dUwyNXZaR1ZmYlc5a2RXeGxjeTh1TWk0eUxqTkFiR1Z6Y3kxc2IyRmtaWEl2YVc1a1pYZ3Vhbk1oTGk5eVpYQnNlUzVzWlhOelhDSXBPMXh1WEhSY2RGeDBhV1lvZEhsd1pXOW1JRzVsZDBOdmJuUmxiblFnUFQwOUlDZHpkSEpwYm1jbktTQnVaWGREYjI1MFpXNTBJRDBnVzF0dGIyUjFiR1V1YVdRc0lHNWxkME52Ym5SbGJuUXNJQ2NuWFYwN1hHNWNkRngwWEhSMWNHUmhkR1VvYm1WM1EyOXVkR1Z1ZENrN1hHNWNkRngwZlNrN1hHNWNkSDFjYmx4MEx5OGdWMmhsYmlCMGFHVWdiVzlrZFd4bElHbHpJR1JwYzNCdmMyVmtMQ0J5WlcxdmRtVWdkR2hsSUR4emRIbHNaVDRnZEdGbmMxeHVYSFJ0YjJSMWJHVXVhRzkwTG1ScGMzQnZjMlVvWm5WdVkzUnBiMjRvS1NCN0lIVndaR0YwWlNncE95QjlLVHRjYm4xY2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMM055WXk5eVpYQnNlUzVzWlhOelhHNHZMeUJ0YjJSMWJHVWdhV1FnUFNBM01GeHVMeThnYlc5a2RXeGxJR05vZFc1cmN5QTlJREFpWFN3aWMyOTFjbU5sVW05dmRDSTZJaUo5XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzcwXFxuXCIpO1xuXG4vKioqLyB9KSxcbi8qIDcxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApKCk7XFxuLy8gaW1wb3J0c1xcblxcblxcbi8vIG1vZHVsZVxcbmV4cG9ydHMucHVzaChbbW9kdWxlLmksIFxcXCIuZWRpdG9yLXJlcGx5LW92byB7XFxcXG4gIGRpc3BsYXk6IGJsb2NrO1xcXFxuICBtYXJnaW46IDA7XFxcXG4gIHBhZGRpbmc6IDA7XFxcXG4gIGJvcmRlcjogbm9uZTtcXFxcbiAgd2lkdGg6IDEwMCU7XFxcXG4gIGhlaWdodDogMTAwJTtcXFxcbiAgYmFja2dyb3VuZDogcmdiYSgwLCAwLCAwLCAwLjYpO1xcXFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxcXG4gIHRvcDogMDtcXFxcbiAgbGVmdDogMDtcXFxcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXFxcbiAgZm9udC1zaXplOiAxNnB4O1xcXFxufVxcXFxuLmVkaXRvci1yZXBseS1vdm8gLndoIHtcXFxcbiAgY29sb3I6IGJsYWNrO1xcXFxufVxcXFxuLmVkaXRvci1yZXBseS1vdm8gLmRlZmF1bHRfdmFsdWUtb3ZvIHtcXFxcbiAgY29sb3I6ICNjYWNhY2E7XFxcXG59XFxcXG4uZWRpdG9yLXJlcGx5LW92byAuZWpfcmVwbGF5X193cmFwIHtcXFxcbiAgd2lkdGg6IDk1JTtcXFxcbiAgbWFyZ2luOiAzJSAwIDAgMi41JTtcXFxcbiAgLXdlYmtpdC1ib3gtc2l6aW5nOiBib3JkZXItYm94O1xcXFxuICAgICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxcXG59XFxcXG4uZWRpdG9yLXJlcGx5LW92byAuZWpfcmVwbHlfX2NvbnRlbnQtd3JhcCB7XFxcXG4gIHBhZGRpbmctdG9wOiAzMCU7XFxcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxcXG4gIC13ZWJraXQtYm94LXNpemluZzogYm9yZGVyLWJveDtcXFxcbiAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcXFxuICBib3JkZXItYm90dG9tOiAuNXB4IHNvbGlkICNjOGM3Y2M7XFxcXG4gIGJhY2tncm91bmQ6IHdoaXRlO1xcXFxufVxcXFxuLmVkaXRvci1yZXBseS1vdm8gLmVqX3JlcGx5X19jb250ZW50IHtcXFxcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXFxcbiAgb3ZlcmZsb3cteTogc2Nyb2xsO1xcXFxuICAtd2Via2l0LW92ZXJmbG93LXNjcm9sbGluZzogdG91Y2g7XFxcXG4gIC13ZWJraXQtYm94LXNpemluZzogYm9yZGVyLWJveDtcXFxcbiAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcXFxuICBwYWRkaW5nOiAzJTtcXFxcbiAgYm9yZGVyOiBub25lO1xcXFxuICBvdXRsaW5lOiBub25lO1xcXFxuICAtd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMCk7XFxcXG4gIGxpbmUtaGVpZ2h0OiAyNHB4O1xcXFxufVxcXFxuLmVkaXRvci1yZXBseS1vdm8gLmVqLXJlcGx5X19zbWlsZS1ob2xkZXIge1xcXFxuICB3aWR0aDogMTAwJTtcXFxcbiAgcGFkZGluZy10b3A6IDU1JTtcXFxcbiAgYmFja2dyb3VuZDogI2VmZWRlZDtcXFxcbn1cXFxcbi5lZGl0b3ItcmVwbHktb3ZvIC5lai1yZXBseV9fc21pbGUtaG9sZGVyIC5lai1yZXBseV9fc21pbGUtaW5uZXIge1xcXFxuICB3aWR0aDogMzA0cHg7XFxcXG4gIGxlZnQ6IDUwJTtcXFxcbiAgbWFyZ2luLXRvcDogNSU7XFxcXG4gIG1hcmdpbi1sZWZ0OiAtMTUycHg7XFxcXG59XFxcXG4uZWRpdG9yLXJlcGx5LW92byAuZWotcmVwbHlfX2JvdCB7XFxcXG4gIHBhZGRpbmctdG9wOiAxNSU7XFxcXG4gIGJhY2tncm91bmQ6IHdoaXRlO1xcXFxufVxcXFxuLmVkaXRvci1yZXBseS1vdm8gLmVqLXJlcGx5X19ib3QgdWwge1xcXFxuICB3aWR0aDogMzAlO1xcXFxufVxcXFxuLmVkaXRvci1yZXBseS1vdm8gLmVqLXJlcGx5X19ib3QgPiBkaXYge1xcXFxuICBkaXNwbGF5OiAtd2Via2l0LWJveDtcXFxcbiAgZGlzcGxheTogLW1zLWZsZXhib3g7XFxcXG4gIGRpc3BsYXk6IGZsZXg7XFxcXG4gIC13ZWJraXQtYm94LWFsaWduOiBjZW50ZXI7XFxcXG4gICAgICAtbXMtZmxleC1hbGlnbjogY2VudGVyO1xcXFxuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxcXG59XFxcXG4uZWRpdG9yLXJlcGx5LW92byAuZWotcmVwbHlfX2JvdCA+IGRpdiA+IGRpdiB7XFxcXG4gIHdpZHRoOiA3MCU7XFxcXG4gIGhlaWdodDogMTAwJTtcXFxcbiAgZGlzcGxheTogLXdlYmtpdC1ib3g7XFxcXG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcXFxuICBkaXNwbGF5OiBmbGV4O1xcXFxuICAtd2Via2l0LWJveC1wYWNrOiBlbmQ7XFxcXG4gICAgICAtbXMtZmxleC1wYWNrOiBlbmQ7XFxcXG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcXFxcbiAgLXdlYmtpdC1ib3gtYWxpZ246IGNlbnRlcjtcXFxcbiAgICAgIC1tcy1mbGV4LWFsaWduOiBjZW50ZXI7XFxcXG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXFxcbn1cXFxcbi5lZGl0b3ItcmVwbHktb3ZvIC5lai1yZXBseV9fYm90IHVsIGxpIHtcXFxcbiAgd2lkdGg6IDI4JTtcXFxcbiAgYmFja2dyb3VuZDogdXJsKFxcXCIgKyBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpICsgXFxcIikgbm8tcmVwZWF0O1xcXFxuICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xcXFxuICAtd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMCk7XFxcXG59XFxcXG4uZWRpdG9yLXJlcGx5LW92byAuZWotcmVwbHlfX2JvdCB1bCBsaTo6YWZ0ZXIge1xcXFxuICBjb250ZW50OiAnJztcXFxcbiAgZGlzcGxheTogYmxvY2s7XFxcXG4gIHBhZGRpbmctdG9wOiAxMDAlO1xcXFxufVxcXFxuYm9keVtkYXRhLXdlYnAqPXRydWVdIC5lZGl0b3ItcmVwbHktb3ZvIC5lai1yZXBseV9fYm90IHVsIGxpIHtcXFxcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFxcXCIgKyBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpICsgXFxcIik7XFxcXG59XFxcXG4uZWRpdG9yLXJlcGx5LW92byAuZWotcmVwbHlfX2JvdCB1bCBsaTpudGgtY2hpbGQoMSkge1xcXFxuICBtYXJnaW4tbGVmdDogMTYlO1xcXFxufVxcXFxuLmVkaXRvci1yZXBseS1vdm8gLmVqLXJlcGx5X19ib3QgZGl2IGJ1dHRvbiB7XFxcXG4gIHdpZHRoOiAzMCU7XFxcXG4gIGhlaWdodDogNjMlO1xcXFxuICBib3JkZXItcmFkaXVzOiA0cHg7XFxcXG4gIC13ZWJraXQtYm94LXNpemluZzogYm9yZGVyLWJveDtcXFxcbiAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcXFxuICBtYXJnaW46IDAgMyU7XFxcXG59XFxcXG4uZWRpdG9yLXJlcGx5LW92byAuZWotcmVwbHlfX2JvdCAuZWotcmVwbHlfX3B1YiB7XFxcXG4gIGJhY2tncm91bmQ6ICNmZjVhMDA7XFxcXG4gIG1hcmdpbi1yaWdodDogNiU7XFxcXG59XFxcXG4uZWRpdG9yLXJlcGx5LW92byAuZWotcmVwbHlfX2JvdCAuZWotcmVwbHlfX3B1YiA+IHNwYW4ge1xcXFxuICBkaXNwbGF5OiAtd2Via2l0LWJveDtcXFxcbiAgZGlzcGxheTogLW1zLWZsZXhib3g7XFxcXG4gIGRpc3BsYXk6IGZsZXg7XFxcXG4gIC13ZWJraXQtYm94LWFsaWduOiBjZW50ZXI7XFxcXG4gICAgICAtbXMtZmxleC1hbGlnbjogY2VudGVyO1xcXFxuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxcXG4gIC13ZWJraXQtYm94LXBhY2s6IGNlbnRlcjtcXFxcbiAgICAgIC1tcy1mbGV4LXBhY2s6IGNlbnRlcjtcXFxcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXFxcbiAgZm9udC1zaXplOiAxOHB4O1xcXFxuICBjb2xvcjogd2hpdGU7XFxcXG59XFxcXG4uZWRpdG9yLXJlcGx5LW92byAuZWotcmVwbHlfX2JvdCAuZWotcmVwbHlfX2NhbmNlbCB7XFxcXG4gIGJvcmRlcjogMXB4IHNvbGlkICNjOGM3Y2M7XFxcXG59XFxcXG4uZWRpdG9yLXJlcGx5LW92byAuZWotcmVwbHlfX2JvdCAuZWotcmVwbHlfX2NhbmNlbCA+IHNwYW4ge1xcXFxuICBkaXNwbGF5OiAtd2Via2l0LWJveDtcXFxcbiAgZGlzcGxheTogLW1zLWZsZXhib3g7XFxcXG4gIGRpc3BsYXk6IGZsZXg7XFxcXG4gIC13ZWJraXQtYm94LWFsaWduOiBjZW50ZXI7XFxcXG4gICAgICAtbXMtZmxleC1hbGlnbjogY2VudGVyO1xcXFxuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxcXG4gIC13ZWJraXQtYm94LXBhY2s6IGNlbnRlcjtcXFxcbiAgICAgIC1tcy1mbGV4LXBhY2s6IGNlbnRlcjtcXFxcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXFxcbiAgZm9udC1zaXplOiAxOHB4O1xcXFxuICBjb2xvcjogIzYzNWY1ZjtcXFxcbn1cXFxcbi5lZGl0b3ItcmVwbHktb3ZvIC5lai1yZXBseV9fbXNnIHtcXFxcbiAgYmFja2dyb3VuZDogcmdiYSgwLCAwLCAwLCAwLjcpO1xcXFxuICBwYWRkaW5nLXRvcDogMTAlO1xcXFxuICBib3JkZXItcmFkaXVzOiA1cHg7XFxcXG4gIGZvbnQtc2l6ZTogMTVweDtcXFxcbiAgd2lkdGg6IDgwJTtcXFxcbiAgbWFyZ2luLWxlZnQ6IDEwJTtcXFxcbiAgbWFyZ2luLXRvcDogLTIlO1xcXFxuICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgLTkwJSwgMCk7XFxcXG4gICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtOTAlLCAwKTtcXFxcbiAgdmlzaWJpbGl0eTogdmlzaWJsZTtcXFxcbiAgb3BhY2l0eTogMTtcXFxcbn1cXFxcbi5lZGl0b3ItcmVwbHktb3ZvIC5lai1yZXBseV9fbXNnID4gZGl2IHtcXFxcbiAgZGlzcGxheTogLXdlYmtpdC1ib3g7XFxcXG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcXFxuICBkaXNwbGF5OiBmbGV4O1xcXFxuICAtd2Via2l0LWJveC1hbGlnbjogY2VudGVyO1xcXFxuICAgICAgLW1zLWZsZXgtYWxpZ246IGNlbnRlcjtcXFxcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcXFxuICAtd2Via2l0LWJveC1wYWNrOiBjZW50ZXI7XFxcXG4gICAgICAtbXMtZmxleC1wYWNrOiBjZW50ZXI7XFxcXG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxcXG59XFxcXG4uZWRpdG9yLXJlcGx5LW92byAuZWotcmVwbHlfX21zZyBzcGFuIHtcXFxcbiAgY29sb3I6IHdoaXRlO1xcXFxufVxcXFxuXFxcIiwgXFxcIlxcXCJdKTtcXG5cXG4vLyBleHBvcnRzXFxuLy8jIHNvdXJjZVVSTD1bbW9kdWxlXVxcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OHZMaTl6Y21NdmNtVndiSGt1YkdWemN6OWxaREkySWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQk8wRkJRMEU3T3p0QlFVZEJPMEZCUTBFc05FTkJRVFpETEcxQ1FVRnRRaXhqUVVGakxHVkJRV1VzYVVKQlFXbENMR2RDUVVGblFpeHBRa0ZCYVVJc2JVTkJRVzFETEhWQ1FVRjFRaXhYUVVGWExGbEJRVmtzY1VKQlFYRkNMRzlDUVVGdlFpeEhRVUZITEhsQ1FVRjVRaXhwUWtGQmFVSXNSMEZCUnl4M1EwRkJkME1zYlVKQlFXMUNMRWRCUVVjc2MwTkJRWE5ETEdWQlFXVXNkMEpCUVhkQ0xHMURRVUZ0UXl4dFEwRkJiVU1zUjBGQlJ5dzJRMEZCTmtNc2NVSkJRWEZDTEhGQ1FVRnhRaXh0UTBGQmJVTXNiVU5CUVcxRExITkRRVUZ6UXl4elFrRkJjMElzUjBGQlJ5eDNRMEZCZDBNc2NVSkJRWEZDTEhWQ1FVRjFRaXh6UTBGQmMwTXNiVU5CUVcxRExHMURRVUZ0UXl4blFrRkJaMElzYVVKQlFXbENMR3RDUVVGclFpeHJSRUZCYTBRc2MwSkJRWE5DTEVkQlFVY3NOa05CUVRaRExHZENRVUZuUWl4eFFrRkJjVUlzZDBKQlFYZENMRWRCUVVjc2IwVkJRVzlGTEdsQ1FVRnBRaXhqUVVGakxHMUNRVUZ0UWl4M1FrRkJkMElzUjBGQlJ5eHZRMEZCYjBNc2NVSkJRWEZDTEhOQ1FVRnpRaXhIUVVGSExIVkRRVUYxUXl4bFFVRmxMRWRCUVVjc01FTkJRVEJETEhsQ1FVRjVRaXg1UWtGQmVVSXNhMEpCUVd0Q0xEaENRVUU0UWl3clFrRkJLMElzWjBOQlFXZERMRWRCUVVjc1owUkJRV2RFTEdWQlFXVXNhVUpCUVdsQ0xIbENRVUY1UWl4NVFrRkJlVUlzYTBKQlFXdENMREJDUVVFd1Fpd3lRa0ZCTWtJc2MwTkJRWE5ETERoQ1FVRTRRaXdyUWtGQkswSXNaME5CUVdkRExFZEJRVWNzTUVOQlFUQkRMR1ZCUVdVc09FUkJRWGRGTERKQ1FVRXlRaXhyUkVGQmEwUXNSMEZCUnl4cFJFRkJhVVFzWjBKQlFXZENMRzFDUVVGdFFpeHpRa0ZCYzBJc1IwRkJSeXhuUlVGQlowVXNNRVJCUVRCRkxFZEJRVWNzZFVSQlFYVkVMSEZDUVVGeFFpeEhRVUZITEN0RFFVRXJReXhsUVVGbExHZENRVUZuUWl4MVFrRkJkVUlzYlVOQlFXMURMRzFEUVVGdFF5eHBRa0ZCYVVJc1IwRkJSeXh0UkVGQmJVUXNkMEpCUVhkQ0xIRkNRVUZ4UWl4SFFVRkhMREJFUVVFd1JDeDVRa0ZCZVVJc2VVSkJRWGxDTEd0Q1FVRnJRaXc0UWtGQk9FSXNLMEpCUVN0Q0xHZERRVUZuUXl3MlFrRkJOa0lzT0VKQlFUaENMRzlEUVVGdlF5eHZRa0ZCYjBJc2FVSkJRV2xDTEVkQlFVY3NjMFJCUVhORUxEaENRVUU0UWl4SFFVRkhMRFpFUVVFMlJDeDVRa0ZCZVVJc2VVSkJRWGxDTEd0Q1FVRnJRaXc0UWtGQk9FSXNLMEpCUVN0Q0xHZERRVUZuUXl3MlFrRkJOa0lzT0VKQlFUaENMRzlEUVVGdlF5eHZRa0ZCYjBJc2JVSkJRVzFDTEVkQlFVY3NiME5CUVc5RExHMURRVUZ0UXl4eFFrRkJjVUlzZFVKQlFYVkNMRzlDUVVGdlFpeGxRVUZsTEhGQ1FVRnhRaXh2UWtGQmIwSXNLME5CUVN0RExDdERRVUVyUXl4M1FrRkJkMElzWlVGQlpTeEhRVUZITERCRFFVRXdReXg1UWtGQmVVSXNlVUpCUVhsQ0xHdENRVUZyUWl3NFFrRkJPRUlzSzBKQlFTdENMR2REUVVGblF5dzJRa0ZCTmtJc09FSkJRVGhDTEc5RFFVRnZReXhIUVVGSExIbERRVUY1UXl4cFFrRkJhVUlzUjBGQlJ6czdRVUZGTVhSSklpd2labWxzWlNJNklqY3hMbXB6SWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaVpYaHdiM0owY3lBOUlHMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2NtVnhkV2x5WlNoY0lpNHZMaTR2TGk0dkxpNHZibTlrWlY5dGIyUjFiR1Z6THk0d0xqSXpMakZBWTNOekxXeHZZV1JsY2k5c2FXSXZZM056TFdKaGMyVXVhbk5jSWlrb0tUdGNiaTh2SUdsdGNHOXlkSE5jYmx4dVhHNHZMeUJ0YjJSMWJHVmNibVY0Y0c5eWRITXVjSFZ6YUNoYmJXOWtkV3hsTG1sa0xDQmNJaTVsWkdsMGIzSXRjbVZ3YkhrdGIzWnZJSHRjWEc0Z0lHUnBjM0JzWVhrNklHSnNiMk5yTzF4Y2JpQWdiV0Z5WjJsdU9pQXdPMXhjYmlBZ2NHRmtaR2x1WnpvZ01EdGNYRzRnSUdKdmNtUmxjam9nYm05dVpUdGNYRzRnSUhkcFpIUm9PaUF4TURBbE8xeGNiaUFnYUdWcFoyaDBPaUF4TURBbE8xeGNiaUFnWW1GamEyZHliM1Z1WkRvZ2NtZGlZU2d3TENBd0xDQXdMQ0F3TGpZcE8xeGNiaUFnY0c5emFYUnBiMjQ2SUdGaWMyOXNkWFJsTzF4Y2JpQWdkRzl3T2lBd08xeGNiaUFnYkdWbWREb2dNRHRjWEc0Z0lHOTJaWEptYkc5M09pQm9hV1JrWlc0N1hGeHVJQ0JtYjI1MExYTnBlbVU2SURFMmNIZzdYRnh1ZlZ4Y2JpNWxaR2wwYjNJdGNtVndiSGt0YjNadklDNTNhQ0I3WEZ4dUlDQmpiMnh2Y2pvZ1lteGhZMnM3WEZ4dWZWeGNiaTVsWkdsMGIzSXRjbVZ3YkhrdGIzWnZJQzVrWldaaGRXeDBYM1poYkhWbExXOTJieUI3WEZ4dUlDQmpiMnh2Y2pvZ0kyTmhZMkZqWVR0Y1hHNTlYRnh1TG1Wa2FYUnZjaTF5WlhCc2VTMXZkbThnTG1WcVgzSmxjR3hoZVY5ZmQzSmhjQ0I3WEZ4dUlDQjNhV1IwYURvZ09UVWxPMXhjYmlBZ2JXRnlaMmx1T2lBekpTQXdJREFnTWk0MUpUdGNYRzRnSUMxM1pXSnJhWFF0WW05NExYTnBlbWx1WnpvZ1ltOXlaR1Z5TFdKdmVEdGNYRzRnSUNBZ0lDQWdJQ0FnWW05NExYTnBlbWx1WnpvZ1ltOXlaR1Z5TFdKdmVEdGNYRzU5WEZ4dUxtVmthWFJ2Y2kxeVpYQnNlUzF2ZG04Z0xtVnFYM0psY0d4NVgxOWpiMjUwWlc1MExYZHlZWEFnZTF4Y2JpQWdjR0ZrWkdsdVp5MTBiM0E2SURNd0pUdGNYRzRnSUc5MlpYSm1iRzkzT2lCb2FXUmtaVzQ3WEZ4dUlDQXRkMlZpYTJsMExXSnZlQzF6YVhwcGJtYzZJR0p2Y21SbGNpMWliM2c3WEZ4dUlDQWdJQ0FnSUNBZ0lHSnZlQzF6YVhwcGJtYzZJR0p2Y21SbGNpMWliM2c3WEZ4dUlDQmliM0prWlhJdFltOTBkRzl0T2lBdU5YQjRJSE52Ykdsa0lDTmpPR00zWTJNN1hGeHVJQ0JpWVdOclozSnZkVzVrT2lCM2FHbDBaVHRjWEc1OVhGeHVMbVZrYVhSdmNpMXlaWEJzZVMxdmRtOGdMbVZxWDNKbGNHeDVYMTlqYjI1MFpXNTBJSHRjWEc0Z0lHOTJaWEptYkc5M09pQm9hV1JrWlc0N1hGeHVJQ0J2ZG1WeVpteHZkeTE1T2lCelkzSnZiR3c3WEZ4dUlDQXRkMlZpYTJsMExXOTJaWEptYkc5M0xYTmpjbTlzYkdsdVp6b2dkRzkxWTJnN1hGeHVJQ0F0ZDJWaWEybDBMV0p2ZUMxemFYcHBibWM2SUdKdmNtUmxjaTFpYjNnN1hGeHVJQ0FnSUNBZ0lDQWdJR0p2ZUMxemFYcHBibWM2SUdKdmNtUmxjaTFpYjNnN1hGeHVJQ0J3WVdSa2FXNW5PaUF6SlR0Y1hHNGdJR0p2Y21SbGNqb2dibTl1WlR0Y1hHNGdJRzkxZEd4cGJtVTZJRzV2Ym1VN1hGeHVJQ0F0ZDJWaWEybDBMWFJoY0Mxb2FXZG9iR2xuYUhRdFkyOXNiM0k2SUhKblltRW9NQ3dnTUN3Z01Dd2dNQ2s3WEZ4dUlDQnNhVzVsTFdobGFXZG9kRG9nTWpSd2VEdGNYRzU5WEZ4dUxtVmthWFJ2Y2kxeVpYQnNlUzF2ZG04Z0xtVnFMWEpsY0d4NVgxOXpiV2xzWlMxb2IyeGtaWElnZTF4Y2JpQWdkMmxrZEdnNklERXdNQ1U3WEZ4dUlDQndZV1JrYVc1bkxYUnZjRG9nTlRVbE8xeGNiaUFnWW1GamEyZHliM1Z1WkRvZ0kyVm1aV1JsWkR0Y1hHNTlYRnh1TG1Wa2FYUnZjaTF5WlhCc2VTMXZkbThnTG1WcUxYSmxjR3g1WDE5emJXbHNaUzFvYjJ4a1pYSWdMbVZxTFhKbGNHeDVYMTl6Yldsc1pTMXBibTVsY2lCN1hGeHVJQ0IzYVdSMGFEb2dNekEwY0hnN1hGeHVJQ0JzWldaME9pQTFNQ1U3WEZ4dUlDQnRZWEpuYVc0dGRHOXdPaUExSlR0Y1hHNGdJRzFoY21kcGJpMXNaV1owT2lBdE1UVXljSGc3WEZ4dWZWeGNiaTVsWkdsMGIzSXRjbVZ3YkhrdGIzWnZJQzVsYWkxeVpYQnNlVjlmWW05MElIdGNYRzRnSUhCaFpHUnBibWN0ZEc5d09pQXhOU1U3WEZ4dUlDQmlZV05yWjNKdmRXNWtPaUIzYUdsMFpUdGNYRzU5WEZ4dUxtVmthWFJ2Y2kxeVpYQnNlUzF2ZG04Z0xtVnFMWEpsY0d4NVgxOWliM1FnZFd3Z2UxeGNiaUFnZDJsa2RHZzZJRE13SlR0Y1hHNTlYRnh1TG1Wa2FYUnZjaTF5WlhCc2VTMXZkbThnTG1WcUxYSmxjR3g1WDE5aWIzUWdQaUJrYVhZZ2UxeGNiaUFnWkdsemNHeGhlVG9nTFhkbFltdHBkQzFpYjNnN1hGeHVJQ0JrYVhOd2JHRjVPaUF0YlhNdFpteGxlR0p2ZUR0Y1hHNGdJR1JwYzNCc1lYazZJR1pzWlhnN1hGeHVJQ0F0ZDJWaWEybDBMV0p2ZUMxaGJHbG5iam9nWTJWdWRHVnlPMXhjYmlBZ0lDQWdJQzF0Y3kxbWJHVjRMV0ZzYVdkdU9pQmpaVzUwWlhJN1hGeHVJQ0FnSUNBZ0lDQWdJR0ZzYVdkdUxXbDBaVzF6T2lCalpXNTBaWEk3WEZ4dWZWeGNiaTVsWkdsMGIzSXRjbVZ3YkhrdGIzWnZJQzVsYWkxeVpYQnNlVjlmWW05MElENGdaR2wySUQ0Z1pHbDJJSHRjWEc0Z0lIZHBaSFJvT2lBM01DVTdYRnh1SUNCb1pXbG5hSFE2SURFd01DVTdYRnh1SUNCa2FYTndiR0Y1T2lBdGQyVmlhMmwwTFdKdmVEdGNYRzRnSUdScGMzQnNZWGs2SUMxdGN5MW1iR1Y0WW05NE8xeGNiaUFnWkdsemNHeGhlVG9nWm14bGVEdGNYRzRnSUMxM1pXSnJhWFF0WW05NExYQmhZMnM2SUdWdVpEdGNYRzRnSUNBZ0lDQXRiWE10Wm14bGVDMXdZV05yT2lCbGJtUTdYRnh1SUNBZ0lDQWdJQ0FnSUdwMWMzUnBabmt0WTI5dWRHVnVkRG9nWm14bGVDMWxibVE3WEZ4dUlDQXRkMlZpYTJsMExXSnZlQzFoYkdsbmJqb2dZMlZ1ZEdWeU8xeGNiaUFnSUNBZ0lDMXRjeTFtYkdWNExXRnNhV2R1T2lCalpXNTBaWEk3WEZ4dUlDQWdJQ0FnSUNBZ0lHRnNhV2R1TFdsMFpXMXpPaUJqWlc1MFpYSTdYRnh1ZlZ4Y2JpNWxaR2wwYjNJdGNtVndiSGt0YjNadklDNWxhaTF5WlhCc2VWOWZZbTkwSUhWc0lHeHBJSHRjWEc0Z0lIZHBaSFJvT2lBeU9DVTdYRnh1SUNCaVlXTnJaM0p2ZFc1a09pQjFjbXdvWENJZ0t5QnlaWEYxYVhKbEtGd2lMaTlqYjIxdGIyNHZhVzFuTDJsamIyNHVjRzVuWENJcElDc2dYQ0lwSUc1dkxYSmxjR1ZoZER0Y1hHNGdJR0poWTJ0bmNtOTFibVF0YzJsNlpUb2dZMjkyWlhJN1hGeHVJQ0F0ZDJWaWEybDBMWFJoY0Mxb2FXZG9iR2xuYUhRdFkyOXNiM0k2SUhKblltRW9NQ3dnTUN3Z01Dd2dNQ2s3WEZ4dWZWeGNiaTVsWkdsMGIzSXRjbVZ3YkhrdGIzWnZJQzVsYWkxeVpYQnNlVjlmWW05MElIVnNJR3hwT2pwaFpuUmxjaUI3WEZ4dUlDQmpiMjUwWlc1ME9pQW5KenRjWEc0Z0lHUnBjM0JzWVhrNklHSnNiMk5yTzF4Y2JpQWdjR0ZrWkdsdVp5MTBiM0E2SURFd01DVTdYRnh1ZlZ4Y2JtSnZaSGxiWkdGMFlTMTNaV0p3S2oxMGNuVmxYU0F1WldScGRHOXlMWEpsY0d4NUxXOTJieUF1WldvdGNtVndiSGxmWDJKdmRDQjFiQ0JzYVNCN1hGeHVJQ0JpWVdOclozSnZkVzVrTFdsdFlXZGxPaUIxY213b1hDSWdLeUJ5WlhGMWFYSmxLRndpTGk5amIyMXRiMjR2YVcxbkwzZGxZbkF2YVdOdmJpNTNaV0p3WENJcElDc2dYQ0lwTzF4Y2JuMWNYRzR1WldScGRHOXlMWEpsY0d4NUxXOTJieUF1WldvdGNtVndiSGxmWDJKdmRDQjFiQ0JzYVRwdWRHZ3RZMmhwYkdRb01Ta2dlMXhjYmlBZ2JXRnlaMmx1TFd4bFpuUTZJREUySlR0Y1hHNTlYRnh1TG1Wa2FYUnZjaTF5WlhCc2VTMXZkbThnTG1WcUxYSmxjR3g1WDE5aWIzUWdaR2wySUdKMWRIUnZiaUI3WEZ4dUlDQjNhV1IwYURvZ016QWxPMXhjYmlBZ2FHVnBaMmgwT2lBMk15VTdYRnh1SUNCaWIzSmtaWEl0Y21Ga2FYVnpPaUEwY0hnN1hGeHVJQ0F0ZDJWaWEybDBMV0p2ZUMxemFYcHBibWM2SUdKdmNtUmxjaTFpYjNnN1hGeHVJQ0FnSUNBZ0lDQWdJR0p2ZUMxemFYcHBibWM2SUdKdmNtUmxjaTFpYjNnN1hGeHVJQ0J0WVhKbmFXNDZJREFnTXlVN1hGeHVmVnhjYmk1bFpHbDBiM0l0Y21Wd2JIa3RiM1p2SUM1bGFpMXlaWEJzZVY5ZlltOTBJQzVsYWkxeVpYQnNlVjlmY0hWaUlIdGNYRzRnSUdKaFkydG5jbTkxYm1RNklDTm1aalZoTURBN1hGeHVJQ0J0WVhKbmFXNHRjbWxuYUhRNklEWWxPMXhjYm4xY1hHNHVaV1JwZEc5eUxYSmxjR3g1TFc5MmJ5QXVaV290Y21Wd2JIbGZYMkp2ZENBdVpXb3RjbVZ3YkhsZlgzQjFZaUErSUhOd1lXNGdlMXhjYmlBZ1pHbHpjR3hoZVRvZ0xYZGxZbXRwZEMxaWIzZzdYRnh1SUNCa2FYTndiR0Y1T2lBdGJYTXRabXhsZUdKdmVEdGNYRzRnSUdScGMzQnNZWGs2SUdac1pYZzdYRnh1SUNBdGQyVmlhMmwwTFdKdmVDMWhiR2xuYmpvZ1kyVnVkR1Z5TzF4Y2JpQWdJQ0FnSUMxdGN5MW1iR1Y0TFdGc2FXZHVPaUJqWlc1MFpYSTdYRnh1SUNBZ0lDQWdJQ0FnSUdGc2FXZHVMV2wwWlcxek9pQmpaVzUwWlhJN1hGeHVJQ0F0ZDJWaWEybDBMV0p2ZUMxd1lXTnJPaUJqWlc1MFpYSTdYRnh1SUNBZ0lDQWdMVzF6TFdac1pYZ3RjR0ZqYXpvZ1kyVnVkR1Z5TzF4Y2JpQWdJQ0FnSUNBZ0lDQnFkWE4wYVdaNUxXTnZiblJsYm5RNklHTmxiblJsY2p0Y1hHNGdJR1p2Ym5RdGMybDZaVG9nTVRod2VEdGNYRzRnSUdOdmJHOXlPaUIzYUdsMFpUdGNYRzU5WEZ4dUxtVmthWFJ2Y2kxeVpYQnNlUzF2ZG04Z0xtVnFMWEpsY0d4NVgxOWliM1FnTG1WcUxYSmxjR3g1WDE5allXNWpaV3dnZTF4Y2JpQWdZbTl5WkdWeU9pQXhjSGdnYzI5c2FXUWdJMk00WXpkall6dGNYRzU5WEZ4dUxtVmthWFJ2Y2kxeVpYQnNlUzF2ZG04Z0xtVnFMWEpsY0d4NVgxOWliM1FnTG1WcUxYSmxjR3g1WDE5allXNWpaV3dnUGlCemNHRnVJSHRjWEc0Z0lHUnBjM0JzWVhrNklDMTNaV0pyYVhRdFltOTRPMXhjYmlBZ1pHbHpjR3hoZVRvZ0xXMXpMV1pzWlhoaWIzZzdYRnh1SUNCa2FYTndiR0Y1T2lCbWJHVjRPMXhjYmlBZ0xYZGxZbXRwZEMxaWIzZ3RZV3hwWjI0NklHTmxiblJsY2p0Y1hHNGdJQ0FnSUNBdGJYTXRabXhsZUMxaGJHbG5iam9nWTJWdWRHVnlPMXhjYmlBZ0lDQWdJQ0FnSUNCaGJHbG5iaTFwZEdWdGN6b2dZMlZ1ZEdWeU8xeGNiaUFnTFhkbFltdHBkQzFpYjNndGNHRmphem9nWTJWdWRHVnlPMXhjYmlBZ0lDQWdJQzF0Y3kxbWJHVjRMWEJoWTJzNklHTmxiblJsY2p0Y1hHNGdJQ0FnSUNBZ0lDQWdhblZ6ZEdsbWVTMWpiMjUwWlc1ME9pQmpaVzUwWlhJN1hGeHVJQ0JtYjI1MExYTnBlbVU2SURFNGNIZzdYRnh1SUNCamIyeHZjam9nSXpZek5XWTFaanRjWEc1OVhGeHVMbVZrYVhSdmNpMXlaWEJzZVMxdmRtOGdMbVZxTFhKbGNHeDVYMTl0YzJjZ2UxeGNiaUFnWW1GamEyZHliM1Z1WkRvZ2NtZGlZU2d3TENBd0xDQXdMQ0F3TGpjcE8xeGNiaUFnY0dGa1pHbHVaeTEwYjNBNklERXdKVHRjWEc0Z0lHSnZjbVJsY2kxeVlXUnBkWE02SURWd2VEdGNYRzRnSUdadmJuUXRjMmw2WlRvZ01UVndlRHRjWEc0Z0lIZHBaSFJvT2lBNE1DVTdYRnh1SUNCdFlYSm5hVzR0YkdWbWREb2dNVEFsTzF4Y2JpQWdiV0Z5WjJsdUxYUnZjRG9nTFRJbE8xeGNiaUFnTFhkbFltdHBkQzEwY21GdWMyWnZjbTA2SUhSeVlXNXpiR0YwWlROa0tEQXNJQzA1TUNVc0lEQXBPMXhjYmlBZ0lDQWdJQ0FnSUNCMGNtRnVjMlp2Y20wNklIUnlZVzV6YkdGMFpUTmtLREFzSUMwNU1DVXNJREFwTzF4Y2JpQWdkbWx6YVdKcGJHbDBlVG9nZG1semFXSnNaVHRjWEc0Z0lHOXdZV05wZEhrNklERTdYRnh1ZlZ4Y2JpNWxaR2wwYjNJdGNtVndiSGt0YjNadklDNWxhaTF5WlhCc2VWOWZiWE5uSUQ0Z1pHbDJJSHRjWEc0Z0lHUnBjM0JzWVhrNklDMTNaV0pyYVhRdFltOTRPMXhjYmlBZ1pHbHpjR3hoZVRvZ0xXMXpMV1pzWlhoaWIzZzdYRnh1SUNCa2FYTndiR0Y1T2lCbWJHVjRPMXhjYmlBZ0xYZGxZbXRwZEMxaWIzZ3RZV3hwWjI0NklHTmxiblJsY2p0Y1hHNGdJQ0FnSUNBdGJYTXRabXhsZUMxaGJHbG5iam9nWTJWdWRHVnlPMXhjYmlBZ0lDQWdJQ0FnSUNCaGJHbG5iaTFwZEdWdGN6b2dZMlZ1ZEdWeU8xeGNiaUFnTFhkbFltdHBkQzFpYjNndGNHRmphem9nWTJWdWRHVnlPMXhjYmlBZ0lDQWdJQzF0Y3kxbWJHVjRMWEJoWTJzNklHTmxiblJsY2p0Y1hHNGdJQ0FnSUNBZ0lDQWdhblZ6ZEdsbWVTMWpiMjUwWlc1ME9pQmpaVzUwWlhJN1hGeHVmVnhjYmk1bFpHbDBiM0l0Y21Wd2JIa3RiM1p2SUM1bGFpMXlaWEJzZVY5ZmJYTm5JSE53WVc0Z2UxeGNiaUFnWTI5c2IzSTZJSGRvYVhSbE8xeGNibjFjWEc1Y0lpd2dYQ0pjSWwwcE8xeHVYRzR2THlCbGVIQnZjblJ6WEc1Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QmtPaTkzWldJdmJtOWtaVjl0YjJSMWJHVnpMeTR3TGpJekxqRkFZM056TFd4dllXUmxjaUZrT2k5M1pXSXZibTlrWlY5dGIyUjFiR1Z6TDNCdmMzUmpjM010Ykc5aFpHVnlMMnhwWWo5N2ZTRmtPaTkzWldJdmJtOWtaVjl0YjJSMWJHVnpMeTR5TGpJdU0wQnNaWE56TFd4dllXUmxjaUV1TDNOeVl5OXlaWEJzZVM1c1pYTnpYRzR2THlCdGIyUjFiR1VnYVdRZ1BTQTNNVnh1THk4Z2JXOWtkV3hsSUdOb2RXNXJjeUE5SURBaVhTd2ljMjkxY21ObFVtOXZkQ0k2SWlKOVxcbi8vIyBzb3VyY2VVUkw9d2VicGFjay1pbnRlcm5hbDovLy83MVxcblwiKTtcblxuLyoqKi8gfSksXG4vKiA3MiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbmV2YWwoXCJcXG5cXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXFxcIl9fZXNNb2R1bGVcXFwiLCB7XFxuICB2YWx1ZTogdHJ1ZVxcbn0pO1xcblxcbnZhciBfZWRpdG9yID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcXG5cXG52YXIgX2VkaXRvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9lZGl0b3IpO1xcblxcbnZhciBfZXhpZkpzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3Myk7XFxuXFxudmFyIF9leGlmSnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXhpZkpzKTtcXG5cXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDc0KTtcXG5cXG52YXIgX2NvcmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xcblxcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XFxuXFxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfSBlbHNlIHsgcmV0dXJuIEFycmF5LmZyb20oYXJyKTsgfSB9XFxuXFxudmFyIFBvc3QgPSBfZWRpdG9yMi5kZWZhdWx0LmV4dGVuZCh7XFxuICBpbml0OiBmdW5jdGlvbiBpbml0KHByb3BzKSB7XFxuICAgIHZhciBfdGhpcyA9IHRoaXM7XFxuXFxuICAgIC8vZGVidWdnZXI7XFxuICAgIHByb3BzID0gT2JqZWN0LmFzc2lnbih7fSwge1xcbiAgICAgIHRhZ19uYW1lOiAnZWRpdG9yLXBvc3Qtb3ZvJyxcXG4gICAgICBjb25maWc6IHtcXG4gICAgICAgIFRJVExFX0VNUFRZOiAn5qCH6aKY5LiN6IO95Li656m6JyxcXG4gICAgICAgIFRJVExFX1RPT19MT05HOiAn5qCH6aKY5aSq6ZW/Li4uJyxcXG4gICAgICAgIENPTlRFTlRfRU1QVFk6ICfnvJbovpHlhoXlrrnkuI3og73kuLrnqbonLFxcbiAgICAgICAgUEhPVE9fVE9PX01BTlk6ICfkvaDkvKDnmoTnhafniYflpKrlpJrkuoblkKcuLi4nLFxcbiAgICAgICAgU01JTEVfVE9PX01BTlk6ICfkvaDlj5HnmoTooajmg4XlpKrlpJrkuoblkKcuLi4nLFxcbiAgICAgICAgV09SRF9UT09fTUFOWTogJ+S9oOWGmeeahOWtl+aVsOWkquWkmuS6huWQpy4uLicsXFxuICAgICAgICBQSE9ORV9UT09fQklHOiAn5Zu+54mH5aSq5aSn5LqGJyxcXG4gICAgICAgIFNVQ0NFU1M6ICflj5HooajmiJDlip8nLFxcbiAgICAgICAgTUFYX1NNSUxFUzogMjBcXG4gICAgICAgIC8vLFNNSUxFX01BWF9MRU46MzBcXG4gICAgICAgIC8vICxQSE9UT19NQVhfTEVOOjZcXG4gICAgICAgICwgTUFYX1BIT1RPRVM6IDZcXG4gICAgICAgIC8vLFBIT1RPX01BWF9TSVpFOjEwMjQqMTBcXG4gICAgICAgICwgTUFYX0NPTlRFTlRfV09SRFM6IDgwMCxcXG4gICAgICAgIE1BWF9USVRMRV9XT1JEUzogNTAsXFxuXFxuICAgICAgICBNQVhfU0laRV9QSE9UTzogMTAyNCAqIDEwMjQgKiA0XFxuICAgICAgfVxcbiAgICB9LCBwcm9wcyk7XFxuXFxuICAgIHRoaXMuX3N1cGVyKHByb3BzKTtcXG5cXG4gICAgdGhpcy5fbWFwX2Jhc2U2NCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XFxuICAgIHRoaXMudXBsb2FkX3BpY3R1cmVzID0gW107XFxuXFxuICAgIHRoaXMuX2hhbmRsZUNob29zZUltZyhmdW5jdGlvbiAoaW1nLCBwcm9wcykge1xcblxcbiAgICAgIGltZy5zZXRBdHRyaWJ1dGUoJ3VpZCcsIHByb3BzLnVpZCk7XFxuXFxuICAgICAgdmFyIGh0bWxfID0gX3RoaXMuJGNvbnRlbnQuaHRtbCgpLnRyaW0oKTtcXG5cXG4gICAgICB2YXIgZGVmYXVsdF92YWx1ZSA9IF90aGlzLiRjb250ZW50LmF0dHIoJ2RlZmF1bHRWYWx1ZScpLnRyaW0oKTtcXG5cXG4gICAgICBpZiAoaHRtbF8gPT09IGRlZmF1bHRfdmFsdWUpIF90aGlzLiRjb250ZW50Lmh0bWwoJycpO1xcblxcbiAgICAgIHZhciBpbWdfd3JhcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcXG4gICAgICBpbWdfd3JhcC5hcHBlbmRDaGlsZChpbWcpO1xcblxcbiAgICAgIC8vLy8vLy8vLy8vL1xcblxcbiAgICAgIF90aGlzLl9hcHBlbmRUb0xhc3RNb2RpZml5RWwoaW1nX3dyYXApO1xcblxcbiAgICAgIC8vLy8vLy8vLy9cXG4gICAgICBwcm9wcy5iYXNlNjQgPSBpbWcuc3JjO1xcblxcbiAgICAgIF90aGlzLl9tYXBfYmFzZTY0W3Byb3BzLnVpZF0gPSBwcm9wcztcXG5cXG4gICAgICBfdGhpcy5fZ2V0VXBsb2FkUGljdHVyZXMoKTtcXG5cXG4gICAgICAvLy9cXG4gICAgICBfdGhpcy5fc2V0TGFzdEVkaXRFbChfdGhpcy4kY29udGVudCk7XFxuICAgIH0pO1xcblxcbiAgICAvL2NvbnNvbGUubG9nKCdwb3N0IGNvbnN0cnVjdG9yJyk7XFxuICB9LFxcbiAgX2dldFVwbG9hZFBpY3R1cmVzOiBmdW5jdGlvbiBfZ2V0VXBsb2FkUGljdHVyZXMoKSB7XFxuICAgIHZhciBfdGhpczIgPSB0aGlzO1xcblxcbiAgICB2YXIgYmFzZTY0X2ltZ3MgPSBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KCQoJ2ltZy5mcm9tLWlucHV0LW92bycsIHRoaXMuZWwpKSk7XFxuXFxuICAgIHRoaXMudXBsb2FkX3BpY3R1cmVzID0gW107XFxuICAgIGJhc2U2NF9pbWdzLmZvckVhY2goZnVuY3Rpb24gKGltZywgaSkge1xcbiAgICAgIHZhciB1aWQgPSBpbWcuZ2V0QXR0cmlidXRlKCd1aWQnKTtcXG5cXG4gICAgICBfdGhpczIudXBsb2FkX3BpY3R1cmVzLnB1c2goX3RoaXMyLl9tYXBfYmFzZTY0W3VpZF0pO1xcbiAgICB9KTtcXG5cXG4gICAgLy9cXHRjb25zb2xlLmxvZyh0aGlzLnVwbG9hZF9waWN0dXJlcyk7XFxuICB9LFxcbiAgX2hhbmRsZUZvclRob3NlOiBmdW5jdGlvbiBfaGFuZGxlRm9yVGhvc2UoKSB7XFxuICAgIHZhciBfdGhpczMgPSB0aGlzO1xcblxcbiAgICB0aGlzLl9zdXBlcigpO1xcblxcbiAgICB0aGlzLiRjb250ZW50Lm9uKCdpbnB1dCcsIGZ1bmN0aW9uIChlKSB7XFxuICAgICAgX3RoaXMzLl9zZXRMYXN0RWRpdEVsKF90aGlzMy5fZWRpdExhc3RDaGlsZCgpKTtcXG4gICAgICBfdGhpczMuX2dldFVwbG9hZFBpY3R1cmVzKCk7XFxuICAgICAgX3RoaXMzLl9yZWNvcmRMYXN0UmFuZ2UoMCk7XFxuICAgIH0pO1xcblxcbiAgICB0aGlzLiRjb250ZW50Lm9uKCd0b3VjaGVuZCcsIGZ1bmN0aW9uIChlKSB7XFxuICAgICAgX3RoaXMzLl9yZWNvcmRMYXN0UmFuZ2UoNTY2KTtcXG4gICAgfSk7XFxuXFxuICAgIHRoaXMuJHRpdGxlLm9uKCdmb2N1cycsIHRoaXMuX2hhbmRsZV9idWdfZm9jdXMuYmluZCh0aGlzKSk7XFxuICAgIHRoaXMuJHRpdGxlLm9uKCdibHVyJywgdGhpcy5faGFuZGxlX2J1Z19ibHVyLmJpbmQodGhpcykpO1xcblxcbiAgICB7XFxuICAgICAgdmFyIGkgPSAwO1xcbiAgICAgICQodGhpcy5jb25zdHJ1Y3Rvci5FTF9TTUlMRV9JQ09OLCB0aGlzLmVsKS5vbignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xcbiAgICAgICAgKytpICUgMiAhPSAwID8gX3RoaXMzLmVtb2ppX3BhbmVsLmhpZGUoKSA6IF90aGlzMy5lbW9qaV9wYW5lbC5zaG93KCk7XFxuICAgICAgfSk7XFxuICAgIH1cXG4gIH0sXFxuICBfaGFuZGxlQ2hvb3NlSW1nOiBmdW5jdGlvbiBfaGFuZGxlQ2hvb3NlSW1nKGZuKSB7XFxuICAgIHZhciBfdGhpczQgPSB0aGlzO1xcblxcbiAgICB2YXIgJGNob29zZWltZyA9ICQoJy5lal9jb21tZW50X19jaG9vc2VpbWcnLCB0aGlzLmVsKTtcXG5cXG4gICAgJGNob29zZWltZ1swXS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XFxuICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXFxuXFxuICAgICAgdmFyIF8kY2hvb3NlaW1nJDAkZmlsZXMkID0gJGNob29zZWltZ1swXS5maWxlc1swXSxcXG4gICAgICAgICAgbmFtZSA9IF8kY2hvb3NlaW1nJDAkZmlsZXMkLm5hbWUsXFxuICAgICAgICAgIHR5cGUgPSBfJGNob29zZWltZyQwJGZpbGVzJC50eXBlLFxcbiAgICAgICAgICBzaXplID0gXyRjaG9vc2VpbWckMCRmaWxlcyQuc2l6ZTtcXG5cXG4gICAgICAvL2ltYWdlL3BuZyBpbWFnZS9qcGVnXFxuXFxuICAgICAgaWYgKCEvaW1hZ2VcXFxcLyhwbmd8anBlZ3xnaWYpLy50ZXN0KHR5cGUpKSByZXR1cm4gX3RoaXM0Ll9kaXNwbGF5TXNnKCfor7fkuIrkvKDkuIDlvKDlm77niYcuLi4nKTtcXG5cXG4gICAgICBpZiAoc2l6ZSA+IF90aGlzNC5vcHRpb25zLmNvbmZpZy5NQVhfU0laRV9QSE9UTykgcmV0dXJuIF90aGlzNC5fZGlzcGxheU1zZygn5Zu+54mH5aSq5aSnLi4uJyk7XFxuXFxuICAgICAgdmFyIGltZ19vcmllbnRhdGlvbjtcXG5cXG4gICAgICBfZXhpZkpzMi5kZWZhdWx0LmdldERhdGEoJGNob29zZWltZ1swXS5maWxlc1swXSwgZnVuY3Rpb24gKCkge1xcbiAgICAgICAgX2V4aWZKczIuZGVmYXVsdC5nZXRBbGxUYWdzKHRoaXMpO1xcbiAgICAgICAgaW1nX29yaWVudGF0aW9uID0gX2V4aWZKczIuZGVmYXVsdC5nZXRUYWcodGhpcywgJ09yaWVudGF0aW9uJyk7XFxuICAgICAgfSk7XFxuXFxuICAgICAgdmFyIGZyZCA9IG5ldyBGaWxlUmVhZGVyKCk7XFxuXFxuICAgICAgLy9jb25zb2xlLmxvZygnZmlsZXJlYWRlciEnKTtcXG4gICAgICBmcmQuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGZ1bmN0aW9uICgpIHtcXG4gICAgICAgIHZhciBwaWMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcXG4gICAgICAgIC8vcGljLmNsYXNzTGlzdC5hZGQoJ2Zyb20taW5wdXQtb3ZvJyk7XFxuXFxuICAgICAgICBwaWMuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGZ1bmN0aW9uICgpIHtcXG5cXG4gICAgICAgICAgdmFyIHMgPSBwaWMud2lkdGggLyBwaWMuaGVpZ2h0O1xcblxcbiAgICAgICAgICAvL2FsZXJ0KHBpYy53aWR0aCk7XFxuXFxuICAgICAgICAgIC8vcGljLndpZHRoID0gbWluKHBpYy53aWR0aCxpbm5lcldpZHRoKi43NzcpO1xcblxcbiAgICAgICAgICB2YXIgZHAgPSAyO1xcblxcbiAgICAgICAgICAvL3BpYy53aWR0aCA9IGlubmVyV2lkdGgqLjc3NyAgICpkcDtcXG4gICAgICAgICAgcGljLndpZHRoID0gaW5uZXJXaWR0aCAqIC44ICogZHA7XFxuXFxuICAgICAgICAgIHZhciBjdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xcbiAgICAgICAgICB2YXIgYyA9IGN2LmdldENvbnRleHQoJzJkJyk7XFxuXFxuICAgICAgICAgIGlmIChfY29yZS5Ccm93ZXIudmVyc2lvbi5pb3MgJiYgaW1nX29yaWVudGF0aW9uID09PSA2KSB7XFxuICAgICAgICAgICAgLy9hbGVydCgncm90YXRpbmchISEnKTtcXG4gICAgICAgICAgICBjdi53aWR0aCA9IHBpYy53aWR0aCAvIHMsIGN2LmhlaWdodCA9IHBpYy53aWR0aDtcXG4gICAgICAgICAgICAvL1xcbiAgICAgICAgICAgIHZhciBzY2FsZV90b19tYXggPSBwaWMud2lkdGggLyBjdi53aWR0aDtcXG4gICAgICAgICAgICAvLzUwIC0tLSA2MFxcbiAgICAgICAgICAgIC8vXFxuICAgICAgICAgICAgY3Yud2lkdGggKj0gc2NhbGVfdG9fbWF4LCBjdi5oZWlnaHQgKj0gc2NhbGVfdG9fbWF4O1xcblxcbiAgICAgICAgICAgIHZhciB0eCA9IGN2LndpZHRoICogLjUsXFxuICAgICAgICAgICAgICAgIHR5ID0gY3YuaGVpZ2h0ICogLjUsXFxuICAgICAgICAgICAgICAgIHggPSB0eCxcXG4gICAgICAgICAgICAgICAgeSA9IHR5O1xcbiAgICAgICAgICAgIGMudHJhbnNsYXRlKHgsIHkpO1xcbiAgICAgICAgICAgIGMucm90YXRlKFBJICogLjUpO1xcbiAgICAgICAgICAgIGMuZHJhd0ltYWdlKHBpYywgLXR5LCAtdHgsIHBpYy53aWR0aCAqIHNjYWxlX3RvX21heCwgcGljLndpZHRoIC8gcyAqIHNjYWxlX3RvX21heCk7XFxuICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgY3Yud2lkdGggPSBwaWMud2lkdGgsIGN2LmhlaWdodCA9IHBpYy53aWR0aCAvIHM7XFxuICAgICAgICAgICAgYy5kcmF3SW1hZ2UocGljLCAwLCAwLCBjdi53aWR0aCwgY3YuaGVpZ2h0KTtcXG4gICAgICAgICAgfVxcblxcbiAgICAgICAgICB2YXIgcGljXyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xcbiAgICAgICAgICB2YXIgcXVhbGl0eSA9IC45MztcXG5cXG4gICAgICAgICAgcGljXy53aWR0aCA9IGN2LndpZHRoICogKDEgLyBkcCksIHBpY18uaGVpZ2h0ID0gY3YuaGVpZ2h0ICogKDEgLyBkcCk7XFxuXFxuICAgICAgICAgIC8vcGljXy5zZXRBdHRyaWJ1dGUoJ3Vuc2VsZWN0YWJsZScsJ29uJyk7XFxuICAgICAgICAgIHBpY18uc2V0QXR0cmlidXRlKCdxdWFsaXR5LW92bycsIHF1YWxpdHkpO1xcbiAgICAgICAgICBwaWNfLnNldEF0dHJpYnV0ZSgnc3VmZml4LW92bycsIHR5cGUubWF0Y2goL2ltYWdlXFxcXC8oXFxcXHcrKS8pWzFdKTtcXG4gICAgICAgICAgcGljXy5jbGFzc0xpc3QuYWRkKCdmcm9tLWlucHV0LW92bycpO1xcbiAgICAgICAgICBwaWNfLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcXG4gICAgICAgICAgICByZXR1cm4gZm4ocGljXywgeyBuYW1lOiBuYW1lLCB0eXBlOiB0eXBlLCB1aWQ6ICd1aWQtJyArIChNYXRoLnJhbmRvbSgpICsgJycpLnNsaWNlKDIpIH0pO1xcbiAgICAgICAgICB9O1xcbiAgICAgICAgICBwaWNfLnNyYyA9IGN2LnRvRGF0YVVSTCh0eXBlLCBxdWFsaXR5KTtcXG4gICAgICAgICAgLy9waWNfLnNyYyA9IHJlcXVpcmUoJy4vY29tbW9uL2ltZy9hLmpwZycpO1xcbiAgICAgICAgfSk7XFxuICAgICAgICBwaWMuc3JjID0gZnJkLnJlc3VsdDtcXG4gICAgICB9KTtcXG5cXG4gICAgICBmcmQucmVhZEFzRGF0YVVSTCgkY2hvb3NlaW1nWzBdLmZpbGVzWzBdKTtcXG5cXG4gICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xcblxcbiAgICB9KTtcXG4gIH0sXFxuICBfYmluZERlZmF1bHRWYWx1ZTogZnVuY3Rpb24gX2JpbmREZWZhdWx0VmFsdWUoKSB7XFxuICAgIHRoaXMuX3N1cGVyKCk7XFxuXFxuICAgIHZhciB0aGF0ID0gdGhpcztcXG4gICAgdGhpcy4kdGl0bGUub24oJ2JsdXInLCBmdW5jdGlvbiAoZSkge1xcblxcbiAgICAgIC8vdGhhdC4kYm90X3BpY2suc2hvdygpO1xcbiAgICAgIHRoYXQuZW1vamlfcGFuZWwuc2hvdygpO1xcbiAgICAgIC8vI2FkYWRhZFxcbiAgICAgIHZhciBodG1sXyA9IHRoaXMudmFsdWUudHJpbSgpO1xcblxcbiAgICAgIHZhciBkZWZhdWx0X3ZhbHVlID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ2RlZmF1bHRWYWx1ZScpLnRyaW0oKTtcXG5cXG4gICAgICAvL2NvbnNvbGUubG9nKGh0bWxfLGRlZmF1bHRfdmFsdWUsIGh0bWxfPT09ZGVmYXVsdF92YWx1ZSk7XFxuICAgICAgLy9pb3Mg6L+Y5Lya5bim5LiKPGJyPuOAguOAguOAguOAguOAglxcbiAgICAgIC8vYWxlcnQoYGJsdXI6JHtodG1sX30sbGVuZ3RoOiR7aHRtbF8ubGVuZ3RofWApO1xcbiAgICAgIGlmIChodG1sXyA9PT0gJycgfHwgaHRtbF8gPT09ICc8YnI+Jykge1xcbiAgICAgICAgdGhpcy52YWx1ZSA9IGRlZmF1bHRfdmFsdWU7XFxuICAgICAgICB0aGlzLmNsYXNzTGlzdC5hZGQoJ2RlZmF1bHRfdmFsdWUtb3ZvLTInKTtcXG4gICAgICB9XFxuICAgIH0pO1xcblxcbiAgICB0aGlzLiR0aXRsZS5vbignZm9jdXMnLCBmdW5jdGlvbiAoZSkge1xcblxcbiAgICAgIC8vdGhhdC4kYm90X3BpY2suaGlkZSgpO1xcbiAgICAgIHRoYXQuZW1vamlfcGFuZWwuaGlkZSgpO1xcblxcbiAgICAgIHRoaXMuY2xhc3NMaXN0LnJlbW92ZSgnZGVmYXVsdF92YWx1ZS1vdm8tMicpO1xcblxcbiAgICAgIHZhciBodG1sXyA9IHRoaXMudmFsdWUudHJpbSgpO1xcblxcbiAgICAgIHZhciBkZWZhdWx0X3ZhbHVlID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ2RlZmF1bHRWYWx1ZScpLnRyaW0oKTtcXG5cXG4gICAgICBpZiAoaHRtbF8gPT09IGRlZmF1bHRfdmFsdWUpIHRoaXMudmFsdWUgPSAnJztcXG4gICAgfSk7XFxuICB9XFxuICAvLyBzZW5kXFxuICAsXFxuICBfZWRpdFN1Y2Nlc3M6IGZ1bmN0aW9uIF9lZGl0U3VjY2VzcygpIHtcXG4gICAgdmFyIF90aGlzNSA9IHRoaXM7XFxuXFxuICAgIHZhciBjb25maWcgPSB0aGlzLm9wdGlvbnMuY29uZmlnO1xcbiAgICAvLyBUSVRMRV9FTVBUWTon5qCH6aKY5LiN6IO95Li656m6J1xcbiAgICAvLyAsVElUTEVfVE9PX0xPTkc6J+agh+mimOWkqumVvy4uLidcXG4gICAgLy8gLENPTlRFTlRfRU1QVFk6J+e8lui+keWGheWuueS4jeiDveS4uuepuidcXG4gICAgLy8gLFBIT1RPX1RPT19NQU5ZOifkvaDkvKDnmoTnhafniYflpKrlpJrkuoblkKcuLi4nXFxuICAgIC8vICxTTUlMRV9UT09fTUFOWTon5L2g5Y+R55qE6KGo5oOF5aSq5aSa5LqG5ZCnLi4uJ1xcbiAgICAvLyAsV09SRF9UT09fTUFOWTon5L2g5YaZ55qE5a2X5pWw5aSq5aSa5LqG5ZCnLi4uJ1xcbiAgICAvLyAsUEhPTkVfVE9PX0JJRzon5Zu+54mH5aSq5aSn5LqGJ1xcbiAgICAvLyAsU1VDQ0VTOiflj5HooajmiJDlip8nXFxuICAgIC8vICxNQVhfU01JTEVTIDoyMFxcbiAgICAvLyAvLyxTTUlMRV9NQVhfTEVOOjMwXFxuICAgIC8vIC8vICxQSE9UT19NQVhfTEVOOjZcXG4gICAgLy8gLE1BWF9QSE9UT0VTOjZcXG4gICAgLy8gLy8sUEhPVE9fTUFYX1NJWkU6MTAyNCoxMFxcbiAgICAvLyAsTUFYX0NPTlRFTlRfV09SRFM6ODAwXFxuICAgIC8vICxNQVhfVElUTEVfV09SRFM6NTBcXG5cXG4gICAgLy8gLE1BWF9TSVpFX1BIT1RPIDogMTAyNCoxMDI0KjRcXG5cXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyKSB7XFxuICAgICAgdmFyIHRoYXQgPSBfdGhpczU7XFxuICAgICAgdmFyIHZfID0gJyc7XFxuICAgICAgdmFyIHYyXyA9ICcnO1xcbiAgICAgIHZhciBoYW5kbGUgPSBmdW5jdGlvbiAoKSB7XFxuICAgICAgICB2YXIgdiA9IHRoYXQuJHRpdGxlLnZhbCgpLnRyaW0oKTtcXG5cXG4gICAgICAgIGlmICghdi5sZW5ndGggfHwgdiA9PT0gdGhhdC4kdGl0bGUuYXR0cignZGVmYXVsdFZhbHVlJykpIHtcXG5cXG4gICAgICAgICAgcmV0dXJuIHRoYXQuX2Rpc3BsYXlNc2coY29uZmlnLlRJVExFX0VNUFRZKTtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIHJldHVybiAnbmV4dFN1Y2Nlc3Nvcic7XFxuICAgICAgfS5hZnRlcihmdW5jdGlvbiAoKSB7XFxuICAgICAgICB2YXIgdiA9IHRoYXQuJHRpdGxlLnZhbCgpLnRyaW0oKTtcXG4gICAgICAgIGlmICh2Lmxlbmd0aCA+IGNvbmZpZy5NQVhfVElUTEVfV09SRFMpIHtcXG4gICAgICAgICAgcmV0dXJuIHRoYXQuX2Rpc3BsYXlNc2coY29uZmlnLlRJVExFX1RPT19MT05HKTtcXG4gICAgICAgIH1cXG4gICAgICAgIHJldHVybiAnbmV4dFN1Y2Nlc3Nvcic7XFxuICAgICAgfSkuYWZ0ZXIoZnVuY3Rpb24gKCkge1xcbiAgICAgICAgdmFyIHBob3RvX2xlbiA9ICQoJy5mcm9tLWlucHV0LW92bycsIHRoYXQuJGNvbnRlbnQpLmxlbmd0aDtcXG4gICAgICAgIHZhciBzbWlsZV9sZW4gPSAkKCcuc21pbGUtb3ZvJywgdGhhdC4kY29udGVudCkubGVuZ3RoO1xcbiAgICAgICAgdmFyIHYgPSB0aGF0LiRjb250ZW50WzBdLnRleHRDb250ZW50LnRyaW0oKTtcXG5cXG4gICAgICAgIGlmICgoIXYubGVuZ3RoIHx8IHYgPT09IHRoYXQuJGNvbnRlbnRbMF0uZ2V0QXR0cmlidXRlKCdkZWZhdWx0VmFsdWUnKSkgJiYgIXBob3RvX2xlbiAmJiAhc21pbGVfbGVuKSB7XFxuICAgICAgICAgIHJldHVybiB0aGF0Ll9kaXNwbGF5TXNnKGNvbmZpZy5DT05URU5UX0VNUFRZKTtcXG4gICAgICAgIH1cXG4gICAgICAgIHJldHVybiAnbmV4dFN1Y2Nlc3Nvcic7XFxuICAgICAgfSkuYWZ0ZXIoZnVuY3Rpb24gKCkge1xcbiAgICAgICAgdmFyIHNtaWxlX2xlbiA9ICQoJy5zbWlsZS1vdm8nLCB0aGF0LiRjb250ZW50KS5sZW5ndGg7XFxuXFxuICAgICAgICAvL0NPTlNPTEUuTEdPXFxuICAgICAgICAvL2NvbnNvbGUubG9nKCdzbWlsZV9sZW46JyxzbWlsZV9sZW4pO1xcblxcbiAgICAgICAgaWYgKHNtaWxlX2xlbiA+IGNvbmZpZy5NQVhfU01JTEVTKSByZXR1cm4gdGhhdC5fZGlzcGxheU1zZyhjb25maWcuU01JTEVfVE9PX01BTlkpO1xcblxcbiAgICAgICAgcmV0dXJuICduZXh0U3VjY2Vzc29yJztcXG4gICAgICB9KS5hZnRlcihmdW5jdGlvbiAoKSB7XFxuICAgICAgICB2YXIgcGhvdG9fbGVuID0gJCgnLmZyb20taW5wdXQtb3ZvJywgdGhhdC4kY29udGVudCkubGVuZ3RoO1xcblxcbiAgICAgICAgaWYgKHBob3RvX2xlbiA+IGNvbmZpZy5NQVhfUEhPVE9FUykgcmV0dXJuIHRoYXQuX2Rpc3BsYXlNc2coY29uZmlnLlBIT1RPX1RPT19NQU5ZKTtcXG5cXG4gICAgICAgIHJldHVybiAnbmV4dFN1Y2Nlc3Nvcic7XFxuICAgICAgfSkuYWZ0ZXIoZnVuY3Rpb24gKCkge1xcbiAgICAgICAgdmFyIHYgPSB0aGF0LiRjb250ZW50WzBdLnRleHRDb250ZW50LnRyaW0oKTtcXG4gICAgICAgIGlmICh2Lmxlbmd0aCA+IGNvbmZpZy5NQVhfQ09OVEVOVF9XT1JEUykge1xcbiAgICAgICAgICByZXR1cm4gdGhhdC5fZGlzcGxheU1zZyhjb25maWcuV09SRF9UT09fTUFOWSk7XFxuICAgICAgICB9XFxuXFxuICAgICAgICByZXR1cm4gJ25leHRTdWNjZXNzb3InO1xcbiAgICAgIH0pLmFmdGVyKGZ1bmN0aW9uICgpIHtcXG4gICAgICAgIHIoe1xcbiAgICAgICAgICBodG1sX3RpdGxlOiB0aGF0Ll9yZXNBZGFwdGVyKHRoYXQuJHRpdGxlLnZhbCgpLnRyaW0oKSksXFxuICAgICAgICAgIGh0bWxfY29udGVudDogdGhhdC5fcmVzQWRhcHRlcih0aGF0LiRjb250ZW50WzBdLmlubmVySFRNTC50cmltKCkpLFxcbiAgICAgICAgICB0ZXh0X2NvbnRlbnQ6IHRoYXQuX3Jlc0FkYXB0ZXIodGhhdC4kY29udGVudFswXS50ZXh0Q29udGVudC50cmltKCkpXFxuXFxuICAgICAgICB9KTtcXG4gICAgICB9KTtcXG5cXG4gICAgICBoYW5kbGUoKTtcXG4gICAgfSk7XFxuICB9LFxcbiAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkge1xcbiAgICB0aGlzLl9zdXBlcigpO1xcbiAgICB0aGlzLiR0aXRsZS52YWwodGhpcy4kdGl0bGUuYXR0cignZGVmYXVsdFZhbHVlJykpO1xcbiAgICB0aGlzLiR0aXRsZVswXS5jbGFzc0xpc3QuYWRkKCdkZWZhdWx0X3ZhbHVlLW92by0yJyk7XFxuXFxuICAgIHRoaXMudXBsb2FkX3BpY3R1cmVzID0gW107XFxuICB9LFxcbiAgX2hhbmRsZUNvbmZpcm06IGZ1bmN0aW9uIF9oYW5kbGVDb25maXJtKCkge1xcbiAgICB2YXIgX3RoaXM2ID0gdGhpcztcXG5cXG4gICAgJCh0aGlzLmNvbnN0cnVjdG9yLkVMX0NPTkZJUk0pLm9uKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XFxuXFxuICAgICAgX3RoaXM2Ll9lZGl0U3VjY2VzcygpLnRoZW4oZnVuY3Rpb24gKHJlcykge1xcblxcbiAgICAgICAgLy9kZWJ1Z2dlcjtcXG5cXG4gICAgICAgIHZhciB0ZXh0X2NvbnRlbnQgPSByZXMudGV4dF9jb250ZW50LFxcbiAgICAgICAgICAgIGh0bWxfY29udGVudCA9IHJlcy5odG1sX2NvbnRlbnQsXFxuICAgICAgICAgICAgaHRtbF90aXRsZSA9IHJlcy5odG1sX3RpdGxlO1xcblxcblxcbiAgICAgICAgX3RoaXM2LnRyaWdnZXIoJ2NvbXBsZXRlJywge1xcbiAgICAgICAgICBodG1sX2NvbnRlbnQ6IGh0bWxfY29udGVudCwgdGV4dF9jb250ZW50OiB0ZXh0X2NvbnRlbnQsIGh0bWxfdGl0bGU6IGh0bWxfdGl0bGUsXFxuICAgICAgICAgIHVwbG9hZF9waWN0dXJlczogX3RoaXM2LnVwbG9hZF9waWN0dXJlcyxcXG4gICAgICAgICAgZWxfdGFyZ2V0OiBfdGhpczYuZWxfdGFyZ2V0LFxcbiAgICAgICAgICBlZGl0X3RpbWU6IERhdGUubm93KClcXG4gICAgICAgIH0pO1xcbiAgICAgIH0pO1xcbiAgICB9KTtcXG4gIH0sXFxuICBfY3JlYXRlQ2hpbGQ6IGZ1bmN0aW9uIF9jcmVhdGVDaGlsZCgpIHtcXG4gICAgdGhpcy5fc3VwZXIoKTtcXG4gICAgLy9lZGl0b3ItcmVwbHktb3ZvXFxuICAgIHRoaXMuZWwuY2xhc3NMaXN0LmFkZCh0aGlzLmNvbnN0cnVjdG9yLkNMUyk7XFxuXFxuICAgIC8vICxDTFNfREVGQVVMVF9WQUxVRTonZGVmYXVsdF92YWx1ZS1vdm8nXFxuICAgIC8vICxFTF9DT05URU5UOidkaXZbY29udGVudC1vdm9dJ1xcbiAgICAvLyAsRUxfQ0FOQ0VMOididXR0b25bY2FuY2VsLW92b10nXFxuICAgIC8vICxFTF9DT05GSVJNOididXR0b25bY29uZmlybS1vdm9dJ1xcbiAgICAvLyAsRUxfU01JTEU6J2RpdltzbWlsZS1ob2xkZXItb3ZvXSdcXG4gICAgLy8gLEVMX1NNSUxFX0lDT046J2xpW3NtaWxlLWljb24tb3ZvXSdcXG4gICAgLy8gLEVMX0RJU1BMQVlfTVNHOidkaXZbbWVzc2FnZS1vdm9dJ1xcbiAgICB0aGlzLmVsLmlubmVySFRNTCA9ICdcXFxcbiAgICAgIDxkaXYgY2xhc3M9XFxcImVqX3dyYXAgcmVsXFxcIj5cXFxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwiYWJzIHdoXFxcIj5cXFxcbiAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJlal9jb21tZW50X19pbnB1dFxcXCI+XFxcXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJlal9jb21tZW50X190aXRsZSByZWxcXFwiPlxcXFxuICAgICAgICAgICAgICA8aW5wdXQgdGl0bGUtb3ZvIHR5cGU9XFxcInRleHRcXFwiIGRlZmF1bHRWYWx1ZT1cXFwiXFxcXHU1MkEwXFxcXHU0RTJBXFxcXHU2ODA3XFxcXHU5ODk4XFxcXHU1NERGflxcXCIgLz5cXFxcbiAgICAgICAgICAgIDwvZGl2PlxcXFxuICAgICAgICAgICAgPGRpdiBjb250ZW50LW92byBjbGFzcz1cXFwiZWpfY29tbWVudF9fY29udGVudFxcXCIgY29udGVudGVkaXRhYmxlPVxcXCJ0cnVlXFxcIiBkZWZhdWx0VmFsdWU9XFxcIlxcXFx1NUMzRFxcXFx1NjBDNVxcXFx1NTNEMVxcXFx1NjMyNVxcXFx1NTQyNy4uLlxcXCI+PHA+PC9wPjwvZGl2PlxcXFxuICAgICAgICAgIDwvZGl2PlxcXFxuICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImVqX2NvbW1lbnRfX2JvdCByZWxcXFwiPlxcXFxuICAgICAgICAgICAgPHVsPlxcXFx0XFxcXG4gICAgICAgICAgICAgIDxsaSBzbWlsZS1pY29uLW92byB0aXRsZT1cXFwiXFxcXHU2REZCXFxcXHU1MkEwXFxcXHU4ODY4XFxcXHU2MEM1XFxcIj48L2xpPlxcXFxuICAgICAgICAgICAgICA8bGkgdGl0bGU9XFxcIlxcXFx1NkRGQlxcXFx1NTJBMFxcXFx1NTZGRVxcXFx1NzI0N1xcXCI+PGlucHV0IGNsYXNzPVxcXCJlal9jb21tZW50X19jaG9vc2VpbWdcXFwiIHR5cGU9XFxcImZpbGVcXFwiLz48L2xpPlxcXFxuICAgICAgICAgICAgPC91bD5cXFxcbiAgICAgICAgICAgIDxidXR0b24gY29uZmlybS1vdm8gY2xhc3M9XFxcImVqX2NvbW1lbnRfX3B1YiByZWxcXFwiPlxcXFxuICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiYWJzIHdoXFxcIj5cXFxcdTUzRDFcXFxcdTg4Njg8L3NwYW4+XFxcXG4gICAgICAgICAgICA8L2J1dHRvbj5cXFxcbiAgICAgICAgICAgIDxidXR0b24gY2FuY2VsLW92byBjbGFzcz1cXFwiZWpfY29tbWVudF9fY2FuY2VsIHJlbFxcXCI+XFxcXG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJhYnMgd2hcXFwiPlxcXFx1NTNENlxcXFx1NkQ4ODwvc3Bhbj5cXFxcbiAgICAgICAgICAgIDwvYnV0dG9uPlxcXFxuICAgICAgICAgIDwvZGl2PlxcXFxuICAgICAgICA8L2Rpdj5cXFxcbiAgICAgICAgXFxcXG4gICAgICA8L2Rpdj5cXFxcblxcXFxuICAgICAgPGRpdiBjbGFzcz1cXFwic21pbGUtaG9sZGVyXFxcIiBzbWlsZS1ob2xkZXItb3ZvPlxcXFxuICAgICAgICBcXFxcbiAgICAgIDwvZGl2PlxcXFxuXFxcXG4gICAgICA8ZGl2IGNsYXNzPVxcXCJlai1jb21tZW50X19tc2cgYWJzXFxcIiBtZXNzYWdlLW92bz5cXFxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwiYWJzIHdoXFxcIj5cXFxcbiAgICAgICAgICA8c3Bhbj5cXFxcdThGOTNcXFxcdTUxNjVcXFxcdTUxRTBcXFxcdTRFMkFcXFxcdTVCNTdcXFxcdUZGMUY8L3NwYW4+XFxcXG4gICAgICAgIDwvZGl2PlxcXFxuICAgICAgPC9kaXY+XFxcXG4gICAgJztcXG5cXG4gICAgdGhpcy4kY29udGVudCA9ICQodGhpcy5jb25zdHJ1Y3Rvci5FTF9DT05URU5ULCB0aGlzLmVsKTtcXG4gICAgdGhpcy4kdGl0bGUgPSAkKHRoaXMuY29uc3RydWN0b3IuRUxfVElUTEUsIHRoaXMuZWwpO1xcblxcbiAgICB0aGlzLiRtc2dfaG9sZGVyID0gJCh0aGlzLmNvbnN0cnVjdG9yLkVMX0RJU1BMQVlfTVNHLCB0aGlzLmVsKTtcXG4gICAgdGhpcy4kbXNnX3RleHQgPSAkKCdzcGFuJywgdGhpcy4kbXNnX2hvbGRlcik7XFxuICB9XFxufSwge1xcbiAgQ0xTOiAnZWRpdG9yLXBvc3Qtb3ZvJyxcXG4gIEVMX1RJVExFOiAnaW5wdXRbdGl0bGUtb3ZvXSdcXG59KTtcXG5cXG5leHBvcnRzLmRlZmF1bHQgPSBQb3N0Oy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZjRzl6ZEM1cWN6ODRZbUV6SWwwc0ltNWhiV1Z6SWpwYklsQnZjM1FpTENKbGVIUmxibVFpTENKcGJtbDBJaXdpY0hKdmNITWlMQ0pQWW1wbFkzUWlMQ0poYzNOcFoyNGlMQ0owWVdkZmJtRnRaU0lzSW1OdmJtWnBaeUlzSWxSSlZFeEZYMFZOVUZSWklpd2lWRWxVVEVWZlZFOVBYMHhQVGtjaUxDSkRUMDVVUlU1VVgwVk5VRlJaSWl3aVVFaFBWRTlmVkU5UFgwMUJUbGtpTENKVFRVbE1SVjlVVDA5ZlRVRk9XU0lzSWxkUFVrUmZWRTlQWDAxQlRsa2lMQ0pRU0U5T1JWOVVUMDlmUWtsSElpd2lVMVZEUTBWVFV5SXNJazFCV0Y5VFRVbE1SVk1pTENKTlFWaGZVRWhQVkU5RlV5SXNJazFCV0Y5RFQwNVVSVTVVWDFkUFVrUlRJaXdpVFVGWVgxUkpWRXhGWDFkUFVrUlRJaXdpVFVGWVgxTkpXa1ZmVUVoUFZFOGlMQ0pmYzNWd1pYSWlMQ0pmYldGd1gySmhjMlUyTkNJc0ltTnlaV0YwWlNJc0luVndiRzloWkY5d2FXTjBkWEpsY3lJc0lsOW9ZVzVrYkdWRGFHOXZjMlZKYldjaUxDSnBiV2NpTENKelpYUkJkSFJ5YVdKMWRHVWlMQ0oxYVdRaUxDSm9kRzFzWHlJc0lpUmpiMjUwWlc1MElpd2lhSFJ0YkNJc0luUnlhVzBpTENKa1pXWmhkV3gwWDNaaGJIVmxJaXdpWVhSMGNpSXNJbWx0WjE5M2NtRndJaXdpWkc5amRXMWxiblFpTENKamNtVmhkR1ZGYkdWdFpXNTBJaXdpWVhCd1pXNWtRMmhwYkdRaUxDSmZZWEJ3Wlc1a1ZHOU1ZWE4wVFc5a2FXWnBlVVZzSWl3aVltRnpaVFkwSWl3aWMzSmpJaXdpWDJkbGRGVndiRzloWkZCcFkzUjFjbVZ6SWl3aVgzTmxkRXhoYzNSRlpHbDBSV3dpTENKaVlYTmxOalJmYVcxbmN5SXNJaVFpTENKbGJDSXNJbVp2Y2tWaFkyZ2lMQ0pwSWl3aVoyVjBRWFIwY21saWRYUmxJaXdpY0hWemFDSXNJbDlvWVc1a2JHVkdiM0pVYUc5elpTSXNJbTl1SWl3aVgyVmthWFJNWVhOMFEyaHBiR1FpTENKZmNtVmpiM0prVEdGemRGSmhibWRsSWl3aUpIUnBkR3hsSWl3aVgyaGhibVJzWlY5aWRXZGZabTlqZFhNaUxDSmlhVzVrSWl3aVgyaGhibVJzWlY5aWRXZGZZbXgxY2lJc0ltTnZibk4wY25WamRHOXlJaXdpUlV4ZlUwMUpURVZmU1VOUFRpSXNJbVZ0YjJwcFgzQmhibVZzSWl3aWFHbGtaU0lzSW5Ob2IzY2lMQ0ptYmlJc0lpUmphRzl2YzJWcGJXY2lMQ0poWkdSRmRtVnVkRXhwYzNSbGJtVnlJaXdpWm1sc1pYTWlMQ0p1WVcxbElpd2lkSGx3WlNJc0luTnBlbVVpTENKMFpYTjBJaXdpWDJScGMzQnNZWGxOYzJjaUxDSnZjSFJwYjI1eklpd2lhVzFuWDI5eWFXVnVkR0YwYVc5dUlpd2laMlYwUkdGMFlTSXNJbWRsZEVGc2JGUmhaM01pTENKblpYUlVZV2NpTENKbWNtUWlMQ0pHYVd4bFVtVmhaR1Z5SWl3aWNHbGpJaXdpY3lJc0luZHBaSFJvSWl3aWFHVnBaMmgwSWl3aVpIQWlMQ0pwYm01bGNsZHBaSFJvSWl3aVkzWWlMQ0pqSWl3aVoyVjBRMjl1ZEdWNGRDSXNJblpsY25OcGIyNGlMQ0pwYjNNaUxDSnpZMkZzWlY5MGIxOXRZWGdpTENKMGVDSXNJblI1SWl3aWVDSXNJbmtpTENKMGNtRnVjMnhoZEdVaUxDSnliM1JoZEdVaUxDSlFTU0lzSW1SeVlYZEpiV0ZuWlNJc0luQnBZMThpTENKeGRXRnNhWFI1SWl3aWJXRjBZMmdpTENKamJHRnpjMHhwYzNRaUxDSmhaR1FpTENKdmJteHZZV1FpTENKTllYUm9JaXdpY21GdVpHOXRJaXdpYzJ4cFkyVWlMQ0owYjBSaGRHRlZVa3dpTENKeVpYTjFiSFFpTENKeVpXRmtRWE5FWVhSaFZWSk1JaXdpWDJKcGJtUkVaV1poZFd4MFZtRnNkV1VpTENKMGFHRjBJaXdpWlNJc0luWmhiSFZsSWl3aWNtVnRiM1psSWl3aVgyVmthWFJUZFdOalpYTnpJaXdpVUhKdmJXbHpaU0lzSW5aZklpd2lkakpmSWl3aWFHRnVaR3hsSWl3aWRpSXNJblpoYkNJc0lteGxibWQwYUNJc0ltRm1kR1Z5SWl3aWNHaHZkRzlmYkdWdUlpd2ljMjFwYkdWZmJHVnVJaXdpZEdWNGRFTnZiblJsYm5RaUxDSnlJaXdpYUhSdGJGOTBhWFJzWlNJc0lsOXlaWE5CWkdGd2RHVnlJaXdpYUhSdGJGOWpiMjUwWlc1MElpd2lhVzV1WlhKSVZFMU1JaXdpZEdWNGRGOWpiMjUwWlc1MElpd2lZMnhsWVhJaUxDSmZhR0Z1Wkd4bFEyOXVabWx5YlNJc0lrVk1YME5QVGtaSlVrMGlMQ0owYUdWdUlpd2ljbVZ6SWl3aWRISnBaMmRsY2lJc0ltVnNYM1JoY21kbGRDSXNJbVZrYVhSZmRHbHRaU0lzSWtSaGRHVWlMQ0p1YjNjaUxDSmZZM0psWVhSbFEyaHBiR1FpTENKRFRGTWlMQ0pGVEY5RFQwNVVSVTVVSWl3aVJVeGZWRWxVVEVVaUxDSWtiWE5uWDJodmJHUmxjaUlzSWtWTVgwUkpVMUJNUVZsZlRWTkhJaXdpSkcxeloxOTBaWGgwSWwwc0ltMWhjSEJwYm1keklqb2lPenM3T3pzN1FVRkJRVHM3T3p0QlFVTkJPenM3TzBGQlEwRTdPMEZCUTBFN096czdPenRCUVVkQkxFbEJRVWxCTEU5QlFVOHNhVUpCUVU5RExFMUJRVkFzUTBGQll6dEJRVU4yUWtNc1RVRkVkVUlzWjBKQlEyeENReXhMUVVSclFpeEZRVU5hTzBGQlFVRTdPMEZCUTFRN1FVRkRRVUVzV1VGQlVVTXNUMEZCVDBNc1RVRkJVQ3hEUVVGakxFVkJRV1FzUlVGQmFVSTdRVUZEZGtKRExHZENRVUZUTEdsQ1FVUmpPMEZCUlhSQ1F5eGpRVUZUTzBGQlExSkRMSEZDUVVGWkxGRkJSRW83UVVGRlVFTXNkMEpCUVdVc1UwRkdVanRCUVVkUVF5eDFRa0ZCWXl4VlFVaFFPMEZCU1ZCRExIZENRVUZsTEdOQlNsSTdRVUZMVUVNc2QwSkJRV1VzWTBGTVVqdEJRVTFRUXl4MVFrRkJZeXhqUVU1UU8wRkJUMUJETEhWQ1FVRmpMRTlCVUZBN1FVRlJVRU1zYVVKQlFWRXNUVUZTUkR0QlFWTlFReXh2UWtGQldUdEJRVU5pTzBGQlEwRTdRVUZZVVN4VlFWbFFReXhoUVVGWk8wRkJRMkk3UVVGaVVTeFZRV05RUXl4dFFrRkJhMElzUjBGa1dEdEJRV1ZRUXl4NVFrRkJaMElzUlVGbVZEczdRVUZwUWxCRExIZENRVUZwUWl4UFFVRkxMRWxCUVV3c1IwRkJWVHRCUVdwQ2NFSTdRVUZHWVN4TFFVRnFRaXhGUVhGQ1RtcENMRXRCY2tKTkxFTkJRVkk3TzBGQmRVSkJMRk5CUVV0clFpeE5RVUZNTEVOQlFWbHNRaXhMUVVGYU96dEJRVVZCTEZOQlFVdHRRaXhYUVVGTUxFZEJRVzFDYkVJc1QwRkJUMjFDTEUxQlFWQXNRMEZCWXl4SlFVRmtMRU5CUVc1Q08wRkJRMEVzVTBGQlMwTXNaVUZCVEN4SFFVRjFRaXhGUVVGMlFqczdRVUZIUVN4VFFVRkxReXhuUWtGQlRDeERRVUZ6UWl4VlFVRkRReXhIUVVGRUxFVkJRVXQyUWl4TFFVRk1MRVZCUVdFN08wRkJSV3BEZFVJc1ZVRkJTVU1zV1VGQlNpeERRVUZwUWl4TFFVRnFRaXhGUVVGMVFuaENMRTFCUVUxNVFpeEhRVUUzUWpzN1FVRkhRU3hWUVVGSlF5eFJRVUZSTEUxQlFVdERMRkZCUVV3c1EwRkJZME1zU1VGQlpDeEhRVUZ4UWtNc1NVRkJja0lzUlVGQldqczdRVUZGUVN4VlFVRkpReXhuUWtGQlowSXNUVUZCUzBnc1VVRkJUQ3hEUVVGalNTeEpRVUZrTEVOQlFXMUNMR05CUVc1Q0xFVkJRVzFEUml4SlFVRnVReXhGUVVGd1FqczdRVUZGUVN4VlFVRkhTQ3hWUVVGUlNTeGhRVUZZTEVWQlFUQkNMRTFCUVV0SUxGRkJRVXdzUTBGQlkwTXNTVUZCWkN4RFFVRnRRaXhGUVVGdVFqczdRVUZGTVVJc1ZVRkJTVWtzVjBGQlYwTXNVMEZCVTBNc1lVRkJWQ3hEUVVGMVFpeEhRVUYyUWl4RFFVRm1PMEZCUTBGR0xHVkJRVk5ITEZkQlFWUXNRMEZCY1VKYUxFZEJRWEpDT3p0QlFVVkJPenRCUVVWQkxGbEJRVXRoTEhOQ1FVRk1MRU5CUVRSQ1NpeFJRVUUxUWpzN1FVRkZRVHRCUVVOQmFFTXNXVUZCVFhGRExFMUJRVTRzUjBGQlpXUXNTVUZCU1dVc1IwRkJia0k3TzBGQlJVRXNXVUZCUzI1Q0xGZEJRVXdzUTBGQmFVSnVRaXhOUVVGTmVVSXNSMEZCZGtJc1NVRkJPRUo2UWl4TFFVRTVRanM3UVVGSFFTeFpRVUZMZFVNc2EwSkJRVXc3TzBGQlJVRTdRVUZEUVN4WlFVRkxReXhqUVVGTUxFTkJRVzlDTEUxQlFVdGlMRkZCUVhwQ08wRkJRMFFzUzBFMVFrUTdPMEZCT0VKQk8wRkJRMFFzUjBFdlJITkNPMEZCWjBWMFFsa3NiMEpCYUVWelFpeG5RMEZuUlVZN1FVRkJRVHM3UVVGRmJrSXNVVUZCU1VVc01rTkJRV3RDUXl4RlFVRkZMRzlDUVVGR0xFVkJRWFZDTEV0QlFVdERMRVZCUVRWQ0xFTkJRV3hDTEVWQlFVbzdPMEZCUlVFc1UwRkJTM1JDTEdWQlFVd3NSMEZCZFVJc1JVRkJka0k3UVVGRFFXOUNMR2RDUVVGWlJ5eFBRVUZhTEVOQlFXOUNMRlZCUVVOeVFpeEhRVUZFTEVWQlFVdHpRaXhEUVVGTUxFVkJRVk03UVVGRE0wSXNWVUZCU1hCQ0xFMUJRVTFHTEVsQlFVbDFRaXhaUVVGS0xFTkJRV2xDTEV0QlFXcENMRU5CUVZZN08wRkJSVUVzWVVGQlMzcENMR1ZCUVV3c1EwRkJjVUl3UWl4SlFVRnlRaXhEUVVFd1FpeFBRVUZMTlVJc1YwRkJUQ3hEUVVGcFFrMHNSMEZCYWtJc1EwRkJNVUk3UVVGRFJDeExRVXBFT3p0QlFVOUdPMEZCUTBNc1IwRTNSWE5DTzBGQk9FVjBRblZDTEdsQ1FUbEZjMElzTmtKQk9FVk1PMEZCUVVFN08wRkJRMmhDTEZOQlFVczVRaXhOUVVGTU96dEJRVVZCTEZOQlFVdFRMRkZCUVV3c1EwRkJZM05DTEVWQlFXUXNRMEZCYVVJc1QwRkJha0lzUlVGQmVVSXNZVUZCUnp0QlFVTXhRaXhoUVVGTFZDeGpRVUZNTEVOQlFXOUNMRTlCUVV0VkxHTkJRVXdzUlVGQmNFSTdRVUZEUVN4aFFVRkxXQ3hyUWtGQlREdEJRVU5CTEdGQlFVdFpMR2RDUVVGTUxFTkJRWE5DTEVOQlFYUkNPMEZCUTBRc1MwRktSRHM3UVVGTlFTeFRRVUZMZUVJc1VVRkJUQ3hEUVVGamMwSXNSVUZCWkN4RFFVRnBRaXhWUVVGcVFpeEZRVUUwUWl4aFFVRkhPMEZCUXpkQ0xHRkJRVXRGTEdkQ1FVRk1MRU5CUVhOQ0xFZEJRWFJDTzBGQlEwUXNTMEZHUkRzN1FVRkpRU3hUUVVGTFF5eE5RVUZNTEVOQlFWbElMRVZCUVZvc1EwRkJaU3hQUVVGbUxFVkJRWFZDTEV0QlFVdEpMR2xDUVVGTUxFTkJRWFZDUXl4SlFVRjJRaXhEUVVFMFFpeEpRVUUxUWl4RFFVRjJRanRCUVVOQkxGTkJRVXRHTEUxQlFVd3NRMEZCV1Vnc1JVRkJXaXhEUVVGbExFMUJRV1lzUlVGQmMwSXNTMEZCUzAwc1owSkJRVXdzUTBGQmMwSkVMRWxCUVhSQ0xFTkJRVEpDTEVsQlFUTkNMRU5CUVhSQ096dEJRVWRCTzBGQlEwVXNWVUZCU1ZRc1NVRkJTU3hEUVVGU08wRkJRMEZJTEZGQlFVVXNTMEZCUzJNc1YwRkJUQ3hEUVVGcFFrTXNZVUZCYmtJc1JVRkJhVU1zUzBGQlMyUXNSVUZCZEVNc1JVRkJNRU5OTEVWQlFURkRMRU5CUVRaRExFOUJRVGRETEVWQlFYRkVMR0ZCUVVjN1FVRkRkRVFzVlVGQlJVb3NRMEZCUml4SFFVRkpMRU5CUVVvc1NVRkJUeXhEUVVGUUxFZEJRVk1zVDBGQlMyRXNWMEZCVEN4RFFVRnBRa01zU1VGQmFrSXNSVUZCVkN4SFFVRnBReXhQUVVGTFJDeFhRVUZNTEVOQlFXbENSU3hKUVVGcVFpeEZRVUZxUXp0QlFVTkVMRTlCUmtRN1FVRkhSRHRCUVVkR0xFZEJka2R6UWp0QlFYZEhkRUowUXl4clFrRjRSM05DTERSQ1FYZEhUSFZETEVWQmVFZExMRVZCZDBkR08wRkJRVUU3TzBGQlIyNUNMRkZCUVVsRExHRkJRV0Z3UWl4RlFVRkZMSGRDUVVGR0xFVkJRVEpDTEV0QlFVdERMRVZCUVdoRExFTkJRV3BDT3p0QlFVVkJiVUlzWlVGQlZ5eERRVUZZTEVWQlFXTkRMR2RDUVVGa0xFTkJRU3RDTEZGQlFTOUNMRVZCUVhkRExGbEJRVWs3UVVGRE1VTTdPMEZCUkRCRExHbERRVWR1UWtRc1YwRkJWeXhEUVVGWUxFVkJRV05GTEV0QlFXUXNRMEZCYjBJc1EwRkJjRUlzUTBGSWJVSTdRVUZCUVN4VlFVZHlRME1zU1VGSWNVTXNkMEpCUjNKRFFTeEpRVWh4UXp0QlFVRkJMRlZCUjJoRFF5eEpRVWhuUXl4M1FrRkhhRU5CTEVsQlNHZERPMEZCUVVFc1ZVRkhNMEpETEVsQlNESkNMSGRDUVVjelFrRXNTVUZJTWtJN08wRkJTekZET3p0QlFVVkJMRlZCUVVrc1EwRkJSU3gzUWtGQmQwSkRMRWxCUVhoQ0xFTkJRVFpDUml4SlFVRTNRaXhEUVVGT0xFVkJRVFJETEU5QlFVOHNUMEZCUzBjc1YwRkJUQ3hEUVVGcFFpeFpRVUZxUWl4RFFVRlFPenRCUVVVMVF5eFZRVUZIUml4UFFVRlBMRTlCUVV0SExFOUJRVXdzUTBGQllXeEZMRTFCUVdJc1EwRkJiMEpoTEdOQlFUbENMRVZCUVRoRExFOUJRVThzVDBGQlMyOUVMRmRCUVV3c1EwRkJhVUlzVTBGQmFrSXNRMEZCVURzN1FVRkZPVU1zVlVGQlNVVXNaVUZCU2pzN1FVRkZRU3gxUWtGQlMwTXNUMEZCVEN4RFFVRmhWaXhYUVVGWExFTkJRVmdzUlVGQlkwVXNTMEZCWkN4RFFVRnZRaXhEUVVGd1FpeERRVUZpTEVWQlFXOURMRmxCUVZVN1FVRkROVU1zZVVKQlFVdFRMRlZCUVV3c1EwRkJaMElzU1VGQmFFSTdRVUZEUVVZc01FSkJRV3RDTEdsQ1FVRkxSeXhOUVVGTUxFTkJRVmtzU1VGQldpeEZRVUZyUWl4aFFVRnNRaXhEUVVGc1FqdEJRVU5FTEU5QlNFUTdPMEZCUzBFc1ZVRkJUVU1zVFVGQlRTeEpRVUZKUXl4VlFVRktMRVZCUVZvN08wRkJSVUU3UVVGRFFVUXNWVUZCU1Zvc1owSkJRVW9zUTBGQmNVSXNUVUZCY2tJc1JVRkJORUlzV1VGQlNUdEJRVU01UWl4WlFVRk5ZeXhOUVVGTk5VTXNVMEZCVTBNc1lVRkJWQ3hEUVVGMVFpeExRVUYyUWl4RFFVRmFPMEZCUTBFN08wRkJSVUV5UXl4WlFVRkpaQ3huUWtGQlNpeERRVUZ4UWl4TlFVRnlRaXhGUVVFMFFpeFpRVUZKT3p0QlFVVTVRaXhqUVVGSlpTeEpRVUZKUkN4SlFVRkpSU3hMUVVGS0xFZEJRVlZHTEVsQlFVbEhMRTFCUVhSQ096dEJRVVZCT3p0QlFVVkJPenRCUVVWQkxHTkJRVTFETEV0QlFVc3NRMEZCV0RzN1FVRkZRVHRCUVVOQlNpeGpRVUZKUlN4TFFVRktMRWRCUVZsSExHRkJRVmNzUlVGQldDeEhRVUZwUWtRc1JVRkJOMEk3TzBGQlJVRXNZMEZCU1VVc1MwRkJTMnhFTEZOQlFWTkRMR0ZCUVZRc1EwRkJkVUlzVVVGQmRrSXNRMEZCVkR0QlFVTkJMR05CUVVsclJDeEpRVUZKUkN4SFFVRkhSU3hWUVVGSUxFTkJRV01zU1VGQlpDeERRVUZTT3p0QlFVVkJMR05CUVVjc1lVRkJUME1zVDBGQlVDeERRVUZsUXl4SFFVRm1MRWxCUVc5Q2FFSXNiMEpCUVd0Q0xFTkJRWHBETEVWQlFUSkRPMEZCUTNwRE8wRkJRMEZaTEdWQlFVZEtMRXRCUVVnc1IwRkJVMFlzU1VGQlNVVXNTMEZCU2l4SFFVRlZSQ3hEUVVGdVFpeEZRVUZ4UWtzc1IwRkJSMGdzVFVGQlNDeEhRVUZYU0N4SlFVRkpSU3hMUVVGd1F6dEJRVU5CTzBGQlEwRXNaMEpCUVVsVExHVkJRV1ZZTEVsQlFVbEZMRXRCUVVvc1IwRkJWVWtzUjBGQlIwb3NTMEZCYUVNN1FVRkRRVHRCUVVOQk8wRkJRMEZKTEdWQlFVZEtMRXRCUVVnc1NVRkJWVk1zV1VGQlZpeEZRVUYxUWt3c1IwRkJSMGdzVFVGQlNDeEpRVUZYVVN4WlFVRnNRenM3UVVGRlFTeG5Ra0ZCU1VNc1MwRkJTMDRzUjBGQlIwb3NTMEZCU0N4SFFVRlRMRVZCUVd4Q08wRkJRVUVzWjBKQlEwZFhMRXRCUVV0UUxFZEJRVWRJTEUxQlFVZ3NSMEZCVlN4RlFVUnNRanRCUVVGQkxHZENRVVZIVnl4SlFVRkZSaXhGUVVaTU8wRkJRVUVzWjBKQlJWRkhMRWxCUVVWR0xFVkJSbFk3UVVGSFFVNHNZMEZCUlZNc1UwRkJSaXhEUVVGWlJpeERRVUZhTEVWQlFXTkRMRU5CUVdRN1FVRkRRVklzWTBGQlJWVXNUVUZCUml4RFFVRlRReXhMUVVGSExFVkJRVm83UVVGRFFWZ3NZMEZCUlZrc1UwRkJSaXhEUVVGWmJrSXNSMEZCV2l4RlFVTkhMRU5CUVVOaExFVkJSRW9zUlVGRFR5eERRVUZEUkN4RlFVUlNMRVZCUlVkYUxFbEJRVWxGTEV0QlFVb3NSMEZCVlZNc1dVRkdZaXhGUVVVeVFsZ3NTVUZCU1VVc1MwRkJTaXhIUVVGVlJDeERRVUZZTEVkQlFXTlZMRmxCUm5oRE8wRkJTVVFzVjBGc1FrUXNUVUZyUWtzN1FVRkRTRXdzWlVGQlIwb3NTMEZCU0N4SFFVRlhSaXhKUVVGSlJTeExRVUZtTEVWQlFYRkNTU3hIUVVGSFNDeE5RVUZJTEVkQlFWbElMRWxCUVVsRkxFdEJRVW9zUjBGQlZVUXNRMEZCTTBNN1FVRkRRVTBzWTBGQlJWa3NVMEZCUml4RFFVRlpia0lzUjBGQldpeEZRVUZuUWl4RFFVRm9RaXhGUVVGclFpeERRVUZzUWl4RlFVRnZRazBzUjBGQlIwb3NTMEZCZGtJc1JVRkJOa0pKTEVkQlFVZElMRTFCUVdoRE8wRkJRMFE3TzBGQlIwUXNZMEZCU1dsQ0xFOUJRVTlvUlN4VFFVRlRReXhoUVVGVUxFTkJRWFZDTEV0QlFYWkNMRU5CUVZnN1FVRkRRU3hqUVVGTlowVXNWVUZCVlN4SFFVRm9RanM3UVVGRlFVUXNaVUZCUzJ4Q0xFdEJRVXdzUjBGQllVa3NSMEZCUjBvc1MwRkJTQ3hKUVVGVkxFbEJRVVZGTEVWQlFWb3NRMEZCWWl4RlFVRTJRbWRDTEV0QlFVdHFRaXhOUVVGTUxFZEJRV05ITEVkQlFVZElMRTFCUVVnc1NVRkJWeXhKUVVGRlF5eEZRVUZpTEVOQlFUTkRPenRCUVVWQk8wRkJRMEZuUWl4bFFVRkxla1VzV1VGQlRDeERRVUZyUWl4aFFVRnNRaXhGUVVGblF6QkZMRTlCUVdoRE8wRkJRMEZFTEdWQlFVdDZSU3haUVVGTUxFTkJRV3RDTEZsQlFXeENMRVZCUVN0Q01FTXNTMEZCUzJsRExFdEJRVXdzUTBGQlZ5eGpRVUZZTEVWQlFUSkNMRU5CUVROQ0xFTkJRUzlDTzBGQlEwRkdMR1ZCUVV0SExGTkJRVXdzUTBGQlpVTXNSMEZCWml4RFFVRnRRaXhuUWtGQmJrSTdRVUZEUVVvc1pVRkJTMHNzVFVGQlRDeEhRVUZqTzBGQlFVRXNiVUpCUVVsNlF5eEhRVUZIYjBNc1NVRkJTQ3hGUVVGUkxFVkJRVU5vUXl4VlFVRkVMRVZCUVUxRExGVkJRVTRzUlVGQldYcERMR05CUVZjc1EwRkJRemhGTEV0QlFVdERMRTFCUVV3c1MwRkJZeXhGUVVGbUxFVkJRVzFDUXl4TFFVRnVRaXhEUVVGNVFpeERRVUY2UWl4RFFVRjJRaXhGUVVGU0xFTkJRVW83UVVGQlFTeFhRVUZrTzBGQlEwRlNMR1ZCUVVzelJDeEhRVUZNTEVkQlFWYzJReXhIUVVGSGRVSXNVMEZCU0N4RFFVRmhlRU1zU1VGQllpeEZRVUZyUW1kRExFOUJRV3hDTEVOQlFWZzdRVUZEUVR0QlFVVkVMRk5CY2tSRU8wRkJjMFJCY2tJc1dVRkJTWFpETEVkQlFVb3NSMEZCVlhGRExFbEJRVWxuUXl4TlFVRmtPMEZCUlVRc1QwRTFSRVE3TzBGQk9FUkJhRU1zVlVGQlNXbERMR0ZCUVVvc1EwRkJhMEk1UXl4WFFVRlhMRU5CUVZnc1JVRkJZMFVzUzBGQlpDeERRVUZ2UWl4RFFVRndRaXhEUVVGc1FqczdRVUZGUVRzN1FVRkhSQ3hMUVhoR1JEdEJRVEJHUkN4SFFYWk5jMEk3UVVGM1RYUkNOa01zYlVKQmVFMXpRaXdyUWtGM1RVZzdRVUZEYkVJc1UwRkJTek5HTEUxQlFVdzdPMEZCUlVFc1VVRkJTVFJHTEU5QlFVOHNTVUZCV0R0QlFVTkJMRk5CUVVzeFJDeE5RVUZNTEVOQlFWbElMRVZCUVZvc1EwRkJaU3hOUVVGbUxFVkJRWE5DTEZWQlFWTTRSQ3hEUVVGVUxFVkJRVmM3TzBGQlJTOUNPMEZCUTBGRUxGZEJRVXR3UkN4WFFVRk1MRU5CUVdsQ1JTeEpRVUZxUWp0QlFVTkJPMEZCUTBFc1ZVRkJTV3hETEZGQlFWRXNTMEZCUzNOR0xFdEJRVXdzUTBGQlYyNUdMRWxCUVZnc1JVRkJXanM3UVVGRlFTeFZRVUZKUXl4blFrRkJaMElzUzBGQlMyZENMRmxCUVV3c1EwRkJhMElzWTBGQmJFSXNSVUZCYTBOcVFpeEpRVUZzUXl4RlFVRndRanM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4VlFVRkhTQ3hWUVVGUkxFVkJRVklzU1VGQlkwRXNWVUZCVlN4TlFVRXpRaXhGUVVGdFF6dEJRVU5xUXl4aFFVRkxjMFlzUzBGQlRDeEhRVUZoYkVZc1lVRkJZanRCUVVOQkxHRkJRVXR6UlN4VFFVRk1MRU5CUVdWRExFZEJRV1lzUTBGQmJVSXNjVUpCUVc1Q08wRkJRMFE3UVVGRlJpeExRV3BDUkRzN1FVRnRRa0VzVTBGQlMycEVMRTFCUVV3c1EwRkJXVWdzUlVGQldpeERRVUZsTEU5QlFXWXNSVUZCZFVJc1ZVRkJVemhFTEVOQlFWUXNSVUZCVnpzN1FVRkZhRU03UVVGRFFVUXNWMEZCUzNCRUxGZEJRVXdzUTBGQmFVSkRMRWxCUVdwQ096dEJRVVZCTEZkQlFVdDVReXhUUVVGTUxFTkJRV1ZoTEUxQlFXWXNRMEZCYzBJc2NVSkJRWFJDT3p0QlFVVkJMRlZCUVVsMlJpeFJRVUZSTEV0QlFVdHpSaXhMUVVGTUxFTkJRVmR1Uml4SlFVRllMRVZCUVZvN08wRkJSVUVzVlVGQlNVTXNaMEpCUVdkQ0xFdEJRVXRuUWl4WlFVRk1MRU5CUVd0Q0xHTkJRV3hDTEVWQlFXdERha0lzU1VGQmJFTXNSVUZCY0VJN08wRkJSVUVzVlVGQlIwZ3NWVUZCVVVrc1lVRkJXQ3hGUVVFd1FpeExRVUZMYTBZc1MwRkJUQ3hIUVVGaExFVkJRV0k3UVVGRE0wSXNTMEZhUkR0QlFXRkVPMEZCUTBRN1FVRTNUM1ZDTzBGQk9FOTBRa1VzWTBFNVQzTkNMREJDUVRoUFVqdEJRVUZCT3p0QlFVRkJMRkZCUjFJNVJ5eE5RVWhSTEVkQlIwVXNTMEZCUzJ0RkxFOUJTRkFzUTBGSFVteEZMRTFCU0ZFN1FVRkpZanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN08wRkJRMEVzVjBGQlR5eEpRVUZKSzBjc1QwRkJTaXhEUVVGWkxHRkJRVWM3UVVGRGNFSXNWVUZCU1V3c1lVRkJTanRCUVVOQkxGVkJRVWxOTEV0QlFVY3NSVUZCVUR0QlFVTkJMRlZCUVVsRExFMUJRVWtzUlVGQlVqdEJRVU5CTEZWQlFVbERMRk5CUVZVc1dVRkJWVHRCUVVOMFFpeFpRVUZKUXl4SlFVRkpWQ3hMUVVGTE1VUXNUVUZCVEN4RFFVRlpiMFVzUjBGQldpeEhRVUZyUWpOR0xFbEJRV3hDTEVWQlFWSTdPMEZCUlVFc1dVRkJSeXhEUVVGRE1FWXNSVUZCUlVVc1RVRkJTQ3hKUVVGalJpeE5RVUZKVkN4TFFVRkxNVVFzVFVGQlRDeERRVUZaY2tJc1NVRkJXaXhEUVVGcFFpeGpRVUZxUWl4RFFVRnlRaXhGUVVGelJEczdRVUZGY0VRc2FVSkJRVThyUlN4TFFVRkxla01zVjBGQlRDeERRVUZwUW1wRkxFOUJRVTlETEZkQlFYaENMRU5CUVZBN1FVRkZSRHM3UVVGRlJDeGxRVUZQTEdWQlFWQTdRVUZGUkN4UFFWaFpMRU5CV1ZweFNDeExRVnBaTEVOQldVNHNXVUZCVlR0QlFVTm1MRmxCUVVsSUxFbEJRVWxVTEV0QlFVc3hSQ3hOUVVGTUxFTkJRVmx2UlN4SFFVRmFMRWRCUVd0Q00wWXNTVUZCYkVJc1JVRkJVanRCUVVOQkxGbEJRVWN3Uml4RlFVRkZSU3hOUVVGR0xFZEJRVlZ5U0N4UFFVRlBXU3hsUVVGd1FpeEZRVUZ2UXp0QlFVTnNReXhwUWtGQlR6aEdMRXRCUVV0NlF5eFhRVUZNTEVOQlFXbENha1VzVDBGQlQwVXNZMEZCZUVJc1EwRkJVRHRCUVVORU8wRkJRMFFzWlVGQlR5eGxRVUZRTzBGQlEwUXNUMEZzUWxrc1JVRnRRbHB2U0N4TFFXNUNXU3hEUVcxQ1RpeFpRVUZWTzBGQlEyWXNXVUZCU1VNc1dVRkJXV3BHTEVWQlFVVXNhVUpCUVVZc1JVRkJiMEp2UlN4TFFVRkxia1lzVVVGQmVrSXNSVUZCYlVNNFJpeE5RVUZ1UkR0QlFVTkJMRmxCUVVsSExGbEJRVmxzUml4RlFVRkZMRmxCUVVZc1JVRkJaVzlGTEV0QlFVdHVSaXhSUVVGd1FpeEZRVUU0UWpoR0xFMUJRVGxETzBGQlEwRXNXVUZCU1VZc1NVRkJTVlFzUzBGQlMyNUdMRkZCUVV3c1EwRkJZeXhEUVVGa0xFVkJRV2xDYTBjc1YwRkJha0lzUTBGQk5rSm9SeXhKUVVFM1FpeEZRVUZTT3p0QlFVVkJMRmxCUVVrc1EwRkJReXhEUVVGRE1FWXNSVUZCUlVVc1RVRkJTQ3hKUVVGalJpeE5RVUZKVkN4TFFVRkxia1lzVVVGQlRDeERRVUZqTEVOQlFXUXNSVUZCYVVKdFFpeFpRVUZxUWl4RFFVRTRRaXhqUVVFNVFpeERRVUZ1UWl4TFFVTktMRU5CUVVNMlJTeFRRVVJITEVsQlExVXNRMEZCUTBNc1UwRkVaaXhGUVVWRE8wRkJRME1zYVVKQlFVOWtMRXRCUVV0NlF5eFhRVUZNTEVOQlFXbENha1VzVDBGQlQwY3NZVUZCZUVJc1EwRkJVRHRCUVVORU8wRkJRMFFzWlVGQlR5eGxRVUZRTzBGQlEwUXNUMEU1UWxrc1JVRXJRbHB0U0N4TFFTOUNXU3hEUVN0Q1RpeFpRVUZWTzBGQlEyWXNXVUZCU1VVc1dVRkJXV3hHTEVWQlFVVXNXVUZCUml4RlFVRmxiMFVzUzBGQlMyNUdMRkZCUVhCQ0xFVkJRVGhDT0VZc1RVRkJPVU03TzBGQlJVRTdRVUZEUVRzN1FVRkZRU3haUVVGSFJ5eFpRVUZWZUVnc1QwRkJUMU1zVlVGQmNFSXNSVUZCWjBNc1QwRkJUMmxITEV0QlFVdDZReXhYUVVGTUxFTkJRV2xDYWtVc1QwRkJUMHNzWTBGQmVFSXNRMEZCVURzN1FVRkZhRU1zWlVGQlR5eGxRVUZRTzBGQlEwUXNUMEY0UTFrc1JVRjVRMXBwU0N4TFFYcERXU3hEUVhsRFRpeFpRVUZWTzBGQlEyWXNXVUZCU1VNc1dVRkJXV3BHTEVWQlFVVXNhVUpCUVVZc1JVRkJiMEp2UlN4TFFVRkxia1lzVVVGQmVrSXNSVUZCYlVNNFJpeE5RVUZ1UkRzN1FVRkZRU3haUVVGSFJTeFpRVUZWZGtnc1QwRkJUMVVzVjBGQmNFSXNSVUZCYVVNc1QwRkJUMmRITEV0QlFVdDZReXhYUVVGTUxFTkJRV2xDYWtVc1QwRkJUMGtzWTBGQmVFSXNRMEZCVURzN1FVRkZha01zWlVGQlR5eGxRVUZRTzBGQlEwUXNUMEV2UTFrc1JVRm5SRnByU0N4TFFXaEVXU3hEUVdkRVRpeFpRVUZWTzBGQlEyWXNXVUZCU1Vnc1NVRkJTVlFzUzBGQlMyNUdMRkZCUVV3c1EwRkJZeXhEUVVGa0xFVkJRV2xDYTBjc1YwRkJha0lzUTBGQk5rSm9SeXhKUVVFM1FpeEZRVUZTTzBGQlEwRXNXVUZCUnpCR0xFVkJRVVZGTEUxQlFVWXNSMEZCVlhKSUxFOUJRVTlYTEdsQ1FVRndRaXhGUVVGelF6dEJRVU53UXl4cFFrRkJUeXRHTEV0QlFVdDZReXhYUVVGTUxFTkJRV2xDYWtVc1QwRkJUMDBzWVVGQmVFSXNRMEZCVUR0QlFVTkVPenRCUVVWRUxHVkJRVThzWlVGQlVEdEJRVU5FTEU5QmRrUlpMRVZCZDBSYVowZ3NTMEY0UkZrc1EwRjNSRTRzV1VGQlZUdEJRVU5tU1N4VlFVRkZPMEZCUTBGRExITkNRVUZaYWtJc1MwRkJTMnRDTEZkQlFVd3NRMEZCYVVKc1FpeExRVUZMTVVRc1RVRkJUQ3hEUVVGWmIwVXNSMEZCV2l4SFFVRnJRak5HTEVsQlFXeENMRVZCUVdwQ0xFTkJSRm83UVVGRlEyOUhMSGRDUVVGaGJrSXNTMEZCUzJ0Q0xGZEJRVXdzUTBGQmFVSnNRaXhMUVVGTGJrWXNVVUZCVEN4RFFVRmpMRU5CUVdRc1JVRkJhVUoxUnl4VFFVRnFRaXhEUVVFeVFuSkhMRWxCUVROQ0xFVkJRV3BDTEVOQlJtUTdRVUZIUTNOSExIZENRVUZqY2tJc1MwRkJTMnRDTEZkQlFVd3NRMEZCYVVKc1FpeExRVUZMYmtZc1VVRkJUQ3hEUVVGakxFTkJRV1FzUlVGQmFVSnJSeXhYUVVGcVFpeERRVUUyUW1oSExFbEJRVGRDTEVWQlFXcENPenRCUVVobUxGTkJRVVk3UVVGTlJDeFBRUzlFV1N4RFFVRmlPenRCUVdsRlFYbEdPMEZCUTBRc1MwRjBSVTBzUTBGQlVEdEJRWGRGUkN4SFFUTlZjMEk3UVVFMlZYUkNZeXhQUVRkVmMwSXNiVUpCTmxWbU8wRkJRMDRzVTBGQlMyeElMRTFCUVV3N1FVRkRRU3hUUVVGTGEwTXNUVUZCVEN4RFFVRlpiMFVzUjBGQldpeERRVUZuUWl4TFFVRkxjRVVzVFVGQlRDeERRVUZaY2tJc1NVRkJXaXhEUVVGcFFpeGpRVUZxUWl4RFFVRm9RanRCUVVOQkxGTkJRVXR4UWl4TlFVRk1MRU5CUVZrc1EwRkJXaXhGUVVGbFowUXNVMEZCWml4RFFVRjVRa01zUjBGQmVrSXNRMEZCTmtJc2NVSkJRVGRDT3p0QlFVVkJMRk5CUVV0b1JpeGxRVUZNTEVkQlFYVkNMRVZCUVhaQ08wRkJSVVFzUjBGd1ZuTkNPMEZCY1ZaMFFtZElMR2RDUVhKV2MwSXNORUpCY1ZaT08wRkJRVUU3TzBGQlIyWXpSaXhOUVVGRkxFdEJRVXRqTEZkQlFVd3NRMEZCYVVJNFJTeFZRVUZ1UWl4RlFVRXJRbkpHTEVWQlFTOUNMRU5CUVd0RExFOUJRV3hETEVWQlFUQkRMR0ZCUVVjN08wRkJSVE5ETEdGQlFVdHBSU3haUVVGTUxFZEJRVzlDY1VJc1NVRkJjRUlzUTBGQmVVSXNaVUZCU3pzN1FVRkZOVUk3TzBGQlJqUkNMRmxCU1haQ1NpeFpRVXAxUWl4SFFVbHBRa3NzUjBGS2FrSXNRMEZKZGtKTUxGbEJTblZDTzBGQlFVRXNXVUZKVmtZc1dVRktWU3hIUVVscFFrOHNSMEZLYWtJc1EwRkpWbEFzV1VGS1ZUdEJRVUZCTEZsQlNVZEdMRlZCU2tnc1IwRkphVUpUTEVkQlNtcENMRU5CU1VkVUxGVkJTa2c3T3p0QlFVMDFRaXhsUVVGTFZTeFBRVUZNTEVOQlFXRXNWVUZCWWl4RlFVRjNRanRCUVVOeVFsSXNiME5CUkhGQ0xFVkJRMUpGTERCQ1FVUlJMRVZCUTB0S0xITkNRVVJNTzBGQlJYQkNNVWNzTWtKQlFXZENMRTlCUVV0QkxHVkJSa1E3UVVGSGNrSnhTQ3h4UWtGQlZTeFBRVUZMUVN4VFFVaE5PMEZCU1hKQ1F5eHhRa0ZCVlVNc1MwRkJTME1zUjBGQlREdEJRVXBYTEZOQlFYaENPMEZCVDBRc1QwRmlSRHRCUVdWRUxFdEJha0pFTzBGQmEwSkVMRWRCTVZkelFqdEJRVEpYZEVKRExHTkJNMWR6UWl3d1FrRXlWMUk3UVVGRFlpeFRRVUZMTlVnc1RVRkJURHRCUVVOQk8wRkJRMEVzVTBGQlMzbENMRVZCUVV3c1EwRkJVWGxFTEZOQlFWSXNRMEZCYTBKRExFZEJRV3hDTEVOQlFYTkNMRXRCUVVzM1F5eFhRVUZNTEVOQlFXbENkVVlzUjBGQmRrTTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4VFFVRkxjRWNzUlVGQlRDeERRVUZSZFVZc1UwRkJVanM3UVVGdlEwRXNVMEZCUzNaSExGRkJRVXdzUjBGQlowSmxMRVZCUVVVc1MwRkJTMk1zVjBGQlRDeERRVUZwUW5kR0xGVkJRVzVDTEVWQlFUaENMRXRCUVV0eVJ5eEZRVUZ1UXl4RFFVRm9RanRCUVVOQkxGTkJRVXRUTEUxQlFVd3NSMEZCWTFZc1JVRkJSU3hMUVVGTFl5eFhRVUZNTEVOQlFXbENlVVlzVVVGQmJrSXNSVUZCTkVJc1MwRkJTM1JITEVWQlFXcERMRU5CUVdRN08wRkJSVUVzVTBGQlMzVkhMRmRCUVV3c1IwRkJiVUo0Unl4RlFVRkZMRXRCUVV0akxGZEJRVXdzUTBGQmFVSXlSaXhqUVVGdVFpeEZRVUZyUXl4TFFVRkxlRWNzUlVGQmRrTXNRMEZCYmtJN1FVRkRRU3hUUVVGTGVVY3NVMEZCVEN4SFFVRnBRakZITEVWQlFVVXNUVUZCUml4RlFVRlRMRXRCUVV0M1J5eFhRVUZrTEVOQlFXcENPMEZCUjBRN1FVRnNZWE5DTEVOQlFXUXNSVUZ0WVZRN1FVRkRRVWdzVDBGQlNTeHBRa0ZFU2p0QlFVVkRSU3haUVVGVE8wRkJSbFlzUTBGdVlWTXNRMEZCV0RzN2EwSkJlV0ZsY0Vvc1NTSXNJbVpwYkdVaU9pSTNNaTVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkltbHRjRzl5ZENCRlpHbDBiM0lnWm5KdmJTQW5MaTlsWkdsMGIzSW5PMXh5WEc1cGJYQnZjblFnUlZoSlJpQm1jbTl0SUNkbGVHbG1MV3B6Snp0Y2NseHVhVzF3YjNKMElDY3VMM0J2YzNRdWJHVnpjeWM3WEhKY2JtbHRjRzl5ZENCN1FuSnZkMlZ5ZlNCbWNtOXRJQ2N1TDJOdmNtVW5PMXh5WEc1Y2NseHVYSEpjYm5aaGNpQlFiM04wSUQwZ1JXUnBkRzl5TG1WNGRHVnVaQ2g3WEhKY2JpQWdhVzVwZENod2NtOXdjeWw3WEhKY2JpQWdJQ0F2TDJSbFluVm5aMlZ5TzF4eVhHNGdJQ0FnY0hKdmNITWdQU0JQWW1wbFkzUXVZWE56YVdkdUtIdDlMSHRjY2x4dUlDQWdJQ0FnZEdGblgyNWhiV1U2SjJWa2FYUnZjaTF3YjNOMExXOTJieWRjY2x4dUlDQWdJQ0FnTEdOdmJtWnBaeUE2SUh0Y2NseHVJQ0FnSUNBZ0lDQlVTVlJNUlY5RlRWQlVXVG9uNXFDSDZhS1k1TGlONklPOTVMaTY1Nm02SjF4eVhHNGdJQ0FnSUNBZ0lDeFVTVlJNUlY5VVQwOWZURTlPUnpvbjVxQ0g2YUtZNWFTcTZaVy9MaTR1SjF4eVhHNGdJQ0FnSUNBZ0lDeERUMDVVUlU1VVgwVk5VRlJaT2lmbnZKYm92cEhsaG9YbHJybmt1STNvZzcza3VMcm5xYm9uWEhKY2JpQWdJQ0FnSUNBZ0xGQklUMVJQWDFSUFQxOU5RVTVaT2lma3ZhRGt2S0RubW9UbmhhZm5pWWZscEtybHBKcmt1b2Jsa0tjdUxpNG5YSEpjYmlBZ0lDQWdJQ0FnTEZOTlNVeEZYMVJQVDE5TlFVNVpPaWZrdmFEbGo1SG5tb1Rvb2FqbWc0WGxwS3JscEpya3VvYmxrS2N1TGk0blhISmNiaUFnSUNBZ0lDQWdMRmRQVWtSZlZFOVBYMDFCVGxrNkorUzlvT1dHbWVlYWhPV3RsK2FWc09Xa3F1V2ttdVM2aHVXUXB5NHVMaWRjY2x4dUlDQWdJQ0FnSUNBc1VFaFBUa1ZmVkU5UFgwSkpSem9uNVp1KzU0bUg1YVNxNWFTbjVMcUdKMXh5WEc0Z0lDQWdJQ0FnSUN4VFZVTkRSVk5UT2lmbGo1SG9vYWptaUpEbGlwOG5YSEpjYmlBZ0lDQWdJQ0FnTEUxQldGOVRUVWxNUlZNZ09qSXdYSEpjYmlBZ0lDQWdJQ0FnTHk4c1UwMUpURVZmVFVGWVgweEZUam96TUZ4eVhHNGdJQ0FnSUNBZ0lDOHZJQ3hRU0U5VVQxOU5RVmhmVEVWT09qWmNjbHh1SUNBZ0lDQWdJQ0FzVFVGWVgxQklUMVJQUlZNNk5seHlYRzRnSUNBZ0lDQWdJQzh2TEZCSVQxUlBYMDFCV0Y5VFNWcEZPakV3TWpRcU1UQmNjbHh1SUNBZ0lDQWdJQ0FzVFVGWVgwTlBUbFJGVGxSZlYwOVNSRk02T0RBd1hISmNiaUFnSUNBZ0lDQWdMRTFCV0Y5VVNWUk1SVjlYVDFKRVV6bzFNRnh5WEc1Y2NseHVJQ0FnSUNBZ0lDQXNUVUZZWDFOSldrVmZVRWhQVkU4Z09pQXhNREkwS2pFd01qUXFORnh5WEc0Z0lDQWdJQ0I5WEhKY2JpQWdJQ0I5TEhCeWIzQnpLVHRjY2x4dUlDQWdYSEpjYmlBZ0lDQjBhR2x6TGw5emRYQmxjaWh3Y205d2N5azdYSEpjYmx4eVhHNGdJQ0FnZEdocGN5NWZiV0Z3WDJKaGMyVTJOQ0E5SUU5aWFtVmpkQzVqY21WaGRHVW9iblZzYkNrN1hISmNiaUFnSUNCMGFHbHpMblZ3Ykc5aFpGOXdhV04wZFhKbGN5QTlJRnRkTzF4eVhHNWNjbHh1WEhKY2JpQWdJQ0IwYUdsekxsOW9ZVzVrYkdWRGFHOXZjMlZKYldjb0tHbHRaeXh3Y205d2N5azlQbnRjY2x4dVhISmNiaUFnSUNBZ0lHbHRaeTV6WlhSQmRIUnlhV0oxZEdVb0ozVnBaQ2NzY0hKdmNITXVkV2xrS1R0Y2NseHVJQ0FnSUZ4eVhHNWNjbHh1SUNBZ0lDQWdkbUZ5SUdoMGJXeGZJRDBnZEdocGN5NGtZMjl1ZEdWdWRDNW9kRzFzS0NrdWRISnBiU2dwTzF4eVhHNWNjbHh1SUNBZ0lDQWdkbUZ5SUdSbFptRjFiSFJmZG1Gc2RXVWdQU0IwYUdsekxpUmpiMjUwWlc1MExtRjBkSElvSjJSbFptRjFiSFJXWVd4MVpTY3BMblJ5YVcwb0tUdGNjbHh1WEhKY2JpQWdJQ0FnSUdsbUtHaDBiV3hmUFQwOVpHVm1ZWFZzZEY5MllXeDFaU2tnZEdocGN5NGtZMjl1ZEdWdWRDNW9kRzFzS0NjbktUdGNjbHh1SUNBZ0lDQWdYSEpjYmlBZ0lDQWdJSFpoY2lCcGJXZGZkM0poY0NBOUlHUnZZM1Z0Wlc1MExtTnlaV0YwWlVWc1pXMWxiblFvSjNBbktUdGNjbHh1SUNBZ0lDQWdhVzFuWDNkeVlYQXVZWEJ3Wlc1a1EyaHBiR1FvYVcxbktUdGNjbHh1WEhKY2JpQWdJQ0FnSUM4dkx5OHZMeTh2THk4dkwxeHlYRzRnSUNBZ0lDQmNjbHh1SUNBZ0lDQWdkR2hwY3k1ZllYQndaVzVrVkc5TVlYTjBUVzlrYVdacGVVVnNLR2x0WjE5M2NtRndLVHRjY2x4dVhISmNiaUFnSUNBZ0lDOHZMeTh2THk4dkx5OWNjbHh1SUNBZ0lDQWdjSEp2Y0hNdVltRnpaVFkwSUQwZ2FXMW5Mbk55WXp0Y2NseHVYSEpjYmlBZ0lDQWdJSFJvYVhNdVgyMWhjRjlpWVhObE5qUmJjSEp2Y0hNdWRXbGtYU0E5SUhCeWIzQnpPMXh5WEc1Y2NseHVYSEpjYmlBZ0lDQWdJSFJvYVhNdVgyZGxkRlZ3Ykc5aFpGQnBZM1IxY21WektDazdYSEpjYmx4eVhHNGdJQ0FnSUNBdkx5OWNjbHh1SUNBZ0lDQWdkR2hwY3k1ZmMyVjBUR0Z6ZEVWa2FYUkZiQ2gwYUdsekxpUmpiMjUwWlc1MEtUdGNjbHh1SUNBZ0lIMHBPMXh5WEc0Z0lDQWdYSEpjYmlBZ0lDQXZMMk52Ym5OdmJHVXViRzluS0Nkd2IzTjBJR052Ym5OMGNuVmpkRzl5SnlrN1hISmNiaUFnZlZ4eVhHNGdJQ3hmWjJWMFZYQnNiMkZrVUdsamRIVnlaWE1vS1h0Y2NseHVYSFJjZEZ4MFhISmNiaUFnSUNCMllYSWdZbUZ6WlRZMFgybHRaM01nUFNCYkxpNHVKQ2duYVcxbkxtWnliMjB0YVc1d2RYUXRiM1p2Snl4MGFHbHpMbVZzS1YwN1hISmNibHh5WEc0Z0lDQWdkR2hwY3k1MWNHeHZZV1JmY0dsamRIVnlaWE1nUFNCYlhUdGNjbHh1SUNBZ0lHSmhjMlUyTkY5cGJXZHpMbVp2Y2tWaFkyZ29LR2x0Wnl4cEtUMCtlMXh5WEc0Z0lDQWdJQ0IyWVhJZ2RXbGtJRDBnYVcxbkxtZGxkRUYwZEhKcFluVjBaU2duZFdsa0p5azdYSEpjYmx4eVhHNGdJQ0FnSUNCMGFHbHpMblZ3Ykc5aFpGOXdhV04wZFhKbGN5NXdkWE5vS0hSb2FYTXVYMjFoY0Y5aVlYTmxOalJiZFdsa1hTazdYSEpjYmlBZ0lDQjlLVHRjY2x4dVhISmNibHh5WEc0Z0lDOHZYSFJqYjI1emIyeGxMbXh2WnloMGFHbHpMblZ3Ykc5aFpGOXdhV04wZFhKbGN5azdYSEpjYmlBZ2ZWeHlYRzRnSUN4ZmFHRnVaR3hsUm05eVZHaHZjMlVvS1h0Y2NseHVJQ0FnSUhSb2FYTXVYM04xY0dWeUtDazdYSEpjYmlBZ0lDQmNjbHh1SUNBZ0lIUm9hWE11SkdOdmJuUmxiblF1YjI0b0oybHVjSFYwSnl4bFBUNTdYSEpjYmlBZ0lDQWdJSFJvYVhNdVgzTmxkRXhoYzNSRlpHbDBSV3dvZEdocGN5NWZaV1JwZEV4aGMzUkRhR2xzWkNncEtUdGNjbHh1SUNBZ0lDQWdkR2hwY3k1ZloyVjBWWEJzYjJGa1VHbGpkSFZ5WlhNb0tUdGNjbHh1SUNBZ0lDQWdkR2hwY3k1ZmNtVmpiM0prVEdGemRGSmhibWRsS0RBcE8xeHlYRzRnSUNBZ2ZTazdYSEpjYmx4eVhHNGdJQ0FnZEdocGN5NGtZMjl1ZEdWdWRDNXZiaWduZEc5MVkyaGxibVFuTEdVOVBudGNjbHh1SUNBZ0lDQWdkR2hwY3k1ZmNtVmpiM0prVEdGemRGSmhibWRsS0RVMk5pazdYSEpjYmlBZ0lDQjlLVHRjY2x4dVhISmNiaUFnSUNCMGFHbHpMaVIwYVhSc1pTNXZiaWduWm05amRYTW5MSFJvYVhNdVgyaGhibVJzWlY5aWRXZGZabTlqZFhNdVltbHVaQ2gwYUdsektTazdYSEpjYmlBZ0lDQjBhR2x6TGlSMGFYUnNaUzV2YmlnbllteDFjaWNzZEdocGN5NWZhR0Z1Wkd4bFgySjFaMTlpYkhWeUxtSnBibVFvZEdocGN5a3BPMXh5WEc1Y2NseHVYSEpjYmlBZ0lDQjdYSEpjYmlBZ0lDQWdJR3hsZENCcElEMGdNRHRjY2x4dUlDQWdJQ0FnSkNoMGFHbHpMbU52Ym5OMGNuVmpkRzl5TGtWTVgxTk5TVXhGWDBsRFQwNHNkR2hwY3k1bGJDa3ViMjRvSjJOc2FXTnJKeXhsUFQ1N1hISmNiaUFnSUNBZ0lDQWdLeXRwSlRJaFBUQS9kR2hwY3k1bGJXOXFhVjl3WVc1bGJDNW9hV1JsS0NrNmRHaHBjeTVsYlc5cWFWOXdZVzVsYkM1emFHOTNLQ2s3WEhKY2JpQWdJQ0FnSUgwcFhISmNiaUFnSUNCOVhISmNibHh5WEc1Y2NseHVJQ0I5WEhKY2JpQWdMRjlvWVc1a2JHVkRhRzl2YzJWSmJXY29abTRwZTF4eVhHNWNjbHh1WEhSY2RGeHlYRzRnSUNBZ2RtRnlJQ1JqYUc5dmMyVnBiV2NnUFNBa0tDY3VaV3BmWTI5dGJXVnVkRjlmWTJodmIzTmxhVzFuSnl4MGFHbHpMbVZzS1R0Y2NseHVJQ0JjY2x4dUlDQWdJQ1JqYUc5dmMyVnBiV2RiTUYwdVlXUmtSWFpsYm5STWFYTjBaVzVsY2lnblkyaGhibWRsSnl3b0tUMCtlMXh5WEc0Z0lDQWdJQ0F2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljY2x4dUlDQWdJQ0FnWEhKY2JpQWdJQ0FnSUd4bGRDQjdibUZ0WlN4MGVYQmxMSE5wZW1WOUlEMGdKR05vYjI5elpXbHRaMXN3WFM1bWFXeGxjMXN3WFR0Y2NseHVYSEpjYmlBZ0lDQWdJQzh2YVcxaFoyVXZjRzVuSUdsdFlXZGxMMnB3WldkY2NseHVYSEpjYmlBZ0lDQWdJR2xtS0NBaEtDOXBiV0ZuWlZ4Y0x5aHdibWQ4YW5CbFozeG5hV1lwTHk1MFpYTjBLSFI1Y0dVcElDa3BJSEpsZEhWeWJpQjBhR2x6TGw5a2FYTndiR0Y1VFhObktDZm9yN2ZrdUlya3ZLRGt1SURsdktEbG03N25pWWN1TGk0bktUdGNjbHh1WEhKY2JpQWdJQ0FnSUdsbUtITnBlbVVnUGlCMGFHbHpMbTl3ZEdsdmJuTXVZMjl1Wm1sbkxrMUJXRjlUU1ZwRlgxQklUMVJQS1NCeVpYUjFjbTRnZEdocGN5NWZaR2x6Y0d4aGVVMXpaeWduNVp1KzU0bUg1YVNxNWFTbkxpNHVKeWs3WEhKY2JseHlYRzRnSUNBZ0lDQjJZWElnYVcxblgyOXlhV1Z1ZEdGMGFXOXVPMXh5WEc1Y2NseHVJQ0FnSUNBZ1JWaEpSaTVuWlhSRVlYUmhLQ1JqYUc5dmMyVnBiV2RiTUYwdVptbHNaWE5iTUYwc1puVnVZM1JwYjI0b0tYc2dJRnh5WEc0Z0lDQWdJQ0FnSUVWWVNVWXVaMlYwUVd4c1ZHRm5jeWgwYUdsektUc2dJQ0JjY2x4dUlDQWdJQ0FnSUNCcGJXZGZiM0pwWlc1MFlYUnBiMjRnUFNCRldFbEdMbWRsZEZSaFp5aDBhR2x6TENBblQzSnBaVzUwWVhScGIyNG5LVHNnSUZ4eVhHNGdJQ0FnSUNCOUtUc2dJRnh5WEc1Y2NseHVJQ0FnSUNBZ1kyOXVjM1FnWm5Ka0lEMGdibVYzSUVacGJHVlNaV0ZrWlhJb0tUdGNjbHh1WEhKY2JpQWdJQ0FnSUM4dlkyOXVjMjlzWlM1c2IyY29KMlpwYkdWeVpXRmtaWEloSnlrN1hISmNiaUFnSUNBZ0lHWnlaQzVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ2RzYjJGa0p5d29LVDArZTF4eVhHNGdJQ0FnSUNBZ0lHTnZibk4wSUhCcFl5QTlJR1J2WTNWdFpXNTBMbU55WldGMFpVVnNaVzFsYm5Rb0oybHRaeWNwTzF4eVhHNGdJQ0FnSUNBZ0lDOHZjR2xqTG1Oc1lYTnpUR2x6ZEM1aFpHUW9KMlp5YjIwdGFXNXdkWFF0YjNadkp5azdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lIQnBZeTVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ2RzYjJGa0p5d29LVDArZTF4eVhHNGdJQ0FnSUNBZ0lDQWdYSEpjYmlBZ0lDQWdJQ0FnSUNCc1pYUWdjeUE5SUhCcFl5NTNhV1IwYUM5d2FXTXVhR1ZwWjJoME8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lDOHZZV3hsY25Rb2NHbGpMbmRwWkhSb0tUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQXZMM0JwWXk1M2FXUjBhQ0E5SUcxcGJpaHdhV011ZDJsa2RHZ3NhVzV1WlhKWGFXUjBhQ291TnpjM0tUdGNjbHh1SUNBZ0lDQWdJQ0FnSUZ4eVhHNGdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ1pIQWdQU0F5TzF4eVhHNGdJQ0FnSUNBZ0lGeHlYRzRnSUNBZ0lDQWdJQ0FnTHk5d2FXTXVkMmxrZEdnZ1BTQnBibTVsY2xkcFpIUm9LaTQzTnpjZ0lDQXFaSEE3WEhKY2JpQWdJQ0FnSUNBZ0lDQndhV011ZDJsa2RHZ2dQU0JwYm01bGNsZHBaSFJvS2k0NElDQWdLbVJ3TzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUd4bGRDQmpkaUE5SUdSdlkzVnRaVzUwTG1OeVpXRjBaVVZzWlcxbGJuUW9KMk5oYm5aaGN5Y3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ2JHVjBJR01nUFNCamRpNW5aWFJEYjI1MFpYaDBLQ2N5WkNjcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnWEhKY2JpQWdJQ0FnSUNBZ0lDQnBaaWhDY205M1pYSXVkbVZ5YzJsdmJpNXBiM01tSm1sdFoxOXZjbWxsYm5SaGRHbHZiajA5UFRZcGUxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBdkwyRnNaWEowS0NkeWIzUmhkR2x1WnlFaElTY3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpkaTUzYVdSMGFEMXdhV011ZDJsa2RHZ3ZjeXhqZGk1b1pXbG5hSFE5SUhCcFl5NTNhV1IwYUR0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnTHk5Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElITmpZV3hsWDNSdlgyMWhlQ0E5SUhCcFl5NTNhV1IwYUM5amRpNTNhV1IwYUR0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4MU1DQXRMUzBnTmpCY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnTHk5Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWTNZdWQybGtkR2dxUFhOallXeGxYM1J2WDIxaGVDeGpkaTVvWldsbmFIUXFQWE5qWVd4bFgzUnZYMjFoZUR0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0IwZUNBOUlHTjJMbmRwWkhSb0tpNDFYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdMSFI1SUQwZ1kzWXVhR1ZwWjJoMEtpNDFYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdMSGc5ZEhnc2VUMTBlVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdZeTUwY21GdWMyeGhkR1VvZUN4NUtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1l5NXliM1JoZEdVb1VFa3FMalVwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqTG1SeVlYZEpiV0ZuWlNod2FXTmNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQXNMWFI1TEMxMGVGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDeHdhV011ZDJsa2RHZ3FjMk5oYkdWZmRHOWZiV0Y0TENod2FXTXVkMmxrZEdndmN5a3FjMk5oYkdWZmRHOWZiV0Y0WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQjlaV3h6Wlh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWTNZdWQybGtkR2dnUFNCd2FXTXVkMmxrZEdnc1kzWXVhR1ZwWjJoMElEMGdjR2xqTG5kcFpIUm9MM003WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR011WkhKaGQwbHRZV2RsS0hCcFl5d3dMREFzWTNZdWQybGtkR2dzWTNZdWFHVnBaMmgwS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnWEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnYkdWMElIQnBZMThnUFNCa2IyTjFiV1Z1ZEM1amNtVmhkR1ZGYkdWdFpXNTBLQ2RwYldjbktUdGNjbHh1SUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSEYxWVd4cGRIa2dQU0F1T1RNN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ2NHbGpYeTUzYVdSMGFDQTlJR04yTG5kcFpIUm9LaWd4TDJSd0tTeHdhV05mTG1obGFXZG9kQ0E5SUdOMkxtaGxhV2RvZENvb01TOWtjQ2s3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnTHk5d2FXTmZMbk5sZEVGMGRISnBZblYwWlNnbmRXNXpaV3hsWTNSaFlteGxKeXduYjI0bktUdGNjbHh1SUNBZ0lDQWdJQ0FnSUhCcFkxOHVjMlYwUVhSMGNtbGlkWFJsS0NkeGRXRnNhWFI1TFc5MmJ5Y3NjWFZoYkdsMGVTazdYSFJjY2x4dUlDQWdJQ0FnSUNBZ0lIQnBZMTh1YzJWMFFYUjBjbWxpZFhSbEtDZHpkV1ptYVhndGIzWnZKeXgwZVhCbExtMWhkR05vS0M5cGJXRm5aVnhjTHloY1hIY3JLUzhwV3pGZEtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUhCcFkxOHVZMnhoYzNOTWFYTjBMbUZrWkNnblpuSnZiUzFwYm5CMWRDMXZkbThuS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJSEJwWTE4dWIyNXNiMkZrSUQwZ0tDazlQbVp1S0hCcFkxOHNlMjVoYldVc2RIbHdaU3dnZFdsa09tQjFhV1F0Skhzb1RXRjBhQzV5WVc1a2IyMG9LU3NuSnlrdWMyeHBZMlVvTWlsOVlIMHBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ2NHbGpYeTV6Y21NZ1BTQmpkaTUwYjBSaGRHRlZVa3dvZEhsd1pTeHhkV0ZzYVhSNUtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUM4dmNHbGpYeTV6Y21NZ1BTQnlaWEYxYVhKbEtDY3VMMk52YlcxdmJpOXBiV2N2WVM1cWNHY25LVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdmU2s3WEhKY2JpQWdJQ0FnSUNBZ2NHbGpMbk55WXlBOUlHWnlaQzV5WlhOMWJIUTdYSEpjYmx4eVhHNGdJQ0FnSUNCOUtUdGNjbHh1SUNBZ0lDQWdYSEpjYmlBZ0lDQWdJR1p5WkM1eVpXRmtRWE5FWVhSaFZWSk1LQ1JqYUc5dmMyVnBiV2RiTUYwdVptbHNaWE5iTUYwcE8xeHlYRzVjY2x4dUlDQWdJQ0FnTHk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljY2x4dVhISmNibHh5WEc0Z0lDQWdmU2s3WEhKY2JseHlYRzRnSUgxY2NseHVJQ0FzWDJKcGJtUkVaV1poZFd4MFZtRnNkV1VvS1h0Y2NseHVJQ0FnSUhSb2FYTXVYM04xY0dWeUtDazdYSEpjYmx4eVhHNGdJQ0FnZG1GeUlIUm9ZWFFnUFNCMGFHbHpPMXh5WEc0Z0lDQWdkR2hwY3k0a2RHbDBiR1V1YjI0b0oySnNkWEluTEdaMWJtTjBhVzl1S0dVcGUxeHlYRzRnSUNBZ0lDQmNjbHh1SUNBZ0lDQWdMeTkwYUdGMExpUmliM1JmY0dsamF5NXphRzkzS0NrN1hISmNiaUFnSUNBZ0lIUm9ZWFF1WlcxdmFtbGZjR0Z1Wld3dWMyaHZkeWdwTzF4eVhHNGdJQ0FnSUNBdkx5TmhaR0ZrWVdSY2NseHVJQ0FnSUNBZ2RtRnlJR2gwYld4ZklEMGdkR2hwY3k1MllXeDFaUzUwY21sdEtDazdYSEpjYmlBZ0lDQmNjbHh1SUNBZ0lDQWdkbUZ5SUdSbFptRjFiSFJmZG1Gc2RXVWdQU0IwYUdsekxtZGxkRUYwZEhKcFluVjBaU2duWkdWbVlYVnNkRlpoYkhWbEp5a3VkSEpwYlNncE8xeHlYRzRnSUNBZ0lDQmNjbHh1SUNBZ0lDQWdMeTlqYjI1emIyeGxMbXh2Wnlob2RHMXNYeXhrWldaaGRXeDBYM1poYkhWbExDQm9kRzFzWHowOVBXUmxabUYxYkhSZmRtRnNkV1VwTzF4eVhHNGdJQ0FnSUNBdkwybHZjeURvdjVqa3ZKcmx1S2JrdUlvOFluSSs0NENDNDRDQzQ0Q0M0NENDNDRDQ1hISmNiaUFnSUNBZ0lDOHZZV3hsY25Rb1lHSnNkWEk2Skh0b2RHMXNYMzBzYkdWdVozUm9PaVI3YUhSdGJGOHViR1Z1WjNSb2ZXQXBPMXh5WEc0Z0lDQWdJQ0JwWmlob2RHMXNYejA5UFNjbklIeDhJR2gwYld4ZklEMDlQU0FuUEdKeVBpY2dLWHRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMblpoYkhWbElEMGdaR1ZtWVhWc2RGOTJZV3gxWlR0Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TG1Oc1lYTnpUR2x6ZEM1aFpHUW9KMlJsWm1GMWJIUmZkbUZzZFdVdGIzWnZMVEluS1R0Y2NseHVJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJSDBwTzF4eVhHNWNjbHh1SUNBZ0lIUm9hWE11SkhScGRHeGxMbTl1S0NkbWIyTjFjeWNzWm5WdVkzUnBiMjRvWlNsN1hISmNiaUFnSUNBZ1hISmNiaUFnSUNBZ0lDOHZkR2hoZEM0a1ltOTBYM0JwWTJzdWFHbGtaU2dwTzF4eVhHNGdJQ0FnSUNCMGFHRjBMbVZ0YjJwcFgzQmhibVZzTG1ocFpHVW9LVHRjY2x4dVhISmNiaUFnSUNBZ0lIUm9hWE11WTJ4aGMzTk1hWE4wTG5KbGJXOTJaU2duWkdWbVlYVnNkRjkyWVd4MVpTMXZkbTh0TWljcE8xeHlYRzVjY2x4dUlDQWdJQ0FnZG1GeUlHaDBiV3hmSUQwZ2RHaHBjeTUyWVd4MVpTNTBjbWx0S0NrN1hISmNibHh5WEc0Z0lDQWdJQ0IyWVhJZ1pHVm1ZWFZzZEY5MllXeDFaU0E5SUhSb2FYTXVaMlYwUVhSMGNtbGlkWFJsS0Nka1pXWmhkV3gwVm1Gc2RXVW5LUzUwY21sdEtDazdYSEpjYmx4eVhHNGdJQ0FnSUNCcFppaG9kRzFzWHowOVBXUmxabUYxYkhSZmRtRnNkV1VwSUhSb2FYTXVkbUZzZFdVZ1BTQW5KenRjY2x4dUlDQWdJSDBwTzF4eVhHNGdJSDFjY2x4dUlDQXZMeUJ6Wlc1a1hISmNiaUFnTEY5bFpHbDBVM1ZqWTJWemN5Z3BlMXh5WEc0Z0lDQWdYSEpjYmlBZ0lDQmNjbHh1SUNBZ0lIWmhjaUI3WTI5dVptbG5mU0E5SUhSb2FYTXViM0IwYVc5dWN6dGNjbHh1SUNBZ0lDOHZJRlJKVkV4RlgwVk5VRlJaT2lmbW9JZnBvcGprdUkzb2c3M2t1THJucWJvblhISmNiaUFnSUNBdkx5QXNWRWxVVEVWZlZFOVBYMHhQVGtjNkorYWdoK21pbU9Xa3F1bVZ2eTR1TGlkY2NseHVJQ0FnSUM4dklDeERUMDVVUlU1VVgwVk5VRlJaT2lmbnZKYm92cEhsaG9YbHJybmt1STNvZzcza3VMcm5xYm9uWEhKY2JpQWdJQ0F2THlBc1VFaFBWRTlmVkU5UFgwMUJUbGs2SitTOW9PUzhvT2VhaE9lRnArZUpoK1drcXVXa211UzZodVdRcHk0dUxpZGNjbHh1SUNBZ0lDOHZJQ3hUVFVsTVJWOVVUMDlmVFVGT1dUb241TDJnNVkrUjU1cUU2S0dvNW9PRjVhU3E1YVNhNUxxRzVaQ25MaTR1SjF4eVhHNGdJQ0FnTHk4Z0xGZFBVa1JmVkU5UFgwMUJUbGs2SitTOW9PV0dtZWVhaE9XdGwrYVZzT1drcXVXa211UzZodVdRcHk0dUxpZGNjbHh1SUNBZ0lDOHZJQ3hRU0U5T1JWOVVUMDlmUWtsSE9pZmxtNzduaVlmbHBLcmxwS2ZrdW9ZblhISmNiaUFnSUNBdkx5QXNVMVZEUTBWVE9pZmxqNUhvb2FqbWlKRGxpcDhuWEhKY2JpQWdJQ0F2THlBc1RVRllYMU5OU1V4RlV5QTZNakJjY2x4dUlDQWdJQzh2SUM4dkxGTk5TVXhGWDAxQldGOU1SVTQ2TXpCY2NseHVJQ0FnSUM4dklDOHZJQ3hRU0U5VVQxOU5RVmhmVEVWT09qWmNjbHh1SUNBZ0lDOHZJQ3hOUVZoZlVFaFBWRTlGVXpvMlhISmNiaUFnSUNBdkx5QXZMeXhRU0U5VVQxOU5RVmhmVTBsYVJUb3hNREkwS2pFd1hISmNiaUFnSUNBdkx5QXNUVUZZWDBOUFRsUkZUbFJmVjA5U1JGTTZPREF3WEhKY2JpQWdJQ0F2THlBc1RVRllYMVJKVkV4RlgxZFBVa1JUT2pVd1hISmNibHh5WEc0Z0lDQWdMeThnTEUxQldGOVRTVnBGWDFCSVQxUlBJRG9nTVRBeU5Db3hNREkwS2pSY2NseHVJQ0FnSUhKbGRIVnliaUJ1WlhjZ1VISnZiV2x6WlNoeVBUNTdYSEpjYmlBZ0lDQWdJSFpoY2lCMGFHRjBJRDBnZEdocGN6dGNjbHh1SUNBZ0lDQWdkbUZ5SUhaZlBTY25PMXh5WEc0Z0lDQWdJQ0IyWVhJZ2RqSmZQU2NuTzF4eVhHNGdJQ0FnSUNCMllYSWdhR0Z1Wkd4bElEMGdLR1oxYm1OMGFXOXVLQ2w3WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJSFlnUFNCMGFHRjBMaVIwYVhSc1pTNTJZV3dvS1M1MGNtbHRLQ2s3WEhKY2JseHlYRzRnSUNBZ0lDQWdJR2xtS0NGMkxteGxibWQwYUNCOGZDQWdkajA5UFhSb1lYUXVKSFJwZEd4bExtRjBkSElvSjJSbFptRjFiSFJXWVd4MVpTY3BLWHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hoZEM1ZlpHbHpjR3hoZVUxelp5aGpiMjVtYVdjdVZFbFVURVZmUlUxUVZGa3BPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ1hISmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlDZHVaWGgwVTNWalkyVnpjMjl5Snp0Y2NseHVYSEpjYmlBZ0lDQWdJSDBwWEhKY2JpQWdJQ0FnSUM1aFpuUmxjaWhtZFc1amRHbHZiaWdwZTF4eVhHNGdJQ0FnSUNBZ0lIWmhjaUIySUQwZ2RHaGhkQzRrZEdsMGJHVXVkbUZzS0NrdWRISnBiU2dwTzF4eVhHNGdJQ0FnSUNBZ0lHbG1LSFl1YkdWdVozUm9JRDVqYjI1bWFXY3VUVUZZWDFSSlZFeEZYMWRQVWtSVEtYdGNjbHh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdGMExsOWthWE53YkdGNVRYTm5LR052Ym1acFp5NVVTVlJNUlY5VVQwOWZURTlPUnlrN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUFuYm1WNGRGTjFZMk5sYzNOdmNpYzdYSEpjYmlBZ0lDQWdJSDBwWEhKY2JpQWdJQ0FnSUM1aFpuUmxjaWhtZFc1amRHbHZiaWdwZTF4eVhHNGdJQ0FnSUNBZ0lIWmhjaUJ3YUc5MGIxOXNaVzRnUFNBa0tDY3Vabkp2YlMxcGJuQjFkQzF2ZG04bkxIUm9ZWFF1SkdOdmJuUmxiblFwTG14bGJtZDBhRHRjY2x4dUlDQWdJQ0FnSUNCMllYSWdjMjFwYkdWZmJHVnVJRDBnSkNnbkxuTnRhV3hsTFc5MmJ5Y3NkR2hoZEM0a1kyOXVkR1Z1ZENrdWJHVnVaM1JvTzF4eVhHNGdJQ0FnSUNBZ0lIWmhjaUIySUQwZ2RHaGhkQzRrWTI5dWRHVnVkRnN3WFM1MFpYaDBRMjl1ZEdWdWRDNTBjbWx0S0NrN1hISmNiaUFnSUZ4eVhHNGdJQ0FnSUNBZ0lHbG1LQ0FvSVhZdWJHVnVaM1JvSUh4OElDQjJQVDA5ZEdoaGRDNGtZMjl1ZEdWdWRGc3dYUzVuWlhSQmRIUnlhV0oxZEdVb0oyUmxabUYxYkhSV1lXeDFaU2NwSUNrZ0ppWmNjbHh1SUNBZ0lDQWdJQ0FoY0dodmRHOWZiR1Z1SUNZbUlDRnpiV2xzWlY5c1pXNWNjbHh1SUNBZ0lDQWdJQ0FwZTF4eVhHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUm9ZWFF1WDJScGMzQnNZWGxOYzJjb1kyOXVabWxuTGtOUFRsUkZUbFJmUlUxUVZGa3BPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z0oyNWxlSFJUZFdOalpYTnpiM0luTzF4eVhHNGdJQ0FnSUNCOUtWeHlYRzRnSUNBZ0lDQXVZV1owWlhJb1puVnVZM1JwYjI0b0tYdGNjbHh1SUNBZ0lDQWdJQ0IyWVhJZ2MyMXBiR1ZmYkdWdUlEMGdKQ2duTG5OdGFXeGxMVzkyYnljc2RHaGhkQzRrWTI5dWRHVnVkQ2t1YkdWdVozUm9PMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQXZMME5QVGxOUFRFVXVURWRQWEhKY2JpQWdJQ0FnSUNBZ0x5OWpiMjV6YjJ4bExteHZaeWduYzIxcGJHVmZiR1Z1T2ljc2MyMXBiR1ZmYkdWdUtUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ2FXWW9jMjFwYkdWZmJHVnVQbU52Ym1acFp5NU5RVmhmVTAxSlRFVlRLU0J5WlhSMWNtNGdkR2hoZEM1ZlpHbHpjR3hoZVUxelp5aGpiMjVtYVdjdVUwMUpURVZmVkU5UFgwMUJUbGtwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdKMjVsZUhSVGRXTmpaWE56YjNJbk8xeHlYRzRnSUNBZ0lDQjlLVnh5WEc0Z0lDQWdJQ0F1WVdaMFpYSW9ablZ1WTNScGIyNG9LWHRjY2x4dUlDQWdJQ0FnSUNCMllYSWdjR2h2ZEc5ZmJHVnVJRDBnSkNnbkxtWnliMjB0YVc1d2RYUXRiM1p2Snl4MGFHRjBMaVJqYjI1MFpXNTBLUzVzWlc1bmRHZzdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lHbG1LSEJvYjNSdlgyeGxiajVqYjI1bWFXY3VUVUZZWDFCSVQxUlBSVk1wSUhKbGRIVnliaUIwYUdGMExsOWthWE53YkdGNVRYTm5LR052Ym1acFp5NVFTRTlVVDE5VVQwOWZUVUZPV1NrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUFuYm1WNGRGTjFZMk5sYzNOdmNpYzdYSEpjYmlBZ0lDQWdJSDBwWEhKY2JpQWdJQ0FnSUM1aFpuUmxjaWhtZFc1amRHbHZiaWdwZTF4eVhHNGdJQ0FnSUNBZ0lIWmhjaUIySUQwZ2RHaGhkQzRrWTI5dWRHVnVkRnN3WFM1MFpYaDBRMjl1ZEdWdWRDNTBjbWx0S0NrN1hISmNiaUFnSUNBZ0lDQWdhV1lvZGk1c1pXNW5kR2dnUG1OdmJtWnBaeTVOUVZoZlEwOU9WRVZPVkY5WFQxSkVVeWw3WEhKY2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaGhkQzVmWkdsemNHeGhlVTF6WnloamIyNW1hV2N1VjA5U1JGOVVUMDlmVFVGT1dTazdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdKMjVsZUhSVGRXTmpaWE56YjNJbk8xeHlYRzRnSUNBZ0lDQjlLVnh5WEc0Z0lDQWdJQ0F1WVdaMFpYSW9ablZ1WTNScGIyNG9LWHRjY2x4dUlDQWdJQ0FnSUNCeUtIdGNjbHh1SUNBZ0lDQWdJQ0FnSUdoMGJXeGZkR2wwYkdVNklIUm9ZWFF1WDNKbGMwRmtZWEIwWlhJb2RHaGhkQzRrZEdsMGJHVXVkbUZzS0NrdWRISnBiU2dwS1Z4MFhISmNiaUFnSUNBZ0lDQWdJQ0FzYUhSdGJGOWpiMjUwWlc1ME9uUm9ZWFF1WDNKbGMwRmtZWEIwWlhJb2RHaGhkQzRrWTI5dWRHVnVkRnN3WFM1cGJtNWxja2hVVFV3dWRISnBiU2dwS1Z4eVhHNGdJQ0FnSUNBZ0lDQWdMSFJsZUhSZlkyOXVkR1Z1ZERvZ2RHaGhkQzVmY21WelFXUmhjSFJsY2loMGFHRjBMaVJqYjI1MFpXNTBXekJkTG5SbGVIUkRiMjUwWlc1MExuUnlhVzBvS1NrZ1hISmNiaUFnSUNBZ0lDQWdYSEpjYmlBZ0lDQWdJQ0FnZlNrN1hISmNiaUFnSUNBZ0lIMHBPMXh5WEc1Y2NseHVJQ0FnSUNBZ2FHRnVaR3hsS0NrN0lDQmNjbHh1SUNBZ0lIMHBYSEpjYmx4eVhHNGdJSDFjY2x4dVhISmNiaUFnTEdOc1pXRnlLQ2w3WEhKY2JpQWdJQ0IwYUdsekxsOXpkWEJsY2lncE8xeHlYRzRnSUNBZ2RHaHBjeTRrZEdsMGJHVXVkbUZzS0hSb2FYTXVKSFJwZEd4bExtRjBkSElvSjJSbFptRjFiSFJXWVd4MVpTY3BLVHRjY2x4dUlDQWdJSFJvYVhNdUpIUnBkR3hsV3pCZExtTnNZWE56VEdsemRDNWhaR1FvSjJSbFptRjFiSFJmZG1Gc2RXVXRiM1p2TFRJbktUdGNjbHh1WEhKY2JpQWdJQ0IwYUdsekxuVndiRzloWkY5d2FXTjBkWEpsY3lBOUlGdGRPMXh5WEc1Y2NseHVJQ0I5WEhKY2JpQWdMRjlvWVc1a2JHVkRiMjVtYVhKdEtDbDdYSEpjYmlBZ0lGeHlYRzVjY2x4dUlDQWdJQ1FvZEdocGN5NWpiMjV6ZEhKMVkzUnZjaTVGVEY5RFQwNUdTVkpOS1M1dmJpZ25ZMnhwWTJzbkxHVTlQbnRjY2x4dUlDQWdJQ0FnWEhKY2JpQWdJQ0FnSUhSb2FYTXVYMlZrYVhSVGRXTmpaWE56S0NrdWRHaGxiaWh5WlhNOVBudGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0x5OWtaV0oxWjJkbGNqdGNjbHh1SUNBZ0lDQWdYSEpjYmlBZ0lDQWdJQ0FnZG1GeUlIdDBaWGgwWDJOdmJuUmxiblFzYUhSdGJGOWpiMjUwWlc1MExHaDBiV3hmZEdsMGJHVjlJRDBnY21Wek8xeHlYRzRnSUZ4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11ZEhKcFoyZGxjaWduWTI5dGNHeGxkR1VuTEh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0JvZEcxc1gyTnZiblJsYm5Rc2RHVjRkRjlqYjI1MFpXNTBMR2gwYld4ZmRHbDBiR1ZjY2x4dUlDQWdJQ0FnSUNBZ0lDQXNkWEJzYjJGa1gzQnBZM1IxY21Wek9uUm9hWE11ZFhCc2IyRmtYM0JwWTNSMWNtVnpYSEpjYmlBZ0lDQWdJQ0FnSUNBc1pXeGZkR0Z5WjJWME9uUm9hWE11Wld4ZmRHRnlaMlYwWEhKY2JpQWdJQ0FnSUNBZ0lDQXNaV1JwZEY5MGFXMWxPa1JoZEdVdWJtOTNLQ2xjY2x4dUlDQWdJQ0FnSUNCOUtUdGNjbHh1WEhKY2JpQWdJQ0FnSUgwcE8xeHlYRzVjY2x4dUlDQWdJSDBwWEhKY2JpQWdmVnh5WEc0Z0lDeGZZM0psWVhSbFEyaHBiR1FvS1h0Y2NseHVJQ0FnSUhSb2FYTXVYM04xY0dWeUtDazdYSEpjYmlBZ0lDQXZMMlZrYVhSdmNpMXlaWEJzZVMxdmRtOWNjbHh1SUNBZ0lIUm9hWE11Wld3dVkyeGhjM05NYVhOMExtRmtaQ2gwYUdsekxtTnZibk4wY25WamRHOXlMa05NVXlrN1hISmNiaUFnSUNCY2NseHVJQ0FnSUM4dklDeERURk5mUkVWR1FWVk1WRjlXUVV4VlJUb25aR1ZtWVhWc2RGOTJZV3gxWlMxdmRtOG5YSEpjYmlBZ0lDQXZMeUFzUlV4ZlEwOU9WRVZPVkRvblpHbDJXMk52Ym5SbGJuUXRiM1p2WFNkY2NseHVJQ0FnSUM4dklDeEZURjlEUVU1RFJVdzZKMkoxZEhSdmJsdGpZVzVqWld3dGIzWnZYU2RjY2x4dUlDQWdJQzh2SUN4RlRGOURUMDVHU1ZKTk9pZGlkWFIwYjI1YlkyOXVabWx5YlMxdmRtOWRKMXh5WEc0Z0lDQWdMeThnTEVWTVgxTk5TVXhGT2lka2FYWmJjMjFwYkdVdGFHOXNaR1Z5TFc5MmIxMG5YSEpjYmlBZ0lDQXZMeUFzUlV4ZlUwMUpURVZmU1VOUFRqb25iR2xiYzIxcGJHVXRhV052YmkxdmRtOWRKMXh5WEc0Z0lDQWdMeThnTEVWTVgwUkpVMUJNUVZsZlRWTkhPaWRrYVhaYmJXVnpjMkZuWlMxdmRtOWRKMXh5WEc0Z0lDQWdkR2hwY3k1bGJDNXBibTVsY2toVVRVd2dQU0JnWEhKY2JpQWdJQ0FnSUR4a2FYWWdZMnhoYzNNOVhDSmxhbDkzY21Gd0lISmxiRndpUGx4eVhHNGdJQ0FnSUNBZ0lEeGthWFlnWTJ4aGMzTTlYQ0poWW5NZ2QyaGNJajVjY2x4dUlDQWdJQ0FnSUNBZ0lEeGthWFlnWTJ4aGMzTTlYQ0psYWw5amIyMXRaVzUwWDE5cGJuQjFkRndpUGx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0E4WkdsMklHTnNZWE56UFZ3aVpXcGZZMjl0YldWdWRGOWZkR2wwYkdVZ2NtVnNYQ0krWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnUEdsdWNIVjBJSFJwZEd4bExXOTJieUIwZVhCbFBWd2lkR1Y0ZEZ3aUlHUmxabUYxYkhSV1lXeDFaVDFjSXVXS29PUzRxdWFnaCttaW1PV1RuMzVjSWlBdlBseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBOEwyUnBkajVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdQR1JwZGlCamIyNTBaVzUwTFc5MmJ5QmpiR0Z6Y3oxY0ltVnFYMk52YlcxbGJuUmZYMk52Ym5SbGJuUmNJaUJqYjI1MFpXNTBaV1JwZEdGaWJHVTlYQ0owY25WbFhDSWdaR1ZtWVhWc2RGWmhiSFZsUFZ3aTViQzk1b09GNVkrUjVveWw1WkNuTGk0dVhDSStQSEErUEM5d1Bqd3ZaR2wyUGx4eVhHNGdJQ0FnSUNBZ0lDQWdQQzlrYVhZK1hISmNiaUFnSUNBZ0lDQWdJQ0E4WkdsMklHTnNZWE56UFZ3aVpXcGZZMjl0YldWdWRGOWZZbTkwSUhKbGJGd2lQbHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQThkV3crWEhSY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBOGJHa2djMjFwYkdVdGFXTnZiaTF2ZG04Z2RHbDBiR1U5WENMbXQ3dmxpcURvb2FqbWc0VmNJajQ4TDJ4cFBseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lEeHNhU0IwYVhSc1pUMWNJdWEzdStXS29PV2J2dWVKaDF3aVBqeHBibkIxZENCamJHRnpjejFjSW1WcVgyTnZiVzFsYm5SZlgyTm9iMjl6WldsdFoxd2lJSFI1Y0dVOVhDSm1hV3hsWENJdlBqd3ZiR2srWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJRHd2ZFd3K1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUR4aWRYUjBiMjRnWTI5dVptbHliUzF2ZG04Z1kyeGhjM005WENKbGFsOWpiMjF0Wlc1MFgxOXdkV0lnY21Wc1hDSStYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdQSE53WVc0Z1kyeGhjM005WENKaFluTWdkMmhjSWo3bGo1SG9vYWc4TDNOd1lXNCtYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lEd3ZZblYwZEc5dVBseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBOFluVjBkRzl1SUdOaGJtTmxiQzF2ZG04Z1kyeGhjM005WENKbGFsOWpiMjF0Wlc1MFgxOWpZVzVqWld3Z2NtVnNYQ0krWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnUEhOd1lXNGdZMnhoYzNNOVhDSmhZbk1nZDJoY0lqN2xqNWJtdG9nOEwzTndZVzQrWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJRHd2WW5WMGRHOXVQbHh5WEc0Z0lDQWdJQ0FnSUNBZ1BDOWthWFkrWEhKY2JpQWdJQ0FnSUNBZ1BDOWthWFkrWEhKY2JpQWdJQ0FnSUNBZ1hISmNiaUFnSUNBZ0lEd3ZaR2wyUGx4eVhHNWNjbHh1SUNBZ0lDQWdQR1JwZGlCamJHRnpjejFjSW5OdGFXeGxMV2h2YkdSbGNsd2lJSE50YVd4bExXaHZiR1JsY2kxdmRtOCtYSEpjYmlBZ0lDQWdJQ0FnWEhKY2JpQWdJQ0FnSUR3dlpHbDJQbHh5WEc1Y2NseHVJQ0FnSUNBZ1BHUnBkaUJqYkdGemN6MWNJbVZxTFdOdmJXMWxiblJmWDIxelp5QmhZbk5jSWlCdFpYTnpZV2RsTFc5MmJ6NWNjbHh1SUNBZ0lDQWdJQ0E4WkdsMklHTnNZWE56UFZ3aVlXSnpJSGRvWENJK1hISmNiaUFnSUNBZ0lDQWdJQ0E4YzNCaGJqN292cFBsaGFYbGg2RGt1S3JsclpmdnZKODhMM053WVc0K1hISmNiaUFnSUNBZ0lDQWdQQzlrYVhZK1hISmNiaUFnSUNBZ0lEd3ZaR2wyUGx4eVhHNGdJQ0FnWUR0Y2NseHVYSEpjYmlBZ0lDQjBhR2x6TGlSamIyNTBaVzUwSUQwZ0pDaDBhR2x6TG1OdmJuTjBjblZqZEc5eUxrVk1YME5QVGxSRlRsUXNkR2hwY3k1bGJDazdYSEpjYmlBZ0lDQjBhR2x6TGlSMGFYUnNaU0E5SUNRb2RHaHBjeTVqYjI1emRISjFZM1J2Y2k1RlRGOVVTVlJNUlN4MGFHbHpMbVZzS1R0Y2NseHVYSEpjYmlBZ0lDQjBhR2x6TGlSdGMyZGZhRzlzWkdWeUlEMGdKQ2gwYUdsekxtTnZibk4wY25WamRHOXlMa1ZNWDBSSlUxQk1RVmxmVFZOSExIUm9hWE11Wld3cFhISmNiaUFnSUNCMGFHbHpMaVJ0YzJkZmRHVjRkQ0E5SUNRb0ozTndZVzRuTEhSb2FYTXVKRzF6WjE5b2IyeGtaWElwTzF4eVhHNGdJQ0FnWEhKY2JseHlYRzRnSUgxY2NseHVmU3g3WEhKY2JpQWdRMHhUT2lkbFpHbDBiM0l0Y0c5emRDMXZkbThuWEhKY2JpQWdMRVZNWDFSSlZFeEZPaWRwYm5CMWRGdDBhWFJzWlMxdmRtOWRKMXh5WEc1OUtUdGNjbHh1WEhKY2JseHlYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQlFiM04wTzF4dVhHNWNiaTh2SUZkRlFsQkJRMHNnUms5UFZFVlNJQzh2WEc0dkx5QXVMM055WXk5d2IzTjBMbXB6SWwwc0luTnZkWEpqWlZKdmIzUWlPaUlpZlE9PVxcbi8vIyBzb3VyY2VVUkw9d2VicGFjay1pbnRlcm5hbDovLy83MlxcblwiKTtcblxuLyoqKi8gfSksXG4vKiA3MyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5ldmFsKFwidmFyIF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18sIF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fOyhmdW5jdGlvbigpIHtcXG5cXG4gICAgdmFyIGRlYnVnID0gZmFsc2U7XFxuXFxuICAgIHZhciByb290ID0gdGhpcztcXG5cXG4gICAgdmFyIEVYSUYgPSBmdW5jdGlvbihvYmopIHtcXG4gICAgICAgIGlmIChvYmogaW5zdGFuY2VvZiBFWElGKSByZXR1cm4gb2JqO1xcbiAgICAgICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEVYSUYpKSByZXR1cm4gbmV3IEVYSUYob2JqKTtcXG4gICAgICAgIHRoaXMuRVhJRndyYXBwZWQgPSBvYmo7XFxuICAgIH07XFxuXFxuICAgIGlmICh0cnVlKSB7XFxuICAgICAgICBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcXG4gICAgICAgICAgICBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBFWElGO1xcbiAgICAgICAgfVxcbiAgICAgICAgZXhwb3J0cy5FWElGID0gRVhJRjtcXG4gICAgfSBlbHNlIHtcXG4gICAgICAgIHJvb3QuRVhJRiA9IEVYSUY7XFxuICAgIH1cXG5cXG4gICAgdmFyIEV4aWZUYWdzID0gRVhJRi5UYWdzID0ge1xcblxcbiAgICAgICAgLy8gdmVyc2lvbiB0YWdzXFxuICAgICAgICAweDkwMDAgOiBcXFwiRXhpZlZlcnNpb25cXFwiLCAgICAgICAgICAgICAvLyBFWElGIHZlcnNpb25cXG4gICAgICAgIDB4QTAwMCA6IFxcXCJGbGFzaHBpeFZlcnNpb25cXFwiLCAgICAgICAgIC8vIEZsYXNocGl4IGZvcm1hdCB2ZXJzaW9uXFxuXFxuICAgICAgICAvLyBjb2xvcnNwYWNlIHRhZ3NcXG4gICAgICAgIDB4QTAwMSA6IFxcXCJDb2xvclNwYWNlXFxcIiwgICAgICAgICAgICAgIC8vIENvbG9yIHNwYWNlIGluZm9ybWF0aW9uIHRhZ1xcblxcbiAgICAgICAgLy8gaW1hZ2UgY29uZmlndXJhdGlvblxcbiAgICAgICAgMHhBMDAyIDogXFxcIlBpeGVsWERpbWVuc2lvblxcXCIsICAgICAgICAgLy8gVmFsaWQgd2lkdGggb2YgbWVhbmluZ2Z1bCBpbWFnZVxcbiAgICAgICAgMHhBMDAzIDogXFxcIlBpeGVsWURpbWVuc2lvblxcXCIsICAgICAgICAgLy8gVmFsaWQgaGVpZ2h0IG9mIG1lYW5pbmdmdWwgaW1hZ2VcXG4gICAgICAgIDB4OTEwMSA6IFxcXCJDb21wb25lbnRzQ29uZmlndXJhdGlvblxcXCIsIC8vIEluZm9ybWF0aW9uIGFib3V0IGNoYW5uZWxzXFxuICAgICAgICAweDkxMDIgOiBcXFwiQ29tcHJlc3NlZEJpdHNQZXJQaXhlbFxcXCIsICAvLyBDb21wcmVzc2VkIGJpdHMgcGVyIHBpeGVsXFxuXFxuICAgICAgICAvLyB1c2VyIGluZm9ybWF0aW9uXFxuICAgICAgICAweDkyN0MgOiBcXFwiTWFrZXJOb3RlXFxcIiwgICAgICAgICAgICAgICAvLyBBbnkgZGVzaXJlZCBpbmZvcm1hdGlvbiB3cml0dGVuIGJ5IHRoZSBtYW51ZmFjdHVyZXJcXG4gICAgICAgIDB4OTI4NiA6IFxcXCJVc2VyQ29tbWVudFxcXCIsICAgICAgICAgICAgIC8vIENvbW1lbnRzIGJ5IHVzZXJcXG5cXG4gICAgICAgIC8vIHJlbGF0ZWQgZmlsZVxcbiAgICAgICAgMHhBMDA0IDogXFxcIlJlbGF0ZWRTb3VuZEZpbGVcXFwiLCAgICAgICAgLy8gTmFtZSBvZiByZWxhdGVkIHNvdW5kIGZpbGVcXG5cXG4gICAgICAgIC8vIGRhdGUgYW5kIHRpbWVcXG4gICAgICAgIDB4OTAwMyA6IFxcXCJEYXRlVGltZU9yaWdpbmFsXFxcIiwgICAgICAgIC8vIERhdGUgYW5kIHRpbWUgd2hlbiB0aGUgb3JpZ2luYWwgaW1hZ2Ugd2FzIGdlbmVyYXRlZFxcbiAgICAgICAgMHg5MDA0IDogXFxcIkRhdGVUaW1lRGlnaXRpemVkXFxcIiwgICAgICAgLy8gRGF0ZSBhbmQgdGltZSB3aGVuIHRoZSBpbWFnZSB3YXMgc3RvcmVkIGRpZ2l0YWxseVxcbiAgICAgICAgMHg5MjkwIDogXFxcIlN1YnNlY1RpbWVcXFwiLCAgICAgICAgICAgICAgLy8gRnJhY3Rpb25zIG9mIHNlY29uZHMgZm9yIERhdGVUaW1lXFxuICAgICAgICAweDkyOTEgOiBcXFwiU3Vic2VjVGltZU9yaWdpbmFsXFxcIiwgICAgICAvLyBGcmFjdGlvbnMgb2Ygc2Vjb25kcyBmb3IgRGF0ZVRpbWVPcmlnaW5hbFxcbiAgICAgICAgMHg5MjkyIDogXFxcIlN1YnNlY1RpbWVEaWdpdGl6ZWRcXFwiLCAgICAgLy8gRnJhY3Rpb25zIG9mIHNlY29uZHMgZm9yIERhdGVUaW1lRGlnaXRpemVkXFxuXFxuICAgICAgICAvLyBwaWN0dXJlLXRha2luZyBjb25kaXRpb25zXFxuICAgICAgICAweDgyOUEgOiBcXFwiRXhwb3N1cmVUaW1lXFxcIiwgICAgICAgICAgICAvLyBFeHBvc3VyZSB0aW1lIChpbiBzZWNvbmRzKVxcbiAgICAgICAgMHg4MjlEIDogXFxcIkZOdW1iZXJcXFwiLCAgICAgICAgICAgICAgICAgLy8gRiBudW1iZXJcXG4gICAgICAgIDB4ODgyMiA6IFxcXCJFeHBvc3VyZVByb2dyYW1cXFwiLCAgICAgICAgIC8vIEV4cG9zdXJlIHByb2dyYW1cXG4gICAgICAgIDB4ODgyNCA6IFxcXCJTcGVjdHJhbFNlbnNpdGl2aXR5XFxcIiwgICAgIC8vIFNwZWN0cmFsIHNlbnNpdGl2aXR5XFxuICAgICAgICAweDg4MjcgOiBcXFwiSVNPU3BlZWRSYXRpbmdzXFxcIiwgICAgICAgICAvLyBJU08gc3BlZWQgcmF0aW5nXFxuICAgICAgICAweDg4MjggOiBcXFwiT0VDRlxcXCIsICAgICAgICAgICAgICAgICAgICAvLyBPcHRvZWxlY3RyaWMgY29udmVyc2lvbiBmYWN0b3JcXG4gICAgICAgIDB4OTIwMSA6IFxcXCJTaHV0dGVyU3BlZWRWYWx1ZVxcXCIsICAgICAgIC8vIFNodXR0ZXIgc3BlZWRcXG4gICAgICAgIDB4OTIwMiA6IFxcXCJBcGVydHVyZVZhbHVlXFxcIiwgICAgICAgICAgIC8vIExlbnMgYXBlcnR1cmVcXG4gICAgICAgIDB4OTIwMyA6IFxcXCJCcmlnaHRuZXNzVmFsdWVcXFwiLCAgICAgICAgIC8vIFZhbHVlIG9mIGJyaWdodG5lc3NcXG4gICAgICAgIDB4OTIwNCA6IFxcXCJFeHBvc3VyZUJpYXNcXFwiLCAgICAgICAgICAgIC8vIEV4cG9zdXJlIGJpYXNcXG4gICAgICAgIDB4OTIwNSA6IFxcXCJNYXhBcGVydHVyZVZhbHVlXFxcIiwgICAgICAgIC8vIFNtYWxsZXN0IEYgbnVtYmVyIG9mIGxlbnNcXG4gICAgICAgIDB4OTIwNiA6IFxcXCJTdWJqZWN0RGlzdGFuY2VcXFwiLCAgICAgICAgIC8vIERpc3RhbmNlIHRvIHN1YmplY3QgaW4gbWV0ZXJzXFxuICAgICAgICAweDkyMDcgOiBcXFwiTWV0ZXJpbmdNb2RlXFxcIiwgICAgICAgICAgICAvLyBNZXRlcmluZyBtb2RlXFxuICAgICAgICAweDkyMDggOiBcXFwiTGlnaHRTb3VyY2VcXFwiLCAgICAgICAgICAgICAvLyBLaW5kIG9mIGxpZ2h0IHNvdXJjZVxcbiAgICAgICAgMHg5MjA5IDogXFxcIkZsYXNoXFxcIiwgICAgICAgICAgICAgICAgICAgLy8gRmxhc2ggc3RhdHVzXFxuICAgICAgICAweDkyMTQgOiBcXFwiU3ViamVjdEFyZWFcXFwiLCAgICAgICAgICAgICAvLyBMb2NhdGlvbiBhbmQgYXJlYSBvZiBtYWluIHN1YmplY3RcXG4gICAgICAgIDB4OTIwQSA6IFxcXCJGb2NhbExlbmd0aFxcXCIsICAgICAgICAgICAgIC8vIEZvY2FsIGxlbmd0aCBvZiB0aGUgbGVucyBpbiBtbVxcbiAgICAgICAgMHhBMjBCIDogXFxcIkZsYXNoRW5lcmd5XFxcIiwgICAgICAgICAgICAgLy8gU3Ryb2JlIGVuZXJneSBpbiBCQ1BTXFxuICAgICAgICAweEEyMEMgOiBcXFwiU3BhdGlhbEZyZXF1ZW5jeVJlc3BvbnNlXFxcIiwgICAgLy9cXG4gICAgICAgIDB4QTIwRSA6IFxcXCJGb2NhbFBsYW5lWFJlc29sdXRpb25cXFwiLCAgIC8vIE51bWJlciBvZiBwaXhlbHMgaW4gd2lkdGggZGlyZWN0aW9uIHBlciBGb2NhbFBsYW5lUmVzb2x1dGlvblVuaXRcXG4gICAgICAgIDB4QTIwRiA6IFxcXCJGb2NhbFBsYW5lWVJlc29sdXRpb25cXFwiLCAgIC8vIE51bWJlciBvZiBwaXhlbHMgaW4gaGVpZ2h0IGRpcmVjdGlvbiBwZXIgRm9jYWxQbGFuZVJlc29sdXRpb25Vbml0XFxuICAgICAgICAweEEyMTAgOiBcXFwiRm9jYWxQbGFuZVJlc29sdXRpb25Vbml0XFxcIiwgICAgLy8gVW5pdCBmb3IgbWVhc3VyaW5nIEZvY2FsUGxhbmVYUmVzb2x1dGlvbiBhbmQgRm9jYWxQbGFuZVlSZXNvbHV0aW9uXFxuICAgICAgICAweEEyMTQgOiBcXFwiU3ViamVjdExvY2F0aW9uXFxcIiwgICAgICAgICAvLyBMb2NhdGlvbiBvZiBzdWJqZWN0IGluIGltYWdlXFxuICAgICAgICAweEEyMTUgOiBcXFwiRXhwb3N1cmVJbmRleFxcXCIsICAgICAgICAgICAvLyBFeHBvc3VyZSBpbmRleCBzZWxlY3RlZCBvbiBjYW1lcmFcXG4gICAgICAgIDB4QTIxNyA6IFxcXCJTZW5zaW5nTWV0aG9kXFxcIiwgICAgICAgICAgIC8vIEltYWdlIHNlbnNvciB0eXBlXFxuICAgICAgICAweEEzMDAgOiBcXFwiRmlsZVNvdXJjZVxcXCIsICAgICAgICAgICAgICAvLyBJbWFnZSBzb3VyY2UgKDMgPT0gRFNDKVxcbiAgICAgICAgMHhBMzAxIDogXFxcIlNjZW5lVHlwZVxcXCIsICAgICAgICAgICAgICAgLy8gU2NlbmUgdHlwZSAoMSA9PSBkaXJlY3RseSBwaG90b2dyYXBoZWQpXFxuICAgICAgICAweEEzMDIgOiBcXFwiQ0ZBUGF0dGVyblxcXCIsICAgICAgICAgICAgICAvLyBDb2xvciBmaWx0ZXIgYXJyYXkgZ2VvbWV0cmljIHBhdHRlcm5cXG4gICAgICAgIDB4QTQwMSA6IFxcXCJDdXN0b21SZW5kZXJlZFxcXCIsICAgICAgICAgIC8vIFNwZWNpYWwgcHJvY2Vzc2luZ1xcbiAgICAgICAgMHhBNDAyIDogXFxcIkV4cG9zdXJlTW9kZVxcXCIsICAgICAgICAgICAgLy8gRXhwb3N1cmUgbW9kZVxcbiAgICAgICAgMHhBNDAzIDogXFxcIldoaXRlQmFsYW5jZVxcXCIsICAgICAgICAgICAgLy8gMSA9IGF1dG8gd2hpdGUgYmFsYW5jZSwgMiA9IG1hbnVhbFxcbiAgICAgICAgMHhBNDA0IDogXFxcIkRpZ2l0YWxab29tUmF0aW9uXFxcIiwgICAgICAgLy8gRGlnaXRhbCB6b29tIHJhdGlvXFxuICAgICAgICAweEE0MDUgOiBcXFwiRm9jYWxMZW5ndGhJbjM1bW1GaWxtXFxcIiwgICAvLyBFcXVpdmFsZW50IGZvYWNsIGxlbmd0aCBhc3N1bWluZyAzNW1tIGZpbG0gY2FtZXJhIChpbiBtbSlcXG4gICAgICAgIDB4QTQwNiA6IFxcXCJTY2VuZUNhcHR1cmVUeXBlXFxcIiwgICAgICAgIC8vIFR5cGUgb2Ygc2NlbmVcXG4gICAgICAgIDB4QTQwNyA6IFxcXCJHYWluQ29udHJvbFxcXCIsICAgICAgICAgICAgIC8vIERlZ3JlZSBvZiBvdmVyYWxsIGltYWdlIGdhaW4gYWRqdXN0bWVudFxcbiAgICAgICAgMHhBNDA4IDogXFxcIkNvbnRyYXN0XFxcIiwgICAgICAgICAgICAgICAgLy8gRGlyZWN0aW9uIG9mIGNvbnRyYXN0IHByb2Nlc3NpbmcgYXBwbGllZCBieSBjYW1lcmFcXG4gICAgICAgIDB4QTQwOSA6IFxcXCJTYXR1cmF0aW9uXFxcIiwgICAgICAgICAgICAgIC8vIERpcmVjdGlvbiBvZiBzYXR1cmF0aW9uIHByb2Nlc3NpbmcgYXBwbGllZCBieSBjYW1lcmFcXG4gICAgICAgIDB4QTQwQSA6IFxcXCJTaGFycG5lc3NcXFwiLCAgICAgICAgICAgICAgIC8vIERpcmVjdGlvbiBvZiBzaGFycG5lc3MgcHJvY2Vzc2luZyBhcHBsaWVkIGJ5IGNhbWVyYVxcbiAgICAgICAgMHhBNDBCIDogXFxcIkRldmljZVNldHRpbmdEZXNjcmlwdGlvblxcXCIsICAgIC8vXFxuICAgICAgICAweEE0MEMgOiBcXFwiU3ViamVjdERpc3RhbmNlUmFuZ2VcXFwiLCAgICAvLyBEaXN0YW5jZSB0byBzdWJqZWN0XFxuXFxuICAgICAgICAvLyBvdGhlciB0YWdzXFxuICAgICAgICAweEEwMDUgOiBcXFwiSW50ZXJvcGVyYWJpbGl0eUlGRFBvaW50ZXJcXFwiLFxcbiAgICAgICAgMHhBNDIwIDogXFxcIkltYWdlVW5pcXVlSURcXFwiICAgICAgICAgICAgLy8gSWRlbnRpZmllciBhc3NpZ25lZCB1bmlxdWVseSB0byBlYWNoIGltYWdlXFxuICAgIH07XFxuXFxuICAgIHZhciBUaWZmVGFncyA9IEVYSUYuVGlmZlRhZ3MgPSB7XFxuICAgICAgICAweDAxMDAgOiBcXFwiSW1hZ2VXaWR0aFxcXCIsXFxuICAgICAgICAweDAxMDEgOiBcXFwiSW1hZ2VIZWlnaHRcXFwiLFxcbiAgICAgICAgMHg4NzY5IDogXFxcIkV4aWZJRkRQb2ludGVyXFxcIixcXG4gICAgICAgIDB4ODgyNSA6IFxcXCJHUFNJbmZvSUZEUG9pbnRlclxcXCIsXFxuICAgICAgICAweEEwMDUgOiBcXFwiSW50ZXJvcGVyYWJpbGl0eUlGRFBvaW50ZXJcXFwiLFxcbiAgICAgICAgMHgwMTAyIDogXFxcIkJpdHNQZXJTYW1wbGVcXFwiLFxcbiAgICAgICAgMHgwMTAzIDogXFxcIkNvbXByZXNzaW9uXFxcIixcXG4gICAgICAgIDB4MDEwNiA6IFxcXCJQaG90b21ldHJpY0ludGVycHJldGF0aW9uXFxcIixcXG4gICAgICAgIDB4MDExMiA6IFxcXCJPcmllbnRhdGlvblxcXCIsXFxuICAgICAgICAweDAxMTUgOiBcXFwiU2FtcGxlc1BlclBpeGVsXFxcIixcXG4gICAgICAgIDB4MDExQyA6IFxcXCJQbGFuYXJDb25maWd1cmF0aW9uXFxcIixcXG4gICAgICAgIDB4MDIxMiA6IFxcXCJZQ2JDclN1YlNhbXBsaW5nXFxcIixcXG4gICAgICAgIDB4MDIxMyA6IFxcXCJZQ2JDclBvc2l0aW9uaW5nXFxcIixcXG4gICAgICAgIDB4MDExQSA6IFxcXCJYUmVzb2x1dGlvblxcXCIsXFxuICAgICAgICAweDAxMUIgOiBcXFwiWVJlc29sdXRpb25cXFwiLFxcbiAgICAgICAgMHgwMTI4IDogXFxcIlJlc29sdXRpb25Vbml0XFxcIixcXG4gICAgICAgIDB4MDExMSA6IFxcXCJTdHJpcE9mZnNldHNcXFwiLFxcbiAgICAgICAgMHgwMTE2IDogXFxcIlJvd3NQZXJTdHJpcFxcXCIsXFxuICAgICAgICAweDAxMTcgOiBcXFwiU3RyaXBCeXRlQ291bnRzXFxcIixcXG4gICAgICAgIDB4MDIwMSA6IFxcXCJKUEVHSW50ZXJjaGFuZ2VGb3JtYXRcXFwiLFxcbiAgICAgICAgMHgwMjAyIDogXFxcIkpQRUdJbnRlcmNoYW5nZUZvcm1hdExlbmd0aFxcXCIsXFxuICAgICAgICAweDAxMkQgOiBcXFwiVHJhbnNmZXJGdW5jdGlvblxcXCIsXFxuICAgICAgICAweDAxM0UgOiBcXFwiV2hpdGVQb2ludFxcXCIsXFxuICAgICAgICAweDAxM0YgOiBcXFwiUHJpbWFyeUNocm9tYXRpY2l0aWVzXFxcIixcXG4gICAgICAgIDB4MDIxMSA6IFxcXCJZQ2JDckNvZWZmaWNpZW50c1xcXCIsXFxuICAgICAgICAweDAyMTQgOiBcXFwiUmVmZXJlbmNlQmxhY2tXaGl0ZVxcXCIsXFxuICAgICAgICAweDAxMzIgOiBcXFwiRGF0ZVRpbWVcXFwiLFxcbiAgICAgICAgMHgwMTBFIDogXFxcIkltYWdlRGVzY3JpcHRpb25cXFwiLFxcbiAgICAgICAgMHgwMTBGIDogXFxcIk1ha2VcXFwiLFxcbiAgICAgICAgMHgwMTEwIDogXFxcIk1vZGVsXFxcIixcXG4gICAgICAgIDB4MDEzMSA6IFxcXCJTb2Z0d2FyZVxcXCIsXFxuICAgICAgICAweDAxM0IgOiBcXFwiQXJ0aXN0XFxcIixcXG4gICAgICAgIDB4ODI5OCA6IFxcXCJDb3B5cmlnaHRcXFwiXFxuICAgIH07XFxuXFxuICAgIHZhciBHUFNUYWdzID0gRVhJRi5HUFNUYWdzID0ge1xcbiAgICAgICAgMHgwMDAwIDogXFxcIkdQU1ZlcnNpb25JRFxcXCIsXFxuICAgICAgICAweDAwMDEgOiBcXFwiR1BTTGF0aXR1ZGVSZWZcXFwiLFxcbiAgICAgICAgMHgwMDAyIDogXFxcIkdQU0xhdGl0dWRlXFxcIixcXG4gICAgICAgIDB4MDAwMyA6IFxcXCJHUFNMb25naXR1ZGVSZWZcXFwiLFxcbiAgICAgICAgMHgwMDA0IDogXFxcIkdQU0xvbmdpdHVkZVxcXCIsXFxuICAgICAgICAweDAwMDUgOiBcXFwiR1BTQWx0aXR1ZGVSZWZcXFwiLFxcbiAgICAgICAgMHgwMDA2IDogXFxcIkdQU0FsdGl0dWRlXFxcIixcXG4gICAgICAgIDB4MDAwNyA6IFxcXCJHUFNUaW1lU3RhbXBcXFwiLFxcbiAgICAgICAgMHgwMDA4IDogXFxcIkdQU1NhdGVsbGl0ZXNcXFwiLFxcbiAgICAgICAgMHgwMDA5IDogXFxcIkdQU1N0YXR1c1xcXCIsXFxuICAgICAgICAweDAwMEEgOiBcXFwiR1BTTWVhc3VyZU1vZGVcXFwiLFxcbiAgICAgICAgMHgwMDBCIDogXFxcIkdQU0RPUFxcXCIsXFxuICAgICAgICAweDAwMEMgOiBcXFwiR1BTU3BlZWRSZWZcXFwiLFxcbiAgICAgICAgMHgwMDBEIDogXFxcIkdQU1NwZWVkXFxcIixcXG4gICAgICAgIDB4MDAwRSA6IFxcXCJHUFNUcmFja1JlZlxcXCIsXFxuICAgICAgICAweDAwMEYgOiBcXFwiR1BTVHJhY2tcXFwiLFxcbiAgICAgICAgMHgwMDEwIDogXFxcIkdQU0ltZ0RpcmVjdGlvblJlZlxcXCIsXFxuICAgICAgICAweDAwMTEgOiBcXFwiR1BTSW1nRGlyZWN0aW9uXFxcIixcXG4gICAgICAgIDB4MDAxMiA6IFxcXCJHUFNNYXBEYXR1bVxcXCIsXFxuICAgICAgICAweDAwMTMgOiBcXFwiR1BTRGVzdExhdGl0dWRlUmVmXFxcIixcXG4gICAgICAgIDB4MDAxNCA6IFxcXCJHUFNEZXN0TGF0aXR1ZGVcXFwiLFxcbiAgICAgICAgMHgwMDE1IDogXFxcIkdQU0Rlc3RMb25naXR1ZGVSZWZcXFwiLFxcbiAgICAgICAgMHgwMDE2IDogXFxcIkdQU0Rlc3RMb25naXR1ZGVcXFwiLFxcbiAgICAgICAgMHgwMDE3IDogXFxcIkdQU0Rlc3RCZWFyaW5nUmVmXFxcIixcXG4gICAgICAgIDB4MDAxOCA6IFxcXCJHUFNEZXN0QmVhcmluZ1xcXCIsXFxuICAgICAgICAweDAwMTkgOiBcXFwiR1BTRGVzdERpc3RhbmNlUmVmXFxcIixcXG4gICAgICAgIDB4MDAxQSA6IFxcXCJHUFNEZXN0RGlzdGFuY2VcXFwiLFxcbiAgICAgICAgMHgwMDFCIDogXFxcIkdQU1Byb2Nlc3NpbmdNZXRob2RcXFwiLFxcbiAgICAgICAgMHgwMDFDIDogXFxcIkdQU0FyZWFJbmZvcm1hdGlvblxcXCIsXFxuICAgICAgICAweDAwMUQgOiBcXFwiR1BTRGF0ZVN0YW1wXFxcIixcXG4gICAgICAgIDB4MDAxRSA6IFxcXCJHUFNEaWZmZXJlbnRpYWxcXFwiXFxuICAgIH07XFxuXFxuICAgICAvLyBFWElGIDIuMyBTcGVjXFxuICAgIHZhciBJRkQxVGFncyA9IEVYSUYuSUZEMVRhZ3MgPSB7XFxuICAgICAgICAweDAxMDA6IFxcXCJJbWFnZVdpZHRoXFxcIixcXG4gICAgICAgIDB4MDEwMTogXFxcIkltYWdlSGVpZ2h0XFxcIixcXG4gICAgICAgIDB4MDEwMjogXFxcIkJpdHNQZXJTYW1wbGVcXFwiLFxcbiAgICAgICAgMHgwMTAzOiBcXFwiQ29tcHJlc3Npb25cXFwiLFxcbiAgICAgICAgMHgwMTA2OiBcXFwiUGhvdG9tZXRyaWNJbnRlcnByZXRhdGlvblxcXCIsXFxuICAgICAgICAweDAxMTE6IFxcXCJTdHJpcE9mZnNldHNcXFwiLFxcbiAgICAgICAgMHgwMTEyOiBcXFwiT3JpZW50YXRpb25cXFwiLFxcbiAgICAgICAgMHgwMTE1OiBcXFwiU2FtcGxlc1BlclBpeGVsXFxcIixcXG4gICAgICAgIDB4MDExNjogXFxcIlJvd3NQZXJTdHJpcFxcXCIsXFxuICAgICAgICAweDAxMTc6IFxcXCJTdHJpcEJ5dGVDb3VudHNcXFwiLFxcbiAgICAgICAgMHgwMTFBOiBcXFwiWFJlc29sdXRpb25cXFwiLFxcbiAgICAgICAgMHgwMTFCOiBcXFwiWVJlc29sdXRpb25cXFwiLFxcbiAgICAgICAgMHgwMTFDOiBcXFwiUGxhbmFyQ29uZmlndXJhdGlvblxcXCIsXFxuICAgICAgICAweDAxMjg6IFxcXCJSZXNvbHV0aW9uVW5pdFxcXCIsXFxuICAgICAgICAweDAyMDE6IFxcXCJKcGVnSUZPZmZzZXRcXFwiLCAgICAvLyBXaGVuIGltYWdlIGZvcm1hdCBpcyBKUEVHLCB0aGlzIHZhbHVlIHNob3cgb2Zmc2V0IHRvIEpQRUcgZGF0YSBzdG9yZWQuKGFrYSBcXFwiVGh1bWJuYWlsT2Zmc2V0XFxcIiBvciBcXFwiSlBFR0ludGVyY2hhbmdlRm9ybWF0XFxcIilcXG4gICAgICAgIDB4MDIwMjogXFxcIkpwZWdJRkJ5dGVDb3VudFxcXCIsIC8vIFdoZW4gaW1hZ2UgZm9ybWF0IGlzIEpQRUcsIHRoaXMgdmFsdWUgc2hvd3MgZGF0YSBzaXplIG9mIEpQRUcgaW1hZ2UgKGFrYSBcXFwiVGh1bWJuYWlsTGVuZ3RoXFxcIiBvciBcXFwiSlBFR0ludGVyY2hhbmdlRm9ybWF0TGVuZ3RoXFxcIilcXG4gICAgICAgIDB4MDIxMTogXFxcIllDYkNyQ29lZmZpY2llbnRzXFxcIixcXG4gICAgICAgIDB4MDIxMjogXFxcIllDYkNyU3ViU2FtcGxpbmdcXFwiLFxcbiAgICAgICAgMHgwMjEzOiBcXFwiWUNiQ3JQb3NpdGlvbmluZ1xcXCIsXFxuICAgICAgICAweDAyMTQ6IFxcXCJSZWZlcmVuY2VCbGFja1doaXRlXFxcIlxcbiAgICB9O1xcblxcbiAgICB2YXIgU3RyaW5nVmFsdWVzID0gRVhJRi5TdHJpbmdWYWx1ZXMgPSB7XFxuICAgICAgICBFeHBvc3VyZVByb2dyYW0gOiB7XFxuICAgICAgICAgICAgMCA6IFxcXCJOb3QgZGVmaW5lZFxcXCIsXFxuICAgICAgICAgICAgMSA6IFxcXCJNYW51YWxcXFwiLFxcbiAgICAgICAgICAgIDIgOiBcXFwiTm9ybWFsIHByb2dyYW1cXFwiLFxcbiAgICAgICAgICAgIDMgOiBcXFwiQXBlcnR1cmUgcHJpb3JpdHlcXFwiLFxcbiAgICAgICAgICAgIDQgOiBcXFwiU2h1dHRlciBwcmlvcml0eVxcXCIsXFxuICAgICAgICAgICAgNSA6IFxcXCJDcmVhdGl2ZSBwcm9ncmFtXFxcIixcXG4gICAgICAgICAgICA2IDogXFxcIkFjdGlvbiBwcm9ncmFtXFxcIixcXG4gICAgICAgICAgICA3IDogXFxcIlBvcnRyYWl0IG1vZGVcXFwiLFxcbiAgICAgICAgICAgIDggOiBcXFwiTGFuZHNjYXBlIG1vZGVcXFwiXFxuICAgICAgICB9LFxcbiAgICAgICAgTWV0ZXJpbmdNb2RlIDoge1xcbiAgICAgICAgICAgIDAgOiBcXFwiVW5rbm93blxcXCIsXFxuICAgICAgICAgICAgMSA6IFxcXCJBdmVyYWdlXFxcIixcXG4gICAgICAgICAgICAyIDogXFxcIkNlbnRlcldlaWdodGVkQXZlcmFnZVxcXCIsXFxuICAgICAgICAgICAgMyA6IFxcXCJTcG90XFxcIixcXG4gICAgICAgICAgICA0IDogXFxcIk11bHRpU3BvdFxcXCIsXFxuICAgICAgICAgICAgNSA6IFxcXCJQYXR0ZXJuXFxcIixcXG4gICAgICAgICAgICA2IDogXFxcIlBhcnRpYWxcXFwiLFxcbiAgICAgICAgICAgIDI1NSA6IFxcXCJPdGhlclxcXCJcXG4gICAgICAgIH0sXFxuICAgICAgICBMaWdodFNvdXJjZSA6IHtcXG4gICAgICAgICAgICAwIDogXFxcIlVua25vd25cXFwiLFxcbiAgICAgICAgICAgIDEgOiBcXFwiRGF5bGlnaHRcXFwiLFxcbiAgICAgICAgICAgIDIgOiBcXFwiRmx1b3Jlc2NlbnRcXFwiLFxcbiAgICAgICAgICAgIDMgOiBcXFwiVHVuZ3N0ZW4gKGluY2FuZGVzY2VudCBsaWdodClcXFwiLFxcbiAgICAgICAgICAgIDQgOiBcXFwiRmxhc2hcXFwiLFxcbiAgICAgICAgICAgIDkgOiBcXFwiRmluZSB3ZWF0aGVyXFxcIixcXG4gICAgICAgICAgICAxMCA6IFxcXCJDbG91ZHkgd2VhdGhlclxcXCIsXFxuICAgICAgICAgICAgMTEgOiBcXFwiU2hhZGVcXFwiLFxcbiAgICAgICAgICAgIDEyIDogXFxcIkRheWxpZ2h0IGZsdW9yZXNjZW50IChEIDU3MDAgLSA3MTAwSylcXFwiLFxcbiAgICAgICAgICAgIDEzIDogXFxcIkRheSB3aGl0ZSBmbHVvcmVzY2VudCAoTiA0NjAwIC0gNTQwMEspXFxcIixcXG4gICAgICAgICAgICAxNCA6IFxcXCJDb29sIHdoaXRlIGZsdW9yZXNjZW50IChXIDM5MDAgLSA0NTAwSylcXFwiLFxcbiAgICAgICAgICAgIDE1IDogXFxcIldoaXRlIGZsdW9yZXNjZW50IChXVyAzMjAwIC0gMzcwMEspXFxcIixcXG4gICAgICAgICAgICAxNyA6IFxcXCJTdGFuZGFyZCBsaWdodCBBXFxcIixcXG4gICAgICAgICAgICAxOCA6IFxcXCJTdGFuZGFyZCBsaWdodCBCXFxcIixcXG4gICAgICAgICAgICAxOSA6IFxcXCJTdGFuZGFyZCBsaWdodCBDXFxcIixcXG4gICAgICAgICAgICAyMCA6IFxcXCJENTVcXFwiLFxcbiAgICAgICAgICAgIDIxIDogXFxcIkQ2NVxcXCIsXFxuICAgICAgICAgICAgMjIgOiBcXFwiRDc1XFxcIixcXG4gICAgICAgICAgICAyMyA6IFxcXCJENTBcXFwiLFxcbiAgICAgICAgICAgIDI0IDogXFxcIklTTyBzdHVkaW8gdHVuZ3N0ZW5cXFwiLFxcbiAgICAgICAgICAgIDI1NSA6IFxcXCJPdGhlclxcXCJcXG4gICAgICAgIH0sXFxuICAgICAgICBGbGFzaCA6IHtcXG4gICAgICAgICAgICAweDAwMDAgOiBcXFwiRmxhc2ggZGlkIG5vdCBmaXJlXFxcIixcXG4gICAgICAgICAgICAweDAwMDEgOiBcXFwiRmxhc2ggZmlyZWRcXFwiLFxcbiAgICAgICAgICAgIDB4MDAwNSA6IFxcXCJTdHJvYmUgcmV0dXJuIGxpZ2h0IG5vdCBkZXRlY3RlZFxcXCIsXFxuICAgICAgICAgICAgMHgwMDA3IDogXFxcIlN0cm9iZSByZXR1cm4gbGlnaHQgZGV0ZWN0ZWRcXFwiLFxcbiAgICAgICAgICAgIDB4MDAwOSA6IFxcXCJGbGFzaCBmaXJlZCwgY29tcHVsc29yeSBmbGFzaCBtb2RlXFxcIixcXG4gICAgICAgICAgICAweDAwMEQgOiBcXFwiRmxhc2ggZmlyZWQsIGNvbXB1bHNvcnkgZmxhc2ggbW9kZSwgcmV0dXJuIGxpZ2h0IG5vdCBkZXRlY3RlZFxcXCIsXFxuICAgICAgICAgICAgMHgwMDBGIDogXFxcIkZsYXNoIGZpcmVkLCBjb21wdWxzb3J5IGZsYXNoIG1vZGUsIHJldHVybiBsaWdodCBkZXRlY3RlZFxcXCIsXFxuICAgICAgICAgICAgMHgwMDEwIDogXFxcIkZsYXNoIGRpZCBub3QgZmlyZSwgY29tcHVsc29yeSBmbGFzaCBtb2RlXFxcIixcXG4gICAgICAgICAgICAweDAwMTggOiBcXFwiRmxhc2ggZGlkIG5vdCBmaXJlLCBhdXRvIG1vZGVcXFwiLFxcbiAgICAgICAgICAgIDB4MDAxOSA6IFxcXCJGbGFzaCBmaXJlZCwgYXV0byBtb2RlXFxcIixcXG4gICAgICAgICAgICAweDAwMUQgOiBcXFwiRmxhc2ggZmlyZWQsIGF1dG8gbW9kZSwgcmV0dXJuIGxpZ2h0IG5vdCBkZXRlY3RlZFxcXCIsXFxuICAgICAgICAgICAgMHgwMDFGIDogXFxcIkZsYXNoIGZpcmVkLCBhdXRvIG1vZGUsIHJldHVybiBsaWdodCBkZXRlY3RlZFxcXCIsXFxuICAgICAgICAgICAgMHgwMDIwIDogXFxcIk5vIGZsYXNoIGZ1bmN0aW9uXFxcIixcXG4gICAgICAgICAgICAweDAwNDEgOiBcXFwiRmxhc2ggZmlyZWQsIHJlZC1leWUgcmVkdWN0aW9uIG1vZGVcXFwiLFxcbiAgICAgICAgICAgIDB4MDA0NSA6IFxcXCJGbGFzaCBmaXJlZCwgcmVkLWV5ZSByZWR1Y3Rpb24gbW9kZSwgcmV0dXJuIGxpZ2h0IG5vdCBkZXRlY3RlZFxcXCIsXFxuICAgICAgICAgICAgMHgwMDQ3IDogXFxcIkZsYXNoIGZpcmVkLCByZWQtZXllIHJlZHVjdGlvbiBtb2RlLCByZXR1cm4gbGlnaHQgZGV0ZWN0ZWRcXFwiLFxcbiAgICAgICAgICAgIDB4MDA0OSA6IFxcXCJGbGFzaCBmaXJlZCwgY29tcHVsc29yeSBmbGFzaCBtb2RlLCByZWQtZXllIHJlZHVjdGlvbiBtb2RlXFxcIixcXG4gICAgICAgICAgICAweDAwNEQgOiBcXFwiRmxhc2ggZmlyZWQsIGNvbXB1bHNvcnkgZmxhc2ggbW9kZSwgcmVkLWV5ZSByZWR1Y3Rpb24gbW9kZSwgcmV0dXJuIGxpZ2h0IG5vdCBkZXRlY3RlZFxcXCIsXFxuICAgICAgICAgICAgMHgwMDRGIDogXFxcIkZsYXNoIGZpcmVkLCBjb21wdWxzb3J5IGZsYXNoIG1vZGUsIHJlZC1leWUgcmVkdWN0aW9uIG1vZGUsIHJldHVybiBsaWdodCBkZXRlY3RlZFxcXCIsXFxuICAgICAgICAgICAgMHgwMDU5IDogXFxcIkZsYXNoIGZpcmVkLCBhdXRvIG1vZGUsIHJlZC1leWUgcmVkdWN0aW9uIG1vZGVcXFwiLFxcbiAgICAgICAgICAgIDB4MDA1RCA6IFxcXCJGbGFzaCBmaXJlZCwgYXV0byBtb2RlLCByZXR1cm4gbGlnaHQgbm90IGRldGVjdGVkLCByZWQtZXllIHJlZHVjdGlvbiBtb2RlXFxcIixcXG4gICAgICAgICAgICAweDAwNUYgOiBcXFwiRmxhc2ggZmlyZWQsIGF1dG8gbW9kZSwgcmV0dXJuIGxpZ2h0IGRldGVjdGVkLCByZWQtZXllIHJlZHVjdGlvbiBtb2RlXFxcIlxcbiAgICAgICAgfSxcXG4gICAgICAgIFNlbnNpbmdNZXRob2QgOiB7XFxuICAgICAgICAgICAgMSA6IFxcXCJOb3QgZGVmaW5lZFxcXCIsXFxuICAgICAgICAgICAgMiA6IFxcXCJPbmUtY2hpcCBjb2xvciBhcmVhIHNlbnNvclxcXCIsXFxuICAgICAgICAgICAgMyA6IFxcXCJUd28tY2hpcCBjb2xvciBhcmVhIHNlbnNvclxcXCIsXFxuICAgICAgICAgICAgNCA6IFxcXCJUaHJlZS1jaGlwIGNvbG9yIGFyZWEgc2Vuc29yXFxcIixcXG4gICAgICAgICAgICA1IDogXFxcIkNvbG9yIHNlcXVlbnRpYWwgYXJlYSBzZW5zb3JcXFwiLFxcbiAgICAgICAgICAgIDcgOiBcXFwiVHJpbGluZWFyIHNlbnNvclxcXCIsXFxuICAgICAgICAgICAgOCA6IFxcXCJDb2xvciBzZXF1ZW50aWFsIGxpbmVhciBzZW5zb3JcXFwiXFxuICAgICAgICB9LFxcbiAgICAgICAgU2NlbmVDYXB0dXJlVHlwZSA6IHtcXG4gICAgICAgICAgICAwIDogXFxcIlN0YW5kYXJkXFxcIixcXG4gICAgICAgICAgICAxIDogXFxcIkxhbmRzY2FwZVxcXCIsXFxuICAgICAgICAgICAgMiA6IFxcXCJQb3J0cmFpdFxcXCIsXFxuICAgICAgICAgICAgMyA6IFxcXCJOaWdodCBzY2VuZVxcXCJcXG4gICAgICAgIH0sXFxuICAgICAgICBTY2VuZVR5cGUgOiB7XFxuICAgICAgICAgICAgMSA6IFxcXCJEaXJlY3RseSBwaG90b2dyYXBoZWRcXFwiXFxuICAgICAgICB9LFxcbiAgICAgICAgQ3VzdG9tUmVuZGVyZWQgOiB7XFxuICAgICAgICAgICAgMCA6IFxcXCJOb3JtYWwgcHJvY2Vzc1xcXCIsXFxuICAgICAgICAgICAgMSA6IFxcXCJDdXN0b20gcHJvY2Vzc1xcXCJcXG4gICAgICAgIH0sXFxuICAgICAgICBXaGl0ZUJhbGFuY2UgOiB7XFxuICAgICAgICAgICAgMCA6IFxcXCJBdXRvIHdoaXRlIGJhbGFuY2VcXFwiLFxcbiAgICAgICAgICAgIDEgOiBcXFwiTWFudWFsIHdoaXRlIGJhbGFuY2VcXFwiXFxuICAgICAgICB9LFxcbiAgICAgICAgR2FpbkNvbnRyb2wgOiB7XFxuICAgICAgICAgICAgMCA6IFxcXCJOb25lXFxcIixcXG4gICAgICAgICAgICAxIDogXFxcIkxvdyBnYWluIHVwXFxcIixcXG4gICAgICAgICAgICAyIDogXFxcIkhpZ2ggZ2FpbiB1cFxcXCIsXFxuICAgICAgICAgICAgMyA6IFxcXCJMb3cgZ2FpbiBkb3duXFxcIixcXG4gICAgICAgICAgICA0IDogXFxcIkhpZ2ggZ2FpbiBkb3duXFxcIlxcbiAgICAgICAgfSxcXG4gICAgICAgIENvbnRyYXN0IDoge1xcbiAgICAgICAgICAgIDAgOiBcXFwiTm9ybWFsXFxcIixcXG4gICAgICAgICAgICAxIDogXFxcIlNvZnRcXFwiLFxcbiAgICAgICAgICAgIDIgOiBcXFwiSGFyZFxcXCJcXG4gICAgICAgIH0sXFxuICAgICAgICBTYXR1cmF0aW9uIDoge1xcbiAgICAgICAgICAgIDAgOiBcXFwiTm9ybWFsXFxcIixcXG4gICAgICAgICAgICAxIDogXFxcIkxvdyBzYXR1cmF0aW9uXFxcIixcXG4gICAgICAgICAgICAyIDogXFxcIkhpZ2ggc2F0dXJhdGlvblxcXCJcXG4gICAgICAgIH0sXFxuICAgICAgICBTaGFycG5lc3MgOiB7XFxuICAgICAgICAgICAgMCA6IFxcXCJOb3JtYWxcXFwiLFxcbiAgICAgICAgICAgIDEgOiBcXFwiU29mdFxcXCIsXFxuICAgICAgICAgICAgMiA6IFxcXCJIYXJkXFxcIlxcbiAgICAgICAgfSxcXG4gICAgICAgIFN1YmplY3REaXN0YW5jZVJhbmdlIDoge1xcbiAgICAgICAgICAgIDAgOiBcXFwiVW5rbm93blxcXCIsXFxuICAgICAgICAgICAgMSA6IFxcXCJNYWNyb1xcXCIsXFxuICAgICAgICAgICAgMiA6IFxcXCJDbG9zZSB2aWV3XFxcIixcXG4gICAgICAgICAgICAzIDogXFxcIkRpc3RhbnQgdmlld1xcXCJcXG4gICAgICAgIH0sXFxuICAgICAgICBGaWxlU291cmNlIDoge1xcbiAgICAgICAgICAgIDMgOiBcXFwiRFNDXFxcIlxcbiAgICAgICAgfSxcXG5cXG4gICAgICAgIENvbXBvbmVudHMgOiB7XFxuICAgICAgICAgICAgMCA6IFxcXCJcXFwiLFxcbiAgICAgICAgICAgIDEgOiBcXFwiWVxcXCIsXFxuICAgICAgICAgICAgMiA6IFxcXCJDYlxcXCIsXFxuICAgICAgICAgICAgMyA6IFxcXCJDclxcXCIsXFxuICAgICAgICAgICAgNCA6IFxcXCJSXFxcIixcXG4gICAgICAgICAgICA1IDogXFxcIkdcXFwiLFxcbiAgICAgICAgICAgIDYgOiBcXFwiQlxcXCJcXG4gICAgICAgIH1cXG4gICAgfTtcXG5cXG4gICAgZnVuY3Rpb24gYWRkRXZlbnQoZWxlbWVudCwgZXZlbnQsIGhhbmRsZXIpIHtcXG4gICAgICAgIGlmIChlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIpIHtcXG4gICAgICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXIsIGZhbHNlKTtcXG4gICAgICAgIH0gZWxzZSBpZiAoZWxlbWVudC5hdHRhY2hFdmVudCkge1xcbiAgICAgICAgICAgIGVsZW1lbnQuYXR0YWNoRXZlbnQoXFxcIm9uXFxcIiArIGV2ZW50LCBoYW5kbGVyKTtcXG4gICAgICAgIH1cXG4gICAgfVxcblxcbiAgICBmdW5jdGlvbiBpbWFnZUhhc0RhdGEoaW1nKSB7XFxuICAgICAgICByZXR1cm4gISEoaW1nLmV4aWZkYXRhKTtcXG4gICAgfVxcblxcblxcbiAgICBmdW5jdGlvbiBiYXNlNjRUb0FycmF5QnVmZmVyKGJhc2U2NCwgY29udGVudFR5cGUpIHtcXG4gICAgICAgIGNvbnRlbnRUeXBlID0gY29udGVudFR5cGUgfHwgYmFzZTY0Lm1hdGNoKC9eZGF0YVxcXFw6KFteXFxcXDtdKylcXFxcO2Jhc2U2NCwvbWkpWzFdIHx8ICcnOyAvLyBlLmcuICdkYXRhOmltYWdlL2pwZWc7YmFzZTY0LC4uLicgPT4gJ2ltYWdlL2pwZWcnXFxuICAgICAgICBiYXNlNjQgPSBiYXNlNjQucmVwbGFjZSgvXmRhdGFcXFxcOihbXlxcXFw7XSspXFxcXDtiYXNlNjQsL2dtaSwgJycpO1xcbiAgICAgICAgdmFyIGJpbmFyeSA9IGF0b2IoYmFzZTY0KTtcXG4gICAgICAgIHZhciBsZW4gPSBiaW5hcnkubGVuZ3RoO1xcbiAgICAgICAgdmFyIGJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcihsZW4pO1xcbiAgICAgICAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShidWZmZXIpO1xcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xcbiAgICAgICAgICAgIHZpZXdbaV0gPSBiaW5hcnkuY2hhckNvZGVBdChpKTtcXG4gICAgICAgIH1cXG4gICAgICAgIHJldHVybiBidWZmZXI7XFxuICAgIH1cXG5cXG4gICAgZnVuY3Rpb24gb2JqZWN0VVJMVG9CbG9iKHVybCwgY2FsbGJhY2spIHtcXG4gICAgICAgIHZhciBodHRwID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XFxuICAgICAgICBodHRwLm9wZW4oXFxcIkdFVFxcXCIsIHVybCwgdHJ1ZSk7XFxuICAgICAgICBodHRwLnJlc3BvbnNlVHlwZSA9IFxcXCJibG9iXFxcIjtcXG4gICAgICAgIGh0dHAub25sb2FkID0gZnVuY3Rpb24oZSkge1xcbiAgICAgICAgICAgIGlmICh0aGlzLnN0YXR1cyA9PSAyMDAgfHwgdGhpcy5zdGF0dXMgPT09IDApIHtcXG4gICAgICAgICAgICAgICAgY2FsbGJhY2sodGhpcy5yZXNwb25zZSk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfTtcXG4gICAgICAgIGh0dHAuc2VuZCgpO1xcbiAgICB9XFxuXFxuICAgIGZ1bmN0aW9uIGdldEltYWdlRGF0YShpbWcsIGNhbGxiYWNrKSB7XFxuICAgICAgICBmdW5jdGlvbiBoYW5kbGVCaW5hcnlGaWxlKGJpbkZpbGUpIHtcXG4gICAgICAgICAgICB2YXIgZGF0YSA9IGZpbmRFWElGaW5KUEVHKGJpbkZpbGUpO1xcbiAgICAgICAgICAgIGltZy5leGlmZGF0YSA9IGRhdGEgfHwge307XFxuICAgICAgICAgICAgdmFyIGlwdGNkYXRhID0gZmluZElQVENpbkpQRUcoYmluRmlsZSk7XFxuICAgICAgICAgICAgaW1nLmlwdGNkYXRhID0gaXB0Y2RhdGEgfHwge307XFxuICAgICAgICAgICAgaWYgKEVYSUYuaXNYbXBFbmFibGVkKSB7XFxuICAgICAgICAgICAgICAgdmFyIHhtcGRhdGE9IGZpbmRYTVBpbkpQRUcoYmluRmlsZSk7XFxuICAgICAgICAgICAgICAgaW1nLnhtcGRhdGEgPSB4bXBkYXRhIHx8IHt9OyAgICAgICAgICAgICAgIFxcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcXG4gICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbChpbWcpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG5cXG4gICAgICAgIGlmIChpbWcuc3JjKSB7XFxuICAgICAgICAgICAgaWYgKC9eZGF0YVxcXFw6L2kudGVzdChpbWcuc3JjKSkgeyAvLyBEYXRhIFVSSVxcbiAgICAgICAgICAgICAgICB2YXIgYXJyYXlCdWZmZXIgPSBiYXNlNjRUb0FycmF5QnVmZmVyKGltZy5zcmMpO1xcbiAgICAgICAgICAgICAgICBoYW5kbGVCaW5hcnlGaWxlKGFycmF5QnVmZmVyKTtcXG5cXG4gICAgICAgICAgICB9IGVsc2UgaWYgKC9eYmxvYlxcXFw6L2kudGVzdChpbWcuc3JjKSkgeyAvLyBPYmplY3QgVVJMXFxuICAgICAgICAgICAgICAgIHZhciBmaWxlUmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcXG4gICAgICAgICAgICAgICAgZmlsZVJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbihlKSB7XFxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVCaW5hcnlGaWxlKGUudGFyZ2V0LnJlc3VsdCk7XFxuICAgICAgICAgICAgICAgIH07XFxuICAgICAgICAgICAgICAgIG9iamVjdFVSTFRvQmxvYihpbWcuc3JjLCBmdW5jdGlvbiAoYmxvYikge1xcbiAgICAgICAgICAgICAgICAgICAgZmlsZVJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihibG9iKTtcXG4gICAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgdmFyIGh0dHAgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcXG4gICAgICAgICAgICAgICAgaHR0cC5vbmxvYWQgPSBmdW5jdGlvbigpIHtcXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnN0YXR1cyA9PSAyMDAgfHwgdGhpcy5zdGF0dXMgPT09IDApIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVCaW5hcnlGaWxlKGh0dHAucmVzcG9uc2UpO1xcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBcXFwiQ291bGQgbm90IGxvYWQgaW1hZ2VcXFwiO1xcbiAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgaHR0cCA9IG51bGw7XFxuICAgICAgICAgICAgICAgIH07XFxuICAgICAgICAgICAgICAgIGh0dHAub3BlbihcXFwiR0VUXFxcIiwgaW1nLnNyYywgdHJ1ZSk7XFxuICAgICAgICAgICAgICAgIGh0dHAucmVzcG9uc2VUeXBlID0gXFxcImFycmF5YnVmZmVyXFxcIjtcXG4gICAgICAgICAgICAgICAgaHR0cC5zZW5kKG51bGwpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH0gZWxzZSBpZiAoc2VsZi5GaWxlUmVhZGVyICYmIChpbWcgaW5zdGFuY2VvZiBzZWxmLkJsb2IgfHwgaW1nIGluc3RhbmNlb2Ygc2VsZi5GaWxlKSkge1xcbiAgICAgICAgICAgIHZhciBmaWxlUmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcXG4gICAgICAgICAgICBmaWxlUmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uKGUpIHtcXG4gICAgICAgICAgICAgICAgaWYgKGRlYnVnKSBjb25zb2xlLmxvZyhcXFwiR290IGZpbGUgb2YgbGVuZ3RoIFxcXCIgKyBlLnRhcmdldC5yZXN1bHQuYnl0ZUxlbmd0aCk7XFxuICAgICAgICAgICAgICAgIGhhbmRsZUJpbmFyeUZpbGUoZS50YXJnZXQucmVzdWx0KTtcXG4gICAgICAgICAgICB9O1xcblxcbiAgICAgICAgICAgIGZpbGVSZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoaW1nKTtcXG4gICAgICAgIH1cXG4gICAgfVxcblxcbiAgICBmdW5jdGlvbiBmaW5kRVhJRmluSlBFRyhmaWxlKSB7XFxuICAgICAgICB2YXIgZGF0YVZpZXcgPSBuZXcgRGF0YVZpZXcoZmlsZSk7XFxuXFxuICAgICAgICBpZiAoZGVidWcpIGNvbnNvbGUubG9nKFxcXCJHb3QgZmlsZSBvZiBsZW5ndGggXFxcIiArIGZpbGUuYnl0ZUxlbmd0aCk7XFxuICAgICAgICBpZiAoKGRhdGFWaWV3LmdldFVpbnQ4KDApICE9IDB4RkYpIHx8IChkYXRhVmlldy5nZXRVaW50OCgxKSAhPSAweEQ4KSkge1xcbiAgICAgICAgICAgIGlmIChkZWJ1ZykgY29uc29sZS5sb2coXFxcIk5vdCBhIHZhbGlkIEpQRUdcXFwiKTtcXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7IC8vIG5vdCBhIHZhbGlkIGpwZWdcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIHZhciBvZmZzZXQgPSAyLFxcbiAgICAgICAgICAgIGxlbmd0aCA9IGZpbGUuYnl0ZUxlbmd0aCxcXG4gICAgICAgICAgICBtYXJrZXI7XFxuXFxuICAgICAgICB3aGlsZSAob2Zmc2V0IDwgbGVuZ3RoKSB7XFxuICAgICAgICAgICAgaWYgKGRhdGFWaWV3LmdldFVpbnQ4KG9mZnNldCkgIT0gMHhGRikge1xcbiAgICAgICAgICAgICAgICBpZiAoZGVidWcpIGNvbnNvbGUubG9nKFxcXCJOb3QgYSB2YWxpZCBtYXJrZXIgYXQgb2Zmc2V0IFxcXCIgKyBvZmZzZXQgKyBcXFwiLCBmb3VuZDogXFxcIiArIGRhdGFWaWV3LmdldFVpbnQ4KG9mZnNldCkpO1xcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7IC8vIG5vdCBhIHZhbGlkIG1hcmtlciwgc29tZXRoaW5nIGlzIHdyb25nXFxuICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgIG1hcmtlciA9IGRhdGFWaWV3LmdldFVpbnQ4KG9mZnNldCArIDEpO1xcbiAgICAgICAgICAgIGlmIChkZWJ1ZykgY29uc29sZS5sb2cobWFya2VyKTtcXG5cXG4gICAgICAgICAgICAvLyB3ZSBjb3VsZCBpbXBsZW1lbnQgaGFuZGxpbmcgZm9yIG90aGVyIG1hcmtlcnMgaGVyZSxcXG4gICAgICAgICAgICAvLyBidXQgd2UncmUgb25seSBsb29raW5nIGZvciAweEZGRTEgZm9yIEVYSUYgZGF0YVxcblxcbiAgICAgICAgICAgIGlmIChtYXJrZXIgPT0gMjI1KSB7XFxuICAgICAgICAgICAgICAgIGlmIChkZWJ1ZykgY29uc29sZS5sb2coXFxcIkZvdW5kIDB4RkZFMSBtYXJrZXJcXFwiKTtcXG5cXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlYWRFWElGRGF0YShkYXRhVmlldywgb2Zmc2V0ICsgNCwgZGF0YVZpZXcuZ2V0VWludDE2KG9mZnNldCArIDIpIC0gMik7XFxuXFxuICAgICAgICAgICAgICAgIC8vIG9mZnNldCArPSAyICsgZmlsZS5nZXRTaG9ydEF0KG9mZnNldCsyLCB0cnVlKTtcXG5cXG4gICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICBvZmZzZXQgKz0gMiArIGRhdGFWaWV3LmdldFVpbnQxNihvZmZzZXQrMik7XFxuICAgICAgICAgICAgfVxcblxcbiAgICAgICAgfVxcblxcbiAgICB9XFxuXFxuICAgIGZ1bmN0aW9uIGZpbmRJUFRDaW5KUEVHKGZpbGUpIHtcXG4gICAgICAgIHZhciBkYXRhVmlldyA9IG5ldyBEYXRhVmlldyhmaWxlKTtcXG5cXG4gICAgICAgIGlmIChkZWJ1ZykgY29uc29sZS5sb2coXFxcIkdvdCBmaWxlIG9mIGxlbmd0aCBcXFwiICsgZmlsZS5ieXRlTGVuZ3RoKTtcXG4gICAgICAgIGlmICgoZGF0YVZpZXcuZ2V0VWludDgoMCkgIT0gMHhGRikgfHwgKGRhdGFWaWV3LmdldFVpbnQ4KDEpICE9IDB4RDgpKSB7XFxuICAgICAgICAgICAgaWYgKGRlYnVnKSBjb25zb2xlLmxvZyhcXFwiTm90IGEgdmFsaWQgSlBFR1xcXCIpO1xcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTsgLy8gbm90IGEgdmFsaWQganBlZ1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgdmFyIG9mZnNldCA9IDIsXFxuICAgICAgICAgICAgbGVuZ3RoID0gZmlsZS5ieXRlTGVuZ3RoO1xcblxcblxcbiAgICAgICAgdmFyIGlzRmllbGRTZWdtZW50U3RhcnQgPSBmdW5jdGlvbihkYXRhVmlldywgb2Zmc2V0KXtcXG4gICAgICAgICAgICByZXR1cm4gKFxcbiAgICAgICAgICAgICAgICBkYXRhVmlldy5nZXRVaW50OChvZmZzZXQpID09PSAweDM4ICYmXFxuICAgICAgICAgICAgICAgIGRhdGFWaWV3LmdldFVpbnQ4KG9mZnNldCsxKSA9PT0gMHg0MiAmJlxcbiAgICAgICAgICAgICAgICBkYXRhVmlldy5nZXRVaW50OChvZmZzZXQrMikgPT09IDB4NDkgJiZcXG4gICAgICAgICAgICAgICAgZGF0YVZpZXcuZ2V0VWludDgob2Zmc2V0KzMpID09PSAweDREICYmXFxuICAgICAgICAgICAgICAgIGRhdGFWaWV3LmdldFVpbnQ4KG9mZnNldCs0KSA9PT0gMHgwNCAmJlxcbiAgICAgICAgICAgICAgICBkYXRhVmlldy5nZXRVaW50OChvZmZzZXQrNSkgPT09IDB4MDRcXG4gICAgICAgICAgICApO1xcbiAgICAgICAgfTtcXG5cXG4gICAgICAgIHdoaWxlIChvZmZzZXQgPCBsZW5ndGgpIHtcXG5cXG4gICAgICAgICAgICBpZiAoIGlzRmllbGRTZWdtZW50U3RhcnQoZGF0YVZpZXcsIG9mZnNldCApKXtcXG5cXG4gICAgICAgICAgICAgICAgLy8gR2V0IHRoZSBsZW5ndGggb2YgdGhlIG5hbWUgaGVhZGVyICh3aGljaCBpcyBwYWRkZWQgdG8gYW4gZXZlbiBudW1iZXIgb2YgYnl0ZXMpXFxuICAgICAgICAgICAgICAgIHZhciBuYW1lSGVhZGVyTGVuZ3RoID0gZGF0YVZpZXcuZ2V0VWludDgob2Zmc2V0KzcpO1xcbiAgICAgICAgICAgICAgICBpZihuYW1lSGVhZGVyTGVuZ3RoICUgMiAhPT0gMCkgbmFtZUhlYWRlckxlbmd0aCArPSAxO1xcbiAgICAgICAgICAgICAgICAvLyBDaGVjayBmb3IgcHJlIHBob3Rvc2hvcCA2IGZvcm1hdFxcbiAgICAgICAgICAgICAgICBpZihuYW1lSGVhZGVyTGVuZ3RoID09PSAwKSB7XFxuICAgICAgICAgICAgICAgICAgICAvLyBBbHdheXMgNFxcbiAgICAgICAgICAgICAgICAgICAgbmFtZUhlYWRlckxlbmd0aCA9IDQ7XFxuICAgICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICAgICAgdmFyIHN0YXJ0T2Zmc2V0ID0gb2Zmc2V0ICsgOCArIG5hbWVIZWFkZXJMZW5ndGg7XFxuICAgICAgICAgICAgICAgIHZhciBzZWN0aW9uTGVuZ3RoID0gZGF0YVZpZXcuZ2V0VWludDE2KG9mZnNldCArIDYgKyBuYW1lSGVhZGVyTGVuZ3RoKTtcXG5cXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlYWRJUFRDRGF0YShmaWxlLCBzdGFydE9mZnNldCwgc2VjdGlvbkxlbmd0aCk7XFxuXFxuICAgICAgICAgICAgICAgIGJyZWFrO1xcblxcbiAgICAgICAgICAgIH1cXG5cXG5cXG4gICAgICAgICAgICAvLyBOb3QgdGhlIG1hcmtlciwgY29udGludWUgc2VhcmNoaW5nXFxuICAgICAgICAgICAgb2Zmc2V0Kys7XFxuXFxuICAgICAgICB9XFxuXFxuICAgIH1cXG4gICAgdmFyIElwdGNGaWVsZE1hcCA9IHtcXG4gICAgICAgIDB4NzggOiAnY2FwdGlvbicsXFxuICAgICAgICAweDZFIDogJ2NyZWRpdCcsXFxuICAgICAgICAweDE5IDogJ2tleXdvcmRzJyxcXG4gICAgICAgIDB4MzcgOiAnZGF0ZUNyZWF0ZWQnLFxcbiAgICAgICAgMHg1MCA6ICdieWxpbmUnLFxcbiAgICAgICAgMHg1NSA6ICdieWxpbmVUaXRsZScsXFxuICAgICAgICAweDdBIDogJ2NhcHRpb25Xcml0ZXInLFxcbiAgICAgICAgMHg2OSA6ICdoZWFkbGluZScsXFxuICAgICAgICAweDc0IDogJ2NvcHlyaWdodCcsXFxuICAgICAgICAweDBGIDogJ2NhdGVnb3J5J1xcbiAgICB9O1xcbiAgICBmdW5jdGlvbiByZWFkSVBUQ0RhdGEoZmlsZSwgc3RhcnRPZmZzZXQsIHNlY3Rpb25MZW5ndGgpe1xcbiAgICAgICAgdmFyIGRhdGFWaWV3ID0gbmV3IERhdGFWaWV3KGZpbGUpO1xcbiAgICAgICAgdmFyIGRhdGEgPSB7fTtcXG4gICAgICAgIHZhciBmaWVsZFZhbHVlLCBmaWVsZE5hbWUsIGRhdGFTaXplLCBzZWdtZW50VHlwZSwgc2VnbWVudFNpemU7XFxuICAgICAgICB2YXIgc2VnbWVudFN0YXJ0UG9zID0gc3RhcnRPZmZzZXQ7XFxuICAgICAgICB3aGlsZShzZWdtZW50U3RhcnRQb3MgPCBzdGFydE9mZnNldCtzZWN0aW9uTGVuZ3RoKSB7XFxuICAgICAgICAgICAgaWYoZGF0YVZpZXcuZ2V0VWludDgoc2VnbWVudFN0YXJ0UG9zKSA9PT0gMHgxQyAmJiBkYXRhVmlldy5nZXRVaW50OChzZWdtZW50U3RhcnRQb3MrMSkgPT09IDB4MDIpe1xcbiAgICAgICAgICAgICAgICBzZWdtZW50VHlwZSA9IGRhdGFWaWV3LmdldFVpbnQ4KHNlZ21lbnRTdGFydFBvcysyKTtcXG4gICAgICAgICAgICAgICAgaWYoc2VnbWVudFR5cGUgaW4gSXB0Y0ZpZWxkTWFwKSB7XFxuICAgICAgICAgICAgICAgICAgICBkYXRhU2l6ZSA9IGRhdGFWaWV3LmdldEludDE2KHNlZ21lbnRTdGFydFBvcyszKTtcXG4gICAgICAgICAgICAgICAgICAgIHNlZ21lbnRTaXplID0gZGF0YVNpemUgKyA1O1xcbiAgICAgICAgICAgICAgICAgICAgZmllbGROYW1lID0gSXB0Y0ZpZWxkTWFwW3NlZ21lbnRUeXBlXTtcXG4gICAgICAgICAgICAgICAgICAgIGZpZWxkVmFsdWUgPSBnZXRTdHJpbmdGcm9tREIoZGF0YVZpZXcsIHNlZ21lbnRTdGFydFBvcys1LCBkYXRhU2l6ZSk7XFxuICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiB3ZSBhbHJlYWR5IHN0b3JlZCBhIHZhbHVlIHdpdGggdGhpcyBuYW1lXFxuICAgICAgICAgICAgICAgICAgICBpZihkYXRhLmhhc093blByb3BlcnR5KGZpZWxkTmFtZSkpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBWYWx1ZSBhbHJlYWR5IHN0b3JlZCB3aXRoIHRoaXMgbmFtZSwgY3JlYXRlIG11bHRpdmFsdWUgZmllbGRcXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihkYXRhW2ZpZWxkTmFtZV0gaW5zdGFuY2VvZiBBcnJheSkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhW2ZpZWxkTmFtZV0ucHVzaChmaWVsZFZhbHVlKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFbZmllbGROYW1lXSA9IFtkYXRhW2ZpZWxkTmFtZV0sIGZpZWxkVmFsdWVdO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFbZmllbGROYW1lXSA9IGZpZWxkVmFsdWU7XFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgc2VnbWVudFN0YXJ0UG9zKys7XFxuICAgICAgICB9XFxuICAgICAgICByZXR1cm4gZGF0YTtcXG4gICAgfVxcblxcblxcblxcbiAgICBmdW5jdGlvbiByZWFkVGFncyhmaWxlLCB0aWZmU3RhcnQsIGRpclN0YXJ0LCBzdHJpbmdzLCBiaWdFbmQpIHtcXG4gICAgICAgIHZhciBlbnRyaWVzID0gZmlsZS5nZXRVaW50MTYoZGlyU3RhcnQsICFiaWdFbmQpLFxcbiAgICAgICAgICAgIHRhZ3MgPSB7fSxcXG4gICAgICAgICAgICBlbnRyeU9mZnNldCwgdGFnLFxcbiAgICAgICAgICAgIGk7XFxuXFxuICAgICAgICBmb3IgKGk9MDtpPGVudHJpZXM7aSsrKSB7XFxuICAgICAgICAgICAgZW50cnlPZmZzZXQgPSBkaXJTdGFydCArIGkqMTIgKyAyO1xcbiAgICAgICAgICAgIHRhZyA9IHN0cmluZ3NbZmlsZS5nZXRVaW50MTYoZW50cnlPZmZzZXQsICFiaWdFbmQpXTtcXG4gICAgICAgICAgICBpZiAoIXRhZyAmJiBkZWJ1ZykgY29uc29sZS5sb2coXFxcIlVua25vd24gdGFnOiBcXFwiICsgZmlsZS5nZXRVaW50MTYoZW50cnlPZmZzZXQsICFiaWdFbmQpKTtcXG4gICAgICAgICAgICB0YWdzW3RhZ10gPSByZWFkVGFnVmFsdWUoZmlsZSwgZW50cnlPZmZzZXQsIHRpZmZTdGFydCwgZGlyU3RhcnQsIGJpZ0VuZCk7XFxuICAgICAgICB9XFxuICAgICAgICByZXR1cm4gdGFncztcXG4gICAgfVxcblxcblxcbiAgICBmdW5jdGlvbiByZWFkVGFnVmFsdWUoZmlsZSwgZW50cnlPZmZzZXQsIHRpZmZTdGFydCwgZGlyU3RhcnQsIGJpZ0VuZCkge1xcbiAgICAgICAgdmFyIHR5cGUgPSBmaWxlLmdldFVpbnQxNihlbnRyeU9mZnNldCsyLCAhYmlnRW5kKSxcXG4gICAgICAgICAgICBudW1WYWx1ZXMgPSBmaWxlLmdldFVpbnQzMihlbnRyeU9mZnNldCs0LCAhYmlnRW5kKSxcXG4gICAgICAgICAgICB2YWx1ZU9mZnNldCA9IGZpbGUuZ2V0VWludDMyKGVudHJ5T2Zmc2V0KzgsICFiaWdFbmQpICsgdGlmZlN0YXJ0LFxcbiAgICAgICAgICAgIG9mZnNldCxcXG4gICAgICAgICAgICB2YWxzLCB2YWwsIG4sXFxuICAgICAgICAgICAgbnVtZXJhdG9yLCBkZW5vbWluYXRvcjtcXG5cXG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xcbiAgICAgICAgICAgIGNhc2UgMTogLy8gYnl0ZSwgOC1iaXQgdW5zaWduZWQgaW50XFxuICAgICAgICAgICAgY2FzZSA3OiAvLyB1bmRlZmluZWQsIDgtYml0IGJ5dGUsIHZhbHVlIGRlcGVuZGluZyBvbiBmaWVsZFxcbiAgICAgICAgICAgICAgICBpZiAobnVtVmFsdWVzID09IDEpIHtcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmaWxlLmdldFVpbnQ4KGVudHJ5T2Zmc2V0ICsgOCwgIWJpZ0VuZCk7XFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSBudW1WYWx1ZXMgPiA0ID8gdmFsdWVPZmZzZXQgOiAoZW50cnlPZmZzZXQgKyA4KTtcXG4gICAgICAgICAgICAgICAgICAgIHZhbHMgPSBbXTtcXG4gICAgICAgICAgICAgICAgICAgIGZvciAobj0wO248bnVtVmFsdWVzO24rKykge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHNbbl0gPSBmaWxlLmdldFVpbnQ4KG9mZnNldCArIG4pO1xcbiAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHM7XFxuICAgICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICBjYXNlIDI6IC8vIGFzY2lpLCA4LWJpdCBieXRlXFxuICAgICAgICAgICAgICAgIG9mZnNldCA9IG51bVZhbHVlcyA+IDQgPyB2YWx1ZU9mZnNldCA6IChlbnRyeU9mZnNldCArIDgpO1xcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0U3RyaW5nRnJvbURCKGZpbGUsIG9mZnNldCwgbnVtVmFsdWVzLTEpO1xcblxcbiAgICAgICAgICAgIGNhc2UgMzogLy8gc2hvcnQsIDE2IGJpdCBpbnRcXG4gICAgICAgICAgICAgICAgaWYgKG51bVZhbHVlcyA9PSAxKSB7XFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmlsZS5nZXRVaW50MTYoZW50cnlPZmZzZXQgKyA4LCAhYmlnRW5kKTtcXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IG51bVZhbHVlcyA+IDIgPyB2YWx1ZU9mZnNldCA6IChlbnRyeU9mZnNldCArIDgpO1xcbiAgICAgICAgICAgICAgICAgICAgdmFscyA9IFtdO1xcbiAgICAgICAgICAgICAgICAgICAgZm9yIChuPTA7bjxudW1WYWx1ZXM7bisrKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsc1tuXSA9IGZpbGUuZ2V0VWludDE2KG9mZnNldCArIDIqbiwgIWJpZ0VuZCk7XFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFscztcXG4gICAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgIGNhc2UgNDogLy8gbG9uZywgMzIgYml0IGludFxcbiAgICAgICAgICAgICAgICBpZiAobnVtVmFsdWVzID09IDEpIHtcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmaWxlLmdldFVpbnQzMihlbnRyeU9mZnNldCArIDgsICFiaWdFbmQpO1xcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICAgICAgdmFscyA9IFtdO1xcbiAgICAgICAgICAgICAgICAgICAgZm9yIChuPTA7bjxudW1WYWx1ZXM7bisrKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsc1tuXSA9IGZpbGUuZ2V0VWludDMyKHZhbHVlT2Zmc2V0ICsgNCpuLCAhYmlnRW5kKTtcXG4gICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWxzO1xcbiAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgY2FzZSA1OiAgICAvLyByYXRpb25hbCA9IHR3byBsb25nIHZhbHVlcywgZmlyc3QgaXMgbnVtZXJhdG9yLCBzZWNvbmQgaXMgZGVub21pbmF0b3JcXG4gICAgICAgICAgICAgICAgaWYgKG51bVZhbHVlcyA9PSAxKSB7XFxuICAgICAgICAgICAgICAgICAgICBudW1lcmF0b3IgPSBmaWxlLmdldFVpbnQzMih2YWx1ZU9mZnNldCwgIWJpZ0VuZCk7XFxuICAgICAgICAgICAgICAgICAgICBkZW5vbWluYXRvciA9IGZpbGUuZ2V0VWludDMyKHZhbHVlT2Zmc2V0KzQsICFiaWdFbmQpO1xcbiAgICAgICAgICAgICAgICAgICAgdmFsID0gbmV3IE51bWJlcihudW1lcmF0b3IgLyBkZW5vbWluYXRvcik7XFxuICAgICAgICAgICAgICAgICAgICB2YWwubnVtZXJhdG9yID0gbnVtZXJhdG9yO1xcbiAgICAgICAgICAgICAgICAgICAgdmFsLmRlbm9taW5hdG9yID0gZGVub21pbmF0b3I7XFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsO1xcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICAgICAgdmFscyA9IFtdO1xcbiAgICAgICAgICAgICAgICAgICAgZm9yIChuPTA7bjxudW1WYWx1ZXM7bisrKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgbnVtZXJhdG9yID0gZmlsZS5nZXRVaW50MzIodmFsdWVPZmZzZXQgKyA4Km4sICFiaWdFbmQpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbm9taW5hdG9yID0gZmlsZS5nZXRVaW50MzIodmFsdWVPZmZzZXQrNCArIDgqbiwgIWJpZ0VuZCk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsc1tuXSA9IG5ldyBOdW1iZXIobnVtZXJhdG9yIC8gZGVub21pbmF0b3IpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHNbbl0ubnVtZXJhdG9yID0gbnVtZXJhdG9yO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHNbbl0uZGVub21pbmF0b3IgPSBkZW5vbWluYXRvcjtcXG4gICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWxzO1xcbiAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgY2FzZSA5OiAvLyBzbG9uZywgMzIgYml0IHNpZ25lZCBpbnRcXG4gICAgICAgICAgICAgICAgaWYgKG51bVZhbHVlcyA9PSAxKSB7XFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmlsZS5nZXRJbnQzMihlbnRyeU9mZnNldCArIDgsICFiaWdFbmQpO1xcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICAgICAgdmFscyA9IFtdO1xcbiAgICAgICAgICAgICAgICAgICAgZm9yIChuPTA7bjxudW1WYWx1ZXM7bisrKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsc1tuXSA9IGZpbGUuZ2V0SW50MzIodmFsdWVPZmZzZXQgKyA0Km4sICFiaWdFbmQpO1xcbiAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHM7XFxuICAgICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICBjYXNlIDEwOiAvLyBzaWduZWQgcmF0aW9uYWwsIHR3byBzbG9uZ3MsIGZpcnN0IGlzIG51bWVyYXRvciwgc2Vjb25kIGlzIGRlbm9taW5hdG9yXFxuICAgICAgICAgICAgICAgIGlmIChudW1WYWx1ZXMgPT0gMSkge1xcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZpbGUuZ2V0SW50MzIodmFsdWVPZmZzZXQsICFiaWdFbmQpIC8gZmlsZS5nZXRJbnQzMih2YWx1ZU9mZnNldCs0LCAhYmlnRW5kKTtcXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgICAgIHZhbHMgPSBbXTtcXG4gICAgICAgICAgICAgICAgICAgIGZvciAobj0wO248bnVtVmFsdWVzO24rKykge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHNbbl0gPSBmaWxlLmdldEludDMyKHZhbHVlT2Zmc2V0ICsgOCpuLCAhYmlnRW5kKSAvIGZpbGUuZ2V0SW50MzIodmFsdWVPZmZzZXQrNCArIDgqbiwgIWJpZ0VuZCk7XFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFscztcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICB9XFxuXFxuICAgIC8qKlxcbiAgICAqIEdpdmVuIGFuIElGRCAoSW1hZ2UgRmlsZSBEaXJlY3RvcnkpIHN0YXJ0IG9mZnNldFxcbiAgICAqIHJldHVybnMgYW4gb2Zmc2V0IHRvIG5leHQgSUZEIG9yIDAgaWYgaXQncyB0aGUgbGFzdCBJRkQuXFxuICAgICovXFxuICAgIGZ1bmN0aW9uIGdldE5leHRJRkRPZmZzZXQoZGF0YVZpZXcsIGRpclN0YXJ0LCBiaWdFbmQpe1xcbiAgICAgICAgLy90aGUgZmlyc3QgMmJ5dGVzIG1lYW5zIHRoZSBudW1iZXIgb2YgZGlyZWN0b3J5IGVudHJpZXMgY29udGFpbnMgaW4gdGhpcyBJRkRcXG4gICAgICAgIHZhciBlbnRyaWVzID0gZGF0YVZpZXcuZ2V0VWludDE2KGRpclN0YXJ0LCAhYmlnRW5kKTtcXG5cXG4gICAgICAgIC8vIEFmdGVyIGxhc3QgZGlyZWN0b3J5IGVudHJ5LCB0aGVyZSBpcyBhIDRieXRlcyBvZiBkYXRhLFxcbiAgICAgICAgLy8gaXQgbWVhbnMgYW4gb2Zmc2V0IHRvIG5leHQgSUZELlxcbiAgICAgICAgLy8gSWYgaXRzIHZhbHVlIGlzICcweDAwMDAwMDAwJywgaXQgbWVhbnMgdGhpcyBpcyB0aGUgbGFzdCBJRkQgYW5kIHRoZXJlIGlzIG5vIGxpbmtlZCBJRkQuXFxuXFxuICAgICAgICByZXR1cm4gZGF0YVZpZXcuZ2V0VWludDMyKGRpclN0YXJ0ICsgMiArIGVudHJpZXMgKiAxMiwgIWJpZ0VuZCk7IC8vIGVhY2ggZW50cnkgaXMgMTIgYnl0ZXMgbG9uZ1xcbiAgICB9XFxuXFxuICAgIGZ1bmN0aW9uIHJlYWRUaHVtYm5haWxJbWFnZShkYXRhVmlldywgdGlmZlN0YXJ0LCBmaXJzdElGRE9mZnNldCwgYmlnRW5kKXtcXG4gICAgICAgIC8vIGdldCB0aGUgSUZEMSBvZmZzZXRcXG4gICAgICAgIHZhciBJRkQxT2Zmc2V0UG9pbnRlciA9IGdldE5leHRJRkRPZmZzZXQoZGF0YVZpZXcsIHRpZmZTdGFydCtmaXJzdElGRE9mZnNldCwgYmlnRW5kKTtcXG5cXG4gICAgICAgIGlmICghSUZEMU9mZnNldFBvaW50ZXIpIHtcXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnKioqKioqKiogSUZEMU9mZnNldCBpcyBlbXB0eSwgaW1hZ2UgdGh1bWIgbm90IGZvdW5kICoqKioqKioqJyk7XFxuICAgICAgICAgICAgcmV0dXJuIHt9O1xcbiAgICAgICAgfVxcbiAgICAgICAgZWxzZSBpZiAoSUZEMU9mZnNldFBvaW50ZXIgPiBkYXRhVmlldy5ieXRlTGVuZ3RoKSB7IC8vIHRoaXMgc2hvdWxkIG5vdCBoYXBwZW5cXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnKioqKioqKiogSUZEMU9mZnNldCBpcyBvdXRzaWRlIHRoZSBib3VuZHMgb2YgdGhlIERhdGFWaWV3ICoqKioqKioqJyk7XFxuICAgICAgICAgICAgcmV0dXJuIHt9O1xcbiAgICAgICAgfVxcbiAgICAgICAgLy8gY29uc29sZS5sb2coJyoqKioqKiogIHRodW1ibmFpbCBJRkQgb2Zmc2V0IChJRkQxKSBpczogJXMnLCBJRkQxT2Zmc2V0UG9pbnRlcik7XFxuXFxuICAgICAgICB2YXIgdGh1bWJUYWdzID0gcmVhZFRhZ3MoZGF0YVZpZXcsIHRpZmZTdGFydCwgdGlmZlN0YXJ0ICsgSUZEMU9mZnNldFBvaW50ZXIsIElGRDFUYWdzLCBiaWdFbmQpXFxuXFxuICAgICAgICAvLyBFWElGIDIuMyBzcGVjaWZpY2F0aW9uIGZvciBKUEVHIGZvcm1hdCB0aHVtYm5haWxcXG5cXG4gICAgICAgIC8vIElmIHRoZSB2YWx1ZSBvZiBDb21wcmVzc2lvbigweDAxMDMpIFRhZyBpbiBJRkQxIGlzICc2JywgdGh1bWJuYWlsIGltYWdlIGZvcm1hdCBpcyBKUEVHLlxcbiAgICAgICAgLy8gTW9zdCBvZiBFeGlmIGltYWdlIHVzZXMgSlBFRyBmb3JtYXQgZm9yIHRodW1ibmFpbC4gSW4gdGhhdCBjYXNlLCB5b3UgY2FuIGdldCBvZmZzZXQgb2YgdGh1bWJuYWlsXFxuICAgICAgICAvLyBieSBKcGVnSUZPZmZzZXQoMHgwMjAxKSBUYWcgaW4gSUZEMSwgc2l6ZSBvZiB0aHVtYm5haWwgYnkgSnBlZ0lGQnl0ZUNvdW50KDB4MDIwMikgVGFnLlxcbiAgICAgICAgLy8gRGF0YSBmb3JtYXQgaXMgb3JkaW5hcnkgSlBFRyBmb3JtYXQsIHN0YXJ0cyBmcm9tIDB4RkZEOCBhbmQgZW5kcyBieSAweEZGRDkuIEl0IHNlZW1zIHRoYXRcXG4gICAgICAgIC8vIEpQRUcgZm9ybWF0IGFuZCAxNjB4MTIwcGl4ZWxzIG9mIHNpemUgYXJlIHJlY29tbWVuZGVkIHRodW1ibmFpbCBmb3JtYXQgZm9yIEV4aWYyLjEgb3IgbGF0ZXIuXFxuXFxuICAgICAgICBpZiAodGh1bWJUYWdzWydDb21wcmVzc2lvbiddKSB7XFxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ1RodW1ibmFpbCBpbWFnZSBmb3VuZCEnKTtcXG5cXG4gICAgICAgICAgICBzd2l0Y2ggKHRodW1iVGFnc1snQ29tcHJlc3Npb24nXSkge1xcbiAgICAgICAgICAgICAgICBjYXNlIDY6XFxuICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnVGh1bWJuYWlsIGltYWdlIGZvcm1hdCBpcyBKUEVHJyk7XFxuICAgICAgICAgICAgICAgICAgICBpZiAodGh1bWJUYWdzLkpwZWdJRk9mZnNldCAmJiB0aHVtYlRhZ3MuSnBlZ0lGQnl0ZUNvdW50KSB7XFxuICAgICAgICAgICAgICAgICAgICAvLyBleHRyYWN0IHRoZSB0aHVtYm5haWxcXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdE9mZnNldCA9IHRpZmZTdGFydCArIHRodW1iVGFncy5KcGVnSUZPZmZzZXQ7XFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRMZW5ndGggPSB0aHVtYlRhZ3MuSnBlZ0lGQnl0ZUNvdW50O1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHRodW1iVGFnc1snYmxvYiddID0gbmV3IEJsb2IoW25ldyBVaW50OEFycmF5KGRhdGFWaWV3LmJ1ZmZlciwgdE9mZnNldCwgdExlbmd0aCldLCB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdpbWFnZS9qcGVnJ1xcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICBicmVhaztcXG5cXG4gICAgICAgICAgICBjYXNlIDE6XFxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFxcXCJUaHVtYm5haWwgaW1hZ2UgZm9ybWF0IGlzIFRJRkYsIHdoaWNoIGlzIG5vdCBpbXBsZW1lbnRlZC5cXFwiKTtcXG4gICAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAgICAgZGVmYXVsdDpcXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXFxcIlVua25vd24gdGh1bWJuYWlsIGltYWdlIGZvcm1hdCAnJXMnXFxcIiwgdGh1bWJUYWdzWydDb21wcmVzc2lvbiddKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgICAgICBlbHNlIGlmICh0aHVtYlRhZ3NbJ1Bob3RvbWV0cmljSW50ZXJwcmV0YXRpb24nXSA9PSAyKSB7XFxuICAgICAgICAgICAgY29uc29sZS5sb2coXFxcIlRodW1ibmFpbCBpbWFnZSBmb3JtYXQgaXMgUkdCLCB3aGljaCBpcyBub3QgaW1wbGVtZW50ZWQuXFxcIik7XFxuICAgICAgICB9XFxuICAgICAgICByZXR1cm4gdGh1bWJUYWdzO1xcbiAgICB9XFxuXFxuICAgIGZ1bmN0aW9uIGdldFN0cmluZ0Zyb21EQihidWZmZXIsIHN0YXJ0LCBsZW5ndGgpIHtcXG4gICAgICAgIHZhciBvdXRzdHIgPSBcXFwiXFxcIjtcXG4gICAgICAgIGZvciAobiA9IHN0YXJ0OyBuIDwgc3RhcnQrbGVuZ3RoOyBuKyspIHtcXG4gICAgICAgICAgICBvdXRzdHIgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZmZXIuZ2V0VWludDgobikpO1xcbiAgICAgICAgfVxcbiAgICAgICAgcmV0dXJuIG91dHN0cjtcXG4gICAgfVxcblxcbiAgICBmdW5jdGlvbiByZWFkRVhJRkRhdGEoZmlsZSwgc3RhcnQpIHtcXG4gICAgICAgIGlmIChnZXRTdHJpbmdGcm9tREIoZmlsZSwgc3RhcnQsIDQpICE9IFxcXCJFeGlmXFxcIikge1xcbiAgICAgICAgICAgIGlmIChkZWJ1ZykgY29uc29sZS5sb2coXFxcIk5vdCB2YWxpZCBFWElGIGRhdGEhIFxcXCIgKyBnZXRTdHJpbmdGcm9tREIoZmlsZSwgc3RhcnQsIDQpKTtcXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XFxuICAgICAgICB9XFxuXFxuICAgICAgICB2YXIgYmlnRW5kLFxcbiAgICAgICAgICAgIHRhZ3MsIHRhZyxcXG4gICAgICAgICAgICBleGlmRGF0YSwgZ3BzRGF0YSxcXG4gICAgICAgICAgICB0aWZmT2Zmc2V0ID0gc3RhcnQgKyA2O1xcblxcbiAgICAgICAgLy8gdGVzdCBmb3IgVElGRiB2YWxpZGl0eSBhbmQgZW5kaWFubmVzc1xcbiAgICAgICAgaWYgKGZpbGUuZ2V0VWludDE2KHRpZmZPZmZzZXQpID09IDB4NDk0OSkge1xcbiAgICAgICAgICAgIGJpZ0VuZCA9IGZhbHNlO1xcbiAgICAgICAgfSBlbHNlIGlmIChmaWxlLmdldFVpbnQxNih0aWZmT2Zmc2V0KSA9PSAweDRENEQpIHtcXG4gICAgICAgICAgICBiaWdFbmQgPSB0cnVlO1xcbiAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICBpZiAoZGVidWcpIGNvbnNvbGUubG9nKFxcXCJOb3QgdmFsaWQgVElGRiBkYXRhISAobm8gMHg0OTQ5IG9yIDB4NEQ0RClcXFwiKTtcXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XFxuICAgICAgICB9XFxuXFxuICAgICAgICBpZiAoZmlsZS5nZXRVaW50MTYodGlmZk9mZnNldCsyLCAhYmlnRW5kKSAhPSAweDAwMkEpIHtcXG4gICAgICAgICAgICBpZiAoZGVidWcpIGNvbnNvbGUubG9nKFxcXCJOb3QgdmFsaWQgVElGRiBkYXRhISAobm8gMHgwMDJBKVxcXCIpO1xcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIHZhciBmaXJzdElGRE9mZnNldCA9IGZpbGUuZ2V0VWludDMyKHRpZmZPZmZzZXQrNCwgIWJpZ0VuZCk7XFxuXFxuICAgICAgICBpZiAoZmlyc3RJRkRPZmZzZXQgPCAweDAwMDAwMDA4KSB7XFxuICAgICAgICAgICAgaWYgKGRlYnVnKSBjb25zb2xlLmxvZyhcXFwiTm90IHZhbGlkIFRJRkYgZGF0YSEgKEZpcnN0IG9mZnNldCBsZXNzIHRoYW4gOClcXFwiLCBmaWxlLmdldFVpbnQzMih0aWZmT2Zmc2V0KzQsICFiaWdFbmQpKTtcXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XFxuICAgICAgICB9XFxuXFxuICAgICAgICB0YWdzID0gcmVhZFRhZ3MoZmlsZSwgdGlmZk9mZnNldCwgdGlmZk9mZnNldCArIGZpcnN0SUZET2Zmc2V0LCBUaWZmVGFncywgYmlnRW5kKTtcXG5cXG4gICAgICAgIGlmICh0YWdzLkV4aWZJRkRQb2ludGVyKSB7XFxuICAgICAgICAgICAgZXhpZkRhdGEgPSByZWFkVGFncyhmaWxlLCB0aWZmT2Zmc2V0LCB0aWZmT2Zmc2V0ICsgdGFncy5FeGlmSUZEUG9pbnRlciwgRXhpZlRhZ3MsIGJpZ0VuZCk7XFxuICAgICAgICAgICAgZm9yICh0YWcgaW4gZXhpZkRhdGEpIHtcXG4gICAgICAgICAgICAgICAgc3dpdGNoICh0YWcpIHtcXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXFxcIkxpZ2h0U291cmNlXFxcIiA6XFxuICAgICAgICAgICAgICAgICAgICBjYXNlIFxcXCJGbGFzaFxcXCIgOlxcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcXFwiTWV0ZXJpbmdNb2RlXFxcIiA6XFxuICAgICAgICAgICAgICAgICAgICBjYXNlIFxcXCJFeHBvc3VyZVByb2dyYW1cXFwiIDpcXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXFxcIlNlbnNpbmdNZXRob2RcXFwiIDpcXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXFxcIlNjZW5lQ2FwdHVyZVR5cGVcXFwiIDpcXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXFxcIlNjZW5lVHlwZVxcXCIgOlxcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcXFwiQ3VzdG9tUmVuZGVyZWRcXFwiIDpcXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXFxcIldoaXRlQmFsYW5jZVxcXCIgOlxcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcXFwiR2FpbkNvbnRyb2xcXFwiIDpcXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXFxcIkNvbnRyYXN0XFxcIiA6XFxuICAgICAgICAgICAgICAgICAgICBjYXNlIFxcXCJTYXR1cmF0aW9uXFxcIiA6XFxuICAgICAgICAgICAgICAgICAgICBjYXNlIFxcXCJTaGFycG5lc3NcXFwiIDpcXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXFxcIlN1YmplY3REaXN0YW5jZVJhbmdlXFxcIiA6XFxuICAgICAgICAgICAgICAgICAgICBjYXNlIFxcXCJGaWxlU291cmNlXFxcIiA6XFxuICAgICAgICAgICAgICAgICAgICAgICAgZXhpZkRhdGFbdGFnXSA9IFN0cmluZ1ZhbHVlc1t0YWddW2V4aWZEYXRhW3RhZ11dO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xcblxcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcXFwiRXhpZlZlcnNpb25cXFwiIDpcXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXFxcIkZsYXNocGl4VmVyc2lvblxcXCIgOlxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4aWZEYXRhW3RhZ10gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGV4aWZEYXRhW3RhZ11bMF0sIGV4aWZEYXRhW3RhZ11bMV0sIGV4aWZEYXRhW3RhZ11bMl0sIGV4aWZEYXRhW3RhZ11bM10pO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xcblxcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcXFwiQ29tcG9uZW50c0NvbmZpZ3VyYXRpb25cXFwiIDpcXG4gICAgICAgICAgICAgICAgICAgICAgICBleGlmRGF0YVt0YWddID1cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgU3RyaW5nVmFsdWVzLkNvbXBvbmVudHNbZXhpZkRhdGFbdGFnXVswXV0gK1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTdHJpbmdWYWx1ZXMuQ29tcG9uZW50c1tleGlmRGF0YVt0YWddWzFdXSArXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN0cmluZ1ZhbHVlcy5Db21wb25lbnRzW2V4aWZEYXRhW3RhZ11bMl1dICtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgU3RyaW5nVmFsdWVzLkNvbXBvbmVudHNbZXhpZkRhdGFbdGFnXVszXV07XFxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgdGFnc1t0YWddID0gZXhpZkRhdGFbdGFnXTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9XFxuXFxuICAgICAgICBpZiAodGFncy5HUFNJbmZvSUZEUG9pbnRlcikge1xcbiAgICAgICAgICAgIGdwc0RhdGEgPSByZWFkVGFncyhmaWxlLCB0aWZmT2Zmc2V0LCB0aWZmT2Zmc2V0ICsgdGFncy5HUFNJbmZvSUZEUG9pbnRlciwgR1BTVGFncywgYmlnRW5kKTtcXG4gICAgICAgICAgICBmb3IgKHRhZyBpbiBncHNEYXRhKSB7XFxuICAgICAgICAgICAgICAgIHN3aXRjaCAodGFnKSB7XFxuICAgICAgICAgICAgICAgICAgICBjYXNlIFxcXCJHUFNWZXJzaW9uSURcXFwiIDpcXG4gICAgICAgICAgICAgICAgICAgICAgICBncHNEYXRhW3RhZ10gPSBncHNEYXRhW3RhZ11bMF0gK1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXFwiLlxcXCIgKyBncHNEYXRhW3RhZ11bMV0gK1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXFwiLlxcXCIgKyBncHNEYXRhW3RhZ11bMl0gK1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXFwiLlxcXCIgKyBncHNEYXRhW3RhZ11bM107XFxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgdGFnc1t0YWddID0gZ3BzRGF0YVt0YWddO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG5cXG4gICAgICAgIC8vIGV4dHJhY3QgdGh1bWJuYWlsXFxuICAgICAgICB0YWdzWyd0aHVtYm5haWwnXSA9IHJlYWRUaHVtYm5haWxJbWFnZShmaWxlLCB0aWZmT2Zmc2V0LCBmaXJzdElGRE9mZnNldCwgYmlnRW5kKTtcXG5cXG4gICAgICAgIHJldHVybiB0YWdzO1xcbiAgICB9XFxuXFxuICAgZnVuY3Rpb24gZmluZFhNUGluSlBFRyhmaWxlKSB7XFxuXFxuICAgICAgICBpZiAoISgnRE9NUGFyc2VyJyBpbiBzZWxmKSkge1xcbiAgICAgICAgICAgIC8vIGNvbnNvbGUud2FybignWE1MIHBhcnNpbmcgbm90IHN1cHBvcnRlZCB3aXRob3V0IERPTVBhcnNlcicpO1xcbiAgICAgICAgICAgIHJldHVybjtcXG4gICAgICAgIH1cXG4gICAgICAgIHZhciBkYXRhVmlldyA9IG5ldyBEYXRhVmlldyhmaWxlKTtcXG5cXG4gICAgICAgIGlmIChkZWJ1ZykgY29uc29sZS5sb2coXFxcIkdvdCBmaWxlIG9mIGxlbmd0aCBcXFwiICsgZmlsZS5ieXRlTGVuZ3RoKTtcXG4gICAgICAgIGlmICgoZGF0YVZpZXcuZ2V0VWludDgoMCkgIT0gMHhGRikgfHwgKGRhdGFWaWV3LmdldFVpbnQ4KDEpICE9IDB4RDgpKSB7XFxuICAgICAgICAgICBpZiAoZGVidWcpIGNvbnNvbGUubG9nKFxcXCJOb3QgYSB2YWxpZCBKUEVHXFxcIik7XFxuICAgICAgICAgICByZXR1cm4gZmFsc2U7IC8vIG5vdCBhIHZhbGlkIGpwZWdcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIHZhciBvZmZzZXQgPSAyLFxcbiAgICAgICAgICAgIGxlbmd0aCA9IGZpbGUuYnl0ZUxlbmd0aCxcXG4gICAgICAgICAgICBkb20gPSBuZXcgRE9NUGFyc2VyKCk7XFxuXFxuICAgICAgICB3aGlsZSAob2Zmc2V0IDwgKGxlbmd0aC00KSkge1xcbiAgICAgICAgICAgIGlmIChnZXRTdHJpbmdGcm9tREIoZGF0YVZpZXcsIG9mZnNldCwgNCkgPT0gXFxcImh0dHBcXFwiKSB7XFxuICAgICAgICAgICAgICAgIHZhciBzdGFydE9mZnNldCA9IG9mZnNldCAtIDE7XFxuICAgICAgICAgICAgICAgIHZhciBzZWN0aW9uTGVuZ3RoID0gZGF0YVZpZXcuZ2V0VWludDE2KG9mZnNldCAtIDIpIC0gMTtcXG4gICAgICAgICAgICAgICAgdmFyIHhtcFN0cmluZyA9IGdldFN0cmluZ0Zyb21EQihkYXRhVmlldywgc3RhcnRPZmZzZXQsIHNlY3Rpb25MZW5ndGgpXFxuICAgICAgICAgICAgICAgIHZhciB4bXBFbmRJbmRleCA9IHhtcFN0cmluZy5pbmRleE9mKCd4bXBtZXRhPicpICsgODtcXG4gICAgICAgICAgICAgICAgeG1wU3RyaW5nID0geG1wU3RyaW5nLnN1YnN0cmluZyggeG1wU3RyaW5nLmluZGV4T2YoICc8eDp4bXBtZXRhJyApLCB4bXBFbmRJbmRleCApO1xcblxcbiAgICAgICAgICAgICAgICB2YXIgaW5kZXhPZlhtcCA9IHhtcFN0cmluZy5pbmRleE9mKCd4OnhtcG1ldGEnKSArIDEwXFxuICAgICAgICAgICAgICAgIC8vTWFueSBjdXN0b20gd3JpdHRlbiBwcm9ncmFtcyBlbWJlZCB4bXAveG1sIHdpdGhvdXQgYW55IG5hbWVzcGFjZS4gRm9sbG93aW5nIGFyZSBzb21lIG9mIHRoZW0uXFxuICAgICAgICAgICAgICAgIC8vV2l0aG91dCB0aGVzZSBuYW1lc3BhY2VzLCBYTUwgaXMgdGhvdWdodCB0byBiZSBpbnZhbGlkIGJ5IHBhcnNlcnNcXG4gICAgICAgICAgICAgICAgeG1wU3RyaW5nID0geG1wU3RyaW5nLnNsaWNlKDAsIGluZGV4T2ZYbXApXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgJ3htbG5zOklwdGM0eG1wQ29yZT1cXFwiaHR0cDovL2lwdGMub3JnL3N0ZC9JcHRjNHhtcENvcmUvMS4wL3htbG5zL1xcXCIgJ1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArICd4bWxuczp4c2k9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlXFxcIiAnXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgJ3htbG5zOnRpZmY9XFxcImh0dHA6Ly9ucy5hZG9iZS5jb20vdGlmZi8xLjAvXFxcIiAnXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgJ3htbG5zOnBsdXM9XFxcImh0dHA6Ly9zY2hlbWFzLmFuZHJvaWQuY29tL2Fway9saWIvY29tLmdvb2dsZS5hbmRyb2lkLmdtcy5wbHVzXFxcIiAnXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgJ3htbG5zOmV4dD1cXFwiaHR0cDovL3d3dy5nZXR0eWltYWdlcy5jb20veHNsdEV4dGVuc2lvbi8xLjBcXFwiICdcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAneG1sbnM6ZXhpZj1cXFwiaHR0cDovL25zLmFkb2JlLmNvbS9leGlmLzEuMC9cXFwiICdcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAneG1sbnM6c3RFdnQ9XFxcImh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZUV2ZW50I1xcXCIgJ1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArICd4bWxuczpzdFJlZj1cXFwiaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL3NUeXBlL1Jlc291cmNlUmVmI1xcXCIgJ1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArICd4bWxuczpjcnM9XFxcImh0dHA6Ly9ucy5hZG9iZS5jb20vY2FtZXJhLXJhdy1zZXR0aW5ncy8xLjAvXFxcIiAnXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgJ3htbG5zOnhhcEdJbWc9XFxcImh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9nL2ltZy9cXFwiICdcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAneG1sbnM6SXB0YzR4bXBFeHQ9XFxcImh0dHA6Ly9pcHRjLm9yZy9zdGQvSXB0YzR4bXBFeHQvMjAwOC0wMi0yOS9cXFwiICdcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyB4bXBTdHJpbmcuc2xpY2UoaW5kZXhPZlhtcClcXG5cXG4gICAgICAgICAgICAgICAgdmFyIGRvbURvY3VtZW50ID0gZG9tLnBhcnNlRnJvbVN0cmluZyggeG1wU3RyaW5nLCAndGV4dC94bWwnICk7XFxuICAgICAgICAgICAgICAgIHJldHVybiB4bWwyT2JqZWN0KGRvbURvY3VtZW50KTtcXG4gICAgICAgICAgICB9IGVsc2V7XFxuICAgICAgICAgICAgIG9mZnNldCsrO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgfVxcblxcbiAgICBmdW5jdGlvbiB4bWwyanNvbih4bWwpIHtcXG4gICAgICAgIHZhciBqc29uID0ge307XFxuICAgICAgXFxuICAgICAgICBpZiAoeG1sLm5vZGVUeXBlID09IDEpIHsgLy8gZWxlbWVudCBub2RlXFxuICAgICAgICAgIGlmICh4bWwuYXR0cmlidXRlcy5sZW5ndGggPiAwKSB7XFxuICAgICAgICAgICAganNvblsnQGF0dHJpYnV0ZXMnXSA9IHt9O1xcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgeG1sLmF0dHJpYnV0ZXMubGVuZ3RoOyBqKyspIHtcXG4gICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGUgPSB4bWwuYXR0cmlidXRlcy5pdGVtKGopO1xcbiAgICAgICAgICAgICAganNvblsnQGF0dHJpYnV0ZXMnXVthdHRyaWJ1dGUubm9kZU5hbWVdID0gYXR0cmlidXRlLm5vZGVWYWx1ZTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgIH1cXG4gICAgICAgIH0gZWxzZSBpZiAoeG1sLm5vZGVUeXBlID09IDMpIHsgLy8gdGV4dCBub2RlXFxuICAgICAgICAgIHJldHVybiB4bWwubm9kZVZhbHVlO1xcbiAgICAgICAgfVxcbiAgICAgIFxcbiAgICAgICAgLy8gZGVhbCB3aXRoIGNoaWxkcmVuXFxuICAgICAgICBpZiAoeG1sLmhhc0NoaWxkTm9kZXMoKSkge1xcbiAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgeG1sLmNoaWxkTm9kZXMubGVuZ3RoOyBpKyspIHtcXG4gICAgICAgICAgICB2YXIgY2hpbGQgPSB4bWwuY2hpbGROb2Rlcy5pdGVtKGkpO1xcbiAgICAgICAgICAgIHZhciBub2RlTmFtZSA9IGNoaWxkLm5vZGVOYW1lO1xcbiAgICAgICAgICAgIGlmIChqc29uW25vZGVOYW1lXSA9PSBudWxsKSB7XFxuICAgICAgICAgICAgICBqc29uW25vZGVOYW1lXSA9IHhtbDJqc29uKGNoaWxkKTtcXG4gICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgaWYgKGpzb25bbm9kZU5hbWVdLnB1c2ggPT0gbnVsbCkge1xcbiAgICAgICAgICAgICAgICB2YXIgb2xkID0ganNvbltub2RlTmFtZV07XFxuICAgICAgICAgICAgICAgIGpzb25bbm9kZU5hbWVdID0gW107XFxuICAgICAgICAgICAgICAgIGpzb25bbm9kZU5hbWVdLnB1c2gob2xkKTtcXG4gICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgIGpzb25bbm9kZU5hbWVdLnB1c2goeG1sMmpzb24oY2hpbGQpKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICAgIFxcbiAgICAgICAgcmV0dXJuIGpzb247XFxuICAgIH1cXG5cXG4gICAgZnVuY3Rpb24geG1sMk9iamVjdCh4bWwpIHtcXG4gICAgICAgIHRyeSB7XFxuICAgICAgICAgICAgdmFyIG9iaiA9IHt9O1xcbiAgICAgICAgICAgIGlmICh4bWwuY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xcbiAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB4bWwuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcXG4gICAgICAgICAgICAgICAgdmFyIGl0ZW0gPSB4bWwuY2hpbGRyZW4uaXRlbShpKTtcXG4gICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZXMgPSBpdGVtLmF0dHJpYnV0ZXM7XFxuICAgICAgICAgICAgICAgIGZvcih2YXIgaWR4IGluIGF0dHJpYnV0ZXMpIHtcXG4gICAgICAgICAgICAgICAgICAgIHZhciBpdGVtQXR0ID0gYXR0cmlidXRlc1tpZHhdO1xcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGFLZXkgPSBpdGVtQXR0Lm5vZGVOYW1lO1xcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGFWYWx1ZSA9IGl0ZW1BdHQubm9kZVZhbHVlO1xcblxcbiAgICAgICAgICAgICAgICAgICAgaWYoZGF0YUtleSAhPT0gdW5kZWZpbmVkKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgb2JqW2RhdGFLZXldID0gZGF0YVZhbHVlO1xcbiAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIHZhciBub2RlTmFtZSA9IGl0ZW0ubm9kZU5hbWU7XFxuXFxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgKG9ialtub2RlTmFtZV0pID09IFxcXCJ1bmRlZmluZWRcXFwiKSB7XFxuICAgICAgICAgICAgICAgICAgb2JqW25vZGVOYW1lXSA9IHhtbDJqc29uKGl0ZW0pO1xcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgKG9ialtub2RlTmFtZV0ucHVzaCkgPT0gXFxcInVuZGVmaW5lZFxcXCIpIHtcXG4gICAgICAgICAgICAgICAgICAgIHZhciBvbGQgPSBvYmpbbm9kZU5hbWVdO1xcblxcbiAgICAgICAgICAgICAgICAgICAgb2JqW25vZGVOYW1lXSA9IFtdO1xcbiAgICAgICAgICAgICAgICAgICAgb2JqW25vZGVOYW1lXS5wdXNoKG9sZCk7XFxuICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgIG9ialtub2RlTmFtZV0ucHVzaCh4bWwyanNvbihpdGVtKSk7XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgb2JqID0geG1sLnRleHRDb250ZW50O1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XFxuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlLm1lc3NhZ2UpO1xcbiAgICAgICAgICB9XFxuICAgIH1cXG5cXG4gICAgRVhJRi5lbmFibGVYbXAgPSBmdW5jdGlvbigpIHtcXG4gICAgICAgIEVYSUYuaXNYbXBFbmFibGVkID0gdHJ1ZTtcXG4gICAgfVxcblxcbiAgICBFWElGLmRpc2FibGVYbXAgPSBmdW5jdGlvbigpIHtcXG4gICAgICAgIEVYSUYuaXNYbXBFbmFibGVkID0gZmFsc2U7XFxuICAgIH1cXG5cXG4gICAgRVhJRi5nZXREYXRhID0gZnVuY3Rpb24oaW1nLCBjYWxsYmFjaykge1xcbiAgICAgICAgaWYgKCgoc2VsZi5JbWFnZSAmJiBpbWcgaW5zdGFuY2VvZiBzZWxmLkltYWdlKVxcbiAgICAgICAgICAgIHx8IChzZWxmLkhUTUxJbWFnZUVsZW1lbnQgJiYgaW1nIGluc3RhbmNlb2Ygc2VsZi5IVE1MSW1hZ2VFbGVtZW50KSlcXG4gICAgICAgICAgICAmJiAhaW1nLmNvbXBsZXRlKVxcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcXG5cXG4gICAgICAgIGlmICghaW1hZ2VIYXNEYXRhKGltZykpIHtcXG4gICAgICAgICAgICBnZXRJbWFnZURhdGEoaW1nLCBjYWxsYmFjayk7XFxuICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xcbiAgICAgICAgICAgICAgICBjYWxsYmFjay5jYWxsKGltZyk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgICAgcmV0dXJuIHRydWU7XFxuICAgIH1cXG5cXG4gICAgRVhJRi5nZXRUYWcgPSBmdW5jdGlvbihpbWcsIHRhZykge1xcbiAgICAgICAgaWYgKCFpbWFnZUhhc0RhdGEoaW1nKSkgcmV0dXJuO1xcbiAgICAgICAgcmV0dXJuIGltZy5leGlmZGF0YVt0YWddO1xcbiAgICB9XFxuICAgIFxcbiAgICBFWElGLmdldElwdGNUYWcgPSBmdW5jdGlvbihpbWcsIHRhZykge1xcbiAgICAgICAgaWYgKCFpbWFnZUhhc0RhdGEoaW1nKSkgcmV0dXJuO1xcbiAgICAgICAgcmV0dXJuIGltZy5pcHRjZGF0YVt0YWddO1xcbiAgICB9XFxuXFxuICAgIEVYSUYuZ2V0QWxsVGFncyA9IGZ1bmN0aW9uKGltZykge1xcbiAgICAgICAgaWYgKCFpbWFnZUhhc0RhdGEoaW1nKSkgcmV0dXJuIHt9O1xcbiAgICAgICAgdmFyIGEsXFxuICAgICAgICAgICAgZGF0YSA9IGltZy5leGlmZGF0YSxcXG4gICAgICAgICAgICB0YWdzID0ge307XFxuICAgICAgICBmb3IgKGEgaW4gZGF0YSkge1xcbiAgICAgICAgICAgIGlmIChkYXRhLmhhc093blByb3BlcnR5KGEpKSB7XFxuICAgICAgICAgICAgICAgIHRhZ3NbYV0gPSBkYXRhW2FdO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICAgIHJldHVybiB0YWdzO1xcbiAgICB9XFxuICAgIFxcbiAgICBFWElGLmdldEFsbElwdGNUYWdzID0gZnVuY3Rpb24oaW1nKSB7XFxuICAgICAgICBpZiAoIWltYWdlSGFzRGF0YShpbWcpKSByZXR1cm4ge307XFxuICAgICAgICB2YXIgYSxcXG4gICAgICAgICAgICBkYXRhID0gaW1nLmlwdGNkYXRhLFxcbiAgICAgICAgICAgIHRhZ3MgPSB7fTtcXG4gICAgICAgIGZvciAoYSBpbiBkYXRhKSB7XFxuICAgICAgICAgICAgaWYgKGRhdGEuaGFzT3duUHJvcGVydHkoYSkpIHtcXG4gICAgICAgICAgICAgICAgdGFnc1thXSA9IGRhdGFbYV07XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgICAgcmV0dXJuIHRhZ3M7XFxuICAgIH1cXG5cXG4gICAgRVhJRi5wcmV0dHkgPSBmdW5jdGlvbihpbWcpIHtcXG4gICAgICAgIGlmICghaW1hZ2VIYXNEYXRhKGltZykpIHJldHVybiBcXFwiXFxcIjtcXG4gICAgICAgIHZhciBhLFxcbiAgICAgICAgICAgIGRhdGEgPSBpbWcuZXhpZmRhdGEsXFxuICAgICAgICAgICAgc3RyUHJldHR5ID0gXFxcIlxcXCI7XFxuICAgICAgICBmb3IgKGEgaW4gZGF0YSkge1xcbiAgICAgICAgICAgIGlmIChkYXRhLmhhc093blByb3BlcnR5KGEpKSB7XFxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZGF0YVthXSA9PSBcXFwib2JqZWN0XFxcIikge1xcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGFbYV0gaW5zdGFuY2VvZiBOdW1iZXIpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJQcmV0dHkgKz0gYSArIFxcXCIgOiBcXFwiICsgZGF0YVthXSArIFxcXCIgW1xcXCIgKyBkYXRhW2FdLm51bWVyYXRvciArIFxcXCIvXFxcIiArIGRhdGFbYV0uZGVub21pbmF0b3IgKyBcXFwiXVxcXFxyXFxcXG5cXFwiO1xcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJQcmV0dHkgKz0gYSArIFxcXCIgOiBbXFxcIiArIGRhdGFbYV0ubGVuZ3RoICsgXFxcIiB2YWx1ZXNdXFxcXHJcXFxcblxcXCI7XFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgICBzdHJQcmV0dHkgKz0gYSArIFxcXCIgOiBcXFwiICsgZGF0YVthXSArIFxcXCJcXFxcclxcXFxuXFxcIjtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICAgIHJldHVybiBzdHJQcmV0dHk7XFxuICAgIH1cXG5cXG4gICAgRVhJRi5yZWFkRnJvbUJpbmFyeUZpbGUgPSBmdW5jdGlvbihmaWxlKSB7XFxuICAgICAgICByZXR1cm4gZmluZEVYSUZpbkpQRUcoZmlsZSk7XFxuICAgIH1cXG5cXG4gICAgaWYgKHRydWUpIHtcXG4gICAgICAgICEoX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXyA9IFtdLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyA9IGZ1bmN0aW9uKCkge1xcbiAgICAgICAgICAgIHJldHVybiBFWElGO1xcbiAgICAgICAgfS5hcHBseShleHBvcnRzLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fKSxcXG5cXHRcXHRcXHRcXHRfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyAhPT0gdW5kZWZpbmVkICYmIChtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fKSk7XFxuICAgIH1cXG59LmNhbGwodGhpcykpO1xcblxcbi8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2WkRvdmQyVmlMMjV2WkdWZmJXOWtkV3hsY3k5bGVHbG1MV3B6TDJWNGFXWXVhbk0vWVdZNE5TSmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaVFVRkJRVHM3UVVGRlFUczdRVUZGUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeExRVUZMTzBGQlEwdzdRVUZEUVRzN1FVRkZRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEZOQlFWTTdRVUZEVkR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4VFFVRlRPMEZCUTFRN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeFRRVUZUTzBGQlExUTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxGTkJRVk03UVVGRFZEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzVTBGQlV6dEJRVU5VTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hUUVVGVE8wRkJRMVE3UVVGRFFUdEJRVU5CTEZOQlFWTTdRVUZEVkR0QlFVTkJPMEZCUTBFN1FVRkRRU3hUUVVGVE8wRkJRMVE3UVVGRFFUdEJRVU5CTzBGQlEwRXNVMEZCVXp0QlFVTlVPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEZOQlFWTTdRVUZEVkR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxGTkJRVk03UVVGRFZEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRk5CUVZNN1FVRkRWRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEZOQlFWTTdRVUZEVkR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzVTBGQlV6dEJRVU5VTzBGQlEwRTdRVUZEUVN4VFFVRlRPenRCUVVWVU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJMRk5CUVZNN1FVRkRWRHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenM3UVVGSFFUdEJRVU5CTEN0RVFVRXJSQ3hMUVVGTExIRkNRVUZ4UWl3d1FrRkJNRUk3UVVGRGJrZ3NOa05CUVRaRExFdEJRVXM3UVVGRGJFUTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3gxUWtGQmRVSXNVMEZCVXp0QlFVTm9RenRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3d5UXp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVN3eVEwRkJNa003UVVGRE0wTTdRVUZEUVRzN1FVRkZRU3hoUVVGaExIRkRRVUZ4UXp0QlFVTnNSRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4cFFrRkJhVUk3UVVGRGFrSXNZVUZCWVR0QlFVTmlPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzY1VKQlFYRkNPMEZCUTNKQ08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hUUVVGVE8wRkJRMVE3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeDVRa0ZCZVVJN1FVRkRla0k3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTERaQ1FVRTJRanRCUVVNM1FqczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHM3UVVGRlFUczdRVUZGUVN4aFFVRmhPMEZCUTJJN1FVRkRRVHM3UVVGRlFUczdRVUZGUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJMSGxDUVVGNVFqdEJRVU42UWpzN1FVRkZRVHRCUVVOQk96czdRVUZIUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHM3UVVGRlFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3TzBGQlJVRTdPMEZCUlVFN096dEJRVWRCTzBGQlEwRTdPMEZCUlVFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenRCUVVsQk8wRkJRMEU3UVVGRFFTeHhRa0ZCY1VJN1FVRkRja0k3UVVGRFFUczdRVUZGUVN4cFFrRkJhVUlzVlVGQlZUdEJRVU16UWp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPMEZCUjBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEdsQ1FVRnBRanRCUVVOcVFqdEJRVU5CTzBGQlEwRXNOa0pCUVRaQ0xGbEJRVms3UVVGRGVrTTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxHbENRVUZwUWp0QlFVTnFRanRCUVVOQk8wRkJRMEVzTmtKQlFUWkNMRmxCUVZrN1FVRkRla003UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEVzYVVKQlFXbENPMEZCUTJwQ08wRkJRMEVzTmtKQlFUWkNMRmxCUVZrN1FVRkRla003UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMR2xDUVVGcFFqdEJRVU5xUWp0QlFVTkJMRFpDUVVFMlFpeFpRVUZaTzBGQlEzcERPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEVzYVVKQlFXbENPMEZCUTJwQ08wRkJRMEVzTmtKQlFUWkNMRmxCUVZrN1FVRkRla003UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEVzYVVKQlFXbENPMEZCUTJwQ08wRkJRMEVzTmtKQlFUWkNMRmxCUVZrN1FVRkRla003UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVN4M1JVRkJkMFU3UVVGRGVFVTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc01rUkJRVEpFTzBGQlF6TkVPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCT3p0QlFVVkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeDVRa0ZCZVVJN1FVRkRla0k3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTEhWQ1FVRjFRaXhyUWtGQmEwSTdRVUZEZWtNN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeFRRVUZUTzBGQlExUTdRVUZEUVN4VFFVRlRPMEZCUTFRN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEVzZDBKQlFYZENPMEZCUTNoQ096dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEVzWVVGQllUdEJRVU5pTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRXNaME5CUVdkRE8wRkJRMmhETzBGQlEwRTdRVUZEUVN3eVFrRkJNa0lzTWtKQlFUSkNPMEZCUTNSRU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNVMEZCVXl3NFFrRkJPRUk3UVVGRGRrTTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEVzZDBKQlFYZENMREpDUVVFeVFqdEJRVU51UkR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxHRkJRV0U3UVVGRFlqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTERaQ1FVRTJRaXg1UWtGQmVVSTdRVUZEZEVRN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJMR2xDUVVGcFFqdEJRVU5xUWp0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMR0ZCUVdFN1FVRkRZanRCUVVOQk8wRkJRMEU3UVVGRFFTeFhRVUZYTzBGQlExZzdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEVzVTBGQlV6dEJRVU5VTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc2NVSkJRWEZDTzBGQlEzSkNPMEZCUTBFN1FVRkRRU3hwUWtGQmFVSTdRVUZEYWtJN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4VFFVRlRPMEZCUVVFN1FVRkRWRHRCUVVOQkxFTkJRVU1pTENKbWFXeGxJam9pTnpNdWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUlvWm5WdVkzUnBiMjRvS1NCN1hHNWNiaUFnSUNCMllYSWdaR1ZpZFdjZ1BTQm1ZV3h6WlR0Y2JseHVJQ0FnSUhaaGNpQnliMjkwSUQwZ2RHaHBjenRjYmx4dUlDQWdJSFpoY2lCRldFbEdJRDBnWm5WdVkzUnBiMjRvYjJKcUtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNodlltb2dhVzV6ZEdGdVkyVnZaaUJGV0VsR0tTQnlaWFIxY200Z2IySnFPMXh1SUNBZ0lDQWdJQ0JwWmlBb0lTaDBhR2x6SUdsdWMzUmhibU5sYjJZZ1JWaEpSaWtwSUhKbGRIVnliaUJ1WlhjZ1JWaEpSaWh2WW1vcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGtWWVNVWjNjbUZ3Y0dWa0lEMGdiMkpxTzF4dUlDQWdJSDA3WEc1Y2JpQWdJQ0JwWmlBb2RIbHdaVzltSUdWNGNHOXlkSE1nSVQwOUlDZDFibVJsWm1sdVpXUW5LU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ2JXOWtkV3hsSUNFOVBTQW5kVzVrWldacGJtVmtKeUFtSmlCdGIyUjFiR1V1Wlhod2IzSjBjeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdaWGh3YjNKMGN5QTlJRzF2WkhWc1pTNWxlSEJ2Y25SeklEMGdSVmhKUmp0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQmxlSEJ2Y25SekxrVllTVVlnUFNCRldFbEdPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lISnZiM1F1UlZoSlJpQTlJRVZZU1VZN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnZG1GeUlFVjRhV1pVWVdkeklEMGdSVmhKUmk1VVlXZHpJRDBnZTF4dVhHNGdJQ0FnSUNBZ0lDOHZJSFpsY25OcGIyNGdkR0ZuYzF4dUlDQWdJQ0FnSUNBd2VEa3dNREFnT2lCY0lrVjRhV1pXWlhKemFXOXVYQ0lzSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRVZZU1VZZ2RtVnljMmx2Ymx4dUlDQWdJQ0FnSUNBd2VFRXdNREFnT2lCY0lrWnNZWE5vY0dsNFZtVnljMmx2Ymx3aUxDQWdJQ0FnSUNBZ0lDOHZJRVpzWVhOb2NHbDRJR1p2Y20xaGRDQjJaWEp6YVc5dVhHNWNiaUFnSUNBZ0lDQWdMeThnWTI5c2IzSnpjR0ZqWlNCMFlXZHpYRzRnSUNBZ0lDQWdJREI0UVRBd01TQTZJRndpUTI5c2IzSlRjR0ZqWlZ3aUxDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1EyOXNiM0lnYzNCaFkyVWdhVzVtYjNKdFlYUnBiMjRnZEdGblhHNWNiaUFnSUNBZ0lDQWdMeThnYVcxaFoyVWdZMjl1Wm1sbmRYSmhkR2x2Ymx4dUlDQWdJQ0FnSUNBd2VFRXdNRElnT2lCY0lsQnBlR1ZzV0VScGJXVnVjMmx2Ymx3aUxDQWdJQ0FnSUNBZ0lDOHZJRlpoYkdsa0lIZHBaSFJvSUc5bUlHMWxZVzVwYm1kbWRXd2dhVzFoWjJWY2JpQWdJQ0FnSUNBZ01IaEJNREF6SURvZ1hDSlFhWGhsYkZsRWFXMWxibk5wYjI1Y0lpd2dJQ0FnSUNBZ0lDQXZMeUJXWVd4cFpDQm9aV2xuYUhRZ2IyWWdiV1ZoYm1sdVoyWjFiQ0JwYldGblpWeHVJQ0FnSUNBZ0lDQXdlRGt4TURFZ09pQmNJa052YlhCdmJtVnVkSE5EYjI1bWFXZDFjbUYwYVc5dVhDSXNJQzh2SUVsdVptOXliV0YwYVc5dUlHRmliM1YwSUdOb1lXNXVaV3h6WEc0Z0lDQWdJQ0FnSURCNE9URXdNaUE2SUZ3aVEyOXRjSEpsYzNObFpFSnBkSE5RWlhKUWFYaGxiRndpTENBZ0x5OGdRMjl0Y0hKbGMzTmxaQ0JpYVhSeklIQmxjaUJ3YVhobGJGeHVYRzRnSUNBZ0lDQWdJQzh2SUhWelpYSWdhVzVtYjNKdFlYUnBiMjVjYmlBZ0lDQWdJQ0FnTUhnNU1qZERJRG9nWENKTllXdGxjazV2ZEdWY0lpd2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QkJibmtnWkdWemFYSmxaQ0JwYm1admNtMWhkR2x2YmlCM2NtbDBkR1Z1SUdKNUlIUm9aU0J0WVc1MVptRmpkSFZ5WlhKY2JpQWdJQ0FnSUNBZ01IZzVNamcySURvZ1hDSlZjMlZ5UTI5dGJXVnVkRndpTENBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJEYjIxdFpXNTBjeUJpZVNCMWMyVnlYRzVjYmlBZ0lDQWdJQ0FnTHk4Z2NtVnNZWFJsWkNCbWFXeGxYRzRnSUNBZ0lDQWdJREI0UVRBd05DQTZJRndpVW1Wc1lYUmxaRk52ZFc1a1JtbHNaVndpTENBZ0lDQWdJQ0FnTHk4Z1RtRnRaU0J2WmlCeVpXeGhkR1ZrSUhOdmRXNWtJR1pwYkdWY2JseHVJQ0FnSUNBZ0lDQXZMeUJrWVhSbElHRnVaQ0IwYVcxbFhHNGdJQ0FnSUNBZ0lEQjRPVEF3TXlBNklGd2lSR0YwWlZScGJXVlBjbWxuYVc1aGJGd2lMQ0FnSUNBZ0lDQWdMeThnUkdGMFpTQmhibVFnZEdsdFpTQjNhR1Z1SUhSb1pTQnZjbWxuYVc1aGJDQnBiV0ZuWlNCM1lYTWdaMlZ1WlhKaGRHVmtYRzRnSUNBZ0lDQWdJREI0T1RBd05DQTZJRndpUkdGMFpWUnBiV1ZFYVdkcGRHbDZaV1JjSWl3Z0lDQWdJQ0FnTHk4Z1JHRjBaU0JoYm1RZ2RHbHRaU0IzYUdWdUlIUm9aU0JwYldGblpTQjNZWE1nYzNSdmNtVmtJR1JwWjJsMFlXeHNlVnh1SUNBZ0lDQWdJQ0F3ZURreU9UQWdPaUJjSWxOMVluTmxZMVJwYldWY0lpd2dJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklFWnlZV04wYVc5dWN5QnZaaUJ6WldOdmJtUnpJR1p2Y2lCRVlYUmxWR2x0WlZ4dUlDQWdJQ0FnSUNBd2VEa3lPVEVnT2lCY0lsTjFZbk5sWTFScGJXVlBjbWxuYVc1aGJGd2lMQ0FnSUNBZ0lDOHZJRVp5WVdOMGFXOXVjeUJ2WmlCelpXTnZibVJ6SUdadmNpQkVZWFJsVkdsdFpVOXlhV2RwYm1Gc1hHNGdJQ0FnSUNBZ0lEQjRPVEk1TWlBNklGd2lVM1ZpYzJWalZHbHRaVVJwWjJsMGFYcGxaRndpTENBZ0lDQWdMeThnUm5KaFkzUnBiMjV6SUc5bUlITmxZMjl1WkhNZ1ptOXlJRVJoZEdWVWFXMWxSR2xuYVhScGVtVmtYRzVjYmlBZ0lDQWdJQ0FnTHk4Z2NHbGpkSFZ5WlMxMFlXdHBibWNnWTI5dVpHbDBhVzl1YzF4dUlDQWdJQ0FnSUNBd2VEZ3lPVUVnT2lCY0lrVjRjRzl6ZFhKbFZHbHRaVndpTENBZ0lDQWdJQ0FnSUNBZ0lDOHZJRVY0Y0c5emRYSmxJSFJwYldVZ0tHbHVJSE5sWTI5dVpITXBYRzRnSUNBZ0lDQWdJREI0T0RJNVJDQTZJRndpUms1MWJXSmxjbHdpTENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1JpQnVkVzFpWlhKY2JpQWdJQ0FnSUNBZ01IZzRPREl5SURvZ1hDSkZlSEJ2YzNWeVpWQnliMmR5WVcxY0lpd2dJQ0FnSUNBZ0lDQXZMeUJGZUhCdmMzVnlaU0J3Y205bmNtRnRYRzRnSUNBZ0lDQWdJREI0T0RneU5DQTZJRndpVTNCbFkzUnlZV3hUWlc1emFYUnBkbWwwZVZ3aUxDQWdJQ0FnTHk4Z1UzQmxZM1J5WVd3Z2MyVnVjMmwwYVhacGRIbGNiaUFnSUNBZ0lDQWdNSGc0T0RJM0lEb2dYQ0pKVTA5VGNHVmxaRkpoZEdsdVozTmNJaXdnSUNBZ0lDQWdJQ0F2THlCSlUwOGdjM0JsWldRZ2NtRjBhVzVuWEc0Z0lDQWdJQ0FnSURCNE9EZ3lPQ0E2SUZ3aVQwVkRSbHdpTENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdUM0IwYjJWc1pXTjBjbWxqSUdOdmJuWmxjbk5wYjI0Z1ptRmpkRzl5WEc0Z0lDQWdJQ0FnSURCNE9USXdNU0E2SUZ3aVUyaDFkSFJsY2xOd1pXVmtWbUZzZFdWY0lpd2dJQ0FnSUNBZ0x5OGdVMmgxZEhSbGNpQnpjR1ZsWkZ4dUlDQWdJQ0FnSUNBd2VEa3lNRElnT2lCY0lrRndaWEowZFhKbFZtRnNkV1ZjSWl3Z0lDQWdJQ0FnSUNBZ0lDOHZJRXhsYm5NZ1lYQmxjblIxY21WY2JpQWdJQ0FnSUNBZ01IZzVNakF6SURvZ1hDSkNjbWxuYUhSdVpYTnpWbUZzZFdWY0lpd2dJQ0FnSUNBZ0lDQXZMeUJXWVd4MVpTQnZaaUJpY21sbmFIUnVaWE56WEc0Z0lDQWdJQ0FnSURCNE9USXdOQ0E2SUZ3aVJYaHdiM04xY21WQ2FXRnpYQ0lzSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdSWGh3YjNOMWNtVWdZbWxoYzF4dUlDQWdJQ0FnSUNBd2VEa3lNRFVnT2lCY0lrMWhlRUZ3WlhKMGRYSmxWbUZzZFdWY0lpd2dJQ0FnSUNBZ0lDOHZJRk50WVd4c1pYTjBJRVlnYm5WdFltVnlJRzltSUd4bGJuTmNiaUFnSUNBZ0lDQWdNSGc1TWpBMklEb2dYQ0pUZFdKcVpXTjBSR2x6ZEdGdVkyVmNJaXdnSUNBZ0lDQWdJQ0F2THlCRWFYTjBZVzVqWlNCMGJ5QnpkV0pxWldOMElHbHVJRzFsZEdWeWMxeHVJQ0FnSUNBZ0lDQXdlRGt5TURjZ09pQmNJazFsZEdWeWFXNW5UVzlrWlZ3aUxDQWdJQ0FnSUNBZ0lDQWdJQzh2SUUxbGRHVnlhVzVuSUcxdlpHVmNiaUFnSUNBZ0lDQWdNSGc1TWpBNElEb2dYQ0pNYVdkb2RGTnZkWEpqWlZ3aUxDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCTGFXNWtJRzltSUd4cFoyaDBJSE52ZFhKalpWeHVJQ0FnSUNBZ0lDQXdlRGt5TURrZ09pQmNJa1pzWVhOb1hDSXNJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUVac1lYTm9JSE4wWVhSMWMxeHVJQ0FnSUNBZ0lDQXdlRGt5TVRRZ09pQmNJbE4xWW1wbFkzUkJjbVZoWENJc0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUV4dlkyRjBhVzl1SUdGdVpDQmhjbVZoSUc5bUlHMWhhVzRnYzNWaWFtVmpkRnh1SUNBZ0lDQWdJQ0F3ZURreU1FRWdPaUJjSWtadlkyRnNUR1Z1WjNSb1hDSXNJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklFWnZZMkZzSUd4bGJtZDBhQ0J2WmlCMGFHVWdiR1Z1Y3lCcGJpQnRiVnh1SUNBZ0lDQWdJQ0F3ZUVFeU1FSWdPaUJjSWtac1lYTm9SVzVsY21kNVhDSXNJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklGTjBjbTlpWlNCbGJtVnlaM2tnYVc0Z1FrTlFVMXh1SUNBZ0lDQWdJQ0F3ZUVFeU1FTWdPaUJjSWxOd1lYUnBZV3hHY21WeGRXVnVZM2xTWlhOd2IyNXpaVndpTENBZ0lDQXZMMXh1SUNBZ0lDQWdJQ0F3ZUVFeU1FVWdPaUJjSWtadlkyRnNVR3hoYm1WWVVtVnpiMngxZEdsdmJsd2lMQ0FnSUM4dklFNTFiV0psY2lCdlppQndhWGhsYkhNZ2FXNGdkMmxrZEdnZ1pHbHlaV04wYVc5dUlIQmxjaUJHYjJOaGJGQnNZVzVsVW1WemIyeDFkR2x2YmxWdWFYUmNiaUFnSUNBZ0lDQWdNSGhCTWpCR0lEb2dYQ0pHYjJOaGJGQnNZVzVsV1ZKbGMyOXNkWFJwYjI1Y0lpd2dJQ0F2THlCT2RXMWlaWElnYjJZZ2NHbDRaV3h6SUdsdUlHaGxhV2RvZENCa2FYSmxZM1JwYjI0Z2NHVnlJRVp2WTJGc1VHeGhibVZTWlhOdmJIVjBhVzl1Vlc1cGRGeHVJQ0FnSUNBZ0lDQXdlRUV5TVRBZ09pQmNJa1p2WTJGc1VHeGhibVZTWlhOdmJIVjBhVzl1Vlc1cGRGd2lMQ0FnSUNBdkx5QlZibWwwSUdadmNpQnRaV0Z6ZFhKcGJtY2dSbTlqWVd4UWJHRnVaVmhTWlhOdmJIVjBhVzl1SUdGdVpDQkdiMk5oYkZCc1lXNWxXVkpsYzI5c2RYUnBiMjVjYmlBZ0lDQWdJQ0FnTUhoQk1qRTBJRG9nWENKVGRXSnFaV04wVEc5allYUnBiMjVjSWl3Z0lDQWdJQ0FnSUNBdkx5Qk1iMk5oZEdsdmJpQnZaaUJ6ZFdKcVpXTjBJR2x1SUdsdFlXZGxYRzRnSUNBZ0lDQWdJREI0UVRJeE5TQTZJRndpUlhod2IzTjFjbVZKYm1SbGVGd2lMQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1JYaHdiM04xY21VZ2FXNWtaWGdnYzJWc1pXTjBaV1FnYjI0Z1kyRnRaWEpoWEc0Z0lDQWdJQ0FnSURCNFFUSXhOeUE2SUZ3aVUyVnVjMmx1WjAxbGRHaHZaRndpTENBZ0lDQWdJQ0FnSUNBZ0x5OGdTVzFoWjJVZ2MyVnVjMjl5SUhSNWNHVmNiaUFnSUNBZ0lDQWdNSGhCTXpBd0lEb2dYQ0pHYVd4bFUyOTFjbU5sWENJc0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCSmJXRm5aU0J6YjNWeVkyVWdLRE1nUFQwZ1JGTkRLVnh1SUNBZ0lDQWdJQ0F3ZUVFek1ERWdPaUJjSWxOalpXNWxWSGx3WlZ3aUxDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklGTmpaVzVsSUhSNWNHVWdLREVnUFQwZ1pHbHlaV04wYkhrZ2NHaHZkRzluY21Gd2FHVmtLVnh1SUNBZ0lDQWdJQ0F3ZUVFek1ESWdPaUJjSWtOR1FWQmhkSFJsY201Y0lpd2dJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklFTnZiRzl5SUdacGJIUmxjaUJoY25KaGVTQm5aVzl0WlhSeWFXTWdjR0YwZEdWeWJseHVJQ0FnSUNBZ0lDQXdlRUUwTURFZ09pQmNJa04xYzNSdmJWSmxibVJsY21Wa1hDSXNJQ0FnSUNBZ0lDQWdJQzh2SUZOd1pXTnBZV3dnY0hKdlkyVnpjMmx1WjF4dUlDQWdJQ0FnSUNBd2VFRTBNRElnT2lCY0lrVjRjRzl6ZFhKbFRXOWtaVndpTENBZ0lDQWdJQ0FnSUNBZ0lDOHZJRVY0Y0c5emRYSmxJRzF2WkdWY2JpQWdJQ0FnSUNBZ01IaEJOREF6SURvZ1hDSlhhR2wwWlVKaGJHRnVZMlZjSWl3Z0lDQWdJQ0FnSUNBZ0lDQXZMeUF4SUQwZ1lYVjBieUIzYUdsMFpTQmlZV3hoYm1ObExDQXlJRDBnYldGdWRXRnNYRzRnSUNBZ0lDQWdJREI0UVRRd05DQTZJRndpUkdsbmFYUmhiRnB2YjIxU1lYUnBiMjVjSWl3Z0lDQWdJQ0FnTHk4Z1JHbG5hWFJoYkNCNmIyOXRJSEpoZEdsdlhHNGdJQ0FnSUNBZ0lEQjRRVFF3TlNBNklGd2lSbTlqWVd4TVpXNW5kR2hKYmpNMWJXMUdhV3h0WENJc0lDQWdMeThnUlhGMWFYWmhiR1Z1ZENCbWIyRmpiQ0JzWlc1bmRHZ2dZWE56ZFcxcGJtY2dNelZ0YlNCbWFXeHRJR05oYldWeVlTQW9hVzRnYlcwcFhHNGdJQ0FnSUNBZ0lEQjRRVFF3TmlBNklGd2lVMk5sYm1WRFlYQjBkWEpsVkhsd1pWd2lMQ0FnSUNBZ0lDQWdMeThnVkhsd1pTQnZaaUJ6WTJWdVpWeHVJQ0FnSUNBZ0lDQXdlRUUwTURjZ09pQmNJa2RoYVc1RGIyNTBjbTlzWENJc0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUVSbFozSmxaU0J2WmlCdmRtVnlZV3hzSUdsdFlXZGxJR2RoYVc0Z1lXUnFkWE4wYldWdWRGeHVJQ0FnSUNBZ0lDQXdlRUUwTURnZ09pQmNJa052Ym5SeVlYTjBYQ0lzSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUVScGNtVmpkR2x2YmlCdlppQmpiMjUwY21GemRDQndjbTlqWlhOemFXNW5JR0Z3Y0d4cFpXUWdZbmtnWTJGdFpYSmhYRzRnSUNBZ0lDQWdJREI0UVRRd09TQTZJRndpVTJGMGRYSmhkR2x2Ymx3aUxDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1JHbHlaV04wYVc5dUlHOW1JSE5oZEhWeVlYUnBiMjRnY0hKdlkyVnpjMmx1WnlCaGNIQnNhV1ZrSUdKNUlHTmhiV1Z5WVZ4dUlDQWdJQ0FnSUNBd2VFRTBNRUVnT2lCY0lsTm9ZWEp3Ym1WemMxd2lMQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRVJwY21WamRHbHZiaUJ2WmlCemFHRnljRzVsYzNNZ2NISnZZMlZ6YzJsdVp5QmhjSEJzYVdWa0lHSjVJR05oYldWeVlWeHVJQ0FnSUNBZ0lDQXdlRUUwTUVJZ09pQmNJa1JsZG1salpWTmxkSFJwYm1kRVpYTmpjbWx3ZEdsdmJsd2lMQ0FnSUNBdkwxeHVJQ0FnSUNBZ0lDQXdlRUUwTUVNZ09pQmNJbE4xWW1wbFkzUkVhWE4wWVc1alpWSmhibWRsWENJc0lDQWdJQzh2SUVScGMzUmhibU5sSUhSdklITjFZbXBsWTNSY2JseHVJQ0FnSUNBZ0lDQXZMeUJ2ZEdobGNpQjBZV2R6WEc0Z0lDQWdJQ0FnSURCNFFUQXdOU0E2SUZ3aVNXNTBaWEp2Y0dWeVlXSnBiR2wwZVVsR1JGQnZhVzUwWlhKY0lpeGNiaUFnSUNBZ0lDQWdNSGhCTkRJd0lEb2dYQ0pKYldGblpWVnVhWEYxWlVsRVhDSWdJQ0FnSUNBZ0lDQWdJQ0F2THlCSlpHVnVkR2xtYVdWeUlHRnpjMmxuYm1Wa0lIVnVhWEYxWld4NUlIUnZJR1ZoWTJnZ2FXMWhaMlZjYmlBZ0lDQjlPMXh1WEc0Z0lDQWdkbUZ5SUZScFptWlVZV2R6SUQwZ1JWaEpSaTVVYVdabVZHRm5jeUE5SUh0Y2JpQWdJQ0FnSUNBZ01IZ3dNVEF3SURvZ1hDSkpiV0ZuWlZkcFpIUm9YQ0lzWEc0Z0lDQWdJQ0FnSURCNE1ERXdNU0E2SUZ3aVNXMWhaMlZJWldsbmFIUmNJaXhjYmlBZ0lDQWdJQ0FnTUhnNE56WTVJRG9nWENKRmVHbG1TVVpFVUc5cGJuUmxjbHdpTEZ4dUlDQWdJQ0FnSUNBd2VEZzRNalVnT2lCY0lrZFFVMGx1Wm05SlJrUlFiMmx1ZEdWeVhDSXNYRzRnSUNBZ0lDQWdJREI0UVRBd05TQTZJRndpU1c1MFpYSnZjR1Z5WVdKcGJHbDBlVWxHUkZCdmFXNTBaWEpjSWl4Y2JpQWdJQ0FnSUNBZ01IZ3dNVEF5SURvZ1hDSkNhWFJ6VUdWeVUyRnRjR3hsWENJc1hHNGdJQ0FnSUNBZ0lEQjRNREV3TXlBNklGd2lRMjl0Y0hKbGMzTnBiMjVjSWl4Y2JpQWdJQ0FnSUNBZ01IZ3dNVEEySURvZ1hDSlFhRzkwYjIxbGRISnBZMGx1ZEdWeWNISmxkR0YwYVc5dVhDSXNYRzRnSUNBZ0lDQWdJREI0TURFeE1pQTZJRndpVDNKcFpXNTBZWFJwYjI1Y0lpeGNiaUFnSUNBZ0lDQWdNSGd3TVRFMUlEb2dYQ0pUWVcxd2JHVnpVR1Z5VUdsNFpXeGNJaXhjYmlBZ0lDQWdJQ0FnTUhnd01URkRJRG9nWENKUWJHRnVZWEpEYjI1bWFXZDFjbUYwYVc5dVhDSXNYRzRnSUNBZ0lDQWdJREI0TURJeE1pQTZJRndpV1VOaVEzSlRkV0pUWVcxd2JHbHVaMXdpTEZ4dUlDQWdJQ0FnSUNBd2VEQXlNVE1nT2lCY0lsbERZa055VUc5emFYUnBiMjVwYm1kY0lpeGNiaUFnSUNBZ0lDQWdNSGd3TVRGQklEb2dYQ0pZVW1WemIyeDFkR2x2Ymx3aUxGeHVJQ0FnSUNBZ0lDQXdlREF4TVVJZ09pQmNJbGxTWlhOdmJIVjBhVzl1WENJc1hHNGdJQ0FnSUNBZ0lEQjRNREV5T0NBNklGd2lVbVZ6YjJ4MWRHbHZibFZ1YVhSY0lpeGNiaUFnSUNBZ0lDQWdNSGd3TVRFeElEb2dYQ0pUZEhKcGNFOW1abk5sZEhOY0lpeGNiaUFnSUNBZ0lDQWdNSGd3TVRFMklEb2dYQ0pTYjNkelVHVnlVM1J5YVhCY0lpeGNiaUFnSUNBZ0lDQWdNSGd3TVRFM0lEb2dYQ0pUZEhKcGNFSjVkR1ZEYjNWdWRITmNJaXhjYmlBZ0lDQWdJQ0FnTUhnd01qQXhJRG9nWENKS1VFVkhTVzUwWlhKamFHRnVaMlZHYjNKdFlYUmNJaXhjYmlBZ0lDQWdJQ0FnTUhnd01qQXlJRG9nWENKS1VFVkhTVzUwWlhKamFHRnVaMlZHYjNKdFlYUk1aVzVuZEdoY0lpeGNiaUFnSUNBZ0lDQWdNSGd3TVRKRUlEb2dYQ0pVY21GdWMyWmxja1oxYm1OMGFXOXVYQ0lzWEc0Z0lDQWdJQ0FnSURCNE1ERXpSU0E2SUZ3aVYyaHBkR1ZRYjJsdWRGd2lMRnh1SUNBZ0lDQWdJQ0F3ZURBeE0wWWdPaUJjSWxCeWFXMWhjbmxEYUhKdmJXRjBhV05wZEdsbGMxd2lMRnh1SUNBZ0lDQWdJQ0F3ZURBeU1URWdPaUJjSWxsRFlrTnlRMjlsWm1acFkybGxiblJ6WENJc1hHNGdJQ0FnSUNBZ0lEQjRNREl4TkNBNklGd2lVbVZtWlhKbGJtTmxRbXhoWTJ0WGFHbDBaVndpTEZ4dUlDQWdJQ0FnSUNBd2VEQXhNeklnT2lCY0lrUmhkR1ZVYVcxbFhDSXNYRzRnSUNBZ0lDQWdJREI0TURFd1JTQTZJRndpU1cxaFoyVkVaWE5qY21sd2RHbHZibHdpTEZ4dUlDQWdJQ0FnSUNBd2VEQXhNRVlnT2lCY0lrMWhhMlZjSWl4Y2JpQWdJQ0FnSUNBZ01IZ3dNVEV3SURvZ1hDSk5iMlJsYkZ3aUxGeHVJQ0FnSUNBZ0lDQXdlREF4TXpFZ09pQmNJbE52Wm5SM1lYSmxYQ0lzWEc0Z0lDQWdJQ0FnSURCNE1ERXpRaUE2SUZ3aVFYSjBhWE4wWENJc1hHNGdJQ0FnSUNBZ0lEQjRPREk1T0NBNklGd2lRMjl3ZVhKcFoyaDBYQ0pjYmlBZ0lDQjlPMXh1WEc0Z0lDQWdkbUZ5SUVkUVUxUmhaM01nUFNCRldFbEdMa2RRVTFSaFozTWdQU0I3WEc0Z0lDQWdJQ0FnSURCNE1EQXdNQ0E2SUZ3aVIxQlRWbVZ5YzJsdmJrbEVYQ0lzWEc0Z0lDQWdJQ0FnSURCNE1EQXdNU0E2SUZ3aVIxQlRUR0YwYVhSMVpHVlNaV1pjSWl4Y2JpQWdJQ0FnSUNBZ01IZ3dNREF5SURvZ1hDSkhVRk5NWVhScGRIVmtaVndpTEZ4dUlDQWdJQ0FnSUNBd2VEQXdNRE1nT2lCY0lrZFFVMHh2Ym1kcGRIVmtaVkpsWmx3aUxGeHVJQ0FnSUNBZ0lDQXdlREF3TURRZ09pQmNJa2RRVTB4dmJtZHBkSFZrWlZ3aUxGeHVJQ0FnSUNBZ0lDQXdlREF3TURVZ09pQmNJa2RRVTBGc2RHbDBkV1JsVW1WbVhDSXNYRzRnSUNBZ0lDQWdJREI0TURBd05pQTZJRndpUjFCVFFXeDBhWFIxWkdWY0lpeGNiaUFnSUNBZ0lDQWdNSGd3TURBM0lEb2dYQ0pIVUZOVWFXMWxVM1JoYlhCY0lpeGNiaUFnSUNBZ0lDQWdNSGd3TURBNElEb2dYQ0pIVUZOVFlYUmxiR3hwZEdWelhDSXNYRzRnSUNBZ0lDQWdJREI0TURBd09TQTZJRndpUjFCVFUzUmhkSFZ6WENJc1hHNGdJQ0FnSUNBZ0lEQjRNREF3UVNBNklGd2lSMUJUVFdWaGMzVnlaVTF2WkdWY0lpeGNiaUFnSUNBZ0lDQWdNSGd3TURCQ0lEb2dYQ0pIVUZORVQxQmNJaXhjYmlBZ0lDQWdJQ0FnTUhnd01EQkRJRG9nWENKSFVGTlRjR1ZsWkZKbFpsd2lMRnh1SUNBZ0lDQWdJQ0F3ZURBd01FUWdPaUJjSWtkUVUxTndaV1ZrWENJc1hHNGdJQ0FnSUNBZ0lEQjRNREF3UlNBNklGd2lSMUJUVkhKaFkydFNaV1pjSWl4Y2JpQWdJQ0FnSUNBZ01IZ3dNREJHSURvZ1hDSkhVRk5VY21GamExd2lMRnh1SUNBZ0lDQWdJQ0F3ZURBd01UQWdPaUJjSWtkUVUwbHRaMFJwY21WamRHbHZibEpsWmx3aUxGeHVJQ0FnSUNBZ0lDQXdlREF3TVRFZ09pQmNJa2RRVTBsdFowUnBjbVZqZEdsdmJsd2lMRnh1SUNBZ0lDQWdJQ0F3ZURBd01USWdPaUJjSWtkUVUwMWhjRVJoZEhWdFhDSXNYRzRnSUNBZ0lDQWdJREI0TURBeE15QTZJRndpUjFCVFJHVnpkRXhoZEdsMGRXUmxVbVZtWENJc1hHNGdJQ0FnSUNBZ0lEQjRNREF4TkNBNklGd2lSMUJUUkdWemRFeGhkR2wwZFdSbFhDSXNYRzRnSUNBZ0lDQWdJREI0TURBeE5TQTZJRndpUjFCVFJHVnpkRXh2Ym1kcGRIVmtaVkpsWmx3aUxGeHVJQ0FnSUNBZ0lDQXdlREF3TVRZZ09pQmNJa2RRVTBSbGMzUk1iMjVuYVhSMVpHVmNJaXhjYmlBZ0lDQWdJQ0FnTUhnd01ERTNJRG9nWENKSFVGTkVaWE4wUW1WaGNtbHVaMUpsWmx3aUxGeHVJQ0FnSUNBZ0lDQXdlREF3TVRnZ09pQmNJa2RRVTBSbGMzUkNaV0Z5YVc1blhDSXNYRzRnSUNBZ0lDQWdJREI0TURBeE9TQTZJRndpUjFCVFJHVnpkRVJwYzNSaGJtTmxVbVZtWENJc1hHNGdJQ0FnSUNBZ0lEQjRNREF4UVNBNklGd2lSMUJUUkdWemRFUnBjM1JoYm1ObFhDSXNYRzRnSUNBZ0lDQWdJREI0TURBeFFpQTZJRndpUjFCVFVISnZZMlZ6YzJsdVowMWxkR2h2WkZ3aUxGeHVJQ0FnSUNBZ0lDQXdlREF3TVVNZ09pQmNJa2RRVTBGeVpXRkpibVp2Y20xaGRHbHZibHdpTEZ4dUlDQWdJQ0FnSUNBd2VEQXdNVVFnT2lCY0lrZFFVMFJoZEdWVGRHRnRjRndpTEZ4dUlDQWdJQ0FnSUNBd2VEQXdNVVVnT2lCY0lrZFFVMFJwWm1abGNtVnVkR2xoYkZ3aVhHNGdJQ0FnZlR0Y2JseHVJQ0FnSUNBdkx5QkZXRWxHSURJdU15QlRjR1ZqWEc0Z0lDQWdkbUZ5SUVsR1JERlVZV2R6SUQwZ1JWaEpSaTVKUmtReFZHRm5jeUE5SUh0Y2JpQWdJQ0FnSUNBZ01IZ3dNVEF3T2lCY0lrbHRZV2RsVjJsa2RHaGNJaXhjYmlBZ0lDQWdJQ0FnTUhnd01UQXhPaUJjSWtsdFlXZGxTR1ZwWjJoMFhDSXNYRzRnSUNBZ0lDQWdJREI0TURFd01qb2dYQ0pDYVhSelVHVnlVMkZ0Y0d4bFhDSXNYRzRnSUNBZ0lDQWdJREI0TURFd016b2dYQ0pEYjIxd2NtVnpjMmx2Ymx3aUxGeHVJQ0FnSUNBZ0lDQXdlREF4TURZNklGd2lVR2h2ZEc5dFpYUnlhV05KYm5SbGNuQnlaWFJoZEdsdmJsd2lMRnh1SUNBZ0lDQWdJQ0F3ZURBeE1URTZJRndpVTNSeWFYQlBabVp6WlhSelhDSXNYRzRnSUNBZ0lDQWdJREI0TURFeE1qb2dYQ0pQY21sbGJuUmhkR2x2Ymx3aUxGeHVJQ0FnSUNBZ0lDQXdlREF4TVRVNklGd2lVMkZ0Y0d4bGMxQmxjbEJwZUdWc1hDSXNYRzRnSUNBZ0lDQWdJREI0TURFeE5qb2dYQ0pTYjNkelVHVnlVM1J5YVhCY0lpeGNiaUFnSUNBZ0lDQWdNSGd3TVRFM09pQmNJbE4wY21sd1FubDBaVU52ZFc1MGMxd2lMRnh1SUNBZ0lDQWdJQ0F3ZURBeE1VRTZJRndpV0ZKbGMyOXNkWFJwYjI1Y0lpeGNiaUFnSUNBZ0lDQWdNSGd3TVRGQ09pQmNJbGxTWlhOdmJIVjBhVzl1WENJc1hHNGdJQ0FnSUNBZ0lEQjRNREV4UXpvZ1hDSlFiR0Z1WVhKRGIyNW1hV2QxY21GMGFXOXVYQ0lzWEc0Z0lDQWdJQ0FnSURCNE1ERXlPRG9nWENKU1pYTnZiSFYwYVc5dVZXNXBkRndpTEZ4dUlDQWdJQ0FnSUNBd2VEQXlNREU2SUZ3aVNuQmxaMGxHVDJabWMyVjBYQ0lzSUNBZ0lDOHZJRmRvWlc0Z2FXMWhaMlVnWm05eWJXRjBJR2x6SUVwUVJVY3NJSFJvYVhNZ2RtRnNkV1VnYzJodmR5QnZabVp6WlhRZ2RHOGdTbEJGUnlCa1lYUmhJSE4wYjNKbFpDNG9ZV3RoSUZ3aVZHaDFiV0p1WVdsc1QyWm1jMlYwWENJZ2IzSWdYQ0pLVUVWSFNXNTBaWEpqYUdGdVoyVkdiM0p0WVhSY0lpbGNiaUFnSUNBZ0lDQWdNSGd3TWpBeU9pQmNJa3B3WldkSlJrSjVkR1ZEYjNWdWRGd2lMQ0F2THlCWGFHVnVJR2x0WVdkbElHWnZjbTFoZENCcGN5QktVRVZITENCMGFHbHpJSFpoYkhWbElITm9iM2R6SUdSaGRHRWdjMmw2WlNCdlppQktVRVZISUdsdFlXZGxJQ2hoYTJFZ1hDSlVhSFZ0WW01aGFXeE1aVzVuZEdoY0lpQnZjaUJjSWtwUVJVZEpiblJsY21Ob1lXNW5aVVp2Y20xaGRFeGxibWQwYUZ3aUtWeHVJQ0FnSUNBZ0lDQXdlREF5TVRFNklGd2lXVU5pUTNKRGIyVm1abWxqYVdWdWRITmNJaXhjYmlBZ0lDQWdJQ0FnTUhnd01qRXlPaUJjSWxsRFlrTnlVM1ZpVTJGdGNHeHBibWRjSWl4Y2JpQWdJQ0FnSUNBZ01IZ3dNakV6T2lCY0lsbERZa055VUc5emFYUnBiMjVwYm1kY0lpeGNiaUFnSUNBZ0lDQWdNSGd3TWpFME9pQmNJbEpsWm1WeVpXNWpaVUpzWVdOclYyaHBkR1ZjSWx4dUlDQWdJSDA3WEc1Y2JpQWdJQ0IyWVhJZ1UzUnlhVzVuVm1Gc2RXVnpJRDBnUlZoSlJpNVRkSEpwYm1kV1lXeDFaWE1nUFNCN1hHNGdJQ0FnSUNBZ0lFVjRjRzl6ZFhKbFVISnZaM0poYlNBNklIdGNiaUFnSUNBZ0lDQWdJQ0FnSURBZ09pQmNJazV2ZENCa1pXWnBibVZrWENJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0F4SURvZ1hDSk5ZVzUxWVd4Y0lpeGNiaUFnSUNBZ0lDQWdJQ0FnSURJZ09pQmNJazV2Y20xaGJDQndjbTluY21GdFhDSXNYRzRnSUNBZ0lDQWdJQ0FnSUNBeklEb2dYQ0pCY0dWeWRIVnlaU0J3Y21sdmNtbDBlVndpTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdOQ0E2SUZ3aVUyaDFkSFJsY2lCd2NtbHZjbWwwZVZ3aUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnTlNBNklGd2lRM0psWVhScGRtVWdjSEp2WjNKaGJWd2lMRnh1SUNBZ0lDQWdJQ0FnSUNBZ05pQTZJRndpUVdOMGFXOXVJSEJ5YjJkeVlXMWNJaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lEY2dPaUJjSWxCdmNuUnlZV2wwSUcxdlpHVmNJaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lEZ2dPaUJjSWt4aGJtUnpZMkZ3WlNCdGIyUmxYQ0pjYmlBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ1RXVjBaWEpwYm1kTmIyUmxJRG9nZTF4dUlDQWdJQ0FnSUNBZ0lDQWdNQ0E2SUZ3aVZXNXJibTkzYmx3aUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnTVNBNklGd2lRWFpsY21GblpWd2lMRnh1SUNBZ0lDQWdJQ0FnSUNBZ01pQTZJRndpUTJWdWRHVnlWMlZwWjJoMFpXUkJkbVZ5WVdkbFhDSXNYRzRnSUNBZ0lDQWdJQ0FnSUNBeklEb2dYQ0pUY0c5MFhDSXNYRzRnSUNBZ0lDQWdJQ0FnSUNBMElEb2dYQ0pOZFd4MGFWTndiM1JjSWl4Y2JpQWdJQ0FnSUNBZ0lDQWdJRFVnT2lCY0lsQmhkSFJsY201Y0lpeGNiaUFnSUNBZ0lDQWdJQ0FnSURZZ09pQmNJbEJoY25ScFlXeGNJaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lESTFOU0E2SUZ3aVQzUm9aWEpjSWx4dUlDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQk1hV2RvZEZOdmRYSmpaU0E2SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJREFnT2lCY0lsVnVhMjV2ZDI1Y0lpeGNiaUFnSUNBZ0lDQWdJQ0FnSURFZ09pQmNJa1JoZVd4cFoyaDBYQ0lzWEc0Z0lDQWdJQ0FnSUNBZ0lDQXlJRG9nWENKR2JIVnZjbVZ6WTJWdWRGd2lMRnh1SUNBZ0lDQWdJQ0FnSUNBZ015QTZJRndpVkhWdVozTjBaVzRnS0dsdVkyRnVaR1Z6WTJWdWRDQnNhV2RvZENsY0lpeGNiaUFnSUNBZ0lDQWdJQ0FnSURRZ09pQmNJa1pzWVhOb1hDSXNYRzRnSUNBZ0lDQWdJQ0FnSUNBNUlEb2dYQ0pHYVc1bElIZGxZWFJvWlhKY0lpeGNiaUFnSUNBZ0lDQWdJQ0FnSURFd0lEb2dYQ0pEYkc5MVpIa2dkMlZoZEdobGNsd2lMRnh1SUNBZ0lDQWdJQ0FnSUNBZ01URWdPaUJjSWxOb1lXUmxYQ0lzWEc0Z0lDQWdJQ0FnSUNBZ0lDQXhNaUE2SUZ3aVJHRjViR2xuYUhRZ1pteDFiM0psYzJObGJuUWdLRVFnTlRjd01DQXRJRGN4TURCTEtWd2lMRnh1SUNBZ0lDQWdJQ0FnSUNBZ01UTWdPaUJjSWtSaGVTQjNhR2wwWlNCbWJIVnZjbVZ6WTJWdWRDQW9UaUEwTmpBd0lDMGdOVFF3TUVzcFhDSXNYRzRnSUNBZ0lDQWdJQ0FnSUNBeE5DQTZJRndpUTI5dmJDQjNhR2wwWlNCbWJIVnZjbVZ6WTJWdWRDQW9WeUF6T1RBd0lDMGdORFV3TUVzcFhDSXNYRzRnSUNBZ0lDQWdJQ0FnSUNBeE5TQTZJRndpVjJocGRHVWdabXgxYjNKbGMyTmxiblFnS0ZkWElETXlNREFnTFNBek56QXdTeWxjSWl4Y2JpQWdJQ0FnSUNBZ0lDQWdJREUzSURvZ1hDSlRkR0Z1WkdGeVpDQnNhV2RvZENCQlhDSXNYRzRnSUNBZ0lDQWdJQ0FnSUNBeE9DQTZJRndpVTNSaGJtUmhjbVFnYkdsbmFIUWdRbHdpTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdNVGtnT2lCY0lsTjBZVzVrWVhKa0lHeHBaMmgwSUVOY0lpeGNiaUFnSUNBZ0lDQWdJQ0FnSURJd0lEb2dYQ0pFTlRWY0lpeGNiaUFnSUNBZ0lDQWdJQ0FnSURJeElEb2dYQ0pFTmpWY0lpeGNiaUFnSUNBZ0lDQWdJQ0FnSURJeUlEb2dYQ0pFTnpWY0lpeGNiaUFnSUNBZ0lDQWdJQ0FnSURJeklEb2dYQ0pFTlRCY0lpeGNiaUFnSUNBZ0lDQWdJQ0FnSURJMElEb2dYQ0pKVTA4Z2MzUjFaR2x2SUhSMWJtZHpkR1Z1WENJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0F5TlRVZ09pQmNJazkwYUdWeVhDSmNiaUFnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnUm14aGMyZ2dPaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXdlREF3TURBZ09pQmNJa1pzWVhOb0lHUnBaQ0J1YjNRZ1ptbHlaVndpTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdNSGd3TURBeElEb2dYQ0pHYkdGemFDQm1hWEpsWkZ3aUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnTUhnd01EQTFJRG9nWENKVGRISnZZbVVnY21WMGRYSnVJR3hwWjJoMElHNXZkQ0JrWlhSbFkzUmxaRndpTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdNSGd3TURBM0lEb2dYQ0pUZEhKdlltVWdjbVYwZFhKdUlHeHBaMmgwSUdSbGRHVmpkR1ZrWENJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0F3ZURBd01Ea2dPaUJjSWtac1lYTm9JR1pwY21Wa0xDQmpiMjF3ZFd4emIzSjVJR1pzWVhOb0lHMXZaR1ZjSWl4Y2JpQWdJQ0FnSUNBZ0lDQWdJREI0TURBd1JDQTZJRndpUm14aGMyZ2dabWx5WldRc0lHTnZiWEIxYkhOdmNua2dabXhoYzJnZ2JXOWtaU3dnY21WMGRYSnVJR3hwWjJoMElHNXZkQ0JrWlhSbFkzUmxaRndpTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdNSGd3TURCR0lEb2dYQ0pHYkdGemFDQm1hWEpsWkN3Z1kyOXRjSFZzYzI5eWVTQm1iR0Z6YUNCdGIyUmxMQ0J5WlhSMWNtNGdiR2xuYUhRZ1pHVjBaV04wWldSY0lpeGNiaUFnSUNBZ0lDQWdJQ0FnSURCNE1EQXhNQ0E2SUZ3aVJteGhjMmdnWkdsa0lHNXZkQ0JtYVhKbExDQmpiMjF3ZFd4emIzSjVJR1pzWVhOb0lHMXZaR1ZjSWl4Y2JpQWdJQ0FnSUNBZ0lDQWdJREI0TURBeE9DQTZJRndpUm14aGMyZ2daR2xrSUc1dmRDQm1hWEpsTENCaGRYUnZJRzF2WkdWY0lpeGNiaUFnSUNBZ0lDQWdJQ0FnSURCNE1EQXhPU0E2SUZ3aVJteGhjMmdnWm1seVpXUXNJR0YxZEc4Z2JXOWtaVndpTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdNSGd3TURGRUlEb2dYQ0pHYkdGemFDQm1hWEpsWkN3Z1lYVjBieUJ0YjJSbExDQnlaWFIxY200Z2JHbG5hSFFnYm05MElHUmxkR1ZqZEdWa1hDSXNYRzRnSUNBZ0lDQWdJQ0FnSUNBd2VEQXdNVVlnT2lCY0lrWnNZWE5vSUdacGNtVmtMQ0JoZFhSdklHMXZaR1VzSUhKbGRIVnliaUJzYVdkb2RDQmtaWFJsWTNSbFpGd2lMRnh1SUNBZ0lDQWdJQ0FnSUNBZ01IZ3dNREl3SURvZ1hDSk9ieUJtYkdGemFDQm1kVzVqZEdsdmJsd2lMRnh1SUNBZ0lDQWdJQ0FnSUNBZ01IZ3dNRFF4SURvZ1hDSkdiR0Z6YUNCbWFYSmxaQ3dnY21Wa0xXVjVaU0J5WldSMVkzUnBiMjRnYlc5a1pWd2lMRnh1SUNBZ0lDQWdJQ0FnSUNBZ01IZ3dNRFExSURvZ1hDSkdiR0Z6YUNCbWFYSmxaQ3dnY21Wa0xXVjVaU0J5WldSMVkzUnBiMjRnYlc5a1pTd2djbVYwZFhKdUlHeHBaMmgwSUc1dmRDQmtaWFJsWTNSbFpGd2lMRnh1SUNBZ0lDQWdJQ0FnSUNBZ01IZ3dNRFEzSURvZ1hDSkdiR0Z6YUNCbWFYSmxaQ3dnY21Wa0xXVjVaU0J5WldSMVkzUnBiMjRnYlc5a1pTd2djbVYwZFhKdUlHeHBaMmgwSUdSbGRHVmpkR1ZrWENJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0F3ZURBd05Ea2dPaUJjSWtac1lYTm9JR1pwY21Wa0xDQmpiMjF3ZFd4emIzSjVJR1pzWVhOb0lHMXZaR1VzSUhKbFpDMWxlV1VnY21Wa2RXTjBhVzl1SUcxdlpHVmNJaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lEQjRNREEwUkNBNklGd2lSbXhoYzJnZ1ptbHlaV1FzSUdOdmJYQjFiSE52Y25rZ1pteGhjMmdnYlc5a1pTd2djbVZrTFdWNVpTQnlaV1IxWTNScGIyNGdiVzlrWlN3Z2NtVjBkWEp1SUd4cFoyaDBJRzV2ZENCa1pYUmxZM1JsWkZ3aUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnTUhnd01EUkdJRG9nWENKR2JHRnphQ0JtYVhKbFpDd2dZMjl0Y0hWc2MyOXllU0JtYkdGemFDQnRiMlJsTENCeVpXUXRaWGxsSUhKbFpIVmpkR2x2YmlCdGIyUmxMQ0J5WlhSMWNtNGdiR2xuYUhRZ1pHVjBaV04wWldSY0lpeGNiaUFnSUNBZ0lDQWdJQ0FnSURCNE1EQTFPU0E2SUZ3aVJteGhjMmdnWm1seVpXUXNJR0YxZEc4Z2JXOWtaU3dnY21Wa0xXVjVaU0J5WldSMVkzUnBiMjRnYlc5a1pWd2lMRnh1SUNBZ0lDQWdJQ0FnSUNBZ01IZ3dNRFZFSURvZ1hDSkdiR0Z6YUNCbWFYSmxaQ3dnWVhWMGJ5QnRiMlJsTENCeVpYUjFjbTRnYkdsbmFIUWdibTkwSUdSbGRHVmpkR1ZrTENCeVpXUXRaWGxsSUhKbFpIVmpkR2x2YmlCdGIyUmxYQ0lzWEc0Z0lDQWdJQ0FnSUNBZ0lDQXdlREF3TlVZZ09pQmNJa1pzWVhOb0lHWnBjbVZrTENCaGRYUnZJRzF2WkdVc0lISmxkSFZ5YmlCc2FXZG9kQ0JrWlhSbFkzUmxaQ3dnY21Wa0xXVjVaU0J5WldSMVkzUnBiMjRnYlc5a1pWd2lYRzRnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUZObGJuTnBibWROWlhSb2IyUWdPaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXhJRG9nWENKT2IzUWdaR1ZtYVc1bFpGd2lMRnh1SUNBZ0lDQWdJQ0FnSUNBZ01pQTZJRndpVDI1bExXTm9hWEFnWTI5c2IzSWdZWEpsWVNCelpXNXpiM0pjSWl4Y2JpQWdJQ0FnSUNBZ0lDQWdJRE1nT2lCY0lsUjNieTFqYUdsd0lHTnZiRzl5SUdGeVpXRWdjMlZ1YzI5eVhDSXNYRzRnSUNBZ0lDQWdJQ0FnSUNBMElEb2dYQ0pVYUhKbFpTMWphR2x3SUdOdmJHOXlJR0Z5WldFZ2MyVnVjMjl5WENJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0ExSURvZ1hDSkRiMnh2Y2lCelpYRjFaVzUwYVdGc0lHRnlaV0VnYzJWdWMyOXlYQ0lzWEc0Z0lDQWdJQ0FnSUNBZ0lDQTNJRG9nWENKVWNtbHNhVzVsWVhJZ2MyVnVjMjl5WENJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0E0SURvZ1hDSkRiMnh2Y2lCelpYRjFaVzUwYVdGc0lHeHBibVZoY2lCelpXNXpiM0pjSWx4dUlDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQlRZMlZ1WlVOaGNIUjFjbVZVZVhCbElEb2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ01DQTZJRndpVTNSaGJtUmhjbVJjSWl4Y2JpQWdJQ0FnSUNBZ0lDQWdJREVnT2lCY0lreGhibVJ6WTJGd1pWd2lMRnh1SUNBZ0lDQWdJQ0FnSUNBZ01pQTZJRndpVUc5eWRISmhhWFJjSWl4Y2JpQWdJQ0FnSUNBZ0lDQWdJRE1nT2lCY0lrNXBaMmgwSUhOalpXNWxYQ0pjYmlBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ1UyTmxibVZVZVhCbElEb2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ01TQTZJRndpUkdseVpXTjBiSGtnY0dodmRHOW5jbUZ3YUdWa1hDSmNiaUFnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnUTNWemRHOXRVbVZ1WkdWeVpXUWdPaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXdJRG9nWENKT2IzSnRZV3dnY0hKdlkyVnpjMXdpTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdNU0E2SUZ3aVEzVnpkRzl0SUhCeWIyTmxjM05jSWx4dUlDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQlhhR2wwWlVKaGJHRnVZMlVnT2lCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F3SURvZ1hDSkJkWFJ2SUhkb2FYUmxJR0poYkdGdVkyVmNJaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lERWdPaUJjSWsxaGJuVmhiQ0IzYUdsMFpTQmlZV3hoYm1ObFhDSmNiaUFnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnUjJGcGJrTnZiblJ5YjJ3Z09pQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBd0lEb2dYQ0pPYjI1bFhDSXNYRzRnSUNBZ0lDQWdJQ0FnSUNBeElEb2dYQ0pNYjNjZ1oyRnBiaUIxY0Z3aUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnTWlBNklGd2lTR2xuYUNCbllXbHVJSFZ3WENJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0F6SURvZ1hDSk1iM2NnWjJGcGJpQmtiM2R1WENJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0EwSURvZ1hDSklhV2RvSUdkaGFXNGdaRzkzYmx3aVhHNGdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJRU52Ym5SeVlYTjBJRG9nZTF4dUlDQWdJQ0FnSUNBZ0lDQWdNQ0E2SUZ3aVRtOXliV0ZzWENJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0F4SURvZ1hDSlRiMlowWENJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0F5SURvZ1hDSklZWEprWENKY2JpQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdVMkYwZFhKaGRHbHZiaUE2SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJREFnT2lCY0lrNXZjbTFoYkZ3aUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnTVNBNklGd2lURzkzSUhOaGRIVnlZWFJwYjI1Y0lpeGNiaUFnSUNBZ0lDQWdJQ0FnSURJZ09pQmNJa2hwWjJnZ2MyRjBkWEpoZEdsdmJsd2lYRzRnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUZOb1lYSndibVZ6Y3lBNklIdGNiaUFnSUNBZ0lDQWdJQ0FnSURBZ09pQmNJazV2Y20xaGJGd2lMRnh1SUNBZ0lDQWdJQ0FnSUNBZ01TQTZJRndpVTI5bWRGd2lMRnh1SUNBZ0lDQWdJQ0FnSUNBZ01pQTZJRndpU0dGeVpGd2lYRzRnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUZOMVltcGxZM1JFYVhOMFlXNWpaVkpoYm1kbElEb2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ01DQTZJRndpVlc1cmJtOTNibHdpTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdNU0E2SUZ3aVRXRmpjbTljSWl4Y2JpQWdJQ0FnSUNBZ0lDQWdJRElnT2lCY0lrTnNiM05sSUhacFpYZGNJaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lETWdPaUJjSWtScGMzUmhiblFnZG1sbGQxd2lYRzRnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUVacGJHVlRiM1Z5WTJVZ09pQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBeklEb2dYQ0pFVTBOY0lseHVJQ0FnSUNBZ0lDQjlMRnh1WEc0Z0lDQWdJQ0FnSUVOdmJYQnZibVZ1ZEhNZ09pQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBd0lEb2dYQ0pjSWl4Y2JpQWdJQ0FnSUNBZ0lDQWdJREVnT2lCY0lsbGNJaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lESWdPaUJjSWtOaVhDSXNYRzRnSUNBZ0lDQWdJQ0FnSUNBeklEb2dYQ0pEY2x3aUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnTkNBNklGd2lVbHdpTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdOU0E2SUZ3aVIxd2lMRnh1SUNBZ0lDQWdJQ0FnSUNBZ05pQTZJRndpUWx3aVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOU8xeHVYRzRnSUNBZ1puVnVZM1JwYjI0Z1lXUmtSWFpsYm5Rb1pXeGxiV1Z1ZEN3Z1pYWmxiblFzSUdoaGJtUnNaWElwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLR1ZzWlcxbGJuUXVZV1JrUlhabGJuUk1hWE4wWlc1bGNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1pXeGxiV1Z1ZEM1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0dWMlpXNTBMQ0JvWVc1a2JHVnlMQ0JtWVd4elpTazdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvWld4bGJXVnVkQzVoZEhSaFkyaEZkbVZ1ZENrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWld4bGJXVnVkQzVoZEhSaFkyaEZkbVZ1ZENoY0ltOXVYQ0lnS3lCbGRtVnVkQ3dnYUdGdVpHeGxjaWs3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0JtZFc1amRHbHZiaUJwYldGblpVaGhjMFJoZEdFb2FXMW5LU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUFoSVNocGJXY3VaWGhwWm1SaGRHRXBPMXh1SUNBZ0lIMWNibHh1WEc0Z0lDQWdablZ1WTNScGIyNGdZbUZ6WlRZMFZHOUJjbkpoZVVKMVptWmxjaWhpWVhObE5qUXNJR052Ym5SbGJuUlVlWEJsS1NCN1hHNGdJQ0FnSUNBZ0lHTnZiblJsYm5SVWVYQmxJRDBnWTI5dWRHVnVkRlI1Y0dVZ2ZId2dZbUZ6WlRZMExtMWhkR05vS0M5ZVpHRjBZVnhjT2loYlhseGNPMTByS1Z4Y08ySmhjMlUyTkN3dmJXa3BXekZkSUh4OElDY25PeUF2THlCbExtY3VJQ2RrWVhSaE9tbHRZV2RsTDJwd1pXYzdZbUZ6WlRZMExDNHVMaWNnUFQ0Z0oybHRZV2RsTDJwd1pXY25YRzRnSUNBZ0lDQWdJR0poYzJVMk5DQTlJR0poYzJVMk5DNXlaWEJzWVdObEtDOWVaR0YwWVZ4Y09paGJYbHhjTzEwcktWeGNPMkpoYzJVMk5Dd3ZaMjFwTENBbkp5azdYRzRnSUNBZ0lDQWdJSFpoY2lCaWFXNWhjbmtnUFNCaGRHOWlLR0poYzJVMk5DazdYRzRnSUNBZ0lDQWdJSFpoY2lCc1pXNGdQU0JpYVc1aGNua3ViR1Z1WjNSb08xeHVJQ0FnSUNBZ0lDQjJZWElnWW5WbVptVnlJRDBnYm1WM0lFRnljbUY1UW5WbVptVnlLR3hsYmlrN1hHNGdJQ0FnSUNBZ0lIWmhjaUIyYVdWM0lEMGdibVYzSUZWcGJuUTRRWEp5WVhrb1luVm1abVZ5S1R0Y2JpQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQnNaVzQ3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtbGxkMXRwWFNBOUlHSnBibUZ5ZVM1amFHRnlRMjlrWlVGMEtHa3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJpZFdabVpYSTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1puVnVZM1JwYjI0Z2IySnFaV04wVlZKTVZHOUNiRzlpS0hWeWJDd2dZMkZzYkdKaFkyc3BJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHaDBkSEFnUFNCdVpYY2dXRTFNU0hSMGNGSmxjWFZsYzNRb0tUdGNiaUFnSUNBZ0lDQWdhSFIwY0M1dmNHVnVLRndpUjBWVVhDSXNJSFZ5YkN3Z2RISjFaU2s3WEc0Z0lDQWdJQ0FnSUdoMGRIQXVjbVZ6Y0c5dWMyVlVlWEJsSUQwZ1hDSmliRzlpWENJN1hHNGdJQ0FnSUNBZ0lHaDBkSEF1YjI1c2IyRmtJRDBnWm5WdVkzUnBiMjRvWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11YzNSaGRIVnpJRDA5SURJd01DQjhmQ0IwYUdsekxuTjBZWFIxY3lBOVBUMGdNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGJHeGlZV05yS0hSb2FYTXVjbVZ6Y0c5dWMyVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdJQ0JvZEhSd0xuTmxibVFvS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JtZFc1amRHbHZiaUJuWlhSSmJXRm5aVVJoZEdFb2FXMW5MQ0JqWVd4c1ltRmpheWtnZTF4dUlDQWdJQ0FnSUNCbWRXNWpkR2x2YmlCb1lXNWtiR1ZDYVc1aGNubEdhV3hsS0dKcGJrWnBiR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCa1lYUmhJRDBnWm1sdVpFVllTVVpwYmtwUVJVY29ZbWx1Um1sc1pTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCcGJXY3VaWGhwWm1SaGRHRWdQU0JrWVhSaElIeDhJSHQ5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdsd2RHTmtZWFJoSUQwZ1ptbHVaRWxRVkVOcGJrcFFSVWNvWW1sdVJtbHNaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBiV2N1YVhCMFkyUmhkR0VnUFNCcGNIUmpaR0YwWVNCOGZDQjdmVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hGV0VsR0xtbHpXRzF3Ulc1aFlteGxaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlIaHRjR1JoZEdFOUlHWnBibVJZVFZCcGJrcFFSVWNvWW1sdVJtbHNaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwYldjdWVHMXdaR0YwWVNBOUlIaHRjR1JoZEdFZ2ZId2dlMzA3SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1kyRnNiR0poWTJzcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZV3hzWW1GamF5NWpZV3hzS0dsdFp5azdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0JwWmlBb2FXMW5Mbk55WXlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDOWVaR0YwWVZ4Y09pOXBMblJsYzNRb2FXMW5Mbk55WXlrcElIc2dMeThnUkdGMFlTQlZVa2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1lYSnlZWGxDZFdabVpYSWdQU0JpWVhObE5qUlViMEZ5Y21GNVFuVm1abVZ5S0dsdFp5NXpjbU1wTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdoaGJtUnNaVUpwYm1GeWVVWnBiR1VvWVhKeVlYbENkV1ptWlhJcE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tDOWVZbXh2WWx4Y09pOXBMblJsYzNRb2FXMW5Mbk55WXlrcElIc2dMeThnVDJKcVpXTjBJRlZTVEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQm1hV3hsVW1WaFpHVnlJRDBnYm1WM0lFWnBiR1ZTWldGa1pYSW9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYVd4bFVtVmhaR1Z5TG05dWJHOWhaQ0E5SUdaMWJtTjBhVzl1S0dVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYUdGdVpHeGxRbWx1WVhKNVJtbHNaU2hsTG5SaGNtZGxkQzV5WlhOMWJIUXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYjJKcVpXTjBWVkpNVkc5Q2JHOWlLR2x0Wnk1emNtTXNJR1oxYm1OMGFXOXVJQ2hpYkc5aUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdacGJHVlNaV0ZrWlhJdWNtVmhaRUZ6UVhKeVlYbENkV1ptWlhJb1lteHZZaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCb2RIUndJRDBnYm1WM0lGaE5URWgwZEhCU1pYRjFaWE4wS0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FIUjBjQzV2Ym14dllXUWdQU0JtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSb2FYTXVjM1JoZEhWeklEMDlJREl3TUNCOGZDQjBhR2x6TG5OMFlYUjFjeUE5UFQwZ01Da2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhR0Z1Wkd4bFFtbHVZWEo1Um1sc1pTaG9kSFJ3TG5KbGMzQnZibk5sS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9jbTkzSUZ3aVEyOTFiR1FnYm05MElHeHZZV1FnYVcxaFoyVmNJanRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JvZEhSd0lEMGdiblZzYkR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHaDBkSEF1YjNCbGJpaGNJa2RGVkZ3aUxDQnBiV2N1YzNKakxDQjBjblZsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCb2RIUndMbkpsYzNCdmJuTmxWSGx3WlNBOUlGd2lZWEp5WVhsaWRXWm1aWEpjSWp0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCb2RIUndMbk5sYm1Rb2JuVnNiQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvYzJWc1ppNUdhV3hsVW1WaFpHVnlJQ1ltSUNocGJXY2dhVzV6ZEdGdVkyVnZaaUJ6Wld4bUxrSnNiMklnZkh3Z2FXMW5JR2x1YzNSaGJtTmxiMllnYzJWc1ppNUdhV3hsS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHWnBiR1ZTWldGa1pYSWdQU0J1WlhjZ1JtbHNaVkpsWVdSbGNpZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1ptbHNaVkpsWVdSbGNpNXZibXh2WVdRZ1BTQm1kVzVqZEdsdmJpaGxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHUmxZblZuS1NCamIyNXpiMnhsTG14dlp5aGNJa2R2ZENCbWFXeGxJRzltSUd4bGJtZDBhQ0JjSWlBcklHVXVkR0Z5WjJWMExuSmxjM1ZzZEM1aWVYUmxUR1Z1WjNSb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm9ZVzVrYkdWQ2FXNWhjbmxHYVd4bEtHVXVkR0Z5WjJWMExuSmxjM1ZzZENrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5TzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0JtYVd4bFVtVmhaR1Z5TG5KbFlXUkJjMEZ5Y21GNVFuVm1abVZ5S0dsdFp5azdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQm1kVzVqZEdsdmJpQm1hVzVrUlZoSlJtbHVTbEJGUnlobWFXeGxLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQmtZWFJoVm1sbGR5QTlJRzVsZHlCRVlYUmhWbWxsZHlobWFXeGxLVHRjYmx4dUlDQWdJQ0FnSUNCcFppQW9aR1ZpZFdjcElHTnZibk52YkdVdWJHOW5LRndpUjI5MElHWnBiR1VnYjJZZ2JHVnVaM1JvSUZ3aUlDc2dabWxzWlM1aWVYUmxUR1Z1WjNSb0tUdGNiaUFnSUNBZ0lDQWdhV1lnS0Noa1lYUmhWbWxsZHk1blpYUlZhVzUwT0Nnd0tTQWhQU0F3ZUVaR0tTQjhmQ0FvWkdGMFlWWnBaWGN1WjJWMFZXbHVkRGdvTVNrZ0lUMGdNSGhFT0NrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaGtaV0oxWnlrZ1kyOXVjMjlzWlM1c2IyY29YQ0pPYjNRZ1lTQjJZV3hwWkNCS1VFVkhYQ0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sT3lBdkx5QnViM1FnWVNCMllXeHBaQ0JxY0dWblhHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0IyWVhJZ2IyWm1jMlYwSUQwZ01peGNiaUFnSUNBZ0lDQWdJQ0FnSUd4bGJtZDBhQ0E5SUdacGJHVXVZbmwwWlV4bGJtZDBhQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHMWhjbXRsY2p0Y2JseHVJQ0FnSUNBZ0lDQjNhR2xzWlNBb2IyWm1jMlYwSUR3Z2JHVnVaM1JvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1pHRjBZVlpwWlhjdVoyVjBWV2x1ZERnb2IyWm1jMlYwS1NBaFBTQXdlRVpHS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR1JsWW5WbktTQmpiMjV6YjJ4bExteHZaeWhjSWs1dmRDQmhJSFpoYkdsa0lHMWhjbXRsY2lCaGRDQnZabVp6WlhRZ1hDSWdLeUJ2Wm1aelpYUWdLeUJjSWl3Z1ptOTFibVE2SUZ3aUlDc2daR0YwWVZacFpYY3VaMlYwVldsdWREZ29iMlptYzJWMEtTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sT3lBdkx5QnViM1FnWVNCMllXeHBaQ0J0WVhKclpYSXNJSE52YldWMGFHbHVaeUJwY3lCM2NtOXVaMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCdFlYSnJaWElnUFNCa1lYUmhWbWxsZHk1blpYUlZhVzUwT0NodlptWnpaWFFnS3lBeEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaGtaV0oxWnlrZ1kyOXVjMjlzWlM1c2IyY29iV0Z5YTJWeUtUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdkMlVnWTI5MWJHUWdhVzF3YkdWdFpXNTBJR2hoYm1Sc2FXNW5JR1p2Y2lCdmRHaGxjaUJ0WVhKclpYSnpJR2hsY21Vc1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCaWRYUWdkMlVuY21VZ2IyNXNlU0JzYjI5cmFXNW5JR1p2Y2lBd2VFWkdSVEVnWm05eUlFVllTVVlnWkdGMFlWeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9iV0Z5YTJWeUlEMDlJREl5TlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hrWldKMVp5a2dZMjl1YzI5c1pTNXNiMmNvWENKR2IzVnVaQ0F3ZUVaR1JURWdiV0Z5YTJWeVhDSXBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSEpsWVdSRldFbEdSR0YwWVNoa1lYUmhWbWxsZHl3Z2IyWm1jMlYwSUNzZ05Dd2daR0YwWVZacFpYY3VaMlYwVldsdWRERTJLRzltWm5ObGRDQXJJRElwSUMwZ01pazdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCdlptWnpaWFFnS3owZ01pQXJJR1pwYkdVdVoyVjBVMmh2Y25SQmRDaHZabVp6WlhRck1pd2dkSEoxWlNrN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYjJabWMyVjBJQ3M5SURJZ0t5QmtZWFJoVm1sbGR5NW5aWFJWYVc1ME1UWW9iMlptYzJWMEt6SXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJSDFjYmx4dUlDQWdJR1oxYm1OMGFXOXVJR1pwYm1SSlVGUkRhVzVLVUVWSEtHWnBiR1VwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJR1JoZEdGV2FXVjNJRDBnYm1WM0lFUmhkR0ZXYVdWM0tHWnBiR1VwTzF4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2hrWldKMVp5a2dZMjl1YzI5c1pTNXNiMmNvWENKSGIzUWdabWxzWlNCdlppQnNaVzVuZEdnZ1hDSWdLeUJtYVd4bExtSjVkR1ZNWlc1bmRHZ3BPMXh1SUNBZ0lDQWdJQ0JwWmlBb0tHUmhkR0ZXYVdWM0xtZGxkRlZwYm5RNEtEQXBJQ0U5SURCNFJrWXBJSHg4SUNoa1lYUmhWbWxsZHk1blpYUlZhVzUwT0NneEtTQWhQU0F3ZUVRNEtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR1JsWW5WbktTQmpiMjV6YjJ4bExteHZaeWhjSWs1dmRDQmhJSFpoYkdsa0lFcFFSVWRjSWlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdabUZzYzJVN0lDOHZJRzV2ZENCaElIWmhiR2xrSUdwd1pXZGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUhaaGNpQnZabVp6WlhRZ1BTQXlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2JHVnVaM1JvSUQwZ1ptbHNaUzVpZVhSbFRHVnVaM1JvTzF4dVhHNWNiaUFnSUNBZ0lDQWdkbUZ5SUdselJtbGxiR1JUWldkdFpXNTBVM1JoY25RZ1BTQm1kVzVqZEdsdmJpaGtZWFJoVm1sbGR5d2diMlptYzJWMEtYdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUFvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdGMFlWWnBaWGN1WjJWMFZXbHVkRGdvYjJabWMyVjBLU0E5UFQwZ01IZ3pPQ0FtSmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSaGRHRldhV1YzTG1kbGRGVnBiblE0S0c5bVpuTmxkQ3N4S1NBOVBUMGdNSGcwTWlBbUpseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUmhkR0ZXYVdWM0xtZGxkRlZwYm5RNEtHOW1abk5sZENzeUtTQTlQVDBnTUhnME9TQW1KbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JoZEdGV2FXVjNMbWRsZEZWcGJuUTRLRzltWm5ObGRDc3pLU0E5UFQwZ01IZzBSQ0FtSmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSaGRHRldhV1YzTG1kbGRGVnBiblE0S0c5bVpuTmxkQ3MwS1NBOVBUMGdNSGd3TkNBbUpseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUmhkR0ZXYVdWM0xtZGxkRlZwYm5RNEtHOW1abk5sZENzMUtTQTlQVDBnTUhnd05GeHVJQ0FnSUNBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ2ZUdGNibHh1SUNBZ0lDQWdJQ0IzYUdsc1pTQW9iMlptYzJWMElEd2diR1Z1WjNSb0tTQjdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2dnYVhOR2FXVnNaRk5sWjIxbGJuUlRkR0Z5ZENoa1lYUmhWbWxsZHl3Z2IyWm1jMlYwSUNrcGUxeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnUjJWMElIUm9aU0JzWlc1bmRHZ2diMllnZEdobElHNWhiV1VnYUdWaFpHVnlJQ2gzYUdsamFDQnBjeUJ3WVdSa1pXUWdkRzhnWVc0Z1pYWmxiaUJ1ZFcxaVpYSWdiMllnWW5sMFpYTXBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUc1aGJXVklaV0ZrWlhKTVpXNW5kR2dnUFNCa1lYUmhWbWxsZHk1blpYUlZhVzUwT0NodlptWnpaWFFyTnlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWW9ibUZ0WlVobFlXUmxja3hsYm1kMGFDQWxJRElnSVQwOUlEQXBJRzVoYldWSVpXRmtaWEpNWlc1bmRHZ2dLejBnTVR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QkRhR1ZqYXlCbWIzSWdjSEpsSUhCb2IzUnZjMmh2Y0NBMklHWnZjbTFoZEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUtHNWhiV1ZJWldGa1pYSk1aVzVuZEdnZ1BUMDlJREFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnUVd4M1lYbHpJRFJjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JtRnRaVWhsWVdSbGNreGxibWQwYUNBOUlEUTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlITjBZWEowVDJabWMyVjBJRDBnYjJabWMyVjBJQ3NnT0NBcklHNWhiV1ZJWldGa1pYSk1aVzVuZEdnN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSE5sWTNScGIyNU1aVzVuZEdnZ1BTQmtZWFJoVm1sbGR5NW5aWFJWYVc1ME1UWW9iMlptYzJWMElDc2dOaUFySUc1aGJXVklaV0ZrWlhKTVpXNW5kR2dwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhKbFlXUkpVRlJEUkdGMFlTaG1hV3hsTENCemRHRnlkRTltWm5ObGRDd2djMlZqZEdsdmJreGxibWQwYUNrN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNWNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklFNXZkQ0IwYUdVZ2JXRnlhMlZ5TENCamIyNTBhVzUxWlNCelpXRnlZMmhwYm1kY2JpQWdJQ0FnSUNBZ0lDQWdJRzltWm5ObGRDc3JPMXh1WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUgxY2JpQWdJQ0IyWVhJZ1NYQjBZMFpwWld4a1RXRndJRDBnZTF4dUlDQWdJQ0FnSUNBd2VEYzRJRG9nSjJOaGNIUnBiMjRuTEZ4dUlDQWdJQ0FnSUNBd2VEWkZJRG9nSjJOeVpXUnBkQ2NzWEc0Z0lDQWdJQ0FnSURCNE1Ua2dPaUFuYTJWNWQyOXlaSE1uTEZ4dUlDQWdJQ0FnSUNBd2VETTNJRG9nSjJSaGRHVkRjbVZoZEdWa0p5eGNiaUFnSUNBZ0lDQWdNSGcxTUNBNklDZGllV3hwYm1VbkxGeHVJQ0FnSUNBZ0lDQXdlRFUxSURvZ0oySjViR2x1WlZScGRHeGxKeXhjYmlBZ0lDQWdJQ0FnTUhnM1FTQTZJQ2RqWVhCMGFXOXVWM0pwZEdWeUp5eGNiaUFnSUNBZ0lDQWdNSGcyT1NBNklDZG9aV0ZrYkdsdVpTY3NYRzRnSUNBZ0lDQWdJREI0TnpRZ09pQW5ZMjl3ZVhKcFoyaDBKeXhjYmlBZ0lDQWdJQ0FnTUhnd1JpQTZJQ2RqWVhSbFoyOXllU2RjYmlBZ0lDQjlPMXh1SUNBZ0lHWjFibU4wYVc5dUlISmxZV1JKVUZSRFJHRjBZU2htYVd4bExDQnpkR0Z5ZEU5bVpuTmxkQ3dnYzJWamRHbHZia3hsYm1kMGFDbDdYRzRnSUNBZ0lDQWdJSFpoY2lCa1lYUmhWbWxsZHlBOUlHNWxkeUJFWVhSaFZtbGxkeWhtYVd4bEtUdGNiaUFnSUNBZ0lDQWdkbUZ5SUdSaGRHRWdQU0I3ZlR0Y2JpQWdJQ0FnSUNBZ2RtRnlJR1pwWld4a1ZtRnNkV1VzSUdacFpXeGtUbUZ0WlN3Z1pHRjBZVk5wZW1Vc0lITmxaMjFsYm5SVWVYQmxMQ0J6WldkdFpXNTBVMmw2WlR0Y2JpQWdJQ0FnSUNBZ2RtRnlJSE5sWjIxbGJuUlRkR0Z5ZEZCdmN5QTlJSE4wWVhKMFQyWm1jMlYwTzF4dUlDQWdJQ0FnSUNCM2FHbHNaU2h6WldkdFpXNTBVM1JoY25SUWIzTWdQQ0J6ZEdGeWRFOW1abk5sZEN0elpXTjBhVzl1VEdWdVozUm9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaWhrWVhSaFZtbGxkeTVuWlhSVmFXNTBPQ2h6WldkdFpXNTBVM1JoY25SUWIzTXBJRDA5UFNBd2VERkRJQ1ltSUdSaGRHRldhV1YzTG1kbGRGVnBiblE0S0hObFoyMWxiblJUZEdGeWRGQnZjeXN4S1NBOVBUMGdNSGd3TWlsN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyVm5iV1Z1ZEZSNWNHVWdQU0JrWVhSaFZtbGxkeTVuWlhSVmFXNTBPQ2h6WldkdFpXNTBVM1JoY25SUWIzTXJNaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZb2MyVm5iV1Z1ZEZSNWNHVWdhVzRnU1hCMFkwWnBaV3hrVFdGd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSaGRHRlRhWHBsSUQwZ1pHRjBZVlpwWlhjdVoyVjBTVzUwTVRZb2MyVm5iV1Z1ZEZOMFlYSjBVRzl6S3pNcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6WldkdFpXNTBVMmw2WlNBOUlHUmhkR0ZUYVhwbElDc2dOVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptbGxiR1JPWVcxbElEMGdTWEIwWTBacFpXeGtUV0Z3VzNObFoyMWxiblJVZVhCbFhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm1sbGJHUldZV3gxWlNBOUlHZGxkRk4wY21sdVowWnliMjFFUWloa1lYUmhWbWxsZHl3Z2MyVm5iV1Z1ZEZOMFlYSjBVRzl6S3pVc0lHUmhkR0ZUYVhwbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1EyaGxZMnNnYVdZZ2QyVWdZV3h5WldGa2VTQnpkRzl5WldRZ1lTQjJZV3gxWlNCM2FYUm9JSFJvYVhNZ2JtRnRaVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppaGtZWFJoTG1oaGMwOTNibEJ5YjNCbGNuUjVLR1pwWld4a1RtRnRaU2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklGWmhiSFZsSUdGc2NtVmhaSGtnYzNSdmNtVmtJSGRwZEdnZ2RHaHBjeUJ1WVcxbExDQmpjbVZoZEdVZ2JYVnNkR2wyWVd4MVpTQm1hV1ZzWkZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZb1pHRjBZVnRtYVdWc1pFNWhiV1ZkSUdsdWMzUmhibU5sYjJZZ1FYSnlZWGtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtZWFJoVzJacFpXeGtUbUZ0WlYwdWNIVnphQ2htYVdWc1pGWmhiSFZsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSaGRHRmJabWxsYkdST1lXMWxYU0E5SUZ0a1lYUmhXMlpwWld4a1RtRnRaVjBzSUdacFpXeGtWbUZzZFdWZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdGMFlWdG1hV1ZzWkU1aGJXVmRJRDBnWm1sbGJHUldZV3gxWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2MyVm5iV1Z1ZEZOMFlYSjBVRzl6S3lzN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHUmhkR0U3WEc0Z0lDQWdmVnh1WEc1Y2JseHVJQ0FnSUdaMWJtTjBhVzl1SUhKbFlXUlVZV2R6S0dacGJHVXNJSFJwWm1aVGRHRnlkQ3dnWkdseVUzUmhjblFzSUhOMGNtbHVaM01zSUdKcFowVnVaQ2tnZTF4dUlDQWdJQ0FnSUNCMllYSWdaVzUwY21sbGN5QTlJR1pwYkdVdVoyVjBWV2x1ZERFMktHUnBjbE4wWVhKMExDQWhZbWxuUlc1a0tTeGNiaUFnSUNBZ0lDQWdJQ0FnSUhSaFozTWdQU0I3ZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR1Z1ZEhKNVQyWm1jMlYwTENCMFlXY3NYRzRnSUNBZ0lDQWdJQ0FnSUNCcE8xeHVYRzRnSUNBZ0lDQWdJR1p2Y2lBb2FUMHdPMms4Wlc1MGNtbGxjenRwS3lzcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdWdWRISjVUMlptYzJWMElEMGdaR2x5VTNSaGNuUWdLeUJwS2pFeUlDc2dNanRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUmhaeUE5SUhOMGNtbHVaM05iWm1sc1pTNW5aWFJWYVc1ME1UWW9aVzUwY25sUFptWnpaWFFzSUNGaWFXZEZibVFwWFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaGRHRm5JQ1ltSUdSbFluVm5LU0JqYjI1emIyeGxMbXh2WnloY0lsVnVhMjV2ZDI0Z2RHRm5PaUJjSWlBcklHWnBiR1V1WjJWMFZXbHVkREUyS0dWdWRISjVUMlptYzJWMExDQWhZbWxuUlc1a0tTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCMFlXZHpXM1JoWjEwZ1BTQnlaV0ZrVkdGblZtRnNkV1VvWm1sc1pTd2daVzUwY25sUFptWnpaWFFzSUhScFptWlRkR0Z5ZEN3Z1pHbHlVM1JoY25Rc0lHSnBaMFZ1WkNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUmhaM003WEc0Z0lDQWdmVnh1WEc1Y2JpQWdJQ0JtZFc1amRHbHZiaUJ5WldGa1ZHRm5WbUZzZFdVb1ptbHNaU3dnWlc1MGNubFBabVp6WlhRc0lIUnBabVpUZEdGeWRDd2daR2x5VTNSaGNuUXNJR0pwWjBWdVpDa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2RIbHdaU0E5SUdacGJHVXVaMlYwVldsdWRERTJLR1Z1ZEhKNVQyWm1jMlYwS3pJc0lDRmlhV2RGYm1RcExGeHVJQ0FnSUNBZ0lDQWdJQ0FnYm5WdFZtRnNkV1Z6SUQwZ1ptbHNaUzVuWlhSVmFXNTBNeklvWlc1MGNubFBabVp6WlhRck5Dd2dJV0pwWjBWdVpDa3NYRzRnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVTltWm5ObGRDQTlJR1pwYkdVdVoyVjBWV2x1ZERNeUtHVnVkSEo1VDJabWMyVjBLemdzSUNGaWFXZEZibVFwSUNzZ2RHbG1abE4wWVhKMExGeHVJQ0FnSUNBZ0lDQWdJQ0FnYjJabWMyVjBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnNjeXdnZG1Gc0xDQnVMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2JuVnRaWEpoZEc5eUxDQmtaVzV2YldsdVlYUnZjanRjYmx4dUlDQWdJQ0FnSUNCemQybDBZMmdnS0hSNWNHVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnTVRvZ0x5OGdZbmwwWlN3Z09DMWlhWFFnZFc1emFXZHVaV1FnYVc1MFhHNGdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElEYzZJQzh2SUhWdVpHVm1hVzVsWkN3Z09DMWlhWFFnWW5sMFpTd2dkbUZzZFdVZ1pHVndaVzVrYVc1bklHOXVJR1pwWld4a1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRzUxYlZaaGJIVmxjeUE5UFNBeEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJtYVd4bExtZGxkRlZwYm5RNEtHVnVkSEo1VDJabWMyVjBJQ3NnT0N3Z0lXSnBaMFZ1WkNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiMlptYzJWMElEMGdiblZ0Vm1Gc2RXVnpJRDRnTkNBL0lIWmhiSFZsVDJabWMyVjBJRG9nS0dWdWRISjVUMlptYzJWMElDc2dPQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhiSE1nUFNCYlhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05eUlDaHVQVEE3Ymp4dWRXMVdZV3gxWlhNN2Jpc3JLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVd4elcyNWRJRDBnWm1sc1pTNW5aWFJWYVc1ME9DaHZabVp6WlhRZ0t5QnVLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkbUZzY3p0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdNam9nTHk4Z1lYTmphV2tzSURndFltbDBJR0o1ZEdWY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdlptWnpaWFFnUFNCdWRXMVdZV3gxWlhNZ1BpQTBJRDhnZG1Gc2RXVlBabVp6WlhRZ09pQW9aVzUwY25sUFptWnpaWFFnS3lBNEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1oyVjBVM1J5YVc1blJuSnZiVVJDS0dacGJHVXNJRzltWm5ObGRDd2diblZ0Vm1Gc2RXVnpMVEVwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElETTZJQzh2SUhOb2IzSjBMQ0F4TmlCaWFYUWdhVzUwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHNTFiVlpoYkhWbGN5QTlQU0F4S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQm1hV3hsTG1kbGRGVnBiblF4TmlobGJuUnllVTltWm5ObGRDQXJJRGdzSUNGaWFXZEZibVFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHOW1abk5sZENBOUlHNTFiVlpoYkhWbGN5QStJRElnUHlCMllXeDFaVTltWm5ObGRDQTZJQ2hsYm5SeWVVOW1abk5sZENBcklEZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllXeHpJRDBnVzEwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2lBb2JqMHdPMjQ4Ym5WdFZtRnNkV1Z6TzI0ckt5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZzYzF0dVhTQTlJR1pwYkdVdVoyVjBWV2x1ZERFMktHOW1abk5sZENBcklESXFiaXdnSVdKcFowVnVaQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFpoYkhNN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRFE2SUM4dklHeHZibWNzSURNeUlHSnBkQ0JwYm5SY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9iblZ0Vm1Gc2RXVnpJRDA5SURFcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR1pwYkdVdVoyVjBWV2x1ZERNeUtHVnVkSEo1VDJabWMyVjBJQ3NnT0N3Z0lXSnBaMFZ1WkNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZzY3lBOUlGdGRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWIzSWdLRzQ5TUR0dVBHNTFiVlpoYkhWbGN6dHVLeXNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJITmJibDBnUFNCbWFXeGxMbWRsZEZWcGJuUXpNaWgyWVd4MVpVOW1abk5sZENBcklEUXFiaXdnSVdKcFowVnVaQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFpoYkhNN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRFU2SUNBZ0lDOHZJSEpoZEdsdmJtRnNJRDBnZEhkdklHeHZibWNnZG1Gc2RXVnpMQ0JtYVhKemRDQnBjeUJ1ZFcxbGNtRjBiM0lzSUhObFkyOXVaQ0JwY3lCa1pXNXZiV2x1WVhSdmNseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h1ZFcxV1lXeDFaWE1nUFQwZ01Ta2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdWRXMWxjbUYwYjNJZ1BTQm1hV3hsTG1kbGRGVnBiblF6TWloMllXeDFaVTltWm5ObGRDd2dJV0pwWjBWdVpDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSbGJtOXRhVzVoZEc5eUlEMGdabWxzWlM1blpYUlZhVzUwTXpJb2RtRnNkV1ZQWm1aelpYUXJOQ3dnSVdKcFowVnVaQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhiQ0E5SUc1bGR5Qk9kVzFpWlhJb2JuVnRaWEpoZEc5eUlDOGdaR1Z1YjIxcGJtRjBiM0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZV3d1Ym5WdFpYSmhkRzl5SUQwZ2JuVnRaWEpoZEc5eU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVd3dVpHVnViMjFwYm1GMGIzSWdQU0JrWlc1dmJXbHVZWFJ2Y2p0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIWmhiRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllXeHpJRDBnVzEwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2lBb2JqMHdPMjQ4Ym5WdFZtRnNkV1Z6TzI0ckt5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiblZ0WlhKaGRHOXlJRDBnWm1sc1pTNW5aWFJWYVc1ME16SW9kbUZzZFdWUFptWnpaWFFnS3lBNEttNHNJQ0ZpYVdkRmJtUXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR1Z1YjIxcGJtRjBiM0lnUFNCbWFXeGxMbWRsZEZWcGJuUXpNaWgyWVd4MVpVOW1abk5sZENzMElDc2dPQ3B1TENBaFltbG5SVzVrS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJITmJibDBnUFNCdVpYY2dUblZ0WW1WeUtHNTFiV1Z5WVhSdmNpQXZJR1JsYm05dGFXNWhkRzl5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJITmJibDB1Ym5WdFpYSmhkRzl5SUQwZ2JuVnRaWEpoZEc5eU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNjMXR1WFM1a1pXNXZiV2x1WVhSdmNpQTlJR1JsYm05dGFXNWhkRzl5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIyWVd4ek8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0E1T2lBdkx5QnpiRzl1Wnl3Z016SWdZbWwwSUhOcFoyNWxaQ0JwYm5SY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9iblZ0Vm1Gc2RXVnpJRDA5SURFcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR1pwYkdVdVoyVjBTVzUwTXpJb1pXNTBjbmxQWm1aelpYUWdLeUE0TENBaFltbG5SVzVrS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZV3h6SUQwZ1cxMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNpQW9iajB3TzI0OGJuVnRWbUZzZFdWek8yNHJLeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2MxdHVYU0E5SUdacGJHVXVaMlYwU1c1ME16SW9kbUZzZFdWUFptWnpaWFFnS3lBMEttNHNJQ0ZpYVdkRmJtUXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjJZV3h6TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQXhNRG9nTHk4Z2MybG5ibVZrSUhKaGRHbHZibUZzTENCMGQyOGdjMnh2Ym1kekxDQm1hWEp6ZENCcGN5QnVkVzFsY21GMGIzSXNJSE5sWTI5dVpDQnBjeUJrWlc1dmJXbHVZWFJ2Y2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHVkVzFXWVd4MVpYTWdQVDBnTVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdabWxzWlM1blpYUkpiblF6TWloMllXeDFaVTltWm5ObGRDd2dJV0pwWjBWdVpDa2dMeUJtYVd4bExtZGxkRWx1ZERNeUtIWmhiSFZsVDJabWMyVjBLelFzSUNGaWFXZEZibVFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhiSE1nUFNCYlhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05eUlDaHVQVEE3Ymp4dWRXMVdZV3gxWlhNN2Jpc3JLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVd4elcyNWRJRDBnWm1sc1pTNW5aWFJKYm5Rek1paDJZV3gxWlU5bVpuTmxkQ0FySURncWJpd2dJV0pwWjBWdVpDa2dMeUJtYVd4bExtZGxkRWx1ZERNeUtIWmhiSFZsVDJabWMyVjBLelFnS3lBNEttNHNJQ0ZpYVdkRmJtUXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjJZV3h6TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNvZ1IybDJaVzRnWVc0Z1NVWkVJQ2hKYldGblpTQkdhV3hsSUVScGNtVmpkRzl5ZVNrZ2MzUmhjblFnYjJabWMyVjBYRzRnSUNBZ0tpQnlaWFIxY201eklHRnVJRzltWm5ObGRDQjBieUJ1WlhoMElFbEdSQ0J2Y2lBd0lHbG1JR2wwSjNNZ2RHaGxJR3hoYzNRZ1NVWkVMbHh1SUNBZ0lDb3ZYRzRnSUNBZ1puVnVZM1JwYjI0Z1oyVjBUbVY0ZEVsR1JFOW1abk5sZENoa1lYUmhWbWxsZHl3Z1pHbHlVM1JoY25Rc0lHSnBaMFZ1WkNsN1hHNGdJQ0FnSUNBZ0lDOHZkR2hsSUdacGNuTjBJREppZVhSbGN5QnRaV0Z1Y3lCMGFHVWdiblZ0WW1WeUlHOW1JR1JwY21WamRHOXllU0JsYm5SeWFXVnpJR052Ym5SaGFXNXpJR2x1SUhSb2FYTWdTVVpFWEc0Z0lDQWdJQ0FnSUhaaGNpQmxiblJ5YVdWeklEMGdaR0YwWVZacFpYY3VaMlYwVldsdWRERTJLR1JwY2xOMFlYSjBMQ0FoWW1sblJXNWtLVHRjYmx4dUlDQWdJQ0FnSUNBdkx5QkJablJsY2lCc1lYTjBJR1JwY21WamRHOXllU0JsYm5SeWVTd2dkR2hsY21VZ2FYTWdZU0EwWW5sMFpYTWdiMllnWkdGMFlTeGNiaUFnSUNBZ0lDQWdMeThnYVhRZ2JXVmhibk1nWVc0Z2IyWm1jMlYwSUhSdklHNWxlSFFnU1VaRUxseHVJQ0FnSUNBZ0lDQXZMeUJKWmlCcGRITWdkbUZzZFdVZ2FYTWdKekI0TURBd01EQXdNREFuTENCcGRDQnRaV0Z1Y3lCMGFHbHpJR2x6SUhSb1pTQnNZWE4wSUVsR1JDQmhibVFnZEdobGNtVWdhWE1nYm04Z2JHbHVhMlZrSUVsR1JDNWNibHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdaR0YwWVZacFpYY3VaMlYwVldsdWRETXlLR1JwY2xOMFlYSjBJQ3NnTWlBcklHVnVkSEpwWlhNZ0tpQXhNaXdnSVdKcFowVnVaQ2s3SUM4dklHVmhZMmdnWlc1MGNua2dhWE1nTVRJZ1lubDBaWE1nYkc5dVoxeHVJQ0FnSUgxY2JseHVJQ0FnSUdaMWJtTjBhVzl1SUhKbFlXUlVhSFZ0WW01aGFXeEpiV0ZuWlNoa1lYUmhWbWxsZHl3Z2RHbG1abE4wWVhKMExDQm1hWEp6ZEVsR1JFOW1abk5sZEN3Z1ltbG5SVzVrS1h0Y2JpQWdJQ0FnSUNBZ0x5OGdaMlYwSUhSb1pTQkpSa1F4SUc5bVpuTmxkRnh1SUNBZ0lDQWdJQ0IyWVhJZ1NVWkVNVTltWm5ObGRGQnZhVzUwWlhJZ1BTQm5aWFJPWlhoMFNVWkVUMlptYzJWMEtHUmhkR0ZXYVdWM0xDQjBhV1ptVTNSaGNuUXJabWx5YzNSSlJrUlBabVp6WlhRc0lHSnBaMFZ1WkNrN1hHNWNiaUFnSUNBZ0lDQWdhV1lnS0NGSlJrUXhUMlptYzJWMFVHOXBiblJsY2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1kyOXVjMjlzWlM1c2IyY29KeW9xS2lvcUtpb3FJRWxHUkRGUFptWnpaWFFnYVhNZ1pXMXdkSGtzSUdsdFlXZGxJSFJvZFcxaUlHNXZkQ0JtYjNWdVpDQXFLaW9xS2lvcUtpY3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUh0OU8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR1ZzYzJVZ2FXWWdLRWxHUkRGUFptWnpaWFJRYjJsdWRHVnlJRDRnWkdGMFlWWnBaWGN1WW5sMFpVeGxibWQwYUNrZ2V5QXZMeUIwYUdseklITm9iM1ZzWkNCdWIzUWdhR0Z3Y0dWdVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCamIyNXpiMnhsTG14dlp5Z25LaW9xS2lvcUtpb2dTVVpFTVU5bVpuTmxkQ0JwY3lCdmRYUnphV1JsSUhSb1pTQmliM1Z1WkhNZ2IyWWdkR2hsSUVSaGRHRldhV1YzSUNvcUtpb3FLaW9xSnlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdlMzA3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0x5OGdZMjl1YzI5c1pTNXNiMmNvSnlvcUtpb3FLaW9nSUhSb2RXMWlibUZwYkNCSlJrUWdiMlptYzJWMElDaEpSa1F4S1NCcGN6b2dKWE1uTENCSlJrUXhUMlptYzJWMFVHOXBiblJsY2lrN1hHNWNiaUFnSUNBZ0lDQWdkbUZ5SUhSb2RXMWlWR0ZuY3lBOUlISmxZV1JVWVdkektHUmhkR0ZXYVdWM0xDQjBhV1ptVTNSaGNuUXNJSFJwWm1aVGRHRnlkQ0FySUVsR1JERlBabVp6WlhSUWIybHVkR1Z5TENCSlJrUXhWR0ZuY3l3Z1ltbG5SVzVrS1Z4dVhHNGdJQ0FnSUNBZ0lDOHZJRVZZU1VZZ01pNHpJSE53WldOcFptbGpZWFJwYjI0Z1ptOXlJRXBRUlVjZ1ptOXliV0YwSUhSb2RXMWlibUZwYkZ4dVhHNGdJQ0FnSUNBZ0lDOHZJRWxtSUhSb1pTQjJZV3gxWlNCdlppQkRiMjF3Y21WemMybHZiaWd3ZURBeE1ETXBJRlJoWnlCcGJpQkpSa1F4SUdseklDYzJKeXdnZEdoMWJXSnVZV2xzSUdsdFlXZGxJR1p2Y20xaGRDQnBjeUJLVUVWSExseHVJQ0FnSUNBZ0lDQXZMeUJOYjNOMElHOW1JRVY0YVdZZ2FXMWhaMlVnZFhObGN5QktVRVZISUdadmNtMWhkQ0JtYjNJZ2RHaDFiV0p1WVdsc0xpQkpiaUIwYUdGMElHTmhjMlVzSUhsdmRTQmpZVzRnWjJWMElHOW1abk5sZENCdlppQjBhSFZ0WW01aGFXeGNiaUFnSUNBZ0lDQWdMeThnWW5rZ1NuQmxaMGxHVDJabWMyVjBLREI0TURJd01Ta2dWR0ZuSUdsdUlFbEdSREVzSUhOcGVtVWdiMllnZEdoMWJXSnVZV2xzSUdKNUlFcHdaV2RKUmtKNWRHVkRiM1Z1ZENnd2VEQXlNRElwSUZSaFp5NWNiaUFnSUNBZ0lDQWdMeThnUkdGMFlTQm1iM0p0WVhRZ2FYTWdiM0prYVc1aGNua2dTbEJGUnlCbWIzSnRZWFFzSUhOMFlYSjBjeUJtY205dElEQjRSa1pFT0NCaGJtUWdaVzVrY3lCaWVTQXdlRVpHUkRrdUlFbDBJSE5sWlcxeklIUm9ZWFJjYmlBZ0lDQWdJQ0FnTHk4Z1NsQkZSeUJtYjNKdFlYUWdZVzVrSURFMk1IZ3hNakJ3YVhobGJITWdiMllnYzJsNlpTQmhjbVVnY21WamIyMXRaVzVrWldRZ2RHaDFiV0p1WVdsc0lHWnZjbTFoZENCbWIzSWdSWGhwWmpJdU1TQnZjaUJzWVhSbGNpNWNibHh1SUNBZ0lDQWdJQ0JwWmlBb2RHaDFiV0pVWVdkeld5ZERiMjF3Y21WemMybHZiaWRkS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCamIyNXpiMnhsTG14dlp5Z25WR2gxYldKdVlXbHNJR2x0WVdkbElHWnZkVzVrSVNjcE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCemQybDBZMmdnS0hSb2RXMWlWR0ZuYzFzblEyOXRjSEpsYzNOcGIyNG5YU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdOanBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdZMjl1YzI5c1pTNXNiMmNvSjFSb2RXMWlibUZwYkNCcGJXRm5aU0JtYjNKdFlYUWdhWE1nU2xCRlJ5Y3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kR2gxYldKVVlXZHpMa3B3WldkSlJrOW1abk5sZENBbUppQjBhSFZ0WWxSaFozTXVTbkJsWjBsR1FubDBaVU52ZFc1MEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklHVjRkSEpoWTNRZ2RHaGxJSFJvZFcxaWJtRnBiRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhSUFptWnpaWFFnUFNCMGFXWm1VM1JoY25RZ0t5QjBhSFZ0WWxSaFozTXVTbkJsWjBsR1QyWm1jMlYwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlIUk1aVzVuZEdnZ1BTQjBhSFZ0WWxSaFozTXVTbkJsWjBsR1FubDBaVU52ZFc1ME8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaDFiV0pVWVdkeld5ZGliRzlpSjEwZ1BTQnVaWGNnUW14dllpaGJibVYzSUZWcGJuUTRRWEp5WVhrb1pHRjBZVlpwWlhjdVluVm1abVZ5TENCMFQyWm1jMlYwTENCMFRHVnVaM1JvS1Ywc0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwZVhCbE9pQW5hVzFoWjJVdmFuQmxaeWRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdNVHBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbXh2WnloY0lsUm9kVzFpYm1GcGJDQnBiV0ZuWlNCbWIzSnRZWFFnYVhNZ1ZFbEdSaXdnZDJocFkyZ2dhWE1nYm05MElHbHRjR3hsYldWdWRHVmtMbHdpS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJQ0FnSUNBZ0lHUmxabUYxYkhRNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1c2IyY29YQ0pWYm10dWIzZHVJSFJvZFcxaWJtRnBiQ0JwYldGblpTQm1iM0p0WVhRZ0p5VnpKMXdpTENCMGFIVnRZbFJoWjNOYkowTnZiWEJ5WlhOemFXOXVKMTBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdWc2MyVWdhV1lnS0hSb2RXMWlWR0ZuYzFzblVHaHZkRzl0WlhSeWFXTkpiblJsY25CeVpYUmhkR2x2YmlkZElEMDlJRElwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXViRzluS0Z3aVZHaDFiV0p1WVdsc0lHbHRZV2RsSUdadmNtMWhkQ0JwY3lCU1IwSXNJSGRvYVdOb0lHbHpJRzV2ZENCcGJYQnNaVzFsYm5SbFpDNWNJaWs3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2RXMWlWR0ZuY3p0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JtZFc1amRHbHZiaUJuWlhSVGRISnBibWRHY205dFJFSW9ZblZtWm1WeUxDQnpkR0Z5ZEN3Z2JHVnVaM1JvS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ2ZFhSemRISWdQU0JjSWx3aU8xeHVJQ0FnSUNBZ0lDQm1iM0lnS0c0Z1BTQnpkR0Z5ZERzZ2JpQThJSE4wWVhKMEsyeGxibWQwYURzZ2Jpc3JLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnZkWFJ6ZEhJZ0t6MGdVM1J5YVc1bkxtWnliMjFEYUdGeVEyOWtaU2hpZFdabVpYSXVaMlYwVldsdWREZ29iaWtwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdmRYUnpkSEk3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdablZ1WTNScGIyNGdjbVZoWkVWWVNVWkVZWFJoS0dacGJHVXNJSE4wWVhKMEtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoblpYUlRkSEpwYm1kR2NtOXRSRUlvWm1sc1pTd2djM1JoY25Rc0lEUXBJQ0U5SUZ3aVJYaHBabHdpS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1pHVmlkV2NwSUdOdmJuTnZiR1V1Ykc5bktGd2lUbTkwSUhaaGJHbGtJRVZZU1VZZ1pHRjBZU0VnWENJZ0t5Qm5aWFJUZEhKcGJtZEdjbTl0UkVJb1ptbHNaU3dnYzNSaGNuUXNJRFFwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJSFpoY2lCaWFXZEZibVFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBZV2R6TENCMFlXY3NYRzRnSUNBZ0lDQWdJQ0FnSUNCbGVHbG1SR0YwWVN3Z1ozQnpSR0YwWVN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJwWm1aUFptWnpaWFFnUFNCemRHRnlkQ0FySURZN1hHNWNiaUFnSUNBZ0lDQWdMeThnZEdWemRDQm1iM0lnVkVsR1JpQjJZV3hwWkdsMGVTQmhibVFnWlc1a2FXRnVibVZ6YzF4dUlDQWdJQ0FnSUNCcFppQW9abWxzWlM1blpYUlZhVzUwTVRZb2RHbG1aazltWm5ObGRDa2dQVDBnTUhnME9UUTVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmlhV2RGYm1RZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaG1hV3hsTG1kbGRGVnBiblF4TmloMGFXWm1UMlptYzJWMEtTQTlQU0F3ZURSRU5FUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHSnBaMFZ1WkNBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWkdWaWRXY3BJR052Ym5OdmJHVXViRzluS0Z3aVRtOTBJSFpoYkdsa0lGUkpSa1lnWkdGMFlTRWdLRzV2SURCNE5EazBPU0J2Y2lBd2VEUkVORVFwWENJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tHWnBiR1V1WjJWMFZXbHVkREUyS0hScFptWlBabVp6WlhRck1pd2dJV0pwWjBWdVpDa2dJVDBnTUhnd01ESkJLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWkdWaWRXY3BJR052Ym5OdmJHVXViRzluS0Z3aVRtOTBJSFpoYkdsa0lGUkpSa1lnWkdGMFlTRWdLRzV2SURCNE1EQXlRU2xjSWlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0IyWVhJZ1ptbHljM1JKUmtSUFptWnpaWFFnUFNCbWFXeGxMbWRsZEZWcGJuUXpNaWgwYVdabVQyWm1jMlYwS3pRc0lDRmlhV2RGYm1RcE8xeHVYRzRnSUNBZ0lDQWdJR2xtSUNobWFYSnpkRWxHUkU5bVpuTmxkQ0E4SURCNE1EQXdNREF3TURncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaGtaV0oxWnlrZ1kyOXVjMjlzWlM1c2IyY29YQ0pPYjNRZ2RtRnNhV1FnVkVsR1JpQmtZWFJoSVNBb1JtbHljM1FnYjJabWMyVjBJR3hsYzNNZ2RHaGhiaUE0S1Z3aUxDQm1hV3hsTG1kbGRGVnBiblF6TWloMGFXWm1UMlptYzJWMEt6UXNJQ0ZpYVdkRmJtUXBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lIUmhaM01nUFNCeVpXRmtWR0ZuY3lobWFXeGxMQ0IwYVdabVQyWm1jMlYwTENCMGFXWm1UMlptYzJWMElDc2dabWx5YzNSSlJrUlBabVp6WlhRc0lGUnBabVpVWVdkekxDQmlhV2RGYm1RcE8xeHVYRzRnSUNBZ0lDQWdJR2xtSUNoMFlXZHpMa1Y0YVdaSlJrUlFiMmx1ZEdWeUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCbGVHbG1SR0YwWVNBOUlISmxZV1JVWVdkektHWnBiR1VzSUhScFptWlBabVp6WlhRc0lIUnBabVpQWm1aelpYUWdLeUIwWVdkekxrVjRhV1pKUmtSUWIybHVkR1Z5TENCRmVHbG1WR0ZuY3l3Z1ltbG5SVzVrS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2lBb2RHRm5JR2x1SUdWNGFXWkVZWFJoS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MzZHBkR05vSUNoMFlXY3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0JjSWt4cFoyaDBVMjkxY21ObFhDSWdPbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRndpUm14aGMyaGNJaUE2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnWENKTlpYUmxjbWx1WjAxdlpHVmNJaUE2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnWENKRmVIQnZjM1Z5WlZCeWIyZHlZVzFjSWlBNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ1hDSlRaVzV6YVc1blRXVjBhRzlrWENJZ09seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElGd2lVMk5sYm1WRFlYQjBkWEpsVkhsd1pWd2lJRHBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0JjSWxOalpXNWxWSGx3WlZ3aUlEcGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQmNJa04xYzNSdmJWSmxibVJsY21Wa1hDSWdPbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRndpVjJocGRHVkNZV3hoYm1ObFhDSWdPbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRndpUjJGcGJrTnZiblJ5YjJ4Y0lpQTZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdYQ0pEYjI1MGNtRnpkRndpSURwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNCY0lsTmhkSFZ5WVhScGIyNWNJaUE2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnWENKVGFHRnljRzVsYzNOY0lpQTZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdYQ0pUZFdKcVpXTjBSR2x6ZEdGdVkyVlNZVzVuWlZ3aUlEcGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQmNJa1pwYkdWVGIzVnlZMlZjSWlBNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGVHbG1SR0YwWVZ0MFlXZGRJRDBnVTNSeWFXNW5WbUZzZFdWelczUmhaMTFiWlhocFprUmhkR0ZiZEdGblhWMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElGd2lSWGhwWmxabGNuTnBiMjVjSWlBNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ1hDSkdiR0Z6YUhCcGVGWmxjbk5wYjI1Y0lpQTZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxlR2xtUkdGMFlWdDBZV2RkSUQwZ1UzUnlhVzVuTG1aeWIyMURhR0Z5UTI5a1pTaGxlR2xtUkdGMFlWdDBZV2RkV3pCZExDQmxlR2xtUkdGMFlWdDBZV2RkV3pGZExDQmxlR2xtUkdGMFlWdDBZV2RkV3pKZExDQmxlR2xtUkdGMFlWdDBZV2RkV3pOZEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ1hDSkRiMjF3YjI1bGJuUnpRMjl1Wm1sbmRYSmhkR2x2Ymx3aUlEcGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVjRhV1pFWVhSaFczUmhaMTBnUFZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGTjBjbWx1WjFaaGJIVmxjeTVEYjIxd2IyNWxiblJ6VzJWNGFXWkVZWFJoVzNSaFoxMWJNRjFkSUN0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQlRkSEpwYm1kV1lXeDFaWE11UTI5dGNHOXVaVzUwYzF0bGVHbG1SR0YwWVZ0MFlXZGRXekZkWFNBclhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdVM1J5YVc1blZtRnNkV1Z6TGtOdmJYQnZibVZ1ZEhOYlpYaHBaa1JoZEdGYmRHRm5YVnN5WFYwZ0sxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRk4wY21sdVoxWmhiSFZsY3k1RGIyMXdiMjVsYm5SelcyVjRhV1pFWVhSaFczUmhaMTFiTTExZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSaFozTmJkR0ZuWFNBOUlHVjRhV1pFWVhSaFczUmhaMTA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCcFppQW9kR0ZuY3k1SFVGTkpibVp2U1VaRVVHOXBiblJsY2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWjNCelJHRjBZU0E5SUhKbFlXUlVZV2R6S0dacGJHVXNJSFJwWm1aUFptWnpaWFFzSUhScFptWlBabVp6WlhRZ0t5QjBZV2R6TGtkUVUwbHVabTlKUmtSUWIybHVkR1Z5TENCSFVGTlVZV2R6TENCaWFXZEZibVFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdabTl5SUNoMFlXY2dhVzRnWjNCelJHRjBZU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOM2FYUmphQ0FvZEdGbktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdYQ0pIVUZOV1pYSnphVzl1U1VSY0lpQTZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm5jSE5FWVhSaFczUmhaMTBnUFNCbmNITkVZWFJoVzNSaFoxMWJNRjBnSzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGd2lMbHdpSUNzZ1ozQnpSR0YwWVZ0MFlXZGRXekZkSUN0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmNJaTVjSWlBcklHZHdjMFJoZEdGYmRHRm5YVnN5WFNBclhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYQ0l1WENJZ0t5Qm5jSE5FWVhSaFczUmhaMTFiTTEwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdGbmMxdDBZV2RkSUQwZ1ozQnpSR0YwWVZ0MFlXZGRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1pYaDBjbUZqZENCMGFIVnRZbTVoYVd4Y2JpQWdJQ0FnSUNBZ2RHRm5jMXNuZEdoMWJXSnVZV2xzSjEwZ1BTQnlaV0ZrVkdoMWJXSnVZV2xzU1cxaFoyVW9abWxzWlN3Z2RHbG1aazltWm5ObGRDd2dabWx5YzNSSlJrUlBabVp6WlhRc0lHSnBaMFZ1WkNrN1hHNWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUmhaM003WEc0Z0lDQWdmVnh1WEc0Z0lDQm1kVzVqZEdsdmJpQm1hVzVrV0UxUWFXNUtVRVZIS0dacGJHVXBJSHRjYmx4dUlDQWdJQ0FnSUNCcFppQW9JU2duUkU5TlVHRnljMlZ5SnlCcGJpQnpaV3htS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1kyOXVjMjlzWlM1M1lYSnVLQ2RZVFV3Z2NHRnljMmx1WnlCdWIzUWdjM1Z3Y0c5eWRHVmtJSGRwZEdodmRYUWdSRTlOVUdGeWMyVnlKeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdkbUZ5SUdSaGRHRldhV1YzSUQwZ2JtVjNJRVJoZEdGV2FXVjNLR1pwYkdVcE8xeHVYRzRnSUNBZ0lDQWdJR2xtSUNoa1pXSjFaeWtnWTI5dWMyOXNaUzVzYjJjb1hDSkhiM1FnWm1sc1pTQnZaaUJzWlc1bmRHZ2dYQ0lnS3lCbWFXeGxMbUo1ZEdWTVpXNW5kR2dwTzF4dUlDQWdJQ0FnSUNCcFppQW9LR1JoZEdGV2FXVjNMbWRsZEZWcGJuUTRLREFwSUNFOUlEQjRSa1lwSUh4OElDaGtZWFJoVm1sbGR5NW5aWFJWYVc1ME9DZ3hLU0FoUFNBd2VFUTRLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQnBaaUFvWkdWaWRXY3BJR052Ym5OdmJHVXViRzluS0Z3aVRtOTBJR0VnZG1Gc2FXUWdTbEJGUjF3aUtUdGNiaUFnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR1poYkhObE95QXZMeUJ1YjNRZ1lTQjJZV3hwWkNCcWNHVm5YRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCMllYSWdiMlptYzJWMElEMGdNaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lHeGxibWQwYUNBOUlHWnBiR1V1WW5sMFpVeGxibWQwYUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR1J2YlNBOUlHNWxkeUJFVDAxUVlYSnpaWElvS1R0Y2JseHVJQ0FnSUNBZ0lDQjNhR2xzWlNBb2IyWm1jMlYwSUR3Z0tHeGxibWQwYUMwMEtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR2RsZEZOMGNtbHVaMFp5YjIxRVFpaGtZWFJoVm1sbGR5d2diMlptYzJWMExDQTBLU0E5UFNCY0ltaDBkSEJjSWlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJ6ZEdGeWRFOW1abk5sZENBOUlHOW1abk5sZENBdElERTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhObFkzUnBiMjVNWlc1bmRHZ2dQU0JrWVhSaFZtbGxkeTVuWlhSVmFXNTBNVFlvYjJabWMyVjBJQzBnTWlrZ0xTQXhPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCNGJYQlRkSEpwYm1jZ1BTQm5aWFJUZEhKcGJtZEdjbTl0UkVJb1pHRjBZVlpwWlhjc0lITjBZWEowVDJabWMyVjBMQ0J6WldOMGFXOXVUR1Z1WjNSb0tWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUI0YlhCRmJtUkpibVJsZUNBOUlIaHRjRk4wY21sdVp5NXBibVJsZUU5bUtDZDRiWEJ0WlhSaFBpY3BJQ3NnT0R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCNGJYQlRkSEpwYm1jZ1BTQjRiWEJUZEhKcGJtY3VjM1ZpYzNSeWFXNW5LQ0I0YlhCVGRISnBibWN1YVc1a1pYaFBaaWdnSnp4NE9uaHRjRzFsZEdFbklDa3NJSGh0Y0VWdVpFbHVaR1Y0SUNrN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnYVc1a1pYaFBabGh0Y0NBOUlIaHRjRk4wY21sdVp5NXBibVJsZUU5bUtDZDRPbmh0Y0cxbGRHRW5LU0FySURFd1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OU5ZVzU1SUdOMWMzUnZiU0IzY21sMGRHVnVJSEJ5YjJkeVlXMXpJR1Z0WW1Wa0lIaHRjQzk0Yld3Z2QybDBhRzkxZENCaGJua2dibUZ0WlhOd1lXTmxMaUJHYjJ4c2IzZHBibWNnWVhKbElITnZiV1VnYjJZZ2RHaGxiUzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2TDFkcGRHaHZkWFFnZEdobGMyVWdibUZ0WlhOd1lXTmxjeXdnV0UxTUlHbHpJSFJvYjNWbmFIUWdkRzhnWW1VZ2FXNTJZV3hwWkNCaWVTQndZWEp6WlhKelhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2VHMXdVM1J5YVc1bklEMGdlRzF3VTNSeWFXNW5Mbk5zYVdObEtEQXNJR2x1WkdWNFQyWlliWEFwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0t5QW5lRzFzYm5NNlNYQjBZelI0YlhCRGIzSmxQVndpYUhSMGNEb3ZMMmx3ZEdNdWIzSm5MM04wWkM5SmNIUmpOSGh0Y0VOdmNtVXZNUzR3TDNodGJHNXpMMXdpSUNkY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXJJQ2Q0Yld4dWN6cDRjMms5WENKb2RIUndPaTh2ZDNkM0xuY3pMbTl5Wnk4eU1EQXhMMWhOVEZOamFHVnRZUzFwYm5OMFlXNWpaVndpSUNkY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXJJQ2Q0Yld4dWN6cDBhV1ptUFZ3aWFIUjBjRG92TDI1ekxtRmtiMkpsTG1OdmJTOTBhV1ptTHpFdU1DOWNJaUFuWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0t5QW5lRzFzYm5NNmNHeDFjejFjSW1oMGRIQTZMeTl6WTJobGJXRnpMbUZ1WkhKdmFXUXVZMjl0TDJGd2F5OXNhV0l2WTI5dExtZHZiMmRzWlM1aGJtUnliMmxrTG1kdGN5NXdiSFZ6WENJZ0oxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ3NnSjNodGJHNXpPbVY0ZEQxY0ltaDBkSEE2THk5M2QzY3VaMlYwZEhscGJXRm5aWE11WTI5dEwzaHpiSFJGZUhSbGJuTnBiMjR2TVM0d1hDSWdKMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNzZ0ozaHRiRzV6T21WNGFXWTlYQ0pvZEhSd09pOHZibk11WVdSdlltVXVZMjl0TDJWNGFXWXZNUzR3TDF3aUlDZGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FySUNkNGJXeHVjenB6ZEVWMmREMWNJbWgwZEhBNkx5OXVjeTVoWkc5aVpTNWpiMjB2ZUdGd0x6RXVNQzl6Vkhsd1pTOVNaWE52ZFhKalpVVjJaVzUwSTF3aUlDZGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FySUNkNGJXeHVjenB6ZEZKbFpqMWNJbWgwZEhBNkx5OXVjeTVoWkc5aVpTNWpiMjB2ZUdGd0x6RXVNQzl6Vkhsd1pTOVNaWE52ZFhKalpWSmxaaU5jSWlBblhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLeUFuZUcxc2JuTTZZM0p6UFZ3aWFIUjBjRG92TDI1ekxtRmtiMkpsTG1OdmJTOWpZVzFsY21FdGNtRjNMWE5sZEhScGJtZHpMekV1TUM5Y0lpQW5YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS3lBbmVHMXNibk02ZUdGd1IwbHRaejFjSW1oMGRIQTZMeTl1Y3k1aFpHOWlaUzVqYjIwdmVHRndMekV1TUM5bkwybHRaeTljSWlBblhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLeUFuZUcxc2JuTTZTWEIwWXpSNGJYQkZlSFE5WENKb2RIUndPaTh2YVhCMFl5NXZjbWN2YzNSa0wwbHdkR00wZUcxd1JYaDBMekl3TURndE1ESXRNamt2WENJZ0oxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ3NnZUcxd1UzUnlhVzVuTG5Oc2FXTmxLR2x1WkdWNFQyWlliWEFwWEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdaRzl0Ukc5amRXMWxiblFnUFNCa2IyMHVjR0Z5YzJWR2NtOXRVM1J5YVc1bktDQjRiWEJUZEhKcGJtY3NJQ2QwWlhoMEwzaHRiQ2NnS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZUcxc01rOWlhbVZqZENoa2IyMUViMk4xYldWdWRDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlY3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdiMlptYzJWMEt5czdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCbWRXNWpkR2x2YmlCNGJXd3lhbk52YmloNGJXd3BJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHcHpiMjRnUFNCN2ZUdGNiaUFnSUNBZ0lGeHVJQ0FnSUNBZ0lDQnBaaUFvZUcxc0xtNXZaR1ZVZVhCbElEMDlJREVwSUhzZ0x5OGdaV3hsYldWdWRDQnViMlJsWEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLSGh0YkM1aGRIUnlhV0oxZEdWekxteGxibWQwYUNBK0lEQXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHcHpiMjViSjBCaGRIUnlhV0oxZEdWekoxMGdQU0I3ZlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJR29nUFNBd095QnFJRHdnZUcxc0xtRjBkSEpwWW5WMFpYTXViR1Z1WjNSb095QnFLeXNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHRjBkSEpwWW5WMFpTQTlJSGh0YkM1aGRIUnlhV0oxZEdWekxtbDBaVzBvYWlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdwemIyNWJKMEJoZEhSeWFXSjFkR1Z6SjExYllYUjBjbWxpZFhSbExtNXZaR1ZPWVcxbFhTQTlJR0YwZEhKcFluVjBaUzV1YjJSbFZtRnNkV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tIaHRiQzV1YjJSbFZIbHdaU0E5UFNBektTQjdJQzh2SUhSbGVIUWdibTlrWlZ4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCNGJXd3VibTlrWlZaaGJIVmxPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0JjYmlBZ0lDQWdJQ0FnTHk4Z1pHVmhiQ0IzYVhSb0lHTm9hV3hrY21WdVhHNGdJQ0FnSUNBZ0lHbG1JQ2g0Yld3dWFHRnpRMmhwYkdST2IyUmxjeWdwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdabTl5S0haaGNpQnBJRDBnTURzZ2FTQThJSGh0YkM1amFHbHNaRTV2WkdWekxteGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnWTJocGJHUWdQU0I0Yld3dVkyaHBiR1JPYjJSbGN5NXBkR1Z0S0drcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHNXZaR1ZPWVcxbElEMGdZMmhwYkdRdWJtOWtaVTVoYldVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2FuTnZibHR1YjJSbFRtRnRaVjBnUFQwZ2JuVnNiQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JxYzI5dVcyNXZaR1ZPWVcxbFhTQTlJSGh0YkRKcWMyOXVLR05vYVd4a0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNocWMyOXVXMjV2WkdWT1lXMWxYUzV3ZFhOb0lEMDlJRzUxYkd3cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnYjJ4a0lEMGdhbk52Ymx0dWIyUmxUbUZ0WlYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FuTnZibHR1YjJSbFRtRnRaVjBnUFNCYlhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnFjMjl1VzI1dlpHVk9ZVzFsWFM1d2RYTm9LRzlzWkNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYW5OdmJsdHViMlJsVG1GdFpWMHVjSFZ6YUNoNGJXd3lhbk52YmloamFHbHNaQ2twTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHcHpiMjQ3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdablZ1WTNScGIyNGdlRzFzTWs5aWFtVmpkQ2g0Yld3cElIdGNiaUFnSUNBZ0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCdlltb2dQU0I3ZlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoNGJXd3VZMmhwYkdSeVpXNHViR1Z1WjNSb0lENGdNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUhodGJDNWphR2xzWkhKbGJpNXNaVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQnBkR1Z0SUQwZ2VHMXNMbU5vYVd4a2NtVnVMbWwwWlcwb2FTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdGMGRISnBZblYwWlhNZ1BTQnBkR1Z0TG1GMGRISnBZblYwWlhNN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLSFpoY2lCcFpIZ2dhVzRnWVhSMGNtbGlkWFJsY3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2FYUmxiVUYwZENBOUlHRjBkSEpwWW5WMFpYTmJhV1I0WFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdSaGRHRkxaWGtnUFNCcGRHVnRRWFIwTG01dlpHVk9ZVzFsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnWkdGMFlWWmhiSFZsSUQwZ2FYUmxiVUYwZEM1dWIyUmxWbUZzZFdVN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZb1pHRjBZVXRsZVNBaFBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J2WW1wYlpHRjBZVXRsZVYwZ1BTQmtZWFJoVm1Gc2RXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJRzV2WkdWT1lXMWxJRDBnYVhSbGJTNXViMlJsVG1GdFpUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGVYQmxiMllnS0c5aWFsdHViMlJsVG1GdFpWMHBJRDA5SUZ3aWRXNWtaV1pwYm1Wa1hDSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc5aWFsdHViMlJsVG1GdFpWMGdQU0I0Yld3eWFuTnZiaWhwZEdWdEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUFvYjJKcVcyNXZaR1ZPWVcxbFhTNXdkWE5vS1NBOVBTQmNJblZ1WkdWbWFXNWxaRndpS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCdmJHUWdQU0J2WW1wYmJtOWtaVTVoYldWZE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc5aWFsdHViMlJsVG1GdFpWMGdQU0JiWFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiMkpxVzI1dlpHVk9ZVzFsWFM1d2RYTm9LRzlzWkNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J2WW1wYmJtOWtaVTVoYldWZExuQjFjMmdvZUcxc01tcHpiMjRvYVhSbGJTa3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYjJKcUlEMGdlRzFzTG5SbGVIUkRiMjUwWlc1ME8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHOWlhanRjYmlBZ0lDQWdJQ0FnSUNCOUlHTmhkR05vSUNobEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdWJHOW5LR1V1YldWemMyRm5aU2s3WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUVWWVNVWXVaVzVoWW14bFdHMXdJRDBnWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lFVllTVVl1YVhOWWJYQkZibUZpYkdWa0lEMGdkSEoxWlR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JGV0VsR0xtUnBjMkZpYkdWWWJYQWdQU0JtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ1JWaEpSaTVwYzFodGNFVnVZV0pzWldRZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JGV0VsR0xtZGxkRVJoZEdFZ1BTQm1kVzVqZEdsdmJpaHBiV2NzSUdOaGJHeGlZV05yS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2dvS0hObGJHWXVTVzFoWjJVZ0ppWWdhVzFuSUdsdWMzUmhibU5sYjJZZ2MyVnNaaTVKYldGblpTbGNiaUFnSUNBZ0lDQWdJQ0FnSUh4OElDaHpaV3htTGtoVVRVeEpiV0ZuWlVWc1pXMWxiblFnSmlZZ2FXMW5JR2x1YzNSaGJtTmxiMllnYzJWc1ppNUlWRTFNU1cxaFoyVkZiR1Z0Wlc1MEtTbGNiaUFnSUNBZ0lDQWdJQ0FnSUNZbUlDRnBiV2N1WTI5dGNHeGxkR1VwWEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1ptRnNjMlU3WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0ZwYldGblpVaGhjMFJoZEdFb2FXMW5LU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdaMlYwU1cxaFoyVkVZWFJoS0dsdFp5d2dZMkZzYkdKaFkyc3BPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR05oYkd4aVlXTnJLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGc2JHSmhZMnN1WTJGc2JDaHBiV2NwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwY25WbE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUVWWVNVWXVaMlYwVkdGbklEMGdablZ1WTNScGIyNG9hVzFuTENCMFlXY3BJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tDRnBiV0ZuWlVoaGMwUmhkR0VvYVcxbktTa2djbVYwZFhKdU8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2FXMW5MbVY0YVdaa1lYUmhXM1JoWjEwN1hHNGdJQ0FnZlZ4dUlDQWdJRnh1SUNBZ0lFVllTVVl1WjJWMFNYQjBZMVJoWnlBOUlHWjFibU4wYVc5dUtHbHRaeXdnZEdGbktTQjdYRzRnSUNBZ0lDQWdJR2xtSUNnaGFXMWhaMlZJWVhORVlYUmhLR2x0WnlrcElISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdsdFp5NXBjSFJqWkdGMFlWdDBZV2RkTzF4dUlDQWdJSDFjYmx4dUlDQWdJRVZZU1VZdVoyVjBRV3hzVkdGbmN5QTlJR1oxYm1OMGFXOXVLR2x0WnlrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvSVdsdFlXZGxTR0Z6UkdGMFlTaHBiV2NwS1NCeVpYUjFjbTRnZTMwN1hHNGdJQ0FnSUNBZ0lIWmhjaUJoTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdaR0YwWVNBOUlHbHRaeTVsZUdsbVpHRjBZU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lIUmhaM01nUFNCN2ZUdGNiaUFnSUNBZ0lDQWdabTl5SUNoaElHbHVJR1JoZEdFcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaGtZWFJoTG1oaGMwOTNibEJ5YjNCbGNuUjVLR0VwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHRm5jMXRoWFNBOUlHUmhkR0ZiWVYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSaFozTTdYRzRnSUNBZ2ZWeHVJQ0FnSUZ4dUlDQWdJRVZZU1VZdVoyVjBRV3hzU1hCMFkxUmhaM01nUFNCbWRXNWpkR2x2YmlocGJXY3BJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tDRnBiV0ZuWlVoaGMwUmhkR0VvYVcxbktTa2djbVYwZFhKdUlIdDlPMXh1SUNBZ0lDQWdJQ0IyWVhJZ1lTeGNiaUFnSUNBZ0lDQWdJQ0FnSUdSaGRHRWdQU0JwYldjdWFYQjBZMlJoZEdFc1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwWVdkeklEMGdlMzA3WEc0Z0lDQWdJQ0FnSUdadmNpQW9ZU0JwYmlCa1lYUmhLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWkdGMFlTNW9ZWE5QZDI1UWNtOXdaWEowZVNoaEtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJoWjNOYllWMGdQU0JrWVhSaFcyRmRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBZV2R6TzF4dUlDQWdJSDFjYmx4dUlDQWdJRVZZU1VZdWNISmxkSFI1SUQwZ1puVnVZM1JwYjI0b2FXMW5LU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hhVzFoWjJWSVlYTkVZWFJoS0dsdFp5a3BJSEpsZEhWeWJpQmNJbHdpTzF4dUlDQWdJQ0FnSUNCMllYSWdZU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHUmhkR0VnUFNCcGJXY3VaWGhwWm1SaGRHRXNYRzRnSUNBZ0lDQWdJQ0FnSUNCemRISlFjbVYwZEhrZ1BTQmNJbHdpTzF4dUlDQWdJQ0FnSUNCbWIzSWdLR0VnYVc0Z1pHRjBZU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dSaGRHRXVhR0Z6VDNkdVVISnZjR1Z5ZEhrb1lTa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUdSaGRHRmJZVjBnUFQwZ1hDSnZZbXBsWTNSY0lpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9aR0YwWVZ0aFhTQnBibk4wWVc1alpXOW1JRTUxYldKbGNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjM1J5VUhKbGRIUjVJQ3M5SUdFZ0t5QmNJaUE2SUZ3aUlDc2daR0YwWVZ0aFhTQXJJRndpSUZ0Y0lpQXJJR1JoZEdGYllWMHViblZ0WlhKaGRHOXlJQ3NnWENJdlhDSWdLeUJrWVhSaFcyRmRMbVJsYm05dGFXNWhkRzl5SUNzZ1hDSmRYRnh5WEZ4dVhDSTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6ZEhKUWNtVjBkSGtnS3owZ1lTQXJJRndpSURvZ1cxd2lJQ3NnWkdGMFlWdGhYUzVzWlc1bmRHZ2dLeUJjSWlCMllXeDFaWE5kWEZ4eVhGeHVYQ0k3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6ZEhKUWNtVjBkSGtnS3owZ1lTQXJJRndpSURvZ1hDSWdLeUJrWVhSaFcyRmRJQ3NnWENKY1hISmNYRzVjSWp0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhOMGNsQnlaWFIwZVR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JGV0VsR0xuSmxZV1JHY205dFFtbHVZWEo1Um1sc1pTQTlJR1oxYm1OMGFXOXVLR1pwYkdVcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHWnBibVJGV0VsR2FXNUtVRVZIS0dacGJHVXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHbG1JQ2gwZVhCbGIyWWdaR1ZtYVc1bElEMDlQU0FuWm5WdVkzUnBiMjRuSUNZbUlHUmxabWx1WlM1aGJXUXBJSHRjYmlBZ0lDQWdJQ0FnWkdWbWFXNWxLQ2RsZUdsbUxXcHpKeXdnVzEwc0lHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUVWWVNVWTdYRzRnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJSDFjYm4wdVkyRnNiQ2gwYUdsektTazdYRzVjYmx4dVhHNWNiaTh2THk4dkx5OHZMeTh2THk4dkx5OHZMMXh1THk4Z1YwVkNVRUZEU3lCR1QwOVVSVkpjYmk4dklHUTZMM2RsWWk5dWIyUmxYMjF2WkhWc1pYTXZaWGhwWmkxcWN5OWxlR2xtTG1welhHNHZMeUJ0YjJSMWJHVWdhV1FnUFNBM00xeHVMeThnYlc5a2RXeGxJR05vZFc1cmN5QTlJREFpWFN3aWMyOTFjbU5sVW05dmRDSTZJaUo5XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzczXFxuXCIpO1xuXG4vKioqLyB9KSxcbi8qIDc0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCIvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xcblxcbi8vIGxvYWQgdGhlIHN0eWxlc1xcbnZhciBjb250ZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3NSk7XFxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaSwgY29udGVudCwgJyddXTtcXG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXFxudmFyIHVwZGF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oMSkoY29udGVudCwge30pO1xcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xcbi8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcXG5pZihmYWxzZSkge1xcblxcdC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXFxuXFx0aWYoIWNvbnRlbnQubG9jYWxzKSB7XFxuXFx0XFx0bW9kdWxlLmhvdC5hY2NlcHQoXFxcIiEhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvLjAuMjMuMUBjc3MtbG9hZGVyL2luZGV4LmpzIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS0wLTIhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvLjIuMi4zQGxlc3MtbG9hZGVyL2luZGV4LmpzIS4vcG9zdC5sZXNzXFxcIiwgZnVuY3Rpb24oKSB7XFxuXFx0XFx0XFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFxcXCIhIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy4wLjIzLjFAY3NzLWxvYWRlci9pbmRleC5qcyEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9saWIvaW5kZXguanM/P3JlZi0tMC0yIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy4yLjIuM0BsZXNzLWxvYWRlci9pbmRleC5qcyEuL3Bvc3QubGVzc1xcXCIpO1xcblxcdFxcdFxcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xcblxcdFxcdFxcdHVwZGF0ZShuZXdDb250ZW50KTtcXG5cXHRcXHR9KTtcXG5cXHR9XFxuXFx0Ly8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xcblxcdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xcbn0vLyMgc291cmNlVVJMPVttb2R1bGVdXFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk4dkxpOXpjbU12Y0c5emRDNXNaWE56UDJSbE0yTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklrRkJRVUU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3dyUTBGQk9FWTdRVUZET1VZN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1IwRkJSenRCUVVOSU8wRkJRMEU3UVVGRFFTeG5RMEZCWjBNc1ZVRkJWU3hGUVVGRk8wRkJRelZESWl3aVptbHNaU0k2SWpjMExtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpTHk4Z2MzUjViR1V0Ykc5aFpHVnlPaUJCWkdSeklITnZiV1VnWTNOeklIUnZJSFJvWlNCRVQwMGdZbmtnWVdSa2FXNW5JR0VnUEhOMGVXeGxQaUIwWVdkY2JseHVMeThnYkc5aFpDQjBhR1VnYzNSNWJHVnpYRzUyWVhJZ1kyOXVkR1Z1ZENBOUlISmxjWFZwY21Vb1hDSWhJUzR2TGk0dkxpNHZMaTR2Ym05a1pWOXRiMlIxYkdWekx5NHdMakl6TGpGQVkzTnpMV3h2WVdSbGNpOXBibVJsZUM1cWN5RXVMeTR1THk0dUx5NHVMMjV2WkdWZmJXOWtkV3hsY3k5d2IzTjBZM056TFd4dllXUmxjaTlzYVdJdmFXNWtaWGd1YW5NL1AzSmxaaTB0TUMweUlTNHZMaTR2TGk0dkxpNHZibTlrWlY5dGIyUjFiR1Z6THk0eUxqSXVNMEJzWlhOekxXeHZZV1JsY2k5cGJtUmxlQzVxY3lFdUwzQnZjM1F1YkdWemMxd2lLVHRjYm1sbUtIUjVjR1Z2WmlCamIyNTBaVzUwSUQwOVBTQW5jM1J5YVc1bkp5a2dZMjl1ZEdWdWRDQTlJRnRiYlc5a2RXeGxMbWxrTENCamIyNTBaVzUwTENBbkoxMWRPMXh1THk4Z1lXUmtJSFJvWlNCemRIbHNaWE1nZEc4Z2RHaGxJRVJQVFZ4dWRtRnlJSFZ3WkdGMFpTQTlJSEpsY1hWcGNtVW9YQ0loTGk4dUxpOHVMaTh1TGk5dWIyUmxYMjF2WkhWc1pYTXZMakF1TVRNdU1VQnpkSGxzWlMxc2IyRmtaWEl2WVdSa1UzUjViR1Z6TG1welhDSXBLR052Ym5SbGJuUXNJSHQ5S1R0Y2JtbG1LR052Ym5SbGJuUXViRzlqWVd4ektTQnRiMlIxYkdVdVpYaHdiM0owY3lBOUlHTnZiblJsYm5RdWJHOWpZV3h6TzF4dUx5OGdTRzkwSUUxdlpIVnNaU0JTWlhCc1lXTmxiV1Z1ZEZ4dWFXWW9iVzlrZFd4bExtaHZkQ2tnZTF4dVhIUXZMeUJYYUdWdUlIUm9aU0J6ZEhsc1pYTWdZMmhoYm1kbExDQjFjR1JoZEdVZ2RHaGxJRHh6ZEhsc1pUNGdkR0ZuYzF4dVhIUnBaaWdoWTI5dWRHVnVkQzVzYjJOaGJITXBJSHRjYmx4MFhIUnRiMlIxYkdVdWFHOTBMbUZqWTJWd2RDaGNJaUVoTGk4dUxpOHVMaTh1TGk5dWIyUmxYMjF2WkhWc1pYTXZMakF1TWpNdU1VQmpjM010Ykc5aFpHVnlMMmx1WkdWNExtcHpJUzR2TGk0dkxpNHZMaTR2Ym05a1pWOXRiMlIxYkdWekwzQnZjM1JqYzNNdGJHOWhaR1Z5TDJ4cFlpOXBibVJsZUM1cWN6OC9jbVZtTFMwd0xUSWhMaTh1TGk4dUxpOHVMaTl1YjJSbFgyMXZaSFZzWlhNdkxqSXVNaTR6UUd4bGMzTXRiRzloWkdWeUwybHVaR1Y0TG1weklTNHZjRzl6ZEM1c1pYTnpYQ0lzSUdaMWJtTjBhVzl1S0NrZ2UxeHVYSFJjZEZ4MGRtRnlJRzVsZDBOdmJuUmxiblFnUFNCeVpYRjFhWEpsS0Z3aUlTRXVMeTR1THk0dUx5NHVMMjV2WkdWZmJXOWtkV3hsY3k4dU1DNHlNeTR4UUdOemN5MXNiMkZrWlhJdmFXNWtaWGd1YW5NaExpOHVMaTh1TGk4dUxpOXViMlJsWDIxdlpIVnNaWE12Y0c5emRHTnpjeTFzYjJGa1pYSXZiR2xpTDJsdVpHVjRMbXB6UHo5eVpXWXRMVEF0TWlFdUx5NHVMeTR1THk0dUwyNXZaR1ZmYlc5a2RXeGxjeTh1TWk0eUxqTkFiR1Z6Y3kxc2IyRmtaWEl2YVc1a1pYZ3Vhbk1oTGk5d2IzTjBMbXhsYzNOY0lpazdYRzVjZEZ4MFhIUnBaaWgwZVhCbGIyWWdibVYzUTI5dWRHVnVkQ0E5UFQwZ0ozTjBjbWx1WnljcElHNWxkME52Ym5SbGJuUWdQU0JiVzIxdlpIVnNaUzVwWkN3Z2JtVjNRMjl1ZEdWdWRDd2dKeWRkWFR0Y2JseDBYSFJjZEhWd1pHRjBaU2h1WlhkRGIyNTBaVzUwS1R0Y2JseDBYSFI5S1R0Y2JseDBmVnh1WEhRdkx5QlhhR1Z1SUhSb1pTQnRiMlIxYkdVZ2FYTWdaR2x6Y0c5elpXUXNJSEpsYlc5MlpTQjBhR1VnUEhOMGVXeGxQaUIwWVdkelhHNWNkRzF2WkhWc1pTNW9iM1F1WkdsemNHOXpaU2htZFc1amRHbHZiaWdwSUhzZ2RYQmtZWFJsS0NrN0lIMHBPMXh1ZlZ4dVhHNWNiaTh2THk4dkx5OHZMeTh2THk4dkx5OHZMMXh1THk4Z1YwVkNVRUZEU3lCR1QwOVVSVkpjYmk4dklDNHZjM0pqTDNCdmMzUXViR1Z6YzF4dUx5OGdiVzlrZFd4bElHbGtJRDBnTnpSY2JpOHZJRzF2WkhWc1pTQmphSFZ1YTNNZ1BTQXdJbDBzSW5OdmRYSmpaVkp2YjNRaU9pSWlmUT09XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzc0XFxuXCIpO1xuXG4vKioqLyB9KSxcbi8qIDc1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApKCk7XFxuLy8gaW1wb3J0c1xcblxcblxcbi8vIG1vZHVsZVxcbmV4cG9ydHMucHVzaChbbW9kdWxlLmksIFxcXCIuZWRpdG9yLXBvc3Qtb3ZvIHtcXFxcbiAgZGlzcGxheTogYmxvY2s7XFxcXG4gIG1hcmdpbjogMDtcXFxcbiAgcGFkZGluZzogMDtcXFxcbiAgYm9yZGVyOiBub25lO1xcXFxuICB3aWR0aDogMTAwJTtcXFxcbiAgaGVpZ2h0OiAxMDAlO1xcXFxuICBiYWNrZ3JvdW5kOiAjZjBlZmY2O1xcXFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxcXG4gIGxlZnQ6IDA7XFxcXG4gIHRvcDogMDtcXFxcbiAgLXdlYmtpdC1vdmVyZmxvdy1zY3JvbGxpbmc6IHRvdWNoO1xcXFxuICBvdmVyZmxvdzogaGlkZGVuO1xcXFxufVxcXFxuLmVkaXRvci1wb3N0LW92byAud2gge1xcXFxuICBjb2xvcjogYmxhY2s7XFxcXG59XFxcXG4uZWRpdG9yLXBvc3Qtb3ZvIC5lbW9qaSB7XFxcXG4gIHdpZHRoOiAyMHB4O1xcXFxuICBoZWlnaHQ6IDIwcHg7XFxcXG4gIGJvcmRlcjogbm9uZTtcXFxcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcXFxcbn1cXFxcbi5lZGl0b3ItcG9zdC1vdm8gLmVqX3dyYXAge1xcXFxuICB3aWR0aDogMTAwJTtcXFxcbiAgcGFkZGluZy10b3A6IDk4JTtcXFxcbiAgYmFja2dyb3VuZDogd2hpdGU7XFxcXG59XFxcXG4uZWRpdG9yLXBvc3Qtb3ZvIC5lal9jb21tZW50X19pbnB1dCB7XFxcXG4gIGhlaWdodDogODclO1xcXFxuICAtd2Via2l0LWJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxcXG4gICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXFxcbiAgYm9yZGVyLWJvdHRvbTogLjVweCBzb2xpZCAjYzhjN2NjO1xcXFxufVxcXFxuLmVkaXRvci1wb3N0LW92byAuZWpfY29tbWVudF9faW5wdXQgPiBkaXYge1xcXFxuICAtd2Via2l0LWJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxcXG4gICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXFxcbn1cXFxcbi5lZGl0b3ItcG9zdC1vdm8gLmVqX2NvbW1lbnRfX2lucHV0ID4gZGl2Om50aC1jaGlsZCgxKSB7XFxcXG4gIGhlaWdodDogMTUlO1xcXFxuICB3aWR0aDogODglO1xcXFxuICBtYXJnaW46IDAgYXV0bztcXFxcbn1cXFxcbi5lZGl0b3ItcG9zdC1vdm8gLmVqX2NvbW1lbnRfX2lucHV0ID4gZGl2Om50aC1jaGlsZCgxKSBpbnB1dCB7XFxcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXFxcbiAgbGVmdDogMDtcXFxcbiAgdG9wOiAwO1xcXFxuICB3aWR0aDogMTAwJTtcXFxcbiAgaGVpZ2h0OiAxMDAlO1xcXFxuICBmb250LXNpemU6IDE2cHg7XFxcXG4gIG1hcmdpbjogMDtcXFxcbiAgcGFkZGluZzogMDtcXFxcbiAgZm9udC13ZWlnaHQ6IDcwMDtcXFxcbiAgYm9yZGVyOiBub25lO1xcXFxuICBvdXRsaW5lOiBub25lO1xcXFxuICAtd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMCk7XFxcXG59XFxcXG4uZWRpdG9yLXBvc3Qtb3ZvIC5lal9jb21tZW50X19pbnB1dCA+IGRpdjpudGgtY2hpbGQoMikge1xcXFxuICBoZWlnaHQ6IDc1JTtcXFxcbiAgd2lkdGg6IDg4JTtcXFxcbiAgbWFyZ2luOiAwIGF1dG87XFxcXG4gIG1hcmdpbi10b3A6IDIlO1xcXFxuICBmb250LXNpemU6IDE2cHg7XFxcXG4gIG92ZXJmbG93LXk6IHNjcm9sbDtcXFxcbiAgb3ZlcmZsb3cteDogaGlkZGVuO1xcXFxuICAtd2Via2l0LW92ZXJmbG93LXNjcm9sbGluZzogdG91Y2g7XFxcXG4gIHdvcmQtYnJlYWs6IGJyZWFrLWFsbDtcXFxcbiAgYm9yZGVyOiBub25lO1xcXFxuICBvdXRsaW5lOiBub25lO1xcXFxuICAtd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMCk7XFxcXG4gIGxpbmUtaGVpZ2h0OiAyNHB4O1xcXFxuICBwYWRkaW5nLWJvdHRvbTogNSU7XFxcXG59XFxcXG4uZWRpdG9yLXBvc3Qtb3ZvIC5lal9jb21tZW50X19pbnB1dCA+IGRpdjpudGgtY2hpbGQoMikgaW1nLmZyb20taW5wdXQtb3ZvIHtcXFxcbiAgZGlzcGxheTogaW5saW5lO1xcXFxufVxcXFxuLmVkaXRvci1wb3N0LW92byAuZWpfY29tbWVudF9faW5wdXQgPiBkaXY6bnRoLWNoaWxkKDIpID4gcCB7XFxcXG4gIG1hcmdpbjogMi41cHggMDtcXFxcbn1cXFxcbi5lZGl0b3ItcG9zdC1vdm8gLmVqX2NvbW1lbnRfX2lucHV0ID4gZGl2Om50aC1jaGlsZCgyKSA+IGRpdiB7XFxcXG4gIG1hcmdpbjogMi41cHggMDtcXFxcbn1cXFxcbi5lZGl0b3ItcG9zdC1vdm8gLmVqX2NvbW1lbnRfX2JvdCB7XFxcXG4gIGhlaWdodDogMjUlO1xcXFxuICAtd2Via2l0LWJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxcXG4gICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXFxcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXFxcbn1cXFxcbi5lZGl0b3ItcG9zdC1vdm8gLmVqX2NvbW1lbnRfX2JvdCAuZWpfY29tbWVudF9fY2hvb3NlaW1nIHtcXFxcbiAgcG9zaXRpb246IGFic29sdXRlO1xcXFxuICBsZWZ0OiAwO1xcXFxuICB0b3A6IDA7XFxcXG4gIG9wYWNpdHk6IDA7XFxcXG4gIGRpc3BsYXk6IGJsb2NrO1xcXFxuICB3aWR0aDogMTAwJTtcXFxcbiAgaGVpZ2h0OiAxMDAlO1xcXFxuICBib3JkZXI6IDFweCBzb2xpZCAjODYxODE4O1xcXFxuICAtd2Via2l0LWJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxcXG4gICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXFxcbn1cXFxcbi5lZGl0b3ItcG9zdC1vdm8gLmVqX2NvbW1lbnRfX2JvdCB1bCB7XFxcXG4gIGRpc3BsYXk6IC13ZWJraXQtYm94O1xcXFxuICBkaXNwbGF5OiAtbXMtZmxleGJveDtcXFxcbiAgZGlzcGxheTogZmxleDtcXFxcbiAgZmxvYXQ6IGxlZnQ7XFxcXG4gIHdpZHRoOiA0MyU7XFxcXG4gIG1hcmdpbi10b3A6IDIuMyU7XFxcXG4gIG1hcmdpbi1sZWZ0OiA1JTtcXFxcbn1cXFxcbi5lZGl0b3ItcG9zdC1vdm8gLmVqX2NvbW1lbnRfX2JvdCB1bCBsaSB7XFxcXG4gIHdpZHRoOiAxOCU7XFxcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXFxcbiAgLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yOiByZ2JhKDAsIDAsIDAsIDApO1xcXFxufVxcXFxuLmVkaXRvci1wb3N0LW92byAuZWpfY29tbWVudF9fYm90IHVsIGxpOm50aC1jaGlsZCgxKSB7XFxcXG4gIGJhY2tncm91bmQ6IHVybChcXFwiICsgX193ZWJwYWNrX3JlcXVpcmVfXyg1KSArIFxcXCIpIG5vLXJlcGVhdDtcXFxcbiAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcXFxcbiAgbWFyZ2luLWxlZnQ6IC0zJTtcXFxcbn1cXFxcbi5lZGl0b3ItcG9zdC1vdm8gLmVqX2NvbW1lbnRfX2JvdCB1bCBsaTpudGgtY2hpbGQoMSk6OmFmdGVyIHtcXFxcbiAgY29udGVudDogJyc7XFxcXG4gIGRpc3BsYXk6IGJsb2NrO1xcXFxuICBwYWRkaW5nLXRvcDogMTAwJTtcXFxcbn1cXFxcbmJvZHlbZGF0YS13ZWJwKj10cnVlXSAuZWRpdG9yLXBvc3Qtb3ZvIC5lal9jb21tZW50X19ib3QgdWwgbGk6bnRoLWNoaWxkKDEpIHtcXFxcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFxcXCIgKyBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpICsgXFxcIik7XFxcXG59XFxcXG4uZWRpdG9yLXBvc3Qtb3ZvIC5lal9jb21tZW50X19ib3QgdWwgbGk6bnRoLWNoaWxkKDIpIHtcXFxcbiAgYmFja2dyb3VuZDogdXJsKFxcXCIgKyBfX3dlYnBhY2tfcmVxdWlyZV9fKDc2KSArIFxcXCIpIG5vLXJlcGVhdDtcXFxcbiAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcXFxcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXFxcbiAgbWFyZ2luOiAwIDAgMCAxMCU7XFxcXG59XFxcXG4uZWRpdG9yLXBvc3Qtb3ZvIC5lal9jb21tZW50X19ib3QgdWwgbGk6bnRoLWNoaWxkKDIpOjphZnRlciB7XFxcXG4gIGNvbnRlbnQ6ICcnO1xcXFxuICBkaXNwbGF5OiBibG9jaztcXFxcbiAgcGFkZGluZy10b3A6IDEwMCU7XFxcXG59XFxcXG5ib2R5W2RhdGEtd2VicCo9dHJ1ZV0gLmVkaXRvci1wb3N0LW92byAuZWpfY29tbWVudF9fYm90IHVsIGxpOm50aC1jaGlsZCgyKSB7XFxcXG4gIGJhY2tncm91bmQtaW1hZ2U6IHVybChcXFwiICsgX193ZWJwYWNrX3JlcXVpcmVfXyg3NykgKyBcXFwiKTtcXFxcbn1cXFxcbi5lZGl0b3ItcG9zdC1vdm8gLmVqX2NvbW1lbnRfX2JvdCBidXR0b24ge1xcXFxuICBmbG9hdDogcmlnaHQ7XFxcXG4gIG1hcmdpbi10b3A6IDIuMyU7XFxcXG4gIHdpZHRoOiAyMCU7XFxcXG4gIHBhZGRpbmctdG9wOiA4LjIlO1xcXFxuICBtYXJnaW4tcmlnaHQ6IDUlO1xcXFxuICBib3JkZXItcmFkaXVzOiA0cHg7XFxcXG4gIC13ZWJraXQtYm94LXNpemluZzogYm9yZGVyLWJveDtcXFxcbiAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcXFxufVxcXFxuLmVkaXRvci1wb3N0LW92byAuZWpfY29tbWVudF9fYm90IC5lal9jb21tZW50X19wdWIge1xcXFxuICBiYWNrZ3JvdW5kOiAjZmY1YTAwO1xcXFxufVxcXFxuLmVkaXRvci1wb3N0LW92byAuZWpfY29tbWVudF9fYm90IC5lal9jb21tZW50X19wdWIgPiBzcGFuIHtcXFxcbiAgZGlzcGxheTogLXdlYmtpdC1ib3g7XFxcXG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcXFxuICBkaXNwbGF5OiBmbGV4O1xcXFxuICAtd2Via2l0LWJveC1hbGlnbjogY2VudGVyO1xcXFxuICAgICAgLW1zLWZsZXgtYWxpZ246IGNlbnRlcjtcXFxcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcXFxuICAtd2Via2l0LWJveC1wYWNrOiBjZW50ZXI7XFxcXG4gICAgICAtbXMtZmxleC1wYWNrOiBjZW50ZXI7XFxcXG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxcXG4gIGZvbnQtc2l6ZTogMTZweDtcXFxcbiAgY29sb3I6IHdoaXRlO1xcXFxufVxcXFxuLmVkaXRvci1wb3N0LW92byAuZWpfY29tbWVudF9fYm90IC5lal9jb21tZW50X19jYW5jZWwge1xcXFxuICBib3JkZXI6IDFweCBzb2xpZCAjYzhjN2NjO1xcXFxufVxcXFxuLmVkaXRvci1wb3N0LW92byAuZWpfY29tbWVudF9fYm90IC5lal9jb21tZW50X19jYW5jZWwgPiBzcGFuIHtcXFxcbiAgZGlzcGxheTogLXdlYmtpdC1ib3g7XFxcXG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcXFxuICBkaXNwbGF5OiBmbGV4O1xcXFxuICAtd2Via2l0LWJveC1hbGlnbjogY2VudGVyO1xcXFxuICAgICAgLW1zLWZsZXgtYWxpZ246IGNlbnRlcjtcXFxcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcXFxuICAtd2Via2l0LWJveC1wYWNrOiBjZW50ZXI7XFxcXG4gICAgICAtbXMtZmxleC1wYWNrOiBjZW50ZXI7XFxcXG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxcXG4gIGZvbnQtc2l6ZTogMTZweDtcXFxcbiAgY29sb3I6ICM2MzVmNWY7XFxcXG59XFxcXG4uZWRpdG9yLXBvc3Qtb3ZvIC5zbWlsZS1ob2xkZXIge1xcXFxuICBtYXJnaW46IDAgYXV0bztcXFxcbiAgbWFyZ2luLXRvcDogNSU7XFxcXG4gIHdpZHRoOiAzMDRweDtcXFxcbn1cXFxcbi5lZGl0b3ItcG9zdC1vdm8gLmVqLWNvbW1lbnRfX21zZy0tc2hvdyB7XFxcXG4gIC13ZWJraXQtYW5pbWF0aW9uOiAwLjJzIG1zZy1hbm0tc2hvdyBmb3J3YXJkcztcXFxcbiAgICAgICAgICBhbmltYXRpb246IDAuMnMgbXNnLWFubS1zaG93IGZvcndhcmRzO1xcXFxufVxcXFxuLmVkaXRvci1wb3N0LW92byAuZWotY29tbWVudF9fbXNnLS1oaWRlIHtcXFxcbiAgLXdlYmtpdC1hbmltYXRpb246IDAuMnMgbXNnLWFubS1oaWRlIGZvcndhcmRzO1xcXFxuICAgICAgICAgIGFuaW1hdGlvbjogMC4ycyBtc2ctYW5tLWhpZGUgZm9yd2FyZHM7XFxcXG59XFxcXG5ALXdlYmtpdC1rZXlmcmFtZXMgbXNnLWFubS1zaG93IHtcXFxcbiAgMCUge1xcXFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtOTAlLCAwKTtcXFxcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgLTkwJSwgMCk7XFxcXG4gICAgdmlzaWJpbGl0eTogaGlkZGVuO1xcXFxuICAgIG9wYWNpdHk6IDA7XFxcXG4gIH1cXFxcbiAgMTAwJSB7XFxcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAlLCAwKTtcXFxcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCUsIDApO1xcXFxuICAgIHZpc2liaWxpdHk6IHZpc2libGU7XFxcXG4gICAgb3BhY2l0eTogMTtcXFxcbiAgfVxcXFxufVxcXFxuQGtleWZyYW1lcyBtc2ctYW5tLXNob3cge1xcXFxuICAwJSB7XFxcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC05MCUsIDApO1xcXFxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtOTAlLCAwKTtcXFxcbiAgICB2aXNpYmlsaXR5OiBoaWRkZW47XFxcXG4gICAgb3BhY2l0eTogMDtcXFxcbiAgfVxcXFxuICAxMDAlIHtcXFxcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCUsIDApO1xcXFxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwJSwgMCk7XFxcXG4gICAgdmlzaWJpbGl0eTogdmlzaWJsZTtcXFxcbiAgICBvcGFjaXR5OiAxO1xcXFxuICB9XFxcXG59XFxcXG5ALXdlYmtpdC1rZXlmcmFtZXMgbXNnLWFubS1oaWRlIHtcXFxcbiAgMCUge1xcXFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcXFxcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XFxcXG4gICAgdmlzaWJpbGl0eTogdmlzaWJsZTtcXFxcbiAgICBvcGFjaXR5OiAxO1xcXFxuICB9XFxcXG4gIDEwMCUge1xcXFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtOTAlLCAwKTtcXFxcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgLTkwJSwgMCk7XFxcXG4gICAgdmlzaWJpbGl0eTogaGlkZGVuO1xcXFxuICAgIG9wYWNpdHk6IDA7XFxcXG4gIH1cXFxcbn1cXFxcbkBrZXlmcmFtZXMgbXNnLWFubS1oaWRlIHtcXFxcbiAgMCUge1xcXFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcXFxcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XFxcXG4gICAgdmlzaWJpbGl0eTogdmlzaWJsZTtcXFxcbiAgICBvcGFjaXR5OiAxO1xcXFxuICB9XFxcXG4gIDEwMCUge1xcXFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtOTAlLCAwKTtcXFxcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgLTkwJSwgMCk7XFxcXG4gICAgdmlzaWJpbGl0eTogaGlkZGVuO1xcXFxuICAgIG9wYWNpdHk6IDA7XFxcXG4gIH1cXFxcbn1cXFxcbi5lZGl0b3ItcG9zdC1vdm8gLmVqLWNvbW1lbnRfX21zZyB7XFxcXG4gIGJhY2tncm91bmQ6IHJnYmEoMCwgMCwgMCwgMC43KTtcXFxcbiAgcGFkZGluZy10b3A6IDEwJTtcXFxcbiAgYm9yZGVyLXJhZGl1czogNXB4O1xcXFxuICBmb250LXNpemU6IDE1cHg7XFxcXG4gIHdpZHRoOiA4MCU7XFxcXG4gIG1hcmdpbi1sZWZ0OiAxMCU7XFxcXG4gIG1hcmdpbi10b3A6IC0yJTtcXFxcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC05MCUsIDApO1xcXFxuICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgLTkwJSwgMCk7XFxcXG4gIHZpc2liaWxpdHk6IHZpc2libGU7XFxcXG4gIG9wYWNpdHk6IDE7XFxcXG59XFxcXG4uZWRpdG9yLXBvc3Qtb3ZvIC5lai1jb21tZW50X19tc2cgPiBkaXYge1xcXFxuICBkaXNwbGF5OiAtd2Via2l0LWJveDtcXFxcbiAgZGlzcGxheTogLW1zLWZsZXhib3g7XFxcXG4gIGRpc3BsYXk6IGZsZXg7XFxcXG4gIC13ZWJraXQtYm94LWFsaWduOiBjZW50ZXI7XFxcXG4gICAgICAtbXMtZmxleC1hbGlnbjogY2VudGVyO1xcXFxuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxcXG4gIC13ZWJraXQtYm94LXBhY2s6IGNlbnRlcjtcXFxcbiAgICAgIC1tcy1mbGV4LXBhY2s6IGNlbnRlcjtcXFxcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXFxcbn1cXFxcbi5lZGl0b3ItcG9zdC1vdm8gLmVqLWNvbW1lbnRfX21zZyBzcGFuIHtcXFxcbiAgY29sb3I6IHdoaXRlO1xcXFxufVxcXFxuXFxcIiwgXFxcIlxcXCJdKTtcXG5cXG4vLyBleHBvcnRzXFxuLy8jIHNvdXJjZVVSTD1bbW9kdWxlXVxcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OHZMaTl6Y21NdmNHOXpkQzVzWlhOelB6VXhaRGNpWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFN1FVRkRRVHM3TzBGQlIwRTdRVUZEUVN3eVEwRkJORU1zYlVKQlFXMUNMR05CUVdNc1pVRkJaU3hwUWtGQmFVSXNaMEpCUVdkQ0xHbENRVUZwUWl4M1FrRkJkMElzZFVKQlFYVkNMRmxCUVZrc1YwRkJWeXh6UTBGQmMwTXNjVUpCUVhGQ0xFZEJRVWNzZDBKQlFYZENMR2xDUVVGcFFpeEhRVUZITERKQ1FVRXlRaXhuUWtGQlowSXNhVUpCUVdsQ0xHbENRVUZwUWl3eVFrRkJNa0lzUjBGQlJ5dzJRa0ZCTmtJc1owSkJRV2RDTEhGQ1FVRnhRaXh6UWtGQmMwSXNSMEZCUnl4MVEwRkJkVU1zWjBKQlFXZENMRzFEUVVGdFF5eHRRMEZCYlVNc2MwTkJRWE5ETEVkQlFVY3NOa05CUVRaRExHMURRVUZ0UXl4dFEwRkJiVU1zUjBGQlJ5d3dSRUZCTUVRc1owSkJRV2RDTEdWQlFXVXNiVUpCUVcxQ0xFZEJRVWNzWjBWQlFXZEZMSFZDUVVGMVFpeFpRVUZaTEZkQlFWY3NaMEpCUVdkQ0xHbENRVUZwUWl4dlFrRkJiMElzWTBGQll5eGxRVUZsTEhGQ1FVRnhRaXhwUWtGQmFVSXNhMEpCUVd0Q0xHdEVRVUZyUkN4SFFVRkhMREJFUVVFd1JDeG5Ra0ZCWjBJc1pVRkJaU3h0UWtGQmJVSXNiVUpCUVcxQ0xHOUNRVUZ2UWl4MVFrRkJkVUlzZFVKQlFYVkNMSE5EUVVGelF5d3dRa0ZCTUVJc2FVSkJRV2xDTEd0Q1FVRnJRaXhyUkVGQmEwUXNjMEpCUVhOQ0xIVkNRVUYxUWl4SFFVRkhMRFpGUVVFMlJTeHZRa0ZCYjBJc1IwRkJSeXc0UkVGQk9FUXNiMEpCUVc5Q0xFZEJRVWNzWjBWQlFXZEZMRzlDUVVGdlFpeEhRVUZITEhGRFFVRnhReXhuUWtGQlowSXNiVU5CUVcxRExHMURRVUZ0UXl4eFFrRkJjVUlzUjBGQlJ5dzBSRUZCTkVRc2RVSkJRWFZDTEZsQlFWa3NWMEZCVnl4bFFVRmxMRzFDUVVGdFFpeG5Ra0ZCWjBJc2FVSkJRV2xDTERoQ1FVRTRRaXh0UTBGQmJVTXNiVU5CUVcxRExFZEJRVWNzZDBOQlFYZERMSGxDUVVGNVFpeDVRa0ZCZVVJc2EwSkJRV3RDTEdkQ1FVRm5RaXhsUVVGbExIRkNRVUZ4UWl4dlFrRkJiMElzUjBGQlJ5d3lRMEZCTWtNc1pVRkJaU3gxUWtGQmRVSXNhMFJCUVd0RUxFZEJRVWNzZDBSQlFYZEVMRGhFUVVGM1JTd3lRa0ZCTWtJc2NVSkJRWEZDTEVkQlFVY3NLMFJCUVN0RUxHZENRVUZuUWl4dFFrRkJiVUlzYzBKQlFYTkNMRWRCUVVjc09FVkJRVGhGTERCRVFVRXdSU3hIUVVGSExIZEVRVUYzUkN3clJFRkJlVVVzTWtKQlFUSkNMSEZDUVVGeFFpeHpRa0ZCYzBJc1IwRkJSeXdyUkVGQkswUXNaMEpCUVdkQ0xHMUNRVUZ0UWl4elFrRkJjMElzUjBGQlJ5dzRSVUZCT0VVc01rUkJRVEpGTEVkQlFVY3NORU5CUVRSRExHbENRVUZwUWl4eFFrRkJjVUlzWlVGQlpTeHpRa0ZCYzBJc2NVSkJRWEZDTEhWQ1FVRjFRaXh0UTBGQmJVTXNiVU5CUVcxRExFZEJRVWNzYzBSQlFYTkVMSGRDUVVGM1FpeEhRVUZITERaRVFVRTJSQ3g1UWtGQmVVSXNlVUpCUVhsQ0xHdENRVUZyUWl3NFFrRkJPRUlzSzBKQlFTdENMR2REUVVGblF5dzJRa0ZCTmtJc09FSkJRVGhDTEc5RFFVRnZReXh2UWtGQmIwSXNhVUpCUVdsQ0xFZEJRVWNzZVVSQlFYbEVMRGhDUVVFNFFpeEhRVUZITEdkRlFVRm5SU3g1UWtGQmVVSXNlVUpCUVhsQ0xHdENRVUZyUWl3NFFrRkJPRUlzSzBKQlFTdENMR2REUVVGblF5dzJRa0ZCTmtJc09FSkJRVGhDTEc5RFFVRnZReXh2UWtGQmIwSXNiVUpCUVcxQ0xFZEJRVWNzYTBOQlFXdERMRzFDUVVGdFFpeHRRa0ZCYlVJc2FVSkJRV2xDTEVkQlFVY3NNa05CUVRKRExHdEVRVUZyUkN4clJFRkJhMFFzUjBGQlJ5d3lRMEZCTWtNc2EwUkJRV3RFTEd0RVFVRnJSQ3hIUVVGSExHMURRVUZ0UXl4UlFVRlJMR2xFUVVGcFJDeHBSRUZCYVVRc2VVSkJRWGxDTEdsQ1FVRnBRaXhMUVVGTExGVkJRVlVzSzBOQlFTdERMQ3REUVVFclF5d3dRa0ZCTUVJc2FVSkJRV2xDTEV0QlFVc3NSMEZCUnl3eVFrRkJNa0lzVVVGQlVTeHBSRUZCYVVRc2FVUkJRV2xFTEhsQ1FVRjVRaXhwUWtGQmFVSXNTMEZCU3l4VlFVRlZMQ3REUVVFclF5d3JRMEZCSzBNc01FSkJRVEJDTEdsQ1FVRnBRaXhMUVVGTExFZEJRVWNzYlVOQlFXMURMRkZCUVZFc09FTkJRVGhETERoRFFVRTRReXd3UWtGQk1FSXNhVUpCUVdsQ0xFdEJRVXNzVlVGQlZTeHBSRUZCYVVRc2FVUkJRV2xFTEhsQ1FVRjVRaXhwUWtGQmFVSXNTMEZCU3l4SFFVRkhMREpDUVVFeVFpeFJRVUZSTERoRFFVRTRReXc0UTBGQk9FTXNNRUpCUVRCQ0xHbENRVUZwUWl4TFFVRkxMRlZCUVZVc2FVUkJRV2xFTEdsRVFVRnBSQ3g1UWtGQmVVSXNhVUpCUVdsQ0xFdEJRVXNzUjBGQlJ5eHhRMEZCY1VNc2JVTkJRVzFETEhGQ1FVRnhRaXgxUWtGQmRVSXNiMEpCUVc5Q0xHVkJRV1VzY1VKQlFYRkNMRzlDUVVGdlFpd3JRMEZCSzBNc0swTkJRU3RETEhkQ1FVRjNRaXhsUVVGbExFZEJRVWNzTWtOQlFUSkRMSGxDUVVGNVFpeDVRa0ZCZVVJc2EwSkJRV3RDTERoQ1FVRTRRaXdyUWtGQkswSXNaME5CUVdkRExEWkNRVUUyUWl3NFFrRkJPRUlzYjBOQlFXOURMRWRCUVVjc01FTkJRVEJETEdsQ1FVRnBRaXhIUVVGSE96dEJRVVZzT0U0aUxDSm1hV3hsSWpvaU56VXVhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKbGVIQnZjblJ6SUQwZ2JXOWtkV3hsTG1WNGNHOXlkSE1nUFNCeVpYRjFhWEpsS0Z3aUxpOHVMaTh1TGk4dUxpOXViMlJsWDIxdlpIVnNaWE12TGpBdU1qTXVNVUJqYzNNdGJHOWhaR1Z5TDJ4cFlpOWpjM010WW1GelpTNXFjMXdpS1NncE8xeHVMeThnYVcxd2IzSjBjMXh1WEc1Y2JpOHZJRzF2WkhWc1pWeHVaWGh3YjNKMGN5NXdkWE5vS0Z0dGIyUjFiR1V1YVdRc0lGd2lMbVZrYVhSdmNpMXdiM04wTFc5MmJ5QjdYRnh1SUNCa2FYTndiR0Y1T2lCaWJHOWphenRjWEc0Z0lHMWhjbWRwYmpvZ01EdGNYRzRnSUhCaFpHUnBibWM2SURBN1hGeHVJQ0JpYjNKa1pYSTZJRzV2Ym1VN1hGeHVJQ0IzYVdSMGFEb2dNVEF3SlR0Y1hHNGdJR2hsYVdkb2REb2dNVEF3SlR0Y1hHNGdJR0poWTJ0bmNtOTFibVE2SUNObU1HVm1aalk3WEZ4dUlDQndiM05wZEdsdmJqb2dZV0p6YjJ4MWRHVTdYRnh1SUNCc1pXWjBPaUF3TzF4Y2JpQWdkRzl3T2lBd08xeGNiaUFnTFhkbFltdHBkQzF2ZG1WeVpteHZkeTF6WTNKdmJHeHBibWM2SUhSdmRXTm9PMXhjYmlBZ2IzWmxjbVpzYjNjNklHaHBaR1JsYmp0Y1hHNTlYRnh1TG1Wa2FYUnZjaTF3YjNOMExXOTJieUF1ZDJnZ2UxeGNiaUFnWTI5c2IzSTZJR0pzWVdOck8xeGNibjFjWEc0dVpXUnBkRzl5TFhCdmMzUXRiM1p2SUM1bGJXOXFhU0I3WEZ4dUlDQjNhV1IwYURvZ01qQndlRHRjWEc0Z0lHaGxhV2RvZERvZ01qQndlRHRjWEc0Z0lHSnZjbVJsY2pvZ2JtOXVaVHRjWEc0Z0lIWmxjblJwWTJGc0xXRnNhV2R1T2lCdGFXUmtiR1U3WEZ4dWZWeGNiaTVsWkdsMGIzSXRjRzl6ZEMxdmRtOGdMbVZxWDNkeVlYQWdlMXhjYmlBZ2QybGtkR2c2SURFd01DVTdYRnh1SUNCd1lXUmthVzVuTFhSdmNEb2dPVGdsTzF4Y2JpQWdZbUZqYTJkeWIzVnVaRG9nZDJocGRHVTdYRnh1ZlZ4Y2JpNWxaR2wwYjNJdGNHOXpkQzF2ZG04Z0xtVnFYMk52YlcxbGJuUmZYMmx1Y0hWMElIdGNYRzRnSUdobGFXZG9kRG9nT0RjbE8xeGNiaUFnTFhkbFltdHBkQzFpYjNndGMybDZhVzVuT2lCaWIzSmtaWEl0WW05NE8xeGNiaUFnSUNBZ0lDQWdJQ0JpYjNndGMybDZhVzVuT2lCaWIzSmtaWEl0WW05NE8xeGNiaUFnWW05eVpHVnlMV0p2ZEhSdmJUb2dMalZ3ZUNCemIyeHBaQ0FqWXpoak4yTmpPMXhjYm4xY1hHNHVaV1JwZEc5eUxYQnZjM1F0YjNadklDNWxhbDlqYjIxdFpXNTBYMTlwYm5CMWRDQStJR1JwZGlCN1hGeHVJQ0F0ZDJWaWEybDBMV0p2ZUMxemFYcHBibWM2SUdKdmNtUmxjaTFpYjNnN1hGeHVJQ0FnSUNBZ0lDQWdJR0p2ZUMxemFYcHBibWM2SUdKdmNtUmxjaTFpYjNnN1hGeHVmVnhjYmk1bFpHbDBiM0l0Y0c5emRDMXZkbThnTG1WcVgyTnZiVzFsYm5SZlgybHVjSFYwSUQ0Z1pHbDJPbTUwYUMxamFHbHNaQ2d4S1NCN1hGeHVJQ0JvWldsbmFIUTZJREUxSlR0Y1hHNGdJSGRwWkhSb09pQTRPQ1U3WEZ4dUlDQnRZWEpuYVc0NklEQWdZWFYwYnp0Y1hHNTlYRnh1TG1Wa2FYUnZjaTF3YjNOMExXOTJieUF1WldwZlkyOXRiV1Z1ZEY5ZmFXNXdkWFFnUGlCa2FYWTZiblJvTFdOb2FXeGtLREVwSUdsdWNIVjBJSHRjWEc0Z0lIQnZjMmwwYVc5dU9pQmhZbk52YkhWMFpUdGNYRzRnSUd4bFpuUTZJREE3WEZ4dUlDQjBiM0E2SURBN1hGeHVJQ0IzYVdSMGFEb2dNVEF3SlR0Y1hHNGdJR2hsYVdkb2REb2dNVEF3SlR0Y1hHNGdJR1p2Ym5RdGMybDZaVG9nTVRad2VEdGNYRzRnSUcxaGNtZHBiam9nTUR0Y1hHNGdJSEJoWkdScGJtYzZJREE3WEZ4dUlDQm1iMjUwTFhkbGFXZG9kRG9nTnpBd08xeGNiaUFnWW05eVpHVnlPaUJ1YjI1bE8xeGNiaUFnYjNWMGJHbHVaVG9nYm05dVpUdGNYRzRnSUMxM1pXSnJhWFF0ZEdGd0xXaHBaMmhzYVdkb2RDMWpiMnh2Y2pvZ2NtZGlZU2d3TENBd0xDQXdMQ0F3S1R0Y1hHNTlYRnh1TG1Wa2FYUnZjaTF3YjNOMExXOTJieUF1WldwZlkyOXRiV1Z1ZEY5ZmFXNXdkWFFnUGlCa2FYWTZiblJvTFdOb2FXeGtLRElwSUh0Y1hHNGdJR2hsYVdkb2REb2dOelVsTzF4Y2JpQWdkMmxrZEdnNklEZzRKVHRjWEc0Z0lHMWhjbWRwYmpvZ01DQmhkWFJ2TzF4Y2JpQWdiV0Z5WjJsdUxYUnZjRG9nTWlVN1hGeHVJQ0JtYjI1MExYTnBlbVU2SURFMmNIZzdYRnh1SUNCdmRtVnlabXh2ZHkxNU9pQnpZM0p2Ykd3N1hGeHVJQ0J2ZG1WeVpteHZkeTE0T2lCb2FXUmtaVzQ3WEZ4dUlDQXRkMlZpYTJsMExXOTJaWEptYkc5M0xYTmpjbTlzYkdsdVp6b2dkRzkxWTJnN1hGeHVJQ0IzYjNKa0xXSnlaV0ZyT2lCaWNtVmhheTFoYkd3N1hGeHVJQ0JpYjNKa1pYSTZJRzV2Ym1VN1hGeHVJQ0J2ZFhSc2FXNWxPaUJ1YjI1bE8xeGNiaUFnTFhkbFltdHBkQzEwWVhBdGFHbG5hR3hwWjJoMExXTnZiRzl5T2lCeVoySmhLREFzSURBc0lEQXNJREFwTzF4Y2JpQWdiR2x1WlMxb1pXbG5hSFE2SURJMGNIZzdYRnh1SUNCd1lXUmthVzVuTFdKdmRIUnZiVG9nTlNVN1hGeHVmVnhjYmk1bFpHbDBiM0l0Y0c5emRDMXZkbThnTG1WcVgyTnZiVzFsYm5SZlgybHVjSFYwSUQ0Z1pHbDJPbTUwYUMxamFHbHNaQ2d5S1NCcGJXY3Vabkp2YlMxcGJuQjFkQzF2ZG04Z2UxeGNiaUFnWkdsemNHeGhlVG9nYVc1c2FXNWxPMXhjYm4xY1hHNHVaV1JwZEc5eUxYQnZjM1F0YjNadklDNWxhbDlqYjIxdFpXNTBYMTlwYm5CMWRDQStJR1JwZGpwdWRHZ3RZMmhwYkdRb01pa2dQaUJ3SUh0Y1hHNGdJRzFoY21kcGJqb2dNaTQxY0hnZ01EdGNYRzU5WEZ4dUxtVmthWFJ2Y2kxd2IzTjBMVzkyYnlBdVpXcGZZMjl0YldWdWRGOWZhVzV3ZFhRZ1BpQmthWFk2Ym5Sb0xXTm9hV3hrS0RJcElENGdaR2wySUh0Y1hHNGdJRzFoY21kcGJqb2dNaTQxY0hnZ01EdGNYRzU5WEZ4dUxtVmthWFJ2Y2kxd2IzTjBMVzkyYnlBdVpXcGZZMjl0YldWdWRGOWZZbTkwSUh0Y1hHNGdJR2hsYVdkb2REb2dNalVsTzF4Y2JpQWdMWGRsWW10cGRDMWliM2d0YzJsNmFXNW5PaUJpYjNKa1pYSXRZbTk0TzF4Y2JpQWdJQ0FnSUNBZ0lDQmliM2d0YzJsNmFXNW5PaUJpYjNKa1pYSXRZbTk0TzF4Y2JpQWdiM1psY21ac2IzYzZJR2hwWkdSbGJqdGNYRzU5WEZ4dUxtVmthWFJ2Y2kxd2IzTjBMVzkyYnlBdVpXcGZZMjl0YldWdWRGOWZZbTkwSUM1bGFsOWpiMjF0Wlc1MFgxOWphRzl2YzJWcGJXY2dlMXhjYmlBZ2NHOXphWFJwYjI0NklHRmljMjlzZFhSbE8xeGNiaUFnYkdWbWREb2dNRHRjWEc0Z0lIUnZjRG9nTUR0Y1hHNGdJRzl3WVdOcGRIazZJREE3WEZ4dUlDQmthWE53YkdGNU9pQmliRzlqYXp0Y1hHNGdJSGRwWkhSb09pQXhNREFsTzF4Y2JpQWdhR1ZwWjJoME9pQXhNREFsTzF4Y2JpQWdZbTl5WkdWeU9pQXhjSGdnYzI5c2FXUWdJemcyTVRneE9EdGNYRzRnSUMxM1pXSnJhWFF0WW05NExYTnBlbWx1WnpvZ1ltOXlaR1Z5TFdKdmVEdGNYRzRnSUNBZ0lDQWdJQ0FnWW05NExYTnBlbWx1WnpvZ1ltOXlaR1Z5TFdKdmVEdGNYRzU5WEZ4dUxtVmthWFJ2Y2kxd2IzTjBMVzkyYnlBdVpXcGZZMjl0YldWdWRGOWZZbTkwSUhWc0lIdGNYRzRnSUdScGMzQnNZWGs2SUMxM1pXSnJhWFF0WW05NE8xeGNiaUFnWkdsemNHeGhlVG9nTFcxekxXWnNaWGhpYjNnN1hGeHVJQ0JrYVhOd2JHRjVPaUJtYkdWNE8xeGNiaUFnWm14dllYUTZJR3hsWm5RN1hGeHVJQ0IzYVdSMGFEb2dORE1sTzF4Y2JpQWdiV0Z5WjJsdUxYUnZjRG9nTWk0ekpUdGNYRzRnSUcxaGNtZHBiaTFzWldaME9pQTFKVHRjWEc1OVhGeHVMbVZrYVhSdmNpMXdiM04wTFc5MmJ5QXVaV3BmWTI5dGJXVnVkRjlmWW05MElIVnNJR3hwSUh0Y1hHNGdJSGRwWkhSb09pQXhPQ1U3WEZ4dUlDQndiM05wZEdsdmJqb2djbVZzWVhScGRtVTdYRnh1SUNBdGQyVmlhMmwwTFhSaGNDMW9hV2RvYkdsbmFIUXRZMjlzYjNJNklISm5ZbUVvTUN3Z01Dd2dNQ3dnTUNrN1hGeHVmVnhjYmk1bFpHbDBiM0l0Y0c5emRDMXZkbThnTG1WcVgyTnZiVzFsYm5SZlgySnZkQ0IxYkNCc2FUcHVkR2d0WTJocGJHUW9NU2tnZTF4Y2JpQWdZbUZqYTJkeWIzVnVaRG9nZFhKc0tGd2lJQ3NnY21WeGRXbHlaU2hjSWk0dlkyOXRiVzl1TDJsdFp5OXBZMjl1TG5CdVoxd2lLU0FySUZ3aUtTQnVieTF5WlhCbFlYUTdYRnh1SUNCaVlXTnJaM0p2ZFc1a0xYTnBlbVU2SUdOdmRtVnlPMXhjYmlBZ2JXRnlaMmx1TFd4bFpuUTZJQzB6SlR0Y1hHNTlYRnh1TG1Wa2FYUnZjaTF3YjNOMExXOTJieUF1WldwZlkyOXRiV1Z1ZEY5ZlltOTBJSFZzSUd4cE9tNTBhQzFqYUdsc1pDZ3hLVG82WVdaMFpYSWdlMXhjYmlBZ1kyOXVkR1Z1ZERvZ0p5YzdYRnh1SUNCa2FYTndiR0Y1T2lCaWJHOWphenRjWEc0Z0lIQmhaR1JwYm1jdGRHOXdPaUF4TURBbE8xeGNibjFjWEc1aWIyUjVXMlJoZEdFdGQyVmljQ285ZEhKMVpWMGdMbVZrYVhSdmNpMXdiM04wTFc5MmJ5QXVaV3BmWTI5dGJXVnVkRjlmWW05MElIVnNJR3hwT201MGFDMWphR2xzWkNneEtTQjdYRnh1SUNCaVlXTnJaM0p2ZFc1a0xXbHRZV2RsT2lCMWNtd29YQ0lnS3lCeVpYRjFhWEpsS0Z3aUxpOWpiMjF0YjI0dmFXMW5MM2RsWW5BdmFXTnZiaTUzWldKd1hDSXBJQ3NnWENJcE8xeGNibjFjWEc0dVpXUnBkRzl5TFhCdmMzUXRiM1p2SUM1bGFsOWpiMjF0Wlc1MFgxOWliM1FnZFd3Z2JHazZiblJvTFdOb2FXeGtLRElwSUh0Y1hHNGdJR0poWTJ0bmNtOTFibVE2SUhWeWJDaGNJaUFySUhKbGNYVnBjbVVvWENJdUwyTnZiVzF2Ymk5cGJXY3ZhV052YmpJdWNHNW5YQ0lwSUNzZ1hDSXBJRzV2TFhKbGNHVmhkRHRjWEc0Z0lHSmhZMnRuY205MWJtUXRjMmw2WlRvZ1kyOTJaWEk3WEZ4dUlDQnZkbVZ5Wm14dmR6b2dhR2xrWkdWdU8xeGNiaUFnYldGeVoybHVPaUF3SURBZ01DQXhNQ1U3WEZ4dWZWeGNiaTVsWkdsMGIzSXRjRzl6ZEMxdmRtOGdMbVZxWDJOdmJXMWxiblJmWDJKdmRDQjFiQ0JzYVRwdWRHZ3RZMmhwYkdRb01pazZPbUZtZEdWeUlIdGNYRzRnSUdOdmJuUmxiblE2SUNjbk8xeGNiaUFnWkdsemNHeGhlVG9nWW14dlkyczdYRnh1SUNCd1lXUmthVzVuTFhSdmNEb2dNVEF3SlR0Y1hHNTlYRnh1WW05a2VWdGtZWFJoTFhkbFluQXFQWFJ5ZFdWZElDNWxaR2wwYjNJdGNHOXpkQzF2ZG04Z0xtVnFYMk52YlcxbGJuUmZYMkp2ZENCMWJDQnNhVHB1ZEdndFkyaHBiR1FvTWlrZ2UxeGNiaUFnWW1GamEyZHliM1Z1WkMxcGJXRm5aVG9nZFhKc0tGd2lJQ3NnY21WeGRXbHlaU2hjSWk0dlkyOXRiVzl1TDJsdFp5OTNaV0p3TDJsamIyNHlMbmRsWW5CY0lpa2dLeUJjSWlrN1hGeHVmVnhjYmk1bFpHbDBiM0l0Y0c5emRDMXZkbThnTG1WcVgyTnZiVzFsYm5SZlgySnZkQ0JpZFhSMGIyNGdlMXhjYmlBZ1pteHZZWFE2SUhKcFoyaDBPMXhjYmlBZ2JXRnlaMmx1TFhSdmNEb2dNaTR6SlR0Y1hHNGdJSGRwWkhSb09pQXlNQ1U3WEZ4dUlDQndZV1JrYVc1bkxYUnZjRG9nT0M0eUpUdGNYRzRnSUcxaGNtZHBiaTF5YVdkb2REb2dOU1U3WEZ4dUlDQmliM0prWlhJdGNtRmthWFZ6T2lBMGNIZzdYRnh1SUNBdGQyVmlhMmwwTFdKdmVDMXphWHBwYm1jNklHSnZjbVJsY2kxaWIzZzdYRnh1SUNBZ0lDQWdJQ0FnSUdKdmVDMXphWHBwYm1jNklHSnZjbVJsY2kxaWIzZzdYRnh1ZlZ4Y2JpNWxaR2wwYjNJdGNHOXpkQzF2ZG04Z0xtVnFYMk52YlcxbGJuUmZYMkp2ZENBdVpXcGZZMjl0YldWdWRGOWZjSFZpSUh0Y1hHNGdJR0poWTJ0bmNtOTFibVE2SUNObVpqVmhNREE3WEZ4dWZWeGNiaTVsWkdsMGIzSXRjRzl6ZEMxdmRtOGdMbVZxWDJOdmJXMWxiblJmWDJKdmRDQXVaV3BmWTI5dGJXVnVkRjlmY0hWaUlENGdjM0JoYmlCN1hGeHVJQ0JrYVhOd2JHRjVPaUF0ZDJWaWEybDBMV0p2ZUR0Y1hHNGdJR1JwYzNCc1lYazZJQzF0Y3kxbWJHVjRZbTk0TzF4Y2JpQWdaR2x6Y0d4aGVUb2dabXhsZUR0Y1hHNGdJQzEzWldKcmFYUXRZbTk0TFdGc2FXZHVPaUJqWlc1MFpYSTdYRnh1SUNBZ0lDQWdMVzF6TFdac1pYZ3RZV3hwWjI0NklHTmxiblJsY2p0Y1hHNGdJQ0FnSUNBZ0lDQWdZV3hwWjI0dGFYUmxiWE02SUdObGJuUmxjanRjWEc0Z0lDMTNaV0pyYVhRdFltOTRMWEJoWTJzNklHTmxiblJsY2p0Y1hHNGdJQ0FnSUNBdGJYTXRabXhsZUMxd1lXTnJPaUJqWlc1MFpYSTdYRnh1SUNBZ0lDQWdJQ0FnSUdwMWMzUnBabmt0WTI5dWRHVnVkRG9nWTJWdWRHVnlPMXhjYmlBZ1ptOXVkQzF6YVhwbE9pQXhObkI0TzF4Y2JpQWdZMjlzYjNJNklIZG9hWFJsTzF4Y2JuMWNYRzR1WldScGRHOXlMWEJ2YzNRdGIzWnZJQzVsYWw5amIyMXRaVzUwWDE5aWIzUWdMbVZxWDJOdmJXMWxiblJmWDJOaGJtTmxiQ0I3WEZ4dUlDQmliM0prWlhJNklERndlQ0J6YjJ4cFpDQWpZemhqTjJOak8xeGNibjFjWEc0dVpXUnBkRzl5TFhCdmMzUXRiM1p2SUM1bGFsOWpiMjF0Wlc1MFgxOWliM1FnTG1WcVgyTnZiVzFsYm5SZlgyTmhibU5sYkNBK0lITndZVzRnZTF4Y2JpQWdaR2x6Y0d4aGVUb2dMWGRsWW10cGRDMWliM2c3WEZ4dUlDQmthWE53YkdGNU9pQXRiWE10Wm14bGVHSnZlRHRjWEc0Z0lHUnBjM0JzWVhrNklHWnNaWGc3WEZ4dUlDQXRkMlZpYTJsMExXSnZlQzFoYkdsbmJqb2dZMlZ1ZEdWeU8xeGNiaUFnSUNBZ0lDMXRjeTFtYkdWNExXRnNhV2R1T2lCalpXNTBaWEk3WEZ4dUlDQWdJQ0FnSUNBZ0lHRnNhV2R1TFdsMFpXMXpPaUJqWlc1MFpYSTdYRnh1SUNBdGQyVmlhMmwwTFdKdmVDMXdZV05yT2lCalpXNTBaWEk3WEZ4dUlDQWdJQ0FnTFcxekxXWnNaWGd0Y0dGamF6b2dZMlZ1ZEdWeU8xeGNiaUFnSUNBZ0lDQWdJQ0JxZFhOMGFXWjVMV052Ym5SbGJuUTZJR05sYm5SbGNqdGNYRzRnSUdadmJuUXRjMmw2WlRvZ01UWndlRHRjWEc0Z0lHTnZiRzl5T2lBak5qTTFaalZtTzF4Y2JuMWNYRzR1WldScGRHOXlMWEJ2YzNRdGIzWnZJQzV6Yldsc1pTMW9iMnhrWlhJZ2UxeGNiaUFnYldGeVoybHVPaUF3SUdGMWRHODdYRnh1SUNCdFlYSm5hVzR0ZEc5d09pQTFKVHRjWEc0Z0lIZHBaSFJvT2lBek1EUndlRHRjWEc1OVhGeHVMbVZrYVhSdmNpMXdiM04wTFc5MmJ5QXVaV290WTI5dGJXVnVkRjlmYlhObkxTMXphRzkzSUh0Y1hHNGdJQzEzWldKcmFYUXRZVzVwYldGMGFXOXVPaUF3TGpKeklHMXpaeTFoYm0wdGMyaHZkeUJtYjNKM1lYSmtjenRjWEc0Z0lDQWdJQ0FnSUNBZ1lXNXBiV0YwYVc5dU9pQXdMakp6SUcxelp5MWhibTB0YzJodmR5Qm1iM0ozWVhKa2N6dGNYRzU5WEZ4dUxtVmthWFJ2Y2kxd2IzTjBMVzkyYnlBdVpXb3RZMjl0YldWdWRGOWZiWE5uTFMxb2FXUmxJSHRjWEc0Z0lDMTNaV0pyYVhRdFlXNXBiV0YwYVc5dU9pQXdMakp6SUcxelp5MWhibTB0YUdsa1pTQm1iM0ozWVhKa2N6dGNYRzRnSUNBZ0lDQWdJQ0FnWVc1cGJXRjBhVzl1T2lBd0xqSnpJRzF6WnkxaGJtMHRhR2xrWlNCbWIzSjNZWEprY3p0Y1hHNTlYRnh1UUMxM1pXSnJhWFF0YTJWNVpuSmhiV1Z6SUcxelp5MWhibTB0YzJodmR5QjdYRnh1SUNBd0pTQjdYRnh1SUNBZ0lDMTNaV0pyYVhRdGRISmhibk5tYjNKdE9pQjBjbUZ1YzJ4aGRHVXpaQ2d3TENBdE9UQWxMQ0F3S1R0Y1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwY21GdWMyWnZjbTA2SUhSeVlXNXpiR0YwWlROa0tEQXNJQzA1TUNVc0lEQXBPMXhjYmlBZ0lDQjJhWE5wWW1sc2FYUjVPaUJvYVdSa1pXNDdYRnh1SUNBZ0lHOXdZV05wZEhrNklEQTdYRnh1SUNCOVhGeHVJQ0F4TURBbElIdGNYRzRnSUNBZ0xYZGxZbXRwZEMxMGNtRnVjMlp2Y20wNklIUnlZVzV6YkdGMFpUTmtLREFzSURBbExDQXdLVHRjWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBjbUZ1YzJadmNtMDZJSFJ5WVc1emJHRjBaVE5rS0RBc0lEQWxMQ0F3S1R0Y1hHNGdJQ0FnZG1semFXSnBiR2wwZVRvZ2RtbHphV0pzWlR0Y1hHNGdJQ0FnYjNCaFkybDBlVG9nTVR0Y1hHNGdJSDFjWEc1OVhGeHVRR3RsZVdaeVlXMWxjeUJ0YzJjdFlXNXRMWE5vYjNjZ2UxeGNiaUFnTUNVZ2UxeGNiaUFnSUNBdGQyVmlhMmwwTFhSeVlXNXpabTl5YlRvZ2RISmhibk5zWVhSbE0yUW9NQ3dnTFRrd0pTd2dNQ2s3WEZ4dUlDQWdJQ0FnSUNBZ0lDQWdkSEpoYm5ObWIzSnRPaUIwY21GdWMyeGhkR1V6WkNnd0xDQXRPVEFsTENBd0tUdGNYRzRnSUNBZ2RtbHphV0pwYkdsMGVUb2dhR2xrWkdWdU8xeGNiaUFnSUNCdmNHRmphWFI1T2lBd08xeGNiaUFnZlZ4Y2JpQWdNVEF3SlNCN1hGeHVJQ0FnSUMxM1pXSnJhWFF0ZEhKaGJuTm1iM0p0T2lCMGNtRnVjMnhoZEdVelpDZ3dMQ0F3SlN3Z01DazdYRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RISmhibk5tYjNKdE9pQjBjbUZ1YzJ4aGRHVXpaQ2d3TENBd0pTd2dNQ2s3WEZ4dUlDQWdJSFpwYzJsaWFXeHBkSGs2SUhacGMybGliR1U3WEZ4dUlDQWdJRzl3WVdOcGRIazZJREU3WEZ4dUlDQjlYRnh1ZlZ4Y2JrQXRkMlZpYTJsMExXdGxlV1p5WVcxbGN5QnRjMmN0WVc1dExXaHBaR1VnZTF4Y2JpQWdNQ1VnZTF4Y2JpQWdJQ0F0ZDJWaWEybDBMWFJ5WVc1elptOXliVG9nZEhKaGJuTnNZWFJsTTJRb01Dd2dNQ3dnTUNrN1hGeHVJQ0FnSUNBZ0lDQWdJQ0FnZEhKaGJuTm1iM0p0T2lCMGNtRnVjMnhoZEdVelpDZ3dMQ0F3TENBd0tUdGNYRzRnSUNBZ2RtbHphV0pwYkdsMGVUb2dkbWx6YVdKc1pUdGNYRzRnSUNBZ2IzQmhZMmwwZVRvZ01UdGNYRzRnSUgxY1hHNGdJREV3TUNVZ2UxeGNiaUFnSUNBdGQyVmlhMmwwTFhSeVlXNXpabTl5YlRvZ2RISmhibk5zWVhSbE0yUW9NQ3dnTFRrd0pTd2dNQ2s3WEZ4dUlDQWdJQ0FnSUNBZ0lDQWdkSEpoYm5ObWIzSnRPaUIwY21GdWMyeGhkR1V6WkNnd0xDQXRPVEFsTENBd0tUdGNYRzRnSUNBZ2RtbHphV0pwYkdsMGVUb2dhR2xrWkdWdU8xeGNiaUFnSUNCdmNHRmphWFI1T2lBd08xeGNiaUFnZlZ4Y2JuMWNYRzVBYTJWNVpuSmhiV1Z6SUcxelp5MWhibTB0YUdsa1pTQjdYRnh1SUNBd0pTQjdYRnh1SUNBZ0lDMTNaV0pyYVhRdGRISmhibk5tYjNKdE9pQjBjbUZ1YzJ4aGRHVXpaQ2d3TENBd0xDQXdLVHRjWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBjbUZ1YzJadmNtMDZJSFJ5WVc1emJHRjBaVE5rS0RBc0lEQXNJREFwTzF4Y2JpQWdJQ0IyYVhOcFltbHNhWFI1T2lCMmFYTnBZbXhsTzF4Y2JpQWdJQ0J2Y0dGamFYUjVPaUF4TzF4Y2JpQWdmVnhjYmlBZ01UQXdKU0I3WEZ4dUlDQWdJQzEzWldKcmFYUXRkSEpoYm5ObWIzSnRPaUIwY21GdWMyeGhkR1V6WkNnd0xDQXRPVEFsTENBd0tUdGNYRzRnSUNBZ0lDQWdJQ0FnSUNCMGNtRnVjMlp2Y20wNklIUnlZVzV6YkdGMFpUTmtLREFzSUMwNU1DVXNJREFwTzF4Y2JpQWdJQ0IyYVhOcFltbHNhWFI1T2lCb2FXUmtaVzQ3WEZ4dUlDQWdJRzl3WVdOcGRIazZJREE3WEZ4dUlDQjlYRnh1ZlZ4Y2JpNWxaR2wwYjNJdGNHOXpkQzF2ZG04Z0xtVnFMV052YlcxbGJuUmZYMjF6WnlCN1hGeHVJQ0JpWVdOclozSnZkVzVrT2lCeVoySmhLREFzSURBc0lEQXNJREF1TnlrN1hGeHVJQ0J3WVdSa2FXNW5MWFJ2Y0RvZ01UQWxPMXhjYmlBZ1ltOXlaR1Z5TFhKaFpHbDFjem9nTlhCNE8xeGNiaUFnWm05dWRDMXphWHBsT2lBeE5YQjRPMXhjYmlBZ2QybGtkR2c2SURnd0pUdGNYRzRnSUcxaGNtZHBiaTFzWldaME9pQXhNQ1U3WEZ4dUlDQnRZWEpuYVc0dGRHOXdPaUF0TWlVN1hGeHVJQ0F0ZDJWaWEybDBMWFJ5WVc1elptOXliVG9nZEhKaGJuTnNZWFJsTTJRb01Dd2dMVGt3SlN3Z01DazdYRnh1SUNBZ0lDQWdJQ0FnSUhSeVlXNXpabTl5YlRvZ2RISmhibk5zWVhSbE0yUW9NQ3dnTFRrd0pTd2dNQ2s3WEZ4dUlDQjJhWE5wWW1sc2FYUjVPaUIyYVhOcFlteGxPMXhjYmlBZ2IzQmhZMmwwZVRvZ01UdGNYRzU5WEZ4dUxtVmthWFJ2Y2kxd2IzTjBMVzkyYnlBdVpXb3RZMjl0YldWdWRGOWZiWE5uSUQ0Z1pHbDJJSHRjWEc0Z0lHUnBjM0JzWVhrNklDMTNaV0pyYVhRdFltOTRPMXhjYmlBZ1pHbHpjR3hoZVRvZ0xXMXpMV1pzWlhoaWIzZzdYRnh1SUNCa2FYTndiR0Y1T2lCbWJHVjRPMXhjYmlBZ0xYZGxZbXRwZEMxaWIzZ3RZV3hwWjI0NklHTmxiblJsY2p0Y1hHNGdJQ0FnSUNBdGJYTXRabXhsZUMxaGJHbG5iam9nWTJWdWRHVnlPMXhjYmlBZ0lDQWdJQ0FnSUNCaGJHbG5iaTFwZEdWdGN6b2dZMlZ1ZEdWeU8xeGNiaUFnTFhkbFltdHBkQzFpYjNndGNHRmphem9nWTJWdWRHVnlPMXhjYmlBZ0lDQWdJQzF0Y3kxbWJHVjRMWEJoWTJzNklHTmxiblJsY2p0Y1hHNGdJQ0FnSUNBZ0lDQWdhblZ6ZEdsbWVTMWpiMjUwWlc1ME9pQmpaVzUwWlhJN1hGeHVmVnhjYmk1bFpHbDBiM0l0Y0c5emRDMXZkbThnTG1WcUxXTnZiVzFsYm5SZlgyMXpaeUJ6Y0dGdUlIdGNYRzRnSUdOdmJHOXlPaUIzYUdsMFpUdGNYRzU5WEZ4dVhDSXNJRndpWENKZEtUdGNibHh1THk4Z1pYaHdiM0owYzF4dVhHNWNibHh1THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2WEc0dkx5QlhSVUpRUVVOTElFWlBUMVJGVWx4dUx5OGdaRG92ZDJWaUwyNXZaR1ZmYlc5a2RXeGxjeTh1TUM0eU15NHhRR056Y3kxc2IyRmtaWEloWkRvdmQyVmlMMjV2WkdWZmJXOWtkV3hsY3k5d2IzTjBZM056TFd4dllXUmxjaTlzYVdJL2UzMGhaRG92ZDJWaUwyNXZaR1ZmYlc5a2RXeGxjeTh1TWk0eUxqTkFiR1Z6Y3kxc2IyRmtaWEloTGk5emNtTXZjRzl6ZEM1c1pYTnpYRzR2THlCdGIyUjFiR1VnYVdRZ1BTQTNOVnh1THk4Z2JXOWtkV3hsSUdOb2RXNXJjeUE5SURBaVhTd2ljMjkxY21ObFVtOXZkQ0k2SWlKOVxcbi8vIyBzb3VyY2VVUkw9d2VicGFjay1pbnRlcm5hbDovLy83NVxcblwiKTtcblxuLyoqKi8gfSksXG4vKiA3NiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5ldmFsKFwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBcXFwiaW1nL2ljb24yLnBuZz8zMWUxZjdcXFwiOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZZMjl0Ylc5dUwybHRaeTlwWTI5dU1pNXdibWMvT1dJMk9TSmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU0lzSW1acGJHVWlPaUkzTmk1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdYMTkzWldKd1lXTnJYM0IxWW14cFkxOXdZWFJvWDE4Z0t5QmNJbWx0Wnk5cFkyOXVNaTV3Ym1jL016RmxNV1kzWENJN1hHNWNibHh1THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2WEc0dkx5QlhSVUpRUVVOTElFWlBUMVJGVWx4dUx5OGdMaTl6Y21NdlkyOXRiVzl1TDJsdFp5OXBZMjl1TWk1d2JtZGNiaTh2SUcxdlpIVnNaU0JwWkNBOUlEYzJYRzR2THlCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUNKZExDSnpiM1Z5WTJWU2IyOTBJam9pSW4wPVxcbi8vIyBzb3VyY2VVUkw9d2VicGFjay1pbnRlcm5hbDovLy83NlxcblwiKTtcblxuLyoqKi8gfSksXG4vKiA3NyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5ldmFsKFwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBcXFwiaW1nL2ljb24yLndlYnA/MDhlN2UwXFxcIjsvLyMgc291cmNlVVJMPVttb2R1bGVdXFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk4dkxpOXpjbU12WTI5dGJXOXVMMmx0Wnk5M1pXSndMMmxqYjI0eUxuZGxZbkEvWkRnMU9DSmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU0lzSW1acGJHVWlPaUkzTnk1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdYMTkzWldKd1lXTnJYM0IxWW14cFkxOXdZWFJvWDE4Z0t5QmNJbWx0Wnk5cFkyOXVNaTUzWldKd1B6QTRaVGRsTUZ3aU8xeHVYRzVjYmk4dkx5OHZMeTh2THk4dkx5OHZMeTh2TDF4dUx5OGdWMFZDVUVGRFN5QkdUMDlVUlZKY2JpOHZJQzR2YzNKakwyTnZiVzF2Ymk5cGJXY3ZkMlZpY0M5cFkyOXVNaTUzWldKd1hHNHZMeUJ0YjJSMWJHVWdhV1FnUFNBM04xeHVMeThnYlc5a2RXeGxJR05vZFc1cmN5QTlJREFpWFN3aWMyOTFjbU5sVW05dmRDSTZJaUo5XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzc3XFxuXCIpO1xuXG4vKioqLyB9KVxuLyoqKioqKi8gXSk7XG59KTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9kaXN0L3NjcmlwdHMvbWFpbjEuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, exports) {

eval("module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif(!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZDovd2ViL25vZGVfbW9kdWxlcy93ZWJwYWNrL2J1aWxkaW4vbW9kdWxlLmpzPzEyYTgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xyXG5cdGlmKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XHJcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcclxuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xyXG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XHJcblx0XHRpZighbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcclxuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcclxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XHJcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXHJcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xyXG5cdH1cclxuXHRyZXR1cm4gbW9kdWxlO1xyXG59O1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBkOi93ZWIvbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9tb2R1bGUuanNcbi8vIG1vZHVsZSBpZCA9IDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2\n");

/***/ })
/******/ ]);